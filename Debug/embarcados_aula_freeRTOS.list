
embarcados_aula_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001032c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001268  08010510  08010510  00011510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011778  08011778  000135e4  2**0
                  CONTENTS
  4 .ARM          00000008  08011778  08011778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011780  08011780  000135e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011780  08011780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011784  08011784  00012784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005e4  20000000  08011788  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007408  200005e4  08011d6c  000135e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200079ec  08011d6c  000139ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000135e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ba5c  00000000  00000000  00013614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059da  00000000  00000000  0003f070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fa8  00000000  00000000  00044a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017cb  00000000  00000000  000469f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024697  00000000  00000000  000481c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000256aa  00000000  00000000  0006c85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecde9  00000000  00000000  00091f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0017eced  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009880  00000000  00000000  0017eda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00188628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a3a  00000000  00000000  0018869c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000138  00000000  00000000  0018b0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200005e4 	.word	0x200005e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080104f4 	.word	0x080104f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200005e8 	.word	0x200005e8
 800021c:	080104f4 	.word	0x080104f4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b96a 	b.w	8000fa4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <FreeRTOS_CLIRegisterCommand>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
    {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFAIL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
        CLI_Definition_List_Item_t * pxNewListItem;

        /* Check the parameter is not NULL. */
        configASSERT( pxCommandToRegister != NULL );
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10b      	bne.n	8000fd2 <FreeRTOS_CLIRegisterCommand+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fbe:	f383 8811 	msr	BASEPRI, r3
 8000fc2:	f3bf 8f6f 	isb	sy
 8000fc6:	f3bf 8f4f 	dsb	sy
 8000fca:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	e7fd      	b.n	8000fce <FreeRTOS_CLIRegisterCommand+0x26>

        /* Create a new list item that will reference the command being registered. */
        pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8000fd2:	2008      	movs	r0, #8
 8000fd4:	f00b f852 	bl	800c07c <pvPortMalloc>
 8000fd8:	6138      	str	r0, [r7, #16]
        configASSERT( pxNewListItem != NULL );
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10b      	bne.n	8000ff8 <FreeRTOS_CLIRegisterCommand+0x50>
	__asm volatile
 8000fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fe4:	f383 8811 	msr	BASEPRI, r3
 8000fe8:	f3bf 8f6f 	isb	sy
 8000fec:	f3bf 8f4f 	dsb	sy
 8000ff0:	60bb      	str	r3, [r7, #8]
}
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <FreeRTOS_CLIRegisterCommand+0x4c>

        if( pxNewListItem != NULL )
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d005      	beq.n	800100a <FreeRTOS_CLIRegisterCommand+0x62>
        {
            prvRegisterCommand( pxCommandToRegister, pxNewListItem );
 8000ffe:	6939      	ldr	r1, [r7, #16]
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f8e7 	bl	80011d4 <prvRegisterCommand>
            xReturn = pdPASS;
 8001006:	2301      	movs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800100a:	697b      	ldr	r3, [r7, #20]
    }
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput,
                                       char * pcWriteBuffer,
                                       size_t xWriteBufferLen )
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn = pdTRUE;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
    size_t xCommandStringLength;

    /* Note:  This function is not re-entrant.  It must not be called from more
     * thank one task. */

    if( pxCommand == NULL )
 8001024:	4b3a      	ldr	r3, [pc, #232]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d141      	bne.n	80010b0 <FreeRTOS_CLIProcessCommand+0x9c>
    {
        /* Search for the command string in the list of registered commands. */
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800102c:	4b38      	ldr	r3, [pc, #224]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 800102e:	4a39      	ldr	r2, [pc, #228]	@ (8001114 <FreeRTOS_CLIProcessCommand+0x100>)
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e037      	b.n	80010a4 <FreeRTOS_CLIProcessCommand+0x90>
        {
            pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8001034:	4b36      	ldr	r3, [pc, #216]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61bb      	str	r3, [r7, #24]
            xCommandStringLength = strlen( pcRegisteredCommandString );
 800103e:	69b8      	ldr	r0, [r7, #24]
 8001040:	f7ff f94e 	bl	80002e0 <strlen>
 8001044:	6178      	str	r0, [r7, #20]

            /* To ensure the string lengths match exactly, so as not to pick up
             * a sub-string of a longer command, check the byte after the expected
             * end of the string is either the end of the string or a space before
             * a parameter. */
            if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	69b9      	ldr	r1, [r7, #24]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f00c ff6f 	bl	800df2e <strncmp>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d121      	bne.n	800109a <FreeRTOS_CLIProcessCommand+0x86>
            {
                if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b20      	cmp	r3, #32
 8001060:	d005      	beq.n	800106e <FreeRTOS_CLIProcessCommand+0x5a>
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d115      	bne.n	800109a <FreeRTOS_CLIProcessCommand+0x86>
                {
                    /* The command has been found.  Check it has the expected
                     * number of parameters.  If cExpectedNumberOfParameters is -1,
                     * then there could be a variable number of parameters and no
                     * check is made. */
                    if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800106e:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db18      	blt.n	80010ae <FreeRTOS_CLIProcessCommand+0x9a>
                    {
                        if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f000 f911 	bl	80012a4 <prvGetNumberOfParameters>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d00c      	beq.n	80010ae <FreeRTOS_CLIProcessCommand+0x9a>
                        {
                            xReturn = pdFALSE;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
                        }
                    }

                    break;
 8001098:	e009      	b.n	80010ae <FreeRTOS_CLIProcessCommand+0x9a>
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800109a:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1c3      	bne.n	8001034 <FreeRTOS_CLIProcessCommand+0x20>
 80010ac:	e000      	b.n	80010b0 <FreeRTOS_CLIProcessCommand+0x9c>
                    break;
 80010ae:	bf00      	nop
                }
            }
        }
    }

    if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80010b0:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00b      	beq.n	80010d0 <FreeRTOS_CLIProcessCommand+0xbc>
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d108      	bne.n	80010d0 <FreeRTOS_CLIProcessCommand+0xbc>
    {
        /* The command was found, but the number of parameters with the command
         * was incorrect. */
        strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4915      	ldr	r1, [pc, #84]	@ (8001118 <FreeRTOS_CLIProcessCommand+0x104>)
 80010c2:	68b8      	ldr	r0, [r7, #8]
 80010c4:	f00c ff45 	bl	800df52 <strncpy>
        pxCommand = NULL;
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e01a      	b.n	8001106 <FreeRTOS_CLIProcessCommand+0xf2>
    }
    else if( pxCommand != NULL )
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00f      	beq.n	80010f8 <FreeRTOS_CLIProcessCommand+0xe4>
    {
        /* Call the callback function that is registered to this command. */
        xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80010d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	68b8      	ldr	r0, [r7, #8]
 80010e6:	4798      	blx	r3
 80010e8:	61f8      	str	r0, [r7, #28]

        /* If xReturn is pdFALSE, then no further strings will be returned
         * after this one, and	pxCommand can be reset to NULL ready to search
         * for the next entered command. */
        if( xReturn == pdFALSE )
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10a      	bne.n	8001106 <FreeRTOS_CLIProcessCommand+0xf2>
        {
            pxCommand = NULL;
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e006      	b.n	8001106 <FreeRTOS_CLIProcessCommand+0xf2>
        }
    }
    else
    {
        /* pxCommand was NULL, the command was not found. */
        strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4908      	ldr	r1, [pc, #32]	@ (800111c <FreeRTOS_CLIProcessCommand+0x108>)
 80010fc:	68b8      	ldr	r0, [r7, #8]
 80010fe:	f00c ff28 	bl	800df52 <strncpy>
        xReturn = pdFALSE;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001106:	69fb      	ldr	r3, [r7, #28]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000600 	.word	0x20000600
 8001114:	20000000 	.word	0x20000000
 8001118:	08010548 	.word	0x08010548
 800111c:	080105a0 	.word	0x080105a0

08001120 <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char * FreeRTOS_CLIGetParameter( const char * pcCommandString,
                                       UBaseType_t uxWantedParameter,
                                       BaseType_t * pxParameterStringLength )
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
    UBaseType_t uxParametersFound = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
    const char * pcReturn = NULL;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]

    *pxParameterStringLength = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]

    while( uxParametersFound < uxWantedParameter )
 800113a:	e03b      	b.n	80011b4 <FreeRTOS_CLIGetParameter+0x94>
    {
        /* Index the character pointer past the current word.  If this is the start
         * of the command string then the first word is the command itself. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
        {
            pcCommandString++;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3301      	adds	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d007      	beq.n	800115a <FreeRTOS_CLIGetParameter+0x3a>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b20      	cmp	r3, #32
 8001150:	d1f4      	bne.n	800113c <FreeRTOS_CLIGetParameter+0x1c>
        }

        /* Find the start of the next string. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001152:	e002      	b.n	800115a <FreeRTOS_CLIGetParameter+0x3a>
        {
            pcCommandString++;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <FreeRTOS_CLIGetParameter+0x4a>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b20      	cmp	r3, #32
 8001168:	d0f4      	beq.n	8001154 <FreeRTOS_CLIGetParameter+0x34>
        }

        /* Was a string found? */
        if( *pcCommandString != 0x00 )
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d025      	beq.n	80011be <FreeRTOS_CLIGetParameter+0x9e>
        {
            /* Is this the start of the required parameter? */
            uxParametersFound++;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]

            if( uxParametersFound == uxWantedParameter )
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	429a      	cmp	r2, r3
 800117e:	d119      	bne.n	80011b4 <FreeRTOS_CLIGetParameter+0x94>
            {
                /* How long is the parameter? */
                pcReturn = pcCommandString;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	613b      	str	r3, [r7, #16]

                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8001184:	e007      	b.n	8001196 <FreeRTOS_CLIGetParameter+0x76>
                {
                    ( *pxParameterStringLength )++;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	601a      	str	r2, [r3, #0]
                    pcCommandString++;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <FreeRTOS_CLIGetParameter+0x86>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d1ef      	bne.n	8001186 <FreeRTOS_CLIGetParameter+0x66>
                }

                if( *pxParameterStringLength == 0 )
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d109      	bne.n	80011c2 <FreeRTOS_CLIGetParameter+0xa2>
                {
                    pcReturn = NULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
                }

                break;
 80011b2:	e006      	b.n	80011c2 <FreeRTOS_CLIGetParameter+0xa2>
    while( uxParametersFound < uxWantedParameter )
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d3c2      	bcc.n	8001142 <FreeRTOS_CLIGetParameter+0x22>
 80011bc:	e002      	b.n	80011c4 <FreeRTOS_CLIGetParameter+0xa4>
            }
        }
        else
        {
            break;
 80011be:	bf00      	nop
 80011c0:	e000      	b.n	80011c4 <FreeRTOS_CLIGetParameter+0xa4>
                break;
 80011c2:	bf00      	nop
        }
    }

    return pcReturn;
 80011c4:	693b      	ldr	r3, [r7, #16]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <prvRegisterCommand>:
/*-----------------------------------------------------------*/

static void prvRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister,
                                CLI_Definition_List_Item_t * pxCliDefinitionListItemBuffer )
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
    static CLI_Definition_List_Item_t * pxLastCommandInList = &xRegisteredCommands;

    /* Check the parameters are not NULL. */
    configASSERT( pxCommandToRegister != NULL );
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10b      	bne.n	80011fc <prvRegisterCommand+0x28>
	__asm volatile
 80011e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011e8:	f383 8811 	msr	BASEPRI, r3
 80011ec:	f3bf 8f6f 	isb	sy
 80011f0:	f3bf 8f4f 	dsb	sy
 80011f4:	60fb      	str	r3, [r7, #12]
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <prvRegisterCommand+0x24>
    configASSERT( pxCliDefinitionListItemBuffer != NULL );
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10b      	bne.n	800121a <prvRegisterCommand+0x46>
	__asm volatile
 8001202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001206:	f383 8811 	msr	BASEPRI, r3
 800120a:	f3bf 8f6f 	isb	sy
 800120e:	f3bf 8f4f 	dsb	sy
 8001212:	60bb      	str	r3, [r7, #8]
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	e7fd      	b.n	8001216 <prvRegisterCommand+0x42>

    taskENTER_CRITICAL();
 800121a:	f00a fe0d 	bl	800be38 <vPortEnterCritical>
    {
        /* Reference the command being registered from the newly created
         * list item. */
        pxCliDefinitionListItemBuffer->pxCommandLineDefinition = pxCommandToRegister;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	601a      	str	r2, [r3, #0]

        /* The new list item will get added to the end of the list, so
         * pxNext has nowhere to point. */
        pxCliDefinitionListItemBuffer->pxNext = NULL;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2200      	movs	r2, #0
 8001228:	605a      	str	r2, [r3, #4]

        /* Add the newly created list item to the end of the already existing
         * list. */
        pxLastCommandInList->pxNext = pxCliDefinitionListItemBuffer;
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <prvRegisterCommand+0x70>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	605a      	str	r2, [r3, #4]

        /* Set the end of list marker to the new list item. */
        pxLastCommandInList = pxCliDefinitionListItemBuffer;
 8001232:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <prvRegisterCommand+0x70>)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	6013      	str	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 8001238:	f00a fe30 	bl	800be9c <vPortExitCritical>
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000008 	.word	0x20000008

08001248 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char * pcWriteBuffer,
                                  size_t xWriteBufferLen,
                                  const char * pcCommandString )
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn;

    ( void ) pcCommandString;

    if( pxCommand == NULL )
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <prvHelpCommand+0x54>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <prvHelpCommand+0x1a>
    {
        /* Reset the pxCommand pointer back to the start of the list. */
        pxCommand = &xRegisteredCommands;
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <prvHelpCommand+0x54>)
 800125e:	4a10      	ldr	r2, [pc, #64]	@ (80012a0 <prvHelpCommand+0x58>)
 8001260:	601a      	str	r2, [r3, #0]
    }

    /* Return the next command help string, before moving the pointer on to
     * the next command in the list. */
    strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <prvHelpCommand+0x54>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	4619      	mov	r1, r3
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f00c fe6f 	bl	800df52 <strncpy>
    pxCommand = pxCommand->pxNext;
 8001274:	4b09      	ldr	r3, [pc, #36]	@ (800129c <prvHelpCommand+0x54>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4a08      	ldr	r2, [pc, #32]	@ (800129c <prvHelpCommand+0x54>)
 800127c:	6013      	str	r3, [r2, #0]

    if( pxCommand == NULL )
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <prvHelpCommand+0x54>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <prvHelpCommand+0x44>
    {
        /* There are no more commands in the list, so there will be no more
         *  strings to return after this one and pdFALSE should be returned. */
        xReturn = pdFALSE;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	e001      	b.n	8001290 <prvHelpCommand+0x48>
    }
    else
    {
        xReturn = pdTRUE;
 800128c:	2301      	movs	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001290:	697b      	ldr	r3, [r7, #20]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000604 	.word	0x20000604
 80012a0:	20000000 	.word	0x20000000

080012a4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char * pcCommandString )
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    int8_t cParameters = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
    BaseType_t xLastCharacterWasSpace = pdFALSE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]

    /* Count the number of space delimited words in pcCommandString. */
    while( *pcCommandString != 0x00 )
 80012b4:	e014      	b.n	80012e0 <prvGetNumberOfParameters+0x3c>
    {
        if( ( *pcCommandString ) == ' ' )
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b20      	cmp	r3, #32
 80012bc:	d10b      	bne.n	80012d6 <prvGetNumberOfParameters+0x32>
        {
            if( xLastCharacterWasSpace != pdTRUE )
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d00a      	beq.n	80012da <prvGetNumberOfParameters+0x36>
            {
                cParameters++;
 80012c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	3301      	adds	r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	73fb      	strb	r3, [r7, #15]
                xLastCharacterWasSpace = pdTRUE;
 80012d0:	2301      	movs	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	e001      	b.n	80012da <prvGetNumberOfParameters+0x36>
            }
        }
        else
        {
            xLastCharacterWasSpace = pdFALSE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
        }

        pcCommandString++;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3301      	adds	r3, #1
 80012de:	607b      	str	r3, [r7, #4]
    while( *pcCommandString != 0x00 )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1e6      	bne.n	80012b6 <prvGetNumberOfParameters+0x12>
    }

    /* If the command string ended with spaces, then there will have been too
     * many parameters counted. */
    if( xLastCharacterWasSpace == pdTRUE )
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <prvGetNumberOfParameters+0x56>
    {
        cParameters--;
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3b01      	subs	r3, #1
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	73fb      	strb	r3, [r7, #15]
    }

    /* The value returned is one less than the number of space delimited words,
     * as the first word should be the command itself. */
    return cParameters;
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

char uart_data;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
    char data = huart->Instance->RDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133a:	b2db      	uxtb	r3, r3
 800133c:	72fb      	strb	r3, [r7, #11]
    xQueueSendFromISR(uart_rx_q, &data, &pxHigherPriorityTaskWoken);
 800133e:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <HAL_UART_RxCpltCallback+0x50>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f107 020c 	add.w	r2, r7, #12
 8001346:	f107 010b 	add.w	r1, r7, #11
 800134a:	2300      	movs	r3, #0
 800134c:	f008 f81a 	bl	8009384 <xQueueGenericSendFromISR>
    HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)&uart_data, 1);
 8001350:	2201      	movs	r2, #1
 8001352:	490a      	ldr	r1, [pc, #40]	@ (800137c <HAL_UART_RxCpltCallback+0x54>)
 8001354:	480a      	ldr	r0, [pc, #40]	@ (8001380 <HAL_UART_RxCpltCallback+0x58>)
 8001356:	f005 fb95 	bl	8006a84 <HAL_UART_Receive_IT>
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <HAL_UART_RxCpltCallback+0x48>
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <HAL_UART_RxCpltCallback+0x5c>)
 8001362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	f3bf 8f4f 	dsb	sy
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200008e8 	.word	0x200008e8
 800137c:	200008ec 	.word	0x200008ec
 8001380:	20000748 	.word	0x20000748
 8001384:	e000ed04 	.word	0xe000ed04

08001388 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
    xSemaphoreGiveFromISR(sem_tx_uart, &pxHigherPriorityTaskWoken);
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_UART_TxCpltCallback+0x3c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f107 020c 	add.w	r2, r7, #12
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f008 f88e 	bl	80094c0 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d007      	beq.n	80013ba <HAL_UART_TxCpltCallback+0x32>
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <HAL_UART_TxCpltCallback+0x40>)
 80013ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	f3bf 8f4f 	dsb	sy
 80013b6:	f3bf 8f6f 	isb	sy
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200008e0 	.word	0x200008e0
 80013c8:	e000ed04 	.word	0xe000ed04

080013cc <get_char_from_uart>:

// Antiga UART_RX_RTOS - Retorna os dados recebidos pela UART
BaseType_t get_char_from_uart(char *pData, TickType_t timeout) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
    return xQueueReceive(uart_rx_q, pData, timeout);
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <get_char_from_uart+0x24>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	f008 f8fe 	bl	80095e0 <xQueueReceive>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200008e8 	.word	0x200008e8

080013f4 <print_string>:
//         UART_TX_RTOS(inputString, 1);  // Envia um caractere por vez
//         inputString++;
//     }
// }

void print_string(char *string, TickType_t timeout) {
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
    if (xSemaphoreTake(mutex_uart, timeout) == pdTRUE) {
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <print_string+0x4c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6839      	ldr	r1, [r7, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f008 f9cd 	bl	80097a4 <xQueueSemaphoreTake>
 800140a:	4603      	mov	r3, r0
 800140c:	2b01      	cmp	r3, #1
 800140e:	d112      	bne.n	8001436 <print_string+0x42>
        (void)xMessageBufferSend(message_buffer, string, strlen(string),
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <print_string+0x50>)
 8001412:	681c      	ldr	r4, [r3, #0]
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7fe ff63 	bl	80002e0 <strlen>
 800141a:	4602      	mov	r2, r0
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4620      	mov	r0, r4
 8001424:	f008 fc88 	bl	8009d38 <xStreamBufferSend>
                                 portMAX_DELAY);
        xSemaphoreGive(mutex_uart);
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <print_string+0x4c>)
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	2300      	movs	r3, #0
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	f007 fea5 	bl	8009180 <xQueueGenericSend>
    }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bd90      	pop	{r4, r7, pc}
 800143e:	bf00      	nop
 8001440:	200008d8 	.word	0x200008d8
 8001444:	200008dc 	.word	0x200008dc

08001448 <print_char>:

void print_char(char string, TickType_t timeout) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
    if (xSemaphoreTake(mutex_uart, timeout) == pdTRUE) {
 8001454:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <print_char+0x44>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6839      	ldr	r1, [r7, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f008 f9a2 	bl	80097a4 <xQueueSemaphoreTake>
 8001460:	4603      	mov	r3, r0
 8001462:	2b01      	cmp	r3, #1
 8001464:	d10e      	bne.n	8001484 <print_char+0x3c>
        (void)xMessageBufferSend(message_buffer, &string, 1, portMAX_DELAY);
 8001466:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <print_char+0x48>)
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	1df9      	adds	r1, r7, #7
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	2201      	movs	r2, #1
 8001472:	f008 fc61 	bl	8009d38 <xStreamBufferSend>
        xSemaphoreGive(mutex_uart);
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <print_char+0x44>)
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	2300      	movs	r3, #0
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	f007 fe7e 	bl	8009180 <xQueueGenericSend>
    }
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200008d8 	.word	0x200008d8
 8001490:	200008dc 	.word	0x200008dc

08001494 <print_task>:
//     }
// }

#define BUFFER_SIZE 512

static void print_task(void *params) {
 8001494:	b580      	push	{r7, lr}
 8001496:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800149a:	af00      	add	r7, sp, #0
 800149c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80014a0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80014a4:	6018      	str	r0, [r3, #0]
    char buffer[BUFFER_SIZE];

    while (1) {
        size_t size =
            xMessageBufferReceive(message_buffer, buffer, BUFFER_SIZE, portMAX_DELAY);
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <print_task+0x54>)
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	f107 010c 	add.w	r1, r7, #12
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014b6:	f008 fd35 	bl	8009f24 <xStreamBufferReceive>
 80014ba:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
        if (size) {
 80014be:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0ef      	beq.n	80014a6 <print_task+0x12>
            HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t *)buffer, size);
 80014c6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	@ (80014ec <print_task+0x58>)
 80014d4:	f005 fb22 	bl	8006b1c <HAL_UART_Transmit_DMA>
            xSemaphoreTake(sem_tx_uart, portMAX_DELAY);
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <print_task+0x5c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	4618      	mov	r0, r3
 80014e2:	f008 f95f 	bl	80097a4 <xQueueSemaphoreTake>
    while (1) {
 80014e6:	e7de      	b.n	80014a6 <print_task+0x12>
 80014e8:	200008dc 	.word	0x200008dc
 80014ec:	20000748 	.word	0x20000748
 80014f0:	200008e0 	.word	0x200008e0
 80014f4:	00000000 	.word	0x00000000

080014f8 <adc_task>:
        }
    }
}

void adc_task(void *param) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	f5ad 6d62 	sub.w	sp, sp, #3616	@ 0xe20
 80014fe:	af02      	add	r7, sp, #8
 8001500:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001504:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 8001508:	6018      	str	r0, [r3, #0]
    uint16_t adcBuffer[256];
    float ReIm[256 * 2];
    float mod[256];
    // uint32_t count = 0;

    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuffer, 256);
 800150a:	f507 6341 	add.w	r3, r7, #3088	@ 0xc10
 800150e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001512:	4619      	mov	r1, r3
 8001514:	485a      	ldr	r0, [pc, #360]	@ (8001680 <adc_task+0x188>)
 8001516:	f001 fcd9 	bl	8002ecc <HAL_ADC_Start_DMA>
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 800151a:	2300      	movs	r3, #0
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001522:	4a58      	ldr	r2, [pc, #352]	@ (8001684 <adc_task+0x18c>)
 8001524:	2100      	movs	r1, #0
 8001526:	4858      	ldr	r0, [pc, #352]	@ (8001688 <adc_task+0x190>)
 8001528:	f002 fc6e 	bl	8003e08 <HAL_DAC_Start_DMA>
                      (const uint32_t *)sin_wave_3rd_harmonic, 256,
                      DAC_ALIGN_12B_R);

    HAL_TIM_Base_Start(&htim2);
 800152c:	4857      	ldr	r0, [pc, #348]	@ (800168c <adc_task+0x194>)
 800152e:	f004 fcf3 	bl	8005f18 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim3);
 8001532:	4857      	ldr	r0, [pc, #348]	@ (8001690 <adc_task+0x198>)
 8001534:	f004 fcf0 	bl	8005f18 <HAL_TIM_Base_Start>

    while (1) {
        xSemaphoreTake(sem_adc, portMAX_DELAY);
 8001538:	4b56      	ldr	r3, [pc, #344]	@ (8001694 <adc_task+0x19c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	4618      	mov	r0, r3
 8001542:	f008 f92f 	bl	80097a4 <xQueueSemaphoreTake>

        // volatile TickType_t start = xTaskGetTickCount();

        int k = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
        for (int i = 0; i < 256; i++) {
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 3e10 	str.w	r3, [r7, #3600]	@ 0xe10
 8001552:	e02f      	b.n	80015b4 <adc_task+0xbc>
            ReIm[k] = (float)adcBuffer[i] * 0.0008056640625f;
 8001554:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001558:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800155c:	f8d7 2e10 	ldr.w	r2, [r7, #3600]	@ 0xe10
 8001560:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001564:	ee07 3a90 	vmov	s15, r3
 8001568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800156c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001698 <adc_task+0x1a0>
 8001570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001574:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001578:	f6a3 2208 	subw	r2, r3, #2568	@ 0xa08
 800157c:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	edc3 7a00 	vstr	s15, [r3]
            ReIm[k + 1] = 0.0;
 8001588:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 800158c:	3301      	adds	r3, #1
 800158e:	f607 6218 	addw	r2, r7, #3608	@ 0xe18
 8001592:	f6a2 2208 	subw	r2, r2, #2568	@ 0xa08
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
            k += 2;
 80015a0:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 80015a4:	3302      	adds	r3, #2
 80015a6:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
        for (int i = 0; i < 256; i++) {
 80015aa:	f8d7 3e10 	ldr.w	r3, [r7, #3600]	@ 0xe10
 80015ae:	3301      	adds	r3, #1
 80015b0:	f8c7 3e10 	str.w	r3, [r7, #3600]	@ 0xe10
 80015b4:	f8d7 3e10 	ldr.w	r3, [r7, #3600]	@ 0xe10
 80015b8:	2bff      	cmp	r3, #255	@ 0xff
 80015ba:	ddcb      	ble.n	8001554 <adc_task+0x5c>
        }

        arm_cfft_f32(&arm_cfft_sR_f32_len256, ReIm, 0, 1);
 80015bc:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80015c0:	2301      	movs	r3, #1
 80015c2:	2200      	movs	r2, #0
 80015c4:	4835      	ldr	r0, [pc, #212]	@ (800169c <adc_task+0x1a4>)
 80015c6:	f00b fa6d 	bl	800caa4 <arm_cfft_f32>
        arm_cmplx_mag_f32(ReIm, mod, 256);
 80015ca:	f107 0110 	add.w	r1, r7, #16
 80015ce:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80015d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015d6:	4618      	mov	r0, r3
 80015d8:	f00b fafc 	bl	800cbd4 <arm_cmplx_mag_f32>
        arm_scale_f32(mod, 0.0078125, mod, 128);
 80015dc:	f107 0110 	add.w	r1, r7, #16
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	2280      	movs	r2, #128	@ 0x80
 80015e6:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80016a0 <adc_task+0x1a8>
 80015ea:	4618      	mov	r0, r3
 80015ec:	f00b fc16 	bl	800ce1c <arm_scale_f32>
        mod[0] = mod[0] * 0.5;
 80015f0:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 80015f4:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001604:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001608:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 800160c:	edc3 7a00 	vstr	s15, [r3]

        volatile float fund_phase = atan2f(ReIm[3], ReIm[2]) * 180 /
 8001610:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001614:	f6a3 2308 	subw	r3, r3, #2568	@ 0xa08
 8001618:	edd3 7a03 	vldr	s15, [r3, #12]
 800161c:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001620:	f6a3 2308 	subw	r3, r3, #2568	@ 0xa08
 8001624:	ed93 7a02 	vldr	s14, [r3, #8]
 8001628:	eef0 0a47 	vmov.f32	s1, s14
 800162c:	eeb0 0a67 	vmov.f32	s0, s15
 8001630:	f00e fdc0 	bl	80101b4 <atan2f>
 8001634:	eef0 7a40 	vmov.f32	s15, s0
 8001638:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80016a4 <adc_task+0x1ac>
 800163c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001640:	ee17 0a90 	vmov	r0, s15
 8001644:	f7fe ffb8 	bl	80005b8 <__aeabi_f2d>
 8001648:	a30b      	add	r3, pc, #44	@ (adr r3, 8001678 <adc_task+0x180>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	f7ff f935 	bl	80008bc <__aeabi_ddiv>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff fadd 	bl	8000c18 <__aeabi_d2f>
 800165e:	4602      	mov	r2, r0
 8001660:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001664:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 8001668:	601a      	str	r2, [r3, #0]
                                    M_PI;  // Fase R da harmonica fundamental
        (void)fund_phase;
 800166a:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800166e:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 8001672:	681b      	ldr	r3, [r3, #0]
    while (1) {
 8001674:	e760      	b.n	8001538 <adc_task+0x40>
 8001676:	bf00      	nop
 8001678:	54442d18 	.word	0x54442d18
 800167c:	400921fb 	.word	0x400921fb
 8001680:	20000608 	.word	0x20000608
 8001684:	2000020c 	.word	0x2000020c
 8001688:	200006d4 	.word	0x200006d4
 800168c:	2000083c 	.word	0x2000083c
 8001690:	20000888 	.word	0x20000888
 8001694:	200008e4 	.word	0x200008e4
 8001698:	3a533333 	.word	0x3a533333
 800169c:	08010850 	.word	0x08010850
 80016a0:	3c000000 	.word	0x3c000000
 80016a4:	43340000 	.word	0x43340000

080016a8 <HAL_ADC_ConvCpltCallback>:
        // volatile TickType_t stop = xTaskGetTickCount();
        //(void)fund_phase;
    }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
    xSemaphoreGiveFromISR(sem_adc, &pxHigherPriorityTaskWoken);
 80016b4:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f107 020c 	add.w	r2, r7, #12
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f007 fefe 	bl	80094c0 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <HAL_ADC_ConvCpltCallback+0x32>
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <HAL_ADC_ConvCpltCallback+0x40>)
 80016cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	f3bf 8f4f 	dsb	sy
 80016d6:	f3bf 8f6f 	isb	sy
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200008e4 	.word	0x200008e4
 80016e8:	e000ed04 	.word	0xe000ed04

080016ec <HAL_DAC_ConvCpltCallbackCh1>:

volatile int dac_counter = 0;
volatile int flag = 0;
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hadc) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	6078      	str	r0, [r7, #4]
#if 1
    dac_counter++;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	3301      	adds	r3, #1
 80016fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001764 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 80016fc:	6013      	str	r3, [r2, #0]
    if (dac_counter >= 120) {
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b77      	cmp	r3, #119	@ 0x77
 8001704:	dd29      	ble.n	800175a <HAL_DAC_ConvCpltCallbackCh1+0x6e>
        dac_counter = 0;
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
        HAL_TIM_Base_Stop(&htim2);
 800170c:	4816      	ldr	r0, [pc, #88]	@ (8001768 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 800170e:	f004 fc65 	bl	8005fdc <HAL_TIM_Base_Stop>
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001712:	2100      	movs	r1, #0
 8001714:	4815      	ldr	r0, [pc, #84]	@ (800176c <HAL_DAC_ConvCpltCallbackCh1+0x80>)
 8001716:	f002 fc4b 	bl	8003fb0 <HAL_DAC_Stop_DMA>

        if (flag == 0) {
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10c      	bne.n	800173c <HAL_DAC_ConvCpltCallbackCh1+0x50>
            HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 8001722:	2300      	movs	r3, #0
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800172a:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 800172c:	2100      	movs	r1, #0
 800172e:	480f      	ldr	r0, [pc, #60]	@ (800176c <HAL_DAC_ConvCpltCallbackCh1+0x80>)
 8001730:	f002 fb6a 	bl	8003e08 <HAL_DAC_Start_DMA>
                              (uint32_t *)sin_wave_3rd_harmonic, 256,
                              DAC_ALIGN_12B_R);
            flag = 1;
 8001734:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e00b      	b.n	8001754 <HAL_DAC_ConvCpltCallbackCh1+0x68>
        } else {
            HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)sin_wave, 256,
 800173c:	2300      	movs	r3, #0
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001744:	4a0c      	ldr	r2, [pc, #48]	@ (8001778 <HAL_DAC_ConvCpltCallbackCh1+0x8c>)
 8001746:	2100      	movs	r1, #0
 8001748:	4808      	ldr	r0, [pc, #32]	@ (800176c <HAL_DAC_ConvCpltCallbackCh1+0x80>)
 800174a:	f002 fb5d 	bl	8003e08 <HAL_DAC_Start_DMA>
                              DAC_ALIGN_12B_R);
            flag = 0;
 800174e:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
        }
        HAL_TIM_Base_Start(&htim2);
 8001754:	4804      	ldr	r0, [pc, #16]	@ (8001768 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 8001756:	f004 fbdf 	bl	8005f18 <HAL_TIM_Base_Start>
    }
#endif
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200008f0 	.word	0x200008f0
 8001768:	2000083c 	.word	0x2000083c
 800176c:	200006d4 	.word	0x200006d4
 8001770:	200008f4 	.word	0x200008f4
 8001774:	2000020c 	.word	0x2000020c
 8001778:	2000000c 	.word	0x2000000c

0800177c <getInstalledTasksFunction>:

/* ---------------- Get Installed Tasks ---------------- */

static BaseType_t getInstalledTasksFunction(char *pcWriteBuffer,
                                            size_t xWriteBufferLen,
                                            const char *pcCommandString) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
    (void)xWriteBufferLen;
    vTaskList(pcWriteBuffer);
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f009 ff49 	bl	800b620 <vTaskList>
    return pdFALSE;
 800178e:	2300      	movs	r3, #0
    // } else {
    //     state = 0;
    //     strcpy(pcWriteBuffer, "\n\r");
    //     return pdFALSE;
    // }
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <getRuntimeStatsFunction>:

/* ---------------- Get Runtime Info ---------------- */

static BaseType_t getRuntimeStatsFunction(char *pcWriteBuffer,
                                          size_t xWriteBufferLen,
                                          const char *pcCommandString) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
    char *head = "Name		Abs Time      % Time\n\r";
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <getRuntimeStatsFunction+0x34>)
 80017a6:	617b      	str	r3, [r7, #20]
    (void)xWriteBufferLen;
    strcpy(pcWriteBuffer, head);
 80017a8:	6979      	ldr	r1, [r7, #20]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f00c fcb1 	bl	800e112 <strcpy>
    vTaskGetRunTimeStats(&pcWriteBuffer[strlen(head)]);
 80017b0:	6978      	ldr	r0, [r7, #20]
 80017b2:	f7fe fd95 	bl	80002e0 <strlen>
 80017b6:	4602      	mov	r2, r0
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f009 ffc5 	bl	800b74c <vTaskGetRunTimeStats>
    return pdFALSE;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	08010614 	.word	0x08010614

080017d0 <changeWaveFunction>:
/* ---------------- Change Sin Wave ---------------- */
uint16_t sin_wave[256];
uint16_t sin_wave_3rd_harmonic[256];
static BaseType_t changeWaveFunction(char *pcWriteBuffer,
                                     size_t xWriteBufferLen,
                                     const char *pcCommandString) {
 80017d0:	b5b0      	push	{r4, r5, r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
    BaseType_t parameter_lenght;
    const char *parameter =
        FreeRTOS_CLIGetParameter(pcCommandString, 1, &parameter_lenght);
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	461a      	mov	r2, r3
 80017e2:	2101      	movs	r1, #1
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fc9b 	bl	8001120 <FreeRTOS_CLIGetParameter>
 80017ea:	6178      	str	r0, [r7, #20]

    if (!strcmp(parameter, "sine")) {
 80017ec:	4931      	ldr	r1, [pc, #196]	@ (80018b4 <changeWaveFunction+0xe4>)
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7fe fd16 	bl	8000220 <strcmp>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d11e      	bne.n	8001838 <changeWaveFunction+0x68>
        HAL_TIM_Base_Stop(&htim2);
 80017fa:	482f      	ldr	r0, [pc, #188]	@ (80018b8 <changeWaveFunction+0xe8>)
 80017fc:	f004 fbee 	bl	8005fdc <HAL_TIM_Base_Stop>
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001800:	2100      	movs	r1, #0
 8001802:	482e      	ldr	r0, [pc, #184]	@ (80018bc <changeWaveFunction+0xec>)
 8001804:	f002 fbd4 	bl	8003fb0 <HAL_DAC_Stop_DMA>
        HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)sin_wave, 256,
 8001808:	2300      	movs	r3, #0
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001810:	4a2b      	ldr	r2, [pc, #172]	@ (80018c0 <changeWaveFunction+0xf0>)
 8001812:	2100      	movs	r1, #0
 8001814:	4829      	ldr	r0, [pc, #164]	@ (80018bc <changeWaveFunction+0xec>)
 8001816:	f002 faf7 	bl	8003e08 <HAL_DAC_Start_DMA>
                          DAC_ALIGN_12B_R);
        HAL_TIM_Base_Start(&htim2);
 800181a:	4827      	ldr	r0, [pc, #156]	@ (80018b8 <changeWaveFunction+0xe8>)
 800181c:	f004 fb7c 	bl	8005f18 <HAL_TIM_Base_Start>
        strcpy(pcWriteBuffer, "Sine Signal set\n\r");
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4a28      	ldr	r2, [pc, #160]	@ (80018c4 <changeWaveFunction+0xf4>)
 8001824:	461d      	mov	r5, r3
 8001826:	4614      	mov	r4, r2
 8001828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182a:	6028      	str	r0, [r5, #0]
 800182c:	6069      	str	r1, [r5, #4]
 800182e:	60aa      	str	r2, [r5, #8]
 8001830:	60eb      	str	r3, [r5, #12]
 8001832:	8823      	ldrh	r3, [r4, #0]
 8001834:	822b      	strh	r3, [r5, #16]
 8001836:	e037      	b.n	80018a8 <changeWaveFunction+0xd8>
    } else if (!strcmp(parameter, "sine3rd")) {
 8001838:	4923      	ldr	r1, [pc, #140]	@ (80018c8 <changeWaveFunction+0xf8>)
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7fe fcf0 	bl	8000220 <strcmp>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d120      	bne.n	8001888 <changeWaveFunction+0xb8>
        HAL_TIM_Base_Stop(&htim2);
 8001846:	481c      	ldr	r0, [pc, #112]	@ (80018b8 <changeWaveFunction+0xe8>)
 8001848:	f004 fbc8 	bl	8005fdc <HAL_TIM_Base_Stop>
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800184c:	2100      	movs	r1, #0
 800184e:	481b      	ldr	r0, [pc, #108]	@ (80018bc <changeWaveFunction+0xec>)
 8001850:	f002 fbae 	bl	8003fb0 <HAL_DAC_Stop_DMA>
        HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 8001854:	2300      	movs	r3, #0
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800185c:	4a1b      	ldr	r2, [pc, #108]	@ (80018cc <changeWaveFunction+0xfc>)
 800185e:	2100      	movs	r1, #0
 8001860:	4816      	ldr	r0, [pc, #88]	@ (80018bc <changeWaveFunction+0xec>)
 8001862:	f002 fad1 	bl	8003e08 <HAL_DAC_Start_DMA>
                          (uint32_t *)sin_wave_3rd_harmonic, 256,
                          DAC_ALIGN_12B_R);
        HAL_TIM_Base_Start(&htim2);
 8001866:	4814      	ldr	r0, [pc, #80]	@ (80018b8 <changeWaveFunction+0xe8>)
 8001868:	f004 fb56 	bl	8005f18 <HAL_TIM_Base_Start>
        strcpy(pcWriteBuffer, "Sine3rd Signal set\n\r");
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4a18      	ldr	r2, [pc, #96]	@ (80018d0 <changeWaveFunction+0x100>)
 8001870:	461d      	mov	r5, r3
 8001872:	4614      	mov	r4, r2
 8001874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001876:	6028      	str	r0, [r5, #0]
 8001878:	6069      	str	r1, [r5, #4]
 800187a:	60aa      	str	r2, [r5, #8]
 800187c:	60eb      	str	r3, [r5, #12]
 800187e:	6820      	ldr	r0, [r4, #0]
 8001880:	6128      	str	r0, [r5, #16]
 8001882:	7923      	ldrb	r3, [r4, #4]
 8001884:	752b      	strb	r3, [r5, #20]
 8001886:	e00f      	b.n	80018a8 <changeWaveFunction+0xd8>
    } else {
        strcpy(pcWriteBuffer, "Invalid wave signal!\n\r");
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4a12      	ldr	r2, [pc, #72]	@ (80018d4 <changeWaveFunction+0x104>)
 800188c:	461c      	mov	r4, r3
 800188e:	4615      	mov	r5, r2
 8001890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001892:	6020      	str	r0, [r4, #0]
 8001894:	6061      	str	r1, [r4, #4]
 8001896:	60a2      	str	r2, [r4, #8]
 8001898:	60e3      	str	r3, [r4, #12]
 800189a:	6828      	ldr	r0, [r5, #0]
 800189c:	6120      	str	r0, [r4, #16]
 800189e:	88ab      	ldrh	r3, [r5, #4]
 80018a0:	79aa      	ldrb	r2, [r5, #6]
 80018a2:	82a3      	strh	r3, [r4, #20]
 80018a4:	4613      	mov	r3, r2
 80018a6:	75a3      	strb	r3, [r4, #22]
    }
    return pdFALSE;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bdb0      	pop	{r4, r5, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	08010660 	.word	0x08010660
 80018b8:	2000083c 	.word	0x2000083c
 80018bc:	200006d4 	.word	0x200006d4
 80018c0:	2000000c 	.word	0x2000000c
 80018c4:	08010668 	.word	0x08010668
 80018c8:	0801067c 	.word	0x0801067c
 80018cc:	2000020c 	.word	0x2000020c
 80018d0:	08010684 	.word	0x08010684
 80018d4:	0801069c 	.word	0x0801069c

080018d8 <clearTerminalFunction>:

/* ---------------- Clear Terminal ---------------- */

static BaseType_t clearTerminalFunction(char *pcWriteBuffer,
                                        size_t xWriteBufferLen,
                                        const char *pcCommandString) {
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
    strcpy(pcWriteBuffer, "\033[H\033[J\n\r");
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4907      	ldr	r1, [pc, #28]	@ (8001904 <clearTerminalFunction+0x2c>)
 80018e8:	461a      	mov	r2, r3
 80018ea:	460b      	mov	r3, r1
 80018ec:	cb03      	ldmia	r3!, {r0, r1}
 80018ee:	6010      	str	r0, [r2, #0]
 80018f0:	6051      	str	r1, [r2, #4]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	7213      	strb	r3, [r2, #8]
    return pdFALSE;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	080106fc 	.word	0x080106fc

08001908 <terminal_task>:
/* ---------------- Terminal Task ---------------- */

#define MAX_INPUT_LENGTH 50
#define MAX_OUTPUT_LENGTH 100

void terminal_task(void *params) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
    int8_t cRxedChar, cInputIndex = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	75fb      	strb	r3, [r7, #23]

    /* Buffers de entrada e saída */
    static int8_t pcInputString[MAX_INPUT_LENGTH];
    static int8_t pcOutputString[MAX_OUTPUT_LENGTH];

    FreeRTOS_CLIRegisterCommand(&xGetInstalledTasksCommand);
 8001914:	483b      	ldr	r0, [pc, #236]	@ (8001a04 <terminal_task+0xfc>)
 8001916:	f7ff fb47 	bl	8000fa8 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xGetRuntimeCommand);
 800191a:	483b      	ldr	r0, [pc, #236]	@ (8001a08 <terminal_task+0x100>)
 800191c:	f7ff fb44 	bl	8000fa8 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xChangeWaveCommand);
 8001920:	483a      	ldr	r0, [pc, #232]	@ (8001a0c <terminal_task+0x104>)
 8001922:	f7ff fb41 	bl	8000fa8 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xClearTerminalCommand);
 8001926:	483a      	ldr	r0, [pc, #232]	@ (8001a10 <terminal_task+0x108>)
 8001928:	f7ff fb3e 	bl	8000fa8 <FreeRTOS_CLIRegisterCommand>

    // print_uart_string("----- FreeRTOS Terminal -----\r\n\n");
    print_string("----- FreeRTOS Terminal -----\r\n\n", portMAX_DELAY);
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	4838      	ldr	r0, [pc, #224]	@ (8001a14 <terminal_task+0x10c>)
 8001932:	f7ff fd5f 	bl	80013f4 <print_string>

    /* Recepção de 1byte pela uart */
    HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)&uart_data, 1);
 8001936:	2201      	movs	r2, #1
 8001938:	4937      	ldr	r1, [pc, #220]	@ (8001a18 <terminal_task+0x110>)
 800193a:	4838      	ldr	r0, [pc, #224]	@ (8001a1c <terminal_task+0x114>)
 800193c:	f005 f8a2 	bl	8006a84 <HAL_UART_Receive_IT>
    hlpuart1.RxISR = HAL_UART_RxCpltCallback;
 8001940:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <terminal_task+0x114>)
 8001942:	4a37      	ldr	r2, [pc, #220]	@ (8001a20 <terminal_task+0x118>)
 8001944:	675a      	str	r2, [r3, #116]	@ 0x74

    while (1) {
        // Espera indefinidamente por um caractere
        get_char_from_uart(&cRxedChar, portMAX_DELAY);
 8001946:	f107 030f 	add.w	r3, r7, #15
 800194a:	f04f 31ff 	mov.w	r1, #4294967295
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fd3c 	bl	80013cc <get_char_from_uart>

        if (cRxedChar == '\r') {
 8001954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001958:	2b0d      	cmp	r3, #13
 800195a:	d11a      	bne.n	8001992 <terminal_task+0x8a>
            /* Tecla "Enter" seja pressionada */
            // print_uart_string("\r\n");
            print_string("\r\n", portMAX_DELAY);
 800195c:	f04f 31ff 	mov.w	r1, #4294967295
 8001960:	4830      	ldr	r0, [pc, #192]	@ (8001a24 <terminal_task+0x11c>)
 8001962:	f7ff fd47 	bl	80013f4 <print_string>

            /* Execução do comando inserido ao pressionar enter: */
            do {
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(
 8001966:	2264      	movs	r2, #100	@ 0x64
 8001968:	492f      	ldr	r1, [pc, #188]	@ (8001a28 <terminal_task+0x120>)
 800196a:	4830      	ldr	r0, [pc, #192]	@ (8001a2c <terminal_task+0x124>)
 800196c:	f7ff fb52 	bl	8001014 <FreeRTOS_CLIProcessCommand>
 8001970:	6138      	str	r0, [r7, #16]
                    pcOutputString,   /* buffer de saída. */
                    MAX_OUTPUT_LENGTH /* Tamanho do buffer de saída. */
                );

                // print_uart_string(pcOutputString);
                print_string(pcOutputString, portMAX_DELAY);
 8001972:	f04f 31ff 	mov.w	r1, #4294967295
 8001976:	482c      	ldr	r0, [pc, #176]	@ (8001a28 <terminal_task+0x120>)
 8001978:	f7ff fd3c 	bl	80013f4 <print_string>
            } while (xMoreDataToFollow != pdFALSE);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f1      	bne.n	8001966 <terminal_task+0x5e>

            /* Limpa a string de entrada */
            cInputIndex = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	75fb      	strb	r3, [r7, #23]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH);
 8001986:	2232      	movs	r2, #50	@ 0x32
 8001988:	2100      	movs	r1, #0
 800198a:	4828      	ldr	r0, [pc, #160]	@ (8001a2c <terminal_task+0x124>)
 800198c:	f00c fac7 	bl	800df1e <memset>
 8001990:	e7d9      	b.n	8001946 <terminal_task+0x3e>

        } else {
            if (cRxedChar == '\n') {
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	2b0a      	cmp	r3, #10
 8001998:	d0d5      	beq.n	8001946 <terminal_task+0x3e>
                // Ignora o \n
            } else if (cRxedChar == '\b') {
 800199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d117      	bne.n	80019d2 <terminal_task+0xca>
                /* Tratamento do backspace */
                if (cInputIndex > 0) {
 80019a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	ddcd      	ble.n	8001946 <terminal_task+0x3e>
                    cInputIndex--;
 80019aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	75fb      	strb	r3, [r7, #23]
                    pcInputString[cInputIndex] = '\0';
 80019b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019ba:	4a1c      	ldr	r2, [pc, #112]	@ (8001a2c <terminal_task+0x124>)
 80019bc:	2100      	movs	r1, #0
 80019be:	54d1      	strb	r1, [r2, r3]
                    // print_uart_string("\b \b");
                    print_char(cRxedChar, portMAX_DELAY);
 80019c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f04f 31ff 	mov.w	r1, #4294967295
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fd3c 	bl	8001448 <print_char>
 80019d0:	e7b9      	b.n	8001946 <terminal_task+0x3e>
                }
            } else {
                // Adiciona o caractere na string de entrada
                if (cInputIndex < MAX_INPUT_LENGTH) {
 80019d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019d6:	2b31      	cmp	r3, #49	@ 0x31
 80019d8:	dc0b      	bgt.n	80019f2 <terminal_task+0xea>
                    pcInputString[cInputIndex] = cRxedChar;
 80019da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019de:	f997 100f 	ldrsb.w	r1, [r7, #15]
 80019e2:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <terminal_task+0x124>)
 80019e4:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
 80019e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	75fb      	strb	r3, [r7, #23]
                }
                // print_uart_char(cRxedChar);
                print_char(cRxedChar, portMAX_DELAY);
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fd23 	bl	8001448 <print_char>
        get_char_from_uart(&cRxedChar, portMAX_DELAY);
 8001a02:	e7a0      	b.n	8001946 <terminal_task+0x3e>
 8001a04:	080107d0 	.word	0x080107d0
 8001a08:	080107e0 	.word	0x080107e0
 8001a0c:	080107f0 	.word	0x080107f0
 8001a10:	08010800 	.word	0x08010800
 8001a14:	08010730 	.word	0x08010730
 8001a18:	200008ec 	.word	0x200008ec
 8001a1c:	20000748 	.word	0x20000748
 8001a20:	08001329 	.word	0x08001329
 8001a24:	08010754 	.word	0x08010754
 8001a28:	2000092c 	.word	0x2000092c
 8001a2c:	200008f8 	.word	0x200008f8

08001a30 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a30:	b5b0      	push	{r4, r5, r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af02      	add	r7, sp, #8
    /* MCU
     * Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */
    HAL_Init();
 8001a36:	f000 fe70 	bl	800271a <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001a3a:	f000 f883 	bl	8001b44 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001a3e:	f000 faa1 	bl	8001f84 <MX_GPIO_Init>
    MX_DMA_Init();
 8001a42:	f000 fa59 	bl	8001ef8 <MX_DMA_Init>
    MX_ADC1_Init();
 8001a46:	f000 f8bd 	bl	8001bc4 <MX_ADC1_Init>
    MX_TIM3_Init();
 8001a4a:	f000 fa07 	bl	8001e5c <MX_TIM3_Init>
    MX_DAC1_Init();
 8001a4e:	f000 f933 	bl	8001cb8 <MX_DAC1_Init>
    MX_TIM2_Init();
 8001a52:	f000 f9b5 	bl	8001dc0 <MX_TIM2_Init>
    MX_LPUART1_UART_Init();
 8001a56:	f000 f969 	bl	8001d2c <MX_LPUART1_UART_Init>
    /* USER CODE BEGIN 2 */

    /* USER CODE END 2 */

    /* USER CODE BEGIN RTOS_MUTEX */
    mutex_uart = xSemaphoreCreateMutex();
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f007 fb78 	bl	8009150 <xQueueCreateMutex>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4a2b      	ldr	r2, [pc, #172]	@ (8001b10 <main+0xe0>)
 8001a64:	6013      	str	r3, [r2, #0]
    /* USER CODE END RTOS_MUTEX */

    /* USER CODE BEGIN RTOS_SEMAPHORES */
    /* add semaphores, ... */

    sem_tx_uart = xSemaphoreCreateBinary();
 8001a66:	2203      	movs	r2, #3
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f007 fafc 	bl	8009068 <xQueueGenericCreate>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a28      	ldr	r2, [pc, #160]	@ (8001b14 <main+0xe4>)
 8001a74:	6013      	str	r3, [r2, #0]
    sem_adc = xSemaphoreCreateBinary();
 8001a76:	2203      	movs	r2, #3
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	f007 faf4 	bl	8009068 <xQueueGenericCreate>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4a25      	ldr	r2, [pc, #148]	@ (8001b18 <main+0xe8>)
 8001a84:	6013      	str	r3, [r2, #0]
    /* USER CODE END RTOS_TIMERS */

    /* USER CODE BEGIN RTOS_QUEUES */
    /* add queues, ... */

    message_buffer = xMessageBufferCreate(BUFFER_SIZE);
 8001a86:	2201      	movs	r2, #1
 8001a88:	2100      	movs	r1, #0
 8001a8a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a8e:	f008 f8c1 	bl	8009c14 <xStreamBufferGenericCreate>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a21      	ldr	r2, [pc, #132]	@ (8001b1c <main+0xec>)
 8001a96:	6013      	str	r3, [r2, #0]
    uart_rx_q = xQueueCreate(32, sizeof(char));
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2020      	movs	r0, #32
 8001a9e:	f007 fae3 	bl	8009068 <xQueueGenericCreate>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a1e      	ldr	r2, [pc, #120]	@ (8001b20 <main+0xf0>)
 8001aa6:	6013      	str	r3, [r2, #0]
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of defaultTask */
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b24 <main+0xf4>)
 8001aaa:	1d3c      	adds	r4, r7, #4
 8001aac:	461d      	mov	r5, r3
 8001aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab2:	682b      	ldr	r3, [r5, #0]
 8001ab4:	6023      	str	r3, [r4, #0]
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f007 f97b 	bl	8008db6 <osThreadCreate>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a19      	ldr	r2, [pc, #100]	@ (8001b28 <main+0xf8>)
 8001ac4:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN RTOS_THREADS */

    (void)xTaskCreate(terminal_task, "Console", 256, NULL, 3, NULL);
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	2303      	movs	r3, #3
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ad4:	4915      	ldr	r1, [pc, #84]	@ (8001b2c <main+0xfc>)
 8001ad6:	4816      	ldr	r0, [pc, #88]	@ (8001b30 <main+0x100>)
 8001ad8:	f008 fc34 	bl	800a344 <xTaskCreate>
    (void)xTaskCreate(print_task, "Print Task", 256, NULL, 10, NULL);
 8001adc:	2300      	movs	r3, #0
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	230a      	movs	r3, #10
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aea:	4912      	ldr	r1, [pc, #72]	@ (8001b34 <main+0x104>)
 8001aec:	4812      	ldr	r0, [pc, #72]	@ (8001b38 <main+0x108>)
 8001aee:	f008 fc29 	bl	800a344 <xTaskCreate>
    (void)xTaskCreate(adc_task, "ADC", 2048, NULL, 6, NULL);
 8001af2:	2300      	movs	r3, #0
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	2306      	movs	r3, #6
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2300      	movs	r3, #0
 8001afc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b00:	490e      	ldr	r1, [pc, #56]	@ (8001b3c <main+0x10c>)
 8001b02:	480f      	ldr	r0, [pc, #60]	@ (8001b40 <main+0x110>)
 8001b04:	f008 fc1e 	bl	800a344 <xTaskCreate>

    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 8001b08:	f007 f94e 	bl	8008da8 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <main+0xdc>
 8001b10:	200008d8 	.word	0x200008d8
 8001b14:	200008e0 	.word	0x200008e0
 8001b18:	200008e4 	.word	0x200008e4
 8001b1c:	200008dc 	.word	0x200008dc
 8001b20:	200008e8 	.word	0x200008e8
 8001b24:	0801077c 	.word	0x0801077c
 8001b28:	200008d4 	.word	0x200008d4
 8001b2c:	08010758 	.word	0x08010758
 8001b30:	08001909 	.word	0x08001909
 8001b34:	08010760 	.word	0x08010760
 8001b38:	08001495 	.word	0x08001495
 8001b3c:	0801076c 	.word	0x0801076c
 8001b40:	080014f9 	.word	0x080014f9

08001b44 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b094      	sub	sp, #80	@ 0x50
 8001b48:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4a:	f107 0318 	add.w	r3, r7, #24
 8001b4e:	2238      	movs	r2, #56	@ 0x38
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f00c f9e3 	bl	800df1e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b6a:	f003 f979 	bl	8004e60 <HAL_PWREx_ControlVoltageScaling>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b78:	2340      	movs	r3, #64	@ 0x40
 8001b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b80:	f107 0318 	add.w	r3, r7, #24
 8001b84:	4618      	mov	r0, r3
 8001b86:	f003 fa1f 	bl	8004fc8 <HAL_RCC_OscConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <SystemClock_Config+0x50>
        Error_Handler();
 8001b90:	f000 fa2a 	bl	8001fe8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001b94:	230f      	movs	r3, #15
 8001b96:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 fd1d 	bl	80055ec <HAL_RCC_ClockConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SystemClock_Config+0x78>
        Error_Handler();
 8001bb8:	f000 fa16 	bl	8001fe8 <Error_Handler>
    }
}
 8001bbc:	bf00      	nop
 8001bbe:	3750      	adds	r7, #80	@ 0x50
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	@ 0x30
 8001bc8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_MultiModeTypeDef multimode = {0};
 8001bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	2220      	movs	r2, #32
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f00c f99e 	bl	800df1e <memset>

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 8001be2:	4b33      	ldr	r3, [pc, #204]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001be4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001be8:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001bea:	4b31      	ldr	r3, [pc, #196]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001bec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bf0:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
    hadc1.Init.GainCompensation = 0;
 8001bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c04:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c0a:	4b29      	ldr	r3, [pc, #164]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	619a      	str	r2, [r3, #24]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c10:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	771a      	strb	r2, [r3, #28]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001c16:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	775a      	strb	r2, [r3, #29]
    hadc1.Init.NbrOfConversion = 1;
 8001c1c:	4b24      	ldr	r3, [pc, #144]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	621a      	str	r2, [r3, #32]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c22:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8001c2a:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c2c:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8001c30:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c32:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c38:	631a      	str	r2, [r3, #48]	@ 0x30
    hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c42:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	63da      	str	r2, [r3, #60]	@ 0x3c
    hadc1.Init.OversamplingMode = DISABLE;
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001c50:	4817      	ldr	r0, [pc, #92]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c52:	f000 ffb7 	bl	8002bc4 <HAL_ADC_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_ADC1_Init+0x9c>
        Error_Handler();
 8001c5c:	f000 f9c4 	bl	8001fe8 <Error_Handler>
    }

    /** Configure the ADC multi-mode
     */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4811      	ldr	r0, [pc, #68]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c6c:	f001 ff26 	bl	8003abc <HAL_ADCEx_MultiModeConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_ADC1_Init+0xb6>
        Error_Handler();
 8001c76:	f000 f9b7 	bl	8001fe8 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_1;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <MX_ADC1_Init+0xf0>)
 8001c7c:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c86:	237f      	movs	r3, #127	@ 0x7f
 8001c88:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	4806      	ldr	r0, [pc, #24]	@ (8001cb0 <MX_ADC1_Init+0xec>)
 8001c98:	f001 f9e0 	bl	800305c <HAL_ADC_ConfigChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_ADC1_Init+0xe2>
        Error_Handler();
 8001ca2:	f000 f9a1 	bl	8001fe8 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 8001ca6:	bf00      	nop
 8001ca8:	3730      	adds	r7, #48	@ 0x30
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000608 	.word	0x20000608
 8001cb4:	04300002 	.word	0x04300002

08001cb8 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08c      	sub	sp, #48	@ 0x30
 8001cbc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DAC1_Init 0 */

    /* USER CODE END DAC1_Init 0 */

    DAC_ChannelConfTypeDef sConfig = {0};
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	2230      	movs	r2, #48	@ 0x30
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f00c f92a 	bl	800df1e <memset>

    /* USER CODE END DAC1_Init 1 */

    /** DAC Initialization
     */
    hdac1.Instance = DAC1;
 8001cca:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <MX_DAC1_Init+0x6c>)
 8001ccc:	4a16      	ldr	r2, [pc, #88]	@ (8001d28 <MX_DAC1_Init+0x70>)
 8001cce:	601a      	str	r2, [r3, #0]
    if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8001cd0:	4814      	ldr	r0, [pc, #80]	@ (8001d24 <MX_DAC1_Init+0x6c>)
 8001cd2:	f002 f877 	bl	8003dc4 <HAL_DAC_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_DAC1_Init+0x28>
        Error_Handler();
 8001cdc:	f000 f984 	bl	8001fe8 <Error_Handler>
    }

    /** DAC channel OUT1 config
     */
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	603b      	str	r3, [r7, #0]
    sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	713b      	strb	r3, [r7, #4]
    sConfig.DAC_SignedFormat = DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	717b      	strb	r3, [r7, #5]
    sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
    sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001cf0:	2312      	movs	r3, #18
 8001cf2:	60fb      	str	r3, [r7, #12]
    sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
    sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	61bb      	str	r3, [r7, #24]
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001d04:	463b      	mov	r3, r7
 8001d06:	2200      	movs	r2, #0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4806      	ldr	r0, [pc, #24]	@ (8001d24 <MX_DAC1_Init+0x6c>)
 8001d0c:	f002 f9b2 	bl	8004074 <HAL_DAC_ConfigChannel>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_DAC1_Init+0x62>
        Error_Handler();
 8001d16:	f000 f967 	bl	8001fe8 <Error_Handler>
    }
    /* USER CODE BEGIN DAC1_Init 2 */

    /* USER CODE END DAC1_Init 2 */
}
 8001d1a:	bf00      	nop
 8001d1c:	3730      	adds	r7, #48	@ 0x30
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200006d4 	.word	0x200006d4
 8001d28:	50000800 	.word	0x50000800

08001d2c <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
    /* USER CODE END LPUART1_Init 0 */

    /* USER CODE BEGIN LPUART1_Init 1 */

    /* USER CODE END LPUART1_Init 1 */
    hlpuart1.Instance = LPUART1;
 8001d30:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <MX_LPUART1_UART_Init+0x8c>)
 8001d32:	4a22      	ldr	r2, [pc, #136]	@ (8001dbc <MX_LPUART1_UART_Init+0x90>)
 8001d34:	601a      	str	r2, [r3, #0]
    hlpuart1.Init.BaudRate = 115200;
 8001d36:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <MX_LPUART1_UART_Init+0x8c>)
 8001d38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d3c:	605a      	str	r2, [r3, #4]
    hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <MX_LPUART1_UART_Init+0x8c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
    hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <MX_LPUART1_UART_Init+0x8c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
    hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001db8 <MX_LPUART1_UART_Init+0x8c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
    hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001d50:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <MX_LPUART1_UART_Init+0x8c>)
 8001d52:	220c      	movs	r2, #12
 8001d54:	615a      	str	r2, [r3, #20]
    hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d56:	4b18      	ldr	r3, [pc, #96]	@ (8001db8 <MX_LPUART1_UART_Init+0x8c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
    hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d5c:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <MX_LPUART1_UART_Init+0x8c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	621a      	str	r2, [r3, #32]
    hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <MX_LPUART1_UART_Init+0x8c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	625a      	str	r2, [r3, #36]	@ 0x24
    hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d68:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <MX_LPUART1_UART_Init+0x8c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8001d6e:	4812      	ldr	r0, [pc, #72]	@ (8001db8 <MX_LPUART1_UART_Init+0x8c>)
 8001d70:	f004 fe38 	bl	80069e4 <HAL_UART_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_LPUART1_UART_Init+0x52>
        Error_Handler();
 8001d7a:	f000 f935 	bl	8001fe8 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) !=
 8001d7e:	2100      	movs	r1, #0
 8001d80:	480d      	ldr	r0, [pc, #52]	@ (8001db8 <MX_LPUART1_UART_Init+0x8c>)
 8001d82:	f006 ff2e 	bl	8008be2 <HAL_UARTEx_SetTxFifoThreshold>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_LPUART1_UART_Init+0x64>
        HAL_OK) {
        Error_Handler();
 8001d8c:	f000 f92c 	bl	8001fe8 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) !=
 8001d90:	2100      	movs	r1, #0
 8001d92:	4809      	ldr	r0, [pc, #36]	@ (8001db8 <MX_LPUART1_UART_Init+0x8c>)
 8001d94:	f006 ff63 	bl	8008c5e <HAL_UARTEx_SetRxFifoThreshold>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_LPUART1_UART_Init+0x76>
        HAL_OK) {
        Error_Handler();
 8001d9e:	f000 f923 	bl	8001fe8 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_LPUART1_UART_Init+0x8c>)
 8001da4:	f006 fee4 	bl	8008b70 <HAL_UARTEx_DisableFifoMode>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_LPUART1_UART_Init+0x86>
        Error_Handler();
 8001dae:	f000 f91b 	bl	8001fe8 <Error_Handler>
    }
    /* USER CODE BEGIN LPUART1_Init 2 */

    /* USER CODE END LPUART1_Init 2 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000748 	.word	0x20000748
 8001dbc:	40008000 	.word	0x40008000

08001dc0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc6:	f107 0310 	add.w	r3, r7, #16
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001dde:	4b1e      	ldr	r3, [pc, #120]	@ (8001e58 <MX_TIM2_Init+0x98>)
 8001de0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001de4:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 8001de6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <MX_TIM2_Init+0x98>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dec:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <MX_TIM2_Init+0x98>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 11067;
 8001df2:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <MX_TIM2_Init+0x98>)
 8001df4:	f642 323b 	movw	r2, #11067	@ 0x2b3b
 8001df8:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfa:	4b17      	ldr	r3, [pc, #92]	@ (8001e58 <MX_TIM2_Init+0x98>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e00:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <MX_TIM2_Init+0x98>)
 8001e02:	2280      	movs	r2, #128	@ 0x80
 8001e04:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001e06:	4814      	ldr	r0, [pc, #80]	@ (8001e58 <MX_TIM2_Init+0x98>)
 8001e08:	f004 f82e 	bl	8005e68 <HAL_TIM_Base_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM2_Init+0x56>
        Error_Handler();
 8001e12:	f000 f8e9 	bl	8001fe8 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e1a:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	4619      	mov	r1, r3
 8001e22:	480d      	ldr	r0, [pc, #52]	@ (8001e58 <MX_TIM2_Init+0x98>)
 8001e24:	f004 fabc 	bl	80063a0 <HAL_TIM_ConfigClockSource>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM2_Init+0x72>
        Error_Handler();
 8001e2e:	f000 f8db 	bl	8001fe8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e32:	2320      	movs	r3, #32
 8001e34:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) !=
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4806      	ldr	r0, [pc, #24]	@ (8001e58 <MX_TIM2_Init+0x98>)
 8001e40:	f004 fd08 	bl	8006854 <HAL_TIMEx_MasterConfigSynchronization>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM2_Init+0x8e>
        HAL_OK) {
        Error_Handler();
 8001e4a:	f000 f8cd 	bl	8001fe8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
}
 8001e4e:	bf00      	nop
 8001e50:	3720      	adds	r7, #32
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000083c 	.word	0x2000083c

08001e5c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e62:	f107 0310 	add.w	r3, r7, #16
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <MX_TIM3_Init+0x94>)
 8001e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef4 <MX_TIM3_Init+0x98>)
 8001e7e:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <MX_TIM3_Init+0x94>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <MX_TIM3_Init+0x94>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 11067;
 8001e8c:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <MX_TIM3_Init+0x94>)
 8001e8e:	f642 323b 	movw	r2, #11067	@ 0x2b3b
 8001e92:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e94:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <MX_TIM3_Init+0x94>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <MX_TIM3_Init+0x94>)
 8001e9c:	2280      	movs	r2, #128	@ 0x80
 8001e9e:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001ea0:	4813      	ldr	r0, [pc, #76]	@ (8001ef0 <MX_TIM3_Init+0x94>)
 8001ea2:	f003 ffe1 	bl	8005e68 <HAL_TIM_Base_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM3_Init+0x54>
        Error_Handler();
 8001eac:	f000 f89c 	bl	8001fe8 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eb4:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480c      	ldr	r0, [pc, #48]	@ (8001ef0 <MX_TIM3_Init+0x94>)
 8001ebe:	f004 fa6f 	bl	80063a0 <HAL_TIM_ConfigClockSource>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM3_Init+0x70>
        Error_Handler();
 8001ec8:	f000 f88e 	bl	8001fe8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ecc:	2320      	movs	r3, #32
 8001ece:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) !=
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4805      	ldr	r0, [pc, #20]	@ (8001ef0 <MX_TIM3_Init+0x94>)
 8001eda:	f004 fcbb 	bl	8006854 <HAL_TIMEx_MasterConfigSynchronization>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM3_Init+0x8c>
        HAL_OK) {
        Error_Handler();
 8001ee4:	f000 f880 	bl	8001fe8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
}
 8001ee8:	bf00      	nop
 8001eea:	3720      	adds	r7, #32
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000888 	.word	0x20000888
 8001ef4:	40000400 	.word	0x40000400

08001ef8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001efe:	4b20      	ldr	r3, [pc, #128]	@ (8001f80 <MX_DMA_Init+0x88>)
 8001f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f02:	4a1f      	ldr	r2, [pc, #124]	@ (8001f80 <MX_DMA_Init+0x88>)
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <MX_DMA_Init+0x88>)
 8001f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001f16:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <MX_DMA_Init+0x88>)
 8001f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f1a:	4a19      	ldr	r2, [pc, #100]	@ (8001f80 <MX_DMA_Init+0x88>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f22:	4b17      	ldr	r3, [pc, #92]	@ (8001f80 <MX_DMA_Init+0x88>)
 8001f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <MX_DMA_Init+0x88>)
 8001f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f32:	4a13      	ldr	r2, [pc, #76]	@ (8001f80 <MX_DMA_Init+0x88>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f3a:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <MX_DMA_Init+0x88>)
 8001f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2105      	movs	r1, #5
 8001f4a:	200b      	movs	r0, #11
 8001f4c:	f001 ff12 	bl	8003d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f50:	200b      	movs	r0, #11
 8001f52:	f001 ff29 	bl	8003da8 <HAL_NVIC_EnableIRQ>
    /* DMA1_Channel2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2105      	movs	r1, #5
 8001f5a:	200c      	movs	r0, #12
 8001f5c:	f001 ff0a 	bl	8003d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f60:	200c      	movs	r0, #12
 8001f62:	f001 ff21 	bl	8003da8 <HAL_NVIC_EnableIRQ>
    /* DMA2_Channel2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2105      	movs	r1, #5
 8001f6a:	2039      	movs	r0, #57	@ 0x39
 8001f6c:	f001 ff02 	bl	8003d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001f70:	2039      	movs	r0, #57	@ 0x39
 8001f72:	f001 ff19 	bl	8003da8 <HAL_NVIC_EnableIRQ>
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000

08001f84 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <MX_GPIO_Init+0x2c>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8e:	4a08      	ldr	r2, [pc, #32]	@ (8001fb0 <MX_GPIO_Init+0x2c>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <MX_GPIO_Init+0x2c>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f006 ff21 	bl	8008e04 <osDelay>
 8001fc2:	e7fb      	b.n	8001fbc <StartDefaultTask+0x8>

08001fc4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM1) {
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 8001fd6:	f000 fbb9 	bl	800274c <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40012c00 	.word	0x40012c00

08001fe8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fec:	b672      	cpsid	i
}
 8001fee:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <Error_Handler+0x8>

08001ff4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_MspInit+0x50>)
 8001ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffe:	4a11      	ldr	r2, [pc, #68]	@ (8002044 <HAL_MspInit+0x50>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6613      	str	r3, [r2, #96]	@ 0x60
 8002006:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <HAL_MspInit+0x50>)
 8002008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <HAL_MspInit+0x50>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002016:	4a0b      	ldr	r2, [pc, #44]	@ (8002044 <HAL_MspInit+0x50>)
 8002018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800201c:	6593      	str	r3, [r2, #88]	@ 0x58
 800201e:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <HAL_MspInit+0x50>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	210f      	movs	r1, #15
 800202e:	f06f 0001 	mvn.w	r0, #1
 8002032:	f001 fe9f 	bl	8003d74 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002036:	f002 ffb7 	bl	8004fa8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000

08002048 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b09a      	sub	sp, #104	@ 0x68
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	2244      	movs	r2, #68	@ 0x44
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f00b ff58 	bl	800df1e <memset>
  if(hadc->Instance==ADC1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002076:	d15f      	bne.n	8002138 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002078:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800207c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800207e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002082:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	4618      	mov	r0, r3
 800208a:	f003 fcfd 	bl	8005a88 <HAL_RCCEx_PeriphCLKConfig>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002094:	f7ff ffa8 	bl	8001fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002098:	4b29      	ldr	r3, [pc, #164]	@ (8002140 <HAL_ADC_MspInit+0xf8>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209c:	4a28      	ldr	r2, [pc, #160]	@ (8002140 <HAL_ADC_MspInit+0xf8>)
 800209e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a4:	4b26      	ldr	r3, [pc, #152]	@ (8002140 <HAL_ADC_MspInit+0xf8>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b0:	4b23      	ldr	r3, [pc, #140]	@ (8002140 <HAL_ADC_MspInit+0xf8>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b4:	4a22      	ldr	r2, [pc, #136]	@ (8002140 <HAL_ADC_MspInit+0xf8>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020bc:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <HAL_ADC_MspInit+0xf8>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020c8:	2301      	movs	r3, #1
 80020ca:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020cc:	2303      	movs	r3, #3
 80020ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020d8:	4619      	mov	r1, r3
 80020da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020de:	f002 fd3d 	bl	8004b5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80020e2:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <HAL_ADC_MspInit+0xfc>)
 80020e4:	4a18      	ldr	r2, [pc, #96]	@ (8002148 <HAL_ADC_MspInit+0x100>)
 80020e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80020e8:	4b16      	ldr	r3, [pc, #88]	@ (8002144 <HAL_ADC_MspInit+0xfc>)
 80020ea:	2205      	movs	r2, #5
 80020ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020ee:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <HAL_ADC_MspInit+0xfc>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020f4:	4b13      	ldr	r3, [pc, #76]	@ (8002144 <HAL_ADC_MspInit+0xfc>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020fa:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <HAL_ADC_MspInit+0xfc>)
 80020fc:	2280      	movs	r2, #128	@ 0x80
 80020fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002100:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <HAL_ADC_MspInit+0xfc>)
 8002102:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002106:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002108:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <HAL_ADC_MspInit+0xfc>)
 800210a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800210e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002110:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <HAL_ADC_MspInit+0xfc>)
 8002112:	2220      	movs	r2, #32
 8002114:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002116:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_ADC_MspInit+0xfc>)
 8002118:	2200      	movs	r2, #0
 800211a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800211c:	4809      	ldr	r0, [pc, #36]	@ (8002144 <HAL_ADC_MspInit+0xfc>)
 800211e:	f002 f9eb 	bl	80044f8 <HAL_DMA_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002128:	f7ff ff5e 	bl	8001fe8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a05      	ldr	r2, [pc, #20]	@ (8002144 <HAL_ADC_MspInit+0xfc>)
 8002130:	655a      	str	r2, [r3, #84]	@ 0x54
 8002132:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <HAL_ADC_MspInit+0xfc>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002138:	bf00      	nop
 800213a:	3768      	adds	r7, #104	@ 0x68
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	20000674 	.word	0x20000674
 8002148:	40020008 	.word	0x40020008

0800214c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	@ 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a2b      	ldr	r2, [pc, #172]	@ (8002218 <HAL_DAC_MspInit+0xcc>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d14f      	bne.n	800220e <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800216e:	4b2b      	ldr	r3, [pc, #172]	@ (800221c <HAL_DAC_MspInit+0xd0>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	4a2a      	ldr	r2, [pc, #168]	@ (800221c <HAL_DAC_MspInit+0xd0>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800217a:	4b28      	ldr	r3, [pc, #160]	@ (800221c <HAL_DAC_MspInit+0xd0>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	4b25      	ldr	r3, [pc, #148]	@ (800221c <HAL_DAC_MspInit+0xd0>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	4a24      	ldr	r2, [pc, #144]	@ (800221c <HAL_DAC_MspInit+0xd0>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002192:	4b22      	ldr	r3, [pc, #136]	@ (800221c <HAL_DAC_MspInit+0xd0>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800219e:	2310      	movs	r3, #16
 80021a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a2:	2303      	movs	r3, #3
 80021a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4619      	mov	r1, r3
 80021b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021b4:	f002 fcd2 	bl	8004b5c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Channel2;
 80021b8:	4b19      	ldr	r3, [pc, #100]	@ (8002220 <HAL_DAC_MspInit+0xd4>)
 80021ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002224 <HAL_DAC_MspInit+0xd8>)
 80021bc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80021be:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <HAL_DAC_MspInit+0xd4>)
 80021c0:	2206      	movs	r2, #6
 80021c2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021c4:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <HAL_DAC_MspInit+0xd4>)
 80021c6:	2210      	movs	r2, #16
 80021c8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_DAC_MspInit+0xd4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80021d0:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <HAL_DAC_MspInit+0xd4>)
 80021d2:	2280      	movs	r2, #128	@ 0x80
 80021d4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021d6:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <HAL_DAC_MspInit+0xd4>)
 80021d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021dc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021de:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <HAL_DAC_MspInit+0xd4>)
 80021e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021e4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <HAL_DAC_MspInit+0xd4>)
 80021e8:	2220      	movs	r2, #32
 80021ea:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <HAL_DAC_MspInit+0xd4>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80021f2:	480b      	ldr	r0, [pc, #44]	@ (8002220 <HAL_DAC_MspInit+0xd4>)
 80021f4:	f002 f980 	bl	80044f8 <HAL_DMA_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80021fe:	f7ff fef3 	bl	8001fe8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a06      	ldr	r2, [pc, #24]	@ (8002220 <HAL_DAC_MspInit+0xd4>)
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	4a05      	ldr	r2, [pc, #20]	@ (8002220 <HAL_DAC_MspInit+0xd4>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3728      	adds	r7, #40	@ 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	50000800 	.word	0x50000800
 800221c:	40021000 	.word	0x40021000
 8002220:	200006e8 	.word	0x200006e8
 8002224:	4002041c 	.word	0x4002041c

08002228 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b09a      	sub	sp, #104	@ 0x68
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	2244      	movs	r2, #68	@ 0x44
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f00b fe68 	bl	800df1e <memset>
  if(huart->Instance==LPUART1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a37      	ldr	r2, [pc, #220]	@ (8002330 <HAL_UART_MspInit+0x108>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d167      	bne.n	8002328 <HAL_UART_MspInit+0x100>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002258:	2320      	movs	r3, #32
 800225a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	4618      	mov	r0, r3
 8002266:	f003 fc0f 	bl	8005a88 <HAL_RCCEx_PeriphCLKConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002270:	f7ff feba 	bl	8001fe8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002274:	4b2f      	ldr	r3, [pc, #188]	@ (8002334 <HAL_UART_MspInit+0x10c>)
 8002276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002278:	4a2e      	ldr	r2, [pc, #184]	@ (8002334 <HAL_UART_MspInit+0x10c>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002280:	4b2c      	ldr	r3, [pc, #176]	@ (8002334 <HAL_UART_MspInit+0x10c>)
 8002282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800228c:	4b29      	ldr	r3, [pc, #164]	@ (8002334 <HAL_UART_MspInit+0x10c>)
 800228e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002290:	4a28      	ldr	r2, [pc, #160]	@ (8002334 <HAL_UART_MspInit+0x10c>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002298:	4b26      	ldr	r3, [pc, #152]	@ (8002334 <HAL_UART_MspInit+0x10c>)
 800229a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022a4:	230c      	movs	r3, #12
 80022a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80022b4:	230c      	movs	r3, #12
 80022b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022bc:	4619      	mov	r1, r3
 80022be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022c2:	f002 fc4b 	bl	8004b5c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80022c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002338 <HAL_UART_MspInit+0x110>)
 80022c8:	4a1c      	ldr	r2, [pc, #112]	@ (800233c <HAL_UART_MspInit+0x114>)
 80022ca:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80022cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002338 <HAL_UART_MspInit+0x110>)
 80022ce:	2223      	movs	r2, #35	@ 0x23
 80022d0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022d2:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_UART_MspInit+0x110>)
 80022d4:	2210      	movs	r2, #16
 80022d6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022d8:	4b17      	ldr	r3, [pc, #92]	@ (8002338 <HAL_UART_MspInit+0x110>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022de:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <HAL_UART_MspInit+0x110>)
 80022e0:	2280      	movs	r2, #128	@ 0x80
 80022e2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022e4:	4b14      	ldr	r3, [pc, #80]	@ (8002338 <HAL_UART_MspInit+0x110>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ea:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <HAL_UART_MspInit+0x110>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80022f0:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <HAL_UART_MspInit+0x110>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022f6:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <HAL_UART_MspInit+0x110>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80022fc:	480e      	ldr	r0, [pc, #56]	@ (8002338 <HAL_UART_MspInit+0x110>)
 80022fe:	f002 f8fb 	bl	80044f8 <HAL_DMA_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8002308:	f7ff fe6e 	bl	8001fe8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a0a      	ldr	r2, [pc, #40]	@ (8002338 <HAL_UART_MspInit+0x110>)
 8002310:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002312:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <HAL_UART_MspInit+0x110>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002318:	2200      	movs	r2, #0
 800231a:	2105      	movs	r1, #5
 800231c:	205b      	movs	r0, #91	@ 0x5b
 800231e:	f001 fd29 	bl	8003d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002322:	205b      	movs	r0, #91	@ 0x5b
 8002324:	f001 fd40 	bl	8003da8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002328:	bf00      	nop
 800232a:	3768      	adds	r7, #104	@ 0x68
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40008000 	.word	0x40008000
 8002334:	40021000 	.word	0x40021000
 8002338:	200007dc 	.word	0x200007dc
 800233c:	4002001c 	.word	0x4002001c

08002340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002350:	d10c      	bne.n	800236c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002352:	4b12      	ldr	r3, [pc, #72]	@ (800239c <HAL_TIM_Base_MspInit+0x5c>)
 8002354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002356:	4a11      	ldr	r2, [pc, #68]	@ (800239c <HAL_TIM_Base_MspInit+0x5c>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6593      	str	r3, [r2, #88]	@ 0x58
 800235e:	4b0f      	ldr	r3, [pc, #60]	@ (800239c <HAL_TIM_Base_MspInit+0x5c>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800236a:	e010      	b.n	800238e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0b      	ldr	r2, [pc, #44]	@ (80023a0 <HAL_TIM_Base_MspInit+0x60>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10b      	bne.n	800238e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002376:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_TIM_Base_MspInit+0x5c>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	4a08      	ldr	r2, [pc, #32]	@ (800239c <HAL_TIM_Base_MspInit+0x5c>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6593      	str	r3, [r2, #88]	@ 0x58
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_TIM_Base_MspInit+0x5c>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	40000400 	.word	0x40000400

080023a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08c      	sub	sp, #48	@ 0x30
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80023b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002468 <HAL_InitTick+0xc4>)
 80023b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002468 <HAL_InitTick+0xc4>)
 80023ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023be:	6613      	str	r3, [r2, #96]	@ 0x60
 80023c0:	4b29      	ldr	r3, [pc, #164]	@ (8002468 <HAL_InitTick+0xc4>)
 80023c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023cc:	f107 020c 	add.w	r2, r7, #12
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 fade 	bl	8005998 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80023dc:	f003 fac6 	bl	800596c <HAL_RCC_GetPCLK2Freq>
 80023e0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e4:	4a21      	ldr	r2, [pc, #132]	@ (800246c <HAL_InitTick+0xc8>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0c9b      	lsrs	r3, r3, #18
 80023ec:	3b01      	subs	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80023f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002470 <HAL_InitTick+0xcc>)
 80023f2:	4a20      	ldr	r2, [pc, #128]	@ (8002474 <HAL_InitTick+0xd0>)
 80023f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80023f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <HAL_InitTick+0xcc>)
 80023f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80023fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <HAL_InitTick+0xcc>)
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002404:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <HAL_InitTick+0xcc>)
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240a:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <HAL_InitTick+0xcc>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002410:	4817      	ldr	r0, [pc, #92]	@ (8002470 <HAL_InitTick+0xcc>)
 8002412:	f003 fd29 	bl	8005e68 <HAL_TIM_Base_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800241c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11b      	bne.n	800245c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002424:	4812      	ldr	r0, [pc, #72]	@ (8002470 <HAL_InitTick+0xcc>)
 8002426:	f003 fe01 	bl	800602c <HAL_TIM_Base_Start_IT>
 800242a:	4603      	mov	r3, r0
 800242c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002430:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002434:	2b00      	cmp	r3, #0
 8002436:	d111      	bne.n	800245c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002438:	2019      	movs	r0, #25
 800243a:	f001 fcb5 	bl	8003da8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b0f      	cmp	r3, #15
 8002442:	d808      	bhi.n	8002456 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002444:	2200      	movs	r2, #0
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	2019      	movs	r0, #25
 800244a:	f001 fc93 	bl	8003d74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800244e:	4a0a      	ldr	r2, [pc, #40]	@ (8002478 <HAL_InitTick+0xd4>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e002      	b.n	800245c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800245c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002460:	4618      	mov	r0, r3
 8002462:	3730      	adds	r7, #48	@ 0x30
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000
 800246c:	431bde83 	.word	0x431bde83
 8002470:	20000990 	.word	0x20000990
 8002474:	40012c00 	.word	0x40012c00
 8002478:	20000410 	.word	0x20000410

0800247c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <NMI_Handler+0x4>

08002484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002488:	bf00      	nop
 800248a:	e7fd      	b.n	8002488 <HardFault_Handler+0x4>

0800248c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <MemManage_Handler+0x4>

08002494 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <BusFault_Handler+0x4>

0800249c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a0:	bf00      	nop
 80024a2:	e7fd      	b.n	80024a0 <UsageFault_Handler+0x4>

080024a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024b8:	4802      	ldr	r0, [pc, #8]	@ (80024c4 <DMA1_Channel1_IRQHandler+0x10>)
 80024ba:	f002 fa00 	bl	80048be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000674 	.word	0x20000674

080024c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80024cc:	4802      	ldr	r0, [pc, #8]	@ (80024d8 <DMA1_Channel2_IRQHandler+0x10>)
 80024ce:	f002 f9f6 	bl	80048be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200007dc 	.word	0x200007dc

080024dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024e0:	4802      	ldr	r0, [pc, #8]	@ (80024ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80024e2:	f003 fe0d 	bl	8006100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000990 	.word	0x20000990

080024f0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80024f4:	4802      	ldr	r0, [pc, #8]	@ (8002500 <DMA2_Channel2_IRQHandler+0x10>)
 80024f6:	f002 f9e2 	bl	80048be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200006e8 	.word	0x200006e8

08002504 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002508:	4802      	ldr	r0, [pc, #8]	@ (8002514 <LPUART1_IRQHandler+0x10>)
 800250a:	f004 fb87 	bl	8006c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000748 	.word	0x20000748

08002518 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return 1;
 800251c:	2301      	movs	r3, #1
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <_kill>:

int _kill(int pid, int sig)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002532:	f00b fdc1 	bl	800e0b8 <__errno>
 8002536:	4603      	mov	r3, r0
 8002538:	2216      	movs	r2, #22
 800253a:	601a      	str	r2, [r3, #0]
  return -1;
 800253c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <_exit>:

void _exit (int status)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002550:	f04f 31ff 	mov.w	r1, #4294967295
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ffe7 	bl	8002528 <_kill>
  while (1) {}    /* Make sure we hang here */
 800255a:	bf00      	nop
 800255c:	e7fd      	b.n	800255a <_exit+0x12>

0800255e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e00a      	b.n	8002586 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002570:	f3af 8000 	nop.w
 8002574:	4601      	mov	r1, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	60ba      	str	r2, [r7, #8]
 800257c:	b2ca      	uxtb	r2, r1
 800257e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	429a      	cmp	r2, r3
 800258c:	dbf0      	blt.n	8002570 <_read+0x12>
  }

  return len;
 800258e:	687b      	ldr	r3, [r7, #4]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	e009      	b.n	80025be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	60ba      	str	r2, [r7, #8]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	3301      	adds	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	dbf1      	blt.n	80025aa <_write+0x12>
  }
  return len;
 80025c6:	687b      	ldr	r3, [r7, #4]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_close>:

int _close(int file)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025f8:	605a      	str	r2, [r3, #4]
  return 0;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <_isatty>:

int _isatty(int file)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002610:	2301      	movs	r3, #1
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002640:	4a14      	ldr	r2, [pc, #80]	@ (8002694 <_sbrk+0x5c>)
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <_sbrk+0x60>)
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800264c:	4b13      	ldr	r3, [pc, #76]	@ (800269c <_sbrk+0x64>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <_sbrk+0x64>)
 8002656:	4a12      	ldr	r2, [pc, #72]	@ (80026a0 <_sbrk+0x68>)
 8002658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	429a      	cmp	r2, r3
 8002666:	d207      	bcs.n	8002678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002668:	f00b fd26 	bl	800e0b8 <__errno>
 800266c:	4603      	mov	r3, r0
 800266e:	220c      	movs	r2, #12
 8002670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002672:	f04f 33ff 	mov.w	r3, #4294967295
 8002676:	e009      	b.n	800268c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002678:	4b08      	ldr	r3, [pc, #32]	@ (800269c <_sbrk+0x64>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267e:	4b07      	ldr	r3, [pc, #28]	@ (800269c <_sbrk+0x64>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	4a05      	ldr	r2, [pc, #20]	@ (800269c <_sbrk+0x64>)
 8002688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20008000 	.word	0x20008000
 8002698:	00000400 	.word	0x00000400
 800269c:	200009dc 	.word	0x200009dc
 80026a0:	200079f0 	.word	0x200079f0

080026a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026a8:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <SystemInit+0x20>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ae:	4a05      	ldr	r2, [pc, #20]	@ (80026c4 <SystemInit+0x20>)
 80026b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026c8:	480d      	ldr	r0, [pc, #52]	@ (8002700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80026cc:	f7ff ffea 	bl	80026a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026d0:	480c      	ldr	r0, [pc, #48]	@ (8002704 <LoopForever+0x6>)
  ldr r1, =_edata
 80026d2:	490d      	ldr	r1, [pc, #52]	@ (8002708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026d4:	4a0d      	ldr	r2, [pc, #52]	@ (800270c <LoopForever+0xe>)
  movs r3, #0
 80026d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80026d8:	e002      	b.n	80026e0 <LoopCopyDataInit>

080026da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026de:	3304      	adds	r3, #4

080026e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e4:	d3f9      	bcc.n	80026da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002714 <LoopForever+0x16>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026ec:	e001      	b.n	80026f2 <LoopFillZerobss>

080026ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f0:	3204      	adds	r2, #4

080026f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f4:	d3fb      	bcc.n	80026ee <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80026f6:	f00b fce5 	bl	800e0c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026fa:	f7ff f999 	bl	8001a30 <main>

080026fe <LoopForever>:

LoopForever:
    b LoopForever
 80026fe:	e7fe      	b.n	80026fe <LoopForever>
  ldr   r0, =_estack
 8002700:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002708:	200005e4 	.word	0x200005e4
  ldr r2, =_sidata
 800270c:	08011788 	.word	0x08011788
  ldr r2, =_sbss
 8002710:	200005e4 	.word	0x200005e4
  ldr r4, =_ebss
 8002714:	200079ec 	.word	0x200079ec

08002718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002718:	e7fe      	b.n	8002718 <ADC1_2_IRQHandler>

0800271a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002724:	2003      	movs	r0, #3
 8002726:	f001 fb1a 	bl	8003d5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800272a:	200f      	movs	r0, #15
 800272c:	f7ff fe3a 	bl	80023a4 <HAL_InitTick>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	71fb      	strb	r3, [r7, #7]
 800273a:	e001      	b.n	8002740 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800273c:	f7ff fc5a 	bl	8001ff4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002740:	79fb      	ldrb	r3, [r7, #7]

}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002750:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <HAL_IncTick+0x1c>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b05      	ldr	r3, [pc, #20]	@ (800276c <HAL_IncTick+0x20>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4413      	add	r3, r2
 800275a:	4a03      	ldr	r2, [pc, #12]	@ (8002768 <HAL_IncTick+0x1c>)
 800275c:	6013      	str	r3, [r2, #0]
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	200009e0 	.word	0x200009e0
 800276c:	20000414 	.word	0x20000414

08002770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return uwTick;
 8002774:	4b03      	ldr	r3, [pc, #12]	@ (8002784 <HAL_GetTick+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	200009e0 	.word	0x200009e0

08002788 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	609a      	str	r2, [r3, #8]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	609a      	str	r2, [r3, #8]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	3360      	adds	r3, #96	@ 0x60
 8002802:	461a      	mov	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b08      	ldr	r3, [pc, #32]	@ (8002834 <LL_ADC_SetOffset+0x44>)
 8002812:	4013      	ands	r3, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	4313      	orrs	r3, r2
 8002820:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002828:	bf00      	nop
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	03fff000 	.word	0x03fff000

08002838 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3360      	adds	r3, #96	@ 0x60
 8002846:	461a      	mov	r2, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3360      	adds	r3, #96	@ 0x60
 8002874:	461a      	mov	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	431a      	orrs	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800289a:	b480      	push	{r7}
 800289c:	b087      	sub	sp, #28
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3360      	adds	r3, #96	@ 0x60
 80028aa:	461a      	mov	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	431a      	orrs	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80028c4:	bf00      	nop
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3360      	adds	r3, #96	@ 0x60
 80028e0:	461a      	mov	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80028fa:	bf00      	nop
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	615a      	str	r2, [r3, #20]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002952:	b480      	push	{r7}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3330      	adds	r3, #48	@ 0x30
 8002962:	461a      	mov	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	4413      	add	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	211f      	movs	r1, #31
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	401a      	ands	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	0e9b      	lsrs	r3, r3, #26
 800298a:	f003 011f 	and.w	r1, r3, #31
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	431a      	orrs	r2, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b087      	sub	sp, #28
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3314      	adds	r3, #20
 80029ba:	461a      	mov	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	0e5b      	lsrs	r3, r3, #25
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	4413      	add	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	0d1b      	lsrs	r3, r3, #20
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	2107      	movs	r1, #7
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	401a      	ands	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	0d1b      	lsrs	r3, r3, #20
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	431a      	orrs	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029f4:	bf00      	nop
 80029f6:	371c      	adds	r7, #28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0318 	and.w	r3, r3, #24
 8002a22:	4908      	ldr	r1, [pc, #32]	@ (8002a44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a24:	40d9      	lsrs	r1, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	400b      	ands	r3, r1
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	0007ffff 	.word	0x0007ffff

08002a48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 031f 	and.w	r3, r3, #31
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002a74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6093      	str	r3, [r2, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a9c:	d101      	bne.n	8002aa2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ac0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ac4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aec:	d101      	bne.n	8002af2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <LL_ADC_IsEnabled+0x18>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <LL_ADC_IsEnabled+0x1a>
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b5e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b62:	f043 0204 	orr.w	r2, r3, #4
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d101      	bne.n	8002b8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d101      	bne.n	8002bb4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b089      	sub	sp, #36	@ 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e167      	b.n	8002eae <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d109      	bne.n	8002c00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff fa2b 	bl	8002048 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff3f 	bl	8002a88 <LL_ADC_IsDeepPowerDownEnabled>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d004      	beq.n	8002c1a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff25 	bl	8002a64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff ff5a 	bl	8002ad8 <LL_ADC_IsInternalRegulatorEnabled>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d115      	bne.n	8002c56 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ff3e 	bl	8002ab0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c34:	4ba0      	ldr	r3, [pc, #640]	@ (8002eb8 <HAL_ADC_Init+0x2f4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	099b      	lsrs	r3, r3, #6
 8002c3a:	4aa0      	ldr	r2, [pc, #640]	@ (8002ebc <HAL_ADC_Init+0x2f8>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	099b      	lsrs	r3, r3, #6
 8002c42:	3301      	adds	r3, #1
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c48:	e002      	b.n	8002c50 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f9      	bne.n	8002c4a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff3c 	bl	8002ad8 <LL_ADC_IsInternalRegulatorEnabled>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10d      	bne.n	8002c82 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6a:	f043 0210 	orr.w	r2, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ff75 	bl	8002b76 <LL_ADC_REG_IsConversionOngoing>
 8002c8c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 8100 	bne.w	8002e9c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 80fc 	bne.w	8002e9c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002cac:	f043 0202 	orr.w	r2, r3, #2
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff35 	bl	8002b28 <LL_ADC_IsEnabled>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d111      	bne.n	8002ce8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cc4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002cc8:	f7ff ff2e 	bl	8002b28 <LL_ADC_IsEnabled>
 8002ccc:	4604      	mov	r4, r0
 8002cce:	487c      	ldr	r0, [pc, #496]	@ (8002ec0 <HAL_ADC_Init+0x2fc>)
 8002cd0:	f7ff ff2a 	bl	8002b28 <LL_ADC_IsEnabled>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4323      	orrs	r3, r4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4878      	ldr	r0, [pc, #480]	@ (8002ec4 <HAL_ADC_Init+0x300>)
 8002ce4:	f7ff fd50 	bl	8002788 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7f5b      	ldrb	r3, [r3, #29]
 8002cec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cf2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002cf8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002cfe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d06:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d106      	bne.n	8002d24 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	045b      	lsls	r3, r3, #17
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	4b60      	ldr	r3, [pc, #384]	@ (8002ec8 <HAL_ADC_Init+0x304>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	69b9      	ldr	r1, [r7, #24]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff14 	bl	8002b9c <LL_ADC_INJ_IsConversionOngoing>
 8002d74:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d16d      	bne.n	8002e58 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d16a      	bne.n	8002e58 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d86:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d8e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d9e:	f023 0302 	bic.w	r3, r3, #2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	69b9      	ldr	r1, [r7, #24]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d017      	beq.n	8002de4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002dc2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002dcc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002dd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6911      	ldr	r1, [r2, #16]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002de2:	e013      	b.n	8002e0c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002df2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e08:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d118      	bne.n	8002e48 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002e20:	f023 0304 	bic.w	r3, r3, #4
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e2c:	4311      	orrs	r1, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e32:	4311      	orrs	r1, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	611a      	str	r2, [r3, #16]
 8002e46:	e007      	b.n	8002e58 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d10c      	bne.n	8002e7a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	f023 010f 	bic.w	r1, r3, #15
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	1e5a      	subs	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e78:	e007      	b.n	8002e8a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 020f 	bic.w	r2, r2, #15
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	f043 0201 	orr.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e9a:	e007      	b.n	8002eac <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea0:	f043 0210 	orr.w	r2, r3, #16
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002eac:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3724      	adds	r7, #36	@ 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd90      	pop	{r4, r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	2000040c 	.word	0x2000040c
 8002ebc:	053e2d63 	.word	0x053e2d63
 8002ec0:	50000100 	.word	0x50000100
 8002ec4:	50000300 	.word	0x50000300
 8002ec8:	fff04007 	.word	0xfff04007

08002ecc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ed8:	4851      	ldr	r0, [pc, #324]	@ (8003020 <HAL_ADC_Start_DMA+0x154>)
 8002eda:	f7ff fdb5 	bl	8002a48 <LL_ADC_GetMultimode>
 8002ede:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fe46 	bl	8002b76 <LL_ADC_REG_IsConversionOngoing>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 808f 	bne.w	8003010 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_Start_DMA+0x34>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e08a      	b.n	8003016 <HAL_ADC_Start_DMA+0x14a>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	2b05      	cmp	r3, #5
 8002f12:	d002      	beq.n	8002f1a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b09      	cmp	r3, #9
 8002f18:	d173      	bne.n	8003002 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fc8e 	bl	800383c <ADC_Enable>
 8002f20:	4603      	mov	r3, r0
 8002f22:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d166      	bne.n	8002ff8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a38      	ldr	r2, [pc, #224]	@ (8003024 <HAL_ADC_Start_DMA+0x158>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d002      	beq.n	8002f4e <HAL_ADC_Start_DMA+0x82>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	e001      	b.n	8002f52 <HAL_ADC_Start_DMA+0x86>
 8002f4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d002      	beq.n	8002f60 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d105      	bne.n	8002f6c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f64:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d006      	beq.n	8002f86 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f7c:	f023 0206 	bic.w	r2, r3, #6
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	661a      	str	r2, [r3, #96]	@ 0x60
 8002f84:	e002      	b.n	8002f8c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f90:	4a25      	ldr	r2, [pc, #148]	@ (8003028 <HAL_ADC_Start_DMA+0x15c>)
 8002f92:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f98:	4a24      	ldr	r2, [pc, #144]	@ (800302c <HAL_ADC_Start_DMA+0x160>)
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa0:	4a23      	ldr	r2, [pc, #140]	@ (8003030 <HAL_ADC_Start_DMA+0x164>)
 8002fa2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	221c      	movs	r2, #28
 8002faa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0210 	orr.w	r2, r2, #16
 8002fc2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3340      	adds	r3, #64	@ 0x40
 8002fde:	4619      	mov	r1, r3
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f001 fb30 	bl	8004648 <HAL_DMA_Start_IT>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fdac 	bl	8002b4e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002ff6:	e00d      	b.n	8003014 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003000:	e008      	b.n	8003014 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800300e:	e001      	b.n	8003014 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003010:	2302      	movs	r3, #2
 8003012:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003014:	7dfb      	ldrb	r3, [r7, #23]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	50000300 	.word	0x50000300
 8003024:	50000100 	.word	0x50000100
 8003028:	08003949 	.word	0x08003949
 800302c:	08003a21 	.word	0x08003a21
 8003030:	08003a3d 	.word	0x08003a3d

08003034 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b0b6      	sub	sp, #216	@ 0xd8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_ADC_ConfigChannel+0x22>
 800307a:	2302      	movs	r3, #2
 800307c:	e3c8      	b.n	8003810 <HAL_ADC_ConfigChannel+0x7b4>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff fd73 	bl	8002b76 <LL_ADC_REG_IsConversionOngoing>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	f040 83ad 	bne.w	80037f2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6818      	ldr	r0, [r3, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6859      	ldr	r1, [r3, #4]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	f7ff fc54 	bl	8002952 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fd61 	bl	8002b76 <LL_ADC_REG_IsConversionOngoing>
 80030b4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fd6d 	bl	8002b9c <LL_ADC_INJ_IsConversionOngoing>
 80030c2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f040 81d9 	bne.w	8003482 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f040 81d4 	bne.w	8003482 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030e2:	d10f      	bne.n	8003104 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2200      	movs	r2, #0
 80030ee:	4619      	mov	r1, r3
 80030f0:	f7ff fc5b 	bl	80029aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fc02 	bl	8002906 <LL_ADC_SetSamplingTimeCommonConfig>
 8003102:	e00e      	b.n	8003122 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	461a      	mov	r2, r3
 8003112:	f7ff fc4a 	bl	80029aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fbf2 	bl	8002906 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	08db      	lsrs	r3, r3, #3
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b04      	cmp	r3, #4
 8003142:	d022      	beq.n	800318a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6919      	ldr	r1, [r3, #16]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003154:	f7ff fb4c 	bl	80027f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6919      	ldr	r1, [r3, #16]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	461a      	mov	r2, r3
 8003166:	f7ff fb98 	bl	800289a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003176:	2b01      	cmp	r3, #1
 8003178:	d102      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x124>
 800317a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800317e:	e000      	b.n	8003182 <HAL_ADC_ConfigChannel+0x126>
 8003180:	2300      	movs	r3, #0
 8003182:	461a      	mov	r2, r3
 8003184:	f7ff fba4 	bl	80028d0 <LL_ADC_SetOffsetSaturation>
 8003188:	e17b      	b.n	8003482 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fb51 	bl	8002838 <LL_ADC_GetOffsetChannel>
 8003196:	4603      	mov	r3, r0
 8003198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x15a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fb46 	bl	8002838 <LL_ADC_GetOffsetChannel>
 80031ac:	4603      	mov	r3, r0
 80031ae:	0e9b      	lsrs	r3, r3, #26
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	e01e      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x198>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fb3b 	bl	8002838 <LL_ADC_GetOffsetChannel>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80031e4:	2320      	movs	r3, #32
 80031e6:	e004      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80031e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031ec:	fab3 f383 	clz	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d105      	bne.n	800320c <HAL_ADC_ConfigChannel+0x1b0>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0e9b      	lsrs	r3, r3, #26
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	e018      	b.n	800323e <HAL_ADC_ConfigChannel+0x1e2>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003224:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003228:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003230:	2320      	movs	r3, #32
 8003232:	e004      	b.n	800323e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003234:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800323e:	429a      	cmp	r2, r3
 8003240:	d106      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2200      	movs	r2, #0
 8003248:	2100      	movs	r1, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fb0a 	bl	8002864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff faee 	bl	8002838 <LL_ADC_GetOffsetChannel>
 800325c:	4603      	mov	r3, r0
 800325e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <HAL_ADC_ConfigChannel+0x220>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2101      	movs	r1, #1
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fae3 	bl	8002838 <LL_ADC_GetOffsetChannel>
 8003272:	4603      	mov	r3, r0
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	f003 021f 	and.w	r2, r3, #31
 800327a:	e01e      	b.n	80032ba <HAL_ADC_ConfigChannel+0x25e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fad8 	bl	8002838 <LL_ADC_GetOffsetChannel>
 8003288:	4603      	mov	r3, r0
 800328a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800329a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800329e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80032a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80032aa:	2320      	movs	r3, #32
 80032ac:	e004      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80032ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d105      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x276>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0e9b      	lsrs	r3, r3, #26
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	e018      	b.n	8003304 <HAL_ADC_ConfigChannel+0x2a8>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80032e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80032ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80032f6:	2320      	movs	r3, #32
 80032f8:	e004      	b.n	8003304 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80032fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032fe:	fab3 f383 	clz	r3, r3
 8003302:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003304:	429a      	cmp	r2, r3
 8003306:	d106      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2200      	movs	r2, #0
 800330e:	2101      	movs	r1, #1
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff faa7 	bl	8002864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2102      	movs	r1, #2
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fa8b 	bl	8002838 <LL_ADC_GetOffsetChannel>
 8003322:	4603      	mov	r3, r0
 8003324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x2e6>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2102      	movs	r1, #2
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fa80 	bl	8002838 <LL_ADC_GetOffsetChannel>
 8003338:	4603      	mov	r3, r0
 800333a:	0e9b      	lsrs	r3, r3, #26
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	e01e      	b.n	8003380 <HAL_ADC_ConfigChannel+0x324>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2102      	movs	r1, #2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fa75 	bl	8002838 <LL_ADC_GetOffsetChannel>
 800334e:	4603      	mov	r3, r0
 8003350:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003360:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003364:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003368:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003370:	2320      	movs	r3, #32
 8003372:	e004      	b.n	800337e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003374:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x33c>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	0e9b      	lsrs	r3, r3, #26
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	e016      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x36a>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80033aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80033b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80033b8:	2320      	movs	r3, #32
 80033ba:	e004      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80033bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033c0:	fab3 f383 	clz	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d106      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	2102      	movs	r1, #2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fa46 	bl	8002864 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2103      	movs	r1, #3
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fa2a 	bl	8002838 <LL_ADC_GetOffsetChannel>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x3a8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2103      	movs	r1, #3
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fa1f 	bl	8002838 <LL_ADC_GetOffsetChannel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	0e9b      	lsrs	r3, r3, #26
 80033fe:	f003 021f 	and.w	r2, r3, #31
 8003402:	e017      	b.n	8003434 <HAL_ADC_ConfigChannel+0x3d8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2103      	movs	r1, #3
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fa14 	bl	8002838 <LL_ADC_GetOffsetChannel>
 8003410:	4603      	mov	r3, r0
 8003412:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800341c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800341e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003420:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003426:	2320      	movs	r3, #32
 8003428:	e003      	b.n	8003432 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800342a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343c:	2b00      	cmp	r3, #0
 800343e:	d105      	bne.n	800344c <HAL_ADC_ConfigChannel+0x3f0>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	0e9b      	lsrs	r3, r3, #26
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	e011      	b.n	8003470 <HAL_ADC_ConfigChannel+0x414>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800345a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800345c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800345e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003464:	2320      	movs	r3, #32
 8003466:	e003      	b.n	8003470 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003470:	429a      	cmp	r2, r3
 8003472:	d106      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2200      	movs	r2, #0
 800347a:	2103      	movs	r1, #3
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff f9f1 	bl	8002864 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff fb4e 	bl	8002b28 <LL_ADC_IsEnabled>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	f040 8140 	bne.w	8003714 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6819      	ldr	r1, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	461a      	mov	r2, r3
 80034a2:	f7ff faad 	bl	8002a00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	4a8f      	ldr	r2, [pc, #572]	@ (80036e8 <HAL_ADC_ConfigChannel+0x68c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	f040 8131 	bne.w	8003714 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10b      	bne.n	80034da <HAL_ADC_ConfigChannel+0x47e>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	0e9b      	lsrs	r3, r3, #26
 80034c8:	3301      	adds	r3, #1
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2b09      	cmp	r3, #9
 80034d0:	bf94      	ite	ls
 80034d2:	2301      	movls	r3, #1
 80034d4:	2300      	movhi	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	e019      	b.n	800350e <HAL_ADC_ConfigChannel+0x4b2>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80034e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034ea:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80034ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80034f2:	2320      	movs	r3, #32
 80034f4:	e003      	b.n	80034fe <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80034f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034f8:	fab3 f383 	clz	r3, r3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	3301      	adds	r3, #1
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2b09      	cmp	r3, #9
 8003506:	bf94      	ite	ls
 8003508:	2301      	movls	r3, #1
 800350a:	2300      	movhi	r3, #0
 800350c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800350e:	2b00      	cmp	r3, #0
 8003510:	d079      	beq.n	8003606 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351a:	2b00      	cmp	r3, #0
 800351c:	d107      	bne.n	800352e <HAL_ADC_ConfigChannel+0x4d2>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	0e9b      	lsrs	r3, r3, #26
 8003524:	3301      	adds	r3, #1
 8003526:	069b      	lsls	r3, r3, #26
 8003528:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800352c:	e015      	b.n	800355a <HAL_ADC_ConfigChannel+0x4fe>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800353c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800353e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003546:	2320      	movs	r3, #32
 8003548:	e003      	b.n	8003552 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800354a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	3301      	adds	r3, #1
 8003554:	069b      	lsls	r3, r3, #26
 8003556:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_ADC_ConfigChannel+0x51e>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	0e9b      	lsrs	r3, r3, #26
 800356c:	3301      	adds	r3, #1
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	2101      	movs	r1, #1
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	e017      	b.n	80035aa <HAL_ADC_ConfigChannel+0x54e>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800358a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800358c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003592:	2320      	movs	r3, #32
 8003594:	e003      	b.n	800359e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003598:	fab3 f383 	clz	r3, r3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	ea42 0103 	orr.w	r1, r2, r3
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10a      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x574>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	0e9b      	lsrs	r3, r3, #26
 80035c0:	3301      	adds	r3, #1
 80035c2:	f003 021f 	and.w	r2, r3, #31
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	051b      	lsls	r3, r3, #20
 80035ce:	e018      	b.n	8003602 <HAL_ADC_ConfigChannel+0x5a6>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80035de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80035e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80035e8:	2320      	movs	r3, #32
 80035ea:	e003      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80035ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	3301      	adds	r3, #1
 80035f6:	f003 021f 	and.w	r2, r3, #31
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003602:	430b      	orrs	r3, r1
 8003604:	e081      	b.n	800370a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360e:	2b00      	cmp	r3, #0
 8003610:	d107      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x5c6>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	0e9b      	lsrs	r3, r3, #26
 8003618:	3301      	adds	r3, #1
 800361a:	069b      	lsls	r3, r3, #26
 800361c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003620:	e015      	b.n	800364e <HAL_ADC_ConfigChannel+0x5f2>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003632:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800363a:	2320      	movs	r3, #32
 800363c:	e003      	b.n	8003646 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	fab3 f383 	clz	r3, r3
 8003644:	b2db      	uxtb	r3, r3
 8003646:	3301      	adds	r3, #1
 8003648:	069b      	lsls	r3, r3, #26
 800364a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_ADC_ConfigChannel+0x612>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	3301      	adds	r3, #1
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f303 	lsl.w	r3, r1, r3
 800366c:	e017      	b.n	800369e <HAL_ADC_ConfigChannel+0x642>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	61fb      	str	r3, [r7, #28]
  return result;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003686:	2320      	movs	r3, #32
 8003688:	e003      	b.n	8003692 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	fab3 f383 	clz	r3, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	ea42 0103 	orr.w	r1, r2, r3
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x66e>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	0e9b      	lsrs	r3, r3, #26
 80036b4:	3301      	adds	r3, #1
 80036b6:	f003 021f 	and.w	r2, r3, #31
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	3b1e      	subs	r3, #30
 80036c2:	051b      	lsls	r3, r3, #20
 80036c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036c8:	e01e      	b.n	8003708 <HAL_ADC_ConfigChannel+0x6ac>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	613b      	str	r3, [r7, #16]
  return result;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d104      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80036e2:	2320      	movs	r3, #32
 80036e4:	e006      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x698>
 80036e6:	bf00      	nop
 80036e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	f003 021f 	and.w	r2, r3, #31
 80036fa:	4613      	mov	r3, r2
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	4413      	add	r3, r2
 8003700:	3b1e      	subs	r3, #30
 8003702:	051b      	lsls	r3, r3, #20
 8003704:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003708:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800370e:	4619      	mov	r1, r3
 8003710:	f7ff f94b 	bl	80029aa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4b3f      	ldr	r3, [pc, #252]	@ (8003818 <HAL_ADC_ConfigChannel+0x7bc>)
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d071      	beq.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003720:	483e      	ldr	r0, [pc, #248]	@ (800381c <HAL_ADC_ConfigChannel+0x7c0>)
 8003722:	f7ff f857 	bl	80027d4 <LL_ADC_GetCommonPathInternalCh>
 8003726:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a3c      	ldr	r2, [pc, #240]	@ (8003820 <HAL_ADC_ConfigChannel+0x7c4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d004      	beq.n	800373e <HAL_ADC_ConfigChannel+0x6e2>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a3a      	ldr	r2, [pc, #232]	@ (8003824 <HAL_ADC_ConfigChannel+0x7c8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d127      	bne.n	800378e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800373e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003742:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d121      	bne.n	800378e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003752:	d157      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003758:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800375c:	4619      	mov	r1, r3
 800375e:	482f      	ldr	r0, [pc, #188]	@ (800381c <HAL_ADC_ConfigChannel+0x7c0>)
 8003760:	f7ff f825 	bl	80027ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003764:	4b30      	ldr	r3, [pc, #192]	@ (8003828 <HAL_ADC_ConfigChannel+0x7cc>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	4a30      	ldr	r2, [pc, #192]	@ (800382c <HAL_ADC_ConfigChannel+0x7d0>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800377e:	e002      	b.n	8003786 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3b01      	subs	r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f9      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800378c:	e03a      	b.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a27      	ldr	r2, [pc, #156]	@ (8003830 <HAL_ADC_ConfigChannel+0x7d4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d113      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800379c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10d      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a22      	ldr	r2, [pc, #136]	@ (8003834 <HAL_ADC_ConfigChannel+0x7d8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02a      	beq.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037b6:	4619      	mov	r1, r3
 80037b8:	4818      	ldr	r0, [pc, #96]	@ (800381c <HAL_ADC_ConfigChannel+0x7c0>)
 80037ba:	f7fe fff8 	bl	80027ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037be:	e021      	b.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003838 <HAL_ADC_ConfigChannel+0x7dc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d11c      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d116      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a16      	ldr	r2, [pc, #88]	@ (8003834 <HAL_ADC_ConfigChannel+0x7d8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d011      	beq.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037e8:	4619      	mov	r1, r3
 80037ea:	480c      	ldr	r0, [pc, #48]	@ (800381c <HAL_ADC_ConfigChannel+0x7c0>)
 80037ec:	f7fe ffdf 	bl	80027ae <LL_ADC_SetCommonPathInternalCh>
 80037f0:	e008      	b.n	8003804 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800380c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003810:	4618      	mov	r0, r3
 8003812:	37d8      	adds	r7, #216	@ 0xd8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	80080000 	.word	0x80080000
 800381c:	50000300 	.word	0x50000300
 8003820:	c3210000 	.word	0xc3210000
 8003824:	90c00010 	.word	0x90c00010
 8003828:	2000040c 	.word	0x2000040c
 800382c:	053e2d63 	.word	0x053e2d63
 8003830:	c7520000 	.word	0xc7520000
 8003834:	50000100 	.word	0x50000100
 8003838:	cb840000 	.word	0xcb840000

0800383c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003844:	2300      	movs	r3, #0
 8003846:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff f96b 	bl	8002b28 <LL_ADC_IsEnabled>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d169      	bne.n	800392c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	4b36      	ldr	r3, [pc, #216]	@ (8003938 <ADC_Enable+0xfc>)
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00d      	beq.n	8003882 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386a:	f043 0210 	orr.w	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003876:	f043 0201 	orr.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e055      	b.n	800392e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff f93a 	bl	8002b00 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800388c:	482b      	ldr	r0, [pc, #172]	@ (800393c <ADC_Enable+0x100>)
 800388e:	f7fe ffa1 	bl	80027d4 <LL_ADC_GetCommonPathInternalCh>
 8003892:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003894:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003898:	2b00      	cmp	r3, #0
 800389a:	d013      	beq.n	80038c4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800389c:	4b28      	ldr	r3, [pc, #160]	@ (8003940 <ADC_Enable+0x104>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	4a28      	ldr	r2, [pc, #160]	@ (8003944 <ADC_Enable+0x108>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	099b      	lsrs	r3, r3, #6
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038b6:	e002      	b.n	80038be <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f9      	bne.n	80038b8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038c4:	f7fe ff54 	bl	8002770 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038ca:	e028      	b.n	800391e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff f929 	bl	8002b28 <LL_ADC_IsEnabled>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff f90d 	bl	8002b00 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038e6:	f7fe ff43 	bl	8002770 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d914      	bls.n	800391e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d00d      	beq.n	800391e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003906:	f043 0210 	orr.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e007      	b.n	800392e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d1cf      	bne.n	80038cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	8000003f 	.word	0x8000003f
 800393c:	50000300 	.word	0x50000300
 8003940:	2000040c 	.word	0x2000040c
 8003944:	053e2d63 	.word	0x053e2d63

08003948 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003954:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800395e:	2b00      	cmp	r3, #0
 8003960:	d14b      	bne.n	80039fa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003966:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d021      	beq.n	80039c0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe ffd3 	bl	800292c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d032      	beq.n	80039f2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d12b      	bne.n	80039f2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d11f      	bne.n	80039f2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b6:	f043 0201 	orr.w	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039be:	e018      	b.n	80039f2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d111      	bne.n	80039f2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d105      	bne.n	80039f2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ea:	f043 0201 	orr.w	r2, r3, #1
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f7fd fe58 	bl	80016a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039f8:	e00e      	b.n	8003a18 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f7ff fb1e 	bl	8003048 <HAL_ADC_ErrorCallback>
}
 8003a0c:	e004      	b.n	8003a18 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4798      	blx	r3
}
 8003a18:	bf00      	nop
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f7ff fb00 	bl	8003034 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a34:	bf00      	nop
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5a:	f043 0204 	orr.w	r2, r3, #4
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f7ff faf0 	bl	8003048 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a68:	bf00      	nop
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <LL_ADC_IsEnabled>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <LL_ADC_IsEnabled+0x18>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <LL_ADC_IsEnabled+0x1a>
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d101      	bne.n	8003aae <LL_ADC_REG_IsConversionOngoing+0x18>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003abc:	b590      	push	{r4, r7, lr}
 8003abe:	b0a1      	sub	sp, #132	@ 0x84
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e08b      	b.n	8003bf2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003af2:	d102      	bne.n	8003afa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003af4:	4b41      	ldr	r3, [pc, #260]	@ (8003bfc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	e001      	b.n	8003afe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e06a      	b.n	8003bf2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff ffb9 	bl	8003a96 <LL_ADC_REG_IsConversionOngoing>
 8003b24:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ffb3 	bl	8003a96 <LL_ADC_REG_IsConversionOngoing>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d14c      	bne.n	8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d149      	bne.n	8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b3c:	4b30      	ldr	r3, [pc, #192]	@ (8003c00 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003b3e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d028      	beq.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b5a:	035b      	lsls	r3, r3, #13
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b62:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b64:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b68:	f7ff ff82 	bl	8003a70 <LL_ADC_IsEnabled>
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	4823      	ldr	r0, [pc, #140]	@ (8003bfc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b70:	f7ff ff7e 	bl	8003a70 <LL_ADC_IsEnabled>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4323      	orrs	r3, r4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d133      	bne.n	8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b84:	f023 030f 	bic.w	r3, r3, #15
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	6811      	ldr	r1, [r2, #0]
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	6892      	ldr	r2, [r2, #8]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	431a      	orrs	r2, r3
 8003b94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b96:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b98:	e024      	b.n	8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ba2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ba4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ba6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003baa:	f7ff ff61 	bl	8003a70 <LL_ADC_IsEnabled>
 8003bae:	4604      	mov	r4, r0
 8003bb0:	4812      	ldr	r0, [pc, #72]	@ (8003bfc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003bb2:	f7ff ff5d 	bl	8003a70 <LL_ADC_IsEnabled>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4323      	orrs	r3, r4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d112      	bne.n	8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003bbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003bc6:	f023 030f 	bic.w	r3, r3, #15
 8003bca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003bcc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bce:	e009      	b.n	8003be4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd4:	f043 0220 	orr.w	r2, r3, #32
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003be2:	e000      	b.n	8003be6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003be4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003bee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3784      	adds	r7, #132	@ 0x84
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd90      	pop	{r4, r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	50000100 	.word	0x50000100
 8003c00:	50000300 	.word	0x50000300

08003c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c14:	4b0c      	ldr	r3, [pc, #48]	@ (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c20:	4013      	ands	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c36:	4a04      	ldr	r2, [pc, #16]	@ (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	60d3      	str	r3, [r2, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c50:	4b04      	ldr	r3, [pc, #16]	@ (8003c64 <__NVIC_GetPriorityGrouping+0x18>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f003 0307 	and.w	r3, r3, #7
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	db0b      	blt.n	8003c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	f003 021f 	and.w	r2, r3, #31
 8003c80:	4907      	ldr	r1, [pc, #28]	@ (8003ca0 <__NVIC_EnableIRQ+0x38>)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2001      	movs	r0, #1
 8003c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	e000e100 	.word	0xe000e100

08003ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	db0a      	blt.n	8003cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	490c      	ldr	r1, [pc, #48]	@ (8003cf0 <__NVIC_SetPriority+0x4c>)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	0112      	lsls	r2, r2, #4
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ccc:	e00a      	b.n	8003ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4908      	ldr	r1, [pc, #32]	@ (8003cf4 <__NVIC_SetPriority+0x50>)
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3b04      	subs	r3, #4
 8003cdc:	0112      	lsls	r2, r2, #4
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	761a      	strb	r2, [r3, #24]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000e100 	.word	0xe000e100
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	@ 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f1c3 0307 	rsb	r3, r3, #7
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	bf28      	it	cs
 8003d16:	2304      	movcs	r3, #4
 8003d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d902      	bls.n	8003d28 <NVIC_EncodePriority+0x30>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3b03      	subs	r3, #3
 8003d26:	e000      	b.n	8003d2a <NVIC_EncodePriority+0x32>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d40:	f04f 31ff 	mov.w	r1, #4294967295
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4a:	43d9      	mvns	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	4313      	orrs	r3, r2
         );
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3724      	adds	r7, #36	@ 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff ff4c 	bl	8003c04 <__NVIC_SetPriorityGrouping>
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d82:	f7ff ff63 	bl	8003c4c <__NVIC_GetPriorityGrouping>
 8003d86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	6978      	ldr	r0, [r7, #20]
 8003d8e:	f7ff ffb3 	bl	8003cf8 <NVIC_EncodePriority>
 8003d92:	4602      	mov	r2, r0
 8003d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d98:	4611      	mov	r1, r2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff ff82 	bl	8003ca4 <__NVIC_SetPriority>
}
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff ff56 	bl	8003c68 <__NVIC_EnableIRQ>
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e014      	b.n	8003e00 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	791b      	ldrb	r3, [r3, #4]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d105      	bne.n	8003dec <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fe f9b0 	bl	800214c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0b2      	b.n	8003f86 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	795b      	ldrb	r3, [r3, #5]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_DAC_Start_DMA+0x24>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e0ac      	b.n	8003f86 <HAL_DAC_Start_DMA+0x17e>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2202      	movs	r2, #2
 8003e36:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d129      	bne.n	8003e92 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	4a53      	ldr	r2, [pc, #332]	@ (8003f90 <HAL_DAC_Start_DMA+0x188>)
 8003e44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	4a52      	ldr	r2, [pc, #328]	@ (8003f94 <HAL_DAC_Start_DMA+0x18c>)
 8003e4c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	4a51      	ldr	r2, [pc, #324]	@ (8003f98 <HAL_DAC_Start_DMA+0x190>)
 8003e54:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e64:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_DAC_Start_DMA+0x6c>
 8003e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d005      	beq.n	8003e7e <HAL_DAC_Start_DMA+0x76>
 8003e72:	e009      	b.n	8003e88 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	61bb      	str	r3, [r7, #24]
        break;
 8003e7c:	e033      	b.n	8003ee6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	61bb      	str	r3, [r7, #24]
        break;
 8003e86:	e02e      	b.n	8003ee6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3310      	adds	r3, #16
 8003e8e:	61bb      	str	r3, [r7, #24]
        break;
 8003e90:	e029      	b.n	8003ee6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	4a41      	ldr	r2, [pc, #260]	@ (8003f9c <HAL_DAC_Start_DMA+0x194>)
 8003e98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	4a40      	ldr	r2, [pc, #256]	@ (8003fa0 <HAL_DAC_Start_DMA+0x198>)
 8003ea0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8003fa4 <HAL_DAC_Start_DMA+0x19c>)
 8003ea8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003eb8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_DAC_Start_DMA+0xc0>
 8003ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d005      	beq.n	8003ed2 <HAL_DAC_Start_DMA+0xca>
 8003ec6:	e009      	b.n	8003edc <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3314      	adds	r3, #20
 8003ece:	61bb      	str	r3, [r7, #24]
        break;
 8003ed0:	e009      	b.n	8003ee6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3318      	adds	r3, #24
 8003ed8:	61bb      	str	r3, [r7, #24]
        break;
 8003eda:	e004      	b.n	8003ee6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	331c      	adds	r3, #28
 8003ee2:	61bb      	str	r3, [r7, #24]
        break;
 8003ee4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d111      	bne.n	8003f10 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003efa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6898      	ldr	r0, [r3, #8]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	f000 fb9f 	bl	8004648 <HAL_DMA_Start_IT>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e010      	b.n	8003f32 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003f1e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	68d8      	ldr	r0, [r3, #12]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	f000 fb8d 	bl	8004648 <HAL_DMA_Start_IT>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003f38:	7ffb      	ldrb	r3, [r7, #31]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11c      	bne.n	8003f78 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f56:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <HAL_DAC_Start_DMA+0x1a0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	099b      	lsrs	r3, r3, #6
 8003f5c:	4a13      	ldr	r2, [pc, #76]	@ (8003fac <HAL_DAC_Start_DMA+0x1a4>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	099b      	lsrs	r3, r3, #6
 8003f64:	3301      	adds	r3, #1
 8003f66:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003f68:	e002      	b.n	8003f70 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f9      	bne.n	8003f6a <HAL_DAC_Start_DMA+0x162>
 8003f76:	e005      	b.n	8003f84 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	f043 0204 	orr.w	r2, r3, #4
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	080043e5 	.word	0x080043e5
 8003f94:	08004407 	.word	0x08004407
 8003f98:	08004423 	.word	0x08004423
 8003f9c:	0800448d 	.word	0x0800448d
 8003fa0:	080044af 	.word	0x080044af
 8003fa4:	080044cb 	.word	0x080044cb
 8003fa8:	2000040c 	.word	0x2000040c
 8003fac:	053e2d63 	.word	0x053e2d63

08003fb0 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e03e      	b.n	8004042 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6819      	ldr	r1, [r3, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43da      	mvns	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	400a      	ands	r2, r1
 8003fe0:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6819      	ldr	r1, [r3, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	2201      	movs	r2, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43da      	mvns	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	400a      	ands	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10d      	bne.n	8004020 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fb98 	bl	800473e <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e00c      	b.n	800403a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fb8a 	bl	800473e <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8004038:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	@ 0x28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_DAC_ConfigChannel+0x1c>
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e19e      	b.n	80043d2 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	795b      	ldrb	r3, [r3, #5]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_DAC_ConfigChannel+0x2c>
 800409c:	2302      	movs	r3, #2
 800409e:	e198      	b.n	80043d2 <HAL_DAC_ConfigChannel+0x35e>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2202      	movs	r2, #2
 80040aa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d17a      	bne.n	80041aa <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80040b4:	f7fe fb5c 	bl	8002770 <HAL_GetTick>
 80040b8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d13d      	bne.n	800413c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040c0:	e018      	b.n	80040f4 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80040c2:	f7fe fb55 	bl	8002770 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d911      	bls.n	80040f4 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f043 0208 	orr.w	r2, r3, #8
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2203      	movs	r2, #3
 80040ee:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e16e      	b.n	80043d2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1df      	bne.n	80040c2 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800410a:	641a      	str	r2, [r3, #64]	@ 0x40
 800410c:	e020      	b.n	8004150 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800410e:	f7fe fb2f 	bl	8002770 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d90f      	bls.n	800413c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004122:	2b00      	cmp	r3, #0
 8004124:	da0a      	bge.n	800413c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f043 0208 	orr.w	r2, r3, #8
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2203      	movs	r2, #3
 8004136:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e14a      	b.n	80043d2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004142:	2b00      	cmp	r3, #0
 8004144:	dbe3      	blt.n	800410e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800414e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	ea02 0103 	and.w	r1, r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	409a      	lsls	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	21ff      	movs	r1, #255	@ 0xff
 800418c:	fa01 f303 	lsl.w	r3, r1, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	ea02 0103 	and.w	r1, r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	409a      	lsls	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d11d      	bne.n	80041ee <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	221f      	movs	r2, #31
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ca:	4013      	ands	r3, r2
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e2:	4313      	orrs	r3, r2
 80041e4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	2207      	movs	r2, #7
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004206:	4013      	ands	r3, r2
 8004208:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d102      	bne.n	8004218 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8004212:	2300      	movs	r3, #0
 8004214:	623b      	str	r3, [r7, #32]
 8004216:	e00f      	b.n	8004238 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d102      	bne.n	8004226 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004220:	2301      	movs	r3, #1
 8004222:	623b      	str	r3, [r7, #32]
 8004224:	e008      	b.n	8004238 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800422e:	2301      	movs	r3, #1
 8004230:	623b      	str	r3, [r7, #32]
 8004232:	e001      	b.n	8004238 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004234:	2300      	movs	r3, #0
 8004236:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	6a3a      	ldr	r2, [r7, #32]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425a:	4013      	ands	r3, r2
 800425c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	791b      	ldrb	r3, [r3, #4]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d102      	bne.n	800426c <HAL_DAC_ConfigChannel+0x1f8>
 8004266:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800426a:	e000      	b.n	800426e <HAL_DAC_ConfigChannel+0x1fa>
 800426c:	2300      	movs	r3, #0
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004286:	4013      	ands	r3, r2
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	795b      	ldrb	r3, [r3, #5]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d102      	bne.n	8004298 <HAL_DAC_ConfigChannel+0x224>
 8004292:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004296:	e000      	b.n	800429a <HAL_DAC_ConfigChannel+0x226>
 8004298:	2300      	movs	r3, #0
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80042a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80042a6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d114      	bne.n	80042da <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80042b0:	f001 fb3a 	bl	8005928 <HAL_RCC_GetHCLKFreq>
 80042b4:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4a48      	ldr	r2, [pc, #288]	@ (80043dc <HAL_DAC_ConfigChannel+0x368>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d904      	bls.n	80042c8 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c6:	e00f      	b.n	80042e8 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4a45      	ldr	r2, [pc, #276]	@ (80043e0 <HAL_DAC_ConfigChannel+0x36c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d90a      	bls.n	80042e6 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d8:	e006      	b.n	80042e8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e0:	4313      	orrs	r3, r2
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e4:	e000      	b.n	80042e8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80042e6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f6:	4313      	orrs	r3, r2
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004300:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6819      	ldr	r1, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43da      	mvns	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	400a      	ands	r2, r1
 800431e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43db      	mvns	r3, r3
 8004338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433a:	4013      	ands	r3, r2
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004352:	4313      	orrs	r3, r2
 8004354:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800435c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6819      	ldr	r1, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	22c0      	movs	r2, #192	@ 0xc0
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	43da      	mvns	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	400a      	ands	r2, r1
 8004378:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	089b      	lsrs	r3, r3, #2
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80043a8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ac:	43db      	mvns	r3, r3
 80043ae:	ea02 0103 	and.w	r1, r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	409a      	lsls	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80043d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3728      	adds	r7, #40	@ 0x28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	09896800 	.word	0x09896800
 80043e0:	04c4b400 	.word	0x04c4b400

080043e4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f7fd f97a 	bl	80016ec <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	711a      	strb	r2, [r3, #4]
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004412:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff fe18 	bl	800404a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f043 0204 	orr.w	r2, r3, #4
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7ff fe0e 	bl	800405e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	711a      	strb	r2, [r3, #4]
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff ffd8 	bl	8004450 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	711a      	strb	r2, [r3, #4]
}
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7ff ffd1 	bl	8004464 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f043 0204 	orr.w	r2, r3, #4
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff ffc7 	bl	8004478 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	711a      	strb	r2, [r3, #4]
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e08d      	b.n	8004626 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	4b47      	ldr	r3, [pc, #284]	@ (8004630 <HAL_DMA_Init+0x138>)
 8004512:	429a      	cmp	r2, r3
 8004514:	d80f      	bhi.n	8004536 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	4b45      	ldr	r3, [pc, #276]	@ (8004634 <HAL_DMA_Init+0x13c>)
 800451e:	4413      	add	r3, r2
 8004520:	4a45      	ldr	r2, [pc, #276]	@ (8004638 <HAL_DMA_Init+0x140>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	009a      	lsls	r2, r3, #2
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a42      	ldr	r2, [pc, #264]	@ (800463c <HAL_DMA_Init+0x144>)
 8004532:	641a      	str	r2, [r3, #64]	@ 0x40
 8004534:	e00e      	b.n	8004554 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	4b40      	ldr	r3, [pc, #256]	@ (8004640 <HAL_DMA_Init+0x148>)
 800453e:	4413      	add	r3, r2
 8004540:	4a3d      	ldr	r2, [pc, #244]	@ (8004638 <HAL_DMA_Init+0x140>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	009a      	lsls	r2, r3, #2
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a3c      	ldr	r2, [pc, #240]	@ (8004644 <HAL_DMA_Init+0x14c>)
 8004552:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800456a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800456e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fa76 	bl	8004a98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045b4:	d102      	bne.n	80045bc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80045d0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d010      	beq.n	80045fc <HAL_DMA_Init+0x104>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d80c      	bhi.n	80045fc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fa96 	bl	8004b14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	e008      	b.n	800460e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40020407 	.word	0x40020407
 8004634:	bffdfff8 	.word	0xbffdfff8
 8004638:	cccccccd 	.word	0xcccccccd
 800463c:	40020000 	.word	0x40020000
 8004640:	bffdfbf8 	.word	0xbffdfbf8
 8004644:	40020400 	.word	0x40020400

08004648 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_DMA_Start_IT+0x20>
 8004664:	2302      	movs	r3, #2
 8004666:	e066      	b.n	8004736 <HAL_DMA_Start_IT+0xee>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	d155      	bne.n	8004728 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0201 	bic.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f9bb 	bl	8004a1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d008      	beq.n	80046c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 020e 	orr.w	r2, r2, #14
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e00f      	b.n	80046e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0204 	bic.w	r2, r2, #4
 80046ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 020a 	orr.w	r2, r2, #10
 80046de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d007      	beq.n	80046fe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046fc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004702:	2b00      	cmp	r3, #0
 8004704:	d007      	beq.n	8004716 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004710:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004714:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e005      	b.n	8004734 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004730:	2302      	movs	r3, #2
 8004732:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004734:	7dfb      	ldrb	r3, [r7, #23]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d005      	beq.n	8004762 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2204      	movs	r2, #4
 800475a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
 8004760:	e037      	b.n	80047d2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 020e 	bic.w	r2, r2, #14
 8004770:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800477c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004780:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0201 	bic.w	r2, r2, #1
 8004790:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004796:	f003 021f 	and.w	r2, r3, #31
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479e:	2101      	movs	r1, #1
 80047a0:	fa01 f202 	lsl.w	r2, r1, r2
 80047a4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047ae:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00c      	beq.n	80047d2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047c6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80047d0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f8:	2300      	movs	r3, #0
 80047fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d00d      	beq.n	8004824 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2204      	movs	r2, #4
 800480c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
 8004822:	e047      	b.n	80048b4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 020e 	bic.w	r2, r2, #14
 8004832:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800484e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004852:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004858:	f003 021f 	and.w	r2, r3, #31
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004860:	2101      	movs	r1, #1
 8004862:	fa01 f202 	lsl.w	r2, r1, r2
 8004866:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004870:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00c      	beq.n	8004894 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004884:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004888:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004892:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4798      	blx	r3
    }
  }
  return status;
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	2204      	movs	r2, #4
 80048e0:	409a      	lsls	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d026      	beq.n	8004938 <HAL_DMA_IRQHandler+0x7a>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d021      	beq.n	8004938 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d107      	bne.n	8004912 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0204 	bic.w	r2, r2, #4
 8004910:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004916:	f003 021f 	and.w	r2, r3, #31
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491e:	2104      	movs	r1, #4
 8004920:	fa01 f202 	lsl.w	r2, r1, r2
 8004924:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492a:	2b00      	cmp	r3, #0
 800492c:	d071      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004936:	e06c      	b.n	8004a12 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	2202      	movs	r2, #2
 8004942:	409a      	lsls	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4013      	ands	r3, r2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d02e      	beq.n	80049aa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d029      	beq.n	80049aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10b      	bne.n	800497c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 020a 	bic.w	r2, r2, #10
 8004972:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004980:	f003 021f 	and.w	r2, r3, #31
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004988:	2102      	movs	r1, #2
 800498a:	fa01 f202 	lsl.w	r2, r1, r2
 800498e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d038      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80049a8:	e033      	b.n	8004a12 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	2208      	movs	r2, #8
 80049b4:	409a      	lsls	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d02a      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d025      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 020e 	bic.w	r2, r2, #14
 80049d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049dc:	f003 021f 	and.w	r2, r3, #31
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	2101      	movs	r1, #1
 80049e6:	fa01 f202 	lsl.w	r2, r1, r2
 80049ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d004      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
}
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a32:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a44:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4a:	f003 021f 	and.w	r2, r3, #31
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	2101      	movs	r1, #1
 8004a54:	fa01 f202 	lsl.w	r2, r1, r2
 8004a58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d108      	bne.n	8004a7c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a7a:	e007      	b.n	8004a8c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	60da      	str	r2, [r3, #12]
}
 8004a8c:	bf00      	nop
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4b16      	ldr	r3, [pc, #88]	@ (8004b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d802      	bhi.n	8004ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004aac:	4b15      	ldr	r3, [pc, #84]	@ (8004b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e001      	b.n	8004ab6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004ab2:	4b15      	ldr	r3, [pc, #84]	@ (8004b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004ab4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	3b08      	subs	r3, #8
 8004ac2:	4a12      	ldr	r2, [pc, #72]	@ (8004b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad0:	089b      	lsrs	r3, r3, #2
 8004ad2:	009a      	lsls	r2, r3, #2
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8004b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004ae2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	2201      	movs	r2, #1
 8004aec:	409a      	lsls	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40020407 	.word	0x40020407
 8004b04:	40020800 	.word	0x40020800
 8004b08:	40020820 	.word	0x40020820
 8004b0c:	cccccccd 	.word	0xcccccccd
 8004b10:	40020880 	.word	0x40020880

08004b14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a08      	ldr	r2, [pc, #32]	@ (8004b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b36:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	2201      	movs	r2, #1
 8004b42:	409a      	lsls	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	1000823f 	.word	0x1000823f
 8004b58:	40020940 	.word	0x40020940

08004b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b6a:	e15a      	b.n	8004e22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	2101      	movs	r1, #1
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	fa01 f303 	lsl.w	r3, r1, r3
 8004b78:	4013      	ands	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 814c 	beq.w	8004e1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d005      	beq.n	8004b9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d130      	bne.n	8004bfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	43db      	mvns	r3, r3
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	43db      	mvns	r3, r3
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4013      	ands	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	091b      	lsrs	r3, r3, #4
 8004be8:	f003 0201 	and.w	r2, r3, #1
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d017      	beq.n	8004c3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	2203      	movs	r2, #3
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	43db      	mvns	r3, r3
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d123      	bne.n	8004c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	08da      	lsrs	r2, r3, #3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3208      	adds	r2, #8
 8004c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	220f      	movs	r2, #15
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43db      	mvns	r3, r3
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4013      	ands	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	08da      	lsrs	r2, r3, #3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3208      	adds	r2, #8
 8004c88:	6939      	ldr	r1, [r7, #16]
 8004c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	2203      	movs	r2, #3
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f003 0203 	and.w	r2, r3, #3
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 80a6 	beq.w	8004e1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cd0:	4b5b      	ldr	r3, [pc, #364]	@ (8004e40 <HAL_GPIO_Init+0x2e4>)
 8004cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd4:	4a5a      	ldr	r2, [pc, #360]	@ (8004e40 <HAL_GPIO_Init+0x2e4>)
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	6613      	str	r3, [r2, #96]	@ 0x60
 8004cdc:	4b58      	ldr	r3, [pc, #352]	@ (8004e40 <HAL_GPIO_Init+0x2e4>)
 8004cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	60bb      	str	r3, [r7, #8]
 8004ce6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ce8:	4a56      	ldr	r2, [pc, #344]	@ (8004e44 <HAL_GPIO_Init+0x2e8>)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	089b      	lsrs	r3, r3, #2
 8004cee:	3302      	adds	r3, #2
 8004cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	220f      	movs	r2, #15
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	43db      	mvns	r3, r3
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004d12:	d01f      	beq.n	8004d54 <HAL_GPIO_Init+0x1f8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a4c      	ldr	r2, [pc, #304]	@ (8004e48 <HAL_GPIO_Init+0x2ec>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d019      	beq.n	8004d50 <HAL_GPIO_Init+0x1f4>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a4b      	ldr	r2, [pc, #300]	@ (8004e4c <HAL_GPIO_Init+0x2f0>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <HAL_GPIO_Init+0x1f0>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a4a      	ldr	r2, [pc, #296]	@ (8004e50 <HAL_GPIO_Init+0x2f4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00d      	beq.n	8004d48 <HAL_GPIO_Init+0x1ec>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a49      	ldr	r2, [pc, #292]	@ (8004e54 <HAL_GPIO_Init+0x2f8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d007      	beq.n	8004d44 <HAL_GPIO_Init+0x1e8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a48      	ldr	r2, [pc, #288]	@ (8004e58 <HAL_GPIO_Init+0x2fc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d101      	bne.n	8004d40 <HAL_GPIO_Init+0x1e4>
 8004d3c:	2305      	movs	r3, #5
 8004d3e:	e00a      	b.n	8004d56 <HAL_GPIO_Init+0x1fa>
 8004d40:	2306      	movs	r3, #6
 8004d42:	e008      	b.n	8004d56 <HAL_GPIO_Init+0x1fa>
 8004d44:	2304      	movs	r3, #4
 8004d46:	e006      	b.n	8004d56 <HAL_GPIO_Init+0x1fa>
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e004      	b.n	8004d56 <HAL_GPIO_Init+0x1fa>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e002      	b.n	8004d56 <HAL_GPIO_Init+0x1fa>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <HAL_GPIO_Init+0x1fa>
 8004d54:	2300      	movs	r3, #0
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	f002 0203 	and.w	r2, r2, #3
 8004d5c:	0092      	lsls	r2, r2, #2
 8004d5e:	4093      	lsls	r3, r2
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d66:	4937      	ldr	r1, [pc, #220]	@ (8004e44 <HAL_GPIO_Init+0x2e8>)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d74:	4b39      	ldr	r3, [pc, #228]	@ (8004e5c <HAL_GPIO_Init+0x300>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	4013      	ands	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d98:	4a30      	ldr	r2, [pc, #192]	@ (8004e5c <HAL_GPIO_Init+0x300>)
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8004e5c <HAL_GPIO_Init+0x300>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	43db      	mvns	r3, r3
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4013      	ands	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004dc2:	4a26      	ldr	r2, [pc, #152]	@ (8004e5c <HAL_GPIO_Init+0x300>)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004dc8:	4b24      	ldr	r3, [pc, #144]	@ (8004e5c <HAL_GPIO_Init+0x300>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004dec:	4a1b      	ldr	r2, [pc, #108]	@ (8004e5c <HAL_GPIO_Init+0x300>)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004df2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e5c <HAL_GPIO_Init+0x300>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e16:	4a11      	ldr	r2, [pc, #68]	@ (8004e5c <HAL_GPIO_Init+0x300>)
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f47f ae9d 	bne.w	8004b6c <HAL_GPIO_Init+0x10>
  }
}
 8004e32:	bf00      	nop
 8004e34:	bf00      	nop
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40021000 	.word	0x40021000
 8004e44:	40010000 	.word	0x40010000
 8004e48:	48000400 	.word	0x48000400
 8004e4c:	48000800 	.word	0x48000800
 8004e50:	48000c00 	.word	0x48000c00
 8004e54:	48001000 	.word	0x48001000
 8004e58:	48001400 	.word	0x48001400
 8004e5c:	40010400 	.word	0x40010400

08004e60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d141      	bne.n	8004ef2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e6e:	4b4b      	ldr	r3, [pc, #300]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7a:	d131      	bne.n	8004ee0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e7c:	4b47      	ldr	r3, [pc, #284]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e82:	4a46      	ldr	r2, [pc, #280]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e8c:	4b43      	ldr	r3, [pc, #268]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e94:	4a41      	ldr	r2, [pc, #260]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e9c:	4b40      	ldr	r3, [pc, #256]	@ (8004fa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2232      	movs	r2, #50	@ 0x32
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eac:	0c9b      	lsrs	r3, r3, #18
 8004eae:	3301      	adds	r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eb2:	e002      	b.n	8004eba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eba:	4b38      	ldr	r3, [pc, #224]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ec6:	d102      	bne.n	8004ece <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f2      	bne.n	8004eb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ece:	4b33      	ldr	r3, [pc, #204]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eda:	d158      	bne.n	8004f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e057      	b.n	8004f90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ef0:	e04d      	b.n	8004f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ef8:	d141      	bne.n	8004f7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004efa:	4b28      	ldr	r3, [pc, #160]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f06:	d131      	bne.n	8004f6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f08:	4b24      	ldr	r3, [pc, #144]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f0e:	4a23      	ldr	r2, [pc, #140]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f18:	4b20      	ldr	r3, [pc, #128]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f20:	4a1e      	ldr	r2, [pc, #120]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f28:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2232      	movs	r2, #50	@ 0x32
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	0c9b      	lsrs	r3, r3, #18
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f3e:	e002      	b.n	8004f46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f46:	4b15      	ldr	r3, [pc, #84]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f52:	d102      	bne.n	8004f5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f2      	bne.n	8004f40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f5a:	4b10      	ldr	r3, [pc, #64]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f66:	d112      	bne.n	8004f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e011      	b.n	8004f90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f72:	4a0a      	ldr	r2, [pc, #40]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f7c:	e007      	b.n	8004f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f7e:	4b07      	ldr	r3, [pc, #28]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f86:	4a05      	ldr	r2, [pc, #20]	@ (8004f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40007000 	.word	0x40007000
 8004fa0:	2000040c 	.word	0x2000040c
 8004fa4:	431bde83 	.word	0x431bde83

08004fa8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004fac:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	4a04      	ldr	r2, [pc, #16]	@ (8004fc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fb6:	6093      	str	r3, [r2, #8]
}
 8004fb8:	bf00      	nop
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40007000 	.word	0x40007000

08004fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e2fe      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d075      	beq.n	80050d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fe6:	4b97      	ldr	r3, [pc, #604]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 030c 	and.w	r3, r3, #12
 8004fee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ff0:	4b94      	ldr	r3, [pc, #592]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b0c      	cmp	r3, #12
 8004ffe:	d102      	bne.n	8005006 <HAL_RCC_OscConfig+0x3e>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2b03      	cmp	r3, #3
 8005004:	d002      	beq.n	800500c <HAL_RCC_OscConfig+0x44>
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b08      	cmp	r3, #8
 800500a:	d10b      	bne.n	8005024 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800500c:	4b8d      	ldr	r3, [pc, #564]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d05b      	beq.n	80050d0 <HAL_RCC_OscConfig+0x108>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d157      	bne.n	80050d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e2d9      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800502c:	d106      	bne.n	800503c <HAL_RCC_OscConfig+0x74>
 800502e:	4b85      	ldr	r3, [pc, #532]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a84      	ldr	r2, [pc, #528]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e01d      	b.n	8005078 <HAL_RCC_OscConfig+0xb0>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005044:	d10c      	bne.n	8005060 <HAL_RCC_OscConfig+0x98>
 8005046:	4b7f      	ldr	r3, [pc, #508]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a7e      	ldr	r2, [pc, #504]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 800504c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	4b7c      	ldr	r3, [pc, #496]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a7b      	ldr	r2, [pc, #492]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8005058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	e00b      	b.n	8005078 <HAL_RCC_OscConfig+0xb0>
 8005060:	4b78      	ldr	r3, [pc, #480]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a77      	ldr	r2, [pc, #476]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8005066:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	4b75      	ldr	r3, [pc, #468]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a74      	ldr	r2, [pc, #464]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8005072:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d013      	beq.n	80050a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005080:	f7fd fb76 	bl	8002770 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005088:	f7fd fb72 	bl	8002770 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b64      	cmp	r3, #100	@ 0x64
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e29e      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800509a:	4b6a      	ldr	r3, [pc, #424]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0xc0>
 80050a6:	e014      	b.n	80050d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a8:	f7fd fb62 	bl	8002770 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b0:	f7fd fb5e 	bl	8002770 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	@ 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e28a      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050c2:	4b60      	ldr	r3, [pc, #384]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f0      	bne.n	80050b0 <HAL_RCC_OscConfig+0xe8>
 80050ce:	e000      	b.n	80050d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d075      	beq.n	80051ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050de:	4b59      	ldr	r3, [pc, #356]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050e8:	4b56      	ldr	r3, [pc, #344]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b0c      	cmp	r3, #12
 80050f6:	d102      	bne.n	80050fe <HAL_RCC_OscConfig+0x136>
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d002      	beq.n	8005104 <HAL_RCC_OscConfig+0x13c>
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b04      	cmp	r3, #4
 8005102:	d11f      	bne.n	8005144 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005104:	4b4f      	ldr	r3, [pc, #316]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_RCC_OscConfig+0x154>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e25d      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511c:	4b49      	ldr	r3, [pc, #292]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	061b      	lsls	r3, r3, #24
 800512a:	4946      	ldr	r1, [pc, #280]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 800512c:	4313      	orrs	r3, r2
 800512e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005130:	4b45      	ldr	r3, [pc, #276]	@ (8005248 <HAL_RCC_OscConfig+0x280>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f7fd f935 	bl	80023a4 <HAL_InitTick>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d043      	beq.n	80051c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e249      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d023      	beq.n	8005194 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800514c:	4b3d      	ldr	r3, [pc, #244]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a3c      	ldr	r2, [pc, #240]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8005152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005158:	f7fd fb0a 	bl	8002770 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005160:	f7fd fb06 	bl	8002770 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e232      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005172:	4b34      	ldr	r3, [pc, #208]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800517e:	4b31      	ldr	r3, [pc, #196]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	061b      	lsls	r3, r3, #24
 800518c:	492d      	ldr	r1, [pc, #180]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 800518e:	4313      	orrs	r3, r2
 8005190:	604b      	str	r3, [r1, #4]
 8005192:	e01a      	b.n	80051ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005194:	4b2b      	ldr	r3, [pc, #172]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a2a      	ldr	r2, [pc, #168]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 800519a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800519e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fd fae6 	bl	8002770 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a8:	f7fd fae2 	bl	8002770 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e20e      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051ba:	4b22      	ldr	r3, [pc, #136]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x1e0>
 80051c6:	e000      	b.n	80051ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d041      	beq.n	800525a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01c      	beq.n	8005218 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051de:	4b19      	ldr	r3, [pc, #100]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 80051e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051e4:	4a17      	ldr	r2, [pc, #92]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 80051e6:	f043 0301 	orr.w	r3, r3, #1
 80051ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ee:	f7fd fabf 	bl	8002770 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f6:	f7fd fabb 	bl	8002770 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e1e7      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005208:	4b0e      	ldr	r3, [pc, #56]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 800520a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0ef      	beq.n	80051f6 <HAL_RCC_OscConfig+0x22e>
 8005216:	e020      	b.n	800525a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005218:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 800521a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800521e:	4a09      	ldr	r2, [pc, #36]	@ (8005244 <HAL_RCC_OscConfig+0x27c>)
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005228:	f7fd faa2 	bl	8002770 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800522e:	e00d      	b.n	800524c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005230:	f7fd fa9e 	bl	8002770 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d906      	bls.n	800524c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e1ca      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
 8005242:	bf00      	nop
 8005244:	40021000 	.word	0x40021000
 8005248:	20000410 	.word	0x20000410
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800524c:	4b8c      	ldr	r3, [pc, #560]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 800524e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1ea      	bne.n	8005230 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 80a6 	beq.w	80053b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005268:	2300      	movs	r3, #0
 800526a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800526c:	4b84      	ldr	r3, [pc, #528]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 800526e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <HAL_RCC_OscConfig+0x2b4>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <HAL_RCC_OscConfig+0x2b6>
 800527c:	2300      	movs	r3, #0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00d      	beq.n	800529e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005282:	4b7f      	ldr	r3, [pc, #508]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005286:	4a7e      	ldr	r2, [pc, #504]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800528c:	6593      	str	r3, [r2, #88]	@ 0x58
 800528e:	4b7c      	ldr	r3, [pc, #496]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800529a:	2301      	movs	r3, #1
 800529c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800529e:	4b79      	ldr	r3, [pc, #484]	@ (8005484 <HAL_RCC_OscConfig+0x4bc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d118      	bne.n	80052dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052aa:	4b76      	ldr	r3, [pc, #472]	@ (8005484 <HAL_RCC_OscConfig+0x4bc>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a75      	ldr	r2, [pc, #468]	@ (8005484 <HAL_RCC_OscConfig+0x4bc>)
 80052b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052b6:	f7fd fa5b 	bl	8002770 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052be:	f7fd fa57 	bl	8002770 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e183      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052d0:	4b6c      	ldr	r3, [pc, #432]	@ (8005484 <HAL_RCC_OscConfig+0x4bc>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0f0      	beq.n	80052be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d108      	bne.n	80052f6 <HAL_RCC_OscConfig+0x32e>
 80052e4:	4b66      	ldr	r3, [pc, #408]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ea:	4a65      	ldr	r2, [pc, #404]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052f4:	e024      	b.n	8005340 <HAL_RCC_OscConfig+0x378>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d110      	bne.n	8005320 <HAL_RCC_OscConfig+0x358>
 80052fe:	4b60      	ldr	r3, [pc, #384]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005304:	4a5e      	ldr	r2, [pc, #376]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005306:	f043 0304 	orr.w	r3, r3, #4
 800530a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800530e:	4b5c      	ldr	r3, [pc, #368]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005314:	4a5a      	ldr	r2, [pc, #360]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800531e:	e00f      	b.n	8005340 <HAL_RCC_OscConfig+0x378>
 8005320:	4b57      	ldr	r3, [pc, #348]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005326:	4a56      	ldr	r2, [pc, #344]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005330:	4b53      	ldr	r3, [pc, #332]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005336:	4a52      	ldr	r2, [pc, #328]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005338:	f023 0304 	bic.w	r3, r3, #4
 800533c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d016      	beq.n	8005376 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005348:	f7fd fa12 	bl	8002770 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800534e:	e00a      	b.n	8005366 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005350:	f7fd fa0e 	bl	8002770 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e138      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005366:	4b46      	ldr	r3, [pc, #280]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0ed      	beq.n	8005350 <HAL_RCC_OscConfig+0x388>
 8005374:	e015      	b.n	80053a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005376:	f7fd f9fb 	bl	8002770 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800537c:	e00a      	b.n	8005394 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537e:	f7fd f9f7 	bl	8002770 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538c:	4293      	cmp	r3, r2
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e121      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005394:	4b3a      	ldr	r3, [pc, #232]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1ed      	bne.n	800537e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053a2:	7ffb      	ldrb	r3, [r7, #31]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d105      	bne.n	80053b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a8:	4b35      	ldr	r3, [pc, #212]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 80053aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ac:	4a34      	ldr	r2, [pc, #208]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 80053ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d03c      	beq.n	800543a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01c      	beq.n	8005402 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 80053ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 80053d0:	f043 0301 	orr.w	r3, r3, #1
 80053d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d8:	f7fd f9ca 	bl	8002770 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053e0:	f7fd f9c6 	bl	8002770 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e0f2      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053f2:	4b23      	ldr	r3, [pc, #140]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 80053f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0ef      	beq.n	80053e0 <HAL_RCC_OscConfig+0x418>
 8005400:	e01b      	b.n	800543a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005402:	4b1f      	ldr	r3, [pc, #124]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005404:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005408:	4a1d      	ldr	r2, [pc, #116]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 800540a:	f023 0301 	bic.w	r3, r3, #1
 800540e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005412:	f7fd f9ad 	bl	8002770 <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800541a:	f7fd f9a9 	bl	8002770 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e0d5      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800542c:	4b14      	ldr	r3, [pc, #80]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 800542e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1ef      	bne.n	800541a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 80c9 	beq.w	80055d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005444:	4b0e      	ldr	r3, [pc, #56]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 030c 	and.w	r3, r3, #12
 800544c:	2b0c      	cmp	r3, #12
 800544e:	f000 8083 	beq.w	8005558 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d15e      	bne.n	8005518 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545a:	4b09      	ldr	r3, [pc, #36]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a08      	ldr	r2, [pc, #32]	@ (8005480 <HAL_RCC_OscConfig+0x4b8>)
 8005460:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005466:	f7fd f983 	bl	8002770 <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800546c:	e00c      	b.n	8005488 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800546e:	f7fd f97f 	bl	8002770 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d905      	bls.n	8005488 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e0ab      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
 8005480:	40021000 	.word	0x40021000
 8005484:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005488:	4b55      	ldr	r3, [pc, #340]	@ (80055e0 <HAL_RCC_OscConfig+0x618>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1ec      	bne.n	800546e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005494:	4b52      	ldr	r3, [pc, #328]	@ (80055e0 <HAL_RCC_OscConfig+0x618>)
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	4b52      	ldr	r3, [pc, #328]	@ (80055e4 <HAL_RCC_OscConfig+0x61c>)
 800549a:	4013      	ands	r3, r2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6a11      	ldr	r1, [r2, #32]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054a4:	3a01      	subs	r2, #1
 80054a6:	0112      	lsls	r2, r2, #4
 80054a8:	4311      	orrs	r1, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80054ae:	0212      	lsls	r2, r2, #8
 80054b0:	4311      	orrs	r1, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80054b6:	0852      	lsrs	r2, r2, #1
 80054b8:	3a01      	subs	r2, #1
 80054ba:	0552      	lsls	r2, r2, #21
 80054bc:	4311      	orrs	r1, r2
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80054c2:	0852      	lsrs	r2, r2, #1
 80054c4:	3a01      	subs	r2, #1
 80054c6:	0652      	lsls	r2, r2, #25
 80054c8:	4311      	orrs	r1, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054ce:	06d2      	lsls	r2, r2, #27
 80054d0:	430a      	orrs	r2, r1
 80054d2:	4943      	ldr	r1, [pc, #268]	@ (80055e0 <HAL_RCC_OscConfig+0x618>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d8:	4b41      	ldr	r3, [pc, #260]	@ (80055e0 <HAL_RCC_OscConfig+0x618>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a40      	ldr	r2, [pc, #256]	@ (80055e0 <HAL_RCC_OscConfig+0x618>)
 80054de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054e4:	4b3e      	ldr	r3, [pc, #248]	@ (80055e0 <HAL_RCC_OscConfig+0x618>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4a3d      	ldr	r2, [pc, #244]	@ (80055e0 <HAL_RCC_OscConfig+0x618>)
 80054ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7fd f93e 	bl	8002770 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f8:	f7fd f93a 	bl	8002770 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e066      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800550a:	4b35      	ldr	r3, [pc, #212]	@ (80055e0 <HAL_RCC_OscConfig+0x618>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCC_OscConfig+0x530>
 8005516:	e05e      	b.n	80055d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005518:	4b31      	ldr	r3, [pc, #196]	@ (80055e0 <HAL_RCC_OscConfig+0x618>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a30      	ldr	r2, [pc, #192]	@ (80055e0 <HAL_RCC_OscConfig+0x618>)
 800551e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005524:	f7fd f924 	bl	8002770 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800552c:	f7fd f920 	bl	8002770 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e04c      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800553e:	4b28      	ldr	r3, [pc, #160]	@ (80055e0 <HAL_RCC_OscConfig+0x618>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1f0      	bne.n	800552c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800554a:	4b25      	ldr	r3, [pc, #148]	@ (80055e0 <HAL_RCC_OscConfig+0x618>)
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	4924      	ldr	r1, [pc, #144]	@ (80055e0 <HAL_RCC_OscConfig+0x618>)
 8005550:	4b25      	ldr	r3, [pc, #148]	@ (80055e8 <HAL_RCC_OscConfig+0x620>)
 8005552:	4013      	ands	r3, r2
 8005554:	60cb      	str	r3, [r1, #12]
 8005556:	e03e      	b.n	80055d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d101      	bne.n	8005564 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e039      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005564:	4b1e      	ldr	r3, [pc, #120]	@ (80055e0 <HAL_RCC_OscConfig+0x618>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f003 0203 	and.w	r2, r3, #3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	429a      	cmp	r2, r3
 8005576:	d12c      	bne.n	80055d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005582:	3b01      	subs	r3, #1
 8005584:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005586:	429a      	cmp	r2, r3
 8005588:	d123      	bne.n	80055d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005594:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005596:	429a      	cmp	r2, r3
 8005598:	d11b      	bne.n	80055d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d113      	bne.n	80055d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b4:	085b      	lsrs	r3, r3, #1
 80055b6:	3b01      	subs	r3, #1
 80055b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d109      	bne.n	80055d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c8:	085b      	lsrs	r3, r3, #1
 80055ca:	3b01      	subs	r3, #1
 80055cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d001      	beq.n	80055d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e000      	b.n	80055d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3720      	adds	r7, #32
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40021000 	.word	0x40021000
 80055e4:	019f800c 	.word	0x019f800c
 80055e8:	feeefffc 	.word	0xfeeefffc

080055ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e11e      	b.n	8005842 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005604:	4b91      	ldr	r3, [pc, #580]	@ (800584c <HAL_RCC_ClockConfig+0x260>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d910      	bls.n	8005634 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005612:	4b8e      	ldr	r3, [pc, #568]	@ (800584c <HAL_RCC_ClockConfig+0x260>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f023 020f 	bic.w	r2, r3, #15
 800561a:	498c      	ldr	r1, [pc, #560]	@ (800584c <HAL_RCC_ClockConfig+0x260>)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	4313      	orrs	r3, r2
 8005620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005622:	4b8a      	ldr	r3, [pc, #552]	@ (800584c <HAL_RCC_ClockConfig+0x260>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d001      	beq.n	8005634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e106      	b.n	8005842 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d073      	beq.n	8005728 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b03      	cmp	r3, #3
 8005646:	d129      	bne.n	800569c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005648:	4b81      	ldr	r3, [pc, #516]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0f4      	b.n	8005842 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005658:	f000 f9d0 	bl	80059fc <RCC_GetSysClockFreqFromPLLSource>
 800565c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	4a7c      	ldr	r2, [pc, #496]	@ (8005854 <HAL_RCC_ClockConfig+0x268>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d93f      	bls.n	80056e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005666:	4b7a      	ldr	r3, [pc, #488]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800567a:	2b00      	cmp	r3, #0
 800567c:	d033      	beq.n	80056e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005682:	2b00      	cmp	r3, #0
 8005684:	d12f      	bne.n	80056e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005686:	4b72      	ldr	r3, [pc, #456]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800568e:	4a70      	ldr	r2, [pc, #448]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005694:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005696:	2380      	movs	r3, #128	@ 0x80
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	e024      	b.n	80056e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d107      	bne.n	80056b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0c6      	b.n	8005842 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056b4:	4b66      	ldr	r3, [pc, #408]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0be      	b.n	8005842 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80056c4:	f000 f8ce 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 80056c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4a61      	ldr	r2, [pc, #388]	@ (8005854 <HAL_RCC_ClockConfig+0x268>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d909      	bls.n	80056e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056da:	4a5d      	ldr	r2, [pc, #372]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 80056dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80056e2:	2380      	movs	r3, #128	@ 0x80
 80056e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056e6:	4b5a      	ldr	r3, [pc, #360]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f023 0203 	bic.w	r2, r3, #3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	4957      	ldr	r1, [pc, #348]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f8:	f7fd f83a 	bl	8002770 <HAL_GetTick>
 80056fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056fe:	e00a      	b.n	8005716 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005700:	f7fd f836 	bl	8002770 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800570e:	4293      	cmp	r3, r2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e095      	b.n	8005842 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005716:	4b4e      	ldr	r3, [pc, #312]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 020c 	and.w	r2, r3, #12
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	429a      	cmp	r2, r3
 8005726:	d1eb      	bne.n	8005700 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d023      	beq.n	800577c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005740:	4b43      	ldr	r3, [pc, #268]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	4a42      	ldr	r2, [pc, #264]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005746:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800574a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005758:	4b3d      	ldr	r3, [pc, #244]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005760:	4a3b      	ldr	r2, [pc, #236]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005762:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005766:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005768:	4b39      	ldr	r3, [pc, #228]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	4936      	ldr	r1, [pc, #216]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005776:	4313      	orrs	r3, r2
 8005778:	608b      	str	r3, [r1, #8]
 800577a:	e008      	b.n	800578e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2b80      	cmp	r3, #128	@ 0x80
 8005780:	d105      	bne.n	800578e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005782:	4b33      	ldr	r3, [pc, #204]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	4a32      	ldr	r2, [pc, #200]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005788:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800578c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800578e:	4b2f      	ldr	r3, [pc, #188]	@ (800584c <HAL_RCC_ClockConfig+0x260>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d21d      	bcs.n	80057d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579c:	4b2b      	ldr	r3, [pc, #172]	@ (800584c <HAL_RCC_ClockConfig+0x260>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f023 020f 	bic.w	r2, r3, #15
 80057a4:	4929      	ldr	r1, [pc, #164]	@ (800584c <HAL_RCC_ClockConfig+0x260>)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057ac:	f7fc ffe0 	bl	8002770 <HAL_GetTick>
 80057b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b2:	e00a      	b.n	80057ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057b4:	f7fc ffdc 	bl	8002770 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e03b      	b.n	8005842 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ca:	4b20      	ldr	r3, [pc, #128]	@ (800584c <HAL_RCC_ClockConfig+0x260>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d1ed      	bne.n	80057b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d008      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4917      	ldr	r1, [pc, #92]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d009      	beq.n	8005816 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005802:	4b13      	ldr	r3, [pc, #76]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	490f      	ldr	r1, [pc, #60]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 8005812:	4313      	orrs	r3, r2
 8005814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005816:	f000 f825 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 800581a:	4602      	mov	r2, r0
 800581c:	4b0c      	ldr	r3, [pc, #48]	@ (8005850 <HAL_RCC_ClockConfig+0x264>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	091b      	lsrs	r3, r3, #4
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	490c      	ldr	r1, [pc, #48]	@ (8005858 <HAL_RCC_ClockConfig+0x26c>)
 8005828:	5ccb      	ldrb	r3, [r1, r3]
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	fa22 f303 	lsr.w	r3, r2, r3
 8005832:	4a0a      	ldr	r2, [pc, #40]	@ (800585c <HAL_RCC_ClockConfig+0x270>)
 8005834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005836:	4b0a      	ldr	r3, [pc, #40]	@ (8005860 <HAL_RCC_ClockConfig+0x274>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f7fc fdb2 	bl	80023a4 <HAL_InitTick>
 8005840:	4603      	mov	r3, r0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40022000 	.word	0x40022000
 8005850:	40021000 	.word	0x40021000
 8005854:	04c4b400 	.word	0x04c4b400
 8005858:	08010810 	.word	0x08010810
 800585c:	2000040c 	.word	0x2000040c
 8005860:	20000410 	.word	0x20000410

08005864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800586a:	4b2c      	ldr	r3, [pc, #176]	@ (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 030c 	and.w	r3, r3, #12
 8005872:	2b04      	cmp	r3, #4
 8005874:	d102      	bne.n	800587c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005876:	4b2a      	ldr	r3, [pc, #168]	@ (8005920 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	e047      	b.n	800590c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800587c:	4b27      	ldr	r3, [pc, #156]	@ (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 030c 	and.w	r3, r3, #12
 8005884:	2b08      	cmp	r3, #8
 8005886:	d102      	bne.n	800588e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005888:	4b26      	ldr	r3, [pc, #152]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xc0>)
 800588a:	613b      	str	r3, [r7, #16]
 800588c:	e03e      	b.n	800590c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800588e:	4b23      	ldr	r3, [pc, #140]	@ (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 030c 	and.w	r3, r3, #12
 8005896:	2b0c      	cmp	r3, #12
 8005898:	d136      	bne.n	8005908 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800589a:	4b20      	ldr	r3, [pc, #128]	@ (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058a4:	4b1d      	ldr	r3, [pc, #116]	@ (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	091b      	lsrs	r3, r3, #4
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	3301      	adds	r3, #1
 80058b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d10c      	bne.n	80058d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c0:	4a16      	ldr	r2, [pc, #88]	@ (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058c2:	68d2      	ldr	r2, [r2, #12]
 80058c4:	0a12      	lsrs	r2, r2, #8
 80058c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
 80058ce:	617b      	str	r3, [r7, #20]
      break;
 80058d0:	e00c      	b.n	80058ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058d2:	4a13      	ldr	r2, [pc, #76]	@ (8005920 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	4a10      	ldr	r2, [pc, #64]	@ (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058dc:	68d2      	ldr	r2, [r2, #12]
 80058de:	0a12      	lsrs	r2, r2, #8
 80058e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058e4:	fb02 f303 	mul.w	r3, r2, r3
 80058e8:	617b      	str	r3, [r7, #20]
      break;
 80058ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058ec:	4b0b      	ldr	r3, [pc, #44]	@ (800591c <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	0e5b      	lsrs	r3, r3, #25
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	3301      	adds	r3, #1
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	fbb2 f3f3 	udiv	r3, r2, r3
 8005904:	613b      	str	r3, [r7, #16]
 8005906:	e001      	b.n	800590c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800590c:	693b      	ldr	r3, [r7, #16]
}
 800590e:	4618      	mov	r0, r3
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40021000 	.word	0x40021000
 8005920:	00f42400 	.word	0x00f42400
 8005924:	007a1200 	.word	0x007a1200

08005928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800592c:	4b03      	ldr	r3, [pc, #12]	@ (800593c <HAL_RCC_GetHCLKFreq+0x14>)
 800592e:	681b      	ldr	r3, [r3, #0]
}
 8005930:	4618      	mov	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	2000040c 	.word	0x2000040c

08005940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005944:	f7ff fff0 	bl	8005928 <HAL_RCC_GetHCLKFreq>
 8005948:	4602      	mov	r2, r0
 800594a:	4b06      	ldr	r3, [pc, #24]	@ (8005964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	0a1b      	lsrs	r3, r3, #8
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	4904      	ldr	r1, [pc, #16]	@ (8005968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005956:	5ccb      	ldrb	r3, [r1, r3]
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005960:	4618      	mov	r0, r3
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40021000 	.word	0x40021000
 8005968:	08010820 	.word	0x08010820

0800596c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005970:	f7ff ffda 	bl	8005928 <HAL_RCC_GetHCLKFreq>
 8005974:	4602      	mov	r2, r0
 8005976:	4b06      	ldr	r3, [pc, #24]	@ (8005990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	0adb      	lsrs	r3, r3, #11
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	4904      	ldr	r1, [pc, #16]	@ (8005994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005982:	5ccb      	ldrb	r3, [r1, r3]
 8005984:	f003 031f 	and.w	r3, r3, #31
 8005988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800598c:	4618      	mov	r0, r3
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40021000 	.word	0x40021000
 8005994:	08010820 	.word	0x08010820

08005998 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	220f      	movs	r2, #15
 80059a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80059a8:	4b12      	ldr	r3, [pc, #72]	@ (80059f4 <HAL_RCC_GetClockConfig+0x5c>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f003 0203 	and.w	r2, r3, #3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80059b4:	4b0f      	ldr	r3, [pc, #60]	@ (80059f4 <HAL_RCC_GetClockConfig+0x5c>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80059c0:	4b0c      	ldr	r3, [pc, #48]	@ (80059f4 <HAL_RCC_GetClockConfig+0x5c>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80059cc:	4b09      	ldr	r3, [pc, #36]	@ (80059f4 <HAL_RCC_GetClockConfig+0x5c>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	08db      	lsrs	r3, r3, #3
 80059d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80059da:	4b07      	ldr	r3, [pc, #28]	@ (80059f8 <HAL_RCC_GetClockConfig+0x60>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 020f 	and.w	r2, r3, #15
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	601a      	str	r2, [r3, #0]
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40021000 	.word	0x40021000
 80059f8:	40022000 	.word	0x40022000

080059fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a02:	4b1e      	ldr	r3, [pc, #120]	@ (8005a7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005a7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	3301      	adds	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d10c      	bne.n	8005a3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a20:	4a17      	ldr	r2, [pc, #92]	@ (8005a80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	4a14      	ldr	r2, [pc, #80]	@ (8005a7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a2a:	68d2      	ldr	r2, [r2, #12]
 8005a2c:	0a12      	lsrs	r2, r2, #8
 8005a2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a32:	fb02 f303 	mul.w	r3, r2, r3
 8005a36:	617b      	str	r3, [r7, #20]
    break;
 8005a38:	e00c      	b.n	8005a54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a3a:	4a12      	ldr	r2, [pc, #72]	@ (8005a84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a42:	4a0e      	ldr	r2, [pc, #56]	@ (8005a7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a44:	68d2      	ldr	r2, [r2, #12]
 8005a46:	0a12      	lsrs	r2, r2, #8
 8005a48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a4c:	fb02 f303 	mul.w	r3, r2, r3
 8005a50:	617b      	str	r3, [r7, #20]
    break;
 8005a52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a54:	4b09      	ldr	r3, [pc, #36]	@ (8005a7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	0e5b      	lsrs	r3, r3, #25
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	3301      	adds	r3, #1
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a6e:	687b      	ldr	r3, [r7, #4]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	007a1200 	.word	0x007a1200
 8005a84:	00f42400 	.word	0x00f42400

08005a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a90:	2300      	movs	r3, #0
 8005a92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a94:	2300      	movs	r3, #0
 8005a96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 8098 	beq.w	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aaa:	4b43      	ldr	r3, [pc, #268]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10d      	bne.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ab6:	4b40      	ldr	r3, [pc, #256]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aba:	4a3f      	ldr	r2, [pc, #252]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aca:	60bb      	str	r3, [r7, #8]
 8005acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ad2:	4b3a      	ldr	r3, [pc, #232]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a39      	ldr	r2, [pc, #228]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005adc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ade:	f7fc fe47 	bl	8002770 <HAL_GetTick>
 8005ae2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ae4:	e009      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ae6:	f7fc fe43 	bl	8002770 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d902      	bls.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	74fb      	strb	r3, [r7, #19]
        break;
 8005af8:	e005      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005afa:	4b30      	ldr	r3, [pc, #192]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0ef      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b06:	7cfb      	ldrb	r3, [r7, #19]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d159      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d01e      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d019      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b28:	4b23      	ldr	r3, [pc, #140]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b34:	4b20      	ldr	r3, [pc, #128]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b44:	4b1c      	ldr	r3, [pc, #112]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b54:	4a18      	ldr	r2, [pc, #96]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d016      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b66:	f7fc fe03 	bl	8002770 <HAL_GetTick>
 8005b6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b6c:	e00b      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fc fdff 	bl	8002770 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d902      	bls.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	74fb      	strb	r3, [r7, #19]
            break;
 8005b84:	e006      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b86:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0ec      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b94:	7cfb      	ldrb	r3, [r7, #19]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10b      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b9a:	4b07      	ldr	r3, [pc, #28]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba8:	4903      	ldr	r1, [pc, #12]	@ (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bb2:	7cfb      	ldrb	r3, [r7, #19]
 8005bb4:	74bb      	strb	r3, [r7, #18]
 8005bb6:	e005      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc0:	7cfb      	ldrb	r3, [r7, #19]
 8005bc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bc4:	7c7b      	ldrb	r3, [r7, #17]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d105      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bca:	4ba6      	ldr	r3, [pc, #664]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bce:	4aa5      	ldr	r2, [pc, #660]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bd4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005be2:	4ba0      	ldr	r3, [pc, #640]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be8:	f023 0203 	bic.w	r2, r3, #3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	499c      	ldr	r1, [pc, #624]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00a      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c04:	4b97      	ldr	r3, [pc, #604]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0a:	f023 020c 	bic.w	r2, r3, #12
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	4994      	ldr	r1, [pc, #592]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c26:	4b8f      	ldr	r3, [pc, #572]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	498b      	ldr	r1, [pc, #556]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c48:	4b86      	ldr	r3, [pc, #536]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	4983      	ldr	r1, [pc, #524]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c6a:	4b7e      	ldr	r3, [pc, #504]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	497a      	ldr	r1, [pc, #488]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c8c:	4b75      	ldr	r3, [pc, #468]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c92:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	4972      	ldr	r1, [pc, #456]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cae:	4b6d      	ldr	r3, [pc, #436]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	4969      	ldr	r1, [pc, #420]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cd0:	4b64      	ldr	r3, [pc, #400]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	4961      	ldr	r1, [pc, #388]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cf2:	4b5c      	ldr	r3, [pc, #368]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d00:	4958      	ldr	r1, [pc, #352]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d015      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d14:	4b53      	ldr	r3, [pc, #332]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d22:	4950      	ldr	r1, [pc, #320]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d32:	d105      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d34:	4b4b      	ldr	r3, [pc, #300]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	4a4a      	ldr	r2, [pc, #296]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d015      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d4c:	4b45      	ldr	r3, [pc, #276]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5a:	4942      	ldr	r1, [pc, #264]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d6a:	d105      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d6c:	4b3d      	ldr	r3, [pc, #244]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	4a3c      	ldr	r2, [pc, #240]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d76:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d015      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d84:	4b37      	ldr	r3, [pc, #220]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d92:	4934      	ldr	r1, [pc, #208]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005da2:	d105      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005da4:	4b2f      	ldr	r3, [pc, #188]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4a2e      	ldr	r2, [pc, #184]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005daa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d015      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dbc:	4b29      	ldr	r3, [pc, #164]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dca:	4926      	ldr	r1, [pc, #152]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dda:	d105      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ddc:	4b21      	ldr	r3, [pc, #132]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	4a20      	ldr	r2, [pc, #128]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005de2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005de6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d015      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005df4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e02:	4918      	ldr	r1, [pc, #96]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e12:	d105      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e14:	4b13      	ldr	r3, [pc, #76]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4a12      	ldr	r2, [pc, #72]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d015      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3a:	490a      	ldr	r1, [pc, #40]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e4a:	d105      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e4c:	4b05      	ldr	r3, [pc, #20]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a04      	ldr	r2, [pc, #16]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005e58:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40021000 	.word	0x40021000

08005e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e049      	b.n	8005f0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fc fa56 	bl	8002340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	f000 fb9c 	bl	80065e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d001      	beq.n	8005f30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e042      	b.n	8005fb6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a21      	ldr	r2, [pc, #132]	@ (8005fc4 <HAL_TIM_Base_Start+0xac>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d018      	beq.n	8005f74 <HAL_TIM_Base_Start+0x5c>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4a:	d013      	beq.n	8005f74 <HAL_TIM_Base_Start+0x5c>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc8 <HAL_TIM_Base_Start+0xb0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00e      	beq.n	8005f74 <HAL_TIM_Base_Start+0x5c>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005fcc <HAL_TIM_Base_Start+0xb4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d009      	beq.n	8005f74 <HAL_TIM_Base_Start+0x5c>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1a      	ldr	r2, [pc, #104]	@ (8005fd0 <HAL_TIM_Base_Start+0xb8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d004      	beq.n	8005f74 <HAL_TIM_Base_Start+0x5c>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a19      	ldr	r2, [pc, #100]	@ (8005fd4 <HAL_TIM_Base_Start+0xbc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d115      	bne.n	8005fa0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	4b17      	ldr	r3, [pc, #92]	@ (8005fd8 <HAL_TIM_Base_Start+0xc0>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b06      	cmp	r3, #6
 8005f84:	d015      	beq.n	8005fb2 <HAL_TIM_Base_Start+0x9a>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f8c:	d011      	beq.n	8005fb2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f042 0201 	orr.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9e:	e008      	b.n	8005fb2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	e000      	b.n	8005fb4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40012c00 	.word	0x40012c00
 8005fc8:	40000400 	.word	0x40000400
 8005fcc:	40000800 	.word	0x40000800
 8005fd0:	40013400 	.word	0x40013400
 8005fd4:	40014000 	.word	0x40014000
 8005fd8:	00010007 	.word	0x00010007

08005fdc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6a1a      	ldr	r2, [r3, #32]
 8005fea:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005fee:	4013      	ands	r3, r2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10f      	bne.n	8006014 <HAL_TIM_Base_Stop+0x38>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6a1a      	ldr	r2, [r3, #32]
 8005ffa:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d107      	bne.n	8006014 <HAL_TIM_Base_Stop+0x38>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0201 	bic.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
	...

0800602c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d001      	beq.n	8006044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e04a      	b.n	80060da <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a21      	ldr	r2, [pc, #132]	@ (80060e8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d018      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x6c>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800606e:	d013      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x6c>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1d      	ldr	r2, [pc, #116]	@ (80060ec <HAL_TIM_Base_Start_IT+0xc0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00e      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x6c>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1c      	ldr	r2, [pc, #112]	@ (80060f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d009      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x6c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1a      	ldr	r2, [pc, #104]	@ (80060f4 <HAL_TIM_Base_Start_IT+0xc8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x6c>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a19      	ldr	r2, [pc, #100]	@ (80060f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d115      	bne.n	80060c4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	4b17      	ldr	r3, [pc, #92]	@ (80060fc <HAL_TIM_Base_Start_IT+0xd0>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b06      	cmp	r3, #6
 80060a8:	d015      	beq.n	80060d6 <HAL_TIM_Base_Start_IT+0xaa>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060b0:	d011      	beq.n	80060d6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0201 	orr.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c2:	e008      	b.n	80060d6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e000      	b.n	80060d8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40000400 	.word	0x40000400
 80060f0:	40000800 	.word	0x40000800
 80060f4:	40013400 	.word	0x40013400
 80060f8:	40014000 	.word	0x40014000
 80060fc:	00010007 	.word	0x00010007

08006100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d020      	beq.n	8006164 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01b      	beq.n	8006164 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0202 	mvn.w	r2, #2
 8006134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fa2c 	bl	80065a8 <HAL_TIM_IC_CaptureCallback>
 8006150:	e005      	b.n	800615e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fa1e 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fa2f 	bl	80065bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d020      	beq.n	80061b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01b      	beq.n	80061b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0204 	mvn.w	r2, #4
 8006180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fa06 	bl	80065a8 <HAL_TIM_IC_CaptureCallback>
 800619c:	e005      	b.n	80061aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f9f8 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fa09 	bl	80065bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d020      	beq.n	80061fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01b      	beq.n	80061fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0208 	mvn.w	r2, #8
 80061cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2204      	movs	r2, #4
 80061d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f9e0 	bl	80065a8 <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f9d2 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f9e3 	bl	80065bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	2b00      	cmp	r3, #0
 8006204:	d020      	beq.n	8006248 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01b      	beq.n	8006248 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0210 	mvn.w	r2, #16
 8006218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2208      	movs	r2, #8
 800621e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f9ba 	bl	80065a8 <HAL_TIM_IC_CaptureCallback>
 8006234:	e005      	b.n	8006242 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f9ac 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f9bd 	bl	80065bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00c      	beq.n	800626c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0201 	mvn.w	r2, #1
 8006264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fb feac 	bl	8001fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006272:	2b00      	cmp	r3, #0
 8006274:	d104      	bne.n	8006280 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00c      	beq.n	800629a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006286:	2b00      	cmp	r3, #0
 8006288:	d007      	beq.n	800629a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fb69 	bl	800696c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00c      	beq.n	80062be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80062b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fb61 	bl	8006980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00c      	beq.n	80062e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d007      	beq.n	80062e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f977 	bl	80065d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00c      	beq.n	8006306 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d007      	beq.n	8006306 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f06f 0220 	mvn.w	r2, #32
 80062fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fb29 	bl	8006958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00c      	beq.n	800632a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fb35 	bl	8006994 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00c      	beq.n	800634e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fb2d 	bl	80069a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00c      	beq.n	8006372 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d007      	beq.n	8006372 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800636a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 fb25 	bl	80069bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00c      	beq.n	8006396 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d007      	beq.n	8006396 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800638e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fb1d 	bl	80069d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006396:	bf00      	nop
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_TIM_ConfigClockSource+0x1c>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e0de      	b.n	800657a <HAL_TIM_ConfigClockSource+0x1da>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80063da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a63      	ldr	r2, [pc, #396]	@ (8006584 <HAL_TIM_ConfigClockSource+0x1e4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	f000 80a9 	beq.w	800654e <HAL_TIM_ConfigClockSource+0x1ae>
 80063fc:	4a61      	ldr	r2, [pc, #388]	@ (8006584 <HAL_TIM_ConfigClockSource+0x1e4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	f200 80ae 	bhi.w	8006560 <HAL_TIM_ConfigClockSource+0x1c0>
 8006404:	4a60      	ldr	r2, [pc, #384]	@ (8006588 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	f000 80a1 	beq.w	800654e <HAL_TIM_ConfigClockSource+0x1ae>
 800640c:	4a5e      	ldr	r2, [pc, #376]	@ (8006588 <HAL_TIM_ConfigClockSource+0x1e8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	f200 80a6 	bhi.w	8006560 <HAL_TIM_ConfigClockSource+0x1c0>
 8006414:	4a5d      	ldr	r2, [pc, #372]	@ (800658c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006416:	4293      	cmp	r3, r2
 8006418:	f000 8099 	beq.w	800654e <HAL_TIM_ConfigClockSource+0x1ae>
 800641c:	4a5b      	ldr	r2, [pc, #364]	@ (800658c <HAL_TIM_ConfigClockSource+0x1ec>)
 800641e:	4293      	cmp	r3, r2
 8006420:	f200 809e 	bhi.w	8006560 <HAL_TIM_ConfigClockSource+0x1c0>
 8006424:	4a5a      	ldr	r2, [pc, #360]	@ (8006590 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	f000 8091 	beq.w	800654e <HAL_TIM_ConfigClockSource+0x1ae>
 800642c:	4a58      	ldr	r2, [pc, #352]	@ (8006590 <HAL_TIM_ConfigClockSource+0x1f0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	f200 8096 	bhi.w	8006560 <HAL_TIM_ConfigClockSource+0x1c0>
 8006434:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006438:	f000 8089 	beq.w	800654e <HAL_TIM_ConfigClockSource+0x1ae>
 800643c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006440:	f200 808e 	bhi.w	8006560 <HAL_TIM_ConfigClockSource+0x1c0>
 8006444:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006448:	d03e      	beq.n	80064c8 <HAL_TIM_ConfigClockSource+0x128>
 800644a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800644e:	f200 8087 	bhi.w	8006560 <HAL_TIM_ConfigClockSource+0x1c0>
 8006452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006456:	f000 8086 	beq.w	8006566 <HAL_TIM_ConfigClockSource+0x1c6>
 800645a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800645e:	d87f      	bhi.n	8006560 <HAL_TIM_ConfigClockSource+0x1c0>
 8006460:	2b70      	cmp	r3, #112	@ 0x70
 8006462:	d01a      	beq.n	800649a <HAL_TIM_ConfigClockSource+0xfa>
 8006464:	2b70      	cmp	r3, #112	@ 0x70
 8006466:	d87b      	bhi.n	8006560 <HAL_TIM_ConfigClockSource+0x1c0>
 8006468:	2b60      	cmp	r3, #96	@ 0x60
 800646a:	d050      	beq.n	800650e <HAL_TIM_ConfigClockSource+0x16e>
 800646c:	2b60      	cmp	r3, #96	@ 0x60
 800646e:	d877      	bhi.n	8006560 <HAL_TIM_ConfigClockSource+0x1c0>
 8006470:	2b50      	cmp	r3, #80	@ 0x50
 8006472:	d03c      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0x14e>
 8006474:	2b50      	cmp	r3, #80	@ 0x50
 8006476:	d873      	bhi.n	8006560 <HAL_TIM_ConfigClockSource+0x1c0>
 8006478:	2b40      	cmp	r3, #64	@ 0x40
 800647a:	d058      	beq.n	800652e <HAL_TIM_ConfigClockSource+0x18e>
 800647c:	2b40      	cmp	r3, #64	@ 0x40
 800647e:	d86f      	bhi.n	8006560 <HAL_TIM_ConfigClockSource+0x1c0>
 8006480:	2b30      	cmp	r3, #48	@ 0x30
 8006482:	d064      	beq.n	800654e <HAL_TIM_ConfigClockSource+0x1ae>
 8006484:	2b30      	cmp	r3, #48	@ 0x30
 8006486:	d86b      	bhi.n	8006560 <HAL_TIM_ConfigClockSource+0x1c0>
 8006488:	2b20      	cmp	r3, #32
 800648a:	d060      	beq.n	800654e <HAL_TIM_ConfigClockSource+0x1ae>
 800648c:	2b20      	cmp	r3, #32
 800648e:	d867      	bhi.n	8006560 <HAL_TIM_ConfigClockSource+0x1c0>
 8006490:	2b00      	cmp	r3, #0
 8006492:	d05c      	beq.n	800654e <HAL_TIM_ConfigClockSource+0x1ae>
 8006494:	2b10      	cmp	r3, #16
 8006496:	d05a      	beq.n	800654e <HAL_TIM_ConfigClockSource+0x1ae>
 8006498:	e062      	b.n	8006560 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064aa:	f000 f9b3 	bl	8006814 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	609a      	str	r2, [r3, #8]
      break;
 80064c6:	e04f      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064d8:	f000 f99c 	bl	8006814 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064ea:	609a      	str	r2, [r3, #8]
      break;
 80064ec:	e03c      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064fa:	461a      	mov	r2, r3
 80064fc:	f000 f90e 	bl	800671c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2150      	movs	r1, #80	@ 0x50
 8006506:	4618      	mov	r0, r3
 8006508:	f000 f967 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 800650c:	e02c      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800651a:	461a      	mov	r2, r3
 800651c:	f000 f92d 	bl	800677a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2160      	movs	r1, #96	@ 0x60
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f957 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 800652c:	e01c      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800653a:	461a      	mov	r2, r3
 800653c:	f000 f8ee 	bl	800671c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2140      	movs	r1, #64	@ 0x40
 8006546:	4618      	mov	r0, r3
 8006548:	f000 f947 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 800654c:	e00c      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4619      	mov	r1, r3
 8006558:	4610      	mov	r0, r2
 800655a:	f000 f93e 	bl	80067da <TIM_ITRx_SetConfig>
      break;
 800655e:	e003      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	73fb      	strb	r3, [r7, #15]
      break;
 8006564:	e000      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	00100070 	.word	0x00100070
 8006588:	00100040 	.word	0x00100040
 800658c:	00100030 	.word	0x00100030
 8006590:	00100020 	.word	0x00100020

08006594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a42      	ldr	r2, [pc, #264]	@ (8006700 <TIM_Base_SetConfig+0x11c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d00f      	beq.n	800661c <TIM_Base_SetConfig+0x38>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006602:	d00b      	beq.n	800661c <TIM_Base_SetConfig+0x38>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a3f      	ldr	r2, [pc, #252]	@ (8006704 <TIM_Base_SetConfig+0x120>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d007      	beq.n	800661c <TIM_Base_SetConfig+0x38>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a3e      	ldr	r2, [pc, #248]	@ (8006708 <TIM_Base_SetConfig+0x124>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d003      	beq.n	800661c <TIM_Base_SetConfig+0x38>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a3d      	ldr	r2, [pc, #244]	@ (800670c <TIM_Base_SetConfig+0x128>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d108      	bne.n	800662e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a33      	ldr	r2, [pc, #204]	@ (8006700 <TIM_Base_SetConfig+0x11c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d01b      	beq.n	800666e <TIM_Base_SetConfig+0x8a>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800663c:	d017      	beq.n	800666e <TIM_Base_SetConfig+0x8a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a30      	ldr	r2, [pc, #192]	@ (8006704 <TIM_Base_SetConfig+0x120>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d013      	beq.n	800666e <TIM_Base_SetConfig+0x8a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a2f      	ldr	r2, [pc, #188]	@ (8006708 <TIM_Base_SetConfig+0x124>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00f      	beq.n	800666e <TIM_Base_SetConfig+0x8a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a2e      	ldr	r2, [pc, #184]	@ (800670c <TIM_Base_SetConfig+0x128>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d00b      	beq.n	800666e <TIM_Base_SetConfig+0x8a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a2d      	ldr	r2, [pc, #180]	@ (8006710 <TIM_Base_SetConfig+0x12c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d007      	beq.n	800666e <TIM_Base_SetConfig+0x8a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a2c      	ldr	r2, [pc, #176]	@ (8006714 <TIM_Base_SetConfig+0x130>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d003      	beq.n	800666e <TIM_Base_SetConfig+0x8a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a2b      	ldr	r2, [pc, #172]	@ (8006718 <TIM_Base_SetConfig+0x134>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d108      	bne.n	8006680 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a16      	ldr	r2, [pc, #88]	@ (8006700 <TIM_Base_SetConfig+0x11c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00f      	beq.n	80066cc <TIM_Base_SetConfig+0xe8>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a17      	ldr	r2, [pc, #92]	@ (800670c <TIM_Base_SetConfig+0x128>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00b      	beq.n	80066cc <TIM_Base_SetConfig+0xe8>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a16      	ldr	r2, [pc, #88]	@ (8006710 <TIM_Base_SetConfig+0x12c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d007      	beq.n	80066cc <TIM_Base_SetConfig+0xe8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a15      	ldr	r2, [pc, #84]	@ (8006714 <TIM_Base_SetConfig+0x130>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d003      	beq.n	80066cc <TIM_Base_SetConfig+0xe8>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a14      	ldr	r2, [pc, #80]	@ (8006718 <TIM_Base_SetConfig+0x134>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d103      	bne.n	80066d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d105      	bne.n	80066f2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f023 0201 	bic.w	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	611a      	str	r2, [r3, #16]
  }
}
 80066f2:	bf00      	nop
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40000400 	.word	0x40000400
 8006708:	40000800 	.word	0x40000800
 800670c:	40013400 	.word	0x40013400
 8006710:	40014000 	.word	0x40014000
 8006714:	40014400 	.word	0x40014400
 8006718:	40014800 	.word	0x40014800

0800671c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f023 0201 	bic.w	r2, r3, #1
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f023 030a 	bic.w	r3, r3, #10
 8006758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800677a:	b480      	push	{r7}
 800677c:	b087      	sub	sp, #28
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	f023 0210 	bic.w	r2, r3, #16
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	031b      	lsls	r3, r3, #12
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80067b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80067f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f043 0307 	orr.w	r3, r3, #7
 8006800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	609a      	str	r2, [r3, #8]
}
 8006808:	bf00      	nop
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800682e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	021a      	lsls	r2, r3, #8
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	431a      	orrs	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4313      	orrs	r3, r2
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	609a      	str	r2, [r3, #8]
}
 8006848:	bf00      	nop
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006868:	2302      	movs	r3, #2
 800686a:	e065      	b.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a2c      	ldr	r2, [pc, #176]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d004      	beq.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a2b      	ldr	r2, [pc, #172]	@ (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d108      	bne.n	80068b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80068a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80068b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d018      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e2:	d013      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a18      	ldr	r2, [pc, #96]	@ (800694c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00e      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a17      	ldr	r2, [pc, #92]	@ (8006950 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d009      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a12      	ldr	r2, [pc, #72]	@ (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d004      	beq.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a13      	ldr	r2, [pc, #76]	@ (8006954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d10c      	bne.n	8006926 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006912:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	4313      	orrs	r3, r2
 800691c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	40012c00 	.word	0x40012c00
 8006948:	40013400 	.word	0x40013400
 800694c:	40000400 	.word	0x40000400
 8006950:	40000800 	.word	0x40000800
 8006954:	40014000 	.word	0x40014000

08006958 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e042      	b.n	8006a7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d106      	bne.n	8006a0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7fb fc0d 	bl	8002228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2224      	movs	r2, #36	@ 0x24
 8006a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0201 	bic.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 ff04 	bl	800783c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fc35 	bl	80072a4 <UART_SetConfig>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e01b      	b.n	8006a7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 ff83 	bl	8007980 <UART_CheckIdleState>
 8006a7a:	4603      	mov	r3, r0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	@ 0x28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d137      	bne.n	8006b0c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <HAL_UART_Receive_IT+0x24>
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e030      	b.n	8006b0e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a18      	ldr	r2, [pc, #96]	@ (8006b18 <HAL_UART_Receive_IT+0x94>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d01f      	beq.n	8006afc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d018      	beq.n	8006afc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	623b      	str	r3, [r7, #32]
 8006aea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	69f9      	ldr	r1, [r7, #28]
 8006aee:	6a3a      	ldr	r2, [r7, #32]
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e6      	bne.n	8006aca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006afc:	88fb      	ldrh	r3, [r7, #6]
 8006afe:	461a      	mov	r2, r3
 8006b00:	68b9      	ldr	r1, [r7, #8]
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f001 f854 	bl	8007bb0 <UART_Start_Receive_IT>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	e000      	b.n	8006b0e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b0c:	2302      	movs	r3, #2
  }
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3728      	adds	r7, #40	@ 0x28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	40008000 	.word	0x40008000

08006b1c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08a      	sub	sp, #40	@ 0x28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	4613      	mov	r3, r2
 8006b28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d167      	bne.n	8006c04 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <HAL_UART_Transmit_DMA+0x24>
 8006b3a:	88fb      	ldrh	r3, [r7, #6]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e060      	b.n	8006c06 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	88fa      	ldrh	r2, [r7, #6]
 8006b4e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	88fa      	ldrh	r2, [r7, #6]
 8006b56:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2221      	movs	r2, #33	@ 0x21
 8006b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d028      	beq.n	8006bc4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b76:	4a26      	ldr	r2, [pc, #152]	@ (8006c10 <HAL_UART_Transmit_DMA+0xf4>)
 8006b78:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b7e:	4a25      	ldr	r2, [pc, #148]	@ (8006c14 <HAL_UART_Transmit_DMA+0xf8>)
 8006b80:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b86:	4a24      	ldr	r2, [pc, #144]	@ (8006c18 <HAL_UART_Transmit_DMA+0xfc>)
 8006b88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b8e:	2200      	movs	r2, #0
 8006b90:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3328      	adds	r3, #40	@ 0x28
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	88fb      	ldrh	r3, [r7, #6]
 8006ba6:	f7fd fd4f 	bl	8004648 <HAL_DMA_Start_IT>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d009      	beq.n	8006bc4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2210      	movs	r2, #16
 8006bb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e020      	b.n	8006c06 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2240      	movs	r2, #64	@ 0x40
 8006bca:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	e853 3f00 	ldrex	r3, [r3]
 8006bda:	613b      	str	r3, [r7, #16]
   return(result);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3308      	adds	r3, #8
 8006bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bec:	623a      	str	r2, [r7, #32]
 8006bee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf0:	69f9      	ldr	r1, [r7, #28]
 8006bf2:	6a3a      	ldr	r2, [r7, #32]
 8006bf4:	e841 2300 	strex	r3, r2, [r1]
 8006bf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e5      	bne.n	8006bcc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e000      	b.n	8006c06 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006c04:	2302      	movs	r3, #2
  }
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3728      	adds	r7, #40	@ 0x28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	08007f43 	.word	0x08007f43
 8006c14:	08007fdd 	.word	0x08007fdd
 8006c18:	08007ff9 	.word	0x08007ff9

08006c1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b0ba      	sub	sp, #232	@ 0xe8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006c46:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006c50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d11b      	bne.n	8006c90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c5c:	f003 0320 	and.w	r3, r3, #32
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d015      	beq.n	8006c90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d105      	bne.n	8006c7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d009      	beq.n	8006c90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 82e3 	beq.w	800724c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
      }
      return;
 8006c8e:	e2dd      	b.n	800724c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8123 	beq.w	8006ee0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8006ed4 <HAL_UART_IRQHandler+0x2b8>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d106      	bne.n	8006cb4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ca6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006caa:	4b8b      	ldr	r3, [pc, #556]	@ (8006ed8 <HAL_UART_IRQHandler+0x2bc>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8116 	beq.w	8006ee0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d011      	beq.n	8006ce4 <HAL_UART_IRQHandler+0xc8>
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cda:	f043 0201 	orr.w	r2, r3, #1
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d011      	beq.n	8006d14 <HAL_UART_IRQHandler+0xf8>
 8006cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00b      	beq.n	8006d14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2202      	movs	r2, #2
 8006d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0a:	f043 0204 	orr.w	r2, r3, #4
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d011      	beq.n	8006d44 <HAL_UART_IRQHandler+0x128>
 8006d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2204      	movs	r2, #4
 8006d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d3a:	f043 0202 	orr.w	r2, r3, #2
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d017      	beq.n	8006d80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d60:	4b5c      	ldr	r3, [pc, #368]	@ (8006ed4 <HAL_UART_IRQHandler+0x2b8>)
 8006d62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d76:	f043 0208 	orr.w	r2, r3, #8
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d012      	beq.n	8006db2 <HAL_UART_IRQHandler+0x196>
 8006d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00c      	beq.n	8006db2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006da0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da8:	f043 0220 	orr.w	r2, r3, #32
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 8249 	beq.w	8007250 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d013      	beq.n	8006df2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d105      	bne.n	8006de2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d007      	beq.n	8006df2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e06:	2b40      	cmp	r3, #64	@ 0x40
 8006e08:	d005      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d054      	beq.n	8006ec0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 f82d 	bl	8007e76 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e26:	2b40      	cmp	r3, #64	@ 0x40
 8006e28:	d146      	bne.n	8006eb8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3308      	adds	r3, #8
 8006e30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3308      	adds	r3, #8
 8006e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1d9      	bne.n	8006e2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d017      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e86:	4a15      	ldr	r2, [pc, #84]	@ (8006edc <HAL_UART_IRQHandler+0x2c0>)
 8006e88:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fd fcad 	bl	80047f0 <HAL_DMA_Abort_IT>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d019      	beq.n	8006ed0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006eaa:	4610      	mov	r0, r2
 8006eac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eae:	e00f      	b.n	8006ed0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f9e1 	bl	8007278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb6:	e00b      	b.n	8006ed0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f9dd 	bl	8007278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ebe:	e007      	b.n	8006ed0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f9d9 	bl	8007278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006ece:	e1bf      	b.n	8007250 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed0:	bf00      	nop
    return;
 8006ed2:	e1bd      	b.n	8007250 <HAL_UART_IRQHandler+0x634>
 8006ed4:	10000001 	.word	0x10000001
 8006ed8:	04000120 	.word	0x04000120
 8006edc:	08008079 	.word	0x08008079

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	f040 8153 	bne.w	8007190 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eee:	f003 0310 	and.w	r3, r3, #16
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 814c 	beq.w	8007190 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006efc:	f003 0310 	and.w	r3, r3, #16
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 8145 	beq.w	8007190 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2210      	movs	r2, #16
 8006f0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f18:	2b40      	cmp	r3, #64	@ 0x40
 8006f1a:	f040 80bb 	bne.w	8007094 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 818f 	beq.w	8007254 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f40:	429a      	cmp	r2, r3
 8006f42:	f080 8187 	bcs.w	8007254 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0320 	and.w	r3, r3, #32
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 8087 	bne.w	8007072 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f92:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f9e:	e841 2300 	strex	r3, r2, [r1]
 8006fa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1da      	bne.n	8006f64 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006fbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fc0:	f023 0301 	bic.w	r3, r3, #1
 8006fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3308      	adds	r3, #8
 8006fce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fd2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006fd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006fda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006fe4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e1      	bne.n	8006fae <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3308      	adds	r3, #8
 8006ff0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ffa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ffc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007000:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3308      	adds	r3, #8
 800700a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800700e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007010:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007014:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800701c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e3      	bne.n	8006fea <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800703e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007040:	f023 0310 	bic.w	r3, r3, #16
 8007044:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007052:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007054:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007058:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007060:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e4      	bne.n	8007030 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800706c:	4618      	mov	r0, r3
 800706e:	f7fd fb66 	bl	800473e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2202      	movs	r2, #2
 8007076:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007084:	b29b      	uxth	r3, r3
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	b29b      	uxth	r3, r3
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f8fd 	bl	800728c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007092:	e0df      	b.n	8007254 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 80d1 	beq.w	8007258 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80070b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 80cc 	beq.w	8007258 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c8:	e853 3f00 	ldrex	r3, [r3]
 80070cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80070e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80070e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070ea:	e841 2300 	strex	r3, r2, [r1]
 80070ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1e4      	bne.n	80070c0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3308      	adds	r3, #8
 80070fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	623b      	str	r3, [r7, #32]
   return(result);
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800710c:	f023 0301 	bic.w	r3, r3, #1
 8007110:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3308      	adds	r3, #8
 800711a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800711e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007120:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800712c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e1      	bne.n	80070f6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2220      	movs	r2, #32
 8007136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	60fb      	str	r3, [r7, #12]
   return(result);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0310 	bic.w	r3, r3, #16
 800715a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	461a      	mov	r2, r3
 8007164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007168:	61fb      	str	r3, [r7, #28]
 800716a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	69b9      	ldr	r1, [r7, #24]
 800716e:	69fa      	ldr	r2, [r7, #28]
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	617b      	str	r3, [r7, #20]
   return(result);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e4      	bne.n	8007146 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007182:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f87f 	bl	800728c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800718e:	e063      	b.n	8007258 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00e      	beq.n	80071ba <HAL_UART_IRQHandler+0x59e>
 800719c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d008      	beq.n	80071ba <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80071b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 fcbe 	bl	8008b34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071b8:	e051      	b.n	800725e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80071ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d014      	beq.n	80071f0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80071c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d105      	bne.n	80071de <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80071d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d008      	beq.n	80071f0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d03a      	beq.n	800725c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	4798      	blx	r3
    }
    return;
 80071ee:	e035      	b.n	800725c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d009      	beq.n	8007210 <HAL_UART_IRQHandler+0x5f4>
 80071fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 ff4b 	bl	80080a4 <UART_EndTransmit_IT>
    return;
 800720e:	e026      	b.n	800725e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007214:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d009      	beq.n	8007230 <HAL_UART_IRQHandler+0x614>
 800721c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007220:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 fc97 	bl	8008b5c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800722e:	e016      	b.n	800725e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007234:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d010      	beq.n	800725e <HAL_UART_IRQHandler+0x642>
 800723c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007240:	2b00      	cmp	r3, #0
 8007242:	da0c      	bge.n	800725e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 fc7f 	bl	8008b48 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800724a:	e008      	b.n	800725e <HAL_UART_IRQHandler+0x642>
      return;
 800724c:	bf00      	nop
 800724e:	e006      	b.n	800725e <HAL_UART_IRQHandler+0x642>
    return;
 8007250:	bf00      	nop
 8007252:	e004      	b.n	800725e <HAL_UART_IRQHandler+0x642>
      return;
 8007254:	bf00      	nop
 8007256:	e002      	b.n	800725e <HAL_UART_IRQHandler+0x642>
      return;
 8007258:	bf00      	nop
 800725a:	e000      	b.n	800725e <HAL_UART_IRQHandler+0x642>
    return;
 800725c:	bf00      	nop
  }
}
 800725e:	37e8      	adds	r7, #232	@ 0xe8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	460b      	mov	r3, r1
 8007296:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072a8:	b08c      	sub	sp, #48	@ 0x30
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	431a      	orrs	r2, r3
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	431a      	orrs	r2, r3
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	69db      	ldr	r3, [r3, #28]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	4bab      	ldr	r3, [pc, #684]	@ (8007580 <UART_SetConfig+0x2dc>)
 80072d4:	4013      	ands	r3, r2
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	6812      	ldr	r2, [r2, #0]
 80072da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072dc:	430b      	orrs	r3, r1
 80072de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4aa0      	ldr	r2, [pc, #640]	@ (8007584 <UART_SetConfig+0x2e0>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d004      	beq.n	8007310 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800730c:	4313      	orrs	r3, r2
 800730e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800731a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	6812      	ldr	r2, [r2, #0]
 8007322:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007324:	430b      	orrs	r3, r1
 8007326:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732e:	f023 010f 	bic.w	r1, r3, #15
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a91      	ldr	r2, [pc, #580]	@ (8007588 <UART_SetConfig+0x2e4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d125      	bne.n	8007394 <UART_SetConfig+0xf0>
 8007348:	4b90      	ldr	r3, [pc, #576]	@ (800758c <UART_SetConfig+0x2e8>)
 800734a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	2b03      	cmp	r3, #3
 8007354:	d81a      	bhi.n	800738c <UART_SetConfig+0xe8>
 8007356:	a201      	add	r2, pc, #4	@ (adr r2, 800735c <UART_SetConfig+0xb8>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	0800736d 	.word	0x0800736d
 8007360:	0800737d 	.word	0x0800737d
 8007364:	08007375 	.word	0x08007375
 8007368:	08007385 	.word	0x08007385
 800736c:	2301      	movs	r3, #1
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007372:	e0d6      	b.n	8007522 <UART_SetConfig+0x27e>
 8007374:	2302      	movs	r3, #2
 8007376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800737a:	e0d2      	b.n	8007522 <UART_SetConfig+0x27e>
 800737c:	2304      	movs	r3, #4
 800737e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007382:	e0ce      	b.n	8007522 <UART_SetConfig+0x27e>
 8007384:	2308      	movs	r3, #8
 8007386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800738a:	e0ca      	b.n	8007522 <UART_SetConfig+0x27e>
 800738c:	2310      	movs	r3, #16
 800738e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007392:	e0c6      	b.n	8007522 <UART_SetConfig+0x27e>
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a7d      	ldr	r2, [pc, #500]	@ (8007590 <UART_SetConfig+0x2ec>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d138      	bne.n	8007410 <UART_SetConfig+0x16c>
 800739e:	4b7b      	ldr	r3, [pc, #492]	@ (800758c <UART_SetConfig+0x2e8>)
 80073a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073a4:	f003 030c 	and.w	r3, r3, #12
 80073a8:	2b0c      	cmp	r3, #12
 80073aa:	d82d      	bhi.n	8007408 <UART_SetConfig+0x164>
 80073ac:	a201      	add	r2, pc, #4	@ (adr r2, 80073b4 <UART_SetConfig+0x110>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	080073e9 	.word	0x080073e9
 80073b8:	08007409 	.word	0x08007409
 80073bc:	08007409 	.word	0x08007409
 80073c0:	08007409 	.word	0x08007409
 80073c4:	080073f9 	.word	0x080073f9
 80073c8:	08007409 	.word	0x08007409
 80073cc:	08007409 	.word	0x08007409
 80073d0:	08007409 	.word	0x08007409
 80073d4:	080073f1 	.word	0x080073f1
 80073d8:	08007409 	.word	0x08007409
 80073dc:	08007409 	.word	0x08007409
 80073e0:	08007409 	.word	0x08007409
 80073e4:	08007401 	.word	0x08007401
 80073e8:	2300      	movs	r3, #0
 80073ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ee:	e098      	b.n	8007522 <UART_SetConfig+0x27e>
 80073f0:	2302      	movs	r3, #2
 80073f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073f6:	e094      	b.n	8007522 <UART_SetConfig+0x27e>
 80073f8:	2304      	movs	r3, #4
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073fe:	e090      	b.n	8007522 <UART_SetConfig+0x27e>
 8007400:	2308      	movs	r3, #8
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007406:	e08c      	b.n	8007522 <UART_SetConfig+0x27e>
 8007408:	2310      	movs	r3, #16
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800740e:	e088      	b.n	8007522 <UART_SetConfig+0x27e>
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a5f      	ldr	r2, [pc, #380]	@ (8007594 <UART_SetConfig+0x2f0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d125      	bne.n	8007466 <UART_SetConfig+0x1c2>
 800741a:	4b5c      	ldr	r3, [pc, #368]	@ (800758c <UART_SetConfig+0x2e8>)
 800741c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007420:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007424:	2b30      	cmp	r3, #48	@ 0x30
 8007426:	d016      	beq.n	8007456 <UART_SetConfig+0x1b2>
 8007428:	2b30      	cmp	r3, #48	@ 0x30
 800742a:	d818      	bhi.n	800745e <UART_SetConfig+0x1ba>
 800742c:	2b20      	cmp	r3, #32
 800742e:	d00a      	beq.n	8007446 <UART_SetConfig+0x1a2>
 8007430:	2b20      	cmp	r3, #32
 8007432:	d814      	bhi.n	800745e <UART_SetConfig+0x1ba>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <UART_SetConfig+0x19a>
 8007438:	2b10      	cmp	r3, #16
 800743a:	d008      	beq.n	800744e <UART_SetConfig+0x1aa>
 800743c:	e00f      	b.n	800745e <UART_SetConfig+0x1ba>
 800743e:	2300      	movs	r3, #0
 8007440:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007444:	e06d      	b.n	8007522 <UART_SetConfig+0x27e>
 8007446:	2302      	movs	r3, #2
 8007448:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800744c:	e069      	b.n	8007522 <UART_SetConfig+0x27e>
 800744e:	2304      	movs	r3, #4
 8007450:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007454:	e065      	b.n	8007522 <UART_SetConfig+0x27e>
 8007456:	2308      	movs	r3, #8
 8007458:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800745c:	e061      	b.n	8007522 <UART_SetConfig+0x27e>
 800745e:	2310      	movs	r3, #16
 8007460:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007464:	e05d      	b.n	8007522 <UART_SetConfig+0x27e>
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a4b      	ldr	r2, [pc, #300]	@ (8007598 <UART_SetConfig+0x2f4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d125      	bne.n	80074bc <UART_SetConfig+0x218>
 8007470:	4b46      	ldr	r3, [pc, #280]	@ (800758c <UART_SetConfig+0x2e8>)
 8007472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007476:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800747a:	2bc0      	cmp	r3, #192	@ 0xc0
 800747c:	d016      	beq.n	80074ac <UART_SetConfig+0x208>
 800747e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007480:	d818      	bhi.n	80074b4 <UART_SetConfig+0x210>
 8007482:	2b80      	cmp	r3, #128	@ 0x80
 8007484:	d00a      	beq.n	800749c <UART_SetConfig+0x1f8>
 8007486:	2b80      	cmp	r3, #128	@ 0x80
 8007488:	d814      	bhi.n	80074b4 <UART_SetConfig+0x210>
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <UART_SetConfig+0x1f0>
 800748e:	2b40      	cmp	r3, #64	@ 0x40
 8007490:	d008      	beq.n	80074a4 <UART_SetConfig+0x200>
 8007492:	e00f      	b.n	80074b4 <UART_SetConfig+0x210>
 8007494:	2300      	movs	r3, #0
 8007496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800749a:	e042      	b.n	8007522 <UART_SetConfig+0x27e>
 800749c:	2302      	movs	r3, #2
 800749e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074a2:	e03e      	b.n	8007522 <UART_SetConfig+0x27e>
 80074a4:	2304      	movs	r3, #4
 80074a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074aa:	e03a      	b.n	8007522 <UART_SetConfig+0x27e>
 80074ac:	2308      	movs	r3, #8
 80074ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074b2:	e036      	b.n	8007522 <UART_SetConfig+0x27e>
 80074b4:	2310      	movs	r3, #16
 80074b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ba:	e032      	b.n	8007522 <UART_SetConfig+0x27e>
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a30      	ldr	r2, [pc, #192]	@ (8007584 <UART_SetConfig+0x2e0>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d12a      	bne.n	800751c <UART_SetConfig+0x278>
 80074c6:	4b31      	ldr	r3, [pc, #196]	@ (800758c <UART_SetConfig+0x2e8>)
 80074c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80074d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074d4:	d01a      	beq.n	800750c <UART_SetConfig+0x268>
 80074d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074da:	d81b      	bhi.n	8007514 <UART_SetConfig+0x270>
 80074dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074e0:	d00c      	beq.n	80074fc <UART_SetConfig+0x258>
 80074e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074e6:	d815      	bhi.n	8007514 <UART_SetConfig+0x270>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <UART_SetConfig+0x250>
 80074ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074f0:	d008      	beq.n	8007504 <UART_SetConfig+0x260>
 80074f2:	e00f      	b.n	8007514 <UART_SetConfig+0x270>
 80074f4:	2300      	movs	r3, #0
 80074f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074fa:	e012      	b.n	8007522 <UART_SetConfig+0x27e>
 80074fc:	2302      	movs	r3, #2
 80074fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007502:	e00e      	b.n	8007522 <UART_SetConfig+0x27e>
 8007504:	2304      	movs	r3, #4
 8007506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800750a:	e00a      	b.n	8007522 <UART_SetConfig+0x27e>
 800750c:	2308      	movs	r3, #8
 800750e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007512:	e006      	b.n	8007522 <UART_SetConfig+0x27e>
 8007514:	2310      	movs	r3, #16
 8007516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800751a:	e002      	b.n	8007522 <UART_SetConfig+0x27e>
 800751c:	2310      	movs	r3, #16
 800751e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a17      	ldr	r2, [pc, #92]	@ (8007584 <UART_SetConfig+0x2e0>)
 8007528:	4293      	cmp	r3, r2
 800752a:	f040 80a8 	bne.w	800767e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800752e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007532:	2b08      	cmp	r3, #8
 8007534:	d834      	bhi.n	80075a0 <UART_SetConfig+0x2fc>
 8007536:	a201      	add	r2, pc, #4	@ (adr r2, 800753c <UART_SetConfig+0x298>)
 8007538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753c:	08007561 	.word	0x08007561
 8007540:	080075a1 	.word	0x080075a1
 8007544:	08007569 	.word	0x08007569
 8007548:	080075a1 	.word	0x080075a1
 800754c:	0800756f 	.word	0x0800756f
 8007550:	080075a1 	.word	0x080075a1
 8007554:	080075a1 	.word	0x080075a1
 8007558:	080075a1 	.word	0x080075a1
 800755c:	08007577 	.word	0x08007577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007560:	f7fe f9ee 	bl	8005940 <HAL_RCC_GetPCLK1Freq>
 8007564:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007566:	e021      	b.n	80075ac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007568:	4b0c      	ldr	r3, [pc, #48]	@ (800759c <UART_SetConfig+0x2f8>)
 800756a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800756c:	e01e      	b.n	80075ac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800756e:	f7fe f979 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 8007572:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007574:	e01a      	b.n	80075ac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800757a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800757c:	e016      	b.n	80075ac <UART_SetConfig+0x308>
 800757e:	bf00      	nop
 8007580:	cfff69f3 	.word	0xcfff69f3
 8007584:	40008000 	.word	0x40008000
 8007588:	40013800 	.word	0x40013800
 800758c:	40021000 	.word	0x40021000
 8007590:	40004400 	.word	0x40004400
 8007594:	40004800 	.word	0x40004800
 8007598:	40004c00 	.word	0x40004c00
 800759c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 812a 	beq.w	8007808 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b8:	4a9e      	ldr	r2, [pc, #632]	@ (8007834 <UART_SetConfig+0x590>)
 80075ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075be:	461a      	mov	r2, r3
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80075c6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	4613      	mov	r3, r2
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	4413      	add	r3, r2
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d305      	bcc.n	80075e4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d903      	bls.n	80075ec <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80075ea:	e10d      	b.n	8007808 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ee:	2200      	movs	r2, #0
 80075f0:	60bb      	str	r3, [r7, #8]
 80075f2:	60fa      	str	r2, [r7, #12]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f8:	4a8e      	ldr	r2, [pc, #568]	@ (8007834 <UART_SetConfig+0x590>)
 80075fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2200      	movs	r2, #0
 8007602:	603b      	str	r3, [r7, #0]
 8007604:	607a      	str	r2, [r7, #4]
 8007606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800760a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800760e:	f7f9 fb53 	bl	8000cb8 <__aeabi_uldivmod>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4610      	mov	r0, r2
 8007618:	4619      	mov	r1, r3
 800761a:	f04f 0200 	mov.w	r2, #0
 800761e:	f04f 0300 	mov.w	r3, #0
 8007622:	020b      	lsls	r3, r1, #8
 8007624:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007628:	0202      	lsls	r2, r0, #8
 800762a:	6979      	ldr	r1, [r7, #20]
 800762c:	6849      	ldr	r1, [r1, #4]
 800762e:	0849      	lsrs	r1, r1, #1
 8007630:	2000      	movs	r0, #0
 8007632:	460c      	mov	r4, r1
 8007634:	4605      	mov	r5, r0
 8007636:	eb12 0804 	adds.w	r8, r2, r4
 800763a:	eb43 0905 	adc.w	r9, r3, r5
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	469a      	mov	sl, r3
 8007646:	4693      	mov	fp, r2
 8007648:	4652      	mov	r2, sl
 800764a:	465b      	mov	r3, fp
 800764c:	4640      	mov	r0, r8
 800764e:	4649      	mov	r1, r9
 8007650:	f7f9 fb32 	bl	8000cb8 <__aeabi_uldivmod>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4613      	mov	r3, r2
 800765a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007662:	d308      	bcc.n	8007676 <UART_SetConfig+0x3d2>
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800766a:	d204      	bcs.n	8007676 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6a3a      	ldr	r2, [r7, #32]
 8007672:	60da      	str	r2, [r3, #12]
 8007674:	e0c8      	b.n	8007808 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800767c:	e0c4      	b.n	8007808 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007686:	d167      	bne.n	8007758 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007688:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800768c:	2b08      	cmp	r3, #8
 800768e:	d828      	bhi.n	80076e2 <UART_SetConfig+0x43e>
 8007690:	a201      	add	r2, pc, #4	@ (adr r2, 8007698 <UART_SetConfig+0x3f4>)
 8007692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007696:	bf00      	nop
 8007698:	080076bd 	.word	0x080076bd
 800769c:	080076c5 	.word	0x080076c5
 80076a0:	080076cd 	.word	0x080076cd
 80076a4:	080076e3 	.word	0x080076e3
 80076a8:	080076d3 	.word	0x080076d3
 80076ac:	080076e3 	.word	0x080076e3
 80076b0:	080076e3 	.word	0x080076e3
 80076b4:	080076e3 	.word	0x080076e3
 80076b8:	080076db 	.word	0x080076db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076bc:	f7fe f940 	bl	8005940 <HAL_RCC_GetPCLK1Freq>
 80076c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076c2:	e014      	b.n	80076ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076c4:	f7fe f952 	bl	800596c <HAL_RCC_GetPCLK2Freq>
 80076c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076ca:	e010      	b.n	80076ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076cc:	4b5a      	ldr	r3, [pc, #360]	@ (8007838 <UART_SetConfig+0x594>)
 80076ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076d0:	e00d      	b.n	80076ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076d2:	f7fe f8c7 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 80076d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076d8:	e009      	b.n	80076ee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076e0:	e005      	b.n	80076ee <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80076ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 8089 	beq.w	8007808 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fa:	4a4e      	ldr	r2, [pc, #312]	@ (8007834 <UART_SetConfig+0x590>)
 80076fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007700:	461a      	mov	r2, r3
 8007702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007704:	fbb3 f3f2 	udiv	r3, r3, r2
 8007708:	005a      	lsls	r2, r3, #1
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	085b      	lsrs	r3, r3, #1
 8007710:	441a      	add	r2, r3
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	fbb2 f3f3 	udiv	r3, r2, r3
 800771a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	2b0f      	cmp	r3, #15
 8007720:	d916      	bls.n	8007750 <UART_SetConfig+0x4ac>
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007728:	d212      	bcs.n	8007750 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	b29b      	uxth	r3, r3
 800772e:	f023 030f 	bic.w	r3, r3, #15
 8007732:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	085b      	lsrs	r3, r3, #1
 8007738:	b29b      	uxth	r3, r3
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	b29a      	uxth	r2, r3
 8007740:	8bfb      	ldrh	r3, [r7, #30]
 8007742:	4313      	orrs	r3, r2
 8007744:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	8bfa      	ldrh	r2, [r7, #30]
 800774c:	60da      	str	r2, [r3, #12]
 800774e:	e05b      	b.n	8007808 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007756:	e057      	b.n	8007808 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007758:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800775c:	2b08      	cmp	r3, #8
 800775e:	d828      	bhi.n	80077b2 <UART_SetConfig+0x50e>
 8007760:	a201      	add	r2, pc, #4	@ (adr r2, 8007768 <UART_SetConfig+0x4c4>)
 8007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007766:	bf00      	nop
 8007768:	0800778d 	.word	0x0800778d
 800776c:	08007795 	.word	0x08007795
 8007770:	0800779d 	.word	0x0800779d
 8007774:	080077b3 	.word	0x080077b3
 8007778:	080077a3 	.word	0x080077a3
 800777c:	080077b3 	.word	0x080077b3
 8007780:	080077b3 	.word	0x080077b3
 8007784:	080077b3 	.word	0x080077b3
 8007788:	080077ab 	.word	0x080077ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800778c:	f7fe f8d8 	bl	8005940 <HAL_RCC_GetPCLK1Freq>
 8007790:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007792:	e014      	b.n	80077be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007794:	f7fe f8ea 	bl	800596c <HAL_RCC_GetPCLK2Freq>
 8007798:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800779a:	e010      	b.n	80077be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800779c:	4b26      	ldr	r3, [pc, #152]	@ (8007838 <UART_SetConfig+0x594>)
 800779e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077a0:	e00d      	b.n	80077be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077a2:	f7fe f85f 	bl	8005864 <HAL_RCC_GetSysClockFreq>
 80077a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077a8:	e009      	b.n	80077be <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077b0:	e005      	b.n	80077be <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077bc:	bf00      	nop
    }

    if (pclk != 0U)
 80077be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d021      	beq.n	8007808 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c8:	4a1a      	ldr	r2, [pc, #104]	@ (8007834 <UART_SetConfig+0x590>)
 80077ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ce:	461a      	mov	r2, r3
 80077d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	085b      	lsrs	r3, r3, #1
 80077dc:	441a      	add	r2, r3
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	2b0f      	cmp	r3, #15
 80077ec:	d909      	bls.n	8007802 <UART_SetConfig+0x55e>
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077f4:	d205      	bcs.n	8007802 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	60da      	str	r2, [r3, #12]
 8007800:	e002      	b.n	8007808 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2201      	movs	r2, #1
 800780c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	2201      	movs	r2, #1
 8007814:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2200      	movs	r2, #0
 800781c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2200      	movs	r2, #0
 8007822:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007824:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007828:	4618      	mov	r0, r3
 800782a:	3730      	adds	r7, #48	@ 0x30
 800782c:	46bd      	mov	sp, r7
 800782e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007832:	bf00      	nop
 8007834:	08010828 	.word	0x08010828
 8007838:	00f42400 	.word	0x00f42400

0800783c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00a      	beq.n	80078aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ae:	f003 0304 	and.w	r3, r3, #4
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d0:	f003 0310 	and.w	r3, r3, #16
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f2:	f003 0320 	and.w	r3, r3, #32
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01a      	beq.n	8007952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007936:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800793a:	d10a      	bne.n	8007952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	605a      	str	r2, [r3, #4]
  }
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b098      	sub	sp, #96	@ 0x60
 8007984:	af02      	add	r7, sp, #8
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007990:	f7fa feee 	bl	8002770 <HAL_GetTick>
 8007994:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0308 	and.w	r3, r3, #8
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d12f      	bne.n	8007a04 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079ac:	2200      	movs	r2, #0
 80079ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f88e 	bl	8007ad4 <UART_WaitOnFlagUntilTimeout>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d022      	beq.n	8007a04 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	461a      	mov	r2, r3
 80079da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80079de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e6      	bne.n	80079be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e063      	b.n	8007acc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0304 	and.w	r3, r3, #4
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	d149      	bne.n	8007aa6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a12:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f857 	bl	8007ad4 <UART_WaitOnFlagUntilTimeout>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d03c      	beq.n	8007aa6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	623b      	str	r3, [r7, #32]
   return(result);
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a52:	e841 2300 	strex	r3, r2, [r1]
 8007a56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e6      	bne.n	8007a2c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3308      	adds	r3, #8
 8007a64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f023 0301 	bic.w	r3, r3, #1
 8007a74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a7e:	61fa      	str	r2, [r7, #28]
 8007a80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a82:	69b9      	ldr	r1, [r7, #24]
 8007a84:	69fa      	ldr	r2, [r7, #28]
 8007a86:	e841 2300 	strex	r3, r2, [r1]
 8007a8a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e5      	bne.n	8007a5e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2220      	movs	r2, #32
 8007a96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e012      	b.n	8007acc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3758      	adds	r7, #88	@ 0x58
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	603b      	str	r3, [r7, #0]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ae4:	e04f      	b.n	8007b86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aec:	d04b      	beq.n	8007b86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aee:	f7fa fe3f 	bl	8002770 <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d302      	bcc.n	8007b04 <UART_WaitOnFlagUntilTimeout+0x30>
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e04e      	b.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d037      	beq.n	8007b86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2b80      	cmp	r3, #128	@ 0x80
 8007b1a:	d034      	beq.n	8007b86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2b40      	cmp	r3, #64	@ 0x40
 8007b20:	d031      	beq.n	8007b86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d110      	bne.n	8007b52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2208      	movs	r2, #8
 8007b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f99c 	bl	8007e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2208      	movs	r2, #8
 8007b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e029      	b.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b60:	d111      	bne.n	8007b86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 f982 	bl	8007e76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2220      	movs	r2, #32
 8007b76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e00f      	b.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69da      	ldr	r2, [r3, #28]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	4013      	ands	r3, r2
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	bf0c      	ite	eq
 8007b96:	2301      	moveq	r3, #1
 8007b98:	2300      	movne	r3, #0
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	79fb      	ldrb	r3, [r7, #7]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d0a0      	beq.n	8007ae6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b0a3      	sub	sp, #140	@ 0x8c
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	88fa      	ldrh	r2, [r7, #6]
 8007bc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	88fa      	ldrh	r2, [r7, #6]
 8007bd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007be2:	d10e      	bne.n	8007c02 <UART_Start_Receive_IT+0x52>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d105      	bne.n	8007bf8 <UART_Start_Receive_IT+0x48>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007bf2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bf6:	e02d      	b.n	8007c54 <UART_Start_Receive_IT+0xa4>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	22ff      	movs	r2, #255	@ 0xff
 8007bfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c00:	e028      	b.n	8007c54 <UART_Start_Receive_IT+0xa4>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10d      	bne.n	8007c26 <UART_Start_Receive_IT+0x76>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d104      	bne.n	8007c1c <UART_Start_Receive_IT+0x6c>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	22ff      	movs	r2, #255	@ 0xff
 8007c16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c1a:	e01b      	b.n	8007c54 <UART_Start_Receive_IT+0xa4>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	227f      	movs	r2, #127	@ 0x7f
 8007c20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c24:	e016      	b.n	8007c54 <UART_Start_Receive_IT+0xa4>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c2e:	d10d      	bne.n	8007c4c <UART_Start_Receive_IT+0x9c>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d104      	bne.n	8007c42 <UART_Start_Receive_IT+0x92>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	227f      	movs	r2, #127	@ 0x7f
 8007c3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c40:	e008      	b.n	8007c54 <UART_Start_Receive_IT+0xa4>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	223f      	movs	r2, #63	@ 0x3f
 8007c46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c4a:	e003      	b.n	8007c54 <UART_Start_Receive_IT+0xa4>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2222      	movs	r2, #34	@ 0x22
 8007c60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3308      	adds	r3, #8
 8007c6a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c6e:	e853 3f00 	ldrex	r3, [r3]
 8007c72:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007c74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c76:	f043 0301 	orr.w	r3, r3, #1
 8007c7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3308      	adds	r3, #8
 8007c84:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007c88:	673a      	str	r2, [r7, #112]	@ 0x70
 8007c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007c8e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007c90:	e841 2300 	strex	r3, r2, [r1]
 8007c94:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007c96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e3      	bne.n	8007c64 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ca4:	d14f      	bne.n	8007d46 <UART_Start_Receive_IT+0x196>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007cac:	88fa      	ldrh	r2, [r7, #6]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d349      	bcc.n	8007d46 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cba:	d107      	bne.n	8007ccc <UART_Start_Receive_IT+0x11c>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d103      	bne.n	8007ccc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4a47      	ldr	r2, [pc, #284]	@ (8007de4 <UART_Start_Receive_IT+0x234>)
 8007cc8:	675a      	str	r2, [r3, #116]	@ 0x74
 8007cca:	e002      	b.n	8007cd2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4a46      	ldr	r2, [pc, #280]	@ (8007de8 <UART_Start_Receive_IT+0x238>)
 8007cd0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d01a      	beq.n	8007d10 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007cfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cfe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007d02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e4      	bne.n	8007cda <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3308      	adds	r3, #8
 8007d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007d30:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007d32:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007d36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e5      	bne.n	8007d10 <UART_Start_Receive_IT+0x160>
 8007d44:	e046      	b.n	8007dd4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d4e:	d107      	bne.n	8007d60 <UART_Start_Receive_IT+0x1b0>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d103      	bne.n	8007d60 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4a24      	ldr	r2, [pc, #144]	@ (8007dec <UART_Start_Receive_IT+0x23c>)
 8007d5c:	675a      	str	r2, [r3, #116]	@ 0x74
 8007d5e:	e002      	b.n	8007d66 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4a23      	ldr	r2, [pc, #140]	@ (8007df0 <UART_Start_Receive_IT+0x240>)
 8007d64:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d019      	beq.n	8007da2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d76:	e853 3f00 	ldrex	r3, [r3]
 8007d7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007d82:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d8e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d94:	e841 2300 	strex	r3, r2, [r1]
 8007d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e6      	bne.n	8007d6e <UART_Start_Receive_IT+0x1be>
 8007da0:	e018      	b.n	8007dd4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	e853 3f00 	ldrex	r3, [r3]
 8007dae:	613b      	str	r3, [r7, #16]
   return(result);
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f043 0320 	orr.w	r3, r3, #32
 8007db6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dc0:	623b      	str	r3, [r7, #32]
 8007dc2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	69f9      	ldr	r1, [r7, #28]
 8007dc6:	6a3a      	ldr	r2, [r7, #32]
 8007dc8:	e841 2300 	strex	r3, r2, [r1]
 8007dcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e6      	bne.n	8007da2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	378c      	adds	r7, #140	@ 0x8c
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	080087cd 	.word	0x080087cd
 8007de8:	0800846d 	.word	0x0800846d
 8007dec:	080082b5 	.word	0x080082b5
 8007df0:	080080fd 	.word	0x080080fd

08007df4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b08f      	sub	sp, #60	@ 0x3c
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e1c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e22:	e841 2300 	strex	r3, r2, [r1]
 8007e26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e6      	bne.n	8007dfc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3308      	adds	r3, #8
 8007e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e4e:	61ba      	str	r2, [r7, #24]
 8007e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e52:	6979      	ldr	r1, [r7, #20]
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1e5      	bne.n	8007e2e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007e6a:	bf00      	nop
 8007e6c:	373c      	adds	r7, #60	@ 0x3c
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b095      	sub	sp, #84	@ 0x54
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e86:	e853 3f00 	ldrex	r3, [r3]
 8007e8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ea2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ea4:	e841 2300 	strex	r3, r2, [r1]
 8007ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1e6      	bne.n	8007e7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	e853 3f00 	ldrex	r3, [r3]
 8007ebe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ec6:	f023 0301 	bic.w	r3, r3, #1
 8007eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007edc:	e841 2300 	strex	r3, r2, [r1]
 8007ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1e3      	bne.n	8007eb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d118      	bne.n	8007f22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	e853 3f00 	ldrex	r3, [r3]
 8007efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f023 0310 	bic.w	r3, r3, #16
 8007f04:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f0e:	61bb      	str	r3, [r7, #24]
 8007f10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	6979      	ldr	r1, [r7, #20]
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e6      	bne.n	8007ef0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f36:	bf00      	nop
 8007f38:	3754      	adds	r7, #84	@ 0x54
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b090      	sub	sp, #64	@ 0x40
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d137      	bne.n	8007fce <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f60:	2200      	movs	r2, #0
 8007f62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	623b      	str	r3, [r7, #32]
   return(result);
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3308      	adds	r3, #8
 8007f84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f86:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e5      	bne.n	8007f66 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	e853 3f00 	ldrex	r3, [r3]
 8007fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb8:	61fb      	str	r3, [r7, #28]
 8007fba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	69b9      	ldr	r1, [r7, #24]
 8007fbe:	69fa      	ldr	r2, [r7, #28]
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e6      	bne.n	8007f9a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fcc:	e002      	b.n	8007fd4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007fce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007fd0:	f7f9 f9da 	bl	8001388 <HAL_UART_TxCpltCallback>
}
 8007fd4:	bf00      	nop
 8007fd6:	3740      	adds	r7, #64	@ 0x40
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f7ff f93a 	bl	8007264 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ff0:	bf00      	nop
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008004:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800800c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008014:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008020:	2b80      	cmp	r3, #128	@ 0x80
 8008022:	d109      	bne.n	8008038 <UART_DMAError+0x40>
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	2b21      	cmp	r3, #33	@ 0x21
 8008028:	d106      	bne.n	8008038 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2200      	movs	r2, #0
 800802e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008032:	6978      	ldr	r0, [r7, #20]
 8008034:	f7ff fede 	bl	8007df4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008042:	2b40      	cmp	r3, #64	@ 0x40
 8008044:	d109      	bne.n	800805a <UART_DMAError+0x62>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b22      	cmp	r3, #34	@ 0x22
 800804a:	d106      	bne.n	800805a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2200      	movs	r2, #0
 8008050:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008054:	6978      	ldr	r0, [r7, #20]
 8008056:	f7ff ff0e 	bl	8007e76 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008060:	f043 0210 	orr.w	r2, r3, #16
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800806a:	6978      	ldr	r0, [r7, #20]
 800806c:	f7ff f904 	bl	8007278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008070:	bf00      	nop
 8008072:	3718      	adds	r7, #24
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f7ff f8ee 	bl	8007278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800809c:	bf00      	nop
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	e853 3f00 	ldrex	r3, [r3]
 80080b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080c0:	61fb      	str	r3, [r7, #28]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	61bb      	str	r3, [r7, #24]
 80080cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ce:	6979      	ldr	r1, [r7, #20]
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	e841 2300 	strex	r3, r2, [r1]
 80080d6:	613b      	str	r3, [r7, #16]
   return(result);
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1e6      	bne.n	80080ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2220      	movs	r2, #32
 80080e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7f9 f94b 	bl	8001388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080f2:	bf00      	nop
 80080f4:	3720      	adds	r7, #32
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b09c      	sub	sp, #112	@ 0x70
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800810a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008114:	2b22      	cmp	r3, #34	@ 0x22
 8008116:	f040 80be 	bne.w	8008296 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008120:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008124:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008128:	b2d9      	uxtb	r1, r3
 800812a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800812e:	b2da      	uxtb	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008134:	400a      	ands	r2, r1
 8008136:	b2d2      	uxtb	r2, r2
 8008138:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800813e:	1c5a      	adds	r2, r3, #1
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800814a:	b29b      	uxth	r3, r3
 800814c:	3b01      	subs	r3, #1
 800814e:	b29a      	uxth	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800815c:	b29b      	uxth	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	f040 80a1 	bne.w	80082a6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008174:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008178:	66bb      	str	r3, [r7, #104]	@ 0x68
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008182:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008184:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008186:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008188:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800818a:	e841 2300 	strex	r3, r2, [r1]
 800818e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1e6      	bne.n	8008164 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3308      	adds	r3, #8
 800819c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081a8:	f023 0301 	bic.w	r3, r3, #1
 80081ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3308      	adds	r3, #8
 80081b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80081b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80081b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081be:	e841 2300 	strex	r3, r2, [r1]
 80081c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1e5      	bne.n	8008196 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2220      	movs	r2, #32
 80081ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a33      	ldr	r2, [pc, #204]	@ (80082b0 <UART_RxISR_8BIT+0x1b4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d01f      	beq.n	8008228 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d018      	beq.n	8008228 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fe:	e853 3f00 	ldrex	r3, [r3]
 8008202:	623b      	str	r3, [r7, #32]
   return(result);
 8008204:	6a3b      	ldr	r3, [r7, #32]
 8008206:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800820a:	663b      	str	r3, [r7, #96]	@ 0x60
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	461a      	mov	r2, r3
 8008212:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008214:	633b      	str	r3, [r7, #48]	@ 0x30
 8008216:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008218:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800821a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800821c:	e841 2300 	strex	r3, r2, [r1]
 8008220:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1e6      	bne.n	80081f6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800822c:	2b01      	cmp	r3, #1
 800822e:	d12e      	bne.n	800828e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	e853 3f00 	ldrex	r3, [r3]
 8008242:	60fb      	str	r3, [r7, #12]
   return(result);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f023 0310 	bic.w	r3, r3, #16
 800824a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	461a      	mov	r2, r3
 8008252:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008254:	61fb      	str	r3, [r7, #28]
 8008256:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008258:	69b9      	ldr	r1, [r7, #24]
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	e841 2300 	strex	r3, r2, [r1]
 8008260:	617b      	str	r3, [r7, #20]
   return(result);
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1e6      	bne.n	8008236 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	f003 0310 	and.w	r3, r3, #16
 8008272:	2b10      	cmp	r3, #16
 8008274:	d103      	bne.n	800827e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2210      	movs	r2, #16
 800827c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7ff f800 	bl	800728c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800828c:	e00b      	b.n	80082a6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7f9 f84a 	bl	8001328 <HAL_UART_RxCpltCallback>
}
 8008294:	e007      	b.n	80082a6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	699a      	ldr	r2, [r3, #24]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f042 0208 	orr.w	r2, r2, #8
 80082a4:	619a      	str	r2, [r3, #24]
}
 80082a6:	bf00      	nop
 80082a8:	3770      	adds	r7, #112	@ 0x70
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	40008000 	.word	0x40008000

080082b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b09c      	sub	sp, #112	@ 0x70
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80082c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082cc:	2b22      	cmp	r3, #34	@ 0x22
 80082ce:	f040 80be 	bne.w	800844e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80082e2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80082e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80082ea:	4013      	ands	r3, r2
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082f6:	1c9a      	adds	r2, r3, #2
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008302:	b29b      	uxth	r3, r3
 8008304:	3b01      	subs	r3, #1
 8008306:	b29a      	uxth	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008314:	b29b      	uxth	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	f040 80a1 	bne.w	800845e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008324:	e853 3f00 	ldrex	r3, [r3]
 8008328:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800832a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800832c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008330:	667b      	str	r3, [r7, #100]	@ 0x64
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800833a:	657b      	str	r3, [r7, #84]	@ 0x54
 800833c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008340:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008342:	e841 2300 	strex	r3, r2, [r1]
 8008346:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1e6      	bne.n	800831c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3308      	adds	r3, #8
 8008354:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008358:	e853 3f00 	ldrex	r3, [r3]
 800835c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008360:	f023 0301 	bic.w	r3, r3, #1
 8008364:	663b      	str	r3, [r7, #96]	@ 0x60
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3308      	adds	r3, #8
 800836c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800836e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008372:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008374:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008376:	e841 2300 	strex	r3, r2, [r1]
 800837a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800837c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1e5      	bne.n	800834e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2220      	movs	r2, #32
 8008386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a33      	ldr	r2, [pc, #204]	@ (8008468 <UART_RxISR_16BIT+0x1b4>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d01f      	beq.n	80083e0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d018      	beq.n	80083e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80083c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083ce:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e6      	bne.n	80083ae <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d12e      	bne.n	8008446 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	f023 0310 	bic.w	r3, r3, #16
 8008402:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800840c:	61bb      	str	r3, [r7, #24]
 800840e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6979      	ldr	r1, [r7, #20]
 8008412:	69ba      	ldr	r2, [r7, #24]
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	613b      	str	r3, [r7, #16]
   return(result);
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e6      	bne.n	80083ee <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	f003 0310 	and.w	r3, r3, #16
 800842a:	2b10      	cmp	r3, #16
 800842c:	d103      	bne.n	8008436 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2210      	movs	r2, #16
 8008434:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7fe ff24 	bl	800728c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008444:	e00b      	b.n	800845e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7f8 ff6e 	bl	8001328 <HAL_UART_RxCpltCallback>
}
 800844c:	e007      	b.n	800845e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	699a      	ldr	r2, [r3, #24]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f042 0208 	orr.w	r2, r2, #8
 800845c:	619a      	str	r2, [r3, #24]
}
 800845e:	bf00      	nop
 8008460:	3770      	adds	r7, #112	@ 0x70
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	40008000 	.word	0x40008000

0800846c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b0ac      	sub	sp, #176	@ 0xb0
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800847a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	69db      	ldr	r3, [r3, #28]
 8008484:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084a2:	2b22      	cmp	r3, #34	@ 0x22
 80084a4:	f040 8182 	bne.w	80087ac <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80084ae:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084b2:	e125      	b.n	8008700 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ba:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084be:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80084c2:	b2d9      	uxtb	r1, r3
 80084c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084ce:	400a      	ands	r2, r1
 80084d0:	b2d2      	uxtb	r2, r2
 80084d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80084fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084fe:	f003 0307 	and.w	r3, r3, #7
 8008502:	2b00      	cmp	r3, #0
 8008504:	d053      	beq.n	80085ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d011      	beq.n	8008536 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00b      	beq.n	8008536 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2201      	movs	r2, #1
 8008524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800852c:	f043 0201 	orr.w	r2, r3, #1
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d011      	beq.n	8008566 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00b      	beq.n	8008566 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2202      	movs	r2, #2
 8008554:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800855c:	f043 0204 	orr.w	r2, r3, #4
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800856a:	f003 0304 	and.w	r3, r3, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	d011      	beq.n	8008596 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00b      	beq.n	8008596 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2204      	movs	r2, #4
 8008584:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800858c:	f043 0202 	orr.w	r2, r3, #2
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800859c:	2b00      	cmp	r3, #0
 800859e:	d006      	beq.n	80085ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7fe fe69 	bl	8007278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f040 80a2 	bne.w	8008700 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80085ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	461a      	mov	r2, r3
 80085da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80085e0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80085e4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80085ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1e4      	bne.n	80085bc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3308      	adds	r3, #8
 80085f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085fc:	e853 3f00 	ldrex	r3, [r3]
 8008600:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008602:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008608:	f023 0301 	bic.w	r3, r3, #1
 800860c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3308      	adds	r3, #8
 8008616:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800861a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800861c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008620:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008622:	e841 2300 	strex	r3, r2, [r1]
 8008626:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008628:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e1      	bne.n	80085f2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2220      	movs	r2, #32
 8008632:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a5f      	ldr	r2, [pc, #380]	@ (80087c4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d021      	beq.n	8008690 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d01a      	beq.n	8008690 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800866a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800866e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800867c:	657b      	str	r3, [r7, #84]	@ 0x54
 800867e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008682:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800868a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e4      	bne.n	800865a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008694:	2b01      	cmp	r3, #1
 8008696:	d130      	bne.n	80086fa <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a6:	e853 3f00 	ldrex	r3, [r3]
 80086aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ae:	f023 0310 	bic.w	r3, r3, #16
 80086b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80086c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e4      	bne.n	800869e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	f003 0310 	and.w	r3, r3, #16
 80086de:	2b10      	cmp	r3, #16
 80086e0:	d103      	bne.n	80086ea <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2210      	movs	r2, #16
 80086e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7fe fdca 	bl	800728c <HAL_UARTEx_RxEventCallback>
 80086f8:	e002      	b.n	8008700 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7f8 fe14 	bl	8001328 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008700:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008704:	2b00      	cmp	r3, #0
 8008706:	d006      	beq.n	8008716 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800870c:	f003 0320 	and.w	r3, r3, #32
 8008710:	2b00      	cmp	r3, #0
 8008712:	f47f aecf 	bne.w	80084b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800871c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008720:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008724:	2b00      	cmp	r3, #0
 8008726:	d049      	beq.n	80087bc <UART_RxISR_8BIT_FIFOEN+0x350>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800872e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008732:	429a      	cmp	r2, r3
 8008734:	d242      	bcs.n	80087bc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3308      	adds	r3, #8
 800873c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	61fb      	str	r3, [r7, #28]
   return(result);
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800874c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3308      	adds	r3, #8
 8008756:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800875a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800875c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008760:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e3      	bne.n	8008736 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a15      	ldr	r2, [pc, #84]	@ (80087c8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008772:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	60bb      	str	r3, [r7, #8]
   return(result);
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	f043 0320 	orr.w	r3, r3, #32
 8008788:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008796:	61bb      	str	r3, [r7, #24]
 8008798:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	6979      	ldr	r1, [r7, #20]
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	613b      	str	r3, [r7, #16]
   return(result);
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e4      	bne.n	8008774 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087aa:	e007      	b.n	80087bc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699a      	ldr	r2, [r3, #24]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0208 	orr.w	r2, r2, #8
 80087ba:	619a      	str	r2, [r3, #24]
}
 80087bc:	bf00      	nop
 80087be:	37b0      	adds	r7, #176	@ 0xb0
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	40008000 	.word	0x40008000
 80087c8:	080080fd 	.word	0x080080fd

080087cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b0ae      	sub	sp, #184	@ 0xb8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80087da:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008802:	2b22      	cmp	r3, #34	@ 0x22
 8008804:	f040 8186 	bne.w	8008b14 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800880e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008812:	e129      	b.n	8008a68 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008826:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800882a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800882e:	4013      	ands	r3, r2
 8008830:	b29a      	uxth	r2, r3
 8008832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008836:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800883c:	1c9a      	adds	r2, r3, #2
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008848:	b29b      	uxth	r3, r3
 800884a:	3b01      	subs	r3, #1
 800884c:	b29a      	uxth	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800885e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008862:	f003 0307 	and.w	r3, r3, #7
 8008866:	2b00      	cmp	r3, #0
 8008868:	d053      	beq.n	8008912 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800886a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	2b00      	cmp	r3, #0
 8008874:	d011      	beq.n	800889a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800887a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00b      	beq.n	800889a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2201      	movs	r2, #1
 8008888:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008890:	f043 0201 	orr.w	r2, r3, #1
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800889a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d011      	beq.n	80088ca <UART_RxISR_16BIT_FIFOEN+0xfe>
 80088a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00b      	beq.n	80088ca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2202      	movs	r2, #2
 80088b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088c0:	f043 0204 	orr.w	r2, r3, #4
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80088ce:	f003 0304 	and.w	r3, r3, #4
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d011      	beq.n	80088fa <UART_RxISR_16BIT_FIFOEN+0x12e>
 80088d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00b      	beq.n	80088fa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2204      	movs	r2, #4
 80088e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088f0:	f043 0202 	orr.w	r2, r3, #2
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008900:	2b00      	cmp	r3, #0
 8008902:	d006      	beq.n	8008912 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7fe fcb7 	bl	8007278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008918:	b29b      	uxth	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	f040 80a4 	bne.w	8008a68 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800892e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008934:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008942:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008946:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008948:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800894a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008954:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e2      	bne.n	8008920 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3308      	adds	r3, #8
 8008960:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800896a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800896c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008970:	f023 0301 	bic.w	r3, r3, #1
 8008974:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3308      	adds	r3, #8
 800897e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008982:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008984:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008986:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008988:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008990:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e1      	bne.n	800895a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2220      	movs	r2, #32
 800899a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a5f      	ldr	r2, [pc, #380]	@ (8008b2c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d021      	beq.n	80089f8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d01a      	beq.n	80089f8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089ca:	e853 3f00 	ldrex	r3, [r3]
 80089ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	461a      	mov	r2, r3
 80089e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80089e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089e6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089ec:	e841 2300 	strex	r3, r2, [r1]
 80089f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80089f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1e4      	bne.n	80089c2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d130      	bne.n	8008a62 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0e:	e853 3f00 	ldrex	r3, [r3]
 8008a12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a16:	f023 0310 	bic.w	r3, r3, #16
 8008a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a30:	e841 2300 	strex	r3, r2, [r1]
 8008a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1e4      	bne.n	8008a06 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	f003 0310 	and.w	r3, r3, #16
 8008a46:	2b10      	cmp	r3, #16
 8008a48:	d103      	bne.n	8008a52 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2210      	movs	r2, #16
 8008a50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7fe fc16 	bl	800728c <HAL_UARTEx_RxEventCallback>
 8008a60:	e002      	b.n	8008a68 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7f8 fc60 	bl	8001328 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a68:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d006      	beq.n	8008a7e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008a70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a74:	f003 0320 	and.w	r3, r3, #32
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f47f aecb 	bne.w	8008814 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a84:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008a88:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d049      	beq.n	8008b24 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008a96:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d242      	bcs.n	8008b24 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	623b      	str	r3, [r7, #32]
   return(result);
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	3308      	adds	r3, #8
 8008abe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008ac2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1e3      	bne.n	8008a9e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a15      	ldr	r2, [pc, #84]	@ (8008b30 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008ada:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f043 0320 	orr.w	r3, r3, #32
 8008af0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008afe:	61fb      	str	r3, [r7, #28]
 8008b00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b02:	69b9      	ldr	r1, [r7, #24]
 8008b04:	69fa      	ldr	r2, [r7, #28]
 8008b06:	e841 2300 	strex	r3, r2, [r1]
 8008b0a:	617b      	str	r3, [r7, #20]
   return(result);
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1e4      	bne.n	8008adc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b12:	e007      	b.n	8008b24 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	699a      	ldr	r2, [r3, #24]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f042 0208 	orr.w	r2, r2, #8
 8008b22:	619a      	str	r2, [r3, #24]
}
 8008b24:	bf00      	nop
 8008b26:	37b8      	adds	r7, #184	@ 0xb8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	40008000 	.word	0x40008000
 8008b30:	080082b5 	.word	0x080082b5

08008b34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d101      	bne.n	8008b86 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b82:	2302      	movs	r3, #2
 8008b84:	e027      	b.n	8008bd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2224      	movs	r2, #36	@ 0x24
 8008b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 0201 	bic.w	r2, r2, #1
 8008bac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008bb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2220      	movs	r2, #32
 8008bc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d101      	bne.n	8008bfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e02d      	b.n	8008c56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2224      	movs	r2, #36	@ 0x24
 8008c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0201 	bic.w	r2, r2, #1
 8008c20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f850 	bl	8008cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2220      	movs	r2, #32
 8008c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d101      	bne.n	8008c76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c72:	2302      	movs	r3, #2
 8008c74:	e02d      	b.n	8008cd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2224      	movs	r2, #36	@ 0x24
 8008c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 0201 	bic.w	r2, r2, #1
 8008c9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f812 	bl	8008cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
	...

08008cdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d108      	bne.n	8008cfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cfc:	e031      	b.n	8008d62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cfe:	2308      	movs	r3, #8
 8008d00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d02:	2308      	movs	r3, #8
 8008d04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	0e5b      	lsrs	r3, r3, #25
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	f003 0307 	and.w	r3, r3, #7
 8008d14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	0f5b      	lsrs	r3, r3, #29
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	f003 0307 	and.w	r3, r3, #7
 8008d24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	7b3a      	ldrb	r2, [r7, #12]
 8008d2a:	4911      	ldr	r1, [pc, #68]	@ (8008d70 <UARTEx_SetNbDataToProcess+0x94>)
 8008d2c:	5c8a      	ldrb	r2, [r1, r2]
 8008d2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d32:	7b3a      	ldrb	r2, [r7, #12]
 8008d34:	490f      	ldr	r1, [pc, #60]	@ (8008d74 <UARTEx_SetNbDataToProcess+0x98>)
 8008d36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d38:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	7b7a      	ldrb	r2, [r7, #13]
 8008d48:	4909      	ldr	r1, [pc, #36]	@ (8008d70 <UARTEx_SetNbDataToProcess+0x94>)
 8008d4a:	5c8a      	ldrb	r2, [r1, r2]
 8008d4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d50:	7b7a      	ldrb	r2, [r7, #13]
 8008d52:	4908      	ldr	r1, [pc, #32]	@ (8008d74 <UARTEx_SetNbDataToProcess+0x98>)
 8008d54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d56:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008d62:	bf00      	nop
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	08010840 	.word	0x08010840
 8008d74:	08010848 	.word	0x08010848

08008d78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	4603      	mov	r3, r0
 8008d80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d8a:	2b84      	cmp	r3, #132	@ 0x84
 8008d8c:	d005      	beq.n	8008d9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008d8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	4413      	add	r3, r2
 8008d96:	3303      	adds	r3, #3
 8008d98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008dac:	f001 fcc6 	bl	800a73c <vTaskStartScheduler>
  
  return osOK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008db8:	b087      	sub	sp, #28
 8008dba:	af02      	add	r7, sp, #8
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685c      	ldr	r4, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dcc:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7ff ffcf 	bl	8008d78 <makeFreeRtosPriority>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	f107 030c 	add.w	r3, r7, #12
 8008de0:	9301      	str	r3, [sp, #4]
 8008de2:	9200      	str	r2, [sp, #0]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	4632      	mov	r2, r6
 8008de8:	4629      	mov	r1, r5
 8008dea:	4620      	mov	r0, r4
 8008dec:	f001 faaa 	bl	800a344 <xTaskCreate>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d001      	beq.n	8008dfa <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	e000      	b.n	8008dfc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e04 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <osDelay+0x16>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	e000      	b.n	8008e1c <osDelay+0x18>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f001 fbef 	bl	800a600 <vTaskDelay>
  
  return osOK;
 8008e22:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f103 0208 	add.w	r2, r3, #8
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f04f 32ff 	mov.w	r2, #4294967295
 8008e44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f103 0208 	add.w	r2, r3, #8
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f103 0208 	add.w	r2, r3, #8
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e7a:	bf00      	nop
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr

08008e86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e86:	b480      	push	{r7}
 8008e88:	b085      	sub	sp, #20
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	601a      	str	r2, [r3, #0]
}
 8008ec2:	bf00      	nop
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b085      	sub	sp, #20
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee4:	d103      	bne.n	8008eee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	e00c      	b.n	8008f08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	60fb      	str	r3, [r7, #12]
 8008ef4:	e002      	b.n	8008efc <vListInsert+0x2e>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d2f6      	bcs.n	8008ef6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	1c5a      	adds	r2, r3, #1
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	601a      	str	r2, [r3, #0]
}
 8008f34:	bf00      	nop
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	6892      	ldr	r2, [r2, #8]
 8008f56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	6852      	ldr	r2, [r2, #4]
 8008f60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d103      	bne.n	8008f74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689a      	ldr	r2, [r3, #8]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	1e5a      	subs	r2, r3, #1
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10b      	bne.n	8008fc0 <xQueueGenericReset+0x2c>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	60bb      	str	r3, [r7, #8]
}
 8008fba:	bf00      	nop
 8008fbc:	bf00      	nop
 8008fbe:	e7fd      	b.n	8008fbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008fc0:	f002 ff3a 	bl	800be38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fcc:	68f9      	ldr	r1, [r7, #12]
 8008fce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008fd0:	fb01 f303 	mul.w	r3, r1, r3
 8008fd4:	441a      	add	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	68f9      	ldr	r1, [r7, #12]
 8008ff4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008ff6:	fb01 f303 	mul.w	r3, r1, r3
 8008ffa:	441a      	add	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	22ff      	movs	r2, #255	@ 0xff
 8009004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	22ff      	movs	r2, #255	@ 0xff
 800900c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d114      	bne.n	8009040 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d01a      	beq.n	8009054 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3310      	adds	r3, #16
 8009022:	4618      	mov	r0, r3
 8009024:	f001 fe78 	bl	800ad18 <xTaskRemoveFromEventList>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d012      	beq.n	8009054 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800902e:	4b0d      	ldr	r3, [pc, #52]	@ (8009064 <xQueueGenericReset+0xd0>)
 8009030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	e009      	b.n	8009054 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	3310      	adds	r3, #16
 8009044:	4618      	mov	r0, r3
 8009046:	f7ff fef1 	bl	8008e2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	3324      	adds	r3, #36	@ 0x24
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff feec 	bl	8008e2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009054:	f002 ff22 	bl	800be9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009058:	2301      	movs	r3, #1
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	e000ed04 	.word	0xe000ed04

08009068 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009068:	b580      	push	{r7, lr}
 800906a:	b08a      	sub	sp, #40	@ 0x28
 800906c:	af02      	add	r7, sp, #8
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	4613      	mov	r3, r2
 8009074:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10b      	bne.n	8009094 <xQueueGenericCreate+0x2c>
	__asm volatile
 800907c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	613b      	str	r3, [r7, #16]
}
 800908e:	bf00      	nop
 8009090:	bf00      	nop
 8009092:	e7fd      	b.n	8009090 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	fb02 f303 	mul.w	r3, r2, r3
 800909c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	3350      	adds	r3, #80	@ 0x50
 80090a2:	4618      	mov	r0, r3
 80090a4:	f002 ffea 	bl	800c07c <pvPortMalloc>
 80090a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00d      	beq.n	80090cc <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	3350      	adds	r3, #80	@ 0x50
 80090b8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090ba:	79fa      	ldrb	r2, [r7, #7]
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	4613      	mov	r3, r2
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	68b9      	ldr	r1, [r7, #8]
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f000 f805 	bl	80090d6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090cc:	69bb      	ldr	r3, [r7, #24]
	}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3720      	adds	r7, #32
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	60f8      	str	r0, [r7, #12]
 80090de:	60b9      	str	r1, [r7, #8]
 80090e0:	607a      	str	r2, [r7, #4]
 80090e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d103      	bne.n	80090f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	e002      	b.n	80090f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009104:	2101      	movs	r1, #1
 8009106:	69b8      	ldr	r0, [r7, #24]
 8009108:	f7ff ff44 	bl	8008f94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	78fa      	ldrb	r2, [r7, #3]
 8009110:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009114:	bf00      	nop
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00e      	beq.n	8009148 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800913c:	2300      	movs	r3, #0
 800913e:	2200      	movs	r2, #0
 8009140:	2100      	movs	r1, #0
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f81c 	bl	8009180 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800915a:	2301      	movs	r3, #1
 800915c:	617b      	str	r3, [r7, #20]
 800915e:	2300      	movs	r3, #0
 8009160:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009162:	79fb      	ldrb	r3, [r7, #7]
 8009164:	461a      	mov	r2, r3
 8009166:	6939      	ldr	r1, [r7, #16]
 8009168:	6978      	ldr	r0, [r7, #20]
 800916a:	f7ff ff7d 	bl	8009068 <xQueueGenericCreate>
 800916e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f7ff ffd3 	bl	800911c <prvInitialiseMutex>

		return xNewQueue;
 8009176:	68fb      	ldr	r3, [r7, #12]
	}
 8009178:	4618      	mov	r0, r3
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08e      	sub	sp, #56	@ 0x38
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800918e:	2300      	movs	r3, #0
 8009190:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10b      	bne.n	80091b4 <xQueueGenericSend+0x34>
	__asm volatile
 800919c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80091ae:	bf00      	nop
 80091b0:	bf00      	nop
 80091b2:	e7fd      	b.n	80091b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d103      	bne.n	80091c2 <xQueueGenericSend+0x42>
 80091ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <xQueueGenericSend+0x46>
 80091c2:	2301      	movs	r3, #1
 80091c4:	e000      	b.n	80091c8 <xQueueGenericSend+0x48>
 80091c6:	2300      	movs	r3, #0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10b      	bne.n	80091e4 <xQueueGenericSend+0x64>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80091de:	bf00      	nop
 80091e0:	bf00      	nop
 80091e2:	e7fd      	b.n	80091e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d103      	bne.n	80091f2 <xQueueGenericSend+0x72>
 80091ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <xQueueGenericSend+0x76>
 80091f2:	2301      	movs	r3, #1
 80091f4:	e000      	b.n	80091f8 <xQueueGenericSend+0x78>
 80091f6:	2300      	movs	r3, #0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10b      	bne.n	8009214 <xQueueGenericSend+0x94>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	623b      	str	r3, [r7, #32]
}
 800920e:	bf00      	nop
 8009210:	bf00      	nop
 8009212:	e7fd      	b.n	8009210 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009214:	f002 f832 	bl	800b27c <xTaskGetSchedulerState>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d102      	bne.n	8009224 <xQueueGenericSend+0xa4>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <xQueueGenericSend+0xa8>
 8009224:	2301      	movs	r3, #1
 8009226:	e000      	b.n	800922a <xQueueGenericSend+0xaa>
 8009228:	2300      	movs	r3, #0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10b      	bne.n	8009246 <xQueueGenericSend+0xc6>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	61fb      	str	r3, [r7, #28]
}
 8009240:	bf00      	nop
 8009242:	bf00      	nop
 8009244:	e7fd      	b.n	8009242 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009246:	f002 fdf7 	bl	800be38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800924a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009252:	429a      	cmp	r2, r3
 8009254:	d302      	bcc.n	800925c <xQueueGenericSend+0xdc>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b02      	cmp	r3, #2
 800925a:	d129      	bne.n	80092b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	68b9      	ldr	r1, [r7, #8]
 8009260:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009262:	f000 fbc7 	bl	80099f4 <prvCopyDataToQueue>
 8009266:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800926c:	2b00      	cmp	r3, #0
 800926e:	d010      	beq.n	8009292 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009272:	3324      	adds	r3, #36	@ 0x24
 8009274:	4618      	mov	r0, r3
 8009276:	f001 fd4f 	bl	800ad18 <xTaskRemoveFromEventList>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d013      	beq.n	80092a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009280:	4b3f      	ldr	r3, [pc, #252]	@ (8009380 <xQueueGenericSend+0x200>)
 8009282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	e00a      	b.n	80092a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009294:	2b00      	cmp	r3, #0
 8009296:	d007      	beq.n	80092a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009298:	4b39      	ldr	r3, [pc, #228]	@ (8009380 <xQueueGenericSend+0x200>)
 800929a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800929e:	601a      	str	r2, [r3, #0]
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80092a8:	f002 fdf8 	bl	800be9c <vPortExitCritical>
				return pdPASS;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e063      	b.n	8009378 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d103      	bne.n	80092be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092b6:	f002 fdf1 	bl	800be9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80092ba:	2300      	movs	r3, #0
 80092bc:	e05c      	b.n	8009378 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d106      	bne.n	80092d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092c4:	f107 0314 	add.w	r3, r7, #20
 80092c8:	4618      	mov	r0, r3
 80092ca:	f001 fdb1 	bl	800ae30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092ce:	2301      	movs	r3, #1
 80092d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092d2:	f002 fde3 	bl	800be9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092d6:	f001 fa85 	bl	800a7e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092da:	f002 fdad 	bl	800be38 <vPortEnterCritical>
 80092de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092e4:	b25b      	sxtb	r3, r3
 80092e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ea:	d103      	bne.n	80092f4 <xQueueGenericSend+0x174>
 80092ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092fa:	b25b      	sxtb	r3, r3
 80092fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009300:	d103      	bne.n	800930a <xQueueGenericSend+0x18a>
 8009302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800930a:	f002 fdc7 	bl	800be9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800930e:	1d3a      	adds	r2, r7, #4
 8009310:	f107 0314 	add.w	r3, r7, #20
 8009314:	4611      	mov	r1, r2
 8009316:	4618      	mov	r0, r3
 8009318:	f001 fda0 	bl	800ae5c <xTaskCheckForTimeOut>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d124      	bne.n	800936c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009322:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009324:	f000 fc5e 	bl	8009be4 <prvIsQueueFull>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d018      	beq.n	8009360 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	3310      	adds	r3, #16
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	4611      	mov	r1, r2
 8009336:	4618      	mov	r0, r3
 8009338:	f001 fcc8 	bl	800accc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800933c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800933e:	f000 fbe9 	bl	8009b14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009342:	f001 fa5d 	bl	800a800 <xTaskResumeAll>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	f47f af7c 	bne.w	8009246 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800934e:	4b0c      	ldr	r3, [pc, #48]	@ (8009380 <xQueueGenericSend+0x200>)
 8009350:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	e772      	b.n	8009246 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009362:	f000 fbd7 	bl	8009b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009366:	f001 fa4b 	bl	800a800 <xTaskResumeAll>
 800936a:	e76c      	b.n	8009246 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800936c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800936e:	f000 fbd1 	bl	8009b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009372:	f001 fa45 	bl	800a800 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009376:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009378:	4618      	mov	r0, r3
 800937a:	3738      	adds	r7, #56	@ 0x38
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	e000ed04 	.word	0xe000ed04

08009384 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b090      	sub	sp, #64	@ 0x40
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
 8009390:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10b      	bne.n	80093b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	e7fd      	b.n	80093b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d103      	bne.n	80093c2 <xQueueGenericSendFromISR+0x3e>
 80093ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <xQueueGenericSendFromISR+0x42>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e000      	b.n	80093c8 <xQueueGenericSendFromISR+0x44>
 80093c6:	2300      	movs	r3, #0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10b      	bne.n	80093e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80093de:	bf00      	nop
 80093e0:	bf00      	nop
 80093e2:	e7fd      	b.n	80093e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d103      	bne.n	80093f2 <xQueueGenericSendFromISR+0x6e>
 80093ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d101      	bne.n	80093f6 <xQueueGenericSendFromISR+0x72>
 80093f2:	2301      	movs	r3, #1
 80093f4:	e000      	b.n	80093f8 <xQueueGenericSendFromISR+0x74>
 80093f6:	2300      	movs	r3, #0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10b      	bne.n	8009414 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	623b      	str	r3, [r7, #32]
}
 800940e:	bf00      	nop
 8009410:	bf00      	nop
 8009412:	e7fd      	b.n	8009410 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009414:	f002 fdf0 	bl	800bff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009418:	f3ef 8211 	mrs	r2, BASEPRI
 800941c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	61fa      	str	r2, [r7, #28]
 800942e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009430:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009432:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800943c:	429a      	cmp	r2, r3
 800943e:	d302      	bcc.n	8009446 <xQueueGenericSendFromISR+0xc2>
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b02      	cmp	r3, #2
 8009444:	d12f      	bne.n	80094a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009448:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800944c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009454:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	68b9      	ldr	r1, [r7, #8]
 800945a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800945c:	f000 faca 	bl	80099f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009460:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009468:	d112      	bne.n	8009490 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800946a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800946e:	2b00      	cmp	r3, #0
 8009470:	d016      	beq.n	80094a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009474:	3324      	adds	r3, #36	@ 0x24
 8009476:	4618      	mov	r0, r3
 8009478:	f001 fc4e 	bl	800ad18 <xTaskRemoveFromEventList>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00e      	beq.n	80094a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00b      	beq.n	80094a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	e007      	b.n	80094a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009490:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009494:	3301      	adds	r3, #1
 8009496:	b2db      	uxtb	r3, r3
 8009498:	b25a      	sxtb	r2, r3
 800949a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80094a0:	2301      	movs	r3, #1
 80094a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80094a4:	e001      	b.n	80094aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80094b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3740      	adds	r7, #64	@ 0x40
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b08e      	sub	sp, #56	@ 0x38
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80094ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10b      	bne.n	80094ec <xQueueGiveFromISR+0x2c>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	623b      	str	r3, [r7, #32]
}
 80094e6:	bf00      	nop
 80094e8:	bf00      	nop
 80094ea:	e7fd      	b.n	80094e8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80094ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00b      	beq.n	800950c <xQueueGiveFromISR+0x4c>
	__asm volatile
 80094f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f8:	f383 8811 	msr	BASEPRI, r3
 80094fc:	f3bf 8f6f 	isb	sy
 8009500:	f3bf 8f4f 	dsb	sy
 8009504:	61fb      	str	r3, [r7, #28]
}
 8009506:	bf00      	nop
 8009508:	bf00      	nop
 800950a:	e7fd      	b.n	8009508 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800950c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d103      	bne.n	800951c <xQueueGiveFromISR+0x5c>
 8009514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <xQueueGiveFromISR+0x60>
 800951c:	2301      	movs	r3, #1
 800951e:	e000      	b.n	8009522 <xQueueGiveFromISR+0x62>
 8009520:	2300      	movs	r3, #0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10b      	bne.n	800953e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	61bb      	str	r3, [r7, #24]
}
 8009538:	bf00      	nop
 800953a:	bf00      	nop
 800953c:	e7fd      	b.n	800953a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800953e:	f002 fd5b 	bl	800bff8 <vPortValidateInterruptPriority>
	__asm volatile
 8009542:	f3ef 8211 	mrs	r2, BASEPRI
 8009546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	617a      	str	r2, [r7, #20]
 8009558:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800955a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800955c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800955e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009562:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800956a:	429a      	cmp	r2, r3
 800956c:	d22b      	bcs.n	80095c6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800956e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009570:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957a:	1c5a      	adds	r2, r3, #1
 800957c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009580:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009588:	d112      	bne.n	80095b0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800958a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958e:	2b00      	cmp	r3, #0
 8009590:	d016      	beq.n	80095c0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009594:	3324      	adds	r3, #36	@ 0x24
 8009596:	4618      	mov	r0, r3
 8009598:	f001 fbbe 	bl	800ad18 <xTaskRemoveFromEventList>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00e      	beq.n	80095c0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00b      	beq.n	80095c0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2201      	movs	r2, #1
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	e007      	b.n	80095c0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80095b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095b4:	3301      	adds	r3, #1
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	b25a      	sxtb	r2, r3
 80095ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80095c0:	2301      	movs	r3, #1
 80095c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80095c4:	e001      	b.n	80095ca <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f383 8811 	msr	BASEPRI, r3
}
 80095d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3738      	adds	r7, #56	@ 0x38
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b08c      	sub	sp, #48	@ 0x30
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80095ec:	2300      	movs	r3, #0
 80095ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10b      	bne.n	8009612 <xQueueReceive+0x32>
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	623b      	str	r3, [r7, #32]
}
 800960c:	bf00      	nop
 800960e:	bf00      	nop
 8009610:	e7fd      	b.n	800960e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d103      	bne.n	8009620 <xQueueReceive+0x40>
 8009618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <xQueueReceive+0x44>
 8009620:	2301      	movs	r3, #1
 8009622:	e000      	b.n	8009626 <xQueueReceive+0x46>
 8009624:	2300      	movs	r3, #0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10b      	bne.n	8009642 <xQueueReceive+0x62>
	__asm volatile
 800962a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962e:	f383 8811 	msr	BASEPRI, r3
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	61fb      	str	r3, [r7, #28]
}
 800963c:	bf00      	nop
 800963e:	bf00      	nop
 8009640:	e7fd      	b.n	800963e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009642:	f001 fe1b 	bl	800b27c <xTaskGetSchedulerState>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d102      	bne.n	8009652 <xQueueReceive+0x72>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <xQueueReceive+0x76>
 8009652:	2301      	movs	r3, #1
 8009654:	e000      	b.n	8009658 <xQueueReceive+0x78>
 8009656:	2300      	movs	r3, #0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10b      	bne.n	8009674 <xQueueReceive+0x94>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	61bb      	str	r3, [r7, #24]
}
 800966e:	bf00      	nop
 8009670:	bf00      	nop
 8009672:	e7fd      	b.n	8009670 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009674:	f002 fbe0 	bl	800be38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800967c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	2b00      	cmp	r3, #0
 8009682:	d01f      	beq.n	80096c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009684:	68b9      	ldr	r1, [r7, #8]
 8009686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009688:	f000 fa1e 	bl	8009ac8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800968c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968e:	1e5a      	subs	r2, r3, #1
 8009690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009692:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00f      	beq.n	80096bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800969c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969e:	3310      	adds	r3, #16
 80096a0:	4618      	mov	r0, r3
 80096a2:	f001 fb39 	bl	800ad18 <xTaskRemoveFromEventList>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d007      	beq.n	80096bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80096ac:	4b3c      	ldr	r3, [pc, #240]	@ (80097a0 <xQueueReceive+0x1c0>)
 80096ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80096bc:	f002 fbee 	bl	800be9c <vPortExitCritical>
				return pdPASS;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e069      	b.n	8009798 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096ca:	f002 fbe7 	bl	800be9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80096ce:	2300      	movs	r3, #0
 80096d0:	e062      	b.n	8009798 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d106      	bne.n	80096e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096d8:	f107 0310 	add.w	r3, r7, #16
 80096dc:	4618      	mov	r0, r3
 80096de:	f001 fba7 	bl	800ae30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096e2:	2301      	movs	r3, #1
 80096e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096e6:	f002 fbd9 	bl	800be9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096ea:	f001 f87b 	bl	800a7e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096ee:	f002 fba3 	bl	800be38 <vPortEnterCritical>
 80096f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096f8:	b25b      	sxtb	r3, r3
 80096fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fe:	d103      	bne.n	8009708 <xQueueReceive+0x128>
 8009700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009702:	2200      	movs	r2, #0
 8009704:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800970e:	b25b      	sxtb	r3, r3
 8009710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009714:	d103      	bne.n	800971e <xQueueReceive+0x13e>
 8009716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800971e:	f002 fbbd 	bl	800be9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009722:	1d3a      	adds	r2, r7, #4
 8009724:	f107 0310 	add.w	r3, r7, #16
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f001 fb96 	bl	800ae5c <xTaskCheckForTimeOut>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d123      	bne.n	800977e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009738:	f000 fa3e 	bl	8009bb8 <prvIsQueueEmpty>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d017      	beq.n	8009772 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009744:	3324      	adds	r3, #36	@ 0x24
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f001 fabe 	bl	800accc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009750:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009752:	f000 f9df 	bl	8009b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009756:	f001 f853 	bl	800a800 <xTaskResumeAll>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d189      	bne.n	8009674 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009760:	4b0f      	ldr	r3, [pc, #60]	@ (80097a0 <xQueueReceive+0x1c0>)
 8009762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	e780      	b.n	8009674 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009774:	f000 f9ce 	bl	8009b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009778:	f001 f842 	bl	800a800 <xTaskResumeAll>
 800977c:	e77a      	b.n	8009674 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800977e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009780:	f000 f9c8 	bl	8009b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009784:	f001 f83c 	bl	800a800 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800978a:	f000 fa15 	bl	8009bb8 <prvIsQueueEmpty>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	f43f af6f 	beq.w	8009674 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009796:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009798:	4618      	mov	r0, r3
 800979a:	3730      	adds	r7, #48	@ 0x30
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	e000ed04 	.word	0xe000ed04

080097a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b08e      	sub	sp, #56	@ 0x38
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80097ae:	2300      	movs	r3, #0
 80097b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80097b6:	2300      	movs	r3, #0
 80097b8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10b      	bne.n	80097d8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	623b      	str	r3, [r7, #32]
}
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
 80097d6:	e7fd      	b.n	80097d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80097d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00b      	beq.n	80097f8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	61fb      	str	r3, [r7, #28]
}
 80097f2:	bf00      	nop
 80097f4:	bf00      	nop
 80097f6:	e7fd      	b.n	80097f4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097f8:	f001 fd40 	bl	800b27c <xTaskGetSchedulerState>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d102      	bne.n	8009808 <xQueueSemaphoreTake+0x64>
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <xQueueSemaphoreTake+0x68>
 8009808:	2301      	movs	r3, #1
 800980a:	e000      	b.n	800980e <xQueueSemaphoreTake+0x6a>
 800980c:	2300      	movs	r3, #0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10b      	bne.n	800982a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	61bb      	str	r3, [r7, #24]
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop
 8009828:	e7fd      	b.n	8009826 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800982a:	f002 fb05 	bl	800be38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800982e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009832:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009836:	2b00      	cmp	r3, #0
 8009838:	d024      	beq.n	8009884 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800983a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983c:	1e5a      	subs	r2, r3, #1
 800983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009840:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d104      	bne.n	8009854 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800984a:	f002 f803 	bl	800b854 <pvTaskIncrementMutexHeldCount>
 800984e:	4602      	mov	r2, r0
 8009850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009852:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00f      	beq.n	800987c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800985c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985e:	3310      	adds	r3, #16
 8009860:	4618      	mov	r0, r3
 8009862:	f001 fa59 	bl	800ad18 <xTaskRemoveFromEventList>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d007      	beq.n	800987c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800986c:	4b54      	ldr	r3, [pc, #336]	@ (80099c0 <xQueueSemaphoreTake+0x21c>)
 800986e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800987c:	f002 fb0e 	bl	800be9c <vPortExitCritical>
				return pdPASS;
 8009880:	2301      	movs	r3, #1
 8009882:	e098      	b.n	80099b6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d112      	bne.n	80098b0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800988a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00b      	beq.n	80098a8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	617b      	str	r3, [r7, #20]
}
 80098a2:	bf00      	nop
 80098a4:	bf00      	nop
 80098a6:	e7fd      	b.n	80098a4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80098a8:	f002 faf8 	bl	800be9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098ac:	2300      	movs	r3, #0
 80098ae:	e082      	b.n	80099b6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d106      	bne.n	80098c4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098b6:	f107 030c 	add.w	r3, r7, #12
 80098ba:	4618      	mov	r0, r3
 80098bc:	f001 fab8 	bl	800ae30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098c0:	2301      	movs	r3, #1
 80098c2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098c4:	f002 faea 	bl	800be9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098c8:	f000 ff8c 	bl	800a7e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098cc:	f002 fab4 	bl	800be38 <vPortEnterCritical>
 80098d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098d6:	b25b      	sxtb	r3, r3
 80098d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098dc:	d103      	bne.n	80098e6 <xQueueSemaphoreTake+0x142>
 80098de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098ec:	b25b      	sxtb	r3, r3
 80098ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f2:	d103      	bne.n	80098fc <xQueueSemaphoreTake+0x158>
 80098f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098fc:	f002 face 	bl	800be9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009900:	463a      	mov	r2, r7
 8009902:	f107 030c 	add.w	r3, r7, #12
 8009906:	4611      	mov	r1, r2
 8009908:	4618      	mov	r0, r3
 800990a:	f001 faa7 	bl	800ae5c <xTaskCheckForTimeOut>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d132      	bne.n	800997a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009914:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009916:	f000 f94f 	bl	8009bb8 <prvIsQueueEmpty>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d026      	beq.n	800996e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d109      	bne.n	800993c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009928:	f002 fa86 	bl	800be38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800992c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	4618      	mov	r0, r3
 8009932:	f001 fcc1 	bl	800b2b8 <xTaskPriorityInherit>
 8009936:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009938:	f002 fab0 	bl	800be9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800993c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800993e:	3324      	adds	r3, #36	@ 0x24
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	4611      	mov	r1, r2
 8009944:	4618      	mov	r0, r3
 8009946:	f001 f9c1 	bl	800accc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800994a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800994c:	f000 f8e2 	bl	8009b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009950:	f000 ff56 	bl	800a800 <xTaskResumeAll>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	f47f af67 	bne.w	800982a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800995c:	4b18      	ldr	r3, [pc, #96]	@ (80099c0 <xQueueSemaphoreTake+0x21c>)
 800995e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	e75d      	b.n	800982a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800996e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009970:	f000 f8d0 	bl	8009b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009974:	f000 ff44 	bl	800a800 <xTaskResumeAll>
 8009978:	e757      	b.n	800982a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800997a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800997c:	f000 f8ca 	bl	8009b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009980:	f000 ff3e 	bl	800a800 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009984:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009986:	f000 f917 	bl	8009bb8 <prvIsQueueEmpty>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	f43f af4c 	beq.w	800982a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00d      	beq.n	80099b4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009998:	f002 fa4e 	bl	800be38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800999c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800999e:	f000 f811 	bl	80099c4 <prvGetDisinheritPriorityAfterTimeout>
 80099a2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80099a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80099aa:	4618      	mov	r0, r3
 80099ac:	f001 fd82 	bl	800b4b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80099b0:	f002 fa74 	bl	800be9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3738      	adds	r7, #56	@ 0x38
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	e000ed04 	.word	0xe000ed04

080099c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d006      	beq.n	80099e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f1c3 0307 	rsb	r3, r3, #7
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	e001      	b.n	80099e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80099e2:	2300      	movs	r3, #0
 80099e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80099e6:	68fb      	ldr	r3, [r7, #12]
	}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a00:	2300      	movs	r3, #0
 8009a02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10d      	bne.n	8009a2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d14d      	bne.n	8009ab6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f001 fcc0 	bl	800b3a4 <xTaskPriorityDisinherit>
 8009a24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	609a      	str	r2, [r3, #8]
 8009a2c:	e043      	b.n	8009ab6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d119      	bne.n	8009a68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6858      	ldr	r0, [r3, #4]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	68b9      	ldr	r1, [r7, #8]
 8009a40:	f004 fb6f 	bl	800e122 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a4c:	441a      	add	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d32b      	bcc.n	8009ab6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	605a      	str	r2, [r3, #4]
 8009a66:	e026      	b.n	8009ab6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	68d8      	ldr	r0, [r3, #12]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a70:	461a      	mov	r2, r3
 8009a72:	68b9      	ldr	r1, [r7, #8]
 8009a74:	f004 fb55 	bl	800e122 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	68da      	ldr	r2, [r3, #12]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a80:	425b      	negs	r3, r3
 8009a82:	441a      	add	r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	68da      	ldr	r2, [r3, #12]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d207      	bcs.n	8009aa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a9c:	425b      	negs	r3, r3
 8009a9e:	441a      	add	r2, r3
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d105      	bne.n	8009ab6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d002      	beq.n	8009ab6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009abe:	697b      	ldr	r3, [r7, #20]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3718      	adds	r7, #24
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d018      	beq.n	8009b0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68da      	ldr	r2, [r3, #12]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ae2:	441a      	add	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68da      	ldr	r2, [r3, #12]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d303      	bcc.n	8009afc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	68d9      	ldr	r1, [r3, #12]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b04:	461a      	mov	r2, r3
 8009b06:	6838      	ldr	r0, [r7, #0]
 8009b08:	f004 fb0b 	bl	800e122 <memcpy>
	}
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b1c:	f002 f98c 	bl	800be38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b28:	e011      	b.n	8009b4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d012      	beq.n	8009b58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	3324      	adds	r3, #36	@ 0x24
 8009b36:	4618      	mov	r0, r3
 8009b38:	f001 f8ee 	bl	800ad18 <xTaskRemoveFromEventList>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b42:	f001 f9ef 	bl	800af24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	dce9      	bgt.n	8009b2a <prvUnlockQueue+0x16>
 8009b56:	e000      	b.n	8009b5a <prvUnlockQueue+0x46>
					break;
 8009b58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	22ff      	movs	r2, #255	@ 0xff
 8009b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009b62:	f002 f99b 	bl	800be9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b66:	f002 f967 	bl	800be38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b72:	e011      	b.n	8009b98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d012      	beq.n	8009ba2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3310      	adds	r3, #16
 8009b80:	4618      	mov	r0, r3
 8009b82:	f001 f8c9 	bl	800ad18 <xTaskRemoveFromEventList>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b8c:	f001 f9ca 	bl	800af24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b90:	7bbb      	ldrb	r3, [r7, #14]
 8009b92:	3b01      	subs	r3, #1
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	dce9      	bgt.n	8009b74 <prvUnlockQueue+0x60>
 8009ba0:	e000      	b.n	8009ba4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ba2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	22ff      	movs	r2, #255	@ 0xff
 8009ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009bac:	f002 f976 	bl	800be9c <vPortExitCritical>
}
 8009bb0:	bf00      	nop
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bc0:	f002 f93a 	bl	800be38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d102      	bne.n	8009bd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	e001      	b.n	8009bd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bd6:	f002 f961 	bl	800be9c <vPortExitCritical>

	return xReturn;
 8009bda:	68fb      	ldr	r3, [r7, #12]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bec:	f002 f924 	bl	800be38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d102      	bne.n	8009c02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	e001      	b.n	8009c06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c02:	2300      	movs	r3, #0
 8009c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c06:	f002 f949 	bl	800be9c <vPortExitCritical>

	return xReturn;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08c      	sub	sp, #48	@ 0x30
 8009c18:	af02      	add	r7, sp, #8
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d111      	bne.n	8009c4a <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8009c26:	2301      	movs	r3, #1
 8009c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	d81d      	bhi.n	8009c6e <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8009c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c36:	f383 8811 	msr	BASEPRI, r3
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	61fb      	str	r3, [r7, #28]
}
 8009c44:	bf00      	nop
 8009c46:	bf00      	nop
 8009c48:	e7fd      	b.n	8009c46 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10b      	bne.n	8009c6e <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	61bb      	str	r3, [r7, #24]
}
 8009c68:	bf00      	nop
 8009c6a:	bf00      	nop
 8009c6c:	e7fd      	b.n	8009c6a <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d90b      	bls.n	8009c8e <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	617b      	str	r3, [r7, #20]
}
 8009c88:	bf00      	nop
 8009c8a:	bf00      	nop
 8009c8c:	e7fd      	b.n	8009c8a <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8009c94:	2301      	movs	r3, #1
 8009c96:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3324      	adds	r3, #36	@ 0x24
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f002 f9ea 	bl	800c07c <pvPortMalloc>
 8009ca8:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00a      	beq.n	8009cc6 <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8009cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	6a38      	ldr	r0, [r7, #32]
 8009cc2:	f000 fb0b 	bl	800a2dc <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
	}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3728      	adds	r7, #40	@ 0x28
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b087      	sub	sp, #28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10b      	bne.n	8009cfa <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8009ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce6:	f383 8811 	msr	BASEPRI, r3
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	60fb      	str	r3, [r7, #12]
}
 8009cf4:	bf00      	nop
 8009cf6:	bf00      	nop
 8009cf8:	e7fd      	b.n	8009cf6 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	689a      	ldr	r2, [r3, #8]
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4413      	add	r3, r2
 8009d04:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	3b01      	subs	r3, #1
 8009d14:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d304      	bcc.n	8009d2a <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	1ad3      	subs	r3, r2, r3
 8009d28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8009d2a:	697b      	ldr	r3, [r7, #20]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	371c      	adds	r7, #28
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b090      	sub	sp, #64	@ 0x40
 8009d3c:	af02      	add	r7, sp, #8
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
 8009d44:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10b      	bne.n	8009d70 <xStreamBufferSend+0x38>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009d6a:	bf00      	nop
 8009d6c:	bf00      	nop
 8009d6e:	e7fd      	b.n	8009d6c <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8009d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10b      	bne.n	8009d8e <xStreamBufferSend+0x56>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	623b      	str	r3, [r7, #32]
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	e7fd      	b.n	8009d8a <xStreamBufferSend+0x52>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d90:	7f1b      	ldrb	r3, [r3, #28]
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d012      	beq.n	8009dc0 <xStreamBufferSend+0x88>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8009da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d80b      	bhi.n	8009dc0 <xStreamBufferSend+0x88>
	__asm volatile
 8009da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dac:	f383 8811 	msr	BASEPRI, r3
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	61fb      	str	r3, [r7, #28]
}
 8009dba:	bf00      	nop
 8009dbc:	bf00      	nop
 8009dbe:	e7fd      	b.n	8009dbc <xStreamBufferSend+0x84>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d03f      	beq.n	8009e46 <xStreamBufferSend+0x10e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8009dc6:	f107 0310 	add.w	r3, r7, #16
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f001 f808 	bl	800ade0 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8009dd0:	f002 f832 	bl	800be38 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009dd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009dd6:	f7ff ff7b 	bl	8009cd0 <xStreamBufferSpacesAvailable>
 8009dda:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 8009ddc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d218      	bcs.n	8009e16 <xStreamBufferSend+0xde>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8009de4:	2000      	movs	r0, #0
 8009de6:	f001 fe6b 	bl	800bac0 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8009dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00b      	beq.n	8009e0a <xStreamBufferSend+0xd2>
	__asm volatile
 8009df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df6:	f383 8811 	msr	BASEPRI, r3
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	61bb      	str	r3, [r7, #24]
}
 8009e04:	bf00      	nop
 8009e06:	bf00      	nop
 8009e08:	e7fd      	b.n	8009e06 <xStreamBufferSend+0xce>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8009e0a:	f001 fa27 	bl	800b25c <xTaskGetCurrentTaskHandle>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e12:	615a      	str	r2, [r3, #20]
 8009e14:	e002      	b.n	8009e1c <xStreamBufferSend+0xe4>
				}
				else
				{
					taskEXIT_CRITICAL();
 8009e16:	f002 f841 	bl	800be9c <vPortExitCritical>
					break;
 8009e1a:	e014      	b.n	8009e46 <xStreamBufferSend+0x10e>
				}
			}
			taskEXIT_CRITICAL();
 8009e1c:	f002 f83e 	bl	800be9c <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	2200      	movs	r2, #0
 8009e24:	2100      	movs	r1, #0
 8009e26:	2000      	movs	r0, #0
 8009e28:	f001 fd28 	bl	800b87c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8009e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e2e:	2200      	movs	r2, #0
 8009e30:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8009e32:	463a      	mov	r2, r7
 8009e34:	f107 0310 	add.w	r3, r7, #16
 8009e38:	4611      	mov	r1, r2
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f001 f80e 	bl	800ae5c <xTaskCheckForTimeOut>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d0c4      	beq.n	8009dd0 <xStreamBufferSend+0x98>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8009e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d103      	bne.n	8009e54 <xStreamBufferSend+0x11c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009e4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009e4e:	f7ff ff3f 	bl	8009cd0 <xStreamBufferSpacesAvailable>
 8009e52:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8009e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	68b9      	ldr	r1, [r7, #8]
 8009e5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009e60:	f000 f823 	bl	8009eaa <prvWriteMessageToBuffer>
 8009e64:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8009e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d019      	beq.n	8009ea0 <xStreamBufferSend+0x168>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8009e6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009e6e:	f000 fa15 	bl	800a29c <prvBytesInBuffer>
 8009e72:	4602      	mov	r2, r0
 8009e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d311      	bcc.n	8009ea0 <xStreamBufferSend+0x168>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8009e7c:	f000 fcb2 	bl	800a7e4 <vTaskSuspendAll>
 8009e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d009      	beq.n	8009e9c <xStreamBufferSend+0x164>
 8009e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e8a:	6918      	ldr	r0, [r3, #16]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	2200      	movs	r2, #0
 8009e90:	2100      	movs	r1, #0
 8009e92:	f001 fd53 	bl	800b93c <xTaskGenericNotify>
 8009e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e98:	2200      	movs	r2, #0
 8009e9a:	611a      	str	r2, [r3, #16]
 8009e9c:	f000 fcb0 	bl	800a800 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8009ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3738      	adds	r7, #56	@ 0x38
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b086      	sub	sp, #24
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	60f8      	str	r0, [r7, #12]
 8009eb2:	60b9      	str	r1, [r7, #8]
 8009eb4:	607a      	str	r2, [r7, #4]
 8009eb6:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d102      	bne.n	8009ec4 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	617b      	str	r3, [r7, #20]
 8009ec2:	e01d      	b.n	8009f00 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	7f1b      	ldrb	r3, [r3, #28]
 8009ec8:	f003 0301 	and.w	r3, r3, #1
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d108      	bne.n	8009ee2 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	bf28      	it	cs
 8009edc:	4613      	movcs	r3, r2
 8009ede:	607b      	str	r3, [r7, #4]
 8009ee0:	e00e      	b.n	8009f00 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d308      	bcc.n	8009efc <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8009eea:	2301      	movs	r3, #1
 8009eec:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009eee:	1d3b      	adds	r3, r7, #4
 8009ef0:	2204      	movs	r2, #4
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f000 f8df 	bl	800a0b8 <prvWriteBytesToBuffer>
 8009efa:	e001      	b.n	8009f00 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8009efc:	2300      	movs	r3, #0
 8009efe:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d007      	beq.n	8009f16 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	68b9      	ldr	r1, [r7, #8]
 8009f0c:	68f8      	ldr	r0, [r7, #12]
 8009f0e:	f000 f8d3 	bl	800a0b8 <prvWriteBytesToBuffer>
 8009f12:	6138      	str	r0, [r7, #16]
 8009f14:	e001      	b.n	8009f1a <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8009f1a:	693b      	ldr	r3, [r7, #16]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b08e      	sub	sp, #56	@ 0x38
 8009f28:	af02      	add	r7, sp, #8
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8009f36:	2300      	movs	r3, #0
 8009f38:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10b      	bne.n	8009f58 <xStreamBufferReceive+0x34>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	61fb      	str	r3, [r7, #28]
}
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	e7fd      	b.n	8009f54 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10b      	bne.n	8009f76 <xStreamBufferReceive+0x52>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	61bb      	str	r3, [r7, #24]
}
 8009f70:	bf00      	nop
 8009f72:	bf00      	nop
 8009f74:	e7fd      	b.n	8009f72 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	7f1b      	ldrb	r3, [r3, #28]
 8009f7a:	f003 0301 	and.w	r3, r3, #1
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d002      	beq.n	8009f88 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009f82:	2304      	movs	r3, #4
 8009f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f86:	e001      	b.n	8009f8c <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d035      	beq.n	8009ffe <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8009f92:	f001 ff51 	bl	800be38 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009f96:	6a38      	ldr	r0, [r7, #32]
 8009f98:	f000 f980 	bl	800a29c <prvBytesInBuffer>
 8009f9c:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d817      	bhi.n	8009fd6 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	f001 fd8a 	bl	800bac0 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00b      	beq.n	8009fcc <xStreamBufferReceive+0xa8>
	__asm volatile
 8009fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	617b      	str	r3, [r7, #20]
}
 8009fc6:	bf00      	nop
 8009fc8:	bf00      	nop
 8009fca:	e7fd      	b.n	8009fc8 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8009fcc:	f001 f946 	bl	800b25c <xTaskGetCurrentTaskHandle>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009fd6:	f001 ff61 	bl	800be9c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8009fda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d811      	bhi.n	800a006 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	2000      	movs	r0, #0
 8009fea:	f001 fc47 	bl	800b87c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009ff4:	6a38      	ldr	r0, [r7, #32]
 8009ff6:	f000 f951 	bl	800a29c <prvBytesInBuffer>
 8009ffa:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009ffc:	e003      	b.n	800a006 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009ffe:	6a38      	ldr	r0, [r7, #32]
 800a000:	f000 f94c 	bl	800a29c <prvBytesInBuffer>
 800a004:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800a006:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d91d      	bls.n	800a04a <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800a00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	68b9      	ldr	r1, [r7, #8]
 800a018:	6a38      	ldr	r0, [r7, #32]
 800a01a:	f000 f81b 	bl	800a054 <prvReadMessageFromBuffer>
 800a01e:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800a020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a022:	2b00      	cmp	r3, #0
 800a024:	d011      	beq.n	800a04a <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800a026:	f000 fbdd 	bl	800a7e4 <vTaskSuspendAll>
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d009      	beq.n	800a046 <xStreamBufferReceive+0x122>
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	6958      	ldr	r0, [r3, #20]
 800a036:	2300      	movs	r3, #0
 800a038:	2200      	movs	r2, #0
 800a03a:	2100      	movs	r1, #0
 800a03c:	f001 fc7e 	bl	800b93c <xTaskGenericNotify>
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	2200      	movs	r2, #0
 800a044:	615a      	str	r2, [r3, #20]
 800a046:	f000 fbdb 	bl	800a800 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800a04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3730      	adds	r7, #48	@ 0x30
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b088      	sub	sp, #32
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800a062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a064:	2b00      	cmp	r3, #0
 800a066:	d019      	beq.n	800a09c <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800a06e:	f107 0110 	add.w	r1, r7, #16
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f000 f893 	bl	800a1a2 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800a088:	69fa      	ldr	r2, [r7, #28]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d907      	bls.n	800a0a0 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	69ba      	ldr	r2, [r7, #24]
 800a094:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	61fb      	str	r3, [r7, #28]
 800a09a:	e001      	b.n	800a0a0 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	69fa      	ldr	r2, [r7, #28]
 800a0a4:	68b9      	ldr	r1, [r7, #8]
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 f87b 	bl	800a1a2 <prvReadBytesFromBuffer>
 800a0ac:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800a0ae:	697b      	ldr	r3, [r7, #20]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3720      	adds	r7, #32
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08a      	sub	sp, #40	@ 0x28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10b      	bne.n	800a0e2 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	61fb      	str	r3, [r7, #28]
}
 800a0dc:	bf00      	nop
 800a0de:	bf00      	nop
 800a0e0:	e7fd      	b.n	800a0de <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	689a      	ldr	r2, [r3, #8]
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	bf28      	it	cs
 800a0f6:	4613      	movcs	r3, r2
 800a0f8:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800a0fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0fc:	6a3b      	ldr	r3, [r7, #32]
 800a0fe:	441a      	add	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	429a      	cmp	r2, r3
 800a106:	d90b      	bls.n	800a120 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 800a108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	61bb      	str	r3, [r7, #24]
}
 800a11a:	bf00      	nop
 800a11c:	bf00      	nop
 800a11e:	e7fd      	b.n	800a11c <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	699a      	ldr	r2, [r3, #24]
 800a124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a126:	4413      	add	r3, r2
 800a128:	6a3a      	ldr	r2, [r7, #32]
 800a12a:	68b9      	ldr	r1, [r7, #8]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f003 fff8 	bl	800e122 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	6a3b      	ldr	r3, [r7, #32]
 800a136:	429a      	cmp	r2, r3
 800a138:	d91d      	bls.n	800a176 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	1ad2      	subs	r2, r2, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	429a      	cmp	r2, r3
 800a146:	d90b      	bls.n	800a160 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	617b      	str	r3, [r7, #20]
}
 800a15a:	bf00      	nop
 800a15c:	bf00      	nop
 800a15e:	e7fd      	b.n	800a15c <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6998      	ldr	r0, [r3, #24]
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	6a3b      	ldr	r3, [r7, #32]
 800a168:	18d1      	adds	r1, r2, r3
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	6a3b      	ldr	r3, [r7, #32]
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	461a      	mov	r2, r3
 800a172:	f003 ffd6 	bl	800e122 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800a176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4413      	add	r3, r2
 800a17c:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a184:	429a      	cmp	r2, r3
 800a186:	d304      	bcc.n	800a192 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a196:	605a      	str	r2, [r3, #4]

	return xCount;
 800a198:	687b      	ldr	r3, [r7, #4]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3728      	adds	r7, #40	@ 0x28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b08a      	sub	sp, #40	@ 0x28
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	60f8      	str	r0, [r7, #12]
 800a1aa:	60b9      	str	r1, [r7, #8]
 800a1ac:	607a      	str	r2, [r7, #4]
 800a1ae:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	bf28      	it	cs
 800a1b8:	4613      	movcs	r3, r2
 800a1ba:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d067      	beq.n	800a292 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	689a      	ldr	r2, [r3, #8]
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	6a3a      	ldr	r2, [r7, #32]
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	bf28      	it	cs
 800a1d6:	4613      	movcs	r3, r2
 800a1d8:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800a1da:	69fa      	ldr	r2, [r7, #28]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d90b      	bls.n	800a1fa <prvReadBytesFromBuffer+0x58>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	61bb      	str	r3, [r7, #24]
}
 800a1f4:	bf00      	nop
 800a1f6:	bf00      	nop
 800a1f8:	e7fd      	b.n	800a1f6 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800a1fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	441a      	add	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	429a      	cmp	r2, r3
 800a206:	d90b      	bls.n	800a220 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	617b      	str	r3, [r7, #20]
}
 800a21a:	bf00      	nop
 800a21c:	bf00      	nop
 800a21e:	e7fd      	b.n	800a21c <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	699a      	ldr	r2, [r3, #24]
 800a224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a226:	4413      	add	r3, r2
 800a228:	69fa      	ldr	r2, [r7, #28]
 800a22a:	4619      	mov	r1, r3
 800a22c:	68b8      	ldr	r0, [r7, #8]
 800a22e:	f003 ff78 	bl	800e122 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800a232:	6a3a      	ldr	r2, [r7, #32]
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	429a      	cmp	r2, r3
 800a238:	d91a      	bls.n	800a270 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800a23a:	6a3a      	ldr	r2, [r7, #32]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d90b      	bls.n	800a25a <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	613b      	str	r3, [r7, #16]
}
 800a254:	bf00      	nop
 800a256:	bf00      	nop
 800a258:	e7fd      	b.n	800a256 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	18d0      	adds	r0, r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6999      	ldr	r1, [r3, #24]
 800a264:	6a3a      	ldr	r2, [r7, #32]
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	461a      	mov	r2, r3
 800a26c:	f003 ff59 	bl	800e122 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800a270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	4413      	add	r3, r2
 800a276:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a27e:	429a      	cmp	r2, r3
 800a280:	d304      	bcc.n	800a28c <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a290:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800a292:	6a3b      	ldr	r3, [r7, #32]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3728      	adds	r7, #40	@ 0x28
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	689a      	ldr	r2, [r3, #8]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d304      	bcc.n	800a2ce <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800a2ea:	2355      	movs	r3, #85	@ 0x55
 800a2ec:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	6979      	ldr	r1, [r7, #20]
 800a2f2:	68b8      	ldr	r0, [r7, #8]
 800a2f4:	f003 fe13 	bl	800df1e <memset>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d00b      	beq.n	800a318 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	613b      	str	r3, [r7, #16]
}
 800a312:	bf00      	nop
 800a314:	bf00      	nop
 800a316:	e7fd      	b.n	800a314 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800a318:	2224      	movs	r2, #36	@ 0x24
 800a31a:	2100      	movs	r1, #0
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f003 fdfe 	bl	800df1e <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	68ba      	ldr	r2, [r7, #8]
 800a326:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	683a      	ldr	r2, [r7, #0]
 800a332:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a33a:	771a      	strb	r2, [r3, #28]
}
 800a33c:	bf00      	nop
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a344:	b580      	push	{r7, lr}
 800a346:	b08c      	sub	sp, #48	@ 0x30
 800a348:	af04      	add	r7, sp, #16
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	603b      	str	r3, [r7, #0]
 800a350:	4613      	mov	r3, r2
 800a352:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a354:	88fb      	ldrh	r3, [r7, #6]
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4618      	mov	r0, r3
 800a35a:	f001 fe8f 	bl	800c07c <pvPortMalloc>
 800a35e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00e      	beq.n	800a384 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a366:	20c0      	movs	r0, #192	@ 0xc0
 800a368:	f001 fe88 	bl	800c07c <pvPortMalloc>
 800a36c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d003      	beq.n	800a37c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	631a      	str	r2, [r3, #48]	@ 0x30
 800a37a:	e005      	b.n	800a388 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a37c:	6978      	ldr	r0, [r7, #20]
 800a37e:	f001 ff4b 	bl	800c218 <vPortFree>
 800a382:	e001      	b.n	800a388 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a384:	2300      	movs	r3, #0
 800a386:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d013      	beq.n	800a3b6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a38e:	88fa      	ldrh	r2, [r7, #6]
 800a390:	2300      	movs	r3, #0
 800a392:	9303      	str	r3, [sp, #12]
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	9302      	str	r3, [sp, #8]
 800a398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a39a:	9301      	str	r3, [sp, #4]
 800a39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	68b9      	ldr	r1, [r7, #8]
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 f80f 	bl	800a3c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3aa:	69f8      	ldr	r0, [r7, #28]
 800a3ac:	f000 f8ba 	bl	800a524 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	61bb      	str	r3, [r7, #24]
 800a3b4:	e002      	b.n	800a3bc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a3bc:	69bb      	ldr	r3, [r7, #24]
	}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3720      	adds	r7, #32
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
	...

0800a3c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b088      	sub	sp, #32
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	607a      	str	r2, [r7, #4]
 800a3d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	461a      	mov	r2, r3
 800a3e0:	21a5      	movs	r1, #165	@ 0xa5
 800a3e2:	f003 fd9c 	bl	800df1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	f023 0307 	bic.w	r3, r3, #7
 800a3fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	f003 0307 	and.w	r3, r3, #7
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00b      	beq.n	800a422 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	617b      	str	r3, [r7, #20]
}
 800a41c:	bf00      	nop
 800a41e:	bf00      	nop
 800a420:	e7fd      	b.n	800a41e <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a424:	69ba      	ldr	r2, [r7, #24]
 800a426:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d01f      	beq.n	800a46e <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a42e:	2300      	movs	r3, #0
 800a430:	61fb      	str	r3, [r7, #28]
 800a432:	e012      	b.n	800a45a <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a434:	68ba      	ldr	r2, [r7, #8]
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	4413      	add	r3, r2
 800a43a:	7819      	ldrb	r1, [r3, #0]
 800a43c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	4413      	add	r3, r2
 800a442:	3334      	adds	r3, #52	@ 0x34
 800a444:	460a      	mov	r2, r1
 800a446:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a448:	68ba      	ldr	r2, [r7, #8]
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	4413      	add	r3, r2
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d006      	beq.n	800a462 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	3301      	adds	r3, #1
 800a458:	61fb      	str	r3, [r7, #28]
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	2b1f      	cmp	r3, #31
 800a45e:	d9e9      	bls.n	800a434 <prvInitialiseNewTask+0x6c>
 800a460:	e000      	b.n	800a464 <prvInitialiseNewTask+0x9c>
			{
				break;
 800a462:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a466:	2200      	movs	r2, #0
 800a468:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800a46c:	e003      	b.n	800a476 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a470:	2200      	movs	r2, #0
 800a472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a478:	2b06      	cmp	r3, #6
 800a47a:	d901      	bls.n	800a480 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a47c:	2306      	movs	r3, #6
 800a47e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a482:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a484:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a488:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a48a:	661a      	str	r2, [r3, #96]	@ 0x60
		pxNewTCB->uxMutexesHeld = 0;
 800a48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a48e:	2200      	movs	r2, #0
 800a490:	665a      	str	r2, [r3, #100]	@ 0x64
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a494:	3304      	adds	r3, #4
 800a496:	4618      	mov	r0, r3
 800a498:	f7fe fce8 	bl	8008e6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49e:	3318      	adds	r3, #24
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fe fce3 	bl	8008e6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ae:	f1c3 0207 	rsb	r2, r3, #7
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4ba:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4be:	2200      	movs	r2, #0
 800a4c0:	669a      	str	r2, [r3, #104]	@ 0x68
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d4:	336c      	adds	r3, #108	@ 0x6c
 800a4d6:	224c      	movs	r2, #76	@ 0x4c
 800a4d8:	2100      	movs	r1, #0
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f003 fd1f 	bl	800df1e <memset>
 800a4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e2:	4a0d      	ldr	r2, [pc, #52]	@ (800a518 <prvInitialiseNewTask+0x150>)
 800a4e4:	671a      	str	r2, [r3, #112]	@ 0x70
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e8:	4a0c      	ldr	r2, [pc, #48]	@ (800a51c <prvInitialiseNewTask+0x154>)
 800a4ea:	675a      	str	r2, [r3, #116]	@ 0x74
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ee:	4a0c      	ldr	r2, [pc, #48]	@ (800a520 <prvInitialiseNewTask+0x158>)
 800a4f0:	679a      	str	r2, [r3, #120]	@ 0x78
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	68f9      	ldr	r1, [r7, #12]
 800a4f6:	69b8      	ldr	r0, [r7, #24]
 800a4f8:	f001 fb6e 	bl	800bbd8 <pxPortInitialiseStack>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a500:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a504:	2b00      	cmp	r3, #0
 800a506:	d002      	beq.n	800a50e <prvInitialiseNewTask+0x146>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a50a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a50c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a50e:	bf00      	nop
 800a510:	3720      	adds	r7, #32
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	200078a0 	.word	0x200078a0
 800a51c:	20007908 	.word	0x20007908
 800a520:	20007970 	.word	0x20007970

0800a524 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a52c:	f001 fc84 	bl	800be38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a530:	4b2c      	ldr	r3, [pc, #176]	@ (800a5e4 <prvAddNewTaskToReadyList+0xc0>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	3301      	adds	r3, #1
 800a536:	4a2b      	ldr	r2, [pc, #172]	@ (800a5e4 <prvAddNewTaskToReadyList+0xc0>)
 800a538:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a53a:	4b2b      	ldr	r3, [pc, #172]	@ (800a5e8 <prvAddNewTaskToReadyList+0xc4>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d109      	bne.n	800a556 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a542:	4a29      	ldr	r2, [pc, #164]	@ (800a5e8 <prvAddNewTaskToReadyList+0xc4>)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a548:	4b26      	ldr	r3, [pc, #152]	@ (800a5e4 <prvAddNewTaskToReadyList+0xc0>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d110      	bne.n	800a572 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a550:	f000 fd0c 	bl	800af6c <prvInitialiseTaskLists>
 800a554:	e00d      	b.n	800a572 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a556:	4b25      	ldr	r3, [pc, #148]	@ (800a5ec <prvAddNewTaskToReadyList+0xc8>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d109      	bne.n	800a572 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a55e:	4b22      	ldr	r3, [pc, #136]	@ (800a5e8 <prvAddNewTaskToReadyList+0xc4>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a568:	429a      	cmp	r2, r3
 800a56a:	d802      	bhi.n	800a572 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a56c:	4a1e      	ldr	r2, [pc, #120]	@ (800a5e8 <prvAddNewTaskToReadyList+0xc4>)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a572:	4b1f      	ldr	r3, [pc, #124]	@ (800a5f0 <prvAddNewTaskToReadyList+0xcc>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	3301      	adds	r3, #1
 800a578:	4a1d      	ldr	r2, [pc, #116]	@ (800a5f0 <prvAddNewTaskToReadyList+0xcc>)
 800a57a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a57c:	4b1c      	ldr	r3, [pc, #112]	@ (800a5f0 <prvAddNewTaskToReadyList+0xcc>)
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	659a      	str	r2, [r3, #88]	@ 0x58
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a588:	2201      	movs	r2, #1
 800a58a:	409a      	lsls	r2, r3
 800a58c:	4b19      	ldr	r3, [pc, #100]	@ (800a5f4 <prvAddNewTaskToReadyList+0xd0>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4313      	orrs	r3, r2
 800a592:	4a18      	ldr	r2, [pc, #96]	@ (800a5f4 <prvAddNewTaskToReadyList+0xd0>)
 800a594:	6013      	str	r3, [r2, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a59a:	4613      	mov	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4a15      	ldr	r2, [pc, #84]	@ (800a5f8 <prvAddNewTaskToReadyList+0xd4>)
 800a5a4:	441a      	add	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	f7fe fc6a 	bl	8008e86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a5b2:	f001 fc73 	bl	800be9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a5ec <prvAddNewTaskToReadyList+0xc8>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00e      	beq.n	800a5dc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a5be:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e8 <prvAddNewTaskToReadyList+0xc4>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d207      	bcs.n	800a5dc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a5cc:	4b0b      	ldr	r3, [pc, #44]	@ (800a5fc <prvAddNewTaskToReadyList+0xd8>)
 800a5ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5dc:	bf00      	nop
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	20000ae4 	.word	0x20000ae4
 800a5e8:	200009e4 	.word	0x200009e4
 800a5ec:	20000af0 	.word	0x20000af0
 800a5f0:	20000b00 	.word	0x20000b00
 800a5f4:	20000aec 	.word	0x20000aec
 800a5f8:	200009e8 	.word	0x200009e8
 800a5fc:	e000ed04 	.word	0xe000ed04

0800a600 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a608:	2300      	movs	r3, #0
 800a60a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d018      	beq.n	800a644 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a612:	4b14      	ldr	r3, [pc, #80]	@ (800a664 <vTaskDelay+0x64>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00b      	beq.n	800a632 <vTaskDelay+0x32>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	60bb      	str	r3, [r7, #8]
}
 800a62c:	bf00      	nop
 800a62e:	bf00      	nop
 800a630:	e7fd      	b.n	800a62e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a632:	f000 f8d7 	bl	800a7e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a636:	2100      	movs	r1, #0
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f001 fa67 	bl	800bb0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a63e:	f000 f8df 	bl	800a800 <xTaskResumeAll>
 800a642:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d107      	bne.n	800a65a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a64a:	4b07      	ldr	r3, [pc, #28]	@ (800a668 <vTaskDelay+0x68>)
 800a64c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a650:	601a      	str	r2, [r3, #0]
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a65a:	bf00      	nop
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	20000b0c 	.word	0x20000b0c
 800a668:	e000ed04 	.word	0xe000ed04

0800a66c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b088      	sub	sp, #32
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10b      	bne.n	800a696 <eTaskGetState+0x2a>
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	60bb      	str	r3, [r7, #8]
}
 800a690:	bf00      	nop
 800a692:	bf00      	nop
 800a694:	e7fd      	b.n	800a692 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800a696:	4b24      	ldr	r3, [pc, #144]	@ (800a728 <eTaskGetState+0xbc>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	69ba      	ldr	r2, [r7, #24]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d102      	bne.n	800a6a6 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	77fb      	strb	r3, [r7, #31]
 800a6a4:	e03a      	b.n	800a71c <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800a6a6:	f001 fbc7 	bl	800be38 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800a6b0:	4b1e      	ldr	r3, [pc, #120]	@ (800a72c <eTaskGetState+0xc0>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800a6b6:	4b1e      	ldr	r3, [pc, #120]	@ (800a730 <eTaskGetState+0xc4>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800a6bc:	f001 fbee 	bl	800be9c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d003      	beq.n	800a6d0 <eTaskGetState+0x64>
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d102      	bne.n	800a6d6 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	77fb      	strb	r3, [r7, #31]
 800a6d4:	e022      	b.n	800a71c <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	4a16      	ldr	r2, [pc, #88]	@ (800a734 <eTaskGetState+0xc8>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d112      	bne.n	800a704 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10b      	bne.n	800a6fe <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d102      	bne.n	800a6f8 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	77fb      	strb	r3, [r7, #31]
 800a6f6:	e011      	b.n	800a71c <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	77fb      	strb	r3, [r7, #31]
 800a6fc:	e00e      	b.n	800a71c <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800a6fe:	2302      	movs	r3, #2
 800a700:	77fb      	strb	r3, [r7, #31]
 800a702:	e00b      	b.n	800a71c <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	4a0c      	ldr	r2, [pc, #48]	@ (800a738 <eTaskGetState+0xcc>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d002      	beq.n	800a712 <eTaskGetState+0xa6>
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d102      	bne.n	800a718 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800a712:	2304      	movs	r3, #4
 800a714:	77fb      	strb	r3, [r7, #31]
 800a716:	e001      	b.n	800a71c <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800a718:	2301      	movs	r3, #1
 800a71a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800a71c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a71e:	4618      	mov	r0, r3
 800a720:	3720      	adds	r7, #32
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	200009e4 	.word	0x200009e4
 800a72c:	20000a9c 	.word	0x20000a9c
 800a730:	20000aa0 	.word	0x20000aa0
 800a734:	20000ad0 	.word	0x20000ad0
 800a738:	20000ab8 	.word	0x20000ab8

0800a73c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a742:	4b20      	ldr	r3, [pc, #128]	@ (800a7c4 <vTaskStartScheduler+0x88>)
 800a744:	9301      	str	r3, [sp, #4]
 800a746:	2300      	movs	r3, #0
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	2300      	movs	r3, #0
 800a74c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a750:	491d      	ldr	r1, [pc, #116]	@ (800a7c8 <vTaskStartScheduler+0x8c>)
 800a752:	481e      	ldr	r0, [pc, #120]	@ (800a7cc <vTaskStartScheduler+0x90>)
 800a754:	f7ff fdf6 	bl	800a344 <xTaskCreate>
 800a758:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d11d      	bne.n	800a79c <vTaskStartScheduler+0x60>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	60bb      	str	r3, [r7, #8]
}
 800a772:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a774:	4b16      	ldr	r3, [pc, #88]	@ (800a7d0 <vTaskStartScheduler+0x94>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	336c      	adds	r3, #108	@ 0x6c
 800a77a:	4a16      	ldr	r2, [pc, #88]	@ (800a7d4 <vTaskStartScheduler+0x98>)
 800a77c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a77e:	4b16      	ldr	r3, [pc, #88]	@ (800a7d8 <vTaskStartScheduler+0x9c>)
 800a780:	f04f 32ff 	mov.w	r2, #4294967295
 800a784:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a786:	4b15      	ldr	r3, [pc, #84]	@ (800a7dc <vTaskStartScheduler+0xa0>)
 800a788:	2201      	movs	r2, #1
 800a78a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a78c:	4b14      	ldr	r3, [pc, #80]	@ (800a7e0 <vTaskStartScheduler+0xa4>)
 800a78e:	2200      	movs	r2, #0
 800a790:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a792:	f7f6 fdba 	bl	800130a <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a796:	f001 faab 	bl	800bcf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a79a:	e00f      	b.n	800a7bc <vTaskStartScheduler+0x80>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a2:	d10b      	bne.n	800a7bc <vTaskStartScheduler+0x80>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	607b      	str	r3, [r7, #4]
}
 800a7b6:	bf00      	nop
 800a7b8:	bf00      	nop
 800a7ba:	e7fd      	b.n	800a7b8 <vTaskStartScheduler+0x7c>
}
 800a7bc:	bf00      	nop
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	20000b08 	.word	0x20000b08
 800a7c8:	08010790 	.word	0x08010790
 800a7cc:	0800af3d 	.word	0x0800af3d
 800a7d0:	200009e4 	.word	0x200009e4
 800a7d4:	20000428 	.word	0x20000428
 800a7d8:	20000b04 	.word	0x20000b04
 800a7dc:	20000af0 	.word	0x20000af0
 800a7e0:	20000ae8 	.word	0x20000ae8

0800a7e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a7e8:	4b04      	ldr	r3, [pc, #16]	@ (800a7fc <vTaskSuspendAll+0x18>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	4a03      	ldr	r2, [pc, #12]	@ (800a7fc <vTaskSuspendAll+0x18>)
 800a7f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a7f2:	bf00      	nop
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	20000b0c 	.word	0x20000b0c

0800a800 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a806:	2300      	movs	r3, #0
 800a808:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a80e:	4b42      	ldr	r3, [pc, #264]	@ (800a918 <xTaskResumeAll+0x118>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10b      	bne.n	800a82e <xTaskResumeAll+0x2e>
	__asm volatile
 800a816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	603b      	str	r3, [r7, #0]
}
 800a828:	bf00      	nop
 800a82a:	bf00      	nop
 800a82c:	e7fd      	b.n	800a82a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a82e:	f001 fb03 	bl	800be38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a832:	4b39      	ldr	r3, [pc, #228]	@ (800a918 <xTaskResumeAll+0x118>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	3b01      	subs	r3, #1
 800a838:	4a37      	ldr	r2, [pc, #220]	@ (800a918 <xTaskResumeAll+0x118>)
 800a83a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a83c:	4b36      	ldr	r3, [pc, #216]	@ (800a918 <xTaskResumeAll+0x118>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d161      	bne.n	800a908 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a844:	4b35      	ldr	r3, [pc, #212]	@ (800a91c <xTaskResumeAll+0x11c>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d05d      	beq.n	800a908 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a84c:	e02e      	b.n	800a8ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a84e:	4b34      	ldr	r3, [pc, #208]	@ (800a920 <xTaskResumeAll+0x120>)
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3318      	adds	r3, #24
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fb70 	bl	8008f40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	3304      	adds	r3, #4
 800a864:	4618      	mov	r0, r3
 800a866:	f7fe fb6b 	bl	8008f40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a86e:	2201      	movs	r2, #1
 800a870:	409a      	lsls	r2, r3
 800a872:	4b2c      	ldr	r3, [pc, #176]	@ (800a924 <xTaskResumeAll+0x124>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4313      	orrs	r3, r2
 800a878:	4a2a      	ldr	r2, [pc, #168]	@ (800a924 <xTaskResumeAll+0x124>)
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a880:	4613      	mov	r3, r2
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4a27      	ldr	r2, [pc, #156]	@ (800a928 <xTaskResumeAll+0x128>)
 800a88a:	441a      	add	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	3304      	adds	r3, #4
 800a890:	4619      	mov	r1, r3
 800a892:	4610      	mov	r0, r2
 800a894:	f7fe faf7 	bl	8008e86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a89c:	4b23      	ldr	r3, [pc, #140]	@ (800a92c <xTaskResumeAll+0x12c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d302      	bcc.n	800a8ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a8a6:	4b22      	ldr	r3, [pc, #136]	@ (800a930 <xTaskResumeAll+0x130>)
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8ac:	4b1c      	ldr	r3, [pc, #112]	@ (800a920 <xTaskResumeAll+0x120>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1cc      	bne.n	800a84e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a8ba:	f000 fcaf 	bl	800b21c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a8be:	4b1d      	ldr	r3, [pc, #116]	@ (800a934 <xTaskResumeAll+0x134>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d010      	beq.n	800a8ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a8ca:	f000 f8c7 	bl	800aa5c <xTaskIncrementTick>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d002      	beq.n	800a8da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a8d4:	4b16      	ldr	r3, [pc, #88]	@ (800a930 <xTaskResumeAll+0x130>)
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1f1      	bne.n	800a8ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a8e6:	4b13      	ldr	r3, [pc, #76]	@ (800a934 <xTaskResumeAll+0x134>)
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a8ec:	4b10      	ldr	r3, [pc, #64]	@ (800a930 <xTaskResumeAll+0x130>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d009      	beq.n	800a908 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a8f8:	4b0f      	ldr	r3, [pc, #60]	@ (800a938 <xTaskResumeAll+0x138>)
 800a8fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8fe:	601a      	str	r2, [r3, #0]
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a908:	f001 fac8 	bl	800be9c <vPortExitCritical>

	return xAlreadyYielded;
 800a90c:	68bb      	ldr	r3, [r7, #8]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	20000b0c 	.word	0x20000b0c
 800a91c:	20000ae4 	.word	0x20000ae4
 800a920:	20000aa4 	.word	0x20000aa4
 800a924:	20000aec 	.word	0x20000aec
 800a928:	200009e8 	.word	0x200009e8
 800a92c:	200009e4 	.word	0x200009e4
 800a930:	20000af8 	.word	0x20000af8
 800a934:	20000af4 	.word	0x20000af4
 800a938:	e000ed04 	.word	0xe000ed04

0800a93c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800a948:	2300      	movs	r3, #0
 800a94a:	617b      	str	r3, [r7, #20]
 800a94c:	2307      	movs	r3, #7
 800a94e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800a950:	f7ff ff48 	bl	800a7e4 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800a954:	4b3b      	ldr	r3, [pc, #236]	@ (800aa44 <uxTaskGetSystemState+0x108>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d36a      	bcc.n	800aa34 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	3b01      	subs	r3, #1
 800a962:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800a964:	697a      	ldr	r2, [r7, #20]
 800a966:	4613      	mov	r3, r2
 800a968:	00db      	lsls	r3, r3, #3
 800a96a:	4413      	add	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	461a      	mov	r2, r3
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	1898      	adds	r0, r3, r2
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	4613      	mov	r3, r2
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	4413      	add	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4a32      	ldr	r2, [pc, #200]	@ (800aa48 <uxTaskGetSystemState+0x10c>)
 800a980:	4413      	add	r3, r2
 800a982:	2201      	movs	r2, #1
 800a984:	4619      	mov	r1, r3
 800a986:	f000 fbc5 	bl	800b114 <prvListTasksWithinSingleList>
 800a98a:	4602      	mov	r2, r0
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	4413      	add	r3, r2
 800a990:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1e2      	bne.n	800a95e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800a998:	697a      	ldr	r2, [r7, #20]
 800a99a:	4613      	mov	r3, r2
 800a99c:	00db      	lsls	r3, r3, #3
 800a99e:	4413      	add	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	4a28      	ldr	r2, [pc, #160]	@ (800aa4c <uxTaskGetSystemState+0x110>)
 800a9aa:	6811      	ldr	r1, [r2, #0]
 800a9ac:	2202      	movs	r2, #2
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 fbb0 	bl	800b114 <prvListTasksWithinSingleList>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800a9bc:	697a      	ldr	r2, [r7, #20]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	00db      	lsls	r3, r3, #3
 800a9c2:	4413      	add	r3, r2
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	4a20      	ldr	r2, [pc, #128]	@ (800aa50 <uxTaskGetSystemState+0x114>)
 800a9ce:	6811      	ldr	r1, [r2, #0]
 800a9d0:	2202      	movs	r2, #2
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 fb9e 	bl	800b114 <prvListTasksWithinSingleList>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	4413      	add	r3, r2
 800a9de:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	00db      	lsls	r3, r3, #3
 800a9e6:	4413      	add	r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	2204      	movs	r2, #4
 800a9f2:	4918      	ldr	r1, [pc, #96]	@ (800aa54 <uxTaskGetSystemState+0x118>)
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f000 fb8d 	bl	800b114 <prvListTasksWithinSingleList>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	4413      	add	r3, r2
 800aa00:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	4613      	mov	r3, r2
 800aa06:	00db      	lsls	r3, r3, #3
 800aa08:	4413      	add	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	4413      	add	r3, r2
 800aa12:	2203      	movs	r2, #3
 800aa14:	4910      	ldr	r1, [pc, #64]	@ (800aa58 <uxTaskGetSystemState+0x11c>)
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 fb7c 	bl	800b114 <prvListTasksWithinSingleList>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	4413      	add	r3, r2
 800aa22:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d004      	beq.n	800aa34 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800aa2a:	f7f6 fc75 	bl	8001318 <getRunTimeCounterValue>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800aa34:	f7ff fee4 	bl	800a800 <xTaskResumeAll>

		return uxTask;
 800aa38:	697b      	ldr	r3, [r7, #20]
	}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20000ae4 	.word	0x20000ae4
 800aa48:	200009e8 	.word	0x200009e8
 800aa4c:	20000a9c 	.word	0x20000a9c
 800aa50:	20000aa0 	.word	0x20000aa0
 800aa54:	20000ab8 	.word	0x20000ab8
 800aa58:	20000ad0 	.word	0x20000ad0

0800aa5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa62:	2300      	movs	r3, #0
 800aa64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa66:	4b4f      	ldr	r3, [pc, #316]	@ (800aba4 <xTaskIncrementTick+0x148>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f040 808f 	bne.w	800ab8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa70:	4b4d      	ldr	r3, [pc, #308]	@ (800aba8 <xTaskIncrementTick+0x14c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa78:	4a4b      	ldr	r2, [pc, #300]	@ (800aba8 <xTaskIncrementTick+0x14c>)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d121      	bne.n	800aac8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa84:	4b49      	ldr	r3, [pc, #292]	@ (800abac <xTaskIncrementTick+0x150>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00b      	beq.n	800aaa6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	603b      	str	r3, [r7, #0]
}
 800aaa0:	bf00      	nop
 800aaa2:	bf00      	nop
 800aaa4:	e7fd      	b.n	800aaa2 <xTaskIncrementTick+0x46>
 800aaa6:	4b41      	ldr	r3, [pc, #260]	@ (800abac <xTaskIncrementTick+0x150>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	4b40      	ldr	r3, [pc, #256]	@ (800abb0 <xTaskIncrementTick+0x154>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a3e      	ldr	r2, [pc, #248]	@ (800abac <xTaskIncrementTick+0x150>)
 800aab2:	6013      	str	r3, [r2, #0]
 800aab4:	4a3e      	ldr	r2, [pc, #248]	@ (800abb0 <xTaskIncrementTick+0x154>)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6013      	str	r3, [r2, #0]
 800aaba:	4b3e      	ldr	r3, [pc, #248]	@ (800abb4 <xTaskIncrementTick+0x158>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3301      	adds	r3, #1
 800aac0:	4a3c      	ldr	r2, [pc, #240]	@ (800abb4 <xTaskIncrementTick+0x158>)
 800aac2:	6013      	str	r3, [r2, #0]
 800aac4:	f000 fbaa 	bl	800b21c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aac8:	4b3b      	ldr	r3, [pc, #236]	@ (800abb8 <xTaskIncrementTick+0x15c>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d348      	bcc.n	800ab64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aad2:	4b36      	ldr	r3, [pc, #216]	@ (800abac <xTaskIncrementTick+0x150>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d104      	bne.n	800aae6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aadc:	4b36      	ldr	r3, [pc, #216]	@ (800abb8 <xTaskIncrementTick+0x15c>)
 800aade:	f04f 32ff 	mov.w	r2, #4294967295
 800aae2:	601a      	str	r2, [r3, #0]
					break;
 800aae4:	e03e      	b.n	800ab64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae6:	4b31      	ldr	r3, [pc, #196]	@ (800abac <xTaskIncrementTick+0x150>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d203      	bcs.n	800ab06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aafe:	4a2e      	ldr	r2, [pc, #184]	@ (800abb8 <xTaskIncrementTick+0x15c>)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab04:	e02e      	b.n	800ab64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe fa18 	bl	8008f40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d004      	beq.n	800ab22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	3318      	adds	r3, #24
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fe fa0f 	bl	8008f40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab26:	2201      	movs	r2, #1
 800ab28:	409a      	lsls	r2, r3
 800ab2a:	4b24      	ldr	r3, [pc, #144]	@ (800abbc <xTaskIncrementTick+0x160>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	4a22      	ldr	r2, [pc, #136]	@ (800abbc <xTaskIncrementTick+0x160>)
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	4a1f      	ldr	r2, [pc, #124]	@ (800abc0 <xTaskIncrementTick+0x164>)
 800ab42:	441a      	add	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	3304      	adds	r3, #4
 800ab48:	4619      	mov	r1, r3
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	f7fe f99b 	bl	8008e86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab54:	4b1b      	ldr	r3, [pc, #108]	@ (800abc4 <xTaskIncrementTick+0x168>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d3b9      	bcc.n	800aad2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab62:	e7b6      	b.n	800aad2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab64:	4b17      	ldr	r3, [pc, #92]	@ (800abc4 <xTaskIncrementTick+0x168>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab6a:	4915      	ldr	r1, [pc, #84]	@ (800abc0 <xTaskIncrementTick+0x164>)
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	440b      	add	r3, r1
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d901      	bls.n	800ab80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab80:	4b11      	ldr	r3, [pc, #68]	@ (800abc8 <xTaskIncrementTick+0x16c>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d007      	beq.n	800ab98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	617b      	str	r3, [r7, #20]
 800ab8c:	e004      	b.n	800ab98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab8e:	4b0f      	ldr	r3, [pc, #60]	@ (800abcc <xTaskIncrementTick+0x170>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3301      	adds	r3, #1
 800ab94:	4a0d      	ldr	r2, [pc, #52]	@ (800abcc <xTaskIncrementTick+0x170>)
 800ab96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab98:	697b      	ldr	r3, [r7, #20]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3718      	adds	r7, #24
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	20000b0c 	.word	0x20000b0c
 800aba8:	20000ae8 	.word	0x20000ae8
 800abac:	20000a9c 	.word	0x20000a9c
 800abb0:	20000aa0 	.word	0x20000aa0
 800abb4:	20000afc 	.word	0x20000afc
 800abb8:	20000b04 	.word	0x20000b04
 800abbc:	20000aec 	.word	0x20000aec
 800abc0:	200009e8 	.word	0x200009e8
 800abc4:	200009e4 	.word	0x200009e4
 800abc8:	20000af8 	.word	0x20000af8
 800abcc:	20000af4 	.word	0x20000af4

0800abd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abd6:	4b35      	ldr	r3, [pc, #212]	@ (800acac <vTaskSwitchContext+0xdc>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abde:	4b34      	ldr	r3, [pc, #208]	@ (800acb0 <vTaskSwitchContext+0xe0>)
 800abe0:	2201      	movs	r2, #1
 800abe2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abe4:	e05e      	b.n	800aca4 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800abe6:	4b32      	ldr	r3, [pc, #200]	@ (800acb0 <vTaskSwitchContext+0xe0>)
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800abec:	f7f6 fb94 	bl	8001318 <getRunTimeCounterValue>
 800abf0:	4603      	mov	r3, r0
 800abf2:	4a30      	ldr	r2, [pc, #192]	@ (800acb4 <vTaskSwitchContext+0xe4>)
 800abf4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800abf6:	4b2f      	ldr	r3, [pc, #188]	@ (800acb4 <vTaskSwitchContext+0xe4>)
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	4b2f      	ldr	r3, [pc, #188]	@ (800acb8 <vTaskSwitchContext+0xe8>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d909      	bls.n	800ac16 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ac02:	4b2e      	ldr	r3, [pc, #184]	@ (800acbc <vTaskSwitchContext+0xec>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800ac08:	4a2a      	ldr	r2, [pc, #168]	@ (800acb4 <vTaskSwitchContext+0xe4>)
 800ac0a:	6810      	ldr	r0, [r2, #0]
 800ac0c:	4a2a      	ldr	r2, [pc, #168]	@ (800acb8 <vTaskSwitchContext+0xe8>)
 800ac0e:	6812      	ldr	r2, [r2, #0]
 800ac10:	1a82      	subs	r2, r0, r2
 800ac12:	440a      	add	r2, r1
 800ac14:	669a      	str	r2, [r3, #104]	@ 0x68
			ulTaskSwitchedInTime = ulTotalRunTime;
 800ac16:	4b27      	ldr	r3, [pc, #156]	@ (800acb4 <vTaskSwitchContext+0xe4>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a27      	ldr	r2, [pc, #156]	@ (800acb8 <vTaskSwitchContext+0xe8>)
 800ac1c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac1e:	4b28      	ldr	r3, [pc, #160]	@ (800acc0 <vTaskSwitchContext+0xf0>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	fab3 f383 	clz	r3, r3
 800ac2a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	f1c3 031f 	rsb	r3, r3, #31
 800ac32:	617b      	str	r3, [r7, #20]
 800ac34:	4923      	ldr	r1, [pc, #140]	@ (800acc4 <vTaskSwitchContext+0xf4>)
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	440b      	add	r3, r1
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d10b      	bne.n	800ac60 <vTaskSwitchContext+0x90>
	__asm volatile
 800ac48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	607b      	str	r3, [r7, #4]
}
 800ac5a:	bf00      	nop
 800ac5c:	bf00      	nop
 800ac5e:	e7fd      	b.n	800ac5c <vTaskSwitchContext+0x8c>
 800ac60:	697a      	ldr	r2, [r7, #20]
 800ac62:	4613      	mov	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4413      	add	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4a16      	ldr	r2, [pc, #88]	@ (800acc4 <vTaskSwitchContext+0xf4>)
 800ac6c:	4413      	add	r3, r2
 800ac6e:	613b      	str	r3, [r7, #16]
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	605a      	str	r2, [r3, #4]
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	685a      	ldr	r2, [r3, #4]
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	3308      	adds	r3, #8
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d104      	bne.n	800ac90 <vTaskSwitchContext+0xc0>
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	605a      	str	r2, [r3, #4]
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	4a09      	ldr	r2, [pc, #36]	@ (800acbc <vTaskSwitchContext+0xec>)
 800ac98:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac9a:	4b08      	ldr	r3, [pc, #32]	@ (800acbc <vTaskSwitchContext+0xec>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	336c      	adds	r3, #108	@ 0x6c
 800aca0:	4a09      	ldr	r2, [pc, #36]	@ (800acc8 <vTaskSwitchContext+0xf8>)
 800aca2:	6013      	str	r3, [r2, #0]
}
 800aca4:	bf00      	nop
 800aca6:	3718      	adds	r7, #24
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	20000b0c 	.word	0x20000b0c
 800acb0:	20000af8 	.word	0x20000af8
 800acb4:	20000b14 	.word	0x20000b14
 800acb8:	20000b10 	.word	0x20000b10
 800acbc:	200009e4 	.word	0x200009e4
 800acc0:	20000aec 	.word	0x20000aec
 800acc4:	200009e8 	.word	0x200009e8
 800acc8:	20000428 	.word	0x20000428

0800accc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10b      	bne.n	800acf4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800acdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	60fb      	str	r3, [r7, #12]
}
 800acee:	bf00      	nop
 800acf0:	bf00      	nop
 800acf2:	e7fd      	b.n	800acf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acf4:	4b07      	ldr	r3, [pc, #28]	@ (800ad14 <vTaskPlaceOnEventList+0x48>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	3318      	adds	r3, #24
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7fe f8e6 	bl	8008ece <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad02:	2101      	movs	r1, #1
 800ad04:	6838      	ldr	r0, [r7, #0]
 800ad06:	f000 ff01 	bl	800bb0c <prvAddCurrentTaskToDelayedList>
}
 800ad0a:	bf00      	nop
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	200009e4 	.word	0x200009e4

0800ad18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b086      	sub	sp, #24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10b      	bne.n	800ad46 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	60fb      	str	r3, [r7, #12]
}
 800ad40:	bf00      	nop
 800ad42:	bf00      	nop
 800ad44:	e7fd      	b.n	800ad42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	3318      	adds	r3, #24
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fe f8f8 	bl	8008f40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad50:	4b1d      	ldr	r3, [pc, #116]	@ (800adc8 <xTaskRemoveFromEventList+0xb0>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d11c      	bne.n	800ad92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	3304      	adds	r3, #4
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7fe f8ef 	bl	8008f40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad66:	2201      	movs	r2, #1
 800ad68:	409a      	lsls	r2, r3
 800ad6a:	4b18      	ldr	r3, [pc, #96]	@ (800adcc <xTaskRemoveFromEventList+0xb4>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	4a16      	ldr	r2, [pc, #88]	@ (800adcc <xTaskRemoveFromEventList+0xb4>)
 800ad72:	6013      	str	r3, [r2, #0]
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad78:	4613      	mov	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4a13      	ldr	r2, [pc, #76]	@ (800add0 <xTaskRemoveFromEventList+0xb8>)
 800ad82:	441a      	add	r2, r3
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	3304      	adds	r3, #4
 800ad88:	4619      	mov	r1, r3
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	f7fe f87b 	bl	8008e86 <vListInsertEnd>
 800ad90:	e005      	b.n	800ad9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	3318      	adds	r3, #24
 800ad96:	4619      	mov	r1, r3
 800ad98:	480e      	ldr	r0, [pc, #56]	@ (800add4 <xTaskRemoveFromEventList+0xbc>)
 800ad9a:	f7fe f874 	bl	8008e86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ada2:	4b0d      	ldr	r3, [pc, #52]	@ (800add8 <xTaskRemoveFromEventList+0xc0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d905      	bls.n	800adb8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800adac:	2301      	movs	r3, #1
 800adae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800adb0:	4b0a      	ldr	r3, [pc, #40]	@ (800addc <xTaskRemoveFromEventList+0xc4>)
 800adb2:	2201      	movs	r2, #1
 800adb4:	601a      	str	r2, [r3, #0]
 800adb6:	e001      	b.n	800adbc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800adb8:	2300      	movs	r3, #0
 800adba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800adbc:	697b      	ldr	r3, [r7, #20]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3718      	adds	r7, #24
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	20000b0c 	.word	0x20000b0c
 800adcc:	20000aec 	.word	0x20000aec
 800add0:	200009e8 	.word	0x200009e8
 800add4:	20000aa4 	.word	0x20000aa4
 800add8:	200009e4 	.word	0x200009e4
 800addc:	20000af8 	.word	0x20000af8

0800ade0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10b      	bne.n	800ae06 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800adee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	60fb      	str	r3, [r7, #12]
}
 800ae00:	bf00      	nop
 800ae02:	bf00      	nop
 800ae04:	e7fd      	b.n	800ae02 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800ae06:	f001 f817 	bl	800be38 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae0a:	4b07      	ldr	r3, [pc, #28]	@ (800ae28 <vTaskSetTimeOutState+0x48>)
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800ae12:	4b06      	ldr	r3, [pc, #24]	@ (800ae2c <vTaskSetTimeOutState+0x4c>)
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800ae1a:	f001 f83f 	bl	800be9c <vPortExitCritical>
}
 800ae1e:	bf00      	nop
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20000afc 	.word	0x20000afc
 800ae2c:	20000ae8 	.word	0x20000ae8

0800ae30 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae38:	4b06      	ldr	r3, [pc, #24]	@ (800ae54 <vTaskInternalSetTimeOutState+0x24>)
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae40:	4b05      	ldr	r3, [pc, #20]	@ (800ae58 <vTaskInternalSetTimeOutState+0x28>)
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	605a      	str	r2, [r3, #4]
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	20000afc 	.word	0x20000afc
 800ae58:	20000ae8 	.word	0x20000ae8

0800ae5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10b      	bne.n	800ae84 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ae6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae70:	f383 8811 	msr	BASEPRI, r3
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	613b      	str	r3, [r7, #16]
}
 800ae7e:	bf00      	nop
 800ae80:	bf00      	nop
 800ae82:	e7fd      	b.n	800ae80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10b      	bne.n	800aea2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ae8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae8e:	f383 8811 	msr	BASEPRI, r3
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	60fb      	str	r3, [r7, #12]
}
 800ae9c:	bf00      	nop
 800ae9e:	bf00      	nop
 800aea0:	e7fd      	b.n	800ae9e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800aea2:	f000 ffc9 	bl	800be38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aea6:	4b1d      	ldr	r3, [pc, #116]	@ (800af1c <xTaskCheckForTimeOut+0xc0>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	69ba      	ldr	r2, [r7, #24]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aebe:	d102      	bne.n	800aec6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aec0:	2300      	movs	r3, #0
 800aec2:	61fb      	str	r3, [r7, #28]
 800aec4:	e023      	b.n	800af0e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	4b15      	ldr	r3, [pc, #84]	@ (800af20 <xTaskCheckForTimeOut+0xc4>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d007      	beq.n	800aee2 <xTaskCheckForTimeOut+0x86>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	69ba      	ldr	r2, [r7, #24]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d302      	bcc.n	800aee2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aedc:	2301      	movs	r3, #1
 800aede:	61fb      	str	r3, [r7, #28]
 800aee0:	e015      	b.n	800af0e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d20b      	bcs.n	800af04 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	1ad2      	subs	r2, r2, r3
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f7ff ff99 	bl	800ae30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aefe:	2300      	movs	r3, #0
 800af00:	61fb      	str	r3, [r7, #28]
 800af02:	e004      	b.n	800af0e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	2200      	movs	r2, #0
 800af08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af0a:	2301      	movs	r3, #1
 800af0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af0e:	f000 ffc5 	bl	800be9c <vPortExitCritical>

	return xReturn;
 800af12:	69fb      	ldr	r3, [r7, #28]
}
 800af14:	4618      	mov	r0, r3
 800af16:	3720      	adds	r7, #32
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	20000ae8 	.word	0x20000ae8
 800af20:	20000afc 	.word	0x20000afc

0800af24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af24:	b480      	push	{r7}
 800af26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af28:	4b03      	ldr	r3, [pc, #12]	@ (800af38 <vTaskMissedYield+0x14>)
 800af2a:	2201      	movs	r2, #1
 800af2c:	601a      	str	r2, [r3, #0]
}
 800af2e:	bf00      	nop
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	20000af8 	.word	0x20000af8

0800af3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af44:	f000 f852 	bl	800afec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af48:	4b06      	ldr	r3, [pc, #24]	@ (800af64 <prvIdleTask+0x28>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d9f9      	bls.n	800af44 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af50:	4b05      	ldr	r3, [pc, #20]	@ (800af68 <prvIdleTask+0x2c>)
 800af52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af56:	601a      	str	r2, [r3, #0]
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af60:	e7f0      	b.n	800af44 <prvIdleTask+0x8>
 800af62:	bf00      	nop
 800af64:	200009e8 	.word	0x200009e8
 800af68:	e000ed04 	.word	0xe000ed04

0800af6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af72:	2300      	movs	r3, #0
 800af74:	607b      	str	r3, [r7, #4]
 800af76:	e00c      	b.n	800af92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	4613      	mov	r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4a12      	ldr	r2, [pc, #72]	@ (800afcc <prvInitialiseTaskLists+0x60>)
 800af84:	4413      	add	r3, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f7fd ff50 	bl	8008e2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3301      	adds	r3, #1
 800af90:	607b      	str	r3, [r7, #4]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b06      	cmp	r3, #6
 800af96:	d9ef      	bls.n	800af78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af98:	480d      	ldr	r0, [pc, #52]	@ (800afd0 <prvInitialiseTaskLists+0x64>)
 800af9a:	f7fd ff47 	bl	8008e2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af9e:	480d      	ldr	r0, [pc, #52]	@ (800afd4 <prvInitialiseTaskLists+0x68>)
 800afa0:	f7fd ff44 	bl	8008e2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afa4:	480c      	ldr	r0, [pc, #48]	@ (800afd8 <prvInitialiseTaskLists+0x6c>)
 800afa6:	f7fd ff41 	bl	8008e2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800afaa:	480c      	ldr	r0, [pc, #48]	@ (800afdc <prvInitialiseTaskLists+0x70>)
 800afac:	f7fd ff3e 	bl	8008e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afb0:	480b      	ldr	r0, [pc, #44]	@ (800afe0 <prvInitialiseTaskLists+0x74>)
 800afb2:	f7fd ff3b 	bl	8008e2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afb6:	4b0b      	ldr	r3, [pc, #44]	@ (800afe4 <prvInitialiseTaskLists+0x78>)
 800afb8:	4a05      	ldr	r2, [pc, #20]	@ (800afd0 <prvInitialiseTaskLists+0x64>)
 800afba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afbc:	4b0a      	ldr	r3, [pc, #40]	@ (800afe8 <prvInitialiseTaskLists+0x7c>)
 800afbe:	4a05      	ldr	r2, [pc, #20]	@ (800afd4 <prvInitialiseTaskLists+0x68>)
 800afc0:	601a      	str	r2, [r3, #0]
}
 800afc2:	bf00      	nop
 800afc4:	3708      	adds	r7, #8
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	200009e8 	.word	0x200009e8
 800afd0:	20000a74 	.word	0x20000a74
 800afd4:	20000a88 	.word	0x20000a88
 800afd8:	20000aa4 	.word	0x20000aa4
 800afdc:	20000ab8 	.word	0x20000ab8
 800afe0:	20000ad0 	.word	0x20000ad0
 800afe4:	20000a9c 	.word	0x20000a9c
 800afe8:	20000aa0 	.word	0x20000aa0

0800afec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aff2:	e019      	b.n	800b028 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aff4:	f000 ff20 	bl	800be38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aff8:	4b10      	ldr	r3, [pc, #64]	@ (800b03c <prvCheckTasksWaitingTermination+0x50>)
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	3304      	adds	r3, #4
 800b004:	4618      	mov	r0, r3
 800b006:	f7fd ff9b 	bl	8008f40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b00a:	4b0d      	ldr	r3, [pc, #52]	@ (800b040 <prvCheckTasksWaitingTermination+0x54>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	3b01      	subs	r3, #1
 800b010:	4a0b      	ldr	r2, [pc, #44]	@ (800b040 <prvCheckTasksWaitingTermination+0x54>)
 800b012:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b014:	4b0b      	ldr	r3, [pc, #44]	@ (800b044 <prvCheckTasksWaitingTermination+0x58>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	3b01      	subs	r3, #1
 800b01a:	4a0a      	ldr	r2, [pc, #40]	@ (800b044 <prvCheckTasksWaitingTermination+0x58>)
 800b01c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b01e:	f000 ff3d 	bl	800be9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 f8e4 	bl	800b1f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b028:	4b06      	ldr	r3, [pc, #24]	@ (800b044 <prvCheckTasksWaitingTermination+0x58>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1e1      	bne.n	800aff4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b030:	bf00      	nop
 800b032:	bf00      	nop
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	20000ab8 	.word	0x20000ab8
 800b040:	20000ae4 	.word	0x20000ae4
 800b044:	20000acc 	.word	0x20000acc

0800b048 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
 800b054:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d102      	bne.n	800b062 <vTaskGetInfo+0x1a>
 800b05c:	4b2c      	ldr	r3, [pc, #176]	@ (800b110 <vTaskGetInfo+0xc8>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	e000      	b.n	800b064 <vTaskGetInfo+0x1c>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800b09e:	78fb      	ldrb	r3, [r7, #3]
 800b0a0:	2b05      	cmp	r3, #5
 800b0a2:	d01a      	beq.n	800b0da <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800b0a4:	4b1a      	ldr	r3, [pc, #104]	@ (800b110 <vTaskGetInfo+0xc8>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	697a      	ldr	r2, [r7, #20]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d103      	bne.n	800b0b6 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	731a      	strb	r2, [r3, #12]
 800b0b4:	e018      	b.n	800b0e8 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	78fa      	ldrb	r2, [r7, #3]
 800b0ba:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800b0bc:	78fb      	ldrb	r3, [r7, #3]
 800b0be:	2b03      	cmp	r3, #3
 800b0c0:	d112      	bne.n	800b0e8 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800b0c2:	f7ff fb8f 	bl	800a7e4 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d002      	beq.n	800b0d4 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800b0d4:	f7ff fb94 	bl	800a800 <xTaskResumeAll>
 800b0d8:	e006      	b.n	800b0e8 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800b0da:	6978      	ldr	r0, [r7, #20]
 800b0dc:	f7ff fac6 	bl	800a66c <eTaskGetState>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d009      	beq.n	800b102 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 f860 	bl	800b1b8 <prvTaskCheckFreeStackSpace>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800b100:	e002      	b.n	800b108 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	2200      	movs	r2, #0
 800b106:	841a      	strh	r2, [r3, #32]
	}
 800b108:	bf00      	nop
 800b10a:	3718      	adds	r7, #24
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	200009e4 	.word	0x200009e4

0800b114 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800b114:	b580      	push	{r7, lr}
 800b116:	b08a      	sub	sp, #40	@ 0x28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	4613      	mov	r3, r2
 800b120:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d03f      	beq.n	800b1ae <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	623b      	str	r3, [r7, #32]
 800b132:	6a3b      	ldr	r3, [r7, #32]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	685a      	ldr	r2, [r3, #4]
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	605a      	str	r2, [r3, #4]
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	685a      	ldr	r2, [r3, #4]
 800b140:	6a3b      	ldr	r3, [r7, #32]
 800b142:	3308      	adds	r3, #8
 800b144:	429a      	cmp	r2, r3
 800b146:	d104      	bne.n	800b152 <prvListTasksWithinSingleList+0x3e>
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	685a      	ldr	r2, [r3, #4]
 800b14e:	6a3b      	ldr	r3, [r7, #32]
 800b150:	605a      	str	r2, [r3, #4]
 800b152:	6a3b      	ldr	r3, [r7, #32]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	61bb      	str	r3, [r7, #24]
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	685a      	ldr	r2, [r3, #4]
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	605a      	str	r2, [r3, #4]
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	3308      	adds	r3, #8
 800b170:	429a      	cmp	r2, r3
 800b172:	d104      	bne.n	800b17e <prvListTasksWithinSingleList+0x6a>
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	685a      	ldr	r2, [r3, #4]
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	605a      	str	r2, [r3, #4]
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800b186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b188:	4613      	mov	r3, r2
 800b18a:	00db      	lsls	r3, r3, #3
 800b18c:	4413      	add	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	461a      	mov	r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	1899      	adds	r1, r3, r2
 800b196:	79fb      	ldrb	r3, [r7, #7]
 800b198:	2201      	movs	r2, #1
 800b19a:	6978      	ldr	r0, [r7, #20]
 800b19c:	f7ff ff54 	bl	800b048 <vTaskGetInfo>
				uxTask++;
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d1d5      	bne.n	800b15a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800b1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3728      	adds	r7, #40	@ 0x28
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b1c4:	e005      	b.n	800b1d2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	607b      	str	r3, [r7, #4]
			ulCount++;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	2ba5      	cmp	r3, #165	@ 0xa5
 800b1d8:	d0f5      	beq.n	800b1c6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	089b      	lsrs	r3, r3, #2
 800b1de:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	b29b      	uxth	r3, r3
	}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3714      	adds	r7, #20
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	336c      	adds	r3, #108	@ 0x6c
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f002 fecf 	bl	800dfa0 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b206:	4618      	mov	r0, r3
 800b208:	f001 f806 	bl	800c218 <vPortFree>
			vPortFree( pxTCB );
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f001 f803 	bl	800c218 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b212:	bf00      	nop
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b222:	4b0c      	ldr	r3, [pc, #48]	@ (800b254 <prvResetNextTaskUnblockTime+0x38>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d104      	bne.n	800b236 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b22c:	4b0a      	ldr	r3, [pc, #40]	@ (800b258 <prvResetNextTaskUnblockTime+0x3c>)
 800b22e:	f04f 32ff 	mov.w	r2, #4294967295
 800b232:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b234:	e008      	b.n	800b248 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b236:	4b07      	ldr	r3, [pc, #28]	@ (800b254 <prvResetNextTaskUnblockTime+0x38>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	4a04      	ldr	r2, [pc, #16]	@ (800b258 <prvResetNextTaskUnblockTime+0x3c>)
 800b246:	6013      	str	r3, [r2, #0]
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr
 800b254:	20000a9c 	.word	0x20000a9c
 800b258:	20000b04 	.word	0x20000b04

0800b25c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b262:	4b05      	ldr	r3, [pc, #20]	@ (800b278 <xTaskGetCurrentTaskHandle+0x1c>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b268:	687b      	ldr	r3, [r7, #4]
	}
 800b26a:	4618      	mov	r0, r3
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	200009e4 	.word	0x200009e4

0800b27c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b282:	4b0b      	ldr	r3, [pc, #44]	@ (800b2b0 <xTaskGetSchedulerState+0x34>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d102      	bne.n	800b290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b28a:	2301      	movs	r3, #1
 800b28c:	607b      	str	r3, [r7, #4]
 800b28e:	e008      	b.n	800b2a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b290:	4b08      	ldr	r3, [pc, #32]	@ (800b2b4 <xTaskGetSchedulerState+0x38>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d102      	bne.n	800b29e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b298:	2302      	movs	r3, #2
 800b29a:	607b      	str	r3, [r7, #4]
 800b29c:	e001      	b.n	800b2a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b2a2:	687b      	ldr	r3, [r7, #4]
	}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	20000af0 	.word	0x20000af0
 800b2b4:	20000b0c 	.word	0x20000b0c

0800b2b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d05e      	beq.n	800b38c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2d2:	4b31      	ldr	r3, [pc, #196]	@ (800b398 <xTaskPriorityInherit+0xe0>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d24e      	bcs.n	800b37a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	db06      	blt.n	800b2f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2e4:	4b2c      	ldr	r3, [pc, #176]	@ (800b398 <xTaskPriorityInherit+0xe0>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ea:	f1c3 0207 	rsb	r2, r3, #7
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	6959      	ldr	r1, [r3, #20]
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	4413      	add	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4a26      	ldr	r2, [pc, #152]	@ (800b39c <xTaskPriorityInherit+0xe4>)
 800b304:	4413      	add	r3, r2
 800b306:	4299      	cmp	r1, r3
 800b308:	d12f      	bne.n	800b36a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	3304      	adds	r3, #4
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fd fe16 	bl	8008f40 <uxListRemove>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d10a      	bne.n	800b330 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b31e:	2201      	movs	r2, #1
 800b320:	fa02 f303 	lsl.w	r3, r2, r3
 800b324:	43da      	mvns	r2, r3
 800b326:	4b1e      	ldr	r3, [pc, #120]	@ (800b3a0 <xTaskPriorityInherit+0xe8>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4013      	ands	r3, r2
 800b32c:	4a1c      	ldr	r2, [pc, #112]	@ (800b3a0 <xTaskPriorityInherit+0xe8>)
 800b32e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b330:	4b19      	ldr	r3, [pc, #100]	@ (800b398 <xTaskPriorityInherit+0xe0>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b33e:	2201      	movs	r2, #1
 800b340:	409a      	lsls	r2, r3
 800b342:	4b17      	ldr	r3, [pc, #92]	@ (800b3a0 <xTaskPriorityInherit+0xe8>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4313      	orrs	r3, r2
 800b348:	4a15      	ldr	r2, [pc, #84]	@ (800b3a0 <xTaskPriorityInherit+0xe8>)
 800b34a:	6013      	str	r3, [r2, #0]
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b350:	4613      	mov	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4a10      	ldr	r2, [pc, #64]	@ (800b39c <xTaskPriorityInherit+0xe4>)
 800b35a:	441a      	add	r2, r3
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	3304      	adds	r3, #4
 800b360:	4619      	mov	r1, r3
 800b362:	4610      	mov	r0, r2
 800b364:	f7fd fd8f 	bl	8008e86 <vListInsertEnd>
 800b368:	e004      	b.n	800b374 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b36a:	4b0b      	ldr	r3, [pc, #44]	@ (800b398 <xTaskPriorityInherit+0xe0>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b374:	2301      	movs	r3, #1
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	e008      	b.n	800b38c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b37e:	4b06      	ldr	r3, [pc, #24]	@ (800b398 <xTaskPriorityInherit+0xe0>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b384:	429a      	cmp	r2, r3
 800b386:	d201      	bcs.n	800b38c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b388:	2301      	movs	r3, #1
 800b38a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b38c:	68fb      	ldr	r3, [r7, #12]
	}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	200009e4 	.word	0x200009e4
 800b39c:	200009e8 	.word	0x200009e8
 800b3a0:	20000aec 	.word	0x20000aec

0800b3a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d070      	beq.n	800b49c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b3ba:	4b3b      	ldr	r3, [pc, #236]	@ (800b4a8 <xTaskPriorityDisinherit+0x104>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d00b      	beq.n	800b3dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c8:	f383 8811 	msr	BASEPRI, r3
 800b3cc:	f3bf 8f6f 	isb	sy
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	60fb      	str	r3, [r7, #12]
}
 800b3d6:	bf00      	nop
 800b3d8:	bf00      	nop
 800b3da:	e7fd      	b.n	800b3d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10b      	bne.n	800b3fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e8:	f383 8811 	msr	BASEPRI, r3
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	60bb      	str	r3, [r7, #8]
}
 800b3f6:	bf00      	nop
 800b3f8:	bf00      	nop
 800b3fa:	e7fd      	b.n	800b3f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b400:	1e5a      	subs	r2, r3, #1
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	665a      	str	r2, [r3, #100]	@ 0x64

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b40e:	429a      	cmp	r2, r3
 800b410:	d044      	beq.n	800b49c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b416:	2b00      	cmp	r3, #0
 800b418:	d140      	bne.n	800b49c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	3304      	adds	r3, #4
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fd fd8e 	bl	8008f40 <uxListRemove>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d115      	bne.n	800b456 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b42e:	491f      	ldr	r1, [pc, #124]	@ (800b4ac <xTaskPriorityDisinherit+0x108>)
 800b430:	4613      	mov	r3, r2
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	4413      	add	r3, r2
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	440b      	add	r3, r1
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d10a      	bne.n	800b456 <xTaskPriorityDisinherit+0xb2>
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b444:	2201      	movs	r2, #1
 800b446:	fa02 f303 	lsl.w	r3, r2, r3
 800b44a:	43da      	mvns	r2, r3
 800b44c:	4b18      	ldr	r3, [pc, #96]	@ (800b4b0 <xTaskPriorityDisinherit+0x10c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4013      	ands	r3, r2
 800b452:	4a17      	ldr	r2, [pc, #92]	@ (800b4b0 <xTaskPriorityDisinherit+0x10c>)
 800b454:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b462:	f1c3 0207 	rsb	r2, r3, #7
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46e:	2201      	movs	r2, #1
 800b470:	409a      	lsls	r2, r3
 800b472:	4b0f      	ldr	r3, [pc, #60]	@ (800b4b0 <xTaskPriorityDisinherit+0x10c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4313      	orrs	r3, r2
 800b478:	4a0d      	ldr	r2, [pc, #52]	@ (800b4b0 <xTaskPriorityDisinherit+0x10c>)
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b480:	4613      	mov	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4a08      	ldr	r2, [pc, #32]	@ (800b4ac <xTaskPriorityDisinherit+0x108>)
 800b48a:	441a      	add	r2, r3
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	3304      	adds	r3, #4
 800b490:	4619      	mov	r1, r3
 800b492:	4610      	mov	r0, r2
 800b494:	f7fd fcf7 	bl	8008e86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b498:	2301      	movs	r3, #1
 800b49a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b49c:	697b      	ldr	r3, [r7, #20]
	}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3718      	adds	r7, #24
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	200009e4 	.word	0x200009e4
 800b4ac:	200009e8 	.word	0x200009e8
 800b4b0:	20000aec 	.word	0x20000aec

0800b4b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d079      	beq.n	800b5c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10b      	bne.n	800b4ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	60fb      	str	r3, [r7, #12]
}
 800b4e6:	bf00      	nop
 800b4e8:	bf00      	nop
 800b4ea:	e7fd      	b.n	800b4e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4f0:	683a      	ldr	r2, [r7, #0]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d902      	bls.n	800b4fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	61fb      	str	r3, [r7, #28]
 800b4fa:	e002      	b.n	800b502 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b500:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b506:	69fa      	ldr	r2, [r7, #28]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d059      	beq.n	800b5c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b510:	697a      	ldr	r2, [r7, #20]
 800b512:	429a      	cmp	r2, r3
 800b514:	d154      	bne.n	800b5c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b516:	4b2c      	ldr	r3, [pc, #176]	@ (800b5c8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	69ba      	ldr	r2, [r7, #24]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d10b      	bne.n	800b538 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	60bb      	str	r3, [r7, #8]
}
 800b532:	bf00      	nop
 800b534:	bf00      	nop
 800b536:	e7fd      	b.n	800b534 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	69fa      	ldr	r2, [r7, #28]
 800b542:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	699b      	ldr	r3, [r3, #24]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	db04      	blt.n	800b556 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	f1c3 0207 	rsb	r2, r3, #7
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	6959      	ldr	r1, [r3, #20]
 800b55a:	693a      	ldr	r2, [r7, #16]
 800b55c:	4613      	mov	r3, r2
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	4a19      	ldr	r2, [pc, #100]	@ (800b5cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b566:	4413      	add	r3, r2
 800b568:	4299      	cmp	r1, r3
 800b56a:	d129      	bne.n	800b5c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	3304      	adds	r3, #4
 800b570:	4618      	mov	r0, r3
 800b572:	f7fd fce5 	bl	8008f40 <uxListRemove>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10a      	bne.n	800b592 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b580:	2201      	movs	r2, #1
 800b582:	fa02 f303 	lsl.w	r3, r2, r3
 800b586:	43da      	mvns	r2, r3
 800b588:	4b11      	ldr	r3, [pc, #68]	@ (800b5d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4013      	ands	r3, r2
 800b58e:	4a10      	ldr	r2, [pc, #64]	@ (800b5d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b590:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b596:	2201      	movs	r2, #1
 800b598:	409a      	lsls	r2, r3
 800b59a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	4a0b      	ldr	r2, [pc, #44]	@ (800b5d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b5a2:	6013      	str	r3, [r2, #0]
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4413      	add	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4a06      	ldr	r2, [pc, #24]	@ (800b5cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b5b2:	441a      	add	r2, r3
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	f7fd fc63 	bl	8008e86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5c0:	bf00      	nop
 800b5c2:	3720      	adds	r7, #32
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	200009e4 	.word	0x200009e4
 800b5cc:	200009e8 	.word	0x200009e8
 800b5d0:	20000aec 	.word	0x20000aec

0800b5d4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f002 fd96 	bl	800e112 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f7f4 fe7a 	bl	80002e0 <strlen>
 800b5ec:	60f8      	str	r0, [r7, #12]
 800b5ee:	e007      	b.n	800b600 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	2220      	movs	r2, #32
 800b5f8:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	60fb      	str	r3, [r7, #12]
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2b1e      	cmp	r3, #30
 800b604:	d9f4      	bls.n	800b5f0 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	4413      	add	r3, r2
 800b60c:	2200      	movs	r2, #0
 800b60e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	4413      	add	r3, r2
	}
 800b616:	4618      	mov	r0, r3
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800b620:	b590      	push	{r4, r7, lr}
 800b622:	b089      	sub	sp, #36	@ 0x24
 800b624:	af02      	add	r7, sp, #8
 800b626:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800b62e:	4b45      	ldr	r3, [pc, #276]	@ (800b744 <vTaskList+0x124>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800b634:	4b43      	ldr	r3, [pc, #268]	@ (800b744 <vTaskList+0x124>)
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	4613      	mov	r3, r2
 800b63a:	00db      	lsls	r3, r3, #3
 800b63c:	4413      	add	r3, r2
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4618      	mov	r0, r3
 800b642:	f000 fd1b 	bl	800c07c <pvPortMalloc>
 800b646:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d076      	beq.n	800b73c <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800b64e:	2200      	movs	r2, #0
 800b650:	68f9      	ldr	r1, [r7, #12]
 800b652:	68b8      	ldr	r0, [r7, #8]
 800b654:	f7ff f972 	bl	800a93c <uxTaskGetSystemState>
 800b658:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800b65a:	2300      	movs	r3, #0
 800b65c:	617b      	str	r3, [r7, #20]
 800b65e:	e066      	b.n	800b72e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800b660:	697a      	ldr	r2, [r7, #20]
 800b662:	4613      	mov	r3, r2
 800b664:	00db      	lsls	r3, r3, #3
 800b666:	4413      	add	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	461a      	mov	r2, r3
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	4413      	add	r3, r2
 800b670:	7b1b      	ldrb	r3, [r3, #12]
 800b672:	2b04      	cmp	r3, #4
 800b674:	d81b      	bhi.n	800b6ae <vTaskList+0x8e>
 800b676:	a201      	add	r2, pc, #4	@ (adr r2, 800b67c <vTaskList+0x5c>)
 800b678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67c:	0800b691 	.word	0x0800b691
 800b680:	0800b697 	.word	0x0800b697
 800b684:	0800b69d 	.word	0x0800b69d
 800b688:	0800b6a3 	.word	0x0800b6a3
 800b68c:	0800b6a9 	.word	0x0800b6a9
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800b690:	2358      	movs	r3, #88	@ 0x58
 800b692:	74fb      	strb	r3, [r7, #19]
										break;
 800b694:	e00e      	b.n	800b6b4 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800b696:	2352      	movs	r3, #82	@ 0x52
 800b698:	74fb      	strb	r3, [r7, #19]
										break;
 800b69a:	e00b      	b.n	800b6b4 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800b69c:	2342      	movs	r3, #66	@ 0x42
 800b69e:	74fb      	strb	r3, [r7, #19]
										break;
 800b6a0:	e008      	b.n	800b6b4 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800b6a2:	2353      	movs	r3, #83	@ 0x53
 800b6a4:	74fb      	strb	r3, [r7, #19]
										break;
 800b6a6:	e005      	b.n	800b6b4 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800b6a8:	2344      	movs	r3, #68	@ 0x44
 800b6aa:	74fb      	strb	r3, [r7, #19]
										break;
 800b6ac:	e002      	b.n	800b6b4 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	74fb      	strb	r3, [r7, #19]
										break;
 800b6b2:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800b6b4:	697a      	ldr	r2, [r7, #20]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	00db      	lsls	r3, r3, #3
 800b6ba:	4413      	add	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	461a      	mov	r2, r3
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7ff ff83 	bl	800b5d4 <prvWriteNameToBuffer>
 800b6ce:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800b6d0:	7cf9      	ldrb	r1, [r7, #19]
 800b6d2:	697a      	ldr	r2, [r7, #20]
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	00db      	lsls	r3, r3, #3
 800b6d8:	4413      	add	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	461a      	mov	r2, r3
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	6918      	ldr	r0, [r3, #16]
 800b6e4:	697a      	ldr	r2, [r7, #20]
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	00db      	lsls	r3, r3, #3
 800b6ea:	4413      	add	r3, r2
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	8c1b      	ldrh	r3, [r3, #32]
 800b6f6:	461c      	mov	r4, r3
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	00db      	lsls	r3, r3, #3
 800b6fe:	4413      	add	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	461a      	mov	r2, r3
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	4413      	add	r3, r2
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	9301      	str	r3, [sp, #4]
 800b70c:	9400      	str	r4, [sp, #0]
 800b70e:	4603      	mov	r3, r0
 800b710:	460a      	mov	r2, r1
 800b712:	490d      	ldr	r1, [pc, #52]	@ (800b748 <vTaskList+0x128>)
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f002 fb9f 	bl	800de58 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f7f4 fde0 	bl	80002e0 <strlen>
 800b720:	4602      	mov	r2, r0
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4413      	add	r3, r2
 800b726:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	3301      	adds	r3, #1
 800b72c:	617b      	str	r3, [r7, #20]
 800b72e:	697a      	ldr	r2, [r7, #20]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	429a      	cmp	r2, r3
 800b734:	d394      	bcc.n	800b660 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800b736:	68b8      	ldr	r0, [r7, #8]
 800b738:	f000 fd6e 	bl	800c218 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b73c:	bf00      	nop
 800b73e:	371c      	adds	r7, #28
 800b740:	46bd      	mov	sp, r7
 800b742:	bd90      	pop	{r4, r7, pc}
 800b744:	20000ae4 	.word	0x20000ae4
 800b748:	08010798 	.word	0x08010798

0800b74c <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800b75a:	4b3a      	ldr	r3, [pc, #232]	@ (800b844 <vTaskGetRunTimeStats+0xf8>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800b760:	4b38      	ldr	r3, [pc, #224]	@ (800b844 <vTaskGetRunTimeStats+0xf8>)
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	4613      	mov	r3, r2
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	4413      	add	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 fc85 	bl	800c07c <pvPortMalloc>
 800b772:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d05f      	beq.n	800b83a <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800b77a:	f107 030c 	add.w	r3, r7, #12
 800b77e:	461a      	mov	r2, r3
 800b780:	69b9      	ldr	r1, [r7, #24]
 800b782:	6978      	ldr	r0, [r7, #20]
 800b784:	f7ff f8da 	bl	800a93c <uxTaskGetSystemState>
 800b788:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	4a2e      	ldr	r2, [pc, #184]	@ (800b848 <vTaskGetRunTimeStats+0xfc>)
 800b78e:	fba2 2303 	umull	r2, r3, r2, r3
 800b792:	095b      	lsrs	r3, r3, #5
 800b794:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d04b      	beq.n	800b834 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800b79c:	2300      	movs	r3, #0
 800b79e:	61fb      	str	r3, [r7, #28]
 800b7a0:	e044      	b.n	800b82c <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800b7a2:	69fa      	ldr	r2, [r7, #28]
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	00db      	lsls	r3, r3, #3
 800b7a8:	4413      	add	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	699a      	ldr	r2, [r3, #24]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ba:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800b7bc:	69fa      	ldr	r2, [r7, #28]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	00db      	lsls	r3, r3, #3
 800b7c2:	4413      	add	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f7ff feff 	bl	800b5d4 <prvWriteNameToBuffer>
 800b7d6:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00e      	beq.n	800b7fc <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800b7de:	69fa      	ldr	r2, [r7, #28]
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	00db      	lsls	r3, r3, #3
 800b7e4:	4413      	add	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	699a      	ldr	r2, [r3, #24]
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	4916      	ldr	r1, [pc, #88]	@ (800b84c <vTaskGetRunTimeStats+0x100>)
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f002 fb2f 	bl	800de58 <siprintf>
 800b7fa:	e00d      	b.n	800b818 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800b7fc:	69fa      	ldr	r2, [r7, #28]
 800b7fe:	4613      	mov	r3, r2
 800b800:	00db      	lsls	r3, r3, #3
 800b802:	4413      	add	r3, r2
 800b804:	009b      	lsls	r3, r3, #2
 800b806:	461a      	mov	r2, r3
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	4413      	add	r3, r2
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	461a      	mov	r2, r3
 800b810:	490f      	ldr	r1, [pc, #60]	@ (800b850 <vTaskGetRunTimeStats+0x104>)
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f002 fb20 	bl	800de58 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f7f4 fd61 	bl	80002e0 <strlen>
 800b81e:	4602      	mov	r2, r0
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4413      	add	r3, r2
 800b824:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	3301      	adds	r3, #1
 800b82a:	61fb      	str	r3, [r7, #28]
 800b82c:	69fa      	ldr	r2, [r7, #28]
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	429a      	cmp	r2, r3
 800b832:	d3b6      	bcc.n	800b7a2 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800b834:	6978      	ldr	r0, [r7, #20]
 800b836:	f000 fcef 	bl	800c218 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b83a:	bf00      	nop
 800b83c:	3720      	adds	r7, #32
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	20000ae4 	.word	0x20000ae4
 800b848:	51eb851f 	.word	0x51eb851f
 800b84c:	080107a8 	.word	0x080107a8
 800b850:	080107b4 	.word	0x080107b4

0800b854 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b854:	b480      	push	{r7}
 800b856:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b858:	4b07      	ldr	r3, [pc, #28]	@ (800b878 <pvTaskIncrementMutexHeldCount+0x24>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d004      	beq.n	800b86a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b860:	4b05      	ldr	r3, [pc, #20]	@ (800b878 <pvTaskIncrementMutexHeldCount+0x24>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b866:	3201      	adds	r2, #1
 800b868:	665a      	str	r2, [r3, #100]	@ 0x64
		}

		return pxCurrentTCB;
 800b86a:	4b03      	ldr	r3, [pc, #12]	@ (800b878 <pvTaskIncrementMutexHeldCount+0x24>)
 800b86c:	681b      	ldr	r3, [r3, #0]
	}
 800b86e:	4618      	mov	r0, r3
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	200009e4 	.word	0x200009e4

0800b87c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
 800b888:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b88a:	f000 fad5 	bl	800be38 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b88e:	4b29      	ldr	r3, [pc, #164]	@ (800b934 <xTaskNotifyWait+0xb8>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 800b896:	b2db      	uxtb	r3, r3
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d01c      	beq.n	800b8d6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b89c:	4b25      	ldr	r3, [pc, #148]	@ (800b934 <xTaskNotifyWait+0xb8>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	43d2      	mvns	r2, r2
 800b8a8:	400a      	ands	r2, r1
 800b8aa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b8ae:	4b21      	ldr	r3, [pc, #132]	@ (800b934 <xTaskNotifyWait+0xb8>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00b      	beq.n	800b8d6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8be:	2101      	movs	r1, #1
 800b8c0:	6838      	ldr	r0, [r7, #0]
 800b8c2:	f000 f923 	bl	800bb0c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b8c6:	4b1c      	ldr	r3, [pc, #112]	@ (800b938 <xTaskNotifyWait+0xbc>)
 800b8c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8cc:	601a      	str	r2, [r3, #0]
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b8d6:	f000 fae1 	bl	800be9c <vPortExitCritical>

		taskENTER_CRITICAL();
 800b8da:	f000 faad 	bl	800be38 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d005      	beq.n	800b8f0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b8e4:	4b13      	ldr	r3, [pc, #76]	@ (800b934 <xTaskNotifyWait+0xb8>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b8f0:	4b10      	ldr	r3, [pc, #64]	@ (800b934 <xTaskNotifyWait+0xb8>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d002      	beq.n	800b904 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b8fe:	2300      	movs	r3, #0
 800b900:	617b      	str	r3, [r7, #20]
 800b902:	e00a      	b.n	800b91a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b904:	4b0b      	ldr	r3, [pc, #44]	@ (800b934 <xTaskNotifyWait+0xb8>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	43d2      	mvns	r2, r2
 800b910:	400a      	ands	r2, r1
 800b912:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
				xReturn = pdTRUE;
 800b916:	2301      	movs	r3, #1
 800b918:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b91a:	4b06      	ldr	r3, [pc, #24]	@ (800b934 <xTaskNotifyWait+0xb8>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
		}
		taskEXIT_CRITICAL();
 800b924:	f000 faba 	bl	800be9c <vPortExitCritical>

		return xReturn;
 800b928:	697b      	ldr	r3, [r7, #20]
	}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3718      	adds	r7, #24
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	200009e4 	.word	0x200009e4
 800b938:	e000ed04 	.word	0xe000ed04

0800b93c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b08a      	sub	sp, #40	@ 0x28
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	603b      	str	r3, [r7, #0]
 800b948:	4613      	mov	r3, r2
 800b94a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b94c:	2301      	movs	r3, #1
 800b94e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10b      	bne.n	800b96e <xTaskGenericNotify+0x32>
	__asm volatile
 800b956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b95a:	f383 8811 	msr	BASEPRI, r3
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f3bf 8f4f 	dsb	sy
 800b966:	61bb      	str	r3, [r7, #24]
}
 800b968:	bf00      	nop
 800b96a:	bf00      	nop
 800b96c:	e7fd      	b.n	800b96a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b972:	f000 fa61 	bl	800be38 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d004      	beq.n	800b986 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b97c:	6a3b      	ldr	r3, [r7, #32]
 800b97e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b986:	6a3b      	ldr	r3, [r7, #32]
 800b988:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 800b98c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b98e:	6a3b      	ldr	r3, [r7, #32]
 800b990:	2202      	movs	r2, #2
 800b992:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc

			switch( eAction )
 800b996:	79fb      	ldrb	r3, [r7, #7]
 800b998:	2b04      	cmp	r3, #4
 800b99a:	d82e      	bhi.n	800b9fa <xTaskGenericNotify+0xbe>
 800b99c:	a201      	add	r2, pc, #4	@ (adr r2, 800b9a4 <xTaskGenericNotify+0x68>)
 800b99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a2:	bf00      	nop
 800b9a4:	0800ba1f 	.word	0x0800ba1f
 800b9a8:	0800b9b9 	.word	0x0800b9b9
 800b9ac:	0800b9cb 	.word	0x0800b9cb
 800b9b0:	0800b9db 	.word	0x0800b9db
 800b9b4:	0800b9e5 	.word	0x0800b9e5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b9b8:	6a3b      	ldr	r3, [r7, #32]
 800b9ba:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	431a      	orrs	r2, r3
 800b9c2:	6a3b      	ldr	r3, [r7, #32]
 800b9c4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
					break;
 800b9c8:	e02c      	b.n	800ba24 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b9ca:	6a3b      	ldr	r3, [r7, #32]
 800b9cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b9d0:	1c5a      	adds	r2, r3, #1
 800b9d2:	6a3b      	ldr	r3, [r7, #32]
 800b9d4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
					break;
 800b9d8:	e024      	b.n	800ba24 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b9da:	6a3b      	ldr	r3, [r7, #32]
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
					break;
 800b9e2:	e01f      	b.n	800ba24 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b9e4:	7ffb      	ldrb	r3, [r7, #31]
 800b9e6:	2b02      	cmp	r3, #2
 800b9e8:	d004      	beq.n	800b9f4 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b9ea:	6a3b      	ldr	r3, [r7, #32]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b9f2:	e017      	b.n	800ba24 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800b9f8:	e014      	b.n	800ba24 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ba00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba04:	d00d      	beq.n	800ba22 <xTaskGenericNotify+0xe6>
	__asm volatile
 800ba06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba0a:	f383 8811 	msr	BASEPRI, r3
 800ba0e:	f3bf 8f6f 	isb	sy
 800ba12:	f3bf 8f4f 	dsb	sy
 800ba16:	617b      	str	r3, [r7, #20]
}
 800ba18:	bf00      	nop
 800ba1a:	bf00      	nop
 800ba1c:	e7fd      	b.n	800ba1a <xTaskGenericNotify+0xde>
					break;
 800ba1e:	bf00      	nop
 800ba20:	e000      	b.n	800ba24 <xTaskGenericNotify+0xe8>

					break;
 800ba22:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ba24:	7ffb      	ldrb	r3, [r7, #31]
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d13a      	bne.n	800baa0 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba2a:	6a3b      	ldr	r3, [r7, #32]
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fd fa86 	bl	8008f40 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ba34:	6a3b      	ldr	r3, [r7, #32]
 800ba36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba38:	2201      	movs	r2, #1
 800ba3a:	409a      	lsls	r2, r3
 800ba3c:	4b1c      	ldr	r3, [pc, #112]	@ (800bab0 <xTaskGenericNotify+0x174>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	4a1b      	ldr	r2, [pc, #108]	@ (800bab0 <xTaskGenericNotify+0x174>)
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	6a3b      	ldr	r3, [r7, #32]
 800ba48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4a18      	ldr	r2, [pc, #96]	@ (800bab4 <xTaskGenericNotify+0x178>)
 800ba54:	441a      	add	r2, r3
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	3304      	adds	r3, #4
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	f7fd fa12 	bl	8008e86 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ba62:	6a3b      	ldr	r3, [r7, #32]
 800ba64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00b      	beq.n	800ba82 <xTaskGenericNotify+0x146>
	__asm volatile
 800ba6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba6e:	f383 8811 	msr	BASEPRI, r3
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	f3bf 8f4f 	dsb	sy
 800ba7a:	613b      	str	r3, [r7, #16]
}
 800ba7c:	bf00      	nop
 800ba7e:	bf00      	nop
 800ba80:	e7fd      	b.n	800ba7e <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba82:	6a3b      	ldr	r3, [r7, #32]
 800ba84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba86:	4b0c      	ldr	r3, [pc, #48]	@ (800bab8 <xTaskGenericNotify+0x17c>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d907      	bls.n	800baa0 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ba90:	4b0a      	ldr	r3, [pc, #40]	@ (800babc <xTaskGenericNotify+0x180>)
 800ba92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba96:	601a      	str	r2, [r3, #0]
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800baa0:	f000 f9fc 	bl	800be9c <vPortExitCritical>

		return xReturn;
 800baa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3728      	adds	r7, #40	@ 0x28
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	20000aec 	.word	0x20000aec
 800bab4:	200009e8 	.word	0x200009e8
 800bab8:	200009e4 	.word	0x200009e4
 800babc:	e000ed04 	.word	0xe000ed04

0800bac0 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d102      	bne.n	800bad4 <xTaskNotifyStateClear+0x14>
 800bace:	4b0e      	ldr	r3, [pc, #56]	@ (800bb08 <xTaskNotifyStateClear+0x48>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	e000      	b.n	800bad6 <xTaskNotifyStateClear+0x16>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800bad8:	f000 f9ae 	bl	800be38 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d106      	bne.n	800baf6 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
				xReturn = pdPASS;
 800baf0:	2301      	movs	r3, #1
 800baf2:	60fb      	str	r3, [r7, #12]
 800baf4:	e001      	b.n	800bafa <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800baf6:	2300      	movs	r3, #0
 800baf8:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800bafa:	f000 f9cf 	bl	800be9c <vPortExitCritical>

		return xReturn;
 800bafe:	68fb      	ldr	r3, [r7, #12]
	}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	200009e4 	.word	0x200009e4

0800bb0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb16:	4b29      	ldr	r3, [pc, #164]	@ (800bbbc <prvAddCurrentTaskToDelayedList+0xb0>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb1c:	4b28      	ldr	r3, [pc, #160]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	3304      	adds	r3, #4
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fd fa0c 	bl	8008f40 <uxListRemove>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10b      	bne.n	800bb46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bb2e:	4b24      	ldr	r3, [pc, #144]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb34:	2201      	movs	r2, #1
 800bb36:	fa02 f303 	lsl.w	r3, r2, r3
 800bb3a:	43da      	mvns	r2, r3
 800bb3c:	4b21      	ldr	r3, [pc, #132]	@ (800bbc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4013      	ands	r3, r2
 800bb42:	4a20      	ldr	r2, [pc, #128]	@ (800bbc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bb44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb4c:	d10a      	bne.n	800bb64 <prvAddCurrentTaskToDelayedList+0x58>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d007      	beq.n	800bb64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb54:	4b1a      	ldr	r3, [pc, #104]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	3304      	adds	r3, #4
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	481a      	ldr	r0, [pc, #104]	@ (800bbc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bb5e:	f7fd f992 	bl	8008e86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb62:	e026      	b.n	800bbb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4413      	add	r3, r2
 800bb6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb6c:	4b14      	ldr	r3, [pc, #80]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d209      	bcs.n	800bb90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb7c:	4b13      	ldr	r3, [pc, #76]	@ (800bbcc <prvAddCurrentTaskToDelayedList+0xc0>)
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	4b0f      	ldr	r3, [pc, #60]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	3304      	adds	r3, #4
 800bb86:	4619      	mov	r1, r3
 800bb88:	4610      	mov	r0, r2
 800bb8a:	f7fd f9a0 	bl	8008ece <vListInsert>
}
 800bb8e:	e010      	b.n	800bbb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb90:	4b0f      	ldr	r3, [pc, #60]	@ (800bbd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	4b0a      	ldr	r3, [pc, #40]	@ (800bbc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	3304      	adds	r3, #4
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	f7fd f996 	bl	8008ece <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bba2:	4b0c      	ldr	r3, [pc, #48]	@ (800bbd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d202      	bcs.n	800bbb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bbac:	4a09      	ldr	r2, [pc, #36]	@ (800bbd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	6013      	str	r3, [r2, #0]
}
 800bbb2:	bf00      	nop
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20000ae8 	.word	0x20000ae8
 800bbc0:	200009e4 	.word	0x200009e4
 800bbc4:	20000aec 	.word	0x20000aec
 800bbc8:	20000ad0 	.word	0x20000ad0
 800bbcc:	20000aa0 	.word	0x20000aa0
 800bbd0:	20000a9c 	.word	0x20000a9c
 800bbd4:	20000b04 	.word	0x20000b04

0800bbd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	3b04      	subs	r3, #4
 800bbe8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bbf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	3b04      	subs	r3, #4
 800bbf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	f023 0201 	bic.w	r2, r3, #1
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	3b04      	subs	r3, #4
 800bc06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc08:	4a0c      	ldr	r2, [pc, #48]	@ (800bc3c <pxPortInitialiseStack+0x64>)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	3b14      	subs	r3, #20
 800bc12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	3b04      	subs	r3, #4
 800bc1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f06f 0202 	mvn.w	r2, #2
 800bc26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	3b20      	subs	r3, #32
 800bc2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	0800bc41 	.word	0x0800bc41

0800bc40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc4a:	4b13      	ldr	r3, [pc, #76]	@ (800bc98 <prvTaskExitError+0x58>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc52:	d00b      	beq.n	800bc6c <prvTaskExitError+0x2c>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	60fb      	str	r3, [r7, #12]
}
 800bc66:	bf00      	nop
 800bc68:	bf00      	nop
 800bc6a:	e7fd      	b.n	800bc68 <prvTaskExitError+0x28>
	__asm volatile
 800bc6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc70:	f383 8811 	msr	BASEPRI, r3
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	f3bf 8f4f 	dsb	sy
 800bc7c:	60bb      	str	r3, [r7, #8]
}
 800bc7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc80:	bf00      	nop
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d0fc      	beq.n	800bc82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc88:	bf00      	nop
 800bc8a:	bf00      	nop
 800bc8c:	3714      	adds	r7, #20
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	20000418 	.word	0x20000418
 800bc9c:	00000000 	.word	0x00000000

0800bca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bca0:	4b07      	ldr	r3, [pc, #28]	@ (800bcc0 <pxCurrentTCBConst2>)
 800bca2:	6819      	ldr	r1, [r3, #0]
 800bca4:	6808      	ldr	r0, [r1, #0]
 800bca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcaa:	f380 8809 	msr	PSP, r0
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f04f 0000 	mov.w	r0, #0
 800bcb6:	f380 8811 	msr	BASEPRI, r0
 800bcba:	4770      	bx	lr
 800bcbc:	f3af 8000 	nop.w

0800bcc0 <pxCurrentTCBConst2>:
 800bcc0:	200009e4 	.word	0x200009e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bcc4:	bf00      	nop
 800bcc6:	bf00      	nop

0800bcc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bcc8:	4808      	ldr	r0, [pc, #32]	@ (800bcec <prvPortStartFirstTask+0x24>)
 800bcca:	6800      	ldr	r0, [r0, #0]
 800bccc:	6800      	ldr	r0, [r0, #0]
 800bcce:	f380 8808 	msr	MSP, r0
 800bcd2:	f04f 0000 	mov.w	r0, #0
 800bcd6:	f380 8814 	msr	CONTROL, r0
 800bcda:	b662      	cpsie	i
 800bcdc:	b661      	cpsie	f
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	f3bf 8f6f 	isb	sy
 800bce6:	df00      	svc	0
 800bce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcea:	bf00      	nop
 800bcec:	e000ed08 	.word	0xe000ed08

0800bcf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bcf6:	4b47      	ldr	r3, [pc, #284]	@ (800be14 <xPortStartScheduler+0x124>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a47      	ldr	r2, [pc, #284]	@ (800be18 <xPortStartScheduler+0x128>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d10b      	bne.n	800bd18 <xPortStartScheduler+0x28>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	613b      	str	r3, [r7, #16]
}
 800bd12:	bf00      	nop
 800bd14:	bf00      	nop
 800bd16:	e7fd      	b.n	800bd14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bd18:	4b3e      	ldr	r3, [pc, #248]	@ (800be14 <xPortStartScheduler+0x124>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a3f      	ldr	r2, [pc, #252]	@ (800be1c <xPortStartScheduler+0x12c>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d10b      	bne.n	800bd3a <xPortStartScheduler+0x4a>
	__asm volatile
 800bd22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd26:	f383 8811 	msr	BASEPRI, r3
 800bd2a:	f3bf 8f6f 	isb	sy
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	60fb      	str	r3, [r7, #12]
}
 800bd34:	bf00      	nop
 800bd36:	bf00      	nop
 800bd38:	e7fd      	b.n	800bd36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd3a:	4b39      	ldr	r3, [pc, #228]	@ (800be20 <xPortStartScheduler+0x130>)
 800bd3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	22ff      	movs	r2, #255	@ 0xff
 800bd4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd54:	78fb      	ldrb	r3, [r7, #3]
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	4b31      	ldr	r3, [pc, #196]	@ (800be24 <xPortStartScheduler+0x134>)
 800bd60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd62:	4b31      	ldr	r3, [pc, #196]	@ (800be28 <xPortStartScheduler+0x138>)
 800bd64:	2207      	movs	r2, #7
 800bd66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd68:	e009      	b.n	800bd7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bd6a:	4b2f      	ldr	r3, [pc, #188]	@ (800be28 <xPortStartScheduler+0x138>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	4a2d      	ldr	r2, [pc, #180]	@ (800be28 <xPortStartScheduler+0x138>)
 800bd72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd74:	78fb      	ldrb	r3, [r7, #3]
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	005b      	lsls	r3, r3, #1
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd7e:	78fb      	ldrb	r3, [r7, #3]
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd86:	2b80      	cmp	r3, #128	@ 0x80
 800bd88:	d0ef      	beq.n	800bd6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd8a:	4b27      	ldr	r3, [pc, #156]	@ (800be28 <xPortStartScheduler+0x138>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f1c3 0307 	rsb	r3, r3, #7
 800bd92:	2b04      	cmp	r3, #4
 800bd94:	d00b      	beq.n	800bdae <xPortStartScheduler+0xbe>
	__asm volatile
 800bd96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd9a:	f383 8811 	msr	BASEPRI, r3
 800bd9e:	f3bf 8f6f 	isb	sy
 800bda2:	f3bf 8f4f 	dsb	sy
 800bda6:	60bb      	str	r3, [r7, #8]
}
 800bda8:	bf00      	nop
 800bdaa:	bf00      	nop
 800bdac:	e7fd      	b.n	800bdaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bdae:	4b1e      	ldr	r3, [pc, #120]	@ (800be28 <xPortStartScheduler+0x138>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	021b      	lsls	r3, r3, #8
 800bdb4:	4a1c      	ldr	r2, [pc, #112]	@ (800be28 <xPortStartScheduler+0x138>)
 800bdb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bdb8:	4b1b      	ldr	r3, [pc, #108]	@ (800be28 <xPortStartScheduler+0x138>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bdc0:	4a19      	ldr	r2, [pc, #100]	@ (800be28 <xPortStartScheduler+0x138>)
 800bdc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	b2da      	uxtb	r2, r3
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bdcc:	4b17      	ldr	r3, [pc, #92]	@ (800be2c <xPortStartScheduler+0x13c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a16      	ldr	r2, [pc, #88]	@ (800be2c <xPortStartScheduler+0x13c>)
 800bdd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bdd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bdd8:	4b14      	ldr	r3, [pc, #80]	@ (800be2c <xPortStartScheduler+0x13c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a13      	ldr	r2, [pc, #76]	@ (800be2c <xPortStartScheduler+0x13c>)
 800bdde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bde2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bde4:	f000 f8da 	bl	800bf9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bde8:	4b11      	ldr	r3, [pc, #68]	@ (800be30 <xPortStartScheduler+0x140>)
 800bdea:	2200      	movs	r2, #0
 800bdec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdee:	f000 f8f9 	bl	800bfe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdf2:	4b10      	ldr	r3, [pc, #64]	@ (800be34 <xPortStartScheduler+0x144>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a0f      	ldr	r2, [pc, #60]	@ (800be34 <xPortStartScheduler+0x144>)
 800bdf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bdfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bdfe:	f7ff ff63 	bl	800bcc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800be02:	f7fe fee5 	bl	800abd0 <vTaskSwitchContext>
	prvTaskExitError();
 800be06:	f7ff ff1b 	bl	800bc40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	e000ed00 	.word	0xe000ed00
 800be18:	410fc271 	.word	0x410fc271
 800be1c:	410fc270 	.word	0x410fc270
 800be20:	e000e400 	.word	0xe000e400
 800be24:	20000b18 	.word	0x20000b18
 800be28:	20000b1c 	.word	0x20000b1c
 800be2c:	e000ed20 	.word	0xe000ed20
 800be30:	20000418 	.word	0x20000418
 800be34:	e000ef34 	.word	0xe000ef34

0800be38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
	__asm volatile
 800be3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be42:	f383 8811 	msr	BASEPRI, r3
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	607b      	str	r3, [r7, #4]
}
 800be50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be52:	4b10      	ldr	r3, [pc, #64]	@ (800be94 <vPortEnterCritical+0x5c>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	3301      	adds	r3, #1
 800be58:	4a0e      	ldr	r2, [pc, #56]	@ (800be94 <vPortEnterCritical+0x5c>)
 800be5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be5c:	4b0d      	ldr	r3, [pc, #52]	@ (800be94 <vPortEnterCritical+0x5c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d110      	bne.n	800be86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be64:	4b0c      	ldr	r3, [pc, #48]	@ (800be98 <vPortEnterCritical+0x60>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d00b      	beq.n	800be86 <vPortEnterCritical+0x4e>
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	603b      	str	r3, [r7, #0]
}
 800be80:	bf00      	nop
 800be82:	bf00      	nop
 800be84:	e7fd      	b.n	800be82 <vPortEnterCritical+0x4a>
	}
}
 800be86:	bf00      	nop
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	20000418 	.word	0x20000418
 800be98:	e000ed04 	.word	0xe000ed04

0800be9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bea2:	4b12      	ldr	r3, [pc, #72]	@ (800beec <vPortExitCritical+0x50>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d10b      	bne.n	800bec2 <vPortExitCritical+0x26>
	__asm volatile
 800beaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beae:	f383 8811 	msr	BASEPRI, r3
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	f3bf 8f4f 	dsb	sy
 800beba:	607b      	str	r3, [r7, #4]
}
 800bebc:	bf00      	nop
 800bebe:	bf00      	nop
 800bec0:	e7fd      	b.n	800bebe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bec2:	4b0a      	ldr	r3, [pc, #40]	@ (800beec <vPortExitCritical+0x50>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	3b01      	subs	r3, #1
 800bec8:	4a08      	ldr	r2, [pc, #32]	@ (800beec <vPortExitCritical+0x50>)
 800beca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800becc:	4b07      	ldr	r3, [pc, #28]	@ (800beec <vPortExitCritical+0x50>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d105      	bne.n	800bee0 <vPortExitCritical+0x44>
 800bed4:	2300      	movs	r3, #0
 800bed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	f383 8811 	msr	BASEPRI, r3
}
 800bede:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr
 800beec:	20000418 	.word	0x20000418

0800bef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bef0:	f3ef 8009 	mrs	r0, PSP
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	4b15      	ldr	r3, [pc, #84]	@ (800bf50 <pxCurrentTCBConst>)
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	f01e 0f10 	tst.w	lr, #16
 800bf00:	bf08      	it	eq
 800bf02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf0a:	6010      	str	r0, [r2, #0]
 800bf0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bf14:	f380 8811 	msr	BASEPRI, r0
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f7fe fe56 	bl	800abd0 <vTaskSwitchContext>
 800bf24:	f04f 0000 	mov.w	r0, #0
 800bf28:	f380 8811 	msr	BASEPRI, r0
 800bf2c:	bc09      	pop	{r0, r3}
 800bf2e:	6819      	ldr	r1, [r3, #0]
 800bf30:	6808      	ldr	r0, [r1, #0]
 800bf32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf36:	f01e 0f10 	tst.w	lr, #16
 800bf3a:	bf08      	it	eq
 800bf3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf40:	f380 8809 	msr	PSP, r0
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	f3af 8000 	nop.w

0800bf50 <pxCurrentTCBConst>:
 800bf50:	200009e4 	.word	0x200009e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf54:	bf00      	nop
 800bf56:	bf00      	nop

0800bf58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf62:	f383 8811 	msr	BASEPRI, r3
 800bf66:	f3bf 8f6f 	isb	sy
 800bf6a:	f3bf 8f4f 	dsb	sy
 800bf6e:	607b      	str	r3, [r7, #4]
}
 800bf70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf72:	f7fe fd73 	bl	800aa5c <xTaskIncrementTick>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d003      	beq.n	800bf84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf7c:	4b06      	ldr	r3, [pc, #24]	@ (800bf98 <SysTick_Handler+0x40>)
 800bf7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf82:	601a      	str	r2, [r3, #0]
 800bf84:	2300      	movs	r3, #0
 800bf86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	f383 8811 	msr	BASEPRI, r3
}
 800bf8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf90:	bf00      	nop
 800bf92:	3708      	adds	r7, #8
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	e000ed04 	.word	0xe000ed04

0800bf9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bfa0:	4b0b      	ldr	r3, [pc, #44]	@ (800bfd0 <vPortSetupTimerInterrupt+0x34>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bfa6:	4b0b      	ldr	r3, [pc, #44]	@ (800bfd4 <vPortSetupTimerInterrupt+0x38>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bfac:	4b0a      	ldr	r3, [pc, #40]	@ (800bfd8 <vPortSetupTimerInterrupt+0x3c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a0a      	ldr	r2, [pc, #40]	@ (800bfdc <vPortSetupTimerInterrupt+0x40>)
 800bfb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb6:	099b      	lsrs	r3, r3, #6
 800bfb8:	4a09      	ldr	r2, [pc, #36]	@ (800bfe0 <vPortSetupTimerInterrupt+0x44>)
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bfbe:	4b04      	ldr	r3, [pc, #16]	@ (800bfd0 <vPortSetupTimerInterrupt+0x34>)
 800bfc0:	2207      	movs	r2, #7
 800bfc2:	601a      	str	r2, [r3, #0]
}
 800bfc4:	bf00      	nop
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr
 800bfce:	bf00      	nop
 800bfd0:	e000e010 	.word	0xe000e010
 800bfd4:	e000e018 	.word	0xe000e018
 800bfd8:	2000040c 	.word	0x2000040c
 800bfdc:	10624dd3 	.word	0x10624dd3
 800bfe0:	e000e014 	.word	0xe000e014

0800bfe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfe4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bff4 <vPortEnableVFP+0x10>
 800bfe8:	6801      	ldr	r1, [r0, #0]
 800bfea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bfee:	6001      	str	r1, [r0, #0]
 800bff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bff2:	bf00      	nop
 800bff4:	e000ed88 	.word	0xe000ed88

0800bff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bff8:	b480      	push	{r7}
 800bffa:	b085      	sub	sp, #20
 800bffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bffe:	f3ef 8305 	mrs	r3, IPSR
 800c002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2b0f      	cmp	r3, #15
 800c008:	d915      	bls.n	800c036 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c00a:	4a18      	ldr	r2, [pc, #96]	@ (800c06c <vPortValidateInterruptPriority+0x74>)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4413      	add	r3, r2
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c014:	4b16      	ldr	r3, [pc, #88]	@ (800c070 <vPortValidateInterruptPriority+0x78>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	7afa      	ldrb	r2, [r7, #11]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d20b      	bcs.n	800c036 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	607b      	str	r3, [r7, #4]
}
 800c030:	bf00      	nop
 800c032:	bf00      	nop
 800c034:	e7fd      	b.n	800c032 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c036:	4b0f      	ldr	r3, [pc, #60]	@ (800c074 <vPortValidateInterruptPriority+0x7c>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c03e:	4b0e      	ldr	r3, [pc, #56]	@ (800c078 <vPortValidateInterruptPriority+0x80>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	429a      	cmp	r2, r3
 800c044:	d90b      	bls.n	800c05e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c04a:	f383 8811 	msr	BASEPRI, r3
 800c04e:	f3bf 8f6f 	isb	sy
 800c052:	f3bf 8f4f 	dsb	sy
 800c056:	603b      	str	r3, [r7, #0]
}
 800c058:	bf00      	nop
 800c05a:	bf00      	nop
 800c05c:	e7fd      	b.n	800c05a <vPortValidateInterruptPriority+0x62>
	}
 800c05e:	bf00      	nop
 800c060:	3714      	adds	r7, #20
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	e000e3f0 	.word	0xe000e3f0
 800c070:	20000b18 	.word	0x20000b18
 800c074:	e000ed0c 	.word	0xe000ed0c
 800c078:	20000b1c 	.word	0x20000b1c

0800c07c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b08a      	sub	sp, #40	@ 0x28
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c084:	2300      	movs	r3, #0
 800c086:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c088:	f7fe fbac 	bl	800a7e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c08c:	4b5c      	ldr	r3, [pc, #368]	@ (800c200 <pvPortMalloc+0x184>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d101      	bne.n	800c098 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c094:	f000 f924 	bl	800c2e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c098:	4b5a      	ldr	r3, [pc, #360]	@ (800c204 <pvPortMalloc+0x188>)
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	4013      	ands	r3, r2
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f040 8095 	bne.w	800c1d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d01e      	beq.n	800c0ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c0ac:	2208      	movs	r2, #8
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f003 0307 	and.w	r3, r3, #7
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d015      	beq.n	800c0ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f023 0307 	bic.w	r3, r3, #7
 800c0c4:	3308      	adds	r3, #8
 800c0c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f003 0307 	and.w	r3, r3, #7
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00b      	beq.n	800c0ea <pvPortMalloc+0x6e>
	__asm volatile
 800c0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	617b      	str	r3, [r7, #20]
}
 800c0e4:	bf00      	nop
 800c0e6:	bf00      	nop
 800c0e8:	e7fd      	b.n	800c0e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d06f      	beq.n	800c1d0 <pvPortMalloc+0x154>
 800c0f0:	4b45      	ldr	r3, [pc, #276]	@ (800c208 <pvPortMalloc+0x18c>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d86a      	bhi.n	800c1d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c0fa:	4b44      	ldr	r3, [pc, #272]	@ (800c20c <pvPortMalloc+0x190>)
 800c0fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c0fe:	4b43      	ldr	r3, [pc, #268]	@ (800c20c <pvPortMalloc+0x190>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c104:	e004      	b.n	800c110 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c108:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	429a      	cmp	r2, r3
 800c118:	d903      	bls.n	800c122 <pvPortMalloc+0xa6>
 800c11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d1f1      	bne.n	800c106 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c122:	4b37      	ldr	r3, [pc, #220]	@ (800c200 <pvPortMalloc+0x184>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c128:	429a      	cmp	r2, r3
 800c12a:	d051      	beq.n	800c1d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c12c:	6a3b      	ldr	r3, [r7, #32]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2208      	movs	r2, #8
 800c132:	4413      	add	r3, r2
 800c134:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	6a3b      	ldr	r3, [r7, #32]
 800c13c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c140:	685a      	ldr	r2, [r3, #4]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	1ad2      	subs	r2, r2, r3
 800c146:	2308      	movs	r3, #8
 800c148:	005b      	lsls	r3, r3, #1
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d920      	bls.n	800c190 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c14e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4413      	add	r3, r2
 800c154:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c156:	69bb      	ldr	r3, [r7, #24]
 800c158:	f003 0307 	and.w	r3, r3, #7
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00b      	beq.n	800c178 <pvPortMalloc+0xfc>
	__asm volatile
 800c160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	613b      	str	r3, [r7, #16]
}
 800c172:	bf00      	nop
 800c174:	bf00      	nop
 800c176:	e7fd      	b.n	800c174 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	1ad2      	subs	r2, r2, r3
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c18a:	69b8      	ldr	r0, [r7, #24]
 800c18c:	f000 f90a 	bl	800c3a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c190:	4b1d      	ldr	r3, [pc, #116]	@ (800c208 <pvPortMalloc+0x18c>)
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	1ad3      	subs	r3, r2, r3
 800c19a:	4a1b      	ldr	r2, [pc, #108]	@ (800c208 <pvPortMalloc+0x18c>)
 800c19c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c19e:	4b1a      	ldr	r3, [pc, #104]	@ (800c208 <pvPortMalloc+0x18c>)
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	4b1b      	ldr	r3, [pc, #108]	@ (800c210 <pvPortMalloc+0x194>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d203      	bcs.n	800c1b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c1aa:	4b17      	ldr	r3, [pc, #92]	@ (800c208 <pvPortMalloc+0x18c>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a18      	ldr	r2, [pc, #96]	@ (800c210 <pvPortMalloc+0x194>)
 800c1b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b4:	685a      	ldr	r2, [r3, #4]
 800c1b6:	4b13      	ldr	r3, [pc, #76]	@ (800c204 <pvPortMalloc+0x188>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	431a      	orrs	r2, r3
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c1c6:	4b13      	ldr	r3, [pc, #76]	@ (800c214 <pvPortMalloc+0x198>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	4a11      	ldr	r2, [pc, #68]	@ (800c214 <pvPortMalloc+0x198>)
 800c1ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c1d0:	f7fe fb16 	bl	800a800 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	f003 0307 	and.w	r3, r3, #7
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00b      	beq.n	800c1f6 <pvPortMalloc+0x17a>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	60fb      	str	r3, [r7, #12]
}
 800c1f0:	bf00      	nop
 800c1f2:	bf00      	nop
 800c1f4:	e7fd      	b.n	800c1f2 <pvPortMalloc+0x176>
	return pvReturn;
 800c1f6:	69fb      	ldr	r3, [r7, #28]
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3728      	adds	r7, #40	@ 0x28
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	20007888 	.word	0x20007888
 800c204:	2000789c 	.word	0x2000789c
 800c208:	2000788c 	.word	0x2000788c
 800c20c:	20007880 	.word	0x20007880
 800c210:	20007890 	.word	0x20007890
 800c214:	20007894 	.word	0x20007894

0800c218 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b086      	sub	sp, #24
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d04f      	beq.n	800c2ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c22a:	2308      	movs	r3, #8
 800c22c:	425b      	negs	r3, r3
 800c22e:	697a      	ldr	r2, [r7, #20]
 800c230:	4413      	add	r3, r2
 800c232:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	685a      	ldr	r2, [r3, #4]
 800c23c:	4b25      	ldr	r3, [pc, #148]	@ (800c2d4 <vPortFree+0xbc>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4013      	ands	r3, r2
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10b      	bne.n	800c25e <vPortFree+0x46>
	__asm volatile
 800c246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c24a:	f383 8811 	msr	BASEPRI, r3
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	60fb      	str	r3, [r7, #12]
}
 800c258:	bf00      	nop
 800c25a:	bf00      	nop
 800c25c:	e7fd      	b.n	800c25a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00b      	beq.n	800c27e <vPortFree+0x66>
	__asm volatile
 800c266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	60bb      	str	r3, [r7, #8]
}
 800c278:	bf00      	nop
 800c27a:	bf00      	nop
 800c27c:	e7fd      	b.n	800c27a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	685a      	ldr	r2, [r3, #4]
 800c282:	4b14      	ldr	r3, [pc, #80]	@ (800c2d4 <vPortFree+0xbc>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4013      	ands	r3, r2
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d01e      	beq.n	800c2ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d11a      	bne.n	800c2ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	685a      	ldr	r2, [r3, #4]
 800c298:	4b0e      	ldr	r3, [pc, #56]	@ (800c2d4 <vPortFree+0xbc>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	43db      	mvns	r3, r3
 800c29e:	401a      	ands	r2, r3
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c2a4:	f7fe fa9e 	bl	800a7e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	685a      	ldr	r2, [r3, #4]
 800c2ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c2d8 <vPortFree+0xc0>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	4a09      	ldr	r2, [pc, #36]	@ (800c2d8 <vPortFree+0xc0>)
 800c2b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2b6:	6938      	ldr	r0, [r7, #16]
 800c2b8:	f000 f874 	bl	800c3a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c2bc:	4b07      	ldr	r3, [pc, #28]	@ (800c2dc <vPortFree+0xc4>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	4a06      	ldr	r2, [pc, #24]	@ (800c2dc <vPortFree+0xc4>)
 800c2c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c2c6:	f7fe fa9b 	bl	800a800 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c2ca:	bf00      	nop
 800c2cc:	3718      	adds	r7, #24
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	2000789c 	.word	0x2000789c
 800c2d8:	2000788c 	.word	0x2000788c
 800c2dc:	20007898 	.word	0x20007898

0800c2e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2e6:	f646 5360 	movw	r3, #28000	@ 0x6d60
 800c2ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c2ec:	4b27      	ldr	r3, [pc, #156]	@ (800c38c <prvHeapInit+0xac>)
 800c2ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f003 0307 	and.w	r3, r3, #7
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00c      	beq.n	800c314 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	3307      	adds	r3, #7
 800c2fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f023 0307 	bic.w	r3, r3, #7
 800c306:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	1ad3      	subs	r3, r2, r3
 800c30e:	4a1f      	ldr	r2, [pc, #124]	@ (800c38c <prvHeapInit+0xac>)
 800c310:	4413      	add	r3, r2
 800c312:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c318:	4a1d      	ldr	r2, [pc, #116]	@ (800c390 <prvHeapInit+0xb0>)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c31e:	4b1c      	ldr	r3, [pc, #112]	@ (800c390 <prvHeapInit+0xb0>)
 800c320:	2200      	movs	r2, #0
 800c322:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	68ba      	ldr	r2, [r7, #8]
 800c328:	4413      	add	r3, r2
 800c32a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c32c:	2208      	movs	r2, #8
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	1a9b      	subs	r3, r3, r2
 800c332:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f023 0307 	bic.w	r3, r3, #7
 800c33a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	4a15      	ldr	r2, [pc, #84]	@ (800c394 <prvHeapInit+0xb4>)
 800c340:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c342:	4b14      	ldr	r3, [pc, #80]	@ (800c394 <prvHeapInit+0xb4>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	2200      	movs	r2, #0
 800c348:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c34a:	4b12      	ldr	r3, [pc, #72]	@ (800c394 <prvHeapInit+0xb4>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2200      	movs	r2, #0
 800c350:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	1ad2      	subs	r2, r2, r3
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c360:	4b0c      	ldr	r3, [pc, #48]	@ (800c394 <prvHeapInit+0xb4>)
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	4a0a      	ldr	r2, [pc, #40]	@ (800c398 <prvHeapInit+0xb8>)
 800c36e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	4a09      	ldr	r2, [pc, #36]	@ (800c39c <prvHeapInit+0xbc>)
 800c376:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c378:	4b09      	ldr	r3, [pc, #36]	@ (800c3a0 <prvHeapInit+0xc0>)
 800c37a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c37e:	601a      	str	r2, [r3, #0]
}
 800c380:	bf00      	nop
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	20000b20 	.word	0x20000b20
 800c390:	20007880 	.word	0x20007880
 800c394:	20007888 	.word	0x20007888
 800c398:	20007890 	.word	0x20007890
 800c39c:	2000788c 	.word	0x2000788c
 800c3a0:	2000789c 	.word	0x2000789c

0800c3a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c3ac:	4b28      	ldr	r3, [pc, #160]	@ (800c450 <prvInsertBlockIntoFreeList+0xac>)
 800c3ae:	60fb      	str	r3, [r7, #12]
 800c3b0:	e002      	b.n	800c3b8 <prvInsertBlockIntoFreeList+0x14>
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	60fb      	str	r3, [r7, #12]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d8f7      	bhi.n	800c3b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d108      	bne.n	800c3e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	685a      	ldr	r2, [r3, #4]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	441a      	add	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	441a      	add	r2, r3
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d118      	bne.n	800c42c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	4b15      	ldr	r3, [pc, #84]	@ (800c454 <prvInsertBlockIntoFreeList+0xb0>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	429a      	cmp	r2, r3
 800c404:	d00d      	beq.n	800c422 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	685a      	ldr	r2, [r3, #4]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	441a      	add	r2, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	601a      	str	r2, [r3, #0]
 800c420:	e008      	b.n	800c434 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c422:	4b0c      	ldr	r3, [pc, #48]	@ (800c454 <prvInsertBlockIntoFreeList+0xb0>)
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	601a      	str	r2, [r3, #0]
 800c42a:	e003      	b.n	800c434 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d002      	beq.n	800c442 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c442:	bf00      	nop
 800c444:	3714      	adds	r7, #20
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop
 800c450:	20007880 	.word	0x20007880
 800c454:	20007888 	.word	0x20007888

0800c458 <arm_cfft_radix8by2_f32>:
 800c458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c45c:	ed2d 8b08 	vpush	{d8-d11}
 800c460:	4607      	mov	r7, r0
 800c462:	4608      	mov	r0, r1
 800c464:	f8b7 c000 	ldrh.w	ip, [r7]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800c46e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800c472:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c476:	f000 80b0 	beq.w	800c5da <arm_cfft_radix8by2_f32+0x182>
 800c47a:	008c      	lsls	r4, r1, #2
 800c47c:	3410      	adds	r4, #16
 800c47e:	f100 0310 	add.w	r3, r0, #16
 800c482:	1906      	adds	r6, r0, r4
 800c484:	3210      	adds	r2, #16
 800c486:	4444      	add	r4, r8
 800c488:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800c48c:	f108 0510 	add.w	r5, r8, #16
 800c490:	ed15 2a04 	vldr	s4, [r5, #-16]
 800c494:	ed55 2a03 	vldr	s5, [r5, #-12]
 800c498:	ed54 4a04 	vldr	s9, [r4, #-16]
 800c49c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800c4a0:	ed14 6a02 	vldr	s12, [r4, #-8]
 800c4a4:	ed54 5a01 	vldr	s11, [r4, #-4]
 800c4a8:	ed53 3a04 	vldr	s7, [r3, #-16]
 800c4ac:	ed15 0a02 	vldr	s0, [r5, #-8]
 800c4b0:	ed55 0a01 	vldr	s1, [r5, #-4]
 800c4b4:	ed56 6a04 	vldr	s13, [r6, #-16]
 800c4b8:	ed16 3a03 	vldr	s6, [r6, #-12]
 800c4bc:	ed13 7a03 	vldr	s14, [r3, #-12]
 800c4c0:	ed13 5a02 	vldr	s10, [r3, #-8]
 800c4c4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c4c8:	ed16 1a02 	vldr	s2, [r6, #-8]
 800c4cc:	ed56 1a01 	vldr	s3, [r6, #-4]
 800c4d0:	ee73 ba82 	vadd.f32	s23, s7, s4
 800c4d4:	ee37 ba22 	vadd.f32	s22, s14, s5
 800c4d8:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800c4dc:	ee33 9a04 	vadd.f32	s18, s6, s8
 800c4e0:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800c4e4:	ee75 aa00 	vadd.f32	s21, s10, s0
 800c4e8:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800c4ec:	ee71 8a06 	vadd.f32	s17, s2, s12
 800c4f0:	ed43 ba04 	vstr	s23, [r3, #-16]
 800c4f4:	ed03 ba03 	vstr	s22, [r3, #-12]
 800c4f8:	ed43 aa02 	vstr	s21, [r3, #-8]
 800c4fc:	ed03 aa01 	vstr	s20, [r3, #-4]
 800c500:	ed06 8a01 	vstr	s16, [r6, #-4]
 800c504:	ed46 9a04 	vstr	s19, [r6, #-16]
 800c508:	ed06 9a03 	vstr	s18, [r6, #-12]
 800c50c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800c510:	ee37 7a62 	vsub.f32	s14, s14, s5
 800c514:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800c518:	ee34 4a43 	vsub.f32	s8, s8, s6
 800c51c:	ed52 6a03 	vldr	s13, [r2, #-12]
 800c520:	ed12 3a04 	vldr	s6, [r2, #-16]
 800c524:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800c528:	ee27 8a26 	vmul.f32	s16, s14, s13
 800c52c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800c530:	ee23 2a83 	vmul.f32	s4, s7, s6
 800c534:	ee64 4a83 	vmul.f32	s9, s9, s6
 800c538:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800c53c:	ee27 7a03 	vmul.f32	s14, s14, s6
 800c540:	ee64 6a26 	vmul.f32	s13, s8, s13
 800c544:	ee24 4a03 	vmul.f32	s8, s8, s6
 800c548:	ee37 7a63 	vsub.f32	s14, s14, s7
 800c54c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c550:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800c554:	ee32 3a08 	vadd.f32	s6, s4, s16
 800c558:	ed05 7a03 	vstr	s14, [r5, #-12]
 800c55c:	ed05 3a04 	vstr	s6, [r5, #-16]
 800c560:	ed04 4a04 	vstr	s8, [r4, #-16]
 800c564:	ed44 6a03 	vstr	s13, [r4, #-12]
 800c568:	ed12 7a01 	vldr	s14, [r2, #-4]
 800c56c:	ee76 6a41 	vsub.f32	s13, s12, s2
 800c570:	ee35 5a40 	vsub.f32	s10, s10, s0
 800c574:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800c578:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c57c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800c580:	ee67 3a87 	vmul.f32	s7, s15, s14
 800c584:	ee66 4a87 	vmul.f32	s9, s13, s14
 800c588:	ee25 4a25 	vmul.f32	s8, s10, s11
 800c58c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c590:	ee25 5a07 	vmul.f32	s10, s10, s14
 800c594:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c598:	ee26 7a07 	vmul.f32	s14, s12, s14
 800c59c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800c5a0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c5a4:	ee74 5a23 	vadd.f32	s11, s8, s7
 800c5a8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800c5ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c5b0:	3310      	adds	r3, #16
 800c5b2:	4563      	cmp	r3, ip
 800c5b4:	ed45 5a02 	vstr	s11, [r5, #-8]
 800c5b8:	f106 0610 	add.w	r6, r6, #16
 800c5bc:	ed45 7a01 	vstr	s15, [r5, #-4]
 800c5c0:	f102 0210 	add.w	r2, r2, #16
 800c5c4:	ed04 6a02 	vstr	s12, [r4, #-8]
 800c5c8:	ed04 7a01 	vstr	s14, [r4, #-4]
 800c5cc:	f105 0510 	add.w	r5, r5, #16
 800c5d0:	f104 0410 	add.w	r4, r4, #16
 800c5d4:	f47f af5c 	bne.w	800c490 <arm_cfft_radix8by2_f32+0x38>
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	b28c      	uxth	r4, r1
 800c5dc:	4621      	mov	r1, r4
 800c5de:	2302      	movs	r3, #2
 800c5e0:	f000 fc60 	bl	800cea4 <arm_radix8_butterfly_f32>
 800c5e4:	ecbd 8b08 	vpop	{d8-d11}
 800c5e8:	4621      	mov	r1, r4
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	4640      	mov	r0, r8
 800c5ee:	2302      	movs	r3, #2
 800c5f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f4:	f000 bc56 	b.w	800cea4 <arm_radix8_butterfly_f32>

0800c5f8 <arm_cfft_radix8by4_f32>:
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	ed2d 8b0a 	vpush	{d8-d12}
 800c600:	b08d      	sub	sp, #52	@ 0x34
 800c602:	460d      	mov	r5, r1
 800c604:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c606:	8801      	ldrh	r1, [r0, #0]
 800c608:	6842      	ldr	r2, [r0, #4]
 800c60a:	900a      	str	r0, [sp, #40]	@ 0x28
 800c60c:	0849      	lsrs	r1, r1, #1
 800c60e:	008b      	lsls	r3, r1, #2
 800c610:	18ee      	adds	r6, r5, r3
 800c612:	18f0      	adds	r0, r6, r3
 800c614:	edd0 5a00 	vldr	s11, [r0]
 800c618:	edd5 7a00 	vldr	s15, [r5]
 800c61c:	ed96 7a00 	vldr	s14, [r6]
 800c620:	edd0 3a01 	vldr	s7, [r0, #4]
 800c624:	ed96 4a01 	vldr	s8, [r6, #4]
 800c628:	ed95 5a01 	vldr	s10, [r5, #4]
 800c62c:	9008      	str	r0, [sp, #32]
 800c62e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800c632:	18c7      	adds	r7, r0, r3
 800c634:	edd7 4a00 	vldr	s9, [r7]
 800c638:	ed97 3a01 	vldr	s6, [r7, #4]
 800c63c:	9701      	str	r7, [sp, #4]
 800c63e:	ee77 6a06 	vadd.f32	s13, s14, s12
 800c642:	462c      	mov	r4, r5
 800c644:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c648:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c64c:	ee16 ca90 	vmov	ip, s13
 800c650:	f844 cb08 	str.w	ip, [r4], #8
 800c654:	ee75 6a23 	vadd.f32	s13, s10, s7
 800c658:	edd6 5a01 	vldr	s11, [r6, #4]
 800c65c:	edd7 2a01 	vldr	s5, [r7, #4]
 800c660:	9404      	str	r4, [sp, #16]
 800c662:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c666:	ee74 3a27 	vadd.f32	s7, s8, s15
 800c66a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c66e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800c672:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800c676:	0849      	lsrs	r1, r1, #1
 800c678:	f102 0e08 	add.w	lr, r2, #8
 800c67c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800c680:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800c684:	9109      	str	r1, [sp, #36]	@ 0x24
 800c686:	ee35 4a47 	vsub.f32	s8, s10, s14
 800c68a:	f1a1 0902 	sub.w	r9, r1, #2
 800c68e:	f8cd e00c 	str.w	lr, [sp, #12]
 800c692:	4631      	mov	r1, r6
 800c694:	ee13 ea90 	vmov	lr, s7
 800c698:	ee36 6a64 	vsub.f32	s12, s12, s9
 800c69c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	edc5 5a01 	vstr	s11, [r5, #4]
 800c6a6:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c6aa:	f841 eb08 	str.w	lr, [r1], #8
 800c6ae:	ee34 5a24 	vadd.f32	s10, s8, s9
 800c6b2:	ee16 ea10 	vmov	lr, s12
 800c6b6:	ed86 5a01 	vstr	s10, [r6, #4]
 800c6ba:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800c6be:	f844 eb08 	str.w	lr, [r4], #8
 800c6c2:	ee77 7a83 	vadd.f32	s15, s15, s6
 800c6c6:	edc0 6a01 	vstr	s13, [r0, #4]
 800c6ca:	9405      	str	r4, [sp, #20]
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	ee17 0a90 	vmov	r0, s15
 800c6d2:	9106      	str	r1, [sp, #24]
 800c6d4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c6d8:	f102 0110 	add.w	r1, r2, #16
 800c6dc:	46bc      	mov	ip, r7
 800c6de:	9100      	str	r1, [sp, #0]
 800c6e0:	f847 0b08 	str.w	r0, [r7], #8
 800c6e4:	f102 0118 	add.w	r1, r2, #24
 800c6e8:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800c6ec:	9102      	str	r1, [sp, #8]
 800c6ee:	ed8c 7a01 	vstr	s14, [ip, #4]
 800c6f2:	9007      	str	r0, [sp, #28]
 800c6f4:	f000 8134 	beq.w	800c960 <arm_cfft_radix8by4_f32+0x368>
 800c6f8:	f102 0920 	add.w	r9, r2, #32
 800c6fc:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800c700:	9a01      	ldr	r2, [sp, #4]
 800c702:	f8dd a000 	ldr.w	sl, [sp]
 800c706:	3b0c      	subs	r3, #12
 800c708:	4683      	mov	fp, r0
 800c70a:	4463      	add	r3, ip
 800c70c:	f105 0e10 	add.w	lr, r5, #16
 800c710:	f1a4 010c 	sub.w	r1, r4, #12
 800c714:	f104 0510 	add.w	r5, r4, #16
 800c718:	f1a6 0c0c 	sub.w	ip, r6, #12
 800c71c:	f1a2 040c 	sub.w	r4, r2, #12
 800c720:	f106 0010 	add.w	r0, r6, #16
 800c724:	3210      	adds	r2, #16
 800c726:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800c72a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800c72e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c732:	ed52 1a02 	vldr	s3, [r2, #-8]
 800c736:	ed55 6a01 	vldr	s13, [r5, #-4]
 800c73a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800c73e:	ed12 1a01 	vldr	s2, [r2, #-4]
 800c742:	ed10 8a01 	vldr	s16, [r0, #-4]
 800c746:	ee35 4a25 	vadd.f32	s8, s10, s11
 800c74a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800c74e:	ee37 7a84 	vadd.f32	s14, s15, s8
 800c752:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c756:	ee37 7a21 	vadd.f32	s14, s14, s3
 800c75a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800c75e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800c762:	ed10 7a01 	vldr	s14, [r0, #-4]
 800c766:	ed52 6a01 	vldr	s13, [r2, #-4]
 800c76a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800c76e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800c772:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c776:	ee70 3a67 	vsub.f32	s7, s0, s15
 800c77a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800c77e:	ed94 7a02 	vldr	s14, [r4, #8]
 800c782:	ed9c 2a02 	vldr	s4, [ip, #8]
 800c786:	ed91 ba02 	vldr	s22, [r1, #8]
 800c78a:	edd3 9a02 	vldr	s19, [r3, #8]
 800c78e:	edd4 2a01 	vldr	s5, [r4, #4]
 800c792:	ed9c 9a01 	vldr	s18, [ip, #4]
 800c796:	ed93 5a01 	vldr	s10, [r3, #4]
 800c79a:	edd1 0a01 	vldr	s1, [r1, #4]
 800c79e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800c7a2:	ee32 2a47 	vsub.f32	s4, s4, s14
 800c7a6:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800c7aa:	ee79 4a22 	vadd.f32	s9, s18, s5
 800c7ae:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800c7b2:	ee79 2a62 	vsub.f32	s5, s18, s5
 800c7b6:	ed8c 7a02 	vstr	s14, [ip, #8]
 800c7ba:	ed91 7a01 	vldr	s14, [r1, #4]
 800c7be:	edd3 8a01 	vldr	s17, [r3, #4]
 800c7c2:	ee34 7a87 	vadd.f32	s14, s9, s14
 800c7c6:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800c7ca:	ee37 7a28 	vadd.f32	s14, s14, s17
 800c7ce:	ee32 9a60 	vsub.f32	s18, s4, s1
 800c7d2:	ed8c 7a01 	vstr	s14, [ip, #4]
 800c7d6:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800c7da:	ed1a aa02 	vldr	s20, [sl, #-8]
 800c7de:	ee73 8a22 	vadd.f32	s17, s6, s5
 800c7e2:	ee39 9a05 	vadd.f32	s18, s18, s10
 800c7e6:	ee7a aac1 	vsub.f32	s21, s21, s2
 800c7ea:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800c7ee:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800c7f2:	ee69 ba07 	vmul.f32	s23, s18, s14
 800c7f6:	ee6a aa87 	vmul.f32	s21, s21, s14
 800c7fa:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800c7fe:	ee63 ca87 	vmul.f32	s25, s7, s14
 800c802:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800c806:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800c80a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800c80e:	ee73 3aea 	vsub.f32	s7, s7, s21
 800c812:	ee78 8a89 	vadd.f32	s17, s17, s18
 800c816:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800c81a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800c81e:	ee34 4a67 	vsub.f32	s8, s8, s15
 800c822:	ee76 6acb 	vsub.f32	s13, s13, s22
 800c826:	ee36 6a48 	vsub.f32	s12, s12, s16
 800c82a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800c82e:	ed00 7a02 	vstr	s14, [r0, #-8]
 800c832:	ed40 3a01 	vstr	s7, [r0, #-4]
 800c836:	edc1 8a01 	vstr	s17, [r1, #4]
 800c83a:	ed81 aa02 	vstr	s20, [r1, #8]
 800c83e:	ed59 3a04 	vldr	s7, [r9, #-16]
 800c842:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800c846:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800c84a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800c84e:	ee34 4a61 	vsub.f32	s8, s8, s3
 800c852:	ee36 6a41 	vsub.f32	s12, s12, s2
 800c856:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800c85a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800c85e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800c862:	ee26 6a23 	vmul.f32	s12, s12, s7
 800c866:	ee24 4a26 	vmul.f32	s8, s8, s13
 800c86a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c86e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800c872:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800c876:	ee36 6a44 	vsub.f32	s12, s12, s8
 800c87a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c87e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800c882:	ee79 3a29 	vadd.f32	s7, s18, s19
 800c886:	ee75 6a60 	vsub.f32	s13, s10, s1
 800c88a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800c88e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c892:	ed45 3a02 	vstr	s7, [r5, #-8]
 800c896:	ed05 6a01 	vstr	s12, [r5, #-4]
 800c89a:	ed84 7a01 	vstr	s14, [r4, #4]
 800c89e:	ed84 4a02 	vstr	s8, [r4, #8]
 800c8a2:	ee35 6a81 	vadd.f32	s12, s11, s2
 800c8a6:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800c8aa:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800c8ae:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800c8b2:	ee33 3a62 	vsub.f32	s6, s6, s5
 800c8b6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800c8ba:	ee67 2a26 	vmul.f32	s5, s14, s13
 800c8be:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800c8c2:	ee26 5a25 	vmul.f32	s10, s12, s11
 800c8c6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c8ca:	ee26 6a26 	vmul.f32	s12, s12, s13
 800c8ce:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c8d2:	ee63 6a26 	vmul.f32	s13, s6, s13
 800c8d6:	ee23 3a25 	vmul.f32	s6, s6, s11
 800c8da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c8de:	ee75 5a24 	vadd.f32	s11, s10, s9
 800c8e2:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800c8e6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c8ea:	f1bb 0b01 	subs.w	fp, fp, #1
 800c8ee:	ed42 5a02 	vstr	s11, [r2, #-8]
 800c8f2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c8f6:	f10e 0e08 	add.w	lr, lr, #8
 800c8fa:	ed83 3a02 	vstr	s6, [r3, #8]
 800c8fe:	ed83 7a01 	vstr	s14, [r3, #4]
 800c902:	f1ac 0c08 	sub.w	ip, ip, #8
 800c906:	f10a 0a08 	add.w	sl, sl, #8
 800c90a:	f100 0008 	add.w	r0, r0, #8
 800c90e:	f1a1 0108 	sub.w	r1, r1, #8
 800c912:	f109 0910 	add.w	r9, r9, #16
 800c916:	f105 0508 	add.w	r5, r5, #8
 800c91a:	f1a4 0408 	sub.w	r4, r4, #8
 800c91e:	f108 0818 	add.w	r8, r8, #24
 800c922:	f102 0208 	add.w	r2, r2, #8
 800c926:	f1a3 0308 	sub.w	r3, r3, #8
 800c92a:	f47f aefc 	bne.w	800c726 <arm_cfft_radix8by4_f32+0x12e>
 800c92e:	9907      	ldr	r1, [sp, #28]
 800c930:	9800      	ldr	r0, [sp, #0]
 800c932:	00cb      	lsls	r3, r1, #3
 800c934:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800c938:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c93c:	9100      	str	r1, [sp, #0]
 800c93e:	9904      	ldr	r1, [sp, #16]
 800c940:	4419      	add	r1, r3
 800c942:	9104      	str	r1, [sp, #16]
 800c944:	9903      	ldr	r1, [sp, #12]
 800c946:	4419      	add	r1, r3
 800c948:	9103      	str	r1, [sp, #12]
 800c94a:	9906      	ldr	r1, [sp, #24]
 800c94c:	4419      	add	r1, r3
 800c94e:	9106      	str	r1, [sp, #24]
 800c950:	9905      	ldr	r1, [sp, #20]
 800c952:	441f      	add	r7, r3
 800c954:	4419      	add	r1, r3
 800c956:	9b02      	ldr	r3, [sp, #8]
 800c958:	9105      	str	r1, [sp, #20]
 800c95a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c95e:	9302      	str	r3, [sp, #8]
 800c960:	9904      	ldr	r1, [sp, #16]
 800c962:	9805      	ldr	r0, [sp, #20]
 800c964:	ed91 4a00 	vldr	s8, [r1]
 800c968:	edd0 6a00 	vldr	s13, [r0]
 800c96c:	9b06      	ldr	r3, [sp, #24]
 800c96e:	ed97 3a00 	vldr	s6, [r7]
 800c972:	edd3 7a00 	vldr	s15, [r3]
 800c976:	edd0 4a01 	vldr	s9, [r0, #4]
 800c97a:	edd1 3a01 	vldr	s7, [r1, #4]
 800c97e:	ed97 2a01 	vldr	s4, [r7, #4]
 800c982:	ed93 7a01 	vldr	s14, [r3, #4]
 800c986:	9a03      	ldr	r2, [sp, #12]
 800c988:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800c98c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800c990:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800c994:	ee37 5a86 	vadd.f32	s10, s15, s12
 800c998:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800c99c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800c9a0:	ee74 6a66 	vsub.f32	s13, s8, s13
 800c9a4:	ed81 5a00 	vstr	s10, [r1]
 800c9a8:	ed93 5a01 	vldr	s10, [r3, #4]
 800c9ac:	edd7 4a01 	vldr	s9, [r7, #4]
 800c9b0:	ee35 5a85 	vadd.f32	s10, s11, s10
 800c9b4:	ee37 4a26 	vadd.f32	s8, s14, s13
 800c9b8:	ee35 5a24 	vadd.f32	s10, s10, s9
 800c9bc:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800c9c0:	ed81 5a01 	vstr	s10, [r1, #4]
 800c9c4:	edd2 1a00 	vldr	s3, [r2]
 800c9c8:	edd2 2a01 	vldr	s5, [r2, #4]
 800c9cc:	ee34 5a83 	vadd.f32	s10, s9, s6
 800c9d0:	ee34 4a42 	vsub.f32	s8, s8, s4
 800c9d4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c9d8:	ee64 4a21 	vmul.f32	s9, s8, s3
 800c9dc:	ee24 4a22 	vmul.f32	s8, s8, s5
 800c9e0:	ee65 2a22 	vmul.f32	s5, s10, s5
 800c9e4:	ee25 5a21 	vmul.f32	s10, s10, s3
 800c9e8:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800c9ec:	ee35 5a44 	vsub.f32	s10, s10, s8
 800c9f0:	edc3 2a00 	vstr	s5, [r3]
 800c9f4:	ed83 5a01 	vstr	s10, [r3, #4]
 800c9f8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800c9fc:	9b00      	ldr	r3, [sp, #0]
 800c9fe:	ee36 6a43 	vsub.f32	s12, s12, s6
 800ca02:	ed93 4a01 	vldr	s8, [r3, #4]
 800ca06:	ed93 5a00 	vldr	s10, [r3]
 800ca0a:	9b02      	ldr	r3, [sp, #8]
 800ca0c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800ca10:	ee66 4a05 	vmul.f32	s9, s12, s10
 800ca14:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ca18:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ca1c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800ca20:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ca24:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800ca28:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ca2c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ca30:	ed80 6a01 	vstr	s12, [r0, #4]
 800ca34:	edc0 5a00 	vstr	s11, [r0]
 800ca38:	edd3 5a01 	vldr	s11, [r3, #4]
 800ca3c:	edd3 6a00 	vldr	s13, [r3]
 800ca40:	ee37 7a02 	vadd.f32	s14, s14, s4
 800ca44:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800ca48:	ee27 6a26 	vmul.f32	s12, s14, s13
 800ca4c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ca50:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ca54:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ca58:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ca5c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ca60:	ed87 7a01 	vstr	s14, [r7, #4]
 800ca64:	edc7 7a00 	vstr	s15, [r7]
 800ca68:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	686a      	ldr	r2, [r5, #4]
 800ca70:	2304      	movs	r3, #4
 800ca72:	f000 fa17 	bl	800cea4 <arm_radix8_butterfly_f32>
 800ca76:	4630      	mov	r0, r6
 800ca78:	4621      	mov	r1, r4
 800ca7a:	686a      	ldr	r2, [r5, #4]
 800ca7c:	2304      	movs	r3, #4
 800ca7e:	f000 fa11 	bl	800cea4 <arm_radix8_butterfly_f32>
 800ca82:	9808      	ldr	r0, [sp, #32]
 800ca84:	686a      	ldr	r2, [r5, #4]
 800ca86:	4621      	mov	r1, r4
 800ca88:	2304      	movs	r3, #4
 800ca8a:	f000 fa0b 	bl	800cea4 <arm_radix8_butterfly_f32>
 800ca8e:	686a      	ldr	r2, [r5, #4]
 800ca90:	9801      	ldr	r0, [sp, #4]
 800ca92:	4621      	mov	r1, r4
 800ca94:	2304      	movs	r3, #4
 800ca96:	b00d      	add	sp, #52	@ 0x34
 800ca98:	ecbd 8b0a 	vpop	{d8-d12}
 800ca9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa0:	f000 ba00 	b.w	800cea4 <arm_radix8_butterfly_f32>

0800caa4 <arm_cfft_f32>:
 800caa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa8:	2a01      	cmp	r2, #1
 800caaa:	4606      	mov	r6, r0
 800caac:	4617      	mov	r7, r2
 800caae:	460c      	mov	r4, r1
 800cab0:	4698      	mov	r8, r3
 800cab2:	8805      	ldrh	r5, [r0, #0]
 800cab4:	d056      	beq.n	800cb64 <arm_cfft_f32+0xc0>
 800cab6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800caba:	d063      	beq.n	800cb84 <arm_cfft_f32+0xe0>
 800cabc:	d916      	bls.n	800caec <arm_cfft_f32+0x48>
 800cabe:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800cac2:	d01a      	beq.n	800cafa <arm_cfft_f32+0x56>
 800cac4:	d947      	bls.n	800cb56 <arm_cfft_f32+0xb2>
 800cac6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800caca:	d05b      	beq.n	800cb84 <arm_cfft_f32+0xe0>
 800cacc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800cad0:	d105      	bne.n	800cade <arm_cfft_f32+0x3a>
 800cad2:	2301      	movs	r3, #1
 800cad4:	6872      	ldr	r2, [r6, #4]
 800cad6:	4629      	mov	r1, r5
 800cad8:	4620      	mov	r0, r4
 800cada:	f000 f9e3 	bl	800cea4 <arm_radix8_butterfly_f32>
 800cade:	f1b8 0f00 	cmp.w	r8, #0
 800cae2:	d111      	bne.n	800cb08 <arm_cfft_f32+0x64>
 800cae4:	2f01      	cmp	r7, #1
 800cae6:	d016      	beq.n	800cb16 <arm_cfft_f32+0x72>
 800cae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caec:	2d20      	cmp	r5, #32
 800caee:	d049      	beq.n	800cb84 <arm_cfft_f32+0xe0>
 800caf0:	d935      	bls.n	800cb5e <arm_cfft_f32+0xba>
 800caf2:	2d40      	cmp	r5, #64	@ 0x40
 800caf4:	d0ed      	beq.n	800cad2 <arm_cfft_f32+0x2e>
 800caf6:	2d80      	cmp	r5, #128	@ 0x80
 800caf8:	d1f1      	bne.n	800cade <arm_cfft_f32+0x3a>
 800cafa:	4621      	mov	r1, r4
 800cafc:	4630      	mov	r0, r6
 800cafe:	f7ff fcab 	bl	800c458 <arm_cfft_radix8by2_f32>
 800cb02:	f1b8 0f00 	cmp.w	r8, #0
 800cb06:	d0ed      	beq.n	800cae4 <arm_cfft_f32+0x40>
 800cb08:	68b2      	ldr	r2, [r6, #8]
 800cb0a:	89b1      	ldrh	r1, [r6, #12]
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	f000 f841 	bl	800cb94 <arm_bitreversal_32>
 800cb12:	2f01      	cmp	r7, #1
 800cb14:	d1e8      	bne.n	800cae8 <arm_cfft_f32+0x44>
 800cb16:	ee07 5a90 	vmov	s15, r5
 800cb1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cb26:	2d00      	cmp	r5, #0
 800cb28:	d0de      	beq.n	800cae8 <arm_cfft_f32+0x44>
 800cb2a:	f104 0108 	add.w	r1, r4, #8
 800cb2e:	2300      	movs	r3, #0
 800cb30:	3301      	adds	r3, #1
 800cb32:	429d      	cmp	r5, r3
 800cb34:	f101 0108 	add.w	r1, r1, #8
 800cb38:	ed11 7a04 	vldr	s14, [r1, #-16]
 800cb3c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800cb40:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cb44:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800cb48:	ed01 7a04 	vstr	s14, [r1, #-16]
 800cb4c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800cb50:	d1ee      	bne.n	800cb30 <arm_cfft_f32+0x8c>
 800cb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb56:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800cb5a:	d0ba      	beq.n	800cad2 <arm_cfft_f32+0x2e>
 800cb5c:	e7bf      	b.n	800cade <arm_cfft_f32+0x3a>
 800cb5e:	2d10      	cmp	r5, #16
 800cb60:	d0cb      	beq.n	800cafa <arm_cfft_f32+0x56>
 800cb62:	e7bc      	b.n	800cade <arm_cfft_f32+0x3a>
 800cb64:	b19d      	cbz	r5, 800cb8e <arm_cfft_f32+0xea>
 800cb66:	f101 030c 	add.w	r3, r1, #12
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800cb70:	3201      	adds	r2, #1
 800cb72:	eef1 7a67 	vneg.f32	s15, s15
 800cb76:	4295      	cmp	r5, r2
 800cb78:	ed43 7a02 	vstr	s15, [r3, #-8]
 800cb7c:	f103 0308 	add.w	r3, r3, #8
 800cb80:	d1f4      	bne.n	800cb6c <arm_cfft_f32+0xc8>
 800cb82:	e798      	b.n	800cab6 <arm_cfft_f32+0x12>
 800cb84:	4621      	mov	r1, r4
 800cb86:	4630      	mov	r0, r6
 800cb88:	f7ff fd36 	bl	800c5f8 <arm_cfft_radix8by4_f32>
 800cb8c:	e7a7      	b.n	800cade <arm_cfft_f32+0x3a>
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d0aa      	beq.n	800cae8 <arm_cfft_f32+0x44>
 800cb92:	e7b9      	b.n	800cb08 <arm_cfft_f32+0x64>

0800cb94 <arm_bitreversal_32>:
 800cb94:	b1e9      	cbz	r1, 800cbd2 <arm_bitreversal_32+0x3e>
 800cb96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb98:	2500      	movs	r5, #0
 800cb9a:	f102 0e02 	add.w	lr, r2, #2
 800cb9e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800cba2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800cba6:	08a4      	lsrs	r4, r4, #2
 800cba8:	089b      	lsrs	r3, r3, #2
 800cbaa:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800cbae:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800cbb2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800cbb6:	00a6      	lsls	r6, r4, #2
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800cbbe:	3304      	adds	r3, #4
 800cbc0:	1d34      	adds	r4, r6, #4
 800cbc2:	3502      	adds	r5, #2
 800cbc4:	58c6      	ldr	r6, [r0, r3]
 800cbc6:	5907      	ldr	r7, [r0, r4]
 800cbc8:	50c7      	str	r7, [r0, r3]
 800cbca:	428d      	cmp	r5, r1
 800cbcc:	5106      	str	r6, [r0, r4]
 800cbce:	d3e6      	bcc.n	800cb9e <arm_bitreversal_32+0xa>
 800cbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbd2:	4770      	bx	lr

0800cbd4 <arm_cmplx_mag_f32>:
 800cbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd8:	ed2d 8b02 	vpush	{d8}
 800cbdc:	0897      	lsrs	r7, r2, #2
 800cbde:	b084      	sub	sp, #16
 800cbe0:	d077      	beq.n	800ccd2 <arm_cmplx_mag_f32+0xfe>
 800cbe2:	f04f 0800 	mov.w	r8, #0
 800cbe6:	f100 0420 	add.w	r4, r0, #32
 800cbea:	f101 0510 	add.w	r5, r1, #16
 800cbee:	463e      	mov	r6, r7
 800cbf0:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800cbf4:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800cbf8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cbfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cc00:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc0c:	f2c0 80c5 	blt.w	800cd9a <arm_cmplx_mag_f32+0x1c6>
 800cc10:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc18:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800cc1c:	f100 80cb 	bmi.w	800cdb6 <arm_cmplx_mag_f32+0x1e2>
 800cc20:	ed05 8a04 	vstr	s16, [r5, #-16]
 800cc24:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800cc28:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800cc2c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cc30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cc34:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cc3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc40:	f2c0 80a8 	blt.w	800cd94 <arm_cmplx_mag_f32+0x1c0>
 800cc44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc4c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800cc50:	f100 80a8 	bmi.w	800cda4 <arm_cmplx_mag_f32+0x1d0>
 800cc54:	ed05 8a03 	vstr	s16, [r5, #-12]
 800cc58:	ed14 0a04 	vldr	s0, [r4, #-16]
 800cc5c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800cc60:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cc64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cc68:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cc6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc74:	f2c0 808b 	blt.w	800cd8e <arm_cmplx_mag_f32+0x1ba>
 800cc78:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cc7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc80:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800cc84:	f100 80a9 	bmi.w	800cdda <arm_cmplx_mag_f32+0x206>
 800cc88:	ed05 8a02 	vstr	s16, [r5, #-8]
 800cc8c:	ed14 0a02 	vldr	s0, [r4, #-8]
 800cc90:	ed54 7a01 	vldr	s15, [r4, #-4]
 800cc94:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cc98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cc9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cca0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cca8:	db6e      	blt.n	800cd88 <arm_cmplx_mag_f32+0x1b4>
 800ccaa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ccae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccb2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ccb6:	f100 8087 	bmi.w	800cdc8 <arm_cmplx_mag_f32+0x1f4>
 800ccba:	ed05 8a01 	vstr	s16, [r5, #-4]
 800ccbe:	3e01      	subs	r6, #1
 800ccc0:	f104 0420 	add.w	r4, r4, #32
 800ccc4:	f105 0510 	add.w	r5, r5, #16
 800ccc8:	d192      	bne.n	800cbf0 <arm_cmplx_mag_f32+0x1c>
 800ccca:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800ccce:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800ccd2:	f012 0203 	ands.w	r2, r2, #3
 800ccd6:	d052      	beq.n	800cd7e <arm_cmplx_mag_f32+0x1aa>
 800ccd8:	ed90 0a00 	vldr	s0, [r0]
 800ccdc:	edd0 7a01 	vldr	s15, [r0, #4]
 800cce0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cce4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cce8:	2300      	movs	r3, #0
 800ccea:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ccee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ccf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccf6:	bfb8      	it	lt
 800ccf8:	600b      	strlt	r3, [r1, #0]
 800ccfa:	db08      	blt.n	800cd0e <arm_cmplx_mag_f32+0x13a>
 800ccfc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd04:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800cd08:	d479      	bmi.n	800cdfe <arm_cmplx_mag_f32+0x22a>
 800cd0a:	ed81 8a00 	vstr	s16, [r1]
 800cd0e:	3a01      	subs	r2, #1
 800cd10:	d035      	beq.n	800cd7e <arm_cmplx_mag_f32+0x1aa>
 800cd12:	ed90 0a02 	vldr	s0, [r0, #8]
 800cd16:	edd0 7a03 	vldr	s15, [r0, #12]
 800cd1a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cd1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cd22:	2300      	movs	r3, #0
 800cd24:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cd28:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd30:	bfb8      	it	lt
 800cd32:	604b      	strlt	r3, [r1, #4]
 800cd34:	db08      	blt.n	800cd48 <arm_cmplx_mag_f32+0x174>
 800cd36:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cd3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd3e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800cd42:	d453      	bmi.n	800cdec <arm_cmplx_mag_f32+0x218>
 800cd44:	ed81 8a01 	vstr	s16, [r1, #4]
 800cd48:	2a01      	cmp	r2, #1
 800cd4a:	d018      	beq.n	800cd7e <arm_cmplx_mag_f32+0x1aa>
 800cd4c:	ed90 0a04 	vldr	s0, [r0, #16]
 800cd50:	edd0 7a05 	vldr	s15, [r0, #20]
 800cd54:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cd58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cd62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd6a:	db19      	blt.n	800cda0 <arm_cmplx_mag_f32+0x1cc>
 800cd6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd74:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800cd78:	d44a      	bmi.n	800ce10 <arm_cmplx_mag_f32+0x23c>
 800cd7a:	ed81 8a02 	vstr	s16, [r1, #8]
 800cd7e:	b004      	add	sp, #16
 800cd80:	ecbd 8b02 	vpop	{d8}
 800cd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd88:	f845 8c04 	str.w	r8, [r5, #-4]
 800cd8c:	e797      	b.n	800ccbe <arm_cmplx_mag_f32+0xea>
 800cd8e:	f845 8c08 	str.w	r8, [r5, #-8]
 800cd92:	e77b      	b.n	800cc8c <arm_cmplx_mag_f32+0xb8>
 800cd94:	f845 8c0c 	str.w	r8, [r5, #-12]
 800cd98:	e75e      	b.n	800cc58 <arm_cmplx_mag_f32+0x84>
 800cd9a:	f845 8c10 	str.w	r8, [r5, #-16]
 800cd9e:	e741      	b.n	800cc24 <arm_cmplx_mag_f32+0x50>
 800cda0:	608b      	str	r3, [r1, #8]
 800cda2:	e7ec      	b.n	800cd7e <arm_cmplx_mag_f32+0x1aa>
 800cda4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cda8:	9001      	str	r0, [sp, #4]
 800cdaa:	f003 fa05 	bl	80101b8 <sqrtf>
 800cdae:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cdb2:	9801      	ldr	r0, [sp, #4]
 800cdb4:	e74e      	b.n	800cc54 <arm_cmplx_mag_f32+0x80>
 800cdb6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cdba:	9001      	str	r0, [sp, #4]
 800cdbc:	f003 f9fc 	bl	80101b8 <sqrtf>
 800cdc0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cdc4:	9801      	ldr	r0, [sp, #4]
 800cdc6:	e72b      	b.n	800cc20 <arm_cmplx_mag_f32+0x4c>
 800cdc8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cdcc:	9001      	str	r0, [sp, #4]
 800cdce:	f003 f9f3 	bl	80101b8 <sqrtf>
 800cdd2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cdd6:	9801      	ldr	r0, [sp, #4]
 800cdd8:	e76f      	b.n	800ccba <arm_cmplx_mag_f32+0xe6>
 800cdda:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cdde:	9001      	str	r0, [sp, #4]
 800cde0:	f003 f9ea 	bl	80101b8 <sqrtf>
 800cde4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cde8:	9801      	ldr	r0, [sp, #4]
 800cdea:	e74d      	b.n	800cc88 <arm_cmplx_mag_f32+0xb4>
 800cdec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdf0:	9201      	str	r2, [sp, #4]
 800cdf2:	f003 f9e1 	bl	80101b8 <sqrtf>
 800cdf6:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800cdfa:	9903      	ldr	r1, [sp, #12]
 800cdfc:	e7a2      	b.n	800cd44 <arm_cmplx_mag_f32+0x170>
 800cdfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce02:	9201      	str	r2, [sp, #4]
 800ce04:	f003 f9d8 	bl	80101b8 <sqrtf>
 800ce08:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800ce0c:	9903      	ldr	r1, [sp, #12]
 800ce0e:	e77c      	b.n	800cd0a <arm_cmplx_mag_f32+0x136>
 800ce10:	9101      	str	r1, [sp, #4]
 800ce12:	f003 f9d1 	bl	80101b8 <sqrtf>
 800ce16:	9901      	ldr	r1, [sp, #4]
 800ce18:	e7af      	b.n	800cd7a <arm_cmplx_mag_f32+0x1a6>
 800ce1a:	bf00      	nop

0800ce1c <arm_scale_f32>:
 800ce1c:	b470      	push	{r4, r5, r6}
 800ce1e:	0896      	lsrs	r6, r2, #2
 800ce20:	d025      	beq.n	800ce6e <arm_scale_f32+0x52>
 800ce22:	f100 0410 	add.w	r4, r0, #16
 800ce26:	f101 0310 	add.w	r3, r1, #16
 800ce2a:	4635      	mov	r5, r6
 800ce2c:	ed54 7a04 	vldr	s15, [r4, #-16]
 800ce30:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ce34:	3d01      	subs	r5, #1
 800ce36:	ed43 7a04 	vstr	s15, [r3, #-16]
 800ce3a:	ed54 7a03 	vldr	s15, [r4, #-12]
 800ce3e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ce42:	f104 0410 	add.w	r4, r4, #16
 800ce46:	ed43 7a03 	vstr	s15, [r3, #-12]
 800ce4a:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800ce4e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ce52:	f103 0310 	add.w	r3, r3, #16
 800ce56:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800ce5a:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800ce5e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ce62:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800ce66:	d1e1      	bne.n	800ce2c <arm_scale_f32+0x10>
 800ce68:	0136      	lsls	r6, r6, #4
 800ce6a:	4430      	add	r0, r6
 800ce6c:	4431      	add	r1, r6
 800ce6e:	f012 0203 	ands.w	r2, r2, #3
 800ce72:	d015      	beq.n	800cea0 <arm_scale_f32+0x84>
 800ce74:	edd0 7a00 	vldr	s15, [r0]
 800ce78:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ce7c:	3a01      	subs	r2, #1
 800ce7e:	edc1 7a00 	vstr	s15, [r1]
 800ce82:	d00d      	beq.n	800cea0 <arm_scale_f32+0x84>
 800ce84:	edd0 7a01 	vldr	s15, [r0, #4]
 800ce88:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ce8c:	2a01      	cmp	r2, #1
 800ce8e:	edc1 7a01 	vstr	s15, [r1, #4]
 800ce92:	d005      	beq.n	800cea0 <arm_scale_f32+0x84>
 800ce94:	edd0 7a02 	vldr	s15, [r0, #8]
 800ce98:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ce9c:	ed81 0a02 	vstr	s0, [r1, #8]
 800cea0:	bc70      	pop	{r4, r5, r6}
 800cea2:	4770      	bx	lr

0800cea4 <arm_radix8_butterfly_f32>:
 800cea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea8:	ed2d 8b10 	vpush	{d8-d15}
 800ceac:	b095      	sub	sp, #84	@ 0x54
 800ceae:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800d19c <arm_radix8_butterfly_f32+0x2f8>
 800ceba:	9012      	str	r0, [sp, #72]	@ 0x48
 800cebc:	468b      	mov	fp, r1
 800cebe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cec0:	4689      	mov	r9, r1
 800cec2:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800cec6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cec8:	960f      	str	r6, [sp, #60]	@ 0x3c
 800ceca:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800cece:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800ced2:	eb03 0508 	add.w	r5, r3, r8
 800ced6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800ceda:	eb05 040e 	add.w	r4, r5, lr
 800cede:	0137      	lsls	r7, r6, #4
 800cee0:	eba6 030a 	sub.w	r3, r6, sl
 800cee4:	eb04 000e 	add.w	r0, r4, lr
 800cee8:	44b2      	add	sl, r6
 800ceea:	1d3a      	adds	r2, r7, #4
 800ceec:	9702      	str	r7, [sp, #8]
 800ceee:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800cef2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800cef6:	ebae 0c06 	sub.w	ip, lr, r6
 800cefa:	9703      	str	r7, [sp, #12]
 800cefc:	eb03 0708 	add.w	r7, r3, r8
 800cf00:	9701      	str	r7, [sp, #4]
 800cf02:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800cf06:	9706      	str	r7, [sp, #24]
 800cf08:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800cf0a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800cf0e:	f10e 0104 	add.w	r1, lr, #4
 800cf12:	4439      	add	r1, r7
 800cf14:	443a      	add	r2, r7
 800cf16:	0137      	lsls	r7, r6, #4
 800cf18:	00f6      	lsls	r6, r6, #3
 800cf1a:	9704      	str	r7, [sp, #16]
 800cf1c:	9605      	str	r6, [sp, #20]
 800cf1e:	9f01      	ldr	r7, [sp, #4]
 800cf20:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cf22:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800cf26:	f04f 0c00 	mov.w	ip, #0
 800cf2a:	edd4 6a00 	vldr	s13, [r4]
 800cf2e:	edd7 1a00 	vldr	s3, [r7]
 800cf32:	ed16 aa01 	vldr	s20, [r6, #-4]
 800cf36:	edd5 5a00 	vldr	s11, [r5]
 800cf3a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800cf3e:	ed90 6a00 	vldr	s12, [r0]
 800cf42:	ed51 7a01 	vldr	s15, [r1, #-4]
 800cf46:	ed93 3a00 	vldr	s6, [r3]
 800cf4a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800cf4e:	ee33 2a21 	vadd.f32	s4, s6, s3
 800cf52:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800cf56:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800cf5a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800cf5e:	ee34 4a80 	vadd.f32	s8, s9, s0
 800cf62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cf66:	ee74 6a07 	vadd.f32	s13, s8, s14
 800cf6a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800cf6e:	ed46 6a01 	vstr	s13, [r6, #-4]
 800cf72:	ed85 4a00 	vstr	s8, [r5]
 800cf76:	edd1 6a00 	vldr	s13, [r1]
 800cf7a:	ed94 9a01 	vldr	s18, [r4, #4]
 800cf7e:	edd3 2a01 	vldr	s5, [r3, #4]
 800cf82:	edd7 8a01 	vldr	s17, [r7, #4]
 800cf86:	edd6 0a00 	vldr	s1, [r6]
 800cf8a:	edd5 3a01 	vldr	s7, [r5, #4]
 800cf8e:	ed90 8a01 	vldr	s16, [r0, #4]
 800cf92:	ed92 7a00 	vldr	s14, [r2]
 800cf96:	ee33 3a61 	vsub.f32	s6, s6, s3
 800cf9a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800cf9e:	ee72 aae8 	vsub.f32	s21, s5, s17
 800cfa2:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800cfa6:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800cfaa:	ee77 7a83 	vadd.f32	s15, s15, s6
 800cfae:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800cfb2:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800cfb6:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800cfba:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800cfbe:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800cfc2:	ee77 0a08 	vadd.f32	s1, s14, s16
 800cfc6:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800cfca:	ee37 7a48 	vsub.f32	s14, s14, s16
 800cfce:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800cfd2:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800cfd6:	ee76 6a89 	vadd.f32	s13, s13, s18
 800cfda:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800cfde:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800cfe2:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800cfe6:	ee35 5a42 	vsub.f32	s10, s10, s4
 800cfea:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800cfee:	ee33 2a20 	vadd.f32	s4, s6, s1
 800cff2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800cff6:	ee33 3a60 	vsub.f32	s6, s6, s1
 800cffa:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800cffe:	ee77 0a01 	vadd.f32	s1, s14, s2
 800d002:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800d006:	ee37 7a41 	vsub.f32	s14, s14, s2
 800d00a:	ee73 1a84 	vadd.f32	s3, s7, s8
 800d00e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800d012:	ee76 3a27 	vadd.f32	s7, s12, s15
 800d016:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d01a:	ee32 8a00 	vadd.f32	s16, s4, s0
 800d01e:	ee33 1a45 	vsub.f32	s2, s6, s10
 800d022:	ee32 2a40 	vsub.f32	s4, s4, s0
 800d026:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d02a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800d02e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800d032:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800d036:	ee34 6a67 	vsub.f32	s12, s8, s15
 800d03a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800d03e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800d042:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800d046:	ee77 7a84 	vadd.f32	s15, s15, s8
 800d04a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800d04e:	44dc      	add	ip, fp
 800d050:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800d054:	45e1      	cmp	r9, ip
 800d056:	ed86 8a00 	vstr	s16, [r6]
 800d05a:	ed85 2a01 	vstr	s4, [r5, #4]
 800d05e:	4456      	add	r6, sl
 800d060:	ed02 0a01 	vstr	s0, [r2, #-4]
 800d064:	4455      	add	r5, sl
 800d066:	edc0 6a00 	vstr	s13, [r0]
 800d06a:	ed82 1a00 	vstr	s2, [r2]
 800d06e:	ed80 5a01 	vstr	s10, [r0, #4]
 800d072:	4452      	add	r2, sl
 800d074:	ed01 3a01 	vstr	s6, [r1, #-4]
 800d078:	4450      	add	r0, sl
 800d07a:	edc7 2a00 	vstr	s5, [r7]
 800d07e:	edc4 4a00 	vstr	s9, [r4]
 800d082:	ed83 7a00 	vstr	s14, [r3]
 800d086:	edc1 5a00 	vstr	s11, [r1]
 800d08a:	edc7 3a01 	vstr	s7, [r7, #4]
 800d08e:	4451      	add	r1, sl
 800d090:	ed84 6a01 	vstr	s12, [r4, #4]
 800d094:	4457      	add	r7, sl
 800d096:	edc3 7a01 	vstr	s15, [r3, #4]
 800d09a:	4454      	add	r4, sl
 800d09c:	4453      	add	r3, sl
 800d09e:	f63f af44 	bhi.w	800cf2a <arm_radix8_butterfly_f32+0x86>
 800d0a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0a4:	2b07      	cmp	r3, #7
 800d0a6:	f240 81b7 	bls.w	800d418 <arm_radix8_butterfly_f32+0x574>
 800d0aa:	9b06      	ldr	r3, [sp, #24]
 800d0ac:	9903      	ldr	r1, [sp, #12]
 800d0ae:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d0b0:	9e05      	ldr	r6, [sp, #20]
 800d0b2:	9a04      	ldr	r2, [sp, #16]
 800d0b4:	f103 0c08 	add.w	ip, r3, #8
 800d0b8:	9b02      	ldr	r3, [sp, #8]
 800d0ba:	3108      	adds	r1, #8
 800d0bc:	f108 0808 	add.w	r8, r8, #8
 800d0c0:	1841      	adds	r1, r0, r1
 800d0c2:	3608      	adds	r6, #8
 800d0c4:	330c      	adds	r3, #12
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	4444      	add	r4, r8
 800d0ca:	18c3      	adds	r3, r0, r3
 800d0cc:	9109      	str	r1, [sp, #36]	@ 0x24
 800d0ce:	1981      	adds	r1, r0, r6
 800d0d0:	f10e 0e08 	add.w	lr, lr, #8
 800d0d4:	3208      	adds	r2, #8
 800d0d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d0d8:	9107      	str	r1, [sp, #28]
 800d0da:	4604      	mov	r4, r0
 800d0dc:	4601      	mov	r1, r0
 800d0de:	9304      	str	r3, [sp, #16]
 800d0e0:	f100 030c 	add.w	r3, r0, #12
 800d0e4:	4474      	add	r4, lr
 800d0e6:	f04f 0801 	mov.w	r8, #1
 800d0ea:	1882      	adds	r2, r0, r2
 800d0ec:	4461      	add	r1, ip
 800d0ee:	9305      	str	r3, [sp, #20]
 800d0f0:	464b      	mov	r3, r9
 800d0f2:	940a      	str	r4, [sp, #40]	@ 0x28
 800d0f4:	46c1      	mov	r9, r8
 800d0f6:	9208      	str	r2, [sp, #32]
 800d0f8:	46d8      	mov	r8, fp
 800d0fa:	9106      	str	r1, [sp, #24]
 800d0fc:	f04f 0e00 	mov.w	lr, #0
 800d100:	469b      	mov	fp, r3
 800d102:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d104:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d106:	449e      	add	lr, r3
 800d108:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800d10c:	441a      	add	r2, r3
 800d10e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d110:	441a      	add	r2, r3
 800d112:	18d4      	adds	r4, r2, r3
 800d114:	18e5      	adds	r5, r4, r3
 800d116:	18ee      	adds	r6, r5, r3
 800d118:	18f7      	adds	r7, r6, r3
 800d11a:	eb07 0c03 	add.w	ip, r7, r3
 800d11e:	920d      	str	r2, [sp, #52]	@ 0x34
 800d120:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800d124:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800d128:	910c      	str	r1, [sp, #48]	@ 0x30
 800d12a:	4419      	add	r1, r3
 800d12c:	9103      	str	r1, [sp, #12]
 800d12e:	4419      	add	r1, r3
 800d130:	18ca      	adds	r2, r1, r3
 800d132:	9202      	str	r2, [sp, #8]
 800d134:	441a      	add	r2, r3
 800d136:	18d0      	adds	r0, r2, r3
 800d138:	ed92 ea01 	vldr	s28, [r2, #4]
 800d13c:	9a02      	ldr	r2, [sp, #8]
 800d13e:	edd4 7a00 	vldr	s15, [r4]
 800d142:	edd2 da01 	vldr	s27, [r2, #4]
 800d146:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d148:	ed91 da01 	vldr	s26, [r1, #4]
 800d14c:	ed92 ca01 	vldr	s24, [r2, #4]
 800d150:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d152:	9903      	ldr	r1, [sp, #12]
 800d154:	edcd 7a03 	vstr	s15, [sp, #12]
 800d158:	edd2 7a00 	vldr	s15, [r2]
 800d15c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d15e:	edcd 7a02 	vstr	s15, [sp, #8]
 800d162:	edd2 7a00 	vldr	s15, [r2]
 800d166:	edd0 ea01 	vldr	s29, [r0, #4]
 800d16a:	edd1 ca01 	vldr	s25, [r1, #4]
 800d16e:	eddc ba00 	vldr	s23, [ip]
 800d172:	edd7 aa00 	vldr	s21, [r7]
 800d176:	ed96 aa00 	vldr	s20, [r6]
 800d17a:	edd5 9a00 	vldr	s19, [r5]
 800d17e:	edcd 7a01 	vstr	s15, [sp, #4]
 800d182:	4403      	add	r3, r0
 800d184:	ed93 fa01 	vldr	s30, [r3, #4]
 800d188:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800d18c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800d190:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d194:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800d198:	46cc      	mov	ip, r9
 800d19a:	e001      	b.n	800d1a0 <arm_radix8_butterfly_f32+0x2fc>
 800d19c:	3f3504f3 	.word	0x3f3504f3
 800d1a0:	ed91 6a00 	vldr	s12, [r1]
 800d1a4:	ed93 5a00 	vldr	s10, [r3]
 800d1a8:	edd0 fa00 	vldr	s31, [r0]
 800d1ac:	edd4 7a00 	vldr	s15, [r4]
 800d1b0:	ed95 7a00 	vldr	s14, [r5]
 800d1b4:	ed56 3a01 	vldr	s7, [r6, #-4]
 800d1b8:	ed17 3a01 	vldr	s6, [r7, #-4]
 800d1bc:	ed92 2a00 	vldr	s4, [r2]
 800d1c0:	ed96 0a00 	vldr	s0, [r6]
 800d1c4:	ee33 8a85 	vadd.f32	s16, s7, s10
 800d1c8:	ee32 1a06 	vadd.f32	s2, s4, s12
 800d1cc:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800d1d0:	ee77 4a87 	vadd.f32	s9, s15, s14
 800d1d4:	ee78 1a04 	vadd.f32	s3, s16, s8
 800d1d8:	ee71 6a24 	vadd.f32	s13, s2, s9
 800d1dc:	ee32 2a46 	vsub.f32	s4, s4, s12
 800d1e0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800d1e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1e8:	ed06 6a01 	vstr	s12, [r6, #-4]
 800d1ec:	edd4 8a01 	vldr	s17, [r4, #4]
 800d1f0:	ed92 9a01 	vldr	s18, [r2, #4]
 800d1f4:	edd7 0a00 	vldr	s1, [r7]
 800d1f8:	edd1 2a01 	vldr	s5, [r1, #4]
 800d1fc:	ed95 7a01 	vldr	s14, [r5, #4]
 800d200:	ed93 6a01 	vldr	s12, [r3, #4]
 800d204:	edd0 5a01 	vldr	s11, [r0, #4]
 800d208:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800d20c:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800d210:	ee39 5a62 	vsub.f32	s10, s18, s5
 800d214:	ee78 fac7 	vsub.f32	s31, s17, s14
 800d218:	ee38 4a44 	vsub.f32	s8, s16, s8
 800d21c:	ee38 7a87 	vadd.f32	s14, s17, s14
 800d220:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800d224:	ee79 2a22 	vadd.f32	s5, s18, s5
 800d228:	ee32 9a27 	vadd.f32	s18, s4, s15
 800d22c:	ee72 7a67 	vsub.f32	s15, s4, s15
 800d230:	ee30 2a06 	vadd.f32	s4, s0, s12
 800d234:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800d238:	ee71 4a64 	vsub.f32	s9, s2, s9
 800d23c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800d240:	ee32 1a08 	vadd.f32	s2, s4, s16
 800d244:	ee72 fa87 	vadd.f32	s31, s5, s14
 800d248:	ee32 2a48 	vsub.f32	s4, s4, s16
 800d24c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800d250:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800d254:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800d258:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800d25c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800d260:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800d264:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800d268:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800d26c:	ee30 6a46 	vsub.f32	s12, s0, s12
 800d270:	ee74 0a22 	vadd.f32	s1, s8, s5
 800d274:	ee36 0a28 	vadd.f32	s0, s12, s17
 800d278:	ee74 2a62 	vsub.f32	s5, s8, s5
 800d27c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800d280:	ee32 4a64 	vsub.f32	s8, s4, s9
 800d284:	ee73 8a09 	vadd.f32	s17, s6, s18
 800d288:	ee74 4a82 	vadd.f32	s9, s9, s4
 800d28c:	ee33 9a49 	vsub.f32	s18, s6, s18
 800d290:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800d294:	ee35 3a85 	vadd.f32	s6, s11, s10
 800d298:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800d29c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800d2a0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800d2a4:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800d2a8:	ee30 7a68 	vsub.f32	s14, s0, s17
 800d2ac:	ee35 8a03 	vadd.f32	s16, s10, s6
 800d2b0:	ee38 0a80 	vadd.f32	s0, s17, s0
 800d2b4:	ee73 3a82 	vadd.f32	s7, s7, s4
 800d2b8:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800d2bc:	ed9d 2a01 	vldr	s4, [sp, #4]
 800d2c0:	eddd 1a02 	vldr	s3, [sp, #8]
 800d2c4:	ee35 5a43 	vsub.f32	s10, s10, s6
 800d2c8:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800d2cc:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800d2d0:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800d2d4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d2d8:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800d2dc:	ee76 5a49 	vsub.f32	s11, s12, s18
 800d2e0:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800d2e4:	ee39 6a06 	vadd.f32	s12, s18, s12
 800d2e8:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800d2ec:	ee21 4a84 	vmul.f32	s8, s3, s8
 800d2f0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800d2f4:	ee22 7a07 	vmul.f32	s14, s4, s14
 800d2f8:	ee22 2a08 	vmul.f32	s4, s4, s16
 800d2fc:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800d300:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800d304:	ee31 1a09 	vadd.f32	s2, s2, s18
 800d308:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800d30c:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800d310:	ee74 0a60 	vsub.f32	s1, s8, s1
 800d314:	ee37 7a48 	vsub.f32	s14, s14, s16
 800d318:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800d31c:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800d320:	ee72 1a21 	vadd.f32	s3, s4, s3
 800d324:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800d328:	ee38 2a89 	vadd.f32	s4, s17, s18
 800d32c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800d330:	ee38 8a04 	vadd.f32	s16, s16, s8
 800d334:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800d338:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800d33c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800d340:	eddd 5a03 	vldr	s11, [sp, #12]
 800d344:	edc6 fa00 	vstr	s31, [r6]
 800d348:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800d34c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800d350:	ee30 0a45 	vsub.f32	s0, s0, s10
 800d354:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800d358:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800d35c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800d360:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800d364:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800d368:	ee25 6a86 	vmul.f32	s12, s11, s12
 800d36c:	ee74 4a89 	vadd.f32	s9, s9, s18
 800d370:	ee34 3a43 	vsub.f32	s6, s8, s6
 800d374:	ee78 8a85 	vadd.f32	s17, s17, s10
 800d378:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d37c:	44c4      	add	ip, r8
 800d37e:	45e3      	cmp	fp, ip
 800d380:	edc3 3a00 	vstr	s7, [r3]
 800d384:	edc3 6a01 	vstr	s13, [r3, #4]
 800d388:	4456      	add	r6, sl
 800d38a:	ed07 1a01 	vstr	s2, [r7, #-4]
 800d38e:	edc7 0a00 	vstr	s1, [r7]
 800d392:	4453      	add	r3, sl
 800d394:	ed80 2a00 	vstr	s4, [r0]
 800d398:	edc0 2a01 	vstr	s5, [r0, #4]
 800d39c:	4457      	add	r7, sl
 800d39e:	edc2 1a00 	vstr	s3, [r2]
 800d3a2:	ed82 7a01 	vstr	s14, [r2, #4]
 800d3a6:	4450      	add	r0, sl
 800d3a8:	ed85 8a00 	vstr	s16, [r5]
 800d3ac:	ed85 0a01 	vstr	s0, [r5, #4]
 800d3b0:	4452      	add	r2, sl
 800d3b2:	edc1 4a00 	vstr	s9, [r1]
 800d3b6:	4455      	add	r5, sl
 800d3b8:	ed81 3a01 	vstr	s6, [r1, #4]
 800d3bc:	edc4 8a00 	vstr	s17, [r4]
 800d3c0:	ed84 6a01 	vstr	s12, [r4, #4]
 800d3c4:	4451      	add	r1, sl
 800d3c6:	4454      	add	r4, sl
 800d3c8:	f63f aeea 	bhi.w	800d1a0 <arm_radix8_butterfly_f32+0x2fc>
 800d3cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3ce:	3308      	adds	r3, #8
 800d3d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3d4:	3308      	adds	r3, #8
 800d3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3da:	3308      	adds	r3, #8
 800d3dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3de:	9b08      	ldr	r3, [sp, #32]
 800d3e0:	3308      	adds	r3, #8
 800d3e2:	9308      	str	r3, [sp, #32]
 800d3e4:	9b07      	ldr	r3, [sp, #28]
 800d3e6:	3308      	adds	r3, #8
 800d3e8:	9307      	str	r3, [sp, #28]
 800d3ea:	9b06      	ldr	r3, [sp, #24]
 800d3ec:	3308      	adds	r3, #8
 800d3ee:	9306      	str	r3, [sp, #24]
 800d3f0:	9b05      	ldr	r3, [sp, #20]
 800d3f2:	3308      	adds	r3, #8
 800d3f4:	9305      	str	r3, [sp, #20]
 800d3f6:	9b04      	ldr	r3, [sp, #16]
 800d3f8:	3308      	adds	r3, #8
 800d3fa:	9304      	str	r3, [sp, #16]
 800d3fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3fe:	f109 0901 	add.w	r9, r9, #1
 800d402:	454b      	cmp	r3, r9
 800d404:	f47f ae7d 	bne.w	800d102 <arm_radix8_butterfly_f32+0x25e>
 800d408:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d40a:	00db      	lsls	r3, r3, #3
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	46d9      	mov	r9, fp
 800d410:	9310      	str	r3, [sp, #64]	@ 0x40
 800d412:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800d416:	e554      	b.n	800cec2 <arm_radix8_butterfly_f32+0x1e>
 800d418:	b015      	add	sp, #84	@ 0x54
 800d41a:	ecbd 8b10 	vpop	{d8-d15}
 800d41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d422:	bf00      	nop

0800d424 <__cvt>:
 800d424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d428:	ec57 6b10 	vmov	r6, r7, d0
 800d42c:	2f00      	cmp	r7, #0
 800d42e:	460c      	mov	r4, r1
 800d430:	4619      	mov	r1, r3
 800d432:	463b      	mov	r3, r7
 800d434:	bfbb      	ittet	lt
 800d436:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d43a:	461f      	movlt	r7, r3
 800d43c:	2300      	movge	r3, #0
 800d43e:	232d      	movlt	r3, #45	@ 0x2d
 800d440:	700b      	strb	r3, [r1, #0]
 800d442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d444:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d448:	4691      	mov	r9, r2
 800d44a:	f023 0820 	bic.w	r8, r3, #32
 800d44e:	bfbc      	itt	lt
 800d450:	4632      	movlt	r2, r6
 800d452:	4616      	movlt	r6, r2
 800d454:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d458:	d005      	beq.n	800d466 <__cvt+0x42>
 800d45a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d45e:	d100      	bne.n	800d462 <__cvt+0x3e>
 800d460:	3401      	adds	r4, #1
 800d462:	2102      	movs	r1, #2
 800d464:	e000      	b.n	800d468 <__cvt+0x44>
 800d466:	2103      	movs	r1, #3
 800d468:	ab03      	add	r3, sp, #12
 800d46a:	9301      	str	r3, [sp, #4]
 800d46c:	ab02      	add	r3, sp, #8
 800d46e:	9300      	str	r3, [sp, #0]
 800d470:	ec47 6b10 	vmov	d0, r6, r7
 800d474:	4653      	mov	r3, sl
 800d476:	4622      	mov	r2, r4
 800d478:	f000 feea 	bl	800e250 <_dtoa_r>
 800d47c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d480:	4605      	mov	r5, r0
 800d482:	d119      	bne.n	800d4b8 <__cvt+0x94>
 800d484:	f019 0f01 	tst.w	r9, #1
 800d488:	d00e      	beq.n	800d4a8 <__cvt+0x84>
 800d48a:	eb00 0904 	add.w	r9, r0, r4
 800d48e:	2200      	movs	r2, #0
 800d490:	2300      	movs	r3, #0
 800d492:	4630      	mov	r0, r6
 800d494:	4639      	mov	r1, r7
 800d496:	f7f3 fb4f 	bl	8000b38 <__aeabi_dcmpeq>
 800d49a:	b108      	cbz	r0, 800d4a0 <__cvt+0x7c>
 800d49c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d4a0:	2230      	movs	r2, #48	@ 0x30
 800d4a2:	9b03      	ldr	r3, [sp, #12]
 800d4a4:	454b      	cmp	r3, r9
 800d4a6:	d31e      	bcc.n	800d4e6 <__cvt+0xc2>
 800d4a8:	9b03      	ldr	r3, [sp, #12]
 800d4aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4ac:	1b5b      	subs	r3, r3, r5
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	6013      	str	r3, [r2, #0]
 800d4b2:	b004      	add	sp, #16
 800d4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d4bc:	eb00 0904 	add.w	r9, r0, r4
 800d4c0:	d1e5      	bne.n	800d48e <__cvt+0x6a>
 800d4c2:	7803      	ldrb	r3, [r0, #0]
 800d4c4:	2b30      	cmp	r3, #48	@ 0x30
 800d4c6:	d10a      	bne.n	800d4de <__cvt+0xba>
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	4639      	mov	r1, r7
 800d4d0:	f7f3 fb32 	bl	8000b38 <__aeabi_dcmpeq>
 800d4d4:	b918      	cbnz	r0, 800d4de <__cvt+0xba>
 800d4d6:	f1c4 0401 	rsb	r4, r4, #1
 800d4da:	f8ca 4000 	str.w	r4, [sl]
 800d4de:	f8da 3000 	ldr.w	r3, [sl]
 800d4e2:	4499      	add	r9, r3
 800d4e4:	e7d3      	b.n	800d48e <__cvt+0x6a>
 800d4e6:	1c59      	adds	r1, r3, #1
 800d4e8:	9103      	str	r1, [sp, #12]
 800d4ea:	701a      	strb	r2, [r3, #0]
 800d4ec:	e7d9      	b.n	800d4a2 <__cvt+0x7e>

0800d4ee <__exponent>:
 800d4ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4f0:	2900      	cmp	r1, #0
 800d4f2:	bfba      	itte	lt
 800d4f4:	4249      	neglt	r1, r1
 800d4f6:	232d      	movlt	r3, #45	@ 0x2d
 800d4f8:	232b      	movge	r3, #43	@ 0x2b
 800d4fa:	2909      	cmp	r1, #9
 800d4fc:	7002      	strb	r2, [r0, #0]
 800d4fe:	7043      	strb	r3, [r0, #1]
 800d500:	dd29      	ble.n	800d556 <__exponent+0x68>
 800d502:	f10d 0307 	add.w	r3, sp, #7
 800d506:	461d      	mov	r5, r3
 800d508:	270a      	movs	r7, #10
 800d50a:	461a      	mov	r2, r3
 800d50c:	fbb1 f6f7 	udiv	r6, r1, r7
 800d510:	fb07 1416 	mls	r4, r7, r6, r1
 800d514:	3430      	adds	r4, #48	@ 0x30
 800d516:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d51a:	460c      	mov	r4, r1
 800d51c:	2c63      	cmp	r4, #99	@ 0x63
 800d51e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d522:	4631      	mov	r1, r6
 800d524:	dcf1      	bgt.n	800d50a <__exponent+0x1c>
 800d526:	3130      	adds	r1, #48	@ 0x30
 800d528:	1e94      	subs	r4, r2, #2
 800d52a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d52e:	1c41      	adds	r1, r0, #1
 800d530:	4623      	mov	r3, r4
 800d532:	42ab      	cmp	r3, r5
 800d534:	d30a      	bcc.n	800d54c <__exponent+0x5e>
 800d536:	f10d 0309 	add.w	r3, sp, #9
 800d53a:	1a9b      	subs	r3, r3, r2
 800d53c:	42ac      	cmp	r4, r5
 800d53e:	bf88      	it	hi
 800d540:	2300      	movhi	r3, #0
 800d542:	3302      	adds	r3, #2
 800d544:	4403      	add	r3, r0
 800d546:	1a18      	subs	r0, r3, r0
 800d548:	b003      	add	sp, #12
 800d54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d54c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d550:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d554:	e7ed      	b.n	800d532 <__exponent+0x44>
 800d556:	2330      	movs	r3, #48	@ 0x30
 800d558:	3130      	adds	r1, #48	@ 0x30
 800d55a:	7083      	strb	r3, [r0, #2]
 800d55c:	70c1      	strb	r1, [r0, #3]
 800d55e:	1d03      	adds	r3, r0, #4
 800d560:	e7f1      	b.n	800d546 <__exponent+0x58>
	...

0800d564 <_printf_float>:
 800d564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d568:	b08d      	sub	sp, #52	@ 0x34
 800d56a:	460c      	mov	r4, r1
 800d56c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d570:	4616      	mov	r6, r2
 800d572:	461f      	mov	r7, r3
 800d574:	4605      	mov	r5, r0
 800d576:	f000 fcff 	bl	800df78 <_localeconv_r>
 800d57a:	6803      	ldr	r3, [r0, #0]
 800d57c:	9304      	str	r3, [sp, #16]
 800d57e:	4618      	mov	r0, r3
 800d580:	f7f2 feae 	bl	80002e0 <strlen>
 800d584:	2300      	movs	r3, #0
 800d586:	930a      	str	r3, [sp, #40]	@ 0x28
 800d588:	f8d8 3000 	ldr.w	r3, [r8]
 800d58c:	9005      	str	r0, [sp, #20]
 800d58e:	3307      	adds	r3, #7
 800d590:	f023 0307 	bic.w	r3, r3, #7
 800d594:	f103 0208 	add.w	r2, r3, #8
 800d598:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d59c:	f8d4 b000 	ldr.w	fp, [r4]
 800d5a0:	f8c8 2000 	str.w	r2, [r8]
 800d5a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d5ac:	9307      	str	r3, [sp, #28]
 800d5ae:	f8cd 8018 	str.w	r8, [sp, #24]
 800d5b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d5b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5ba:	4b9c      	ldr	r3, [pc, #624]	@ (800d82c <_printf_float+0x2c8>)
 800d5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d5c0:	f7f3 faec 	bl	8000b9c <__aeabi_dcmpun>
 800d5c4:	bb70      	cbnz	r0, 800d624 <_printf_float+0xc0>
 800d5c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5ca:	4b98      	ldr	r3, [pc, #608]	@ (800d82c <_printf_float+0x2c8>)
 800d5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d5d0:	f7f3 fac6 	bl	8000b60 <__aeabi_dcmple>
 800d5d4:	bb30      	cbnz	r0, 800d624 <_printf_float+0xc0>
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4640      	mov	r0, r8
 800d5dc:	4649      	mov	r1, r9
 800d5de:	f7f3 fab5 	bl	8000b4c <__aeabi_dcmplt>
 800d5e2:	b110      	cbz	r0, 800d5ea <_printf_float+0x86>
 800d5e4:	232d      	movs	r3, #45	@ 0x2d
 800d5e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5ea:	4a91      	ldr	r2, [pc, #580]	@ (800d830 <_printf_float+0x2cc>)
 800d5ec:	4b91      	ldr	r3, [pc, #580]	@ (800d834 <_printf_float+0x2d0>)
 800d5ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d5f2:	bf94      	ite	ls
 800d5f4:	4690      	movls	r8, r2
 800d5f6:	4698      	movhi	r8, r3
 800d5f8:	2303      	movs	r3, #3
 800d5fa:	6123      	str	r3, [r4, #16]
 800d5fc:	f02b 0304 	bic.w	r3, fp, #4
 800d600:	6023      	str	r3, [r4, #0]
 800d602:	f04f 0900 	mov.w	r9, #0
 800d606:	9700      	str	r7, [sp, #0]
 800d608:	4633      	mov	r3, r6
 800d60a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d60c:	4621      	mov	r1, r4
 800d60e:	4628      	mov	r0, r5
 800d610:	f000 f9d2 	bl	800d9b8 <_printf_common>
 800d614:	3001      	adds	r0, #1
 800d616:	f040 808d 	bne.w	800d734 <_printf_float+0x1d0>
 800d61a:	f04f 30ff 	mov.w	r0, #4294967295
 800d61e:	b00d      	add	sp, #52	@ 0x34
 800d620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d624:	4642      	mov	r2, r8
 800d626:	464b      	mov	r3, r9
 800d628:	4640      	mov	r0, r8
 800d62a:	4649      	mov	r1, r9
 800d62c:	f7f3 fab6 	bl	8000b9c <__aeabi_dcmpun>
 800d630:	b140      	cbz	r0, 800d644 <_printf_float+0xe0>
 800d632:	464b      	mov	r3, r9
 800d634:	2b00      	cmp	r3, #0
 800d636:	bfbc      	itt	lt
 800d638:	232d      	movlt	r3, #45	@ 0x2d
 800d63a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d63e:	4a7e      	ldr	r2, [pc, #504]	@ (800d838 <_printf_float+0x2d4>)
 800d640:	4b7e      	ldr	r3, [pc, #504]	@ (800d83c <_printf_float+0x2d8>)
 800d642:	e7d4      	b.n	800d5ee <_printf_float+0x8a>
 800d644:	6863      	ldr	r3, [r4, #4]
 800d646:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d64a:	9206      	str	r2, [sp, #24]
 800d64c:	1c5a      	adds	r2, r3, #1
 800d64e:	d13b      	bne.n	800d6c8 <_printf_float+0x164>
 800d650:	2306      	movs	r3, #6
 800d652:	6063      	str	r3, [r4, #4]
 800d654:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d658:	2300      	movs	r3, #0
 800d65a:	6022      	str	r2, [r4, #0]
 800d65c:	9303      	str	r3, [sp, #12]
 800d65e:	ab0a      	add	r3, sp, #40	@ 0x28
 800d660:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d664:	ab09      	add	r3, sp, #36	@ 0x24
 800d666:	9300      	str	r3, [sp, #0]
 800d668:	6861      	ldr	r1, [r4, #4]
 800d66a:	ec49 8b10 	vmov	d0, r8, r9
 800d66e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d672:	4628      	mov	r0, r5
 800d674:	f7ff fed6 	bl	800d424 <__cvt>
 800d678:	9b06      	ldr	r3, [sp, #24]
 800d67a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d67c:	2b47      	cmp	r3, #71	@ 0x47
 800d67e:	4680      	mov	r8, r0
 800d680:	d129      	bne.n	800d6d6 <_printf_float+0x172>
 800d682:	1cc8      	adds	r0, r1, #3
 800d684:	db02      	blt.n	800d68c <_printf_float+0x128>
 800d686:	6863      	ldr	r3, [r4, #4]
 800d688:	4299      	cmp	r1, r3
 800d68a:	dd41      	ble.n	800d710 <_printf_float+0x1ac>
 800d68c:	f1aa 0a02 	sub.w	sl, sl, #2
 800d690:	fa5f fa8a 	uxtb.w	sl, sl
 800d694:	3901      	subs	r1, #1
 800d696:	4652      	mov	r2, sl
 800d698:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d69c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d69e:	f7ff ff26 	bl	800d4ee <__exponent>
 800d6a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d6a4:	1813      	adds	r3, r2, r0
 800d6a6:	2a01      	cmp	r2, #1
 800d6a8:	4681      	mov	r9, r0
 800d6aa:	6123      	str	r3, [r4, #16]
 800d6ac:	dc02      	bgt.n	800d6b4 <_printf_float+0x150>
 800d6ae:	6822      	ldr	r2, [r4, #0]
 800d6b0:	07d2      	lsls	r2, r2, #31
 800d6b2:	d501      	bpl.n	800d6b8 <_printf_float+0x154>
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	6123      	str	r3, [r4, #16]
 800d6b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d0a2      	beq.n	800d606 <_printf_float+0xa2>
 800d6c0:	232d      	movs	r3, #45	@ 0x2d
 800d6c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6c6:	e79e      	b.n	800d606 <_printf_float+0xa2>
 800d6c8:	9a06      	ldr	r2, [sp, #24]
 800d6ca:	2a47      	cmp	r2, #71	@ 0x47
 800d6cc:	d1c2      	bne.n	800d654 <_printf_float+0xf0>
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1c0      	bne.n	800d654 <_printf_float+0xf0>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e7bd      	b.n	800d652 <_printf_float+0xee>
 800d6d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d6da:	d9db      	bls.n	800d694 <_printf_float+0x130>
 800d6dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d6e0:	d118      	bne.n	800d714 <_printf_float+0x1b0>
 800d6e2:	2900      	cmp	r1, #0
 800d6e4:	6863      	ldr	r3, [r4, #4]
 800d6e6:	dd0b      	ble.n	800d700 <_printf_float+0x19c>
 800d6e8:	6121      	str	r1, [r4, #16]
 800d6ea:	b913      	cbnz	r3, 800d6f2 <_printf_float+0x18e>
 800d6ec:	6822      	ldr	r2, [r4, #0]
 800d6ee:	07d0      	lsls	r0, r2, #31
 800d6f0:	d502      	bpl.n	800d6f8 <_printf_float+0x194>
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	440b      	add	r3, r1
 800d6f6:	6123      	str	r3, [r4, #16]
 800d6f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d6fa:	f04f 0900 	mov.w	r9, #0
 800d6fe:	e7db      	b.n	800d6b8 <_printf_float+0x154>
 800d700:	b913      	cbnz	r3, 800d708 <_printf_float+0x1a4>
 800d702:	6822      	ldr	r2, [r4, #0]
 800d704:	07d2      	lsls	r2, r2, #31
 800d706:	d501      	bpl.n	800d70c <_printf_float+0x1a8>
 800d708:	3302      	adds	r3, #2
 800d70a:	e7f4      	b.n	800d6f6 <_printf_float+0x192>
 800d70c:	2301      	movs	r3, #1
 800d70e:	e7f2      	b.n	800d6f6 <_printf_float+0x192>
 800d710:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d716:	4299      	cmp	r1, r3
 800d718:	db05      	blt.n	800d726 <_printf_float+0x1c2>
 800d71a:	6823      	ldr	r3, [r4, #0]
 800d71c:	6121      	str	r1, [r4, #16]
 800d71e:	07d8      	lsls	r0, r3, #31
 800d720:	d5ea      	bpl.n	800d6f8 <_printf_float+0x194>
 800d722:	1c4b      	adds	r3, r1, #1
 800d724:	e7e7      	b.n	800d6f6 <_printf_float+0x192>
 800d726:	2900      	cmp	r1, #0
 800d728:	bfd4      	ite	le
 800d72a:	f1c1 0202 	rsble	r2, r1, #2
 800d72e:	2201      	movgt	r2, #1
 800d730:	4413      	add	r3, r2
 800d732:	e7e0      	b.n	800d6f6 <_printf_float+0x192>
 800d734:	6823      	ldr	r3, [r4, #0]
 800d736:	055a      	lsls	r2, r3, #21
 800d738:	d407      	bmi.n	800d74a <_printf_float+0x1e6>
 800d73a:	6923      	ldr	r3, [r4, #16]
 800d73c:	4642      	mov	r2, r8
 800d73e:	4631      	mov	r1, r6
 800d740:	4628      	mov	r0, r5
 800d742:	47b8      	blx	r7
 800d744:	3001      	adds	r0, #1
 800d746:	d12b      	bne.n	800d7a0 <_printf_float+0x23c>
 800d748:	e767      	b.n	800d61a <_printf_float+0xb6>
 800d74a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d74e:	f240 80dd 	bls.w	800d90c <_printf_float+0x3a8>
 800d752:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d756:	2200      	movs	r2, #0
 800d758:	2300      	movs	r3, #0
 800d75a:	f7f3 f9ed 	bl	8000b38 <__aeabi_dcmpeq>
 800d75e:	2800      	cmp	r0, #0
 800d760:	d033      	beq.n	800d7ca <_printf_float+0x266>
 800d762:	4a37      	ldr	r2, [pc, #220]	@ (800d840 <_printf_float+0x2dc>)
 800d764:	2301      	movs	r3, #1
 800d766:	4631      	mov	r1, r6
 800d768:	4628      	mov	r0, r5
 800d76a:	47b8      	blx	r7
 800d76c:	3001      	adds	r0, #1
 800d76e:	f43f af54 	beq.w	800d61a <_printf_float+0xb6>
 800d772:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d776:	4543      	cmp	r3, r8
 800d778:	db02      	blt.n	800d780 <_printf_float+0x21c>
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	07d8      	lsls	r0, r3, #31
 800d77e:	d50f      	bpl.n	800d7a0 <_printf_float+0x23c>
 800d780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d784:	4631      	mov	r1, r6
 800d786:	4628      	mov	r0, r5
 800d788:	47b8      	blx	r7
 800d78a:	3001      	adds	r0, #1
 800d78c:	f43f af45 	beq.w	800d61a <_printf_float+0xb6>
 800d790:	f04f 0900 	mov.w	r9, #0
 800d794:	f108 38ff 	add.w	r8, r8, #4294967295
 800d798:	f104 0a1a 	add.w	sl, r4, #26
 800d79c:	45c8      	cmp	r8, r9
 800d79e:	dc09      	bgt.n	800d7b4 <_printf_float+0x250>
 800d7a0:	6823      	ldr	r3, [r4, #0]
 800d7a2:	079b      	lsls	r3, r3, #30
 800d7a4:	f100 8103 	bmi.w	800d9ae <_printf_float+0x44a>
 800d7a8:	68e0      	ldr	r0, [r4, #12]
 800d7aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d7ac:	4298      	cmp	r0, r3
 800d7ae:	bfb8      	it	lt
 800d7b0:	4618      	movlt	r0, r3
 800d7b2:	e734      	b.n	800d61e <_printf_float+0xba>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	4652      	mov	r2, sl
 800d7b8:	4631      	mov	r1, r6
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	47b8      	blx	r7
 800d7be:	3001      	adds	r0, #1
 800d7c0:	f43f af2b 	beq.w	800d61a <_printf_float+0xb6>
 800d7c4:	f109 0901 	add.w	r9, r9, #1
 800d7c8:	e7e8      	b.n	800d79c <_printf_float+0x238>
 800d7ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	dc39      	bgt.n	800d844 <_printf_float+0x2e0>
 800d7d0:	4a1b      	ldr	r2, [pc, #108]	@ (800d840 <_printf_float+0x2dc>)
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	4631      	mov	r1, r6
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	47b8      	blx	r7
 800d7da:	3001      	adds	r0, #1
 800d7dc:	f43f af1d 	beq.w	800d61a <_printf_float+0xb6>
 800d7e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d7e4:	ea59 0303 	orrs.w	r3, r9, r3
 800d7e8:	d102      	bne.n	800d7f0 <_printf_float+0x28c>
 800d7ea:	6823      	ldr	r3, [r4, #0]
 800d7ec:	07d9      	lsls	r1, r3, #31
 800d7ee:	d5d7      	bpl.n	800d7a0 <_printf_float+0x23c>
 800d7f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7f4:	4631      	mov	r1, r6
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	47b8      	blx	r7
 800d7fa:	3001      	adds	r0, #1
 800d7fc:	f43f af0d 	beq.w	800d61a <_printf_float+0xb6>
 800d800:	f04f 0a00 	mov.w	sl, #0
 800d804:	f104 0b1a 	add.w	fp, r4, #26
 800d808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d80a:	425b      	negs	r3, r3
 800d80c:	4553      	cmp	r3, sl
 800d80e:	dc01      	bgt.n	800d814 <_printf_float+0x2b0>
 800d810:	464b      	mov	r3, r9
 800d812:	e793      	b.n	800d73c <_printf_float+0x1d8>
 800d814:	2301      	movs	r3, #1
 800d816:	465a      	mov	r2, fp
 800d818:	4631      	mov	r1, r6
 800d81a:	4628      	mov	r0, r5
 800d81c:	47b8      	blx	r7
 800d81e:	3001      	adds	r0, #1
 800d820:	f43f aefb 	beq.w	800d61a <_printf_float+0xb6>
 800d824:	f10a 0a01 	add.w	sl, sl, #1
 800d828:	e7ee      	b.n	800d808 <_printf_float+0x2a4>
 800d82a:	bf00      	nop
 800d82c:	7fefffff 	.word	0x7fefffff
 800d830:	080113d0 	.word	0x080113d0
 800d834:	080113d4 	.word	0x080113d4
 800d838:	080113d8 	.word	0x080113d8
 800d83c:	080113dc 	.word	0x080113dc
 800d840:	080113e0 	.word	0x080113e0
 800d844:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d846:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d84a:	4553      	cmp	r3, sl
 800d84c:	bfa8      	it	ge
 800d84e:	4653      	movge	r3, sl
 800d850:	2b00      	cmp	r3, #0
 800d852:	4699      	mov	r9, r3
 800d854:	dc36      	bgt.n	800d8c4 <_printf_float+0x360>
 800d856:	f04f 0b00 	mov.w	fp, #0
 800d85a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d85e:	f104 021a 	add.w	r2, r4, #26
 800d862:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d864:	9306      	str	r3, [sp, #24]
 800d866:	eba3 0309 	sub.w	r3, r3, r9
 800d86a:	455b      	cmp	r3, fp
 800d86c:	dc31      	bgt.n	800d8d2 <_printf_float+0x36e>
 800d86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d870:	459a      	cmp	sl, r3
 800d872:	dc3a      	bgt.n	800d8ea <_printf_float+0x386>
 800d874:	6823      	ldr	r3, [r4, #0]
 800d876:	07da      	lsls	r2, r3, #31
 800d878:	d437      	bmi.n	800d8ea <_printf_float+0x386>
 800d87a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d87c:	ebaa 0903 	sub.w	r9, sl, r3
 800d880:	9b06      	ldr	r3, [sp, #24]
 800d882:	ebaa 0303 	sub.w	r3, sl, r3
 800d886:	4599      	cmp	r9, r3
 800d888:	bfa8      	it	ge
 800d88a:	4699      	movge	r9, r3
 800d88c:	f1b9 0f00 	cmp.w	r9, #0
 800d890:	dc33      	bgt.n	800d8fa <_printf_float+0x396>
 800d892:	f04f 0800 	mov.w	r8, #0
 800d896:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d89a:	f104 0b1a 	add.w	fp, r4, #26
 800d89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8a0:	ebaa 0303 	sub.w	r3, sl, r3
 800d8a4:	eba3 0309 	sub.w	r3, r3, r9
 800d8a8:	4543      	cmp	r3, r8
 800d8aa:	f77f af79 	ble.w	800d7a0 <_printf_float+0x23c>
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	465a      	mov	r2, fp
 800d8b2:	4631      	mov	r1, r6
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	47b8      	blx	r7
 800d8b8:	3001      	adds	r0, #1
 800d8ba:	f43f aeae 	beq.w	800d61a <_printf_float+0xb6>
 800d8be:	f108 0801 	add.w	r8, r8, #1
 800d8c2:	e7ec      	b.n	800d89e <_printf_float+0x33a>
 800d8c4:	4642      	mov	r2, r8
 800d8c6:	4631      	mov	r1, r6
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	47b8      	blx	r7
 800d8cc:	3001      	adds	r0, #1
 800d8ce:	d1c2      	bne.n	800d856 <_printf_float+0x2f2>
 800d8d0:	e6a3      	b.n	800d61a <_printf_float+0xb6>
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	4631      	mov	r1, r6
 800d8d6:	4628      	mov	r0, r5
 800d8d8:	9206      	str	r2, [sp, #24]
 800d8da:	47b8      	blx	r7
 800d8dc:	3001      	adds	r0, #1
 800d8de:	f43f ae9c 	beq.w	800d61a <_printf_float+0xb6>
 800d8e2:	9a06      	ldr	r2, [sp, #24]
 800d8e4:	f10b 0b01 	add.w	fp, fp, #1
 800d8e8:	e7bb      	b.n	800d862 <_printf_float+0x2fe>
 800d8ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8ee:	4631      	mov	r1, r6
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	47b8      	blx	r7
 800d8f4:	3001      	adds	r0, #1
 800d8f6:	d1c0      	bne.n	800d87a <_printf_float+0x316>
 800d8f8:	e68f      	b.n	800d61a <_printf_float+0xb6>
 800d8fa:	9a06      	ldr	r2, [sp, #24]
 800d8fc:	464b      	mov	r3, r9
 800d8fe:	4442      	add	r2, r8
 800d900:	4631      	mov	r1, r6
 800d902:	4628      	mov	r0, r5
 800d904:	47b8      	blx	r7
 800d906:	3001      	adds	r0, #1
 800d908:	d1c3      	bne.n	800d892 <_printf_float+0x32e>
 800d90a:	e686      	b.n	800d61a <_printf_float+0xb6>
 800d90c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d910:	f1ba 0f01 	cmp.w	sl, #1
 800d914:	dc01      	bgt.n	800d91a <_printf_float+0x3b6>
 800d916:	07db      	lsls	r3, r3, #31
 800d918:	d536      	bpl.n	800d988 <_printf_float+0x424>
 800d91a:	2301      	movs	r3, #1
 800d91c:	4642      	mov	r2, r8
 800d91e:	4631      	mov	r1, r6
 800d920:	4628      	mov	r0, r5
 800d922:	47b8      	blx	r7
 800d924:	3001      	adds	r0, #1
 800d926:	f43f ae78 	beq.w	800d61a <_printf_float+0xb6>
 800d92a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d92e:	4631      	mov	r1, r6
 800d930:	4628      	mov	r0, r5
 800d932:	47b8      	blx	r7
 800d934:	3001      	adds	r0, #1
 800d936:	f43f ae70 	beq.w	800d61a <_printf_float+0xb6>
 800d93a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d93e:	2200      	movs	r2, #0
 800d940:	2300      	movs	r3, #0
 800d942:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d946:	f7f3 f8f7 	bl	8000b38 <__aeabi_dcmpeq>
 800d94a:	b9c0      	cbnz	r0, 800d97e <_printf_float+0x41a>
 800d94c:	4653      	mov	r3, sl
 800d94e:	f108 0201 	add.w	r2, r8, #1
 800d952:	4631      	mov	r1, r6
 800d954:	4628      	mov	r0, r5
 800d956:	47b8      	blx	r7
 800d958:	3001      	adds	r0, #1
 800d95a:	d10c      	bne.n	800d976 <_printf_float+0x412>
 800d95c:	e65d      	b.n	800d61a <_printf_float+0xb6>
 800d95e:	2301      	movs	r3, #1
 800d960:	465a      	mov	r2, fp
 800d962:	4631      	mov	r1, r6
 800d964:	4628      	mov	r0, r5
 800d966:	47b8      	blx	r7
 800d968:	3001      	adds	r0, #1
 800d96a:	f43f ae56 	beq.w	800d61a <_printf_float+0xb6>
 800d96e:	f108 0801 	add.w	r8, r8, #1
 800d972:	45d0      	cmp	r8, sl
 800d974:	dbf3      	blt.n	800d95e <_printf_float+0x3fa>
 800d976:	464b      	mov	r3, r9
 800d978:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d97c:	e6df      	b.n	800d73e <_printf_float+0x1da>
 800d97e:	f04f 0800 	mov.w	r8, #0
 800d982:	f104 0b1a 	add.w	fp, r4, #26
 800d986:	e7f4      	b.n	800d972 <_printf_float+0x40e>
 800d988:	2301      	movs	r3, #1
 800d98a:	4642      	mov	r2, r8
 800d98c:	e7e1      	b.n	800d952 <_printf_float+0x3ee>
 800d98e:	2301      	movs	r3, #1
 800d990:	464a      	mov	r2, r9
 800d992:	4631      	mov	r1, r6
 800d994:	4628      	mov	r0, r5
 800d996:	47b8      	blx	r7
 800d998:	3001      	adds	r0, #1
 800d99a:	f43f ae3e 	beq.w	800d61a <_printf_float+0xb6>
 800d99e:	f108 0801 	add.w	r8, r8, #1
 800d9a2:	68e3      	ldr	r3, [r4, #12]
 800d9a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d9a6:	1a5b      	subs	r3, r3, r1
 800d9a8:	4543      	cmp	r3, r8
 800d9aa:	dcf0      	bgt.n	800d98e <_printf_float+0x42a>
 800d9ac:	e6fc      	b.n	800d7a8 <_printf_float+0x244>
 800d9ae:	f04f 0800 	mov.w	r8, #0
 800d9b2:	f104 0919 	add.w	r9, r4, #25
 800d9b6:	e7f4      	b.n	800d9a2 <_printf_float+0x43e>

0800d9b8 <_printf_common>:
 800d9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9bc:	4616      	mov	r6, r2
 800d9be:	4698      	mov	r8, r3
 800d9c0:	688a      	ldr	r2, [r1, #8]
 800d9c2:	690b      	ldr	r3, [r1, #16]
 800d9c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	bfb8      	it	lt
 800d9cc:	4613      	movlt	r3, r2
 800d9ce:	6033      	str	r3, [r6, #0]
 800d9d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d9d4:	4607      	mov	r7, r0
 800d9d6:	460c      	mov	r4, r1
 800d9d8:	b10a      	cbz	r2, 800d9de <_printf_common+0x26>
 800d9da:	3301      	adds	r3, #1
 800d9dc:	6033      	str	r3, [r6, #0]
 800d9de:	6823      	ldr	r3, [r4, #0]
 800d9e0:	0699      	lsls	r1, r3, #26
 800d9e2:	bf42      	ittt	mi
 800d9e4:	6833      	ldrmi	r3, [r6, #0]
 800d9e6:	3302      	addmi	r3, #2
 800d9e8:	6033      	strmi	r3, [r6, #0]
 800d9ea:	6825      	ldr	r5, [r4, #0]
 800d9ec:	f015 0506 	ands.w	r5, r5, #6
 800d9f0:	d106      	bne.n	800da00 <_printf_common+0x48>
 800d9f2:	f104 0a19 	add.w	sl, r4, #25
 800d9f6:	68e3      	ldr	r3, [r4, #12]
 800d9f8:	6832      	ldr	r2, [r6, #0]
 800d9fa:	1a9b      	subs	r3, r3, r2
 800d9fc:	42ab      	cmp	r3, r5
 800d9fe:	dc26      	bgt.n	800da4e <_printf_common+0x96>
 800da00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da04:	6822      	ldr	r2, [r4, #0]
 800da06:	3b00      	subs	r3, #0
 800da08:	bf18      	it	ne
 800da0a:	2301      	movne	r3, #1
 800da0c:	0692      	lsls	r2, r2, #26
 800da0e:	d42b      	bmi.n	800da68 <_printf_common+0xb0>
 800da10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da14:	4641      	mov	r1, r8
 800da16:	4638      	mov	r0, r7
 800da18:	47c8      	blx	r9
 800da1a:	3001      	adds	r0, #1
 800da1c:	d01e      	beq.n	800da5c <_printf_common+0xa4>
 800da1e:	6823      	ldr	r3, [r4, #0]
 800da20:	6922      	ldr	r2, [r4, #16]
 800da22:	f003 0306 	and.w	r3, r3, #6
 800da26:	2b04      	cmp	r3, #4
 800da28:	bf02      	ittt	eq
 800da2a:	68e5      	ldreq	r5, [r4, #12]
 800da2c:	6833      	ldreq	r3, [r6, #0]
 800da2e:	1aed      	subeq	r5, r5, r3
 800da30:	68a3      	ldr	r3, [r4, #8]
 800da32:	bf0c      	ite	eq
 800da34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da38:	2500      	movne	r5, #0
 800da3a:	4293      	cmp	r3, r2
 800da3c:	bfc4      	itt	gt
 800da3e:	1a9b      	subgt	r3, r3, r2
 800da40:	18ed      	addgt	r5, r5, r3
 800da42:	2600      	movs	r6, #0
 800da44:	341a      	adds	r4, #26
 800da46:	42b5      	cmp	r5, r6
 800da48:	d11a      	bne.n	800da80 <_printf_common+0xc8>
 800da4a:	2000      	movs	r0, #0
 800da4c:	e008      	b.n	800da60 <_printf_common+0xa8>
 800da4e:	2301      	movs	r3, #1
 800da50:	4652      	mov	r2, sl
 800da52:	4641      	mov	r1, r8
 800da54:	4638      	mov	r0, r7
 800da56:	47c8      	blx	r9
 800da58:	3001      	adds	r0, #1
 800da5a:	d103      	bne.n	800da64 <_printf_common+0xac>
 800da5c:	f04f 30ff 	mov.w	r0, #4294967295
 800da60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da64:	3501      	adds	r5, #1
 800da66:	e7c6      	b.n	800d9f6 <_printf_common+0x3e>
 800da68:	18e1      	adds	r1, r4, r3
 800da6a:	1c5a      	adds	r2, r3, #1
 800da6c:	2030      	movs	r0, #48	@ 0x30
 800da6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da72:	4422      	add	r2, r4
 800da74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da7c:	3302      	adds	r3, #2
 800da7e:	e7c7      	b.n	800da10 <_printf_common+0x58>
 800da80:	2301      	movs	r3, #1
 800da82:	4622      	mov	r2, r4
 800da84:	4641      	mov	r1, r8
 800da86:	4638      	mov	r0, r7
 800da88:	47c8      	blx	r9
 800da8a:	3001      	adds	r0, #1
 800da8c:	d0e6      	beq.n	800da5c <_printf_common+0xa4>
 800da8e:	3601      	adds	r6, #1
 800da90:	e7d9      	b.n	800da46 <_printf_common+0x8e>
	...

0800da94 <_printf_i>:
 800da94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da98:	7e0f      	ldrb	r7, [r1, #24]
 800da9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da9c:	2f78      	cmp	r7, #120	@ 0x78
 800da9e:	4691      	mov	r9, r2
 800daa0:	4680      	mov	r8, r0
 800daa2:	460c      	mov	r4, r1
 800daa4:	469a      	mov	sl, r3
 800daa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800daaa:	d807      	bhi.n	800dabc <_printf_i+0x28>
 800daac:	2f62      	cmp	r7, #98	@ 0x62
 800daae:	d80a      	bhi.n	800dac6 <_printf_i+0x32>
 800dab0:	2f00      	cmp	r7, #0
 800dab2:	f000 80d2 	beq.w	800dc5a <_printf_i+0x1c6>
 800dab6:	2f58      	cmp	r7, #88	@ 0x58
 800dab8:	f000 80b9 	beq.w	800dc2e <_printf_i+0x19a>
 800dabc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dac0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dac4:	e03a      	b.n	800db3c <_printf_i+0xa8>
 800dac6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800daca:	2b15      	cmp	r3, #21
 800dacc:	d8f6      	bhi.n	800dabc <_printf_i+0x28>
 800dace:	a101      	add	r1, pc, #4	@ (adr r1, 800dad4 <_printf_i+0x40>)
 800dad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dad4:	0800db2d 	.word	0x0800db2d
 800dad8:	0800db41 	.word	0x0800db41
 800dadc:	0800dabd 	.word	0x0800dabd
 800dae0:	0800dabd 	.word	0x0800dabd
 800dae4:	0800dabd 	.word	0x0800dabd
 800dae8:	0800dabd 	.word	0x0800dabd
 800daec:	0800db41 	.word	0x0800db41
 800daf0:	0800dabd 	.word	0x0800dabd
 800daf4:	0800dabd 	.word	0x0800dabd
 800daf8:	0800dabd 	.word	0x0800dabd
 800dafc:	0800dabd 	.word	0x0800dabd
 800db00:	0800dc41 	.word	0x0800dc41
 800db04:	0800db6b 	.word	0x0800db6b
 800db08:	0800dbfb 	.word	0x0800dbfb
 800db0c:	0800dabd 	.word	0x0800dabd
 800db10:	0800dabd 	.word	0x0800dabd
 800db14:	0800dc63 	.word	0x0800dc63
 800db18:	0800dabd 	.word	0x0800dabd
 800db1c:	0800db6b 	.word	0x0800db6b
 800db20:	0800dabd 	.word	0x0800dabd
 800db24:	0800dabd 	.word	0x0800dabd
 800db28:	0800dc03 	.word	0x0800dc03
 800db2c:	6833      	ldr	r3, [r6, #0]
 800db2e:	1d1a      	adds	r2, r3, #4
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	6032      	str	r2, [r6, #0]
 800db34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db3c:	2301      	movs	r3, #1
 800db3e:	e09d      	b.n	800dc7c <_printf_i+0x1e8>
 800db40:	6833      	ldr	r3, [r6, #0]
 800db42:	6820      	ldr	r0, [r4, #0]
 800db44:	1d19      	adds	r1, r3, #4
 800db46:	6031      	str	r1, [r6, #0]
 800db48:	0606      	lsls	r6, r0, #24
 800db4a:	d501      	bpl.n	800db50 <_printf_i+0xbc>
 800db4c:	681d      	ldr	r5, [r3, #0]
 800db4e:	e003      	b.n	800db58 <_printf_i+0xc4>
 800db50:	0645      	lsls	r5, r0, #25
 800db52:	d5fb      	bpl.n	800db4c <_printf_i+0xb8>
 800db54:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db58:	2d00      	cmp	r5, #0
 800db5a:	da03      	bge.n	800db64 <_printf_i+0xd0>
 800db5c:	232d      	movs	r3, #45	@ 0x2d
 800db5e:	426d      	negs	r5, r5
 800db60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db64:	4859      	ldr	r0, [pc, #356]	@ (800dccc <_printf_i+0x238>)
 800db66:	230a      	movs	r3, #10
 800db68:	e011      	b.n	800db8e <_printf_i+0xfa>
 800db6a:	6821      	ldr	r1, [r4, #0]
 800db6c:	6833      	ldr	r3, [r6, #0]
 800db6e:	0608      	lsls	r0, r1, #24
 800db70:	f853 5b04 	ldr.w	r5, [r3], #4
 800db74:	d402      	bmi.n	800db7c <_printf_i+0xe8>
 800db76:	0649      	lsls	r1, r1, #25
 800db78:	bf48      	it	mi
 800db7a:	b2ad      	uxthmi	r5, r5
 800db7c:	2f6f      	cmp	r7, #111	@ 0x6f
 800db7e:	4853      	ldr	r0, [pc, #332]	@ (800dccc <_printf_i+0x238>)
 800db80:	6033      	str	r3, [r6, #0]
 800db82:	bf14      	ite	ne
 800db84:	230a      	movne	r3, #10
 800db86:	2308      	moveq	r3, #8
 800db88:	2100      	movs	r1, #0
 800db8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db8e:	6866      	ldr	r6, [r4, #4]
 800db90:	60a6      	str	r6, [r4, #8]
 800db92:	2e00      	cmp	r6, #0
 800db94:	bfa2      	ittt	ge
 800db96:	6821      	ldrge	r1, [r4, #0]
 800db98:	f021 0104 	bicge.w	r1, r1, #4
 800db9c:	6021      	strge	r1, [r4, #0]
 800db9e:	b90d      	cbnz	r5, 800dba4 <_printf_i+0x110>
 800dba0:	2e00      	cmp	r6, #0
 800dba2:	d04b      	beq.n	800dc3c <_printf_i+0x1a8>
 800dba4:	4616      	mov	r6, r2
 800dba6:	fbb5 f1f3 	udiv	r1, r5, r3
 800dbaa:	fb03 5711 	mls	r7, r3, r1, r5
 800dbae:	5dc7      	ldrb	r7, [r0, r7]
 800dbb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dbb4:	462f      	mov	r7, r5
 800dbb6:	42bb      	cmp	r3, r7
 800dbb8:	460d      	mov	r5, r1
 800dbba:	d9f4      	bls.n	800dba6 <_printf_i+0x112>
 800dbbc:	2b08      	cmp	r3, #8
 800dbbe:	d10b      	bne.n	800dbd8 <_printf_i+0x144>
 800dbc0:	6823      	ldr	r3, [r4, #0]
 800dbc2:	07df      	lsls	r7, r3, #31
 800dbc4:	d508      	bpl.n	800dbd8 <_printf_i+0x144>
 800dbc6:	6923      	ldr	r3, [r4, #16]
 800dbc8:	6861      	ldr	r1, [r4, #4]
 800dbca:	4299      	cmp	r1, r3
 800dbcc:	bfde      	ittt	le
 800dbce:	2330      	movle	r3, #48	@ 0x30
 800dbd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dbd8:	1b92      	subs	r2, r2, r6
 800dbda:	6122      	str	r2, [r4, #16]
 800dbdc:	f8cd a000 	str.w	sl, [sp]
 800dbe0:	464b      	mov	r3, r9
 800dbe2:	aa03      	add	r2, sp, #12
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	4640      	mov	r0, r8
 800dbe8:	f7ff fee6 	bl	800d9b8 <_printf_common>
 800dbec:	3001      	adds	r0, #1
 800dbee:	d14a      	bne.n	800dc86 <_printf_i+0x1f2>
 800dbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf4:	b004      	add	sp, #16
 800dbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbfa:	6823      	ldr	r3, [r4, #0]
 800dbfc:	f043 0320 	orr.w	r3, r3, #32
 800dc00:	6023      	str	r3, [r4, #0]
 800dc02:	4833      	ldr	r0, [pc, #204]	@ (800dcd0 <_printf_i+0x23c>)
 800dc04:	2778      	movs	r7, #120	@ 0x78
 800dc06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc0a:	6823      	ldr	r3, [r4, #0]
 800dc0c:	6831      	ldr	r1, [r6, #0]
 800dc0e:	061f      	lsls	r7, r3, #24
 800dc10:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc14:	d402      	bmi.n	800dc1c <_printf_i+0x188>
 800dc16:	065f      	lsls	r7, r3, #25
 800dc18:	bf48      	it	mi
 800dc1a:	b2ad      	uxthmi	r5, r5
 800dc1c:	6031      	str	r1, [r6, #0]
 800dc1e:	07d9      	lsls	r1, r3, #31
 800dc20:	bf44      	itt	mi
 800dc22:	f043 0320 	orrmi.w	r3, r3, #32
 800dc26:	6023      	strmi	r3, [r4, #0]
 800dc28:	b11d      	cbz	r5, 800dc32 <_printf_i+0x19e>
 800dc2a:	2310      	movs	r3, #16
 800dc2c:	e7ac      	b.n	800db88 <_printf_i+0xf4>
 800dc2e:	4827      	ldr	r0, [pc, #156]	@ (800dccc <_printf_i+0x238>)
 800dc30:	e7e9      	b.n	800dc06 <_printf_i+0x172>
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	f023 0320 	bic.w	r3, r3, #32
 800dc38:	6023      	str	r3, [r4, #0]
 800dc3a:	e7f6      	b.n	800dc2a <_printf_i+0x196>
 800dc3c:	4616      	mov	r6, r2
 800dc3e:	e7bd      	b.n	800dbbc <_printf_i+0x128>
 800dc40:	6833      	ldr	r3, [r6, #0]
 800dc42:	6825      	ldr	r5, [r4, #0]
 800dc44:	6961      	ldr	r1, [r4, #20]
 800dc46:	1d18      	adds	r0, r3, #4
 800dc48:	6030      	str	r0, [r6, #0]
 800dc4a:	062e      	lsls	r6, r5, #24
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	d501      	bpl.n	800dc54 <_printf_i+0x1c0>
 800dc50:	6019      	str	r1, [r3, #0]
 800dc52:	e002      	b.n	800dc5a <_printf_i+0x1c6>
 800dc54:	0668      	lsls	r0, r5, #25
 800dc56:	d5fb      	bpl.n	800dc50 <_printf_i+0x1bc>
 800dc58:	8019      	strh	r1, [r3, #0]
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	6123      	str	r3, [r4, #16]
 800dc5e:	4616      	mov	r6, r2
 800dc60:	e7bc      	b.n	800dbdc <_printf_i+0x148>
 800dc62:	6833      	ldr	r3, [r6, #0]
 800dc64:	1d1a      	adds	r2, r3, #4
 800dc66:	6032      	str	r2, [r6, #0]
 800dc68:	681e      	ldr	r6, [r3, #0]
 800dc6a:	6862      	ldr	r2, [r4, #4]
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	4630      	mov	r0, r6
 800dc70:	f7f2 fae6 	bl	8000240 <memchr>
 800dc74:	b108      	cbz	r0, 800dc7a <_printf_i+0x1e6>
 800dc76:	1b80      	subs	r0, r0, r6
 800dc78:	6060      	str	r0, [r4, #4]
 800dc7a:	6863      	ldr	r3, [r4, #4]
 800dc7c:	6123      	str	r3, [r4, #16]
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc84:	e7aa      	b.n	800dbdc <_printf_i+0x148>
 800dc86:	6923      	ldr	r3, [r4, #16]
 800dc88:	4632      	mov	r2, r6
 800dc8a:	4649      	mov	r1, r9
 800dc8c:	4640      	mov	r0, r8
 800dc8e:	47d0      	blx	sl
 800dc90:	3001      	adds	r0, #1
 800dc92:	d0ad      	beq.n	800dbf0 <_printf_i+0x15c>
 800dc94:	6823      	ldr	r3, [r4, #0]
 800dc96:	079b      	lsls	r3, r3, #30
 800dc98:	d413      	bmi.n	800dcc2 <_printf_i+0x22e>
 800dc9a:	68e0      	ldr	r0, [r4, #12]
 800dc9c:	9b03      	ldr	r3, [sp, #12]
 800dc9e:	4298      	cmp	r0, r3
 800dca0:	bfb8      	it	lt
 800dca2:	4618      	movlt	r0, r3
 800dca4:	e7a6      	b.n	800dbf4 <_printf_i+0x160>
 800dca6:	2301      	movs	r3, #1
 800dca8:	4632      	mov	r2, r6
 800dcaa:	4649      	mov	r1, r9
 800dcac:	4640      	mov	r0, r8
 800dcae:	47d0      	blx	sl
 800dcb0:	3001      	adds	r0, #1
 800dcb2:	d09d      	beq.n	800dbf0 <_printf_i+0x15c>
 800dcb4:	3501      	adds	r5, #1
 800dcb6:	68e3      	ldr	r3, [r4, #12]
 800dcb8:	9903      	ldr	r1, [sp, #12]
 800dcba:	1a5b      	subs	r3, r3, r1
 800dcbc:	42ab      	cmp	r3, r5
 800dcbe:	dcf2      	bgt.n	800dca6 <_printf_i+0x212>
 800dcc0:	e7eb      	b.n	800dc9a <_printf_i+0x206>
 800dcc2:	2500      	movs	r5, #0
 800dcc4:	f104 0619 	add.w	r6, r4, #25
 800dcc8:	e7f5      	b.n	800dcb6 <_printf_i+0x222>
 800dcca:	bf00      	nop
 800dccc:	080113e2 	.word	0x080113e2
 800dcd0:	080113f3 	.word	0x080113f3

0800dcd4 <std>:
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	b510      	push	{r4, lr}
 800dcd8:	4604      	mov	r4, r0
 800dcda:	e9c0 3300 	strd	r3, r3, [r0]
 800dcde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dce2:	6083      	str	r3, [r0, #8]
 800dce4:	8181      	strh	r1, [r0, #12]
 800dce6:	6643      	str	r3, [r0, #100]	@ 0x64
 800dce8:	81c2      	strh	r2, [r0, #14]
 800dcea:	6183      	str	r3, [r0, #24]
 800dcec:	4619      	mov	r1, r3
 800dcee:	2208      	movs	r2, #8
 800dcf0:	305c      	adds	r0, #92	@ 0x5c
 800dcf2:	f000 f914 	bl	800df1e <memset>
 800dcf6:	4b0d      	ldr	r3, [pc, #52]	@ (800dd2c <std+0x58>)
 800dcf8:	6263      	str	r3, [r4, #36]	@ 0x24
 800dcfa:	4b0d      	ldr	r3, [pc, #52]	@ (800dd30 <std+0x5c>)
 800dcfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dcfe:	4b0d      	ldr	r3, [pc, #52]	@ (800dd34 <std+0x60>)
 800dd00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dd02:	4b0d      	ldr	r3, [pc, #52]	@ (800dd38 <std+0x64>)
 800dd04:	6323      	str	r3, [r4, #48]	@ 0x30
 800dd06:	4b0d      	ldr	r3, [pc, #52]	@ (800dd3c <std+0x68>)
 800dd08:	6224      	str	r4, [r4, #32]
 800dd0a:	429c      	cmp	r4, r3
 800dd0c:	d006      	beq.n	800dd1c <std+0x48>
 800dd0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dd12:	4294      	cmp	r4, r2
 800dd14:	d002      	beq.n	800dd1c <std+0x48>
 800dd16:	33d0      	adds	r3, #208	@ 0xd0
 800dd18:	429c      	cmp	r4, r3
 800dd1a:	d105      	bne.n	800dd28 <std+0x54>
 800dd1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dd20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd24:	f000 b9f2 	b.w	800e10c <__retarget_lock_init_recursive>
 800dd28:	bd10      	pop	{r4, pc}
 800dd2a:	bf00      	nop
 800dd2c:	0800de99 	.word	0x0800de99
 800dd30:	0800debb 	.word	0x0800debb
 800dd34:	0800def3 	.word	0x0800def3
 800dd38:	0800df17 	.word	0x0800df17
 800dd3c:	200078a0 	.word	0x200078a0

0800dd40 <stdio_exit_handler>:
 800dd40:	4a02      	ldr	r2, [pc, #8]	@ (800dd4c <stdio_exit_handler+0xc>)
 800dd42:	4903      	ldr	r1, [pc, #12]	@ (800dd50 <stdio_exit_handler+0x10>)
 800dd44:	4803      	ldr	r0, [pc, #12]	@ (800dd54 <stdio_exit_handler+0x14>)
 800dd46:	f000 b869 	b.w	800de1c <_fwalk_sglue>
 800dd4a:	bf00      	nop
 800dd4c:	2000041c 	.word	0x2000041c
 800dd50:	0800fa95 	.word	0x0800fa95
 800dd54:	2000042c 	.word	0x2000042c

0800dd58 <cleanup_stdio>:
 800dd58:	6841      	ldr	r1, [r0, #4]
 800dd5a:	4b0c      	ldr	r3, [pc, #48]	@ (800dd8c <cleanup_stdio+0x34>)
 800dd5c:	4299      	cmp	r1, r3
 800dd5e:	b510      	push	{r4, lr}
 800dd60:	4604      	mov	r4, r0
 800dd62:	d001      	beq.n	800dd68 <cleanup_stdio+0x10>
 800dd64:	f001 fe96 	bl	800fa94 <_fflush_r>
 800dd68:	68a1      	ldr	r1, [r4, #8]
 800dd6a:	4b09      	ldr	r3, [pc, #36]	@ (800dd90 <cleanup_stdio+0x38>)
 800dd6c:	4299      	cmp	r1, r3
 800dd6e:	d002      	beq.n	800dd76 <cleanup_stdio+0x1e>
 800dd70:	4620      	mov	r0, r4
 800dd72:	f001 fe8f 	bl	800fa94 <_fflush_r>
 800dd76:	68e1      	ldr	r1, [r4, #12]
 800dd78:	4b06      	ldr	r3, [pc, #24]	@ (800dd94 <cleanup_stdio+0x3c>)
 800dd7a:	4299      	cmp	r1, r3
 800dd7c:	d004      	beq.n	800dd88 <cleanup_stdio+0x30>
 800dd7e:	4620      	mov	r0, r4
 800dd80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd84:	f001 be86 	b.w	800fa94 <_fflush_r>
 800dd88:	bd10      	pop	{r4, pc}
 800dd8a:	bf00      	nop
 800dd8c:	200078a0 	.word	0x200078a0
 800dd90:	20007908 	.word	0x20007908
 800dd94:	20007970 	.word	0x20007970

0800dd98 <global_stdio_init.part.0>:
 800dd98:	b510      	push	{r4, lr}
 800dd9a:	4b0b      	ldr	r3, [pc, #44]	@ (800ddc8 <global_stdio_init.part.0+0x30>)
 800dd9c:	4c0b      	ldr	r4, [pc, #44]	@ (800ddcc <global_stdio_init.part.0+0x34>)
 800dd9e:	4a0c      	ldr	r2, [pc, #48]	@ (800ddd0 <global_stdio_init.part.0+0x38>)
 800dda0:	601a      	str	r2, [r3, #0]
 800dda2:	4620      	mov	r0, r4
 800dda4:	2200      	movs	r2, #0
 800dda6:	2104      	movs	r1, #4
 800dda8:	f7ff ff94 	bl	800dcd4 <std>
 800ddac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	2109      	movs	r1, #9
 800ddb4:	f7ff ff8e 	bl	800dcd4 <std>
 800ddb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ddbc:	2202      	movs	r2, #2
 800ddbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddc2:	2112      	movs	r1, #18
 800ddc4:	f7ff bf86 	b.w	800dcd4 <std>
 800ddc8:	200079d8 	.word	0x200079d8
 800ddcc:	200078a0 	.word	0x200078a0
 800ddd0:	0800dd41 	.word	0x0800dd41

0800ddd4 <__sfp_lock_acquire>:
 800ddd4:	4801      	ldr	r0, [pc, #4]	@ (800dddc <__sfp_lock_acquire+0x8>)
 800ddd6:	f000 b99a 	b.w	800e10e <__retarget_lock_acquire_recursive>
 800ddda:	bf00      	nop
 800dddc:	200079e1 	.word	0x200079e1

0800dde0 <__sfp_lock_release>:
 800dde0:	4801      	ldr	r0, [pc, #4]	@ (800dde8 <__sfp_lock_release+0x8>)
 800dde2:	f000 b995 	b.w	800e110 <__retarget_lock_release_recursive>
 800dde6:	bf00      	nop
 800dde8:	200079e1 	.word	0x200079e1

0800ddec <__sinit>:
 800ddec:	b510      	push	{r4, lr}
 800ddee:	4604      	mov	r4, r0
 800ddf0:	f7ff fff0 	bl	800ddd4 <__sfp_lock_acquire>
 800ddf4:	6a23      	ldr	r3, [r4, #32]
 800ddf6:	b11b      	cbz	r3, 800de00 <__sinit+0x14>
 800ddf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddfc:	f7ff bff0 	b.w	800dde0 <__sfp_lock_release>
 800de00:	4b04      	ldr	r3, [pc, #16]	@ (800de14 <__sinit+0x28>)
 800de02:	6223      	str	r3, [r4, #32]
 800de04:	4b04      	ldr	r3, [pc, #16]	@ (800de18 <__sinit+0x2c>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d1f5      	bne.n	800ddf8 <__sinit+0xc>
 800de0c:	f7ff ffc4 	bl	800dd98 <global_stdio_init.part.0>
 800de10:	e7f2      	b.n	800ddf8 <__sinit+0xc>
 800de12:	bf00      	nop
 800de14:	0800dd59 	.word	0x0800dd59
 800de18:	200079d8 	.word	0x200079d8

0800de1c <_fwalk_sglue>:
 800de1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de20:	4607      	mov	r7, r0
 800de22:	4688      	mov	r8, r1
 800de24:	4614      	mov	r4, r2
 800de26:	2600      	movs	r6, #0
 800de28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de2c:	f1b9 0901 	subs.w	r9, r9, #1
 800de30:	d505      	bpl.n	800de3e <_fwalk_sglue+0x22>
 800de32:	6824      	ldr	r4, [r4, #0]
 800de34:	2c00      	cmp	r4, #0
 800de36:	d1f7      	bne.n	800de28 <_fwalk_sglue+0xc>
 800de38:	4630      	mov	r0, r6
 800de3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de3e:	89ab      	ldrh	r3, [r5, #12]
 800de40:	2b01      	cmp	r3, #1
 800de42:	d907      	bls.n	800de54 <_fwalk_sglue+0x38>
 800de44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de48:	3301      	adds	r3, #1
 800de4a:	d003      	beq.n	800de54 <_fwalk_sglue+0x38>
 800de4c:	4629      	mov	r1, r5
 800de4e:	4638      	mov	r0, r7
 800de50:	47c0      	blx	r8
 800de52:	4306      	orrs	r6, r0
 800de54:	3568      	adds	r5, #104	@ 0x68
 800de56:	e7e9      	b.n	800de2c <_fwalk_sglue+0x10>

0800de58 <siprintf>:
 800de58:	b40e      	push	{r1, r2, r3}
 800de5a:	b500      	push	{lr}
 800de5c:	b09c      	sub	sp, #112	@ 0x70
 800de5e:	ab1d      	add	r3, sp, #116	@ 0x74
 800de60:	9002      	str	r0, [sp, #8]
 800de62:	9006      	str	r0, [sp, #24]
 800de64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800de68:	4809      	ldr	r0, [pc, #36]	@ (800de90 <siprintf+0x38>)
 800de6a:	9107      	str	r1, [sp, #28]
 800de6c:	9104      	str	r1, [sp, #16]
 800de6e:	4909      	ldr	r1, [pc, #36]	@ (800de94 <siprintf+0x3c>)
 800de70:	f853 2b04 	ldr.w	r2, [r3], #4
 800de74:	9105      	str	r1, [sp, #20]
 800de76:	6800      	ldr	r0, [r0, #0]
 800de78:	9301      	str	r3, [sp, #4]
 800de7a:	a902      	add	r1, sp, #8
 800de7c:	f001 fc8a 	bl	800f794 <_svfiprintf_r>
 800de80:	9b02      	ldr	r3, [sp, #8]
 800de82:	2200      	movs	r2, #0
 800de84:	701a      	strb	r2, [r3, #0]
 800de86:	b01c      	add	sp, #112	@ 0x70
 800de88:	f85d eb04 	ldr.w	lr, [sp], #4
 800de8c:	b003      	add	sp, #12
 800de8e:	4770      	bx	lr
 800de90:	20000428 	.word	0x20000428
 800de94:	ffff0208 	.word	0xffff0208

0800de98 <__sread>:
 800de98:	b510      	push	{r4, lr}
 800de9a:	460c      	mov	r4, r1
 800de9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dea0:	f000 f8e6 	bl	800e070 <_read_r>
 800dea4:	2800      	cmp	r0, #0
 800dea6:	bfab      	itete	ge
 800dea8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800deaa:	89a3      	ldrhlt	r3, [r4, #12]
 800deac:	181b      	addge	r3, r3, r0
 800deae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800deb2:	bfac      	ite	ge
 800deb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800deb6:	81a3      	strhlt	r3, [r4, #12]
 800deb8:	bd10      	pop	{r4, pc}

0800deba <__swrite>:
 800deba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800debe:	461f      	mov	r7, r3
 800dec0:	898b      	ldrh	r3, [r1, #12]
 800dec2:	05db      	lsls	r3, r3, #23
 800dec4:	4605      	mov	r5, r0
 800dec6:	460c      	mov	r4, r1
 800dec8:	4616      	mov	r6, r2
 800deca:	d505      	bpl.n	800ded8 <__swrite+0x1e>
 800decc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ded0:	2302      	movs	r3, #2
 800ded2:	2200      	movs	r2, #0
 800ded4:	f000 f8ba 	bl	800e04c <_lseek_r>
 800ded8:	89a3      	ldrh	r3, [r4, #12]
 800deda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dede:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dee2:	81a3      	strh	r3, [r4, #12]
 800dee4:	4632      	mov	r2, r6
 800dee6:	463b      	mov	r3, r7
 800dee8:	4628      	mov	r0, r5
 800deea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800deee:	f000 b8d1 	b.w	800e094 <_write_r>

0800def2 <__sseek>:
 800def2:	b510      	push	{r4, lr}
 800def4:	460c      	mov	r4, r1
 800def6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800defa:	f000 f8a7 	bl	800e04c <_lseek_r>
 800defe:	1c43      	adds	r3, r0, #1
 800df00:	89a3      	ldrh	r3, [r4, #12]
 800df02:	bf15      	itete	ne
 800df04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800df06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800df0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800df0e:	81a3      	strheq	r3, [r4, #12]
 800df10:	bf18      	it	ne
 800df12:	81a3      	strhne	r3, [r4, #12]
 800df14:	bd10      	pop	{r4, pc}

0800df16 <__sclose>:
 800df16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df1a:	f000 b831 	b.w	800df80 <_close_r>

0800df1e <memset>:
 800df1e:	4402      	add	r2, r0
 800df20:	4603      	mov	r3, r0
 800df22:	4293      	cmp	r3, r2
 800df24:	d100      	bne.n	800df28 <memset+0xa>
 800df26:	4770      	bx	lr
 800df28:	f803 1b01 	strb.w	r1, [r3], #1
 800df2c:	e7f9      	b.n	800df22 <memset+0x4>

0800df2e <strncmp>:
 800df2e:	b510      	push	{r4, lr}
 800df30:	b16a      	cbz	r2, 800df4e <strncmp+0x20>
 800df32:	3901      	subs	r1, #1
 800df34:	1884      	adds	r4, r0, r2
 800df36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df3a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800df3e:	429a      	cmp	r2, r3
 800df40:	d103      	bne.n	800df4a <strncmp+0x1c>
 800df42:	42a0      	cmp	r0, r4
 800df44:	d001      	beq.n	800df4a <strncmp+0x1c>
 800df46:	2a00      	cmp	r2, #0
 800df48:	d1f5      	bne.n	800df36 <strncmp+0x8>
 800df4a:	1ad0      	subs	r0, r2, r3
 800df4c:	bd10      	pop	{r4, pc}
 800df4e:	4610      	mov	r0, r2
 800df50:	e7fc      	b.n	800df4c <strncmp+0x1e>

0800df52 <strncpy>:
 800df52:	b510      	push	{r4, lr}
 800df54:	3901      	subs	r1, #1
 800df56:	4603      	mov	r3, r0
 800df58:	b132      	cbz	r2, 800df68 <strncpy+0x16>
 800df5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800df5e:	f803 4b01 	strb.w	r4, [r3], #1
 800df62:	3a01      	subs	r2, #1
 800df64:	2c00      	cmp	r4, #0
 800df66:	d1f7      	bne.n	800df58 <strncpy+0x6>
 800df68:	441a      	add	r2, r3
 800df6a:	2100      	movs	r1, #0
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d100      	bne.n	800df72 <strncpy+0x20>
 800df70:	bd10      	pop	{r4, pc}
 800df72:	f803 1b01 	strb.w	r1, [r3], #1
 800df76:	e7f9      	b.n	800df6c <strncpy+0x1a>

0800df78 <_localeconv_r>:
 800df78:	4800      	ldr	r0, [pc, #0]	@ (800df7c <_localeconv_r+0x4>)
 800df7a:	4770      	bx	lr
 800df7c:	20000568 	.word	0x20000568

0800df80 <_close_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	4d06      	ldr	r5, [pc, #24]	@ (800df9c <_close_r+0x1c>)
 800df84:	2300      	movs	r3, #0
 800df86:	4604      	mov	r4, r0
 800df88:	4608      	mov	r0, r1
 800df8a:	602b      	str	r3, [r5, #0]
 800df8c:	f7f4 fb20 	bl	80025d0 <_close>
 800df90:	1c43      	adds	r3, r0, #1
 800df92:	d102      	bne.n	800df9a <_close_r+0x1a>
 800df94:	682b      	ldr	r3, [r5, #0]
 800df96:	b103      	cbz	r3, 800df9a <_close_r+0x1a>
 800df98:	6023      	str	r3, [r4, #0]
 800df9a:	bd38      	pop	{r3, r4, r5, pc}
 800df9c:	200079dc 	.word	0x200079dc

0800dfa0 <_reclaim_reent>:
 800dfa0:	4b29      	ldr	r3, [pc, #164]	@ (800e048 <_reclaim_reent+0xa8>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4283      	cmp	r3, r0
 800dfa6:	b570      	push	{r4, r5, r6, lr}
 800dfa8:	4604      	mov	r4, r0
 800dfaa:	d04b      	beq.n	800e044 <_reclaim_reent+0xa4>
 800dfac:	69c3      	ldr	r3, [r0, #28]
 800dfae:	b1ab      	cbz	r3, 800dfdc <_reclaim_reent+0x3c>
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	b16b      	cbz	r3, 800dfd0 <_reclaim_reent+0x30>
 800dfb4:	2500      	movs	r5, #0
 800dfb6:	69e3      	ldr	r3, [r4, #28]
 800dfb8:	68db      	ldr	r3, [r3, #12]
 800dfba:	5959      	ldr	r1, [r3, r5]
 800dfbc:	2900      	cmp	r1, #0
 800dfbe:	d13b      	bne.n	800e038 <_reclaim_reent+0x98>
 800dfc0:	3504      	adds	r5, #4
 800dfc2:	2d80      	cmp	r5, #128	@ 0x80
 800dfc4:	d1f7      	bne.n	800dfb6 <_reclaim_reent+0x16>
 800dfc6:	69e3      	ldr	r3, [r4, #28]
 800dfc8:	4620      	mov	r0, r4
 800dfca:	68d9      	ldr	r1, [r3, #12]
 800dfcc:	f000 ff04 	bl	800edd8 <_free_r>
 800dfd0:	69e3      	ldr	r3, [r4, #28]
 800dfd2:	6819      	ldr	r1, [r3, #0]
 800dfd4:	b111      	cbz	r1, 800dfdc <_reclaim_reent+0x3c>
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f000 fefe 	bl	800edd8 <_free_r>
 800dfdc:	6961      	ldr	r1, [r4, #20]
 800dfde:	b111      	cbz	r1, 800dfe6 <_reclaim_reent+0x46>
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f000 fef9 	bl	800edd8 <_free_r>
 800dfe6:	69e1      	ldr	r1, [r4, #28]
 800dfe8:	b111      	cbz	r1, 800dff0 <_reclaim_reent+0x50>
 800dfea:	4620      	mov	r0, r4
 800dfec:	f000 fef4 	bl	800edd8 <_free_r>
 800dff0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dff2:	b111      	cbz	r1, 800dffa <_reclaim_reent+0x5a>
 800dff4:	4620      	mov	r0, r4
 800dff6:	f000 feef 	bl	800edd8 <_free_r>
 800dffa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dffc:	b111      	cbz	r1, 800e004 <_reclaim_reent+0x64>
 800dffe:	4620      	mov	r0, r4
 800e000:	f000 feea 	bl	800edd8 <_free_r>
 800e004:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e006:	b111      	cbz	r1, 800e00e <_reclaim_reent+0x6e>
 800e008:	4620      	mov	r0, r4
 800e00a:	f000 fee5 	bl	800edd8 <_free_r>
 800e00e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e010:	b111      	cbz	r1, 800e018 <_reclaim_reent+0x78>
 800e012:	4620      	mov	r0, r4
 800e014:	f000 fee0 	bl	800edd8 <_free_r>
 800e018:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e01a:	b111      	cbz	r1, 800e022 <_reclaim_reent+0x82>
 800e01c:	4620      	mov	r0, r4
 800e01e:	f000 fedb 	bl	800edd8 <_free_r>
 800e022:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e024:	b111      	cbz	r1, 800e02c <_reclaim_reent+0x8c>
 800e026:	4620      	mov	r0, r4
 800e028:	f000 fed6 	bl	800edd8 <_free_r>
 800e02c:	6a23      	ldr	r3, [r4, #32]
 800e02e:	b14b      	cbz	r3, 800e044 <_reclaim_reent+0xa4>
 800e030:	4620      	mov	r0, r4
 800e032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e036:	4718      	bx	r3
 800e038:	680e      	ldr	r6, [r1, #0]
 800e03a:	4620      	mov	r0, r4
 800e03c:	f000 fecc 	bl	800edd8 <_free_r>
 800e040:	4631      	mov	r1, r6
 800e042:	e7bb      	b.n	800dfbc <_reclaim_reent+0x1c>
 800e044:	bd70      	pop	{r4, r5, r6, pc}
 800e046:	bf00      	nop
 800e048:	20000428 	.word	0x20000428

0800e04c <_lseek_r>:
 800e04c:	b538      	push	{r3, r4, r5, lr}
 800e04e:	4d07      	ldr	r5, [pc, #28]	@ (800e06c <_lseek_r+0x20>)
 800e050:	4604      	mov	r4, r0
 800e052:	4608      	mov	r0, r1
 800e054:	4611      	mov	r1, r2
 800e056:	2200      	movs	r2, #0
 800e058:	602a      	str	r2, [r5, #0]
 800e05a:	461a      	mov	r2, r3
 800e05c:	f7f4 fadf 	bl	800261e <_lseek>
 800e060:	1c43      	adds	r3, r0, #1
 800e062:	d102      	bne.n	800e06a <_lseek_r+0x1e>
 800e064:	682b      	ldr	r3, [r5, #0]
 800e066:	b103      	cbz	r3, 800e06a <_lseek_r+0x1e>
 800e068:	6023      	str	r3, [r4, #0]
 800e06a:	bd38      	pop	{r3, r4, r5, pc}
 800e06c:	200079dc 	.word	0x200079dc

0800e070 <_read_r>:
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	4d07      	ldr	r5, [pc, #28]	@ (800e090 <_read_r+0x20>)
 800e074:	4604      	mov	r4, r0
 800e076:	4608      	mov	r0, r1
 800e078:	4611      	mov	r1, r2
 800e07a:	2200      	movs	r2, #0
 800e07c:	602a      	str	r2, [r5, #0]
 800e07e:	461a      	mov	r2, r3
 800e080:	f7f4 fa6d 	bl	800255e <_read>
 800e084:	1c43      	adds	r3, r0, #1
 800e086:	d102      	bne.n	800e08e <_read_r+0x1e>
 800e088:	682b      	ldr	r3, [r5, #0]
 800e08a:	b103      	cbz	r3, 800e08e <_read_r+0x1e>
 800e08c:	6023      	str	r3, [r4, #0]
 800e08e:	bd38      	pop	{r3, r4, r5, pc}
 800e090:	200079dc 	.word	0x200079dc

0800e094 <_write_r>:
 800e094:	b538      	push	{r3, r4, r5, lr}
 800e096:	4d07      	ldr	r5, [pc, #28]	@ (800e0b4 <_write_r+0x20>)
 800e098:	4604      	mov	r4, r0
 800e09a:	4608      	mov	r0, r1
 800e09c:	4611      	mov	r1, r2
 800e09e:	2200      	movs	r2, #0
 800e0a0:	602a      	str	r2, [r5, #0]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	f7f4 fa78 	bl	8002598 <_write>
 800e0a8:	1c43      	adds	r3, r0, #1
 800e0aa:	d102      	bne.n	800e0b2 <_write_r+0x1e>
 800e0ac:	682b      	ldr	r3, [r5, #0]
 800e0ae:	b103      	cbz	r3, 800e0b2 <_write_r+0x1e>
 800e0b0:	6023      	str	r3, [r4, #0]
 800e0b2:	bd38      	pop	{r3, r4, r5, pc}
 800e0b4:	200079dc 	.word	0x200079dc

0800e0b8 <__errno>:
 800e0b8:	4b01      	ldr	r3, [pc, #4]	@ (800e0c0 <__errno+0x8>)
 800e0ba:	6818      	ldr	r0, [r3, #0]
 800e0bc:	4770      	bx	lr
 800e0be:	bf00      	nop
 800e0c0:	20000428 	.word	0x20000428

0800e0c4 <__libc_init_array>:
 800e0c4:	b570      	push	{r4, r5, r6, lr}
 800e0c6:	4d0d      	ldr	r5, [pc, #52]	@ (800e0fc <__libc_init_array+0x38>)
 800e0c8:	4c0d      	ldr	r4, [pc, #52]	@ (800e100 <__libc_init_array+0x3c>)
 800e0ca:	1b64      	subs	r4, r4, r5
 800e0cc:	10a4      	asrs	r4, r4, #2
 800e0ce:	2600      	movs	r6, #0
 800e0d0:	42a6      	cmp	r6, r4
 800e0d2:	d109      	bne.n	800e0e8 <__libc_init_array+0x24>
 800e0d4:	4d0b      	ldr	r5, [pc, #44]	@ (800e104 <__libc_init_array+0x40>)
 800e0d6:	4c0c      	ldr	r4, [pc, #48]	@ (800e108 <__libc_init_array+0x44>)
 800e0d8:	f002 fa0c 	bl	80104f4 <_init>
 800e0dc:	1b64      	subs	r4, r4, r5
 800e0de:	10a4      	asrs	r4, r4, #2
 800e0e0:	2600      	movs	r6, #0
 800e0e2:	42a6      	cmp	r6, r4
 800e0e4:	d105      	bne.n	800e0f2 <__libc_init_array+0x2e>
 800e0e6:	bd70      	pop	{r4, r5, r6, pc}
 800e0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0ec:	4798      	blx	r3
 800e0ee:	3601      	adds	r6, #1
 800e0f0:	e7ee      	b.n	800e0d0 <__libc_init_array+0xc>
 800e0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0f6:	4798      	blx	r3
 800e0f8:	3601      	adds	r6, #1
 800e0fa:	e7f2      	b.n	800e0e2 <__libc_init_array+0x1e>
 800e0fc:	08011780 	.word	0x08011780
 800e100:	08011780 	.word	0x08011780
 800e104:	08011780 	.word	0x08011780
 800e108:	08011784 	.word	0x08011784

0800e10c <__retarget_lock_init_recursive>:
 800e10c:	4770      	bx	lr

0800e10e <__retarget_lock_acquire_recursive>:
 800e10e:	4770      	bx	lr

0800e110 <__retarget_lock_release_recursive>:
 800e110:	4770      	bx	lr

0800e112 <strcpy>:
 800e112:	4603      	mov	r3, r0
 800e114:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e118:	f803 2b01 	strb.w	r2, [r3], #1
 800e11c:	2a00      	cmp	r2, #0
 800e11e:	d1f9      	bne.n	800e114 <strcpy+0x2>
 800e120:	4770      	bx	lr

0800e122 <memcpy>:
 800e122:	440a      	add	r2, r1
 800e124:	4291      	cmp	r1, r2
 800e126:	f100 33ff 	add.w	r3, r0, #4294967295
 800e12a:	d100      	bne.n	800e12e <memcpy+0xc>
 800e12c:	4770      	bx	lr
 800e12e:	b510      	push	{r4, lr}
 800e130:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e134:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e138:	4291      	cmp	r1, r2
 800e13a:	d1f9      	bne.n	800e130 <memcpy+0xe>
 800e13c:	bd10      	pop	{r4, pc}

0800e13e <quorem>:
 800e13e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e142:	6903      	ldr	r3, [r0, #16]
 800e144:	690c      	ldr	r4, [r1, #16]
 800e146:	42a3      	cmp	r3, r4
 800e148:	4607      	mov	r7, r0
 800e14a:	db7e      	blt.n	800e24a <quorem+0x10c>
 800e14c:	3c01      	subs	r4, #1
 800e14e:	f101 0814 	add.w	r8, r1, #20
 800e152:	00a3      	lsls	r3, r4, #2
 800e154:	f100 0514 	add.w	r5, r0, #20
 800e158:	9300      	str	r3, [sp, #0]
 800e15a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e15e:	9301      	str	r3, [sp, #4]
 800e160:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e164:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e168:	3301      	adds	r3, #1
 800e16a:	429a      	cmp	r2, r3
 800e16c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e170:	fbb2 f6f3 	udiv	r6, r2, r3
 800e174:	d32e      	bcc.n	800e1d4 <quorem+0x96>
 800e176:	f04f 0a00 	mov.w	sl, #0
 800e17a:	46c4      	mov	ip, r8
 800e17c:	46ae      	mov	lr, r5
 800e17e:	46d3      	mov	fp, sl
 800e180:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e184:	b298      	uxth	r0, r3
 800e186:	fb06 a000 	mla	r0, r6, r0, sl
 800e18a:	0c02      	lsrs	r2, r0, #16
 800e18c:	0c1b      	lsrs	r3, r3, #16
 800e18e:	fb06 2303 	mla	r3, r6, r3, r2
 800e192:	f8de 2000 	ldr.w	r2, [lr]
 800e196:	b280      	uxth	r0, r0
 800e198:	b292      	uxth	r2, r2
 800e19a:	1a12      	subs	r2, r2, r0
 800e19c:	445a      	add	r2, fp
 800e19e:	f8de 0000 	ldr.w	r0, [lr]
 800e1a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e1ac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e1b0:	b292      	uxth	r2, r2
 800e1b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e1b6:	45e1      	cmp	r9, ip
 800e1b8:	f84e 2b04 	str.w	r2, [lr], #4
 800e1bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e1c0:	d2de      	bcs.n	800e180 <quorem+0x42>
 800e1c2:	9b00      	ldr	r3, [sp, #0]
 800e1c4:	58eb      	ldr	r3, [r5, r3]
 800e1c6:	b92b      	cbnz	r3, 800e1d4 <quorem+0x96>
 800e1c8:	9b01      	ldr	r3, [sp, #4]
 800e1ca:	3b04      	subs	r3, #4
 800e1cc:	429d      	cmp	r5, r3
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	d32f      	bcc.n	800e232 <quorem+0xf4>
 800e1d2:	613c      	str	r4, [r7, #16]
 800e1d4:	4638      	mov	r0, r7
 800e1d6:	f001 f979 	bl	800f4cc <__mcmp>
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	db25      	blt.n	800e22a <quorem+0xec>
 800e1de:	4629      	mov	r1, r5
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	f858 2b04 	ldr.w	r2, [r8], #4
 800e1e6:	f8d1 c000 	ldr.w	ip, [r1]
 800e1ea:	fa1f fe82 	uxth.w	lr, r2
 800e1ee:	fa1f f38c 	uxth.w	r3, ip
 800e1f2:	eba3 030e 	sub.w	r3, r3, lr
 800e1f6:	4403      	add	r3, r0
 800e1f8:	0c12      	lsrs	r2, r2, #16
 800e1fa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e1fe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e202:	b29b      	uxth	r3, r3
 800e204:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e208:	45c1      	cmp	r9, r8
 800e20a:	f841 3b04 	str.w	r3, [r1], #4
 800e20e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e212:	d2e6      	bcs.n	800e1e2 <quorem+0xa4>
 800e214:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e218:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e21c:	b922      	cbnz	r2, 800e228 <quorem+0xea>
 800e21e:	3b04      	subs	r3, #4
 800e220:	429d      	cmp	r5, r3
 800e222:	461a      	mov	r2, r3
 800e224:	d30b      	bcc.n	800e23e <quorem+0x100>
 800e226:	613c      	str	r4, [r7, #16]
 800e228:	3601      	adds	r6, #1
 800e22a:	4630      	mov	r0, r6
 800e22c:	b003      	add	sp, #12
 800e22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e232:	6812      	ldr	r2, [r2, #0]
 800e234:	3b04      	subs	r3, #4
 800e236:	2a00      	cmp	r2, #0
 800e238:	d1cb      	bne.n	800e1d2 <quorem+0x94>
 800e23a:	3c01      	subs	r4, #1
 800e23c:	e7c6      	b.n	800e1cc <quorem+0x8e>
 800e23e:	6812      	ldr	r2, [r2, #0]
 800e240:	3b04      	subs	r3, #4
 800e242:	2a00      	cmp	r2, #0
 800e244:	d1ef      	bne.n	800e226 <quorem+0xe8>
 800e246:	3c01      	subs	r4, #1
 800e248:	e7ea      	b.n	800e220 <quorem+0xe2>
 800e24a:	2000      	movs	r0, #0
 800e24c:	e7ee      	b.n	800e22c <quorem+0xee>
	...

0800e250 <_dtoa_r>:
 800e250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e254:	69c7      	ldr	r7, [r0, #28]
 800e256:	b099      	sub	sp, #100	@ 0x64
 800e258:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e25c:	ec55 4b10 	vmov	r4, r5, d0
 800e260:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e262:	9109      	str	r1, [sp, #36]	@ 0x24
 800e264:	4683      	mov	fp, r0
 800e266:	920e      	str	r2, [sp, #56]	@ 0x38
 800e268:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e26a:	b97f      	cbnz	r7, 800e28c <_dtoa_r+0x3c>
 800e26c:	2010      	movs	r0, #16
 800e26e:	f000 fdfd 	bl	800ee6c <malloc>
 800e272:	4602      	mov	r2, r0
 800e274:	f8cb 001c 	str.w	r0, [fp, #28]
 800e278:	b920      	cbnz	r0, 800e284 <_dtoa_r+0x34>
 800e27a:	4ba7      	ldr	r3, [pc, #668]	@ (800e518 <_dtoa_r+0x2c8>)
 800e27c:	21ef      	movs	r1, #239	@ 0xef
 800e27e:	48a7      	ldr	r0, [pc, #668]	@ (800e51c <_dtoa_r+0x2cc>)
 800e280:	f001 fc5a 	bl	800fb38 <__assert_func>
 800e284:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e288:	6007      	str	r7, [r0, #0]
 800e28a:	60c7      	str	r7, [r0, #12]
 800e28c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e290:	6819      	ldr	r1, [r3, #0]
 800e292:	b159      	cbz	r1, 800e2ac <_dtoa_r+0x5c>
 800e294:	685a      	ldr	r2, [r3, #4]
 800e296:	604a      	str	r2, [r1, #4]
 800e298:	2301      	movs	r3, #1
 800e29a:	4093      	lsls	r3, r2
 800e29c:	608b      	str	r3, [r1, #8]
 800e29e:	4658      	mov	r0, fp
 800e2a0:	f000 feda 	bl	800f058 <_Bfree>
 800e2a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	601a      	str	r2, [r3, #0]
 800e2ac:	1e2b      	subs	r3, r5, #0
 800e2ae:	bfb9      	ittee	lt
 800e2b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e2b4:	9303      	strlt	r3, [sp, #12]
 800e2b6:	2300      	movge	r3, #0
 800e2b8:	6033      	strge	r3, [r6, #0]
 800e2ba:	9f03      	ldr	r7, [sp, #12]
 800e2bc:	4b98      	ldr	r3, [pc, #608]	@ (800e520 <_dtoa_r+0x2d0>)
 800e2be:	bfbc      	itt	lt
 800e2c0:	2201      	movlt	r2, #1
 800e2c2:	6032      	strlt	r2, [r6, #0]
 800e2c4:	43bb      	bics	r3, r7
 800e2c6:	d112      	bne.n	800e2ee <_dtoa_r+0x9e>
 800e2c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e2ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e2ce:	6013      	str	r3, [r2, #0]
 800e2d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e2d4:	4323      	orrs	r3, r4
 800e2d6:	f000 854d 	beq.w	800ed74 <_dtoa_r+0xb24>
 800e2da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e2dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e534 <_dtoa_r+0x2e4>
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 854f 	beq.w	800ed84 <_dtoa_r+0xb34>
 800e2e6:	f10a 0303 	add.w	r3, sl, #3
 800e2ea:	f000 bd49 	b.w	800ed80 <_dtoa_r+0xb30>
 800e2ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	ec51 0b17 	vmov	r0, r1, d7
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e2fe:	f7f2 fc1b 	bl	8000b38 <__aeabi_dcmpeq>
 800e302:	4680      	mov	r8, r0
 800e304:	b158      	cbz	r0, 800e31e <_dtoa_r+0xce>
 800e306:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e308:	2301      	movs	r3, #1
 800e30a:	6013      	str	r3, [r2, #0]
 800e30c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e30e:	b113      	cbz	r3, 800e316 <_dtoa_r+0xc6>
 800e310:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e312:	4b84      	ldr	r3, [pc, #528]	@ (800e524 <_dtoa_r+0x2d4>)
 800e314:	6013      	str	r3, [r2, #0]
 800e316:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e538 <_dtoa_r+0x2e8>
 800e31a:	f000 bd33 	b.w	800ed84 <_dtoa_r+0xb34>
 800e31e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e322:	aa16      	add	r2, sp, #88	@ 0x58
 800e324:	a917      	add	r1, sp, #92	@ 0x5c
 800e326:	4658      	mov	r0, fp
 800e328:	f001 f980 	bl	800f62c <__d2b>
 800e32c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e330:	4681      	mov	r9, r0
 800e332:	2e00      	cmp	r6, #0
 800e334:	d077      	beq.n	800e426 <_dtoa_r+0x1d6>
 800e336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e338:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e344:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e348:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e34c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e350:	4619      	mov	r1, r3
 800e352:	2200      	movs	r2, #0
 800e354:	4b74      	ldr	r3, [pc, #464]	@ (800e528 <_dtoa_r+0x2d8>)
 800e356:	f7f1 ffcf 	bl	80002f8 <__aeabi_dsub>
 800e35a:	a369      	add	r3, pc, #420	@ (adr r3, 800e500 <_dtoa_r+0x2b0>)
 800e35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e360:	f7f2 f982 	bl	8000668 <__aeabi_dmul>
 800e364:	a368      	add	r3, pc, #416	@ (adr r3, 800e508 <_dtoa_r+0x2b8>)
 800e366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36a:	f7f1 ffc7 	bl	80002fc <__adddf3>
 800e36e:	4604      	mov	r4, r0
 800e370:	4630      	mov	r0, r6
 800e372:	460d      	mov	r5, r1
 800e374:	f7f2 f90e 	bl	8000594 <__aeabi_i2d>
 800e378:	a365      	add	r3, pc, #404	@ (adr r3, 800e510 <_dtoa_r+0x2c0>)
 800e37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37e:	f7f2 f973 	bl	8000668 <__aeabi_dmul>
 800e382:	4602      	mov	r2, r0
 800e384:	460b      	mov	r3, r1
 800e386:	4620      	mov	r0, r4
 800e388:	4629      	mov	r1, r5
 800e38a:	f7f1 ffb7 	bl	80002fc <__adddf3>
 800e38e:	4604      	mov	r4, r0
 800e390:	460d      	mov	r5, r1
 800e392:	f7f2 fc19 	bl	8000bc8 <__aeabi_d2iz>
 800e396:	2200      	movs	r2, #0
 800e398:	4607      	mov	r7, r0
 800e39a:	2300      	movs	r3, #0
 800e39c:	4620      	mov	r0, r4
 800e39e:	4629      	mov	r1, r5
 800e3a0:	f7f2 fbd4 	bl	8000b4c <__aeabi_dcmplt>
 800e3a4:	b140      	cbz	r0, 800e3b8 <_dtoa_r+0x168>
 800e3a6:	4638      	mov	r0, r7
 800e3a8:	f7f2 f8f4 	bl	8000594 <__aeabi_i2d>
 800e3ac:	4622      	mov	r2, r4
 800e3ae:	462b      	mov	r3, r5
 800e3b0:	f7f2 fbc2 	bl	8000b38 <__aeabi_dcmpeq>
 800e3b4:	b900      	cbnz	r0, 800e3b8 <_dtoa_r+0x168>
 800e3b6:	3f01      	subs	r7, #1
 800e3b8:	2f16      	cmp	r7, #22
 800e3ba:	d851      	bhi.n	800e460 <_dtoa_r+0x210>
 800e3bc:	4b5b      	ldr	r3, [pc, #364]	@ (800e52c <_dtoa_r+0x2dc>)
 800e3be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3ca:	f7f2 fbbf 	bl	8000b4c <__aeabi_dcmplt>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	d048      	beq.n	800e464 <_dtoa_r+0x214>
 800e3d2:	3f01      	subs	r7, #1
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	9312      	str	r3, [sp, #72]	@ 0x48
 800e3d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e3da:	1b9b      	subs	r3, r3, r6
 800e3dc:	1e5a      	subs	r2, r3, #1
 800e3de:	bf44      	itt	mi
 800e3e0:	f1c3 0801 	rsbmi	r8, r3, #1
 800e3e4:	2300      	movmi	r3, #0
 800e3e6:	9208      	str	r2, [sp, #32]
 800e3e8:	bf54      	ite	pl
 800e3ea:	f04f 0800 	movpl.w	r8, #0
 800e3ee:	9308      	strmi	r3, [sp, #32]
 800e3f0:	2f00      	cmp	r7, #0
 800e3f2:	db39      	blt.n	800e468 <_dtoa_r+0x218>
 800e3f4:	9b08      	ldr	r3, [sp, #32]
 800e3f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e3f8:	443b      	add	r3, r7
 800e3fa:	9308      	str	r3, [sp, #32]
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800e400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e402:	2b09      	cmp	r3, #9
 800e404:	d864      	bhi.n	800e4d0 <_dtoa_r+0x280>
 800e406:	2b05      	cmp	r3, #5
 800e408:	bfc4      	itt	gt
 800e40a:	3b04      	subgt	r3, #4
 800e40c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e410:	f1a3 0302 	sub.w	r3, r3, #2
 800e414:	bfcc      	ite	gt
 800e416:	2400      	movgt	r4, #0
 800e418:	2401      	movle	r4, #1
 800e41a:	2b03      	cmp	r3, #3
 800e41c:	d863      	bhi.n	800e4e6 <_dtoa_r+0x296>
 800e41e:	e8df f003 	tbb	[pc, r3]
 800e422:	372a      	.short	0x372a
 800e424:	5535      	.short	0x5535
 800e426:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e42a:	441e      	add	r6, r3
 800e42c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e430:	2b20      	cmp	r3, #32
 800e432:	bfc1      	itttt	gt
 800e434:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e438:	409f      	lslgt	r7, r3
 800e43a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e43e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e442:	bfd6      	itet	le
 800e444:	f1c3 0320 	rsble	r3, r3, #32
 800e448:	ea47 0003 	orrgt.w	r0, r7, r3
 800e44c:	fa04 f003 	lslle.w	r0, r4, r3
 800e450:	f7f2 f890 	bl	8000574 <__aeabi_ui2d>
 800e454:	2201      	movs	r2, #1
 800e456:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e45a:	3e01      	subs	r6, #1
 800e45c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e45e:	e777      	b.n	800e350 <_dtoa_r+0x100>
 800e460:	2301      	movs	r3, #1
 800e462:	e7b8      	b.n	800e3d6 <_dtoa_r+0x186>
 800e464:	9012      	str	r0, [sp, #72]	@ 0x48
 800e466:	e7b7      	b.n	800e3d8 <_dtoa_r+0x188>
 800e468:	427b      	negs	r3, r7
 800e46a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e46c:	2300      	movs	r3, #0
 800e46e:	eba8 0807 	sub.w	r8, r8, r7
 800e472:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e474:	e7c4      	b.n	800e400 <_dtoa_r+0x1b0>
 800e476:	2300      	movs	r3, #0
 800e478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e47a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	dc35      	bgt.n	800e4ec <_dtoa_r+0x29c>
 800e480:	2301      	movs	r3, #1
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	9307      	str	r3, [sp, #28]
 800e486:	461a      	mov	r2, r3
 800e488:	920e      	str	r2, [sp, #56]	@ 0x38
 800e48a:	e00b      	b.n	800e4a4 <_dtoa_r+0x254>
 800e48c:	2301      	movs	r3, #1
 800e48e:	e7f3      	b.n	800e478 <_dtoa_r+0x228>
 800e490:	2300      	movs	r3, #0
 800e492:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e496:	18fb      	adds	r3, r7, r3
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	3301      	adds	r3, #1
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	9307      	str	r3, [sp, #28]
 800e4a0:	bfb8      	it	lt
 800e4a2:	2301      	movlt	r3, #1
 800e4a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	2204      	movs	r2, #4
 800e4ac:	f102 0514 	add.w	r5, r2, #20
 800e4b0:	429d      	cmp	r5, r3
 800e4b2:	d91f      	bls.n	800e4f4 <_dtoa_r+0x2a4>
 800e4b4:	6041      	str	r1, [r0, #4]
 800e4b6:	4658      	mov	r0, fp
 800e4b8:	f000 fd8e 	bl	800efd8 <_Balloc>
 800e4bc:	4682      	mov	sl, r0
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	d13c      	bne.n	800e53c <_dtoa_r+0x2ec>
 800e4c2:	4b1b      	ldr	r3, [pc, #108]	@ (800e530 <_dtoa_r+0x2e0>)
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e4ca:	e6d8      	b.n	800e27e <_dtoa_r+0x2e>
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	e7e0      	b.n	800e492 <_dtoa_r+0x242>
 800e4d0:	2401      	movs	r4, #1
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	9307      	str	r3, [sp, #28]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	2312      	movs	r3, #18
 800e4e4:	e7d0      	b.n	800e488 <_dtoa_r+0x238>
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4ea:	e7f5      	b.n	800e4d8 <_dtoa_r+0x288>
 800e4ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4ee:	9300      	str	r3, [sp, #0]
 800e4f0:	9307      	str	r3, [sp, #28]
 800e4f2:	e7d7      	b.n	800e4a4 <_dtoa_r+0x254>
 800e4f4:	3101      	adds	r1, #1
 800e4f6:	0052      	lsls	r2, r2, #1
 800e4f8:	e7d8      	b.n	800e4ac <_dtoa_r+0x25c>
 800e4fa:	bf00      	nop
 800e4fc:	f3af 8000 	nop.w
 800e500:	636f4361 	.word	0x636f4361
 800e504:	3fd287a7 	.word	0x3fd287a7
 800e508:	8b60c8b3 	.word	0x8b60c8b3
 800e50c:	3fc68a28 	.word	0x3fc68a28
 800e510:	509f79fb 	.word	0x509f79fb
 800e514:	3fd34413 	.word	0x3fd34413
 800e518:	08011411 	.word	0x08011411
 800e51c:	08011428 	.word	0x08011428
 800e520:	7ff00000 	.word	0x7ff00000
 800e524:	080113e1 	.word	0x080113e1
 800e528:	3ff80000 	.word	0x3ff80000
 800e52c:	08011520 	.word	0x08011520
 800e530:	08011480 	.word	0x08011480
 800e534:	0801140d 	.word	0x0801140d
 800e538:	080113e0 	.word	0x080113e0
 800e53c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e540:	6018      	str	r0, [r3, #0]
 800e542:	9b07      	ldr	r3, [sp, #28]
 800e544:	2b0e      	cmp	r3, #14
 800e546:	f200 80a4 	bhi.w	800e692 <_dtoa_r+0x442>
 800e54a:	2c00      	cmp	r4, #0
 800e54c:	f000 80a1 	beq.w	800e692 <_dtoa_r+0x442>
 800e550:	2f00      	cmp	r7, #0
 800e552:	dd33      	ble.n	800e5bc <_dtoa_r+0x36c>
 800e554:	4bad      	ldr	r3, [pc, #692]	@ (800e80c <_dtoa_r+0x5bc>)
 800e556:	f007 020f 	and.w	r2, r7, #15
 800e55a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e55e:	ed93 7b00 	vldr	d7, [r3]
 800e562:	05f8      	lsls	r0, r7, #23
 800e564:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e568:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e56c:	d516      	bpl.n	800e59c <_dtoa_r+0x34c>
 800e56e:	4ba8      	ldr	r3, [pc, #672]	@ (800e810 <_dtoa_r+0x5c0>)
 800e570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e578:	f7f2 f9a0 	bl	80008bc <__aeabi_ddiv>
 800e57c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e580:	f004 040f 	and.w	r4, r4, #15
 800e584:	2603      	movs	r6, #3
 800e586:	4da2      	ldr	r5, [pc, #648]	@ (800e810 <_dtoa_r+0x5c0>)
 800e588:	b954      	cbnz	r4, 800e5a0 <_dtoa_r+0x350>
 800e58a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e592:	f7f2 f993 	bl	80008bc <__aeabi_ddiv>
 800e596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e59a:	e028      	b.n	800e5ee <_dtoa_r+0x39e>
 800e59c:	2602      	movs	r6, #2
 800e59e:	e7f2      	b.n	800e586 <_dtoa_r+0x336>
 800e5a0:	07e1      	lsls	r1, r4, #31
 800e5a2:	d508      	bpl.n	800e5b6 <_dtoa_r+0x366>
 800e5a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e5ac:	f7f2 f85c 	bl	8000668 <__aeabi_dmul>
 800e5b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e5b4:	3601      	adds	r6, #1
 800e5b6:	1064      	asrs	r4, r4, #1
 800e5b8:	3508      	adds	r5, #8
 800e5ba:	e7e5      	b.n	800e588 <_dtoa_r+0x338>
 800e5bc:	f000 80d2 	beq.w	800e764 <_dtoa_r+0x514>
 800e5c0:	427c      	negs	r4, r7
 800e5c2:	4b92      	ldr	r3, [pc, #584]	@ (800e80c <_dtoa_r+0x5bc>)
 800e5c4:	4d92      	ldr	r5, [pc, #584]	@ (800e810 <_dtoa_r+0x5c0>)
 800e5c6:	f004 020f 	and.w	r2, r4, #15
 800e5ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5d6:	f7f2 f847 	bl	8000668 <__aeabi_dmul>
 800e5da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5de:	1124      	asrs	r4, r4, #4
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	2602      	movs	r6, #2
 800e5e4:	2c00      	cmp	r4, #0
 800e5e6:	f040 80b2 	bne.w	800e74e <_dtoa_r+0x4fe>
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d1d3      	bne.n	800e596 <_dtoa_r+0x346>
 800e5ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e5f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f000 80b7 	beq.w	800e768 <_dtoa_r+0x518>
 800e5fa:	4b86      	ldr	r3, [pc, #536]	@ (800e814 <_dtoa_r+0x5c4>)
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	4620      	mov	r0, r4
 800e600:	4629      	mov	r1, r5
 800e602:	f7f2 faa3 	bl	8000b4c <__aeabi_dcmplt>
 800e606:	2800      	cmp	r0, #0
 800e608:	f000 80ae 	beq.w	800e768 <_dtoa_r+0x518>
 800e60c:	9b07      	ldr	r3, [sp, #28]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f000 80aa 	beq.w	800e768 <_dtoa_r+0x518>
 800e614:	9b00      	ldr	r3, [sp, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	dd37      	ble.n	800e68a <_dtoa_r+0x43a>
 800e61a:	1e7b      	subs	r3, r7, #1
 800e61c:	9304      	str	r3, [sp, #16]
 800e61e:	4620      	mov	r0, r4
 800e620:	4b7d      	ldr	r3, [pc, #500]	@ (800e818 <_dtoa_r+0x5c8>)
 800e622:	2200      	movs	r2, #0
 800e624:	4629      	mov	r1, r5
 800e626:	f7f2 f81f 	bl	8000668 <__aeabi_dmul>
 800e62a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e62e:	9c00      	ldr	r4, [sp, #0]
 800e630:	3601      	adds	r6, #1
 800e632:	4630      	mov	r0, r6
 800e634:	f7f1 ffae 	bl	8000594 <__aeabi_i2d>
 800e638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e63c:	f7f2 f814 	bl	8000668 <__aeabi_dmul>
 800e640:	4b76      	ldr	r3, [pc, #472]	@ (800e81c <_dtoa_r+0x5cc>)
 800e642:	2200      	movs	r2, #0
 800e644:	f7f1 fe5a 	bl	80002fc <__adddf3>
 800e648:	4605      	mov	r5, r0
 800e64a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e64e:	2c00      	cmp	r4, #0
 800e650:	f040 808d 	bne.w	800e76e <_dtoa_r+0x51e>
 800e654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e658:	4b71      	ldr	r3, [pc, #452]	@ (800e820 <_dtoa_r+0x5d0>)
 800e65a:	2200      	movs	r2, #0
 800e65c:	f7f1 fe4c 	bl	80002f8 <__aeabi_dsub>
 800e660:	4602      	mov	r2, r0
 800e662:	460b      	mov	r3, r1
 800e664:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e668:	462a      	mov	r2, r5
 800e66a:	4633      	mov	r3, r6
 800e66c:	f7f2 fa8c 	bl	8000b88 <__aeabi_dcmpgt>
 800e670:	2800      	cmp	r0, #0
 800e672:	f040 828b 	bne.w	800eb8c <_dtoa_r+0x93c>
 800e676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e67a:	462a      	mov	r2, r5
 800e67c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e680:	f7f2 fa64 	bl	8000b4c <__aeabi_dcmplt>
 800e684:	2800      	cmp	r0, #0
 800e686:	f040 8128 	bne.w	800e8da <_dtoa_r+0x68a>
 800e68a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e68e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e692:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e694:	2b00      	cmp	r3, #0
 800e696:	f2c0 815a 	blt.w	800e94e <_dtoa_r+0x6fe>
 800e69a:	2f0e      	cmp	r7, #14
 800e69c:	f300 8157 	bgt.w	800e94e <_dtoa_r+0x6fe>
 800e6a0:	4b5a      	ldr	r3, [pc, #360]	@ (800e80c <_dtoa_r+0x5bc>)
 800e6a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e6a6:	ed93 7b00 	vldr	d7, [r3]
 800e6aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	ed8d 7b00 	vstr	d7, [sp]
 800e6b2:	da03      	bge.n	800e6bc <_dtoa_r+0x46c>
 800e6b4:	9b07      	ldr	r3, [sp, #28]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	f340 8101 	ble.w	800e8be <_dtoa_r+0x66e>
 800e6bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e6c0:	4656      	mov	r6, sl
 800e6c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	4629      	mov	r1, r5
 800e6ca:	f7f2 f8f7 	bl	80008bc <__aeabi_ddiv>
 800e6ce:	f7f2 fa7b 	bl	8000bc8 <__aeabi_d2iz>
 800e6d2:	4680      	mov	r8, r0
 800e6d4:	f7f1 ff5e 	bl	8000594 <__aeabi_i2d>
 800e6d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6dc:	f7f1 ffc4 	bl	8000668 <__aeabi_dmul>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e6ec:	f7f1 fe04 	bl	80002f8 <__aeabi_dsub>
 800e6f0:	f806 4b01 	strb.w	r4, [r6], #1
 800e6f4:	9d07      	ldr	r5, [sp, #28]
 800e6f6:	eba6 040a 	sub.w	r4, r6, sl
 800e6fa:	42a5      	cmp	r5, r4
 800e6fc:	4602      	mov	r2, r0
 800e6fe:	460b      	mov	r3, r1
 800e700:	f040 8117 	bne.w	800e932 <_dtoa_r+0x6e2>
 800e704:	f7f1 fdfa 	bl	80002fc <__adddf3>
 800e708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e70c:	4604      	mov	r4, r0
 800e70e:	460d      	mov	r5, r1
 800e710:	f7f2 fa3a 	bl	8000b88 <__aeabi_dcmpgt>
 800e714:	2800      	cmp	r0, #0
 800e716:	f040 80f9 	bne.w	800e90c <_dtoa_r+0x6bc>
 800e71a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e71e:	4620      	mov	r0, r4
 800e720:	4629      	mov	r1, r5
 800e722:	f7f2 fa09 	bl	8000b38 <__aeabi_dcmpeq>
 800e726:	b118      	cbz	r0, 800e730 <_dtoa_r+0x4e0>
 800e728:	f018 0f01 	tst.w	r8, #1
 800e72c:	f040 80ee 	bne.w	800e90c <_dtoa_r+0x6bc>
 800e730:	4649      	mov	r1, r9
 800e732:	4658      	mov	r0, fp
 800e734:	f000 fc90 	bl	800f058 <_Bfree>
 800e738:	2300      	movs	r3, #0
 800e73a:	7033      	strb	r3, [r6, #0]
 800e73c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e73e:	3701      	adds	r7, #1
 800e740:	601f      	str	r7, [r3, #0]
 800e742:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e744:	2b00      	cmp	r3, #0
 800e746:	f000 831d 	beq.w	800ed84 <_dtoa_r+0xb34>
 800e74a:	601e      	str	r6, [r3, #0]
 800e74c:	e31a      	b.n	800ed84 <_dtoa_r+0xb34>
 800e74e:	07e2      	lsls	r2, r4, #31
 800e750:	d505      	bpl.n	800e75e <_dtoa_r+0x50e>
 800e752:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e756:	f7f1 ff87 	bl	8000668 <__aeabi_dmul>
 800e75a:	3601      	adds	r6, #1
 800e75c:	2301      	movs	r3, #1
 800e75e:	1064      	asrs	r4, r4, #1
 800e760:	3508      	adds	r5, #8
 800e762:	e73f      	b.n	800e5e4 <_dtoa_r+0x394>
 800e764:	2602      	movs	r6, #2
 800e766:	e742      	b.n	800e5ee <_dtoa_r+0x39e>
 800e768:	9c07      	ldr	r4, [sp, #28]
 800e76a:	9704      	str	r7, [sp, #16]
 800e76c:	e761      	b.n	800e632 <_dtoa_r+0x3e2>
 800e76e:	4b27      	ldr	r3, [pc, #156]	@ (800e80c <_dtoa_r+0x5bc>)
 800e770:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e772:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e776:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e77a:	4454      	add	r4, sl
 800e77c:	2900      	cmp	r1, #0
 800e77e:	d053      	beq.n	800e828 <_dtoa_r+0x5d8>
 800e780:	4928      	ldr	r1, [pc, #160]	@ (800e824 <_dtoa_r+0x5d4>)
 800e782:	2000      	movs	r0, #0
 800e784:	f7f2 f89a 	bl	80008bc <__aeabi_ddiv>
 800e788:	4633      	mov	r3, r6
 800e78a:	462a      	mov	r2, r5
 800e78c:	f7f1 fdb4 	bl	80002f8 <__aeabi_dsub>
 800e790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e794:	4656      	mov	r6, sl
 800e796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e79a:	f7f2 fa15 	bl	8000bc8 <__aeabi_d2iz>
 800e79e:	4605      	mov	r5, r0
 800e7a0:	f7f1 fef8 	bl	8000594 <__aeabi_i2d>
 800e7a4:	4602      	mov	r2, r0
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7ac:	f7f1 fda4 	bl	80002f8 <__aeabi_dsub>
 800e7b0:	3530      	adds	r5, #48	@ 0x30
 800e7b2:	4602      	mov	r2, r0
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e7ba:	f806 5b01 	strb.w	r5, [r6], #1
 800e7be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e7c2:	f7f2 f9c3 	bl	8000b4c <__aeabi_dcmplt>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	d171      	bne.n	800e8ae <_dtoa_r+0x65e>
 800e7ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7ce:	4911      	ldr	r1, [pc, #68]	@ (800e814 <_dtoa_r+0x5c4>)
 800e7d0:	2000      	movs	r0, #0
 800e7d2:	f7f1 fd91 	bl	80002f8 <__aeabi_dsub>
 800e7d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e7da:	f7f2 f9b7 	bl	8000b4c <__aeabi_dcmplt>
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	f040 8095 	bne.w	800e90e <_dtoa_r+0x6be>
 800e7e4:	42a6      	cmp	r6, r4
 800e7e6:	f43f af50 	beq.w	800e68a <_dtoa_r+0x43a>
 800e7ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e7ee:	4b0a      	ldr	r3, [pc, #40]	@ (800e818 <_dtoa_r+0x5c8>)
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	f7f1 ff39 	bl	8000668 <__aeabi_dmul>
 800e7f6:	4b08      	ldr	r3, [pc, #32]	@ (800e818 <_dtoa_r+0x5c8>)
 800e7f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e802:	f7f1 ff31 	bl	8000668 <__aeabi_dmul>
 800e806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e80a:	e7c4      	b.n	800e796 <_dtoa_r+0x546>
 800e80c:	08011520 	.word	0x08011520
 800e810:	080114f8 	.word	0x080114f8
 800e814:	3ff00000 	.word	0x3ff00000
 800e818:	40240000 	.word	0x40240000
 800e81c:	401c0000 	.word	0x401c0000
 800e820:	40140000 	.word	0x40140000
 800e824:	3fe00000 	.word	0x3fe00000
 800e828:	4631      	mov	r1, r6
 800e82a:	4628      	mov	r0, r5
 800e82c:	f7f1 ff1c 	bl	8000668 <__aeabi_dmul>
 800e830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e834:	9415      	str	r4, [sp, #84]	@ 0x54
 800e836:	4656      	mov	r6, sl
 800e838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e83c:	f7f2 f9c4 	bl	8000bc8 <__aeabi_d2iz>
 800e840:	4605      	mov	r5, r0
 800e842:	f7f1 fea7 	bl	8000594 <__aeabi_i2d>
 800e846:	4602      	mov	r2, r0
 800e848:	460b      	mov	r3, r1
 800e84a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e84e:	f7f1 fd53 	bl	80002f8 <__aeabi_dsub>
 800e852:	3530      	adds	r5, #48	@ 0x30
 800e854:	f806 5b01 	strb.w	r5, [r6], #1
 800e858:	4602      	mov	r2, r0
 800e85a:	460b      	mov	r3, r1
 800e85c:	42a6      	cmp	r6, r4
 800e85e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e862:	f04f 0200 	mov.w	r2, #0
 800e866:	d124      	bne.n	800e8b2 <_dtoa_r+0x662>
 800e868:	4bac      	ldr	r3, [pc, #688]	@ (800eb1c <_dtoa_r+0x8cc>)
 800e86a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e86e:	f7f1 fd45 	bl	80002fc <__adddf3>
 800e872:	4602      	mov	r2, r0
 800e874:	460b      	mov	r3, r1
 800e876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e87a:	f7f2 f985 	bl	8000b88 <__aeabi_dcmpgt>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d145      	bne.n	800e90e <_dtoa_r+0x6be>
 800e882:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e886:	49a5      	ldr	r1, [pc, #660]	@ (800eb1c <_dtoa_r+0x8cc>)
 800e888:	2000      	movs	r0, #0
 800e88a:	f7f1 fd35 	bl	80002f8 <__aeabi_dsub>
 800e88e:	4602      	mov	r2, r0
 800e890:	460b      	mov	r3, r1
 800e892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e896:	f7f2 f959 	bl	8000b4c <__aeabi_dcmplt>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	f43f aef5 	beq.w	800e68a <_dtoa_r+0x43a>
 800e8a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e8a2:	1e73      	subs	r3, r6, #1
 800e8a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e8a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e8aa:	2b30      	cmp	r3, #48	@ 0x30
 800e8ac:	d0f8      	beq.n	800e8a0 <_dtoa_r+0x650>
 800e8ae:	9f04      	ldr	r7, [sp, #16]
 800e8b0:	e73e      	b.n	800e730 <_dtoa_r+0x4e0>
 800e8b2:	4b9b      	ldr	r3, [pc, #620]	@ (800eb20 <_dtoa_r+0x8d0>)
 800e8b4:	f7f1 fed8 	bl	8000668 <__aeabi_dmul>
 800e8b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8bc:	e7bc      	b.n	800e838 <_dtoa_r+0x5e8>
 800e8be:	d10c      	bne.n	800e8da <_dtoa_r+0x68a>
 800e8c0:	4b98      	ldr	r3, [pc, #608]	@ (800eb24 <_dtoa_r+0x8d4>)
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8c8:	f7f1 fece 	bl	8000668 <__aeabi_dmul>
 800e8cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8d0:	f7f2 f950 	bl	8000b74 <__aeabi_dcmpge>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	f000 8157 	beq.w	800eb88 <_dtoa_r+0x938>
 800e8da:	2400      	movs	r4, #0
 800e8dc:	4625      	mov	r5, r4
 800e8de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8e0:	43db      	mvns	r3, r3
 800e8e2:	9304      	str	r3, [sp, #16]
 800e8e4:	4656      	mov	r6, sl
 800e8e6:	2700      	movs	r7, #0
 800e8e8:	4621      	mov	r1, r4
 800e8ea:	4658      	mov	r0, fp
 800e8ec:	f000 fbb4 	bl	800f058 <_Bfree>
 800e8f0:	2d00      	cmp	r5, #0
 800e8f2:	d0dc      	beq.n	800e8ae <_dtoa_r+0x65e>
 800e8f4:	b12f      	cbz	r7, 800e902 <_dtoa_r+0x6b2>
 800e8f6:	42af      	cmp	r7, r5
 800e8f8:	d003      	beq.n	800e902 <_dtoa_r+0x6b2>
 800e8fa:	4639      	mov	r1, r7
 800e8fc:	4658      	mov	r0, fp
 800e8fe:	f000 fbab 	bl	800f058 <_Bfree>
 800e902:	4629      	mov	r1, r5
 800e904:	4658      	mov	r0, fp
 800e906:	f000 fba7 	bl	800f058 <_Bfree>
 800e90a:	e7d0      	b.n	800e8ae <_dtoa_r+0x65e>
 800e90c:	9704      	str	r7, [sp, #16]
 800e90e:	4633      	mov	r3, r6
 800e910:	461e      	mov	r6, r3
 800e912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e916:	2a39      	cmp	r2, #57	@ 0x39
 800e918:	d107      	bne.n	800e92a <_dtoa_r+0x6da>
 800e91a:	459a      	cmp	sl, r3
 800e91c:	d1f8      	bne.n	800e910 <_dtoa_r+0x6c0>
 800e91e:	9a04      	ldr	r2, [sp, #16]
 800e920:	3201      	adds	r2, #1
 800e922:	9204      	str	r2, [sp, #16]
 800e924:	2230      	movs	r2, #48	@ 0x30
 800e926:	f88a 2000 	strb.w	r2, [sl]
 800e92a:	781a      	ldrb	r2, [r3, #0]
 800e92c:	3201      	adds	r2, #1
 800e92e:	701a      	strb	r2, [r3, #0]
 800e930:	e7bd      	b.n	800e8ae <_dtoa_r+0x65e>
 800e932:	4b7b      	ldr	r3, [pc, #492]	@ (800eb20 <_dtoa_r+0x8d0>)
 800e934:	2200      	movs	r2, #0
 800e936:	f7f1 fe97 	bl	8000668 <__aeabi_dmul>
 800e93a:	2200      	movs	r2, #0
 800e93c:	2300      	movs	r3, #0
 800e93e:	4604      	mov	r4, r0
 800e940:	460d      	mov	r5, r1
 800e942:	f7f2 f8f9 	bl	8000b38 <__aeabi_dcmpeq>
 800e946:	2800      	cmp	r0, #0
 800e948:	f43f aebb 	beq.w	800e6c2 <_dtoa_r+0x472>
 800e94c:	e6f0      	b.n	800e730 <_dtoa_r+0x4e0>
 800e94e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e950:	2a00      	cmp	r2, #0
 800e952:	f000 80db 	beq.w	800eb0c <_dtoa_r+0x8bc>
 800e956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e958:	2a01      	cmp	r2, #1
 800e95a:	f300 80bf 	bgt.w	800eadc <_dtoa_r+0x88c>
 800e95e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e960:	2a00      	cmp	r2, #0
 800e962:	f000 80b7 	beq.w	800ead4 <_dtoa_r+0x884>
 800e966:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e96a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e96c:	4646      	mov	r6, r8
 800e96e:	9a08      	ldr	r2, [sp, #32]
 800e970:	2101      	movs	r1, #1
 800e972:	441a      	add	r2, r3
 800e974:	4658      	mov	r0, fp
 800e976:	4498      	add	r8, r3
 800e978:	9208      	str	r2, [sp, #32]
 800e97a:	f000 fc21 	bl	800f1c0 <__i2b>
 800e97e:	4605      	mov	r5, r0
 800e980:	b15e      	cbz	r6, 800e99a <_dtoa_r+0x74a>
 800e982:	9b08      	ldr	r3, [sp, #32]
 800e984:	2b00      	cmp	r3, #0
 800e986:	dd08      	ble.n	800e99a <_dtoa_r+0x74a>
 800e988:	42b3      	cmp	r3, r6
 800e98a:	9a08      	ldr	r2, [sp, #32]
 800e98c:	bfa8      	it	ge
 800e98e:	4633      	movge	r3, r6
 800e990:	eba8 0803 	sub.w	r8, r8, r3
 800e994:	1af6      	subs	r6, r6, r3
 800e996:	1ad3      	subs	r3, r2, r3
 800e998:	9308      	str	r3, [sp, #32]
 800e99a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e99c:	b1f3      	cbz	r3, 800e9dc <_dtoa_r+0x78c>
 800e99e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f000 80b7 	beq.w	800eb14 <_dtoa_r+0x8c4>
 800e9a6:	b18c      	cbz	r4, 800e9cc <_dtoa_r+0x77c>
 800e9a8:	4629      	mov	r1, r5
 800e9aa:	4622      	mov	r2, r4
 800e9ac:	4658      	mov	r0, fp
 800e9ae:	f000 fcc7 	bl	800f340 <__pow5mult>
 800e9b2:	464a      	mov	r2, r9
 800e9b4:	4601      	mov	r1, r0
 800e9b6:	4605      	mov	r5, r0
 800e9b8:	4658      	mov	r0, fp
 800e9ba:	f000 fc17 	bl	800f1ec <__multiply>
 800e9be:	4649      	mov	r1, r9
 800e9c0:	9004      	str	r0, [sp, #16]
 800e9c2:	4658      	mov	r0, fp
 800e9c4:	f000 fb48 	bl	800f058 <_Bfree>
 800e9c8:	9b04      	ldr	r3, [sp, #16]
 800e9ca:	4699      	mov	r9, r3
 800e9cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9ce:	1b1a      	subs	r2, r3, r4
 800e9d0:	d004      	beq.n	800e9dc <_dtoa_r+0x78c>
 800e9d2:	4649      	mov	r1, r9
 800e9d4:	4658      	mov	r0, fp
 800e9d6:	f000 fcb3 	bl	800f340 <__pow5mult>
 800e9da:	4681      	mov	r9, r0
 800e9dc:	2101      	movs	r1, #1
 800e9de:	4658      	mov	r0, fp
 800e9e0:	f000 fbee 	bl	800f1c0 <__i2b>
 800e9e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f000 81cf 	beq.w	800ed8c <_dtoa_r+0xb3c>
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	4601      	mov	r1, r0
 800e9f2:	4658      	mov	r0, fp
 800e9f4:	f000 fca4 	bl	800f340 <__pow5mult>
 800e9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	4604      	mov	r4, r0
 800e9fe:	f300 8095 	bgt.w	800eb2c <_dtoa_r+0x8dc>
 800ea02:	9b02      	ldr	r3, [sp, #8]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	f040 8087 	bne.w	800eb18 <_dtoa_r+0x8c8>
 800ea0a:	9b03      	ldr	r3, [sp, #12]
 800ea0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f040 8089 	bne.w	800eb28 <_dtoa_r+0x8d8>
 800ea16:	9b03      	ldr	r3, [sp, #12]
 800ea18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea1c:	0d1b      	lsrs	r3, r3, #20
 800ea1e:	051b      	lsls	r3, r3, #20
 800ea20:	b12b      	cbz	r3, 800ea2e <_dtoa_r+0x7de>
 800ea22:	9b08      	ldr	r3, [sp, #32]
 800ea24:	3301      	adds	r3, #1
 800ea26:	9308      	str	r3, [sp, #32]
 800ea28:	f108 0801 	add.w	r8, r8, #1
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	f000 81b0 	beq.w	800ed98 <_dtoa_r+0xb48>
 800ea38:	6923      	ldr	r3, [r4, #16]
 800ea3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ea3e:	6918      	ldr	r0, [r3, #16]
 800ea40:	f000 fb72 	bl	800f128 <__hi0bits>
 800ea44:	f1c0 0020 	rsb	r0, r0, #32
 800ea48:	9b08      	ldr	r3, [sp, #32]
 800ea4a:	4418      	add	r0, r3
 800ea4c:	f010 001f 	ands.w	r0, r0, #31
 800ea50:	d077      	beq.n	800eb42 <_dtoa_r+0x8f2>
 800ea52:	f1c0 0320 	rsb	r3, r0, #32
 800ea56:	2b04      	cmp	r3, #4
 800ea58:	dd6b      	ble.n	800eb32 <_dtoa_r+0x8e2>
 800ea5a:	9b08      	ldr	r3, [sp, #32]
 800ea5c:	f1c0 001c 	rsb	r0, r0, #28
 800ea60:	4403      	add	r3, r0
 800ea62:	4480      	add	r8, r0
 800ea64:	4406      	add	r6, r0
 800ea66:	9308      	str	r3, [sp, #32]
 800ea68:	f1b8 0f00 	cmp.w	r8, #0
 800ea6c:	dd05      	ble.n	800ea7a <_dtoa_r+0x82a>
 800ea6e:	4649      	mov	r1, r9
 800ea70:	4642      	mov	r2, r8
 800ea72:	4658      	mov	r0, fp
 800ea74:	f000 fcbe 	bl	800f3f4 <__lshift>
 800ea78:	4681      	mov	r9, r0
 800ea7a:	9b08      	ldr	r3, [sp, #32]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	dd05      	ble.n	800ea8c <_dtoa_r+0x83c>
 800ea80:	4621      	mov	r1, r4
 800ea82:	461a      	mov	r2, r3
 800ea84:	4658      	mov	r0, fp
 800ea86:	f000 fcb5 	bl	800f3f4 <__lshift>
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d059      	beq.n	800eb46 <_dtoa_r+0x8f6>
 800ea92:	4621      	mov	r1, r4
 800ea94:	4648      	mov	r0, r9
 800ea96:	f000 fd19 	bl	800f4cc <__mcmp>
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	da53      	bge.n	800eb46 <_dtoa_r+0x8f6>
 800ea9e:	1e7b      	subs	r3, r7, #1
 800eaa0:	9304      	str	r3, [sp, #16]
 800eaa2:	4649      	mov	r1, r9
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	220a      	movs	r2, #10
 800eaa8:	4658      	mov	r0, fp
 800eaaa:	f000 faf7 	bl	800f09c <__multadd>
 800eaae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eab0:	4681      	mov	r9, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f000 8172 	beq.w	800ed9c <_dtoa_r+0xb4c>
 800eab8:	2300      	movs	r3, #0
 800eaba:	4629      	mov	r1, r5
 800eabc:	220a      	movs	r2, #10
 800eabe:	4658      	mov	r0, fp
 800eac0:	f000 faec 	bl	800f09c <__multadd>
 800eac4:	9b00      	ldr	r3, [sp, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	4605      	mov	r5, r0
 800eaca:	dc67      	bgt.n	800eb9c <_dtoa_r+0x94c>
 800eacc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eace:	2b02      	cmp	r3, #2
 800ead0:	dc41      	bgt.n	800eb56 <_dtoa_r+0x906>
 800ead2:	e063      	b.n	800eb9c <_dtoa_r+0x94c>
 800ead4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ead6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800eada:	e746      	b.n	800e96a <_dtoa_r+0x71a>
 800eadc:	9b07      	ldr	r3, [sp, #28]
 800eade:	1e5c      	subs	r4, r3, #1
 800eae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eae2:	42a3      	cmp	r3, r4
 800eae4:	bfbf      	itttt	lt
 800eae6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800eae8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800eaea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800eaec:	1ae3      	sublt	r3, r4, r3
 800eaee:	bfb4      	ite	lt
 800eaf0:	18d2      	addlt	r2, r2, r3
 800eaf2:	1b1c      	subge	r4, r3, r4
 800eaf4:	9b07      	ldr	r3, [sp, #28]
 800eaf6:	bfbc      	itt	lt
 800eaf8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800eafa:	2400      	movlt	r4, #0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	bfb5      	itete	lt
 800eb00:	eba8 0603 	sublt.w	r6, r8, r3
 800eb04:	9b07      	ldrge	r3, [sp, #28]
 800eb06:	2300      	movlt	r3, #0
 800eb08:	4646      	movge	r6, r8
 800eb0a:	e730      	b.n	800e96e <_dtoa_r+0x71e>
 800eb0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eb0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800eb10:	4646      	mov	r6, r8
 800eb12:	e735      	b.n	800e980 <_dtoa_r+0x730>
 800eb14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb16:	e75c      	b.n	800e9d2 <_dtoa_r+0x782>
 800eb18:	2300      	movs	r3, #0
 800eb1a:	e788      	b.n	800ea2e <_dtoa_r+0x7de>
 800eb1c:	3fe00000 	.word	0x3fe00000
 800eb20:	40240000 	.word	0x40240000
 800eb24:	40140000 	.word	0x40140000
 800eb28:	9b02      	ldr	r3, [sp, #8]
 800eb2a:	e780      	b.n	800ea2e <_dtoa_r+0x7de>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb30:	e782      	b.n	800ea38 <_dtoa_r+0x7e8>
 800eb32:	d099      	beq.n	800ea68 <_dtoa_r+0x818>
 800eb34:	9a08      	ldr	r2, [sp, #32]
 800eb36:	331c      	adds	r3, #28
 800eb38:	441a      	add	r2, r3
 800eb3a:	4498      	add	r8, r3
 800eb3c:	441e      	add	r6, r3
 800eb3e:	9208      	str	r2, [sp, #32]
 800eb40:	e792      	b.n	800ea68 <_dtoa_r+0x818>
 800eb42:	4603      	mov	r3, r0
 800eb44:	e7f6      	b.n	800eb34 <_dtoa_r+0x8e4>
 800eb46:	9b07      	ldr	r3, [sp, #28]
 800eb48:	9704      	str	r7, [sp, #16]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	dc20      	bgt.n	800eb90 <_dtoa_r+0x940>
 800eb4e:	9300      	str	r3, [sp, #0]
 800eb50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb52:	2b02      	cmp	r3, #2
 800eb54:	dd1e      	ble.n	800eb94 <_dtoa_r+0x944>
 800eb56:	9b00      	ldr	r3, [sp, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	f47f aec0 	bne.w	800e8de <_dtoa_r+0x68e>
 800eb5e:	4621      	mov	r1, r4
 800eb60:	2205      	movs	r2, #5
 800eb62:	4658      	mov	r0, fp
 800eb64:	f000 fa9a 	bl	800f09c <__multadd>
 800eb68:	4601      	mov	r1, r0
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	4648      	mov	r0, r9
 800eb6e:	f000 fcad 	bl	800f4cc <__mcmp>
 800eb72:	2800      	cmp	r0, #0
 800eb74:	f77f aeb3 	ble.w	800e8de <_dtoa_r+0x68e>
 800eb78:	4656      	mov	r6, sl
 800eb7a:	2331      	movs	r3, #49	@ 0x31
 800eb7c:	f806 3b01 	strb.w	r3, [r6], #1
 800eb80:	9b04      	ldr	r3, [sp, #16]
 800eb82:	3301      	adds	r3, #1
 800eb84:	9304      	str	r3, [sp, #16]
 800eb86:	e6ae      	b.n	800e8e6 <_dtoa_r+0x696>
 800eb88:	9c07      	ldr	r4, [sp, #28]
 800eb8a:	9704      	str	r7, [sp, #16]
 800eb8c:	4625      	mov	r5, r4
 800eb8e:	e7f3      	b.n	800eb78 <_dtoa_r+0x928>
 800eb90:	9b07      	ldr	r3, [sp, #28]
 800eb92:	9300      	str	r3, [sp, #0]
 800eb94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	f000 8104 	beq.w	800eda4 <_dtoa_r+0xb54>
 800eb9c:	2e00      	cmp	r6, #0
 800eb9e:	dd05      	ble.n	800ebac <_dtoa_r+0x95c>
 800eba0:	4629      	mov	r1, r5
 800eba2:	4632      	mov	r2, r6
 800eba4:	4658      	mov	r0, fp
 800eba6:	f000 fc25 	bl	800f3f4 <__lshift>
 800ebaa:	4605      	mov	r5, r0
 800ebac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d05a      	beq.n	800ec68 <_dtoa_r+0xa18>
 800ebb2:	6869      	ldr	r1, [r5, #4]
 800ebb4:	4658      	mov	r0, fp
 800ebb6:	f000 fa0f 	bl	800efd8 <_Balloc>
 800ebba:	4606      	mov	r6, r0
 800ebbc:	b928      	cbnz	r0, 800ebca <_dtoa_r+0x97a>
 800ebbe:	4b84      	ldr	r3, [pc, #528]	@ (800edd0 <_dtoa_r+0xb80>)
 800ebc0:	4602      	mov	r2, r0
 800ebc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ebc6:	f7ff bb5a 	b.w	800e27e <_dtoa_r+0x2e>
 800ebca:	692a      	ldr	r2, [r5, #16]
 800ebcc:	3202      	adds	r2, #2
 800ebce:	0092      	lsls	r2, r2, #2
 800ebd0:	f105 010c 	add.w	r1, r5, #12
 800ebd4:	300c      	adds	r0, #12
 800ebd6:	f7ff faa4 	bl	800e122 <memcpy>
 800ebda:	2201      	movs	r2, #1
 800ebdc:	4631      	mov	r1, r6
 800ebde:	4658      	mov	r0, fp
 800ebe0:	f000 fc08 	bl	800f3f4 <__lshift>
 800ebe4:	f10a 0301 	add.w	r3, sl, #1
 800ebe8:	9307      	str	r3, [sp, #28]
 800ebea:	9b00      	ldr	r3, [sp, #0]
 800ebec:	4453      	add	r3, sl
 800ebee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebf0:	9b02      	ldr	r3, [sp, #8]
 800ebf2:	f003 0301 	and.w	r3, r3, #1
 800ebf6:	462f      	mov	r7, r5
 800ebf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebfa:	4605      	mov	r5, r0
 800ebfc:	9b07      	ldr	r3, [sp, #28]
 800ebfe:	4621      	mov	r1, r4
 800ec00:	3b01      	subs	r3, #1
 800ec02:	4648      	mov	r0, r9
 800ec04:	9300      	str	r3, [sp, #0]
 800ec06:	f7ff fa9a 	bl	800e13e <quorem>
 800ec0a:	4639      	mov	r1, r7
 800ec0c:	9002      	str	r0, [sp, #8]
 800ec0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ec12:	4648      	mov	r0, r9
 800ec14:	f000 fc5a 	bl	800f4cc <__mcmp>
 800ec18:	462a      	mov	r2, r5
 800ec1a:	9008      	str	r0, [sp, #32]
 800ec1c:	4621      	mov	r1, r4
 800ec1e:	4658      	mov	r0, fp
 800ec20:	f000 fc70 	bl	800f504 <__mdiff>
 800ec24:	68c2      	ldr	r2, [r0, #12]
 800ec26:	4606      	mov	r6, r0
 800ec28:	bb02      	cbnz	r2, 800ec6c <_dtoa_r+0xa1c>
 800ec2a:	4601      	mov	r1, r0
 800ec2c:	4648      	mov	r0, r9
 800ec2e:	f000 fc4d 	bl	800f4cc <__mcmp>
 800ec32:	4602      	mov	r2, r0
 800ec34:	4631      	mov	r1, r6
 800ec36:	4658      	mov	r0, fp
 800ec38:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec3a:	f000 fa0d 	bl	800f058 <_Bfree>
 800ec3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec42:	9e07      	ldr	r6, [sp, #28]
 800ec44:	ea43 0102 	orr.w	r1, r3, r2
 800ec48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec4a:	4319      	orrs	r1, r3
 800ec4c:	d110      	bne.n	800ec70 <_dtoa_r+0xa20>
 800ec4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec52:	d029      	beq.n	800eca8 <_dtoa_r+0xa58>
 800ec54:	9b08      	ldr	r3, [sp, #32]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	dd02      	ble.n	800ec60 <_dtoa_r+0xa10>
 800ec5a:	9b02      	ldr	r3, [sp, #8]
 800ec5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ec60:	9b00      	ldr	r3, [sp, #0]
 800ec62:	f883 8000 	strb.w	r8, [r3]
 800ec66:	e63f      	b.n	800e8e8 <_dtoa_r+0x698>
 800ec68:	4628      	mov	r0, r5
 800ec6a:	e7bb      	b.n	800ebe4 <_dtoa_r+0x994>
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	e7e1      	b.n	800ec34 <_dtoa_r+0x9e4>
 800ec70:	9b08      	ldr	r3, [sp, #32]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	db04      	blt.n	800ec80 <_dtoa_r+0xa30>
 800ec76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ec78:	430b      	orrs	r3, r1
 800ec7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec7c:	430b      	orrs	r3, r1
 800ec7e:	d120      	bne.n	800ecc2 <_dtoa_r+0xa72>
 800ec80:	2a00      	cmp	r2, #0
 800ec82:	dded      	ble.n	800ec60 <_dtoa_r+0xa10>
 800ec84:	4649      	mov	r1, r9
 800ec86:	2201      	movs	r2, #1
 800ec88:	4658      	mov	r0, fp
 800ec8a:	f000 fbb3 	bl	800f3f4 <__lshift>
 800ec8e:	4621      	mov	r1, r4
 800ec90:	4681      	mov	r9, r0
 800ec92:	f000 fc1b 	bl	800f4cc <__mcmp>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	dc03      	bgt.n	800eca2 <_dtoa_r+0xa52>
 800ec9a:	d1e1      	bne.n	800ec60 <_dtoa_r+0xa10>
 800ec9c:	f018 0f01 	tst.w	r8, #1
 800eca0:	d0de      	beq.n	800ec60 <_dtoa_r+0xa10>
 800eca2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eca6:	d1d8      	bne.n	800ec5a <_dtoa_r+0xa0a>
 800eca8:	9a00      	ldr	r2, [sp, #0]
 800ecaa:	2339      	movs	r3, #57	@ 0x39
 800ecac:	7013      	strb	r3, [r2, #0]
 800ecae:	4633      	mov	r3, r6
 800ecb0:	461e      	mov	r6, r3
 800ecb2:	3b01      	subs	r3, #1
 800ecb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ecb8:	2a39      	cmp	r2, #57	@ 0x39
 800ecba:	d052      	beq.n	800ed62 <_dtoa_r+0xb12>
 800ecbc:	3201      	adds	r2, #1
 800ecbe:	701a      	strb	r2, [r3, #0]
 800ecc0:	e612      	b.n	800e8e8 <_dtoa_r+0x698>
 800ecc2:	2a00      	cmp	r2, #0
 800ecc4:	dd07      	ble.n	800ecd6 <_dtoa_r+0xa86>
 800ecc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ecca:	d0ed      	beq.n	800eca8 <_dtoa_r+0xa58>
 800eccc:	9a00      	ldr	r2, [sp, #0]
 800ecce:	f108 0301 	add.w	r3, r8, #1
 800ecd2:	7013      	strb	r3, [r2, #0]
 800ecd4:	e608      	b.n	800e8e8 <_dtoa_r+0x698>
 800ecd6:	9b07      	ldr	r3, [sp, #28]
 800ecd8:	9a07      	ldr	r2, [sp, #28]
 800ecda:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ecde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d028      	beq.n	800ed36 <_dtoa_r+0xae6>
 800ece4:	4649      	mov	r1, r9
 800ece6:	2300      	movs	r3, #0
 800ece8:	220a      	movs	r2, #10
 800ecea:	4658      	mov	r0, fp
 800ecec:	f000 f9d6 	bl	800f09c <__multadd>
 800ecf0:	42af      	cmp	r7, r5
 800ecf2:	4681      	mov	r9, r0
 800ecf4:	f04f 0300 	mov.w	r3, #0
 800ecf8:	f04f 020a 	mov.w	r2, #10
 800ecfc:	4639      	mov	r1, r7
 800ecfe:	4658      	mov	r0, fp
 800ed00:	d107      	bne.n	800ed12 <_dtoa_r+0xac2>
 800ed02:	f000 f9cb 	bl	800f09c <__multadd>
 800ed06:	4607      	mov	r7, r0
 800ed08:	4605      	mov	r5, r0
 800ed0a:	9b07      	ldr	r3, [sp, #28]
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	9307      	str	r3, [sp, #28]
 800ed10:	e774      	b.n	800ebfc <_dtoa_r+0x9ac>
 800ed12:	f000 f9c3 	bl	800f09c <__multadd>
 800ed16:	4629      	mov	r1, r5
 800ed18:	4607      	mov	r7, r0
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	220a      	movs	r2, #10
 800ed1e:	4658      	mov	r0, fp
 800ed20:	f000 f9bc 	bl	800f09c <__multadd>
 800ed24:	4605      	mov	r5, r0
 800ed26:	e7f0      	b.n	800ed0a <_dtoa_r+0xaba>
 800ed28:	9b00      	ldr	r3, [sp, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	bfcc      	ite	gt
 800ed2e:	461e      	movgt	r6, r3
 800ed30:	2601      	movle	r6, #1
 800ed32:	4456      	add	r6, sl
 800ed34:	2700      	movs	r7, #0
 800ed36:	4649      	mov	r1, r9
 800ed38:	2201      	movs	r2, #1
 800ed3a:	4658      	mov	r0, fp
 800ed3c:	f000 fb5a 	bl	800f3f4 <__lshift>
 800ed40:	4621      	mov	r1, r4
 800ed42:	4681      	mov	r9, r0
 800ed44:	f000 fbc2 	bl	800f4cc <__mcmp>
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	dcb0      	bgt.n	800ecae <_dtoa_r+0xa5e>
 800ed4c:	d102      	bne.n	800ed54 <_dtoa_r+0xb04>
 800ed4e:	f018 0f01 	tst.w	r8, #1
 800ed52:	d1ac      	bne.n	800ecae <_dtoa_r+0xa5e>
 800ed54:	4633      	mov	r3, r6
 800ed56:	461e      	mov	r6, r3
 800ed58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed5c:	2a30      	cmp	r2, #48	@ 0x30
 800ed5e:	d0fa      	beq.n	800ed56 <_dtoa_r+0xb06>
 800ed60:	e5c2      	b.n	800e8e8 <_dtoa_r+0x698>
 800ed62:	459a      	cmp	sl, r3
 800ed64:	d1a4      	bne.n	800ecb0 <_dtoa_r+0xa60>
 800ed66:	9b04      	ldr	r3, [sp, #16]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	9304      	str	r3, [sp, #16]
 800ed6c:	2331      	movs	r3, #49	@ 0x31
 800ed6e:	f88a 3000 	strb.w	r3, [sl]
 800ed72:	e5b9      	b.n	800e8e8 <_dtoa_r+0x698>
 800ed74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ed76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800edd4 <_dtoa_r+0xb84>
 800ed7a:	b11b      	cbz	r3, 800ed84 <_dtoa_r+0xb34>
 800ed7c:	f10a 0308 	add.w	r3, sl, #8
 800ed80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ed82:	6013      	str	r3, [r2, #0]
 800ed84:	4650      	mov	r0, sl
 800ed86:	b019      	add	sp, #100	@ 0x64
 800ed88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	f77f ae37 	ble.w	800ea02 <_dtoa_r+0x7b2>
 800ed94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed98:	2001      	movs	r0, #1
 800ed9a:	e655      	b.n	800ea48 <_dtoa_r+0x7f8>
 800ed9c:	9b00      	ldr	r3, [sp, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	f77f aed6 	ble.w	800eb50 <_dtoa_r+0x900>
 800eda4:	4656      	mov	r6, sl
 800eda6:	4621      	mov	r1, r4
 800eda8:	4648      	mov	r0, r9
 800edaa:	f7ff f9c8 	bl	800e13e <quorem>
 800edae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800edb2:	f806 8b01 	strb.w	r8, [r6], #1
 800edb6:	9b00      	ldr	r3, [sp, #0]
 800edb8:	eba6 020a 	sub.w	r2, r6, sl
 800edbc:	4293      	cmp	r3, r2
 800edbe:	ddb3      	ble.n	800ed28 <_dtoa_r+0xad8>
 800edc0:	4649      	mov	r1, r9
 800edc2:	2300      	movs	r3, #0
 800edc4:	220a      	movs	r2, #10
 800edc6:	4658      	mov	r0, fp
 800edc8:	f000 f968 	bl	800f09c <__multadd>
 800edcc:	4681      	mov	r9, r0
 800edce:	e7ea      	b.n	800eda6 <_dtoa_r+0xb56>
 800edd0:	08011480 	.word	0x08011480
 800edd4:	08011404 	.word	0x08011404

0800edd8 <_free_r>:
 800edd8:	b538      	push	{r3, r4, r5, lr}
 800edda:	4605      	mov	r5, r0
 800eddc:	2900      	cmp	r1, #0
 800edde:	d041      	beq.n	800ee64 <_free_r+0x8c>
 800ede0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ede4:	1f0c      	subs	r4, r1, #4
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	bfb8      	it	lt
 800edea:	18e4      	addlt	r4, r4, r3
 800edec:	f000 f8e8 	bl	800efc0 <__malloc_lock>
 800edf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ee68 <_free_r+0x90>)
 800edf2:	6813      	ldr	r3, [r2, #0]
 800edf4:	b933      	cbnz	r3, 800ee04 <_free_r+0x2c>
 800edf6:	6063      	str	r3, [r4, #4]
 800edf8:	6014      	str	r4, [r2, #0]
 800edfa:	4628      	mov	r0, r5
 800edfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee00:	f000 b8e4 	b.w	800efcc <__malloc_unlock>
 800ee04:	42a3      	cmp	r3, r4
 800ee06:	d908      	bls.n	800ee1a <_free_r+0x42>
 800ee08:	6820      	ldr	r0, [r4, #0]
 800ee0a:	1821      	adds	r1, r4, r0
 800ee0c:	428b      	cmp	r3, r1
 800ee0e:	bf01      	itttt	eq
 800ee10:	6819      	ldreq	r1, [r3, #0]
 800ee12:	685b      	ldreq	r3, [r3, #4]
 800ee14:	1809      	addeq	r1, r1, r0
 800ee16:	6021      	streq	r1, [r4, #0]
 800ee18:	e7ed      	b.n	800edf6 <_free_r+0x1e>
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	b10b      	cbz	r3, 800ee24 <_free_r+0x4c>
 800ee20:	42a3      	cmp	r3, r4
 800ee22:	d9fa      	bls.n	800ee1a <_free_r+0x42>
 800ee24:	6811      	ldr	r1, [r2, #0]
 800ee26:	1850      	adds	r0, r2, r1
 800ee28:	42a0      	cmp	r0, r4
 800ee2a:	d10b      	bne.n	800ee44 <_free_r+0x6c>
 800ee2c:	6820      	ldr	r0, [r4, #0]
 800ee2e:	4401      	add	r1, r0
 800ee30:	1850      	adds	r0, r2, r1
 800ee32:	4283      	cmp	r3, r0
 800ee34:	6011      	str	r1, [r2, #0]
 800ee36:	d1e0      	bne.n	800edfa <_free_r+0x22>
 800ee38:	6818      	ldr	r0, [r3, #0]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	6053      	str	r3, [r2, #4]
 800ee3e:	4408      	add	r0, r1
 800ee40:	6010      	str	r0, [r2, #0]
 800ee42:	e7da      	b.n	800edfa <_free_r+0x22>
 800ee44:	d902      	bls.n	800ee4c <_free_r+0x74>
 800ee46:	230c      	movs	r3, #12
 800ee48:	602b      	str	r3, [r5, #0]
 800ee4a:	e7d6      	b.n	800edfa <_free_r+0x22>
 800ee4c:	6820      	ldr	r0, [r4, #0]
 800ee4e:	1821      	adds	r1, r4, r0
 800ee50:	428b      	cmp	r3, r1
 800ee52:	bf04      	itt	eq
 800ee54:	6819      	ldreq	r1, [r3, #0]
 800ee56:	685b      	ldreq	r3, [r3, #4]
 800ee58:	6063      	str	r3, [r4, #4]
 800ee5a:	bf04      	itt	eq
 800ee5c:	1809      	addeq	r1, r1, r0
 800ee5e:	6021      	streq	r1, [r4, #0]
 800ee60:	6054      	str	r4, [r2, #4]
 800ee62:	e7ca      	b.n	800edfa <_free_r+0x22>
 800ee64:	bd38      	pop	{r3, r4, r5, pc}
 800ee66:	bf00      	nop
 800ee68:	200079e8 	.word	0x200079e8

0800ee6c <malloc>:
 800ee6c:	4b02      	ldr	r3, [pc, #8]	@ (800ee78 <malloc+0xc>)
 800ee6e:	4601      	mov	r1, r0
 800ee70:	6818      	ldr	r0, [r3, #0]
 800ee72:	f000 b825 	b.w	800eec0 <_malloc_r>
 800ee76:	bf00      	nop
 800ee78:	20000428 	.word	0x20000428

0800ee7c <sbrk_aligned>:
 800ee7c:	b570      	push	{r4, r5, r6, lr}
 800ee7e:	4e0f      	ldr	r6, [pc, #60]	@ (800eebc <sbrk_aligned+0x40>)
 800ee80:	460c      	mov	r4, r1
 800ee82:	6831      	ldr	r1, [r6, #0]
 800ee84:	4605      	mov	r5, r0
 800ee86:	b911      	cbnz	r1, 800ee8e <sbrk_aligned+0x12>
 800ee88:	f000 fe46 	bl	800fb18 <_sbrk_r>
 800ee8c:	6030      	str	r0, [r6, #0]
 800ee8e:	4621      	mov	r1, r4
 800ee90:	4628      	mov	r0, r5
 800ee92:	f000 fe41 	bl	800fb18 <_sbrk_r>
 800ee96:	1c43      	adds	r3, r0, #1
 800ee98:	d103      	bne.n	800eea2 <sbrk_aligned+0x26>
 800ee9a:	f04f 34ff 	mov.w	r4, #4294967295
 800ee9e:	4620      	mov	r0, r4
 800eea0:	bd70      	pop	{r4, r5, r6, pc}
 800eea2:	1cc4      	adds	r4, r0, #3
 800eea4:	f024 0403 	bic.w	r4, r4, #3
 800eea8:	42a0      	cmp	r0, r4
 800eeaa:	d0f8      	beq.n	800ee9e <sbrk_aligned+0x22>
 800eeac:	1a21      	subs	r1, r4, r0
 800eeae:	4628      	mov	r0, r5
 800eeb0:	f000 fe32 	bl	800fb18 <_sbrk_r>
 800eeb4:	3001      	adds	r0, #1
 800eeb6:	d1f2      	bne.n	800ee9e <sbrk_aligned+0x22>
 800eeb8:	e7ef      	b.n	800ee9a <sbrk_aligned+0x1e>
 800eeba:	bf00      	nop
 800eebc:	200079e4 	.word	0x200079e4

0800eec0 <_malloc_r>:
 800eec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eec4:	1ccd      	adds	r5, r1, #3
 800eec6:	f025 0503 	bic.w	r5, r5, #3
 800eeca:	3508      	adds	r5, #8
 800eecc:	2d0c      	cmp	r5, #12
 800eece:	bf38      	it	cc
 800eed0:	250c      	movcc	r5, #12
 800eed2:	2d00      	cmp	r5, #0
 800eed4:	4606      	mov	r6, r0
 800eed6:	db01      	blt.n	800eedc <_malloc_r+0x1c>
 800eed8:	42a9      	cmp	r1, r5
 800eeda:	d904      	bls.n	800eee6 <_malloc_r+0x26>
 800eedc:	230c      	movs	r3, #12
 800eede:	6033      	str	r3, [r6, #0]
 800eee0:	2000      	movs	r0, #0
 800eee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800efbc <_malloc_r+0xfc>
 800eeea:	f000 f869 	bl	800efc0 <__malloc_lock>
 800eeee:	f8d8 3000 	ldr.w	r3, [r8]
 800eef2:	461c      	mov	r4, r3
 800eef4:	bb44      	cbnz	r4, 800ef48 <_malloc_r+0x88>
 800eef6:	4629      	mov	r1, r5
 800eef8:	4630      	mov	r0, r6
 800eefa:	f7ff ffbf 	bl	800ee7c <sbrk_aligned>
 800eefe:	1c43      	adds	r3, r0, #1
 800ef00:	4604      	mov	r4, r0
 800ef02:	d158      	bne.n	800efb6 <_malloc_r+0xf6>
 800ef04:	f8d8 4000 	ldr.w	r4, [r8]
 800ef08:	4627      	mov	r7, r4
 800ef0a:	2f00      	cmp	r7, #0
 800ef0c:	d143      	bne.n	800ef96 <_malloc_r+0xd6>
 800ef0e:	2c00      	cmp	r4, #0
 800ef10:	d04b      	beq.n	800efaa <_malloc_r+0xea>
 800ef12:	6823      	ldr	r3, [r4, #0]
 800ef14:	4639      	mov	r1, r7
 800ef16:	4630      	mov	r0, r6
 800ef18:	eb04 0903 	add.w	r9, r4, r3
 800ef1c:	f000 fdfc 	bl	800fb18 <_sbrk_r>
 800ef20:	4581      	cmp	r9, r0
 800ef22:	d142      	bne.n	800efaa <_malloc_r+0xea>
 800ef24:	6821      	ldr	r1, [r4, #0]
 800ef26:	1a6d      	subs	r5, r5, r1
 800ef28:	4629      	mov	r1, r5
 800ef2a:	4630      	mov	r0, r6
 800ef2c:	f7ff ffa6 	bl	800ee7c <sbrk_aligned>
 800ef30:	3001      	adds	r0, #1
 800ef32:	d03a      	beq.n	800efaa <_malloc_r+0xea>
 800ef34:	6823      	ldr	r3, [r4, #0]
 800ef36:	442b      	add	r3, r5
 800ef38:	6023      	str	r3, [r4, #0]
 800ef3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ef3e:	685a      	ldr	r2, [r3, #4]
 800ef40:	bb62      	cbnz	r2, 800ef9c <_malloc_r+0xdc>
 800ef42:	f8c8 7000 	str.w	r7, [r8]
 800ef46:	e00f      	b.n	800ef68 <_malloc_r+0xa8>
 800ef48:	6822      	ldr	r2, [r4, #0]
 800ef4a:	1b52      	subs	r2, r2, r5
 800ef4c:	d420      	bmi.n	800ef90 <_malloc_r+0xd0>
 800ef4e:	2a0b      	cmp	r2, #11
 800ef50:	d917      	bls.n	800ef82 <_malloc_r+0xc2>
 800ef52:	1961      	adds	r1, r4, r5
 800ef54:	42a3      	cmp	r3, r4
 800ef56:	6025      	str	r5, [r4, #0]
 800ef58:	bf18      	it	ne
 800ef5a:	6059      	strne	r1, [r3, #4]
 800ef5c:	6863      	ldr	r3, [r4, #4]
 800ef5e:	bf08      	it	eq
 800ef60:	f8c8 1000 	streq.w	r1, [r8]
 800ef64:	5162      	str	r2, [r4, r5]
 800ef66:	604b      	str	r3, [r1, #4]
 800ef68:	4630      	mov	r0, r6
 800ef6a:	f000 f82f 	bl	800efcc <__malloc_unlock>
 800ef6e:	f104 000b 	add.w	r0, r4, #11
 800ef72:	1d23      	adds	r3, r4, #4
 800ef74:	f020 0007 	bic.w	r0, r0, #7
 800ef78:	1ac2      	subs	r2, r0, r3
 800ef7a:	bf1c      	itt	ne
 800ef7c:	1a1b      	subne	r3, r3, r0
 800ef7e:	50a3      	strne	r3, [r4, r2]
 800ef80:	e7af      	b.n	800eee2 <_malloc_r+0x22>
 800ef82:	6862      	ldr	r2, [r4, #4]
 800ef84:	42a3      	cmp	r3, r4
 800ef86:	bf0c      	ite	eq
 800ef88:	f8c8 2000 	streq.w	r2, [r8]
 800ef8c:	605a      	strne	r2, [r3, #4]
 800ef8e:	e7eb      	b.n	800ef68 <_malloc_r+0xa8>
 800ef90:	4623      	mov	r3, r4
 800ef92:	6864      	ldr	r4, [r4, #4]
 800ef94:	e7ae      	b.n	800eef4 <_malloc_r+0x34>
 800ef96:	463c      	mov	r4, r7
 800ef98:	687f      	ldr	r7, [r7, #4]
 800ef9a:	e7b6      	b.n	800ef0a <_malloc_r+0x4a>
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	42a3      	cmp	r3, r4
 800efa2:	d1fb      	bne.n	800ef9c <_malloc_r+0xdc>
 800efa4:	2300      	movs	r3, #0
 800efa6:	6053      	str	r3, [r2, #4]
 800efa8:	e7de      	b.n	800ef68 <_malloc_r+0xa8>
 800efaa:	230c      	movs	r3, #12
 800efac:	6033      	str	r3, [r6, #0]
 800efae:	4630      	mov	r0, r6
 800efb0:	f000 f80c 	bl	800efcc <__malloc_unlock>
 800efb4:	e794      	b.n	800eee0 <_malloc_r+0x20>
 800efb6:	6005      	str	r5, [r0, #0]
 800efb8:	e7d6      	b.n	800ef68 <_malloc_r+0xa8>
 800efba:	bf00      	nop
 800efbc:	200079e8 	.word	0x200079e8

0800efc0 <__malloc_lock>:
 800efc0:	4801      	ldr	r0, [pc, #4]	@ (800efc8 <__malloc_lock+0x8>)
 800efc2:	f7ff b8a4 	b.w	800e10e <__retarget_lock_acquire_recursive>
 800efc6:	bf00      	nop
 800efc8:	200079e0 	.word	0x200079e0

0800efcc <__malloc_unlock>:
 800efcc:	4801      	ldr	r0, [pc, #4]	@ (800efd4 <__malloc_unlock+0x8>)
 800efce:	f7ff b89f 	b.w	800e110 <__retarget_lock_release_recursive>
 800efd2:	bf00      	nop
 800efd4:	200079e0 	.word	0x200079e0

0800efd8 <_Balloc>:
 800efd8:	b570      	push	{r4, r5, r6, lr}
 800efda:	69c6      	ldr	r6, [r0, #28]
 800efdc:	4604      	mov	r4, r0
 800efde:	460d      	mov	r5, r1
 800efe0:	b976      	cbnz	r6, 800f000 <_Balloc+0x28>
 800efe2:	2010      	movs	r0, #16
 800efe4:	f7ff ff42 	bl	800ee6c <malloc>
 800efe8:	4602      	mov	r2, r0
 800efea:	61e0      	str	r0, [r4, #28]
 800efec:	b920      	cbnz	r0, 800eff8 <_Balloc+0x20>
 800efee:	4b18      	ldr	r3, [pc, #96]	@ (800f050 <_Balloc+0x78>)
 800eff0:	4818      	ldr	r0, [pc, #96]	@ (800f054 <_Balloc+0x7c>)
 800eff2:	216b      	movs	r1, #107	@ 0x6b
 800eff4:	f000 fda0 	bl	800fb38 <__assert_func>
 800eff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800effc:	6006      	str	r6, [r0, #0]
 800effe:	60c6      	str	r6, [r0, #12]
 800f000:	69e6      	ldr	r6, [r4, #28]
 800f002:	68f3      	ldr	r3, [r6, #12]
 800f004:	b183      	cbz	r3, 800f028 <_Balloc+0x50>
 800f006:	69e3      	ldr	r3, [r4, #28]
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f00e:	b9b8      	cbnz	r0, 800f040 <_Balloc+0x68>
 800f010:	2101      	movs	r1, #1
 800f012:	fa01 f605 	lsl.w	r6, r1, r5
 800f016:	1d72      	adds	r2, r6, #5
 800f018:	0092      	lsls	r2, r2, #2
 800f01a:	4620      	mov	r0, r4
 800f01c:	f000 fdaa 	bl	800fb74 <_calloc_r>
 800f020:	b160      	cbz	r0, 800f03c <_Balloc+0x64>
 800f022:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f026:	e00e      	b.n	800f046 <_Balloc+0x6e>
 800f028:	2221      	movs	r2, #33	@ 0x21
 800f02a:	2104      	movs	r1, #4
 800f02c:	4620      	mov	r0, r4
 800f02e:	f000 fda1 	bl	800fb74 <_calloc_r>
 800f032:	69e3      	ldr	r3, [r4, #28]
 800f034:	60f0      	str	r0, [r6, #12]
 800f036:	68db      	ldr	r3, [r3, #12]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d1e4      	bne.n	800f006 <_Balloc+0x2e>
 800f03c:	2000      	movs	r0, #0
 800f03e:	bd70      	pop	{r4, r5, r6, pc}
 800f040:	6802      	ldr	r2, [r0, #0]
 800f042:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f046:	2300      	movs	r3, #0
 800f048:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f04c:	e7f7      	b.n	800f03e <_Balloc+0x66>
 800f04e:	bf00      	nop
 800f050:	08011411 	.word	0x08011411
 800f054:	08011491 	.word	0x08011491

0800f058 <_Bfree>:
 800f058:	b570      	push	{r4, r5, r6, lr}
 800f05a:	69c6      	ldr	r6, [r0, #28]
 800f05c:	4605      	mov	r5, r0
 800f05e:	460c      	mov	r4, r1
 800f060:	b976      	cbnz	r6, 800f080 <_Bfree+0x28>
 800f062:	2010      	movs	r0, #16
 800f064:	f7ff ff02 	bl	800ee6c <malloc>
 800f068:	4602      	mov	r2, r0
 800f06a:	61e8      	str	r0, [r5, #28]
 800f06c:	b920      	cbnz	r0, 800f078 <_Bfree+0x20>
 800f06e:	4b09      	ldr	r3, [pc, #36]	@ (800f094 <_Bfree+0x3c>)
 800f070:	4809      	ldr	r0, [pc, #36]	@ (800f098 <_Bfree+0x40>)
 800f072:	218f      	movs	r1, #143	@ 0x8f
 800f074:	f000 fd60 	bl	800fb38 <__assert_func>
 800f078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f07c:	6006      	str	r6, [r0, #0]
 800f07e:	60c6      	str	r6, [r0, #12]
 800f080:	b13c      	cbz	r4, 800f092 <_Bfree+0x3a>
 800f082:	69eb      	ldr	r3, [r5, #28]
 800f084:	6862      	ldr	r2, [r4, #4]
 800f086:	68db      	ldr	r3, [r3, #12]
 800f088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f08c:	6021      	str	r1, [r4, #0]
 800f08e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f092:	bd70      	pop	{r4, r5, r6, pc}
 800f094:	08011411 	.word	0x08011411
 800f098:	08011491 	.word	0x08011491

0800f09c <__multadd>:
 800f09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a0:	690d      	ldr	r5, [r1, #16]
 800f0a2:	4607      	mov	r7, r0
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	461e      	mov	r6, r3
 800f0a8:	f101 0c14 	add.w	ip, r1, #20
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	f8dc 3000 	ldr.w	r3, [ip]
 800f0b2:	b299      	uxth	r1, r3
 800f0b4:	fb02 6101 	mla	r1, r2, r1, r6
 800f0b8:	0c1e      	lsrs	r6, r3, #16
 800f0ba:	0c0b      	lsrs	r3, r1, #16
 800f0bc:	fb02 3306 	mla	r3, r2, r6, r3
 800f0c0:	b289      	uxth	r1, r1
 800f0c2:	3001      	adds	r0, #1
 800f0c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f0c8:	4285      	cmp	r5, r0
 800f0ca:	f84c 1b04 	str.w	r1, [ip], #4
 800f0ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f0d2:	dcec      	bgt.n	800f0ae <__multadd+0x12>
 800f0d4:	b30e      	cbz	r6, 800f11a <__multadd+0x7e>
 800f0d6:	68a3      	ldr	r3, [r4, #8]
 800f0d8:	42ab      	cmp	r3, r5
 800f0da:	dc19      	bgt.n	800f110 <__multadd+0x74>
 800f0dc:	6861      	ldr	r1, [r4, #4]
 800f0de:	4638      	mov	r0, r7
 800f0e0:	3101      	adds	r1, #1
 800f0e2:	f7ff ff79 	bl	800efd8 <_Balloc>
 800f0e6:	4680      	mov	r8, r0
 800f0e8:	b928      	cbnz	r0, 800f0f6 <__multadd+0x5a>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	4b0c      	ldr	r3, [pc, #48]	@ (800f120 <__multadd+0x84>)
 800f0ee:	480d      	ldr	r0, [pc, #52]	@ (800f124 <__multadd+0x88>)
 800f0f0:	21ba      	movs	r1, #186	@ 0xba
 800f0f2:	f000 fd21 	bl	800fb38 <__assert_func>
 800f0f6:	6922      	ldr	r2, [r4, #16]
 800f0f8:	3202      	adds	r2, #2
 800f0fa:	f104 010c 	add.w	r1, r4, #12
 800f0fe:	0092      	lsls	r2, r2, #2
 800f100:	300c      	adds	r0, #12
 800f102:	f7ff f80e 	bl	800e122 <memcpy>
 800f106:	4621      	mov	r1, r4
 800f108:	4638      	mov	r0, r7
 800f10a:	f7ff ffa5 	bl	800f058 <_Bfree>
 800f10e:	4644      	mov	r4, r8
 800f110:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f114:	3501      	adds	r5, #1
 800f116:	615e      	str	r6, [r3, #20]
 800f118:	6125      	str	r5, [r4, #16]
 800f11a:	4620      	mov	r0, r4
 800f11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f120:	08011480 	.word	0x08011480
 800f124:	08011491 	.word	0x08011491

0800f128 <__hi0bits>:
 800f128:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f12c:	4603      	mov	r3, r0
 800f12e:	bf36      	itet	cc
 800f130:	0403      	lslcc	r3, r0, #16
 800f132:	2000      	movcs	r0, #0
 800f134:	2010      	movcc	r0, #16
 800f136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f13a:	bf3c      	itt	cc
 800f13c:	021b      	lslcc	r3, r3, #8
 800f13e:	3008      	addcc	r0, #8
 800f140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f144:	bf3c      	itt	cc
 800f146:	011b      	lslcc	r3, r3, #4
 800f148:	3004      	addcc	r0, #4
 800f14a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f14e:	bf3c      	itt	cc
 800f150:	009b      	lslcc	r3, r3, #2
 800f152:	3002      	addcc	r0, #2
 800f154:	2b00      	cmp	r3, #0
 800f156:	db05      	blt.n	800f164 <__hi0bits+0x3c>
 800f158:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f15c:	f100 0001 	add.w	r0, r0, #1
 800f160:	bf08      	it	eq
 800f162:	2020      	moveq	r0, #32
 800f164:	4770      	bx	lr

0800f166 <__lo0bits>:
 800f166:	6803      	ldr	r3, [r0, #0]
 800f168:	4602      	mov	r2, r0
 800f16a:	f013 0007 	ands.w	r0, r3, #7
 800f16e:	d00b      	beq.n	800f188 <__lo0bits+0x22>
 800f170:	07d9      	lsls	r1, r3, #31
 800f172:	d421      	bmi.n	800f1b8 <__lo0bits+0x52>
 800f174:	0798      	lsls	r0, r3, #30
 800f176:	bf49      	itett	mi
 800f178:	085b      	lsrmi	r3, r3, #1
 800f17a:	089b      	lsrpl	r3, r3, #2
 800f17c:	2001      	movmi	r0, #1
 800f17e:	6013      	strmi	r3, [r2, #0]
 800f180:	bf5c      	itt	pl
 800f182:	6013      	strpl	r3, [r2, #0]
 800f184:	2002      	movpl	r0, #2
 800f186:	4770      	bx	lr
 800f188:	b299      	uxth	r1, r3
 800f18a:	b909      	cbnz	r1, 800f190 <__lo0bits+0x2a>
 800f18c:	0c1b      	lsrs	r3, r3, #16
 800f18e:	2010      	movs	r0, #16
 800f190:	b2d9      	uxtb	r1, r3
 800f192:	b909      	cbnz	r1, 800f198 <__lo0bits+0x32>
 800f194:	3008      	adds	r0, #8
 800f196:	0a1b      	lsrs	r3, r3, #8
 800f198:	0719      	lsls	r1, r3, #28
 800f19a:	bf04      	itt	eq
 800f19c:	091b      	lsreq	r3, r3, #4
 800f19e:	3004      	addeq	r0, #4
 800f1a0:	0799      	lsls	r1, r3, #30
 800f1a2:	bf04      	itt	eq
 800f1a4:	089b      	lsreq	r3, r3, #2
 800f1a6:	3002      	addeq	r0, #2
 800f1a8:	07d9      	lsls	r1, r3, #31
 800f1aa:	d403      	bmi.n	800f1b4 <__lo0bits+0x4e>
 800f1ac:	085b      	lsrs	r3, r3, #1
 800f1ae:	f100 0001 	add.w	r0, r0, #1
 800f1b2:	d003      	beq.n	800f1bc <__lo0bits+0x56>
 800f1b4:	6013      	str	r3, [r2, #0]
 800f1b6:	4770      	bx	lr
 800f1b8:	2000      	movs	r0, #0
 800f1ba:	4770      	bx	lr
 800f1bc:	2020      	movs	r0, #32
 800f1be:	4770      	bx	lr

0800f1c0 <__i2b>:
 800f1c0:	b510      	push	{r4, lr}
 800f1c2:	460c      	mov	r4, r1
 800f1c4:	2101      	movs	r1, #1
 800f1c6:	f7ff ff07 	bl	800efd8 <_Balloc>
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	b928      	cbnz	r0, 800f1da <__i2b+0x1a>
 800f1ce:	4b05      	ldr	r3, [pc, #20]	@ (800f1e4 <__i2b+0x24>)
 800f1d0:	4805      	ldr	r0, [pc, #20]	@ (800f1e8 <__i2b+0x28>)
 800f1d2:	f240 1145 	movw	r1, #325	@ 0x145
 800f1d6:	f000 fcaf 	bl	800fb38 <__assert_func>
 800f1da:	2301      	movs	r3, #1
 800f1dc:	6144      	str	r4, [r0, #20]
 800f1de:	6103      	str	r3, [r0, #16]
 800f1e0:	bd10      	pop	{r4, pc}
 800f1e2:	bf00      	nop
 800f1e4:	08011480 	.word	0x08011480
 800f1e8:	08011491 	.word	0x08011491

0800f1ec <__multiply>:
 800f1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f0:	4614      	mov	r4, r2
 800f1f2:	690a      	ldr	r2, [r1, #16]
 800f1f4:	6923      	ldr	r3, [r4, #16]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	bfa8      	it	ge
 800f1fa:	4623      	movge	r3, r4
 800f1fc:	460f      	mov	r7, r1
 800f1fe:	bfa4      	itt	ge
 800f200:	460c      	movge	r4, r1
 800f202:	461f      	movge	r7, r3
 800f204:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f208:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f20c:	68a3      	ldr	r3, [r4, #8]
 800f20e:	6861      	ldr	r1, [r4, #4]
 800f210:	eb0a 0609 	add.w	r6, sl, r9
 800f214:	42b3      	cmp	r3, r6
 800f216:	b085      	sub	sp, #20
 800f218:	bfb8      	it	lt
 800f21a:	3101      	addlt	r1, #1
 800f21c:	f7ff fedc 	bl	800efd8 <_Balloc>
 800f220:	b930      	cbnz	r0, 800f230 <__multiply+0x44>
 800f222:	4602      	mov	r2, r0
 800f224:	4b44      	ldr	r3, [pc, #272]	@ (800f338 <__multiply+0x14c>)
 800f226:	4845      	ldr	r0, [pc, #276]	@ (800f33c <__multiply+0x150>)
 800f228:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f22c:	f000 fc84 	bl	800fb38 <__assert_func>
 800f230:	f100 0514 	add.w	r5, r0, #20
 800f234:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f238:	462b      	mov	r3, r5
 800f23a:	2200      	movs	r2, #0
 800f23c:	4543      	cmp	r3, r8
 800f23e:	d321      	bcc.n	800f284 <__multiply+0x98>
 800f240:	f107 0114 	add.w	r1, r7, #20
 800f244:	f104 0214 	add.w	r2, r4, #20
 800f248:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f24c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f250:	9302      	str	r3, [sp, #8]
 800f252:	1b13      	subs	r3, r2, r4
 800f254:	3b15      	subs	r3, #21
 800f256:	f023 0303 	bic.w	r3, r3, #3
 800f25a:	3304      	adds	r3, #4
 800f25c:	f104 0715 	add.w	r7, r4, #21
 800f260:	42ba      	cmp	r2, r7
 800f262:	bf38      	it	cc
 800f264:	2304      	movcc	r3, #4
 800f266:	9301      	str	r3, [sp, #4]
 800f268:	9b02      	ldr	r3, [sp, #8]
 800f26a:	9103      	str	r1, [sp, #12]
 800f26c:	428b      	cmp	r3, r1
 800f26e:	d80c      	bhi.n	800f28a <__multiply+0x9e>
 800f270:	2e00      	cmp	r6, #0
 800f272:	dd03      	ble.n	800f27c <__multiply+0x90>
 800f274:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d05b      	beq.n	800f334 <__multiply+0x148>
 800f27c:	6106      	str	r6, [r0, #16]
 800f27e:	b005      	add	sp, #20
 800f280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f284:	f843 2b04 	str.w	r2, [r3], #4
 800f288:	e7d8      	b.n	800f23c <__multiply+0x50>
 800f28a:	f8b1 a000 	ldrh.w	sl, [r1]
 800f28e:	f1ba 0f00 	cmp.w	sl, #0
 800f292:	d024      	beq.n	800f2de <__multiply+0xf2>
 800f294:	f104 0e14 	add.w	lr, r4, #20
 800f298:	46a9      	mov	r9, r5
 800f29a:	f04f 0c00 	mov.w	ip, #0
 800f29e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f2a2:	f8d9 3000 	ldr.w	r3, [r9]
 800f2a6:	fa1f fb87 	uxth.w	fp, r7
 800f2aa:	b29b      	uxth	r3, r3
 800f2ac:	fb0a 330b 	mla	r3, sl, fp, r3
 800f2b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f2b4:	f8d9 7000 	ldr.w	r7, [r9]
 800f2b8:	4463      	add	r3, ip
 800f2ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f2be:	fb0a c70b 	mla	r7, sl, fp, ip
 800f2c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f2cc:	4572      	cmp	r2, lr
 800f2ce:	f849 3b04 	str.w	r3, [r9], #4
 800f2d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f2d6:	d8e2      	bhi.n	800f29e <__multiply+0xb2>
 800f2d8:	9b01      	ldr	r3, [sp, #4]
 800f2da:	f845 c003 	str.w	ip, [r5, r3]
 800f2de:	9b03      	ldr	r3, [sp, #12]
 800f2e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f2e4:	3104      	adds	r1, #4
 800f2e6:	f1b9 0f00 	cmp.w	r9, #0
 800f2ea:	d021      	beq.n	800f330 <__multiply+0x144>
 800f2ec:	682b      	ldr	r3, [r5, #0]
 800f2ee:	f104 0c14 	add.w	ip, r4, #20
 800f2f2:	46ae      	mov	lr, r5
 800f2f4:	f04f 0a00 	mov.w	sl, #0
 800f2f8:	f8bc b000 	ldrh.w	fp, [ip]
 800f2fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f300:	fb09 770b 	mla	r7, r9, fp, r7
 800f304:	4457      	add	r7, sl
 800f306:	b29b      	uxth	r3, r3
 800f308:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f30c:	f84e 3b04 	str.w	r3, [lr], #4
 800f310:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f314:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f318:	f8be 3000 	ldrh.w	r3, [lr]
 800f31c:	fb09 330a 	mla	r3, r9, sl, r3
 800f320:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f324:	4562      	cmp	r2, ip
 800f326:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f32a:	d8e5      	bhi.n	800f2f8 <__multiply+0x10c>
 800f32c:	9f01      	ldr	r7, [sp, #4]
 800f32e:	51eb      	str	r3, [r5, r7]
 800f330:	3504      	adds	r5, #4
 800f332:	e799      	b.n	800f268 <__multiply+0x7c>
 800f334:	3e01      	subs	r6, #1
 800f336:	e79b      	b.n	800f270 <__multiply+0x84>
 800f338:	08011480 	.word	0x08011480
 800f33c:	08011491 	.word	0x08011491

0800f340 <__pow5mult>:
 800f340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f344:	4615      	mov	r5, r2
 800f346:	f012 0203 	ands.w	r2, r2, #3
 800f34a:	4607      	mov	r7, r0
 800f34c:	460e      	mov	r6, r1
 800f34e:	d007      	beq.n	800f360 <__pow5mult+0x20>
 800f350:	4c25      	ldr	r4, [pc, #148]	@ (800f3e8 <__pow5mult+0xa8>)
 800f352:	3a01      	subs	r2, #1
 800f354:	2300      	movs	r3, #0
 800f356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f35a:	f7ff fe9f 	bl	800f09c <__multadd>
 800f35e:	4606      	mov	r6, r0
 800f360:	10ad      	asrs	r5, r5, #2
 800f362:	d03d      	beq.n	800f3e0 <__pow5mult+0xa0>
 800f364:	69fc      	ldr	r4, [r7, #28]
 800f366:	b97c      	cbnz	r4, 800f388 <__pow5mult+0x48>
 800f368:	2010      	movs	r0, #16
 800f36a:	f7ff fd7f 	bl	800ee6c <malloc>
 800f36e:	4602      	mov	r2, r0
 800f370:	61f8      	str	r0, [r7, #28]
 800f372:	b928      	cbnz	r0, 800f380 <__pow5mult+0x40>
 800f374:	4b1d      	ldr	r3, [pc, #116]	@ (800f3ec <__pow5mult+0xac>)
 800f376:	481e      	ldr	r0, [pc, #120]	@ (800f3f0 <__pow5mult+0xb0>)
 800f378:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f37c:	f000 fbdc 	bl	800fb38 <__assert_func>
 800f380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f384:	6004      	str	r4, [r0, #0]
 800f386:	60c4      	str	r4, [r0, #12]
 800f388:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f38c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f390:	b94c      	cbnz	r4, 800f3a6 <__pow5mult+0x66>
 800f392:	f240 2171 	movw	r1, #625	@ 0x271
 800f396:	4638      	mov	r0, r7
 800f398:	f7ff ff12 	bl	800f1c0 <__i2b>
 800f39c:	2300      	movs	r3, #0
 800f39e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	6003      	str	r3, [r0, #0]
 800f3a6:	f04f 0900 	mov.w	r9, #0
 800f3aa:	07eb      	lsls	r3, r5, #31
 800f3ac:	d50a      	bpl.n	800f3c4 <__pow5mult+0x84>
 800f3ae:	4631      	mov	r1, r6
 800f3b0:	4622      	mov	r2, r4
 800f3b2:	4638      	mov	r0, r7
 800f3b4:	f7ff ff1a 	bl	800f1ec <__multiply>
 800f3b8:	4631      	mov	r1, r6
 800f3ba:	4680      	mov	r8, r0
 800f3bc:	4638      	mov	r0, r7
 800f3be:	f7ff fe4b 	bl	800f058 <_Bfree>
 800f3c2:	4646      	mov	r6, r8
 800f3c4:	106d      	asrs	r5, r5, #1
 800f3c6:	d00b      	beq.n	800f3e0 <__pow5mult+0xa0>
 800f3c8:	6820      	ldr	r0, [r4, #0]
 800f3ca:	b938      	cbnz	r0, 800f3dc <__pow5mult+0x9c>
 800f3cc:	4622      	mov	r2, r4
 800f3ce:	4621      	mov	r1, r4
 800f3d0:	4638      	mov	r0, r7
 800f3d2:	f7ff ff0b 	bl	800f1ec <__multiply>
 800f3d6:	6020      	str	r0, [r4, #0]
 800f3d8:	f8c0 9000 	str.w	r9, [r0]
 800f3dc:	4604      	mov	r4, r0
 800f3de:	e7e4      	b.n	800f3aa <__pow5mult+0x6a>
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3e6:	bf00      	nop
 800f3e8:	080114ec 	.word	0x080114ec
 800f3ec:	08011411 	.word	0x08011411
 800f3f0:	08011491 	.word	0x08011491

0800f3f4 <__lshift>:
 800f3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3f8:	460c      	mov	r4, r1
 800f3fa:	6849      	ldr	r1, [r1, #4]
 800f3fc:	6923      	ldr	r3, [r4, #16]
 800f3fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f402:	68a3      	ldr	r3, [r4, #8]
 800f404:	4607      	mov	r7, r0
 800f406:	4691      	mov	r9, r2
 800f408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f40c:	f108 0601 	add.w	r6, r8, #1
 800f410:	42b3      	cmp	r3, r6
 800f412:	db0b      	blt.n	800f42c <__lshift+0x38>
 800f414:	4638      	mov	r0, r7
 800f416:	f7ff fddf 	bl	800efd8 <_Balloc>
 800f41a:	4605      	mov	r5, r0
 800f41c:	b948      	cbnz	r0, 800f432 <__lshift+0x3e>
 800f41e:	4602      	mov	r2, r0
 800f420:	4b28      	ldr	r3, [pc, #160]	@ (800f4c4 <__lshift+0xd0>)
 800f422:	4829      	ldr	r0, [pc, #164]	@ (800f4c8 <__lshift+0xd4>)
 800f424:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f428:	f000 fb86 	bl	800fb38 <__assert_func>
 800f42c:	3101      	adds	r1, #1
 800f42e:	005b      	lsls	r3, r3, #1
 800f430:	e7ee      	b.n	800f410 <__lshift+0x1c>
 800f432:	2300      	movs	r3, #0
 800f434:	f100 0114 	add.w	r1, r0, #20
 800f438:	f100 0210 	add.w	r2, r0, #16
 800f43c:	4618      	mov	r0, r3
 800f43e:	4553      	cmp	r3, sl
 800f440:	db33      	blt.n	800f4aa <__lshift+0xb6>
 800f442:	6920      	ldr	r0, [r4, #16]
 800f444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f448:	f104 0314 	add.w	r3, r4, #20
 800f44c:	f019 091f 	ands.w	r9, r9, #31
 800f450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f454:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f458:	d02b      	beq.n	800f4b2 <__lshift+0xbe>
 800f45a:	f1c9 0e20 	rsb	lr, r9, #32
 800f45e:	468a      	mov	sl, r1
 800f460:	2200      	movs	r2, #0
 800f462:	6818      	ldr	r0, [r3, #0]
 800f464:	fa00 f009 	lsl.w	r0, r0, r9
 800f468:	4310      	orrs	r0, r2
 800f46a:	f84a 0b04 	str.w	r0, [sl], #4
 800f46e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f472:	459c      	cmp	ip, r3
 800f474:	fa22 f20e 	lsr.w	r2, r2, lr
 800f478:	d8f3      	bhi.n	800f462 <__lshift+0x6e>
 800f47a:	ebac 0304 	sub.w	r3, ip, r4
 800f47e:	3b15      	subs	r3, #21
 800f480:	f023 0303 	bic.w	r3, r3, #3
 800f484:	3304      	adds	r3, #4
 800f486:	f104 0015 	add.w	r0, r4, #21
 800f48a:	4584      	cmp	ip, r0
 800f48c:	bf38      	it	cc
 800f48e:	2304      	movcc	r3, #4
 800f490:	50ca      	str	r2, [r1, r3]
 800f492:	b10a      	cbz	r2, 800f498 <__lshift+0xa4>
 800f494:	f108 0602 	add.w	r6, r8, #2
 800f498:	3e01      	subs	r6, #1
 800f49a:	4638      	mov	r0, r7
 800f49c:	612e      	str	r6, [r5, #16]
 800f49e:	4621      	mov	r1, r4
 800f4a0:	f7ff fdda 	bl	800f058 <_Bfree>
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	e7c5      	b.n	800f43e <__lshift+0x4a>
 800f4b2:	3904      	subs	r1, #4
 800f4b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f4bc:	459c      	cmp	ip, r3
 800f4be:	d8f9      	bhi.n	800f4b4 <__lshift+0xc0>
 800f4c0:	e7ea      	b.n	800f498 <__lshift+0xa4>
 800f4c2:	bf00      	nop
 800f4c4:	08011480 	.word	0x08011480
 800f4c8:	08011491 	.word	0x08011491

0800f4cc <__mcmp>:
 800f4cc:	690a      	ldr	r2, [r1, #16]
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	6900      	ldr	r0, [r0, #16]
 800f4d2:	1a80      	subs	r0, r0, r2
 800f4d4:	b530      	push	{r4, r5, lr}
 800f4d6:	d10e      	bne.n	800f4f6 <__mcmp+0x2a>
 800f4d8:	3314      	adds	r3, #20
 800f4da:	3114      	adds	r1, #20
 800f4dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f4e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f4e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f4e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f4ec:	4295      	cmp	r5, r2
 800f4ee:	d003      	beq.n	800f4f8 <__mcmp+0x2c>
 800f4f0:	d205      	bcs.n	800f4fe <__mcmp+0x32>
 800f4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f6:	bd30      	pop	{r4, r5, pc}
 800f4f8:	42a3      	cmp	r3, r4
 800f4fa:	d3f3      	bcc.n	800f4e4 <__mcmp+0x18>
 800f4fc:	e7fb      	b.n	800f4f6 <__mcmp+0x2a>
 800f4fe:	2001      	movs	r0, #1
 800f500:	e7f9      	b.n	800f4f6 <__mcmp+0x2a>
	...

0800f504 <__mdiff>:
 800f504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f508:	4689      	mov	r9, r1
 800f50a:	4606      	mov	r6, r0
 800f50c:	4611      	mov	r1, r2
 800f50e:	4648      	mov	r0, r9
 800f510:	4614      	mov	r4, r2
 800f512:	f7ff ffdb 	bl	800f4cc <__mcmp>
 800f516:	1e05      	subs	r5, r0, #0
 800f518:	d112      	bne.n	800f540 <__mdiff+0x3c>
 800f51a:	4629      	mov	r1, r5
 800f51c:	4630      	mov	r0, r6
 800f51e:	f7ff fd5b 	bl	800efd8 <_Balloc>
 800f522:	4602      	mov	r2, r0
 800f524:	b928      	cbnz	r0, 800f532 <__mdiff+0x2e>
 800f526:	4b3f      	ldr	r3, [pc, #252]	@ (800f624 <__mdiff+0x120>)
 800f528:	f240 2137 	movw	r1, #567	@ 0x237
 800f52c:	483e      	ldr	r0, [pc, #248]	@ (800f628 <__mdiff+0x124>)
 800f52e:	f000 fb03 	bl	800fb38 <__assert_func>
 800f532:	2301      	movs	r3, #1
 800f534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f538:	4610      	mov	r0, r2
 800f53a:	b003      	add	sp, #12
 800f53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f540:	bfbc      	itt	lt
 800f542:	464b      	movlt	r3, r9
 800f544:	46a1      	movlt	r9, r4
 800f546:	4630      	mov	r0, r6
 800f548:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f54c:	bfba      	itte	lt
 800f54e:	461c      	movlt	r4, r3
 800f550:	2501      	movlt	r5, #1
 800f552:	2500      	movge	r5, #0
 800f554:	f7ff fd40 	bl	800efd8 <_Balloc>
 800f558:	4602      	mov	r2, r0
 800f55a:	b918      	cbnz	r0, 800f564 <__mdiff+0x60>
 800f55c:	4b31      	ldr	r3, [pc, #196]	@ (800f624 <__mdiff+0x120>)
 800f55e:	f240 2145 	movw	r1, #581	@ 0x245
 800f562:	e7e3      	b.n	800f52c <__mdiff+0x28>
 800f564:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f568:	6926      	ldr	r6, [r4, #16]
 800f56a:	60c5      	str	r5, [r0, #12]
 800f56c:	f109 0310 	add.w	r3, r9, #16
 800f570:	f109 0514 	add.w	r5, r9, #20
 800f574:	f104 0e14 	add.w	lr, r4, #20
 800f578:	f100 0b14 	add.w	fp, r0, #20
 800f57c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f580:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f584:	9301      	str	r3, [sp, #4]
 800f586:	46d9      	mov	r9, fp
 800f588:	f04f 0c00 	mov.w	ip, #0
 800f58c:	9b01      	ldr	r3, [sp, #4]
 800f58e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f592:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f596:	9301      	str	r3, [sp, #4]
 800f598:	fa1f f38a 	uxth.w	r3, sl
 800f59c:	4619      	mov	r1, r3
 800f59e:	b283      	uxth	r3, r0
 800f5a0:	1acb      	subs	r3, r1, r3
 800f5a2:	0c00      	lsrs	r0, r0, #16
 800f5a4:	4463      	add	r3, ip
 800f5a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f5aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f5b4:	4576      	cmp	r6, lr
 800f5b6:	f849 3b04 	str.w	r3, [r9], #4
 800f5ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f5be:	d8e5      	bhi.n	800f58c <__mdiff+0x88>
 800f5c0:	1b33      	subs	r3, r6, r4
 800f5c2:	3b15      	subs	r3, #21
 800f5c4:	f023 0303 	bic.w	r3, r3, #3
 800f5c8:	3415      	adds	r4, #21
 800f5ca:	3304      	adds	r3, #4
 800f5cc:	42a6      	cmp	r6, r4
 800f5ce:	bf38      	it	cc
 800f5d0:	2304      	movcc	r3, #4
 800f5d2:	441d      	add	r5, r3
 800f5d4:	445b      	add	r3, fp
 800f5d6:	461e      	mov	r6, r3
 800f5d8:	462c      	mov	r4, r5
 800f5da:	4544      	cmp	r4, r8
 800f5dc:	d30e      	bcc.n	800f5fc <__mdiff+0xf8>
 800f5de:	f108 0103 	add.w	r1, r8, #3
 800f5e2:	1b49      	subs	r1, r1, r5
 800f5e4:	f021 0103 	bic.w	r1, r1, #3
 800f5e8:	3d03      	subs	r5, #3
 800f5ea:	45a8      	cmp	r8, r5
 800f5ec:	bf38      	it	cc
 800f5ee:	2100      	movcc	r1, #0
 800f5f0:	440b      	add	r3, r1
 800f5f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f5f6:	b191      	cbz	r1, 800f61e <__mdiff+0x11a>
 800f5f8:	6117      	str	r7, [r2, #16]
 800f5fa:	e79d      	b.n	800f538 <__mdiff+0x34>
 800f5fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800f600:	46e6      	mov	lr, ip
 800f602:	0c08      	lsrs	r0, r1, #16
 800f604:	fa1c fc81 	uxtah	ip, ip, r1
 800f608:	4471      	add	r1, lr
 800f60a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f60e:	b289      	uxth	r1, r1
 800f610:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f614:	f846 1b04 	str.w	r1, [r6], #4
 800f618:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f61c:	e7dd      	b.n	800f5da <__mdiff+0xd6>
 800f61e:	3f01      	subs	r7, #1
 800f620:	e7e7      	b.n	800f5f2 <__mdiff+0xee>
 800f622:	bf00      	nop
 800f624:	08011480 	.word	0x08011480
 800f628:	08011491 	.word	0x08011491

0800f62c <__d2b>:
 800f62c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f630:	460f      	mov	r7, r1
 800f632:	2101      	movs	r1, #1
 800f634:	ec59 8b10 	vmov	r8, r9, d0
 800f638:	4616      	mov	r6, r2
 800f63a:	f7ff fccd 	bl	800efd8 <_Balloc>
 800f63e:	4604      	mov	r4, r0
 800f640:	b930      	cbnz	r0, 800f650 <__d2b+0x24>
 800f642:	4602      	mov	r2, r0
 800f644:	4b23      	ldr	r3, [pc, #140]	@ (800f6d4 <__d2b+0xa8>)
 800f646:	4824      	ldr	r0, [pc, #144]	@ (800f6d8 <__d2b+0xac>)
 800f648:	f240 310f 	movw	r1, #783	@ 0x30f
 800f64c:	f000 fa74 	bl	800fb38 <__assert_func>
 800f650:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f654:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f658:	b10d      	cbz	r5, 800f65e <__d2b+0x32>
 800f65a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f65e:	9301      	str	r3, [sp, #4]
 800f660:	f1b8 0300 	subs.w	r3, r8, #0
 800f664:	d023      	beq.n	800f6ae <__d2b+0x82>
 800f666:	4668      	mov	r0, sp
 800f668:	9300      	str	r3, [sp, #0]
 800f66a:	f7ff fd7c 	bl	800f166 <__lo0bits>
 800f66e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f672:	b1d0      	cbz	r0, 800f6aa <__d2b+0x7e>
 800f674:	f1c0 0320 	rsb	r3, r0, #32
 800f678:	fa02 f303 	lsl.w	r3, r2, r3
 800f67c:	430b      	orrs	r3, r1
 800f67e:	40c2      	lsrs	r2, r0
 800f680:	6163      	str	r3, [r4, #20]
 800f682:	9201      	str	r2, [sp, #4]
 800f684:	9b01      	ldr	r3, [sp, #4]
 800f686:	61a3      	str	r3, [r4, #24]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	bf0c      	ite	eq
 800f68c:	2201      	moveq	r2, #1
 800f68e:	2202      	movne	r2, #2
 800f690:	6122      	str	r2, [r4, #16]
 800f692:	b1a5      	cbz	r5, 800f6be <__d2b+0x92>
 800f694:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f698:	4405      	add	r5, r0
 800f69a:	603d      	str	r5, [r7, #0]
 800f69c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f6a0:	6030      	str	r0, [r6, #0]
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	b003      	add	sp, #12
 800f6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6aa:	6161      	str	r1, [r4, #20]
 800f6ac:	e7ea      	b.n	800f684 <__d2b+0x58>
 800f6ae:	a801      	add	r0, sp, #4
 800f6b0:	f7ff fd59 	bl	800f166 <__lo0bits>
 800f6b4:	9b01      	ldr	r3, [sp, #4]
 800f6b6:	6163      	str	r3, [r4, #20]
 800f6b8:	3020      	adds	r0, #32
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	e7e8      	b.n	800f690 <__d2b+0x64>
 800f6be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f6c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f6c6:	6038      	str	r0, [r7, #0]
 800f6c8:	6918      	ldr	r0, [r3, #16]
 800f6ca:	f7ff fd2d 	bl	800f128 <__hi0bits>
 800f6ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f6d2:	e7e5      	b.n	800f6a0 <__d2b+0x74>
 800f6d4:	08011480 	.word	0x08011480
 800f6d8:	08011491 	.word	0x08011491

0800f6dc <__ssputs_r>:
 800f6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6e0:	688e      	ldr	r6, [r1, #8]
 800f6e2:	461f      	mov	r7, r3
 800f6e4:	42be      	cmp	r6, r7
 800f6e6:	680b      	ldr	r3, [r1, #0]
 800f6e8:	4682      	mov	sl, r0
 800f6ea:	460c      	mov	r4, r1
 800f6ec:	4690      	mov	r8, r2
 800f6ee:	d82d      	bhi.n	800f74c <__ssputs_r+0x70>
 800f6f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f6f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f6f8:	d026      	beq.n	800f748 <__ssputs_r+0x6c>
 800f6fa:	6965      	ldr	r5, [r4, #20]
 800f6fc:	6909      	ldr	r1, [r1, #16]
 800f6fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f702:	eba3 0901 	sub.w	r9, r3, r1
 800f706:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f70a:	1c7b      	adds	r3, r7, #1
 800f70c:	444b      	add	r3, r9
 800f70e:	106d      	asrs	r5, r5, #1
 800f710:	429d      	cmp	r5, r3
 800f712:	bf38      	it	cc
 800f714:	461d      	movcc	r5, r3
 800f716:	0553      	lsls	r3, r2, #21
 800f718:	d527      	bpl.n	800f76a <__ssputs_r+0x8e>
 800f71a:	4629      	mov	r1, r5
 800f71c:	f7ff fbd0 	bl	800eec0 <_malloc_r>
 800f720:	4606      	mov	r6, r0
 800f722:	b360      	cbz	r0, 800f77e <__ssputs_r+0xa2>
 800f724:	6921      	ldr	r1, [r4, #16]
 800f726:	464a      	mov	r2, r9
 800f728:	f7fe fcfb 	bl	800e122 <memcpy>
 800f72c:	89a3      	ldrh	r3, [r4, #12]
 800f72e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f736:	81a3      	strh	r3, [r4, #12]
 800f738:	6126      	str	r6, [r4, #16]
 800f73a:	6165      	str	r5, [r4, #20]
 800f73c:	444e      	add	r6, r9
 800f73e:	eba5 0509 	sub.w	r5, r5, r9
 800f742:	6026      	str	r6, [r4, #0]
 800f744:	60a5      	str	r5, [r4, #8]
 800f746:	463e      	mov	r6, r7
 800f748:	42be      	cmp	r6, r7
 800f74a:	d900      	bls.n	800f74e <__ssputs_r+0x72>
 800f74c:	463e      	mov	r6, r7
 800f74e:	6820      	ldr	r0, [r4, #0]
 800f750:	4632      	mov	r2, r6
 800f752:	4641      	mov	r1, r8
 800f754:	f000 f9c6 	bl	800fae4 <memmove>
 800f758:	68a3      	ldr	r3, [r4, #8]
 800f75a:	1b9b      	subs	r3, r3, r6
 800f75c:	60a3      	str	r3, [r4, #8]
 800f75e:	6823      	ldr	r3, [r4, #0]
 800f760:	4433      	add	r3, r6
 800f762:	6023      	str	r3, [r4, #0]
 800f764:	2000      	movs	r0, #0
 800f766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f76a:	462a      	mov	r2, r5
 800f76c:	f000 fa28 	bl	800fbc0 <_realloc_r>
 800f770:	4606      	mov	r6, r0
 800f772:	2800      	cmp	r0, #0
 800f774:	d1e0      	bne.n	800f738 <__ssputs_r+0x5c>
 800f776:	6921      	ldr	r1, [r4, #16]
 800f778:	4650      	mov	r0, sl
 800f77a:	f7ff fb2d 	bl	800edd8 <_free_r>
 800f77e:	230c      	movs	r3, #12
 800f780:	f8ca 3000 	str.w	r3, [sl]
 800f784:	89a3      	ldrh	r3, [r4, #12]
 800f786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f78a:	81a3      	strh	r3, [r4, #12]
 800f78c:	f04f 30ff 	mov.w	r0, #4294967295
 800f790:	e7e9      	b.n	800f766 <__ssputs_r+0x8a>
	...

0800f794 <_svfiprintf_r>:
 800f794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f798:	4698      	mov	r8, r3
 800f79a:	898b      	ldrh	r3, [r1, #12]
 800f79c:	061b      	lsls	r3, r3, #24
 800f79e:	b09d      	sub	sp, #116	@ 0x74
 800f7a0:	4607      	mov	r7, r0
 800f7a2:	460d      	mov	r5, r1
 800f7a4:	4614      	mov	r4, r2
 800f7a6:	d510      	bpl.n	800f7ca <_svfiprintf_r+0x36>
 800f7a8:	690b      	ldr	r3, [r1, #16]
 800f7aa:	b973      	cbnz	r3, 800f7ca <_svfiprintf_r+0x36>
 800f7ac:	2140      	movs	r1, #64	@ 0x40
 800f7ae:	f7ff fb87 	bl	800eec0 <_malloc_r>
 800f7b2:	6028      	str	r0, [r5, #0]
 800f7b4:	6128      	str	r0, [r5, #16]
 800f7b6:	b930      	cbnz	r0, 800f7c6 <_svfiprintf_r+0x32>
 800f7b8:	230c      	movs	r3, #12
 800f7ba:	603b      	str	r3, [r7, #0]
 800f7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c0:	b01d      	add	sp, #116	@ 0x74
 800f7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c6:	2340      	movs	r3, #64	@ 0x40
 800f7c8:	616b      	str	r3, [r5, #20]
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7ce:	2320      	movs	r3, #32
 800f7d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7d8:	2330      	movs	r3, #48	@ 0x30
 800f7da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f978 <_svfiprintf_r+0x1e4>
 800f7de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7e2:	f04f 0901 	mov.w	r9, #1
 800f7e6:	4623      	mov	r3, r4
 800f7e8:	469a      	mov	sl, r3
 800f7ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7ee:	b10a      	cbz	r2, 800f7f4 <_svfiprintf_r+0x60>
 800f7f0:	2a25      	cmp	r2, #37	@ 0x25
 800f7f2:	d1f9      	bne.n	800f7e8 <_svfiprintf_r+0x54>
 800f7f4:	ebba 0b04 	subs.w	fp, sl, r4
 800f7f8:	d00b      	beq.n	800f812 <_svfiprintf_r+0x7e>
 800f7fa:	465b      	mov	r3, fp
 800f7fc:	4622      	mov	r2, r4
 800f7fe:	4629      	mov	r1, r5
 800f800:	4638      	mov	r0, r7
 800f802:	f7ff ff6b 	bl	800f6dc <__ssputs_r>
 800f806:	3001      	adds	r0, #1
 800f808:	f000 80a7 	beq.w	800f95a <_svfiprintf_r+0x1c6>
 800f80c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f80e:	445a      	add	r2, fp
 800f810:	9209      	str	r2, [sp, #36]	@ 0x24
 800f812:	f89a 3000 	ldrb.w	r3, [sl]
 800f816:	2b00      	cmp	r3, #0
 800f818:	f000 809f 	beq.w	800f95a <_svfiprintf_r+0x1c6>
 800f81c:	2300      	movs	r3, #0
 800f81e:	f04f 32ff 	mov.w	r2, #4294967295
 800f822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f826:	f10a 0a01 	add.w	sl, sl, #1
 800f82a:	9304      	str	r3, [sp, #16]
 800f82c:	9307      	str	r3, [sp, #28]
 800f82e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f832:	931a      	str	r3, [sp, #104]	@ 0x68
 800f834:	4654      	mov	r4, sl
 800f836:	2205      	movs	r2, #5
 800f838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f83c:	484e      	ldr	r0, [pc, #312]	@ (800f978 <_svfiprintf_r+0x1e4>)
 800f83e:	f7f0 fcff 	bl	8000240 <memchr>
 800f842:	9a04      	ldr	r2, [sp, #16]
 800f844:	b9d8      	cbnz	r0, 800f87e <_svfiprintf_r+0xea>
 800f846:	06d0      	lsls	r0, r2, #27
 800f848:	bf44      	itt	mi
 800f84a:	2320      	movmi	r3, #32
 800f84c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f850:	0711      	lsls	r1, r2, #28
 800f852:	bf44      	itt	mi
 800f854:	232b      	movmi	r3, #43	@ 0x2b
 800f856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f85a:	f89a 3000 	ldrb.w	r3, [sl]
 800f85e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f860:	d015      	beq.n	800f88e <_svfiprintf_r+0xfa>
 800f862:	9a07      	ldr	r2, [sp, #28]
 800f864:	4654      	mov	r4, sl
 800f866:	2000      	movs	r0, #0
 800f868:	f04f 0c0a 	mov.w	ip, #10
 800f86c:	4621      	mov	r1, r4
 800f86e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f872:	3b30      	subs	r3, #48	@ 0x30
 800f874:	2b09      	cmp	r3, #9
 800f876:	d94b      	bls.n	800f910 <_svfiprintf_r+0x17c>
 800f878:	b1b0      	cbz	r0, 800f8a8 <_svfiprintf_r+0x114>
 800f87a:	9207      	str	r2, [sp, #28]
 800f87c:	e014      	b.n	800f8a8 <_svfiprintf_r+0x114>
 800f87e:	eba0 0308 	sub.w	r3, r0, r8
 800f882:	fa09 f303 	lsl.w	r3, r9, r3
 800f886:	4313      	orrs	r3, r2
 800f888:	9304      	str	r3, [sp, #16]
 800f88a:	46a2      	mov	sl, r4
 800f88c:	e7d2      	b.n	800f834 <_svfiprintf_r+0xa0>
 800f88e:	9b03      	ldr	r3, [sp, #12]
 800f890:	1d19      	adds	r1, r3, #4
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	9103      	str	r1, [sp, #12]
 800f896:	2b00      	cmp	r3, #0
 800f898:	bfbb      	ittet	lt
 800f89a:	425b      	neglt	r3, r3
 800f89c:	f042 0202 	orrlt.w	r2, r2, #2
 800f8a0:	9307      	strge	r3, [sp, #28]
 800f8a2:	9307      	strlt	r3, [sp, #28]
 800f8a4:	bfb8      	it	lt
 800f8a6:	9204      	strlt	r2, [sp, #16]
 800f8a8:	7823      	ldrb	r3, [r4, #0]
 800f8aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8ac:	d10a      	bne.n	800f8c4 <_svfiprintf_r+0x130>
 800f8ae:	7863      	ldrb	r3, [r4, #1]
 800f8b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8b2:	d132      	bne.n	800f91a <_svfiprintf_r+0x186>
 800f8b4:	9b03      	ldr	r3, [sp, #12]
 800f8b6:	1d1a      	adds	r2, r3, #4
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	9203      	str	r2, [sp, #12]
 800f8bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8c0:	3402      	adds	r4, #2
 800f8c2:	9305      	str	r3, [sp, #20]
 800f8c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f988 <_svfiprintf_r+0x1f4>
 800f8c8:	7821      	ldrb	r1, [r4, #0]
 800f8ca:	2203      	movs	r2, #3
 800f8cc:	4650      	mov	r0, sl
 800f8ce:	f7f0 fcb7 	bl	8000240 <memchr>
 800f8d2:	b138      	cbz	r0, 800f8e4 <_svfiprintf_r+0x150>
 800f8d4:	9b04      	ldr	r3, [sp, #16]
 800f8d6:	eba0 000a 	sub.w	r0, r0, sl
 800f8da:	2240      	movs	r2, #64	@ 0x40
 800f8dc:	4082      	lsls	r2, r0
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	3401      	adds	r4, #1
 800f8e2:	9304      	str	r3, [sp, #16]
 800f8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8e8:	4824      	ldr	r0, [pc, #144]	@ (800f97c <_svfiprintf_r+0x1e8>)
 800f8ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8ee:	2206      	movs	r2, #6
 800f8f0:	f7f0 fca6 	bl	8000240 <memchr>
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	d036      	beq.n	800f966 <_svfiprintf_r+0x1d2>
 800f8f8:	4b21      	ldr	r3, [pc, #132]	@ (800f980 <_svfiprintf_r+0x1ec>)
 800f8fa:	bb1b      	cbnz	r3, 800f944 <_svfiprintf_r+0x1b0>
 800f8fc:	9b03      	ldr	r3, [sp, #12]
 800f8fe:	3307      	adds	r3, #7
 800f900:	f023 0307 	bic.w	r3, r3, #7
 800f904:	3308      	adds	r3, #8
 800f906:	9303      	str	r3, [sp, #12]
 800f908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f90a:	4433      	add	r3, r6
 800f90c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f90e:	e76a      	b.n	800f7e6 <_svfiprintf_r+0x52>
 800f910:	fb0c 3202 	mla	r2, ip, r2, r3
 800f914:	460c      	mov	r4, r1
 800f916:	2001      	movs	r0, #1
 800f918:	e7a8      	b.n	800f86c <_svfiprintf_r+0xd8>
 800f91a:	2300      	movs	r3, #0
 800f91c:	3401      	adds	r4, #1
 800f91e:	9305      	str	r3, [sp, #20]
 800f920:	4619      	mov	r1, r3
 800f922:	f04f 0c0a 	mov.w	ip, #10
 800f926:	4620      	mov	r0, r4
 800f928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f92c:	3a30      	subs	r2, #48	@ 0x30
 800f92e:	2a09      	cmp	r2, #9
 800f930:	d903      	bls.n	800f93a <_svfiprintf_r+0x1a6>
 800f932:	2b00      	cmp	r3, #0
 800f934:	d0c6      	beq.n	800f8c4 <_svfiprintf_r+0x130>
 800f936:	9105      	str	r1, [sp, #20]
 800f938:	e7c4      	b.n	800f8c4 <_svfiprintf_r+0x130>
 800f93a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f93e:	4604      	mov	r4, r0
 800f940:	2301      	movs	r3, #1
 800f942:	e7f0      	b.n	800f926 <_svfiprintf_r+0x192>
 800f944:	ab03      	add	r3, sp, #12
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	462a      	mov	r2, r5
 800f94a:	4b0e      	ldr	r3, [pc, #56]	@ (800f984 <_svfiprintf_r+0x1f0>)
 800f94c:	a904      	add	r1, sp, #16
 800f94e:	4638      	mov	r0, r7
 800f950:	f7fd fe08 	bl	800d564 <_printf_float>
 800f954:	1c42      	adds	r2, r0, #1
 800f956:	4606      	mov	r6, r0
 800f958:	d1d6      	bne.n	800f908 <_svfiprintf_r+0x174>
 800f95a:	89ab      	ldrh	r3, [r5, #12]
 800f95c:	065b      	lsls	r3, r3, #25
 800f95e:	f53f af2d 	bmi.w	800f7bc <_svfiprintf_r+0x28>
 800f962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f964:	e72c      	b.n	800f7c0 <_svfiprintf_r+0x2c>
 800f966:	ab03      	add	r3, sp, #12
 800f968:	9300      	str	r3, [sp, #0]
 800f96a:	462a      	mov	r2, r5
 800f96c:	4b05      	ldr	r3, [pc, #20]	@ (800f984 <_svfiprintf_r+0x1f0>)
 800f96e:	a904      	add	r1, sp, #16
 800f970:	4638      	mov	r0, r7
 800f972:	f7fe f88f 	bl	800da94 <_printf_i>
 800f976:	e7ed      	b.n	800f954 <_svfiprintf_r+0x1c0>
 800f978:	080115e8 	.word	0x080115e8
 800f97c:	080115f2 	.word	0x080115f2
 800f980:	0800d565 	.word	0x0800d565
 800f984:	0800f6dd 	.word	0x0800f6dd
 800f988:	080115ee 	.word	0x080115ee

0800f98c <__sflush_r>:
 800f98c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f994:	0716      	lsls	r6, r2, #28
 800f996:	4605      	mov	r5, r0
 800f998:	460c      	mov	r4, r1
 800f99a:	d454      	bmi.n	800fa46 <__sflush_r+0xba>
 800f99c:	684b      	ldr	r3, [r1, #4]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	dc02      	bgt.n	800f9a8 <__sflush_r+0x1c>
 800f9a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	dd48      	ble.n	800fa3a <__sflush_r+0xae>
 800f9a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f9aa:	2e00      	cmp	r6, #0
 800f9ac:	d045      	beq.n	800fa3a <__sflush_r+0xae>
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f9b4:	682f      	ldr	r7, [r5, #0]
 800f9b6:	6a21      	ldr	r1, [r4, #32]
 800f9b8:	602b      	str	r3, [r5, #0]
 800f9ba:	d030      	beq.n	800fa1e <__sflush_r+0x92>
 800f9bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f9be:	89a3      	ldrh	r3, [r4, #12]
 800f9c0:	0759      	lsls	r1, r3, #29
 800f9c2:	d505      	bpl.n	800f9d0 <__sflush_r+0x44>
 800f9c4:	6863      	ldr	r3, [r4, #4]
 800f9c6:	1ad2      	subs	r2, r2, r3
 800f9c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f9ca:	b10b      	cbz	r3, 800f9d0 <__sflush_r+0x44>
 800f9cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f9ce:	1ad2      	subs	r2, r2, r3
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f9d4:	6a21      	ldr	r1, [r4, #32]
 800f9d6:	4628      	mov	r0, r5
 800f9d8:	47b0      	blx	r6
 800f9da:	1c43      	adds	r3, r0, #1
 800f9dc:	89a3      	ldrh	r3, [r4, #12]
 800f9de:	d106      	bne.n	800f9ee <__sflush_r+0x62>
 800f9e0:	6829      	ldr	r1, [r5, #0]
 800f9e2:	291d      	cmp	r1, #29
 800f9e4:	d82b      	bhi.n	800fa3e <__sflush_r+0xb2>
 800f9e6:	4a2a      	ldr	r2, [pc, #168]	@ (800fa90 <__sflush_r+0x104>)
 800f9e8:	410a      	asrs	r2, r1
 800f9ea:	07d6      	lsls	r6, r2, #31
 800f9ec:	d427      	bmi.n	800fa3e <__sflush_r+0xb2>
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	6062      	str	r2, [r4, #4]
 800f9f2:	04d9      	lsls	r1, r3, #19
 800f9f4:	6922      	ldr	r2, [r4, #16]
 800f9f6:	6022      	str	r2, [r4, #0]
 800f9f8:	d504      	bpl.n	800fa04 <__sflush_r+0x78>
 800f9fa:	1c42      	adds	r2, r0, #1
 800f9fc:	d101      	bne.n	800fa02 <__sflush_r+0x76>
 800f9fe:	682b      	ldr	r3, [r5, #0]
 800fa00:	b903      	cbnz	r3, 800fa04 <__sflush_r+0x78>
 800fa02:	6560      	str	r0, [r4, #84]	@ 0x54
 800fa04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa06:	602f      	str	r7, [r5, #0]
 800fa08:	b1b9      	cbz	r1, 800fa3a <__sflush_r+0xae>
 800fa0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa0e:	4299      	cmp	r1, r3
 800fa10:	d002      	beq.n	800fa18 <__sflush_r+0x8c>
 800fa12:	4628      	mov	r0, r5
 800fa14:	f7ff f9e0 	bl	800edd8 <_free_r>
 800fa18:	2300      	movs	r3, #0
 800fa1a:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa1c:	e00d      	b.n	800fa3a <__sflush_r+0xae>
 800fa1e:	2301      	movs	r3, #1
 800fa20:	4628      	mov	r0, r5
 800fa22:	47b0      	blx	r6
 800fa24:	4602      	mov	r2, r0
 800fa26:	1c50      	adds	r0, r2, #1
 800fa28:	d1c9      	bne.n	800f9be <__sflush_r+0x32>
 800fa2a:	682b      	ldr	r3, [r5, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d0c6      	beq.n	800f9be <__sflush_r+0x32>
 800fa30:	2b1d      	cmp	r3, #29
 800fa32:	d001      	beq.n	800fa38 <__sflush_r+0xac>
 800fa34:	2b16      	cmp	r3, #22
 800fa36:	d11e      	bne.n	800fa76 <__sflush_r+0xea>
 800fa38:	602f      	str	r7, [r5, #0]
 800fa3a:	2000      	movs	r0, #0
 800fa3c:	e022      	b.n	800fa84 <__sflush_r+0xf8>
 800fa3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa42:	b21b      	sxth	r3, r3
 800fa44:	e01b      	b.n	800fa7e <__sflush_r+0xf2>
 800fa46:	690f      	ldr	r7, [r1, #16]
 800fa48:	2f00      	cmp	r7, #0
 800fa4a:	d0f6      	beq.n	800fa3a <__sflush_r+0xae>
 800fa4c:	0793      	lsls	r3, r2, #30
 800fa4e:	680e      	ldr	r6, [r1, #0]
 800fa50:	bf08      	it	eq
 800fa52:	694b      	ldreq	r3, [r1, #20]
 800fa54:	600f      	str	r7, [r1, #0]
 800fa56:	bf18      	it	ne
 800fa58:	2300      	movne	r3, #0
 800fa5a:	eba6 0807 	sub.w	r8, r6, r7
 800fa5e:	608b      	str	r3, [r1, #8]
 800fa60:	f1b8 0f00 	cmp.w	r8, #0
 800fa64:	dde9      	ble.n	800fa3a <__sflush_r+0xae>
 800fa66:	6a21      	ldr	r1, [r4, #32]
 800fa68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fa6a:	4643      	mov	r3, r8
 800fa6c:	463a      	mov	r2, r7
 800fa6e:	4628      	mov	r0, r5
 800fa70:	47b0      	blx	r6
 800fa72:	2800      	cmp	r0, #0
 800fa74:	dc08      	bgt.n	800fa88 <__sflush_r+0xfc>
 800fa76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa7e:	81a3      	strh	r3, [r4, #12]
 800fa80:	f04f 30ff 	mov.w	r0, #4294967295
 800fa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa88:	4407      	add	r7, r0
 800fa8a:	eba8 0800 	sub.w	r8, r8, r0
 800fa8e:	e7e7      	b.n	800fa60 <__sflush_r+0xd4>
 800fa90:	dfbffffe 	.word	0xdfbffffe

0800fa94 <_fflush_r>:
 800fa94:	b538      	push	{r3, r4, r5, lr}
 800fa96:	690b      	ldr	r3, [r1, #16]
 800fa98:	4605      	mov	r5, r0
 800fa9a:	460c      	mov	r4, r1
 800fa9c:	b913      	cbnz	r3, 800faa4 <_fflush_r+0x10>
 800fa9e:	2500      	movs	r5, #0
 800faa0:	4628      	mov	r0, r5
 800faa2:	bd38      	pop	{r3, r4, r5, pc}
 800faa4:	b118      	cbz	r0, 800faae <_fflush_r+0x1a>
 800faa6:	6a03      	ldr	r3, [r0, #32]
 800faa8:	b90b      	cbnz	r3, 800faae <_fflush_r+0x1a>
 800faaa:	f7fe f99f 	bl	800ddec <__sinit>
 800faae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d0f3      	beq.n	800fa9e <_fflush_r+0xa>
 800fab6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fab8:	07d0      	lsls	r0, r2, #31
 800faba:	d404      	bmi.n	800fac6 <_fflush_r+0x32>
 800fabc:	0599      	lsls	r1, r3, #22
 800fabe:	d402      	bmi.n	800fac6 <_fflush_r+0x32>
 800fac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fac2:	f7fe fb24 	bl	800e10e <__retarget_lock_acquire_recursive>
 800fac6:	4628      	mov	r0, r5
 800fac8:	4621      	mov	r1, r4
 800faca:	f7ff ff5f 	bl	800f98c <__sflush_r>
 800face:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fad0:	07da      	lsls	r2, r3, #31
 800fad2:	4605      	mov	r5, r0
 800fad4:	d4e4      	bmi.n	800faa0 <_fflush_r+0xc>
 800fad6:	89a3      	ldrh	r3, [r4, #12]
 800fad8:	059b      	lsls	r3, r3, #22
 800fada:	d4e1      	bmi.n	800faa0 <_fflush_r+0xc>
 800fadc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fade:	f7fe fb17 	bl	800e110 <__retarget_lock_release_recursive>
 800fae2:	e7dd      	b.n	800faa0 <_fflush_r+0xc>

0800fae4 <memmove>:
 800fae4:	4288      	cmp	r0, r1
 800fae6:	b510      	push	{r4, lr}
 800fae8:	eb01 0402 	add.w	r4, r1, r2
 800faec:	d902      	bls.n	800faf4 <memmove+0x10>
 800faee:	4284      	cmp	r4, r0
 800faf0:	4623      	mov	r3, r4
 800faf2:	d807      	bhi.n	800fb04 <memmove+0x20>
 800faf4:	1e43      	subs	r3, r0, #1
 800faf6:	42a1      	cmp	r1, r4
 800faf8:	d008      	beq.n	800fb0c <memmove+0x28>
 800fafa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fafe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fb02:	e7f8      	b.n	800faf6 <memmove+0x12>
 800fb04:	4402      	add	r2, r0
 800fb06:	4601      	mov	r1, r0
 800fb08:	428a      	cmp	r2, r1
 800fb0a:	d100      	bne.n	800fb0e <memmove+0x2a>
 800fb0c:	bd10      	pop	{r4, pc}
 800fb0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fb16:	e7f7      	b.n	800fb08 <memmove+0x24>

0800fb18 <_sbrk_r>:
 800fb18:	b538      	push	{r3, r4, r5, lr}
 800fb1a:	4d06      	ldr	r5, [pc, #24]	@ (800fb34 <_sbrk_r+0x1c>)
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	4604      	mov	r4, r0
 800fb20:	4608      	mov	r0, r1
 800fb22:	602b      	str	r3, [r5, #0]
 800fb24:	f7f2 fd88 	bl	8002638 <_sbrk>
 800fb28:	1c43      	adds	r3, r0, #1
 800fb2a:	d102      	bne.n	800fb32 <_sbrk_r+0x1a>
 800fb2c:	682b      	ldr	r3, [r5, #0]
 800fb2e:	b103      	cbz	r3, 800fb32 <_sbrk_r+0x1a>
 800fb30:	6023      	str	r3, [r4, #0]
 800fb32:	bd38      	pop	{r3, r4, r5, pc}
 800fb34:	200079dc 	.word	0x200079dc

0800fb38 <__assert_func>:
 800fb38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb3a:	4614      	mov	r4, r2
 800fb3c:	461a      	mov	r2, r3
 800fb3e:	4b09      	ldr	r3, [pc, #36]	@ (800fb64 <__assert_func+0x2c>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	4605      	mov	r5, r0
 800fb44:	68d8      	ldr	r0, [r3, #12]
 800fb46:	b954      	cbnz	r4, 800fb5e <__assert_func+0x26>
 800fb48:	4b07      	ldr	r3, [pc, #28]	@ (800fb68 <__assert_func+0x30>)
 800fb4a:	461c      	mov	r4, r3
 800fb4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb50:	9100      	str	r1, [sp, #0]
 800fb52:	462b      	mov	r3, r5
 800fb54:	4905      	ldr	r1, [pc, #20]	@ (800fb6c <__assert_func+0x34>)
 800fb56:	f000 f86f 	bl	800fc38 <fiprintf>
 800fb5a:	f000 f87f 	bl	800fc5c <abort>
 800fb5e:	4b04      	ldr	r3, [pc, #16]	@ (800fb70 <__assert_func+0x38>)
 800fb60:	e7f4      	b.n	800fb4c <__assert_func+0x14>
 800fb62:	bf00      	nop
 800fb64:	20000428 	.word	0x20000428
 800fb68:	0801163e 	.word	0x0801163e
 800fb6c:	08011610 	.word	0x08011610
 800fb70:	08011603 	.word	0x08011603

0800fb74 <_calloc_r>:
 800fb74:	b570      	push	{r4, r5, r6, lr}
 800fb76:	fba1 5402 	umull	r5, r4, r1, r2
 800fb7a:	b93c      	cbnz	r4, 800fb8c <_calloc_r+0x18>
 800fb7c:	4629      	mov	r1, r5
 800fb7e:	f7ff f99f 	bl	800eec0 <_malloc_r>
 800fb82:	4606      	mov	r6, r0
 800fb84:	b928      	cbnz	r0, 800fb92 <_calloc_r+0x1e>
 800fb86:	2600      	movs	r6, #0
 800fb88:	4630      	mov	r0, r6
 800fb8a:	bd70      	pop	{r4, r5, r6, pc}
 800fb8c:	220c      	movs	r2, #12
 800fb8e:	6002      	str	r2, [r0, #0]
 800fb90:	e7f9      	b.n	800fb86 <_calloc_r+0x12>
 800fb92:	462a      	mov	r2, r5
 800fb94:	4621      	mov	r1, r4
 800fb96:	f7fe f9c2 	bl	800df1e <memset>
 800fb9a:	e7f5      	b.n	800fb88 <_calloc_r+0x14>

0800fb9c <__ascii_mbtowc>:
 800fb9c:	b082      	sub	sp, #8
 800fb9e:	b901      	cbnz	r1, 800fba2 <__ascii_mbtowc+0x6>
 800fba0:	a901      	add	r1, sp, #4
 800fba2:	b142      	cbz	r2, 800fbb6 <__ascii_mbtowc+0x1a>
 800fba4:	b14b      	cbz	r3, 800fbba <__ascii_mbtowc+0x1e>
 800fba6:	7813      	ldrb	r3, [r2, #0]
 800fba8:	600b      	str	r3, [r1, #0]
 800fbaa:	7812      	ldrb	r2, [r2, #0]
 800fbac:	1e10      	subs	r0, r2, #0
 800fbae:	bf18      	it	ne
 800fbb0:	2001      	movne	r0, #1
 800fbb2:	b002      	add	sp, #8
 800fbb4:	4770      	bx	lr
 800fbb6:	4610      	mov	r0, r2
 800fbb8:	e7fb      	b.n	800fbb2 <__ascii_mbtowc+0x16>
 800fbba:	f06f 0001 	mvn.w	r0, #1
 800fbbe:	e7f8      	b.n	800fbb2 <__ascii_mbtowc+0x16>

0800fbc0 <_realloc_r>:
 800fbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbc4:	4680      	mov	r8, r0
 800fbc6:	4615      	mov	r5, r2
 800fbc8:	460c      	mov	r4, r1
 800fbca:	b921      	cbnz	r1, 800fbd6 <_realloc_r+0x16>
 800fbcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd0:	4611      	mov	r1, r2
 800fbd2:	f7ff b975 	b.w	800eec0 <_malloc_r>
 800fbd6:	b92a      	cbnz	r2, 800fbe4 <_realloc_r+0x24>
 800fbd8:	f7ff f8fe 	bl	800edd8 <_free_r>
 800fbdc:	2400      	movs	r4, #0
 800fbde:	4620      	mov	r0, r4
 800fbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbe4:	f000 f841 	bl	800fc6a <_malloc_usable_size_r>
 800fbe8:	4285      	cmp	r5, r0
 800fbea:	4606      	mov	r6, r0
 800fbec:	d802      	bhi.n	800fbf4 <_realloc_r+0x34>
 800fbee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fbf2:	d8f4      	bhi.n	800fbde <_realloc_r+0x1e>
 800fbf4:	4629      	mov	r1, r5
 800fbf6:	4640      	mov	r0, r8
 800fbf8:	f7ff f962 	bl	800eec0 <_malloc_r>
 800fbfc:	4607      	mov	r7, r0
 800fbfe:	2800      	cmp	r0, #0
 800fc00:	d0ec      	beq.n	800fbdc <_realloc_r+0x1c>
 800fc02:	42b5      	cmp	r5, r6
 800fc04:	462a      	mov	r2, r5
 800fc06:	4621      	mov	r1, r4
 800fc08:	bf28      	it	cs
 800fc0a:	4632      	movcs	r2, r6
 800fc0c:	f7fe fa89 	bl	800e122 <memcpy>
 800fc10:	4621      	mov	r1, r4
 800fc12:	4640      	mov	r0, r8
 800fc14:	f7ff f8e0 	bl	800edd8 <_free_r>
 800fc18:	463c      	mov	r4, r7
 800fc1a:	e7e0      	b.n	800fbde <_realloc_r+0x1e>

0800fc1c <__ascii_wctomb>:
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	4608      	mov	r0, r1
 800fc20:	b141      	cbz	r1, 800fc34 <__ascii_wctomb+0x18>
 800fc22:	2aff      	cmp	r2, #255	@ 0xff
 800fc24:	d904      	bls.n	800fc30 <__ascii_wctomb+0x14>
 800fc26:	228a      	movs	r2, #138	@ 0x8a
 800fc28:	601a      	str	r2, [r3, #0]
 800fc2a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc2e:	4770      	bx	lr
 800fc30:	700a      	strb	r2, [r1, #0]
 800fc32:	2001      	movs	r0, #1
 800fc34:	4770      	bx	lr
	...

0800fc38 <fiprintf>:
 800fc38:	b40e      	push	{r1, r2, r3}
 800fc3a:	b503      	push	{r0, r1, lr}
 800fc3c:	4601      	mov	r1, r0
 800fc3e:	ab03      	add	r3, sp, #12
 800fc40:	4805      	ldr	r0, [pc, #20]	@ (800fc58 <fiprintf+0x20>)
 800fc42:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc46:	6800      	ldr	r0, [r0, #0]
 800fc48:	9301      	str	r3, [sp, #4]
 800fc4a:	f000 f83f 	bl	800fccc <_vfiprintf_r>
 800fc4e:	b002      	add	sp, #8
 800fc50:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc54:	b003      	add	sp, #12
 800fc56:	4770      	bx	lr
 800fc58:	20000428 	.word	0x20000428

0800fc5c <abort>:
 800fc5c:	b508      	push	{r3, lr}
 800fc5e:	2006      	movs	r0, #6
 800fc60:	f000 fa08 	bl	8010074 <raise>
 800fc64:	2001      	movs	r0, #1
 800fc66:	f7f2 fc6f 	bl	8002548 <_exit>

0800fc6a <_malloc_usable_size_r>:
 800fc6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc6e:	1f18      	subs	r0, r3, #4
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	bfbc      	itt	lt
 800fc74:	580b      	ldrlt	r3, [r1, r0]
 800fc76:	18c0      	addlt	r0, r0, r3
 800fc78:	4770      	bx	lr

0800fc7a <__sfputc_r>:
 800fc7a:	6893      	ldr	r3, [r2, #8]
 800fc7c:	3b01      	subs	r3, #1
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	b410      	push	{r4}
 800fc82:	6093      	str	r3, [r2, #8]
 800fc84:	da08      	bge.n	800fc98 <__sfputc_r+0x1e>
 800fc86:	6994      	ldr	r4, [r2, #24]
 800fc88:	42a3      	cmp	r3, r4
 800fc8a:	db01      	blt.n	800fc90 <__sfputc_r+0x16>
 800fc8c:	290a      	cmp	r1, #10
 800fc8e:	d103      	bne.n	800fc98 <__sfputc_r+0x1e>
 800fc90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc94:	f000 b932 	b.w	800fefc <__swbuf_r>
 800fc98:	6813      	ldr	r3, [r2, #0]
 800fc9a:	1c58      	adds	r0, r3, #1
 800fc9c:	6010      	str	r0, [r2, #0]
 800fc9e:	7019      	strb	r1, [r3, #0]
 800fca0:	4608      	mov	r0, r1
 800fca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fca6:	4770      	bx	lr

0800fca8 <__sfputs_r>:
 800fca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcaa:	4606      	mov	r6, r0
 800fcac:	460f      	mov	r7, r1
 800fcae:	4614      	mov	r4, r2
 800fcb0:	18d5      	adds	r5, r2, r3
 800fcb2:	42ac      	cmp	r4, r5
 800fcb4:	d101      	bne.n	800fcba <__sfputs_r+0x12>
 800fcb6:	2000      	movs	r0, #0
 800fcb8:	e007      	b.n	800fcca <__sfputs_r+0x22>
 800fcba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcbe:	463a      	mov	r2, r7
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	f7ff ffda 	bl	800fc7a <__sfputc_r>
 800fcc6:	1c43      	adds	r3, r0, #1
 800fcc8:	d1f3      	bne.n	800fcb2 <__sfputs_r+0xa>
 800fcca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fccc <_vfiprintf_r>:
 800fccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd0:	460d      	mov	r5, r1
 800fcd2:	b09d      	sub	sp, #116	@ 0x74
 800fcd4:	4614      	mov	r4, r2
 800fcd6:	4698      	mov	r8, r3
 800fcd8:	4606      	mov	r6, r0
 800fcda:	b118      	cbz	r0, 800fce4 <_vfiprintf_r+0x18>
 800fcdc:	6a03      	ldr	r3, [r0, #32]
 800fcde:	b90b      	cbnz	r3, 800fce4 <_vfiprintf_r+0x18>
 800fce0:	f7fe f884 	bl	800ddec <__sinit>
 800fce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fce6:	07d9      	lsls	r1, r3, #31
 800fce8:	d405      	bmi.n	800fcf6 <_vfiprintf_r+0x2a>
 800fcea:	89ab      	ldrh	r3, [r5, #12]
 800fcec:	059a      	lsls	r2, r3, #22
 800fcee:	d402      	bmi.n	800fcf6 <_vfiprintf_r+0x2a>
 800fcf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fcf2:	f7fe fa0c 	bl	800e10e <__retarget_lock_acquire_recursive>
 800fcf6:	89ab      	ldrh	r3, [r5, #12]
 800fcf8:	071b      	lsls	r3, r3, #28
 800fcfa:	d501      	bpl.n	800fd00 <_vfiprintf_r+0x34>
 800fcfc:	692b      	ldr	r3, [r5, #16]
 800fcfe:	b99b      	cbnz	r3, 800fd28 <_vfiprintf_r+0x5c>
 800fd00:	4629      	mov	r1, r5
 800fd02:	4630      	mov	r0, r6
 800fd04:	f000 f938 	bl	800ff78 <__swsetup_r>
 800fd08:	b170      	cbz	r0, 800fd28 <_vfiprintf_r+0x5c>
 800fd0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd0c:	07dc      	lsls	r4, r3, #31
 800fd0e:	d504      	bpl.n	800fd1a <_vfiprintf_r+0x4e>
 800fd10:	f04f 30ff 	mov.w	r0, #4294967295
 800fd14:	b01d      	add	sp, #116	@ 0x74
 800fd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd1a:	89ab      	ldrh	r3, [r5, #12]
 800fd1c:	0598      	lsls	r0, r3, #22
 800fd1e:	d4f7      	bmi.n	800fd10 <_vfiprintf_r+0x44>
 800fd20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd22:	f7fe f9f5 	bl	800e110 <__retarget_lock_release_recursive>
 800fd26:	e7f3      	b.n	800fd10 <_vfiprintf_r+0x44>
 800fd28:	2300      	movs	r3, #0
 800fd2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd2c:	2320      	movs	r3, #32
 800fd2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd32:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd36:	2330      	movs	r3, #48	@ 0x30
 800fd38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fee8 <_vfiprintf_r+0x21c>
 800fd3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fd40:	f04f 0901 	mov.w	r9, #1
 800fd44:	4623      	mov	r3, r4
 800fd46:	469a      	mov	sl, r3
 800fd48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd4c:	b10a      	cbz	r2, 800fd52 <_vfiprintf_r+0x86>
 800fd4e:	2a25      	cmp	r2, #37	@ 0x25
 800fd50:	d1f9      	bne.n	800fd46 <_vfiprintf_r+0x7a>
 800fd52:	ebba 0b04 	subs.w	fp, sl, r4
 800fd56:	d00b      	beq.n	800fd70 <_vfiprintf_r+0xa4>
 800fd58:	465b      	mov	r3, fp
 800fd5a:	4622      	mov	r2, r4
 800fd5c:	4629      	mov	r1, r5
 800fd5e:	4630      	mov	r0, r6
 800fd60:	f7ff ffa2 	bl	800fca8 <__sfputs_r>
 800fd64:	3001      	adds	r0, #1
 800fd66:	f000 80a7 	beq.w	800feb8 <_vfiprintf_r+0x1ec>
 800fd6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd6c:	445a      	add	r2, fp
 800fd6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd70:	f89a 3000 	ldrb.w	r3, [sl]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	f000 809f 	beq.w	800feb8 <_vfiprintf_r+0x1ec>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd84:	f10a 0a01 	add.w	sl, sl, #1
 800fd88:	9304      	str	r3, [sp, #16]
 800fd8a:	9307      	str	r3, [sp, #28]
 800fd8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd90:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd92:	4654      	mov	r4, sl
 800fd94:	2205      	movs	r2, #5
 800fd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd9a:	4853      	ldr	r0, [pc, #332]	@ (800fee8 <_vfiprintf_r+0x21c>)
 800fd9c:	f7f0 fa50 	bl	8000240 <memchr>
 800fda0:	9a04      	ldr	r2, [sp, #16]
 800fda2:	b9d8      	cbnz	r0, 800fddc <_vfiprintf_r+0x110>
 800fda4:	06d1      	lsls	r1, r2, #27
 800fda6:	bf44      	itt	mi
 800fda8:	2320      	movmi	r3, #32
 800fdaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fdae:	0713      	lsls	r3, r2, #28
 800fdb0:	bf44      	itt	mi
 800fdb2:	232b      	movmi	r3, #43	@ 0x2b
 800fdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fdb8:	f89a 3000 	ldrb.w	r3, [sl]
 800fdbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdbe:	d015      	beq.n	800fdec <_vfiprintf_r+0x120>
 800fdc0:	9a07      	ldr	r2, [sp, #28]
 800fdc2:	4654      	mov	r4, sl
 800fdc4:	2000      	movs	r0, #0
 800fdc6:	f04f 0c0a 	mov.w	ip, #10
 800fdca:	4621      	mov	r1, r4
 800fdcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdd0:	3b30      	subs	r3, #48	@ 0x30
 800fdd2:	2b09      	cmp	r3, #9
 800fdd4:	d94b      	bls.n	800fe6e <_vfiprintf_r+0x1a2>
 800fdd6:	b1b0      	cbz	r0, 800fe06 <_vfiprintf_r+0x13a>
 800fdd8:	9207      	str	r2, [sp, #28]
 800fdda:	e014      	b.n	800fe06 <_vfiprintf_r+0x13a>
 800fddc:	eba0 0308 	sub.w	r3, r0, r8
 800fde0:	fa09 f303 	lsl.w	r3, r9, r3
 800fde4:	4313      	orrs	r3, r2
 800fde6:	9304      	str	r3, [sp, #16]
 800fde8:	46a2      	mov	sl, r4
 800fdea:	e7d2      	b.n	800fd92 <_vfiprintf_r+0xc6>
 800fdec:	9b03      	ldr	r3, [sp, #12]
 800fdee:	1d19      	adds	r1, r3, #4
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	9103      	str	r1, [sp, #12]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	bfbb      	ittet	lt
 800fdf8:	425b      	neglt	r3, r3
 800fdfa:	f042 0202 	orrlt.w	r2, r2, #2
 800fdfe:	9307      	strge	r3, [sp, #28]
 800fe00:	9307      	strlt	r3, [sp, #28]
 800fe02:	bfb8      	it	lt
 800fe04:	9204      	strlt	r2, [sp, #16]
 800fe06:	7823      	ldrb	r3, [r4, #0]
 800fe08:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe0a:	d10a      	bne.n	800fe22 <_vfiprintf_r+0x156>
 800fe0c:	7863      	ldrb	r3, [r4, #1]
 800fe0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe10:	d132      	bne.n	800fe78 <_vfiprintf_r+0x1ac>
 800fe12:	9b03      	ldr	r3, [sp, #12]
 800fe14:	1d1a      	adds	r2, r3, #4
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	9203      	str	r2, [sp, #12]
 800fe1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe1e:	3402      	adds	r4, #2
 800fe20:	9305      	str	r3, [sp, #20]
 800fe22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fef8 <_vfiprintf_r+0x22c>
 800fe26:	7821      	ldrb	r1, [r4, #0]
 800fe28:	2203      	movs	r2, #3
 800fe2a:	4650      	mov	r0, sl
 800fe2c:	f7f0 fa08 	bl	8000240 <memchr>
 800fe30:	b138      	cbz	r0, 800fe42 <_vfiprintf_r+0x176>
 800fe32:	9b04      	ldr	r3, [sp, #16]
 800fe34:	eba0 000a 	sub.w	r0, r0, sl
 800fe38:	2240      	movs	r2, #64	@ 0x40
 800fe3a:	4082      	lsls	r2, r0
 800fe3c:	4313      	orrs	r3, r2
 800fe3e:	3401      	adds	r4, #1
 800fe40:	9304      	str	r3, [sp, #16]
 800fe42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe46:	4829      	ldr	r0, [pc, #164]	@ (800feec <_vfiprintf_r+0x220>)
 800fe48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe4c:	2206      	movs	r2, #6
 800fe4e:	f7f0 f9f7 	bl	8000240 <memchr>
 800fe52:	2800      	cmp	r0, #0
 800fe54:	d03f      	beq.n	800fed6 <_vfiprintf_r+0x20a>
 800fe56:	4b26      	ldr	r3, [pc, #152]	@ (800fef0 <_vfiprintf_r+0x224>)
 800fe58:	bb1b      	cbnz	r3, 800fea2 <_vfiprintf_r+0x1d6>
 800fe5a:	9b03      	ldr	r3, [sp, #12]
 800fe5c:	3307      	adds	r3, #7
 800fe5e:	f023 0307 	bic.w	r3, r3, #7
 800fe62:	3308      	adds	r3, #8
 800fe64:	9303      	str	r3, [sp, #12]
 800fe66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe68:	443b      	add	r3, r7
 800fe6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe6c:	e76a      	b.n	800fd44 <_vfiprintf_r+0x78>
 800fe6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe72:	460c      	mov	r4, r1
 800fe74:	2001      	movs	r0, #1
 800fe76:	e7a8      	b.n	800fdca <_vfiprintf_r+0xfe>
 800fe78:	2300      	movs	r3, #0
 800fe7a:	3401      	adds	r4, #1
 800fe7c:	9305      	str	r3, [sp, #20]
 800fe7e:	4619      	mov	r1, r3
 800fe80:	f04f 0c0a 	mov.w	ip, #10
 800fe84:	4620      	mov	r0, r4
 800fe86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe8a:	3a30      	subs	r2, #48	@ 0x30
 800fe8c:	2a09      	cmp	r2, #9
 800fe8e:	d903      	bls.n	800fe98 <_vfiprintf_r+0x1cc>
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d0c6      	beq.n	800fe22 <_vfiprintf_r+0x156>
 800fe94:	9105      	str	r1, [sp, #20]
 800fe96:	e7c4      	b.n	800fe22 <_vfiprintf_r+0x156>
 800fe98:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe9c:	4604      	mov	r4, r0
 800fe9e:	2301      	movs	r3, #1
 800fea0:	e7f0      	b.n	800fe84 <_vfiprintf_r+0x1b8>
 800fea2:	ab03      	add	r3, sp, #12
 800fea4:	9300      	str	r3, [sp, #0]
 800fea6:	462a      	mov	r2, r5
 800fea8:	4b12      	ldr	r3, [pc, #72]	@ (800fef4 <_vfiprintf_r+0x228>)
 800feaa:	a904      	add	r1, sp, #16
 800feac:	4630      	mov	r0, r6
 800feae:	f7fd fb59 	bl	800d564 <_printf_float>
 800feb2:	4607      	mov	r7, r0
 800feb4:	1c78      	adds	r0, r7, #1
 800feb6:	d1d6      	bne.n	800fe66 <_vfiprintf_r+0x19a>
 800feb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800feba:	07d9      	lsls	r1, r3, #31
 800febc:	d405      	bmi.n	800feca <_vfiprintf_r+0x1fe>
 800febe:	89ab      	ldrh	r3, [r5, #12]
 800fec0:	059a      	lsls	r2, r3, #22
 800fec2:	d402      	bmi.n	800feca <_vfiprintf_r+0x1fe>
 800fec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fec6:	f7fe f923 	bl	800e110 <__retarget_lock_release_recursive>
 800feca:	89ab      	ldrh	r3, [r5, #12]
 800fecc:	065b      	lsls	r3, r3, #25
 800fece:	f53f af1f 	bmi.w	800fd10 <_vfiprintf_r+0x44>
 800fed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fed4:	e71e      	b.n	800fd14 <_vfiprintf_r+0x48>
 800fed6:	ab03      	add	r3, sp, #12
 800fed8:	9300      	str	r3, [sp, #0]
 800feda:	462a      	mov	r2, r5
 800fedc:	4b05      	ldr	r3, [pc, #20]	@ (800fef4 <_vfiprintf_r+0x228>)
 800fede:	a904      	add	r1, sp, #16
 800fee0:	4630      	mov	r0, r6
 800fee2:	f7fd fdd7 	bl	800da94 <_printf_i>
 800fee6:	e7e4      	b.n	800feb2 <_vfiprintf_r+0x1e6>
 800fee8:	080115e8 	.word	0x080115e8
 800feec:	080115f2 	.word	0x080115f2
 800fef0:	0800d565 	.word	0x0800d565
 800fef4:	0800fca9 	.word	0x0800fca9
 800fef8:	080115ee 	.word	0x080115ee

0800fefc <__swbuf_r>:
 800fefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fefe:	460e      	mov	r6, r1
 800ff00:	4614      	mov	r4, r2
 800ff02:	4605      	mov	r5, r0
 800ff04:	b118      	cbz	r0, 800ff0e <__swbuf_r+0x12>
 800ff06:	6a03      	ldr	r3, [r0, #32]
 800ff08:	b90b      	cbnz	r3, 800ff0e <__swbuf_r+0x12>
 800ff0a:	f7fd ff6f 	bl	800ddec <__sinit>
 800ff0e:	69a3      	ldr	r3, [r4, #24]
 800ff10:	60a3      	str	r3, [r4, #8]
 800ff12:	89a3      	ldrh	r3, [r4, #12]
 800ff14:	071a      	lsls	r2, r3, #28
 800ff16:	d501      	bpl.n	800ff1c <__swbuf_r+0x20>
 800ff18:	6923      	ldr	r3, [r4, #16]
 800ff1a:	b943      	cbnz	r3, 800ff2e <__swbuf_r+0x32>
 800ff1c:	4621      	mov	r1, r4
 800ff1e:	4628      	mov	r0, r5
 800ff20:	f000 f82a 	bl	800ff78 <__swsetup_r>
 800ff24:	b118      	cbz	r0, 800ff2e <__swbuf_r+0x32>
 800ff26:	f04f 37ff 	mov.w	r7, #4294967295
 800ff2a:	4638      	mov	r0, r7
 800ff2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff2e:	6823      	ldr	r3, [r4, #0]
 800ff30:	6922      	ldr	r2, [r4, #16]
 800ff32:	1a98      	subs	r0, r3, r2
 800ff34:	6963      	ldr	r3, [r4, #20]
 800ff36:	b2f6      	uxtb	r6, r6
 800ff38:	4283      	cmp	r3, r0
 800ff3a:	4637      	mov	r7, r6
 800ff3c:	dc05      	bgt.n	800ff4a <__swbuf_r+0x4e>
 800ff3e:	4621      	mov	r1, r4
 800ff40:	4628      	mov	r0, r5
 800ff42:	f7ff fda7 	bl	800fa94 <_fflush_r>
 800ff46:	2800      	cmp	r0, #0
 800ff48:	d1ed      	bne.n	800ff26 <__swbuf_r+0x2a>
 800ff4a:	68a3      	ldr	r3, [r4, #8]
 800ff4c:	3b01      	subs	r3, #1
 800ff4e:	60a3      	str	r3, [r4, #8]
 800ff50:	6823      	ldr	r3, [r4, #0]
 800ff52:	1c5a      	adds	r2, r3, #1
 800ff54:	6022      	str	r2, [r4, #0]
 800ff56:	701e      	strb	r6, [r3, #0]
 800ff58:	6962      	ldr	r2, [r4, #20]
 800ff5a:	1c43      	adds	r3, r0, #1
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d004      	beq.n	800ff6a <__swbuf_r+0x6e>
 800ff60:	89a3      	ldrh	r3, [r4, #12]
 800ff62:	07db      	lsls	r3, r3, #31
 800ff64:	d5e1      	bpl.n	800ff2a <__swbuf_r+0x2e>
 800ff66:	2e0a      	cmp	r6, #10
 800ff68:	d1df      	bne.n	800ff2a <__swbuf_r+0x2e>
 800ff6a:	4621      	mov	r1, r4
 800ff6c:	4628      	mov	r0, r5
 800ff6e:	f7ff fd91 	bl	800fa94 <_fflush_r>
 800ff72:	2800      	cmp	r0, #0
 800ff74:	d0d9      	beq.n	800ff2a <__swbuf_r+0x2e>
 800ff76:	e7d6      	b.n	800ff26 <__swbuf_r+0x2a>

0800ff78 <__swsetup_r>:
 800ff78:	b538      	push	{r3, r4, r5, lr}
 800ff7a:	4b29      	ldr	r3, [pc, #164]	@ (8010020 <__swsetup_r+0xa8>)
 800ff7c:	4605      	mov	r5, r0
 800ff7e:	6818      	ldr	r0, [r3, #0]
 800ff80:	460c      	mov	r4, r1
 800ff82:	b118      	cbz	r0, 800ff8c <__swsetup_r+0x14>
 800ff84:	6a03      	ldr	r3, [r0, #32]
 800ff86:	b90b      	cbnz	r3, 800ff8c <__swsetup_r+0x14>
 800ff88:	f7fd ff30 	bl	800ddec <__sinit>
 800ff8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff90:	0719      	lsls	r1, r3, #28
 800ff92:	d422      	bmi.n	800ffda <__swsetup_r+0x62>
 800ff94:	06da      	lsls	r2, r3, #27
 800ff96:	d407      	bmi.n	800ffa8 <__swsetup_r+0x30>
 800ff98:	2209      	movs	r2, #9
 800ff9a:	602a      	str	r2, [r5, #0]
 800ff9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffa0:	81a3      	strh	r3, [r4, #12]
 800ffa2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa6:	e033      	b.n	8010010 <__swsetup_r+0x98>
 800ffa8:	0758      	lsls	r0, r3, #29
 800ffaa:	d512      	bpl.n	800ffd2 <__swsetup_r+0x5a>
 800ffac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ffae:	b141      	cbz	r1, 800ffc2 <__swsetup_r+0x4a>
 800ffb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ffb4:	4299      	cmp	r1, r3
 800ffb6:	d002      	beq.n	800ffbe <__swsetup_r+0x46>
 800ffb8:	4628      	mov	r0, r5
 800ffba:	f7fe ff0d 	bl	800edd8 <_free_r>
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800ffc2:	89a3      	ldrh	r3, [r4, #12]
 800ffc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ffc8:	81a3      	strh	r3, [r4, #12]
 800ffca:	2300      	movs	r3, #0
 800ffcc:	6063      	str	r3, [r4, #4]
 800ffce:	6923      	ldr	r3, [r4, #16]
 800ffd0:	6023      	str	r3, [r4, #0]
 800ffd2:	89a3      	ldrh	r3, [r4, #12]
 800ffd4:	f043 0308 	orr.w	r3, r3, #8
 800ffd8:	81a3      	strh	r3, [r4, #12]
 800ffda:	6923      	ldr	r3, [r4, #16]
 800ffdc:	b94b      	cbnz	r3, 800fff2 <__swsetup_r+0x7a>
 800ffde:	89a3      	ldrh	r3, [r4, #12]
 800ffe0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ffe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ffe8:	d003      	beq.n	800fff2 <__swsetup_r+0x7a>
 800ffea:	4621      	mov	r1, r4
 800ffec:	4628      	mov	r0, r5
 800ffee:	f000 f883 	bl	80100f8 <__smakebuf_r>
 800fff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fff6:	f013 0201 	ands.w	r2, r3, #1
 800fffa:	d00a      	beq.n	8010012 <__swsetup_r+0x9a>
 800fffc:	2200      	movs	r2, #0
 800fffe:	60a2      	str	r2, [r4, #8]
 8010000:	6962      	ldr	r2, [r4, #20]
 8010002:	4252      	negs	r2, r2
 8010004:	61a2      	str	r2, [r4, #24]
 8010006:	6922      	ldr	r2, [r4, #16]
 8010008:	b942      	cbnz	r2, 801001c <__swsetup_r+0xa4>
 801000a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801000e:	d1c5      	bne.n	800ff9c <__swsetup_r+0x24>
 8010010:	bd38      	pop	{r3, r4, r5, pc}
 8010012:	0799      	lsls	r1, r3, #30
 8010014:	bf58      	it	pl
 8010016:	6962      	ldrpl	r2, [r4, #20]
 8010018:	60a2      	str	r2, [r4, #8]
 801001a:	e7f4      	b.n	8010006 <__swsetup_r+0x8e>
 801001c:	2000      	movs	r0, #0
 801001e:	e7f7      	b.n	8010010 <__swsetup_r+0x98>
 8010020:	20000428 	.word	0x20000428

08010024 <_raise_r>:
 8010024:	291f      	cmp	r1, #31
 8010026:	b538      	push	{r3, r4, r5, lr}
 8010028:	4605      	mov	r5, r0
 801002a:	460c      	mov	r4, r1
 801002c:	d904      	bls.n	8010038 <_raise_r+0x14>
 801002e:	2316      	movs	r3, #22
 8010030:	6003      	str	r3, [r0, #0]
 8010032:	f04f 30ff 	mov.w	r0, #4294967295
 8010036:	bd38      	pop	{r3, r4, r5, pc}
 8010038:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801003a:	b112      	cbz	r2, 8010042 <_raise_r+0x1e>
 801003c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010040:	b94b      	cbnz	r3, 8010056 <_raise_r+0x32>
 8010042:	4628      	mov	r0, r5
 8010044:	f000 f830 	bl	80100a8 <_getpid_r>
 8010048:	4622      	mov	r2, r4
 801004a:	4601      	mov	r1, r0
 801004c:	4628      	mov	r0, r5
 801004e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010052:	f000 b817 	b.w	8010084 <_kill_r>
 8010056:	2b01      	cmp	r3, #1
 8010058:	d00a      	beq.n	8010070 <_raise_r+0x4c>
 801005a:	1c59      	adds	r1, r3, #1
 801005c:	d103      	bne.n	8010066 <_raise_r+0x42>
 801005e:	2316      	movs	r3, #22
 8010060:	6003      	str	r3, [r0, #0]
 8010062:	2001      	movs	r0, #1
 8010064:	e7e7      	b.n	8010036 <_raise_r+0x12>
 8010066:	2100      	movs	r1, #0
 8010068:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801006c:	4620      	mov	r0, r4
 801006e:	4798      	blx	r3
 8010070:	2000      	movs	r0, #0
 8010072:	e7e0      	b.n	8010036 <_raise_r+0x12>

08010074 <raise>:
 8010074:	4b02      	ldr	r3, [pc, #8]	@ (8010080 <raise+0xc>)
 8010076:	4601      	mov	r1, r0
 8010078:	6818      	ldr	r0, [r3, #0]
 801007a:	f7ff bfd3 	b.w	8010024 <_raise_r>
 801007e:	bf00      	nop
 8010080:	20000428 	.word	0x20000428

08010084 <_kill_r>:
 8010084:	b538      	push	{r3, r4, r5, lr}
 8010086:	4d07      	ldr	r5, [pc, #28]	@ (80100a4 <_kill_r+0x20>)
 8010088:	2300      	movs	r3, #0
 801008a:	4604      	mov	r4, r0
 801008c:	4608      	mov	r0, r1
 801008e:	4611      	mov	r1, r2
 8010090:	602b      	str	r3, [r5, #0]
 8010092:	f7f2 fa49 	bl	8002528 <_kill>
 8010096:	1c43      	adds	r3, r0, #1
 8010098:	d102      	bne.n	80100a0 <_kill_r+0x1c>
 801009a:	682b      	ldr	r3, [r5, #0]
 801009c:	b103      	cbz	r3, 80100a0 <_kill_r+0x1c>
 801009e:	6023      	str	r3, [r4, #0]
 80100a0:	bd38      	pop	{r3, r4, r5, pc}
 80100a2:	bf00      	nop
 80100a4:	200079dc 	.word	0x200079dc

080100a8 <_getpid_r>:
 80100a8:	f7f2 ba36 	b.w	8002518 <_getpid>

080100ac <__swhatbuf_r>:
 80100ac:	b570      	push	{r4, r5, r6, lr}
 80100ae:	460c      	mov	r4, r1
 80100b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100b4:	2900      	cmp	r1, #0
 80100b6:	b096      	sub	sp, #88	@ 0x58
 80100b8:	4615      	mov	r5, r2
 80100ba:	461e      	mov	r6, r3
 80100bc:	da0d      	bge.n	80100da <__swhatbuf_r+0x2e>
 80100be:	89a3      	ldrh	r3, [r4, #12]
 80100c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80100c4:	f04f 0100 	mov.w	r1, #0
 80100c8:	bf14      	ite	ne
 80100ca:	2340      	movne	r3, #64	@ 0x40
 80100cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80100d0:	2000      	movs	r0, #0
 80100d2:	6031      	str	r1, [r6, #0]
 80100d4:	602b      	str	r3, [r5, #0]
 80100d6:	b016      	add	sp, #88	@ 0x58
 80100d8:	bd70      	pop	{r4, r5, r6, pc}
 80100da:	466a      	mov	r2, sp
 80100dc:	f000 f848 	bl	8010170 <_fstat_r>
 80100e0:	2800      	cmp	r0, #0
 80100e2:	dbec      	blt.n	80100be <__swhatbuf_r+0x12>
 80100e4:	9901      	ldr	r1, [sp, #4]
 80100e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80100ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80100ee:	4259      	negs	r1, r3
 80100f0:	4159      	adcs	r1, r3
 80100f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80100f6:	e7eb      	b.n	80100d0 <__swhatbuf_r+0x24>

080100f8 <__smakebuf_r>:
 80100f8:	898b      	ldrh	r3, [r1, #12]
 80100fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100fc:	079d      	lsls	r5, r3, #30
 80100fe:	4606      	mov	r6, r0
 8010100:	460c      	mov	r4, r1
 8010102:	d507      	bpl.n	8010114 <__smakebuf_r+0x1c>
 8010104:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010108:	6023      	str	r3, [r4, #0]
 801010a:	6123      	str	r3, [r4, #16]
 801010c:	2301      	movs	r3, #1
 801010e:	6163      	str	r3, [r4, #20]
 8010110:	b003      	add	sp, #12
 8010112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010114:	ab01      	add	r3, sp, #4
 8010116:	466a      	mov	r2, sp
 8010118:	f7ff ffc8 	bl	80100ac <__swhatbuf_r>
 801011c:	9f00      	ldr	r7, [sp, #0]
 801011e:	4605      	mov	r5, r0
 8010120:	4639      	mov	r1, r7
 8010122:	4630      	mov	r0, r6
 8010124:	f7fe fecc 	bl	800eec0 <_malloc_r>
 8010128:	b948      	cbnz	r0, 801013e <__smakebuf_r+0x46>
 801012a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801012e:	059a      	lsls	r2, r3, #22
 8010130:	d4ee      	bmi.n	8010110 <__smakebuf_r+0x18>
 8010132:	f023 0303 	bic.w	r3, r3, #3
 8010136:	f043 0302 	orr.w	r3, r3, #2
 801013a:	81a3      	strh	r3, [r4, #12]
 801013c:	e7e2      	b.n	8010104 <__smakebuf_r+0xc>
 801013e:	89a3      	ldrh	r3, [r4, #12]
 8010140:	6020      	str	r0, [r4, #0]
 8010142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010146:	81a3      	strh	r3, [r4, #12]
 8010148:	9b01      	ldr	r3, [sp, #4]
 801014a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801014e:	b15b      	cbz	r3, 8010168 <__smakebuf_r+0x70>
 8010150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010154:	4630      	mov	r0, r6
 8010156:	f000 f81d 	bl	8010194 <_isatty_r>
 801015a:	b128      	cbz	r0, 8010168 <__smakebuf_r+0x70>
 801015c:	89a3      	ldrh	r3, [r4, #12]
 801015e:	f023 0303 	bic.w	r3, r3, #3
 8010162:	f043 0301 	orr.w	r3, r3, #1
 8010166:	81a3      	strh	r3, [r4, #12]
 8010168:	89a3      	ldrh	r3, [r4, #12]
 801016a:	431d      	orrs	r5, r3
 801016c:	81a5      	strh	r5, [r4, #12]
 801016e:	e7cf      	b.n	8010110 <__smakebuf_r+0x18>

08010170 <_fstat_r>:
 8010170:	b538      	push	{r3, r4, r5, lr}
 8010172:	4d07      	ldr	r5, [pc, #28]	@ (8010190 <_fstat_r+0x20>)
 8010174:	2300      	movs	r3, #0
 8010176:	4604      	mov	r4, r0
 8010178:	4608      	mov	r0, r1
 801017a:	4611      	mov	r1, r2
 801017c:	602b      	str	r3, [r5, #0]
 801017e:	f7f2 fa33 	bl	80025e8 <_fstat>
 8010182:	1c43      	adds	r3, r0, #1
 8010184:	d102      	bne.n	801018c <_fstat_r+0x1c>
 8010186:	682b      	ldr	r3, [r5, #0]
 8010188:	b103      	cbz	r3, 801018c <_fstat_r+0x1c>
 801018a:	6023      	str	r3, [r4, #0]
 801018c:	bd38      	pop	{r3, r4, r5, pc}
 801018e:	bf00      	nop
 8010190:	200079dc 	.word	0x200079dc

08010194 <_isatty_r>:
 8010194:	b538      	push	{r3, r4, r5, lr}
 8010196:	4d06      	ldr	r5, [pc, #24]	@ (80101b0 <_isatty_r+0x1c>)
 8010198:	2300      	movs	r3, #0
 801019a:	4604      	mov	r4, r0
 801019c:	4608      	mov	r0, r1
 801019e:	602b      	str	r3, [r5, #0]
 80101a0:	f7f2 fa32 	bl	8002608 <_isatty>
 80101a4:	1c43      	adds	r3, r0, #1
 80101a6:	d102      	bne.n	80101ae <_isatty_r+0x1a>
 80101a8:	682b      	ldr	r3, [r5, #0]
 80101aa:	b103      	cbz	r3, 80101ae <_isatty_r+0x1a>
 80101ac:	6023      	str	r3, [r4, #0]
 80101ae:	bd38      	pop	{r3, r4, r5, pc}
 80101b0:	200079dc 	.word	0x200079dc

080101b4 <atan2f>:
 80101b4:	f000 b822 	b.w	80101fc <__ieee754_atan2f>

080101b8 <sqrtf>:
 80101b8:	b508      	push	{r3, lr}
 80101ba:	ed2d 8b02 	vpush	{d8}
 80101be:	eeb0 8a40 	vmov.f32	s16, s0
 80101c2:	f000 f817 	bl	80101f4 <__ieee754_sqrtf>
 80101c6:	eeb4 8a48 	vcmp.f32	s16, s16
 80101ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ce:	d60c      	bvs.n	80101ea <sqrtf+0x32>
 80101d0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80101f0 <sqrtf+0x38>
 80101d4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80101d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101dc:	d505      	bpl.n	80101ea <sqrtf+0x32>
 80101de:	f7fd ff6b 	bl	800e0b8 <__errno>
 80101e2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80101e6:	2321      	movs	r3, #33	@ 0x21
 80101e8:	6003      	str	r3, [r0, #0]
 80101ea:	ecbd 8b02 	vpop	{d8}
 80101ee:	bd08      	pop	{r3, pc}
 80101f0:	00000000 	.word	0x00000000

080101f4 <__ieee754_sqrtf>:
 80101f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80101f8:	4770      	bx	lr
	...

080101fc <__ieee754_atan2f>:
 80101fc:	ee10 2a90 	vmov	r2, s1
 8010200:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8010204:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010208:	b510      	push	{r4, lr}
 801020a:	eef0 7a40 	vmov.f32	s15, s0
 801020e:	d806      	bhi.n	801021e <__ieee754_atan2f+0x22>
 8010210:	ee10 0a10 	vmov	r0, s0
 8010214:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010218:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801021c:	d904      	bls.n	8010228 <__ieee754_atan2f+0x2c>
 801021e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010222:	eeb0 0a67 	vmov.f32	s0, s15
 8010226:	bd10      	pop	{r4, pc}
 8010228:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801022c:	d103      	bne.n	8010236 <__ieee754_atan2f+0x3a>
 801022e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010232:	f000 b883 	b.w	801033c <atanf>
 8010236:	1794      	asrs	r4, r2, #30
 8010238:	f004 0402 	and.w	r4, r4, #2
 801023c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010240:	b943      	cbnz	r3, 8010254 <__ieee754_atan2f+0x58>
 8010242:	2c02      	cmp	r4, #2
 8010244:	d05e      	beq.n	8010304 <__ieee754_atan2f+0x108>
 8010246:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010318 <__ieee754_atan2f+0x11c>
 801024a:	2c03      	cmp	r4, #3
 801024c:	bf08      	it	eq
 801024e:	eef0 7a47 	vmoveq.f32	s15, s14
 8010252:	e7e6      	b.n	8010222 <__ieee754_atan2f+0x26>
 8010254:	b941      	cbnz	r1, 8010268 <__ieee754_atan2f+0x6c>
 8010256:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801031c <__ieee754_atan2f+0x120>
 801025a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010320 <__ieee754_atan2f+0x124>
 801025e:	2800      	cmp	r0, #0
 8010260:	bfb8      	it	lt
 8010262:	eef0 7a47 	vmovlt.f32	s15, s14
 8010266:	e7dc      	b.n	8010222 <__ieee754_atan2f+0x26>
 8010268:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801026c:	d110      	bne.n	8010290 <__ieee754_atan2f+0x94>
 801026e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010272:	f104 34ff 	add.w	r4, r4, #4294967295
 8010276:	d107      	bne.n	8010288 <__ieee754_atan2f+0x8c>
 8010278:	2c02      	cmp	r4, #2
 801027a:	d846      	bhi.n	801030a <__ieee754_atan2f+0x10e>
 801027c:	4b29      	ldr	r3, [pc, #164]	@ (8010324 <__ieee754_atan2f+0x128>)
 801027e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010282:	edd3 7a00 	vldr	s15, [r3]
 8010286:	e7cc      	b.n	8010222 <__ieee754_atan2f+0x26>
 8010288:	2c02      	cmp	r4, #2
 801028a:	d841      	bhi.n	8010310 <__ieee754_atan2f+0x114>
 801028c:	4b26      	ldr	r3, [pc, #152]	@ (8010328 <__ieee754_atan2f+0x12c>)
 801028e:	e7f6      	b.n	801027e <__ieee754_atan2f+0x82>
 8010290:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010294:	d0df      	beq.n	8010256 <__ieee754_atan2f+0x5a>
 8010296:	1a5b      	subs	r3, r3, r1
 8010298:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801029c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80102a0:	da1a      	bge.n	80102d8 <__ieee754_atan2f+0xdc>
 80102a2:	2a00      	cmp	r2, #0
 80102a4:	da01      	bge.n	80102aa <__ieee754_atan2f+0xae>
 80102a6:	313c      	adds	r1, #60	@ 0x3c
 80102a8:	db19      	blt.n	80102de <__ieee754_atan2f+0xe2>
 80102aa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80102ae:	f000 f919 	bl	80104e4 <fabsf>
 80102b2:	f000 f843 	bl	801033c <atanf>
 80102b6:	eef0 7a40 	vmov.f32	s15, s0
 80102ba:	2c01      	cmp	r4, #1
 80102bc:	d012      	beq.n	80102e4 <__ieee754_atan2f+0xe8>
 80102be:	2c02      	cmp	r4, #2
 80102c0:	d017      	beq.n	80102f2 <__ieee754_atan2f+0xf6>
 80102c2:	2c00      	cmp	r4, #0
 80102c4:	d0ad      	beq.n	8010222 <__ieee754_atan2f+0x26>
 80102c6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801032c <__ieee754_atan2f+0x130>
 80102ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102ce:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8010330 <__ieee754_atan2f+0x134>
 80102d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80102d6:	e7a4      	b.n	8010222 <__ieee754_atan2f+0x26>
 80102d8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801031c <__ieee754_atan2f+0x120>
 80102dc:	e7ed      	b.n	80102ba <__ieee754_atan2f+0xbe>
 80102de:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010334 <__ieee754_atan2f+0x138>
 80102e2:	e7ea      	b.n	80102ba <__ieee754_atan2f+0xbe>
 80102e4:	ee17 3a90 	vmov	r3, s15
 80102e8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80102ec:	ee07 3a90 	vmov	s15, r3
 80102f0:	e797      	b.n	8010222 <__ieee754_atan2f+0x26>
 80102f2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801032c <__ieee754_atan2f+0x130>
 80102f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102fa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8010330 <__ieee754_atan2f+0x134>
 80102fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010302:	e78e      	b.n	8010222 <__ieee754_atan2f+0x26>
 8010304:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010330 <__ieee754_atan2f+0x134>
 8010308:	e78b      	b.n	8010222 <__ieee754_atan2f+0x26>
 801030a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8010338 <__ieee754_atan2f+0x13c>
 801030e:	e788      	b.n	8010222 <__ieee754_atan2f+0x26>
 8010310:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010334 <__ieee754_atan2f+0x138>
 8010314:	e785      	b.n	8010222 <__ieee754_atan2f+0x26>
 8010316:	bf00      	nop
 8010318:	c0490fdb 	.word	0xc0490fdb
 801031c:	3fc90fdb 	.word	0x3fc90fdb
 8010320:	bfc90fdb 	.word	0xbfc90fdb
 8010324:	0801174c 	.word	0x0801174c
 8010328:	08011740 	.word	0x08011740
 801032c:	33bbbd2e 	.word	0x33bbbd2e
 8010330:	40490fdb 	.word	0x40490fdb
 8010334:	00000000 	.word	0x00000000
 8010338:	3f490fdb 	.word	0x3f490fdb

0801033c <atanf>:
 801033c:	b538      	push	{r3, r4, r5, lr}
 801033e:	ee10 5a10 	vmov	r5, s0
 8010342:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010346:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801034a:	eef0 7a40 	vmov.f32	s15, s0
 801034e:	d310      	bcc.n	8010372 <atanf+0x36>
 8010350:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8010354:	d904      	bls.n	8010360 <atanf+0x24>
 8010356:	ee70 7a00 	vadd.f32	s15, s0, s0
 801035a:	eeb0 0a67 	vmov.f32	s0, s15
 801035e:	bd38      	pop	{r3, r4, r5, pc}
 8010360:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8010498 <atanf+0x15c>
 8010364:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801049c <atanf+0x160>
 8010368:	2d00      	cmp	r5, #0
 801036a:	bfc8      	it	gt
 801036c:	eef0 7a47 	vmovgt.f32	s15, s14
 8010370:	e7f3      	b.n	801035a <atanf+0x1e>
 8010372:	4b4b      	ldr	r3, [pc, #300]	@ (80104a0 <atanf+0x164>)
 8010374:	429c      	cmp	r4, r3
 8010376:	d810      	bhi.n	801039a <atanf+0x5e>
 8010378:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801037c:	d20a      	bcs.n	8010394 <atanf+0x58>
 801037e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80104a4 <atanf+0x168>
 8010382:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801038a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801038e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010392:	dce2      	bgt.n	801035a <atanf+0x1e>
 8010394:	f04f 33ff 	mov.w	r3, #4294967295
 8010398:	e013      	b.n	80103c2 <atanf+0x86>
 801039a:	f000 f8a3 	bl	80104e4 <fabsf>
 801039e:	4b42      	ldr	r3, [pc, #264]	@ (80104a8 <atanf+0x16c>)
 80103a0:	429c      	cmp	r4, r3
 80103a2:	d84f      	bhi.n	8010444 <atanf+0x108>
 80103a4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80103a8:	429c      	cmp	r4, r3
 80103aa:	d841      	bhi.n	8010430 <atanf+0xf4>
 80103ac:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80103b0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80103b4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80103b8:	2300      	movs	r3, #0
 80103ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80103be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80103c2:	1c5a      	adds	r2, r3, #1
 80103c4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80103c8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80104ac <atanf+0x170>
 80103cc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80104b0 <atanf+0x174>
 80103d0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80104b4 <atanf+0x178>
 80103d4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80103d8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80103dc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80104b8 <atanf+0x17c>
 80103e0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80103e4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80104bc <atanf+0x180>
 80103e8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80103ec:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80104c0 <atanf+0x184>
 80103f0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80103f4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80104c4 <atanf+0x188>
 80103f8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80103fc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80104c8 <atanf+0x18c>
 8010400:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010404:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80104cc <atanf+0x190>
 8010408:	eea5 7a26 	vfma.f32	s14, s10, s13
 801040c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80104d0 <atanf+0x194>
 8010410:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010414:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80104d4 <atanf+0x198>
 8010418:	eea5 7a26 	vfma.f32	s14, s10, s13
 801041c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010420:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010424:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010428:	d121      	bne.n	801046e <atanf+0x132>
 801042a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801042e:	e794      	b.n	801035a <atanf+0x1e>
 8010430:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010434:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010438:	ee30 0a27 	vadd.f32	s0, s0, s15
 801043c:	2301      	movs	r3, #1
 801043e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010442:	e7be      	b.n	80103c2 <atanf+0x86>
 8010444:	4b24      	ldr	r3, [pc, #144]	@ (80104d8 <atanf+0x19c>)
 8010446:	429c      	cmp	r4, r3
 8010448:	d80b      	bhi.n	8010462 <atanf+0x126>
 801044a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801044e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010452:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010456:	2302      	movs	r3, #2
 8010458:	ee70 6a67 	vsub.f32	s13, s0, s15
 801045c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010460:	e7af      	b.n	80103c2 <atanf+0x86>
 8010462:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010466:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801046a:	2303      	movs	r3, #3
 801046c:	e7a9      	b.n	80103c2 <atanf+0x86>
 801046e:	4a1b      	ldr	r2, [pc, #108]	@ (80104dc <atanf+0x1a0>)
 8010470:	491b      	ldr	r1, [pc, #108]	@ (80104e0 <atanf+0x1a4>)
 8010472:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010476:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801047a:	edd3 6a00 	vldr	s13, [r3]
 801047e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010482:	2d00      	cmp	r5, #0
 8010484:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010488:	edd2 7a00 	vldr	s15, [r2]
 801048c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010490:	bfb8      	it	lt
 8010492:	eef1 7a67 	vneglt.f32	s15, s15
 8010496:	e760      	b.n	801035a <atanf+0x1e>
 8010498:	bfc90fdb 	.word	0xbfc90fdb
 801049c:	3fc90fdb 	.word	0x3fc90fdb
 80104a0:	3edfffff 	.word	0x3edfffff
 80104a4:	7149f2ca 	.word	0x7149f2ca
 80104a8:	3f97ffff 	.word	0x3f97ffff
 80104ac:	3c8569d7 	.word	0x3c8569d7
 80104b0:	3d4bda59 	.word	0x3d4bda59
 80104b4:	bd6ef16b 	.word	0xbd6ef16b
 80104b8:	3d886b35 	.word	0x3d886b35
 80104bc:	3dba2e6e 	.word	0x3dba2e6e
 80104c0:	3e124925 	.word	0x3e124925
 80104c4:	3eaaaaab 	.word	0x3eaaaaab
 80104c8:	bd15a221 	.word	0xbd15a221
 80104cc:	bd9d8795 	.word	0xbd9d8795
 80104d0:	bde38e38 	.word	0xbde38e38
 80104d4:	be4ccccd 	.word	0xbe4ccccd
 80104d8:	401bffff 	.word	0x401bffff
 80104dc:	08011768 	.word	0x08011768
 80104e0:	08011758 	.word	0x08011758

080104e4 <fabsf>:
 80104e4:	ee10 3a10 	vmov	r3, s0
 80104e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80104ec:	ee00 3a10 	vmov	s0, r3
 80104f0:	4770      	bx	lr
	...

080104f4 <_init>:
 80104f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104f6:	bf00      	nop
 80104f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104fa:	bc08      	pop	{r3}
 80104fc:	469e      	mov	lr, r3
 80104fe:	4770      	bx	lr

08010500 <_fini>:
 8010500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010502:	bf00      	nop
 8010504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010506:	bc08      	pop	{r3}
 8010508:	469e      	mov	lr, r3
 801050a:	4770      	bx	lr
