
embarcados_aula_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e564  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010f8  0800e748  0800e748  0000f748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f840  0800f840  000115d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f840  0800f840  00010840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f848  0800f848  000115d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f848  0800f848  00010848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f84c  0800f84c  0001084c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005d8  20000000  0800f850  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000735c  200005d8  0800fe28  000115d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007934  0800fe28  00011934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000115d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029fda  00000000  00000000  00011608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005462  00000000  00000000  0003b5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e58  00000000  00000000  00040a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016cc  00000000  00000000  000428a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fbe  00000000  00000000  00043f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023cb7  00000000  00000000  00065f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb414  00000000  00000000  00089be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00174ff5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009108  00000000  00000000  001750b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0017e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a3a  00000000  00000000  0017e22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000138  00000000  00000000  00180c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200005d8 	.word	0x200005d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e72c 	.word	0x0800e72c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200005dc 	.word	0x200005dc
 800021c:	0800e72c 	.word	0x0800e72c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
return 0;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Essas funções são utilizadas dentro das interrupções */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
    char data = huart->Instance->RDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	72fb      	strb	r3, [r7, #11]
    xQueueSendFromISR(uart_rx_q, &data, &pxHigherPriorityTaskWoken);
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <HAL_UART_RxCpltCallback+0x48>)
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	f107 020c 	add.w	r2, r7, #12
 8000fc6:	f107 010b 	add.w	r1, r7, #11
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f007 fd2c 	bl	8008a28 <xQueueGenericSendFromISR>
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <HAL_UART_RxCpltCallback+0x3e>
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <HAL_UART_RxCpltCallback+0x4c>)
 8000fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	f3bf 8f4f 	dsb	sy
 8000fe2:	f3bf 8f6f 	isb	sy
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200008cc 	.word	0x200008cc
 8000ff4:	e000ed04 	.word	0xe000ed04

08000ff8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
    xSemaphoreGiveFromISR(sem_tx_uart, &pxHigherPriorityTaskWoken);
 8001004:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <HAL_UART_TxCpltCallback+0x3c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f107 020c 	add.w	r2, r7, #12
 800100c:	4611      	mov	r1, r2
 800100e:	4618      	mov	r0, r3
 8001010:	f007 fda8 	bl	8008b64 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d007      	beq.n	800102a <HAL_UART_TxCpltCallback+0x32>
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <HAL_UART_TxCpltCallback+0x40>)
 800101c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	f3bf 8f4f 	dsb	sy
 8001026:	f3bf 8f6f 	isb	sy
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200008c4 	.word	0x200008c4
 8001038:	e000ed04 	.word	0xe000ed04

0800103c <UART_TX_RTOS>:

/* Apenas tarefas podem usar isso aqui. Interrupções não podem, pois isso é uma função bloqueante */
BaseType_t UART_TX_RTOS(const char *pData, uint16_t Size) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
    BaseType_t ret = pdTRUE;
 8001048:	2301      	movs	r3, #1
 800104a:	60fb      	str	r3, [r7, #12]

    ret = HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t *)pData, Size);
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	461a      	mov	r2, r3
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4808      	ldr	r0, [pc, #32]	@ (8001074 <UART_TX_RTOS+0x38>)
 8001054:	f005 f9e8 	bl	8006428 <HAL_UART_Transmit_DMA>
 8001058:	4603      	mov	r3, r0
 800105a:	60fb      	str	r3, [r7, #12]
    xSemaphoreTake(sem_tx_uart, portMAX_DELAY);
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <UART_TX_RTOS+0x3c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	4618      	mov	r0, r3
 8001066:	f007 feef 	bl	8008e48 <xQueueSemaphoreTake>
    return ret;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000734 	.word	0x20000734
 8001078:	200008c4 	.word	0x200008c4

0800107c <UART_RX_RTOS>:

BaseType_t UART_RX_RTOS(char *pData, TickType_t timeout) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
    return xQueueReceive(uart_rx_q, pData, timeout);
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <UART_RX_RTOS+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4618      	mov	r0, r3
 8001090:	f007 fdf8 	bl	8008c84 <xQueueReceive>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200008cc 	.word	0x200008cc
 80010a4:	00000000 	.word	0x00000000

080010a8 <adc_task>:

void adc_task(void *param) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	f5ad 6d62 	sub.w	sp, sp, #3616	@ 0xe20
 80010ae:	af02      	add	r7, sp, #8
 80010b0:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 80010b4:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 80010b8:	6018      	str	r0, [r3, #0]
    uint16_t adcBuffer[256];
    float ReIm[256 * 2];
    float mod[256];
    // uint32_t count = 0;

    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuffer, 256);
 80010ba:	f507 6341 	add.w	r3, r7, #3088	@ 0xc10
 80010be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010c2:	4619      	mov	r1, r3
 80010c4:	485a      	ldr	r0, [pc, #360]	@ (8001230 <adc_task+0x188>)
 80010c6:	f001 fb87 	bl	80027d8 <HAL_ADC_Start_DMA>
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 80010ca:	2300      	movs	r3, #0
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010d2:	4a58      	ldr	r2, [pc, #352]	@ (8001234 <adc_task+0x18c>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	4858      	ldr	r0, [pc, #352]	@ (8001238 <adc_task+0x190>)
 80010d8:	f002 fb1c 	bl	8003714 <HAL_DAC_Start_DMA>
                      (const uint32_t *)sin_wave_3rd_harmonic, 256,
                      DAC_ALIGN_12B_R);

    HAL_TIM_Base_Start(&htim2);
 80010dc:	4857      	ldr	r0, [pc, #348]	@ (800123c <adc_task+0x194>)
 80010de:	f004 fba1 	bl	8005824 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim3);
 80010e2:	4857      	ldr	r0, [pc, #348]	@ (8001240 <adc_task+0x198>)
 80010e4:	f004 fb9e 	bl	8005824 <HAL_TIM_Base_Start>

    while (1) {
        xSemaphoreTake(sem_adc, portMAX_DELAY);
 80010e8:	4b56      	ldr	r3, [pc, #344]	@ (8001244 <adc_task+0x19c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	4618      	mov	r0, r3
 80010f2:	f007 fea9 	bl	8008e48 <xQueueSemaphoreTake>

        // volatile TickType_t start = xTaskGetTickCount();

        int k = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
        for (int i = 0; i < 256; i++) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 3e10 	str.w	r3, [r7, #3600]	@ 0xe10
 8001102:	e02f      	b.n	8001164 <adc_task+0xbc>
            ReIm[k] = (float)adcBuffer[i] * 0.0008056640625f;
 8001104:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001108:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800110c:	f8d7 2e10 	ldr.w	r2, [r7, #3600]	@ 0xe10
 8001110:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800111c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001248 <adc_task+0x1a0>
 8001120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001124:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001128:	f6a3 2208 	subw	r2, r3, #2568	@ 0xa08
 800112c:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	edc3 7a00 	vstr	s15, [r3]
            ReIm[k + 1] = 0.0;
 8001138:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 800113c:	3301      	adds	r3, #1
 800113e:	f607 6218 	addw	r2, r7, #3608	@ 0xe18
 8001142:	f6a2 2208 	subw	r2, r2, #2568	@ 0xa08
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
            k += 2;
 8001150:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 8001154:	3302      	adds	r3, #2
 8001156:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
        for (int i = 0; i < 256; i++) {
 800115a:	f8d7 3e10 	ldr.w	r3, [r7, #3600]	@ 0xe10
 800115e:	3301      	adds	r3, #1
 8001160:	f8c7 3e10 	str.w	r3, [r7, #3600]	@ 0xe10
 8001164:	f8d7 3e10 	ldr.w	r3, [r7, #3600]	@ 0xe10
 8001168:	2bff      	cmp	r3, #255	@ 0xff
 800116a:	ddcb      	ble.n	8001104 <adc_task+0x5c>
        }

        arm_cfft_f32(&arm_cfft_sR_f32_len256, ReIm, 0, 1);
 800116c:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8001170:	2301      	movs	r3, #1
 8001172:	2200      	movs	r2, #0
 8001174:	4835      	ldr	r0, [pc, #212]	@ (800124c <adc_task+0x1a4>)
 8001176:	f009 ffa5 	bl	800b0c4 <arm_cfft_f32>
        arm_cmplx_mag_f32(ReIm, mod, 256);
 800117a:	f107 0110 	add.w	r1, r7, #16
 800117e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001182:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001186:	4618      	mov	r0, r3
 8001188:	f00a f834 	bl	800b1f4 <arm_cmplx_mag_f32>
        arm_scale_f32(mod, 0.0078125, mod, 128);
 800118c:	f107 0110 	add.w	r1, r7, #16
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	2280      	movs	r2, #128	@ 0x80
 8001196:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8001250 <adc_task+0x1a8>
 800119a:	4618      	mov	r0, r3
 800119c:	f00a f94e 	bl	800b43c <arm_scale_f32>
        mod[0] = mod[0] * 0.5;
 80011a0:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 80011a4:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80011b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b4:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 80011b8:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 80011bc:	edc3 7a00 	vstr	s15, [r3]

        volatile float fund_phase = atan2f(ReIm[3], ReIm[2]) * 180 /
 80011c0:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 80011c4:	f6a3 2308 	subw	r3, r3, #2568	@ 0xa08
 80011c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80011cc:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 80011d0:	f6a3 2308 	subw	r3, r3, #2568	@ 0xa08
 80011d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80011d8:	eef0 0a47 	vmov.f32	s1, s14
 80011dc:	eeb0 0a67 	vmov.f32	s0, s15
 80011e0:	f00d f904 	bl	800e3ec <atan2f>
 80011e4:	eef0 7a40 	vmov.f32	s15, s0
 80011e8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001254 <adc_task+0x1ac>
 80011ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f0:	ee17 0a90 	vmov	r0, s15
 80011f4:	f7ff f9d0 	bl	8000598 <__aeabi_f2d>
 80011f8:	a30b      	add	r3, pc, #44	@ (adr r3, 8001228 <adc_task+0x180>)
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	f7ff fb4d 	bl	800089c <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fcf5 	bl	8000bf8 <__aeabi_d2f>
 800120e:	4602      	mov	r2, r0
 8001210:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001214:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 8001218:	601a      	str	r2, [r3, #0]
                                    M_PI;  // Fase R da harmonica fundamental
        (void)fund_phase;
 800121a:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800121e:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 8001222:	681b      	ldr	r3, [r3, #0]
    while (1) {
 8001224:	e760      	b.n	80010e8 <adc_task+0x40>
 8001226:	bf00      	nop
 8001228:	54442d18 	.word	0x54442d18
 800122c:	400921fb 	.word	0x400921fb
 8001230:	200005f4 	.word	0x200005f4
 8001234:	20000200 	.word	0x20000200
 8001238:	200006c0 	.word	0x200006c0
 800123c:	20000828 	.word	0x20000828
 8001240:	20000874 	.word	0x20000874
 8001244:	200008c8 	.word	0x200008c8
 8001248:	3a533333 	.word	0x3a533333
 800124c:	0800e918 	.word	0x0800e918
 8001250:	3c000000 	.word	0x3c000000
 8001254:	43340000 	.word	0x43340000

08001258 <HAL_ADC_ConvCpltCallback>:
        // volatile TickType_t stop = xTaskGetTickCount();
        //(void)fund_phase;
    }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
    xSemaphoreGiveFromISR(sem_adc, &pxHigherPriorityTaskWoken);
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f107 020c 	add.w	r2, r7, #12
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f007 fc78 	bl	8008b64 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d007      	beq.n	800128a <HAL_ADC_ConvCpltCallback+0x32>
 800127a:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <HAL_ADC_ConvCpltCallback+0x40>)
 800127c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	f3bf 8f4f 	dsb	sy
 8001286:	f3bf 8f6f 	isb	sy
}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200008c8 	.word	0x200008c8
 8001298:	e000ed04 	.word	0xe000ed04

0800129c <HAL_DAC_ConvCpltCallbackCh1>:

volatile int dac_counter = 0;
volatile int flag = 0;
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hadc) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	6078      	str	r0, [r7, #4]
#if 1
    dac_counter++;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001314 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 80012ac:	6013      	str	r3, [r2, #0]
    if (dac_counter >= 120) {
 80012ae:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b77      	cmp	r3, #119	@ 0x77
 80012b4:	dd29      	ble.n	800130a <HAL_DAC_ConvCpltCallbackCh1+0x6e>
        dac_counter = 0;
 80012b6:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
        HAL_TIM_Base_Stop(&htim2);
 80012bc:	4816      	ldr	r0, [pc, #88]	@ (8001318 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 80012be:	f004 fb13 	bl	80058e8 <HAL_TIM_Base_Stop>
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80012c2:	2100      	movs	r1, #0
 80012c4:	4815      	ldr	r0, [pc, #84]	@ (800131c <HAL_DAC_ConvCpltCallbackCh1+0x80>)
 80012c6:	f002 faf9 	bl	80038bc <HAL_DAC_Stop_DMA>

        if (flag == 0) {
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10c      	bne.n	80012ec <HAL_DAC_ConvCpltCallbackCh1+0x50>
            HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 80012d2:	2300      	movs	r3, #0
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012da:	4a12      	ldr	r2, [pc, #72]	@ (8001324 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 80012dc:	2100      	movs	r1, #0
 80012de:	480f      	ldr	r0, [pc, #60]	@ (800131c <HAL_DAC_ConvCpltCallbackCh1+0x80>)
 80012e0:	f002 fa18 	bl	8003714 <HAL_DAC_Start_DMA>
                              (uint32_t *)sin_wave_3rd_harmonic, 256,
                              DAC_ALIGN_12B_R);
            flag = 1;
 80012e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	e00b      	b.n	8001304 <HAL_DAC_ConvCpltCallbackCh1+0x68>
        } else {
            HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)sin_wave, 256,
 80012ec:	2300      	movs	r3, #0
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001328 <HAL_DAC_ConvCpltCallbackCh1+0x8c>)
 80012f6:	2100      	movs	r1, #0
 80012f8:	4808      	ldr	r0, [pc, #32]	@ (800131c <HAL_DAC_ConvCpltCallbackCh1+0x80>)
 80012fa:	f002 fa0b 	bl	8003714 <HAL_DAC_Start_DMA>
                              DAC_ALIGN_12B_R);
            flag = 0;
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
        }
        HAL_TIM_Base_Start(&htim2);
 8001304:	4804      	ldr	r0, [pc, #16]	@ (8001318 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 8001306:	f004 fa8d 	bl	8005824 <HAL_TIM_Base_Start>
    }
#endif
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200008d0 	.word	0x200008d0
 8001318:	20000828 	.word	0x20000828
 800131c:	200006c0 	.word	0x200006c0
 8001320:	200008d4 	.word	0x200008d4
 8001324:	20000200 	.word	0x20000200
 8001328:	20000000 	.word	0x20000000

0800132c <terminal_task>:
};




void terminal_task (void *param) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
//  FreeRTOS_CLIRegisterCommand( &xListRuntimeCommand );


    char data;
    char data_uart;
    HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)&data_uart, 1);
 8001334:	f107 030e 	add.w	r3, r7, #14
 8001338:	2201      	movs	r2, #1
 800133a:	4619      	mov	r1, r3
 800133c:	480d      	ldr	r0, [pc, #52]	@ (8001374 <terminal_task+0x48>)
 800133e:	f005 f827 	bl	8006390 <HAL_UART_Receive_IT>
    hlpuart1.RxISR = HAL_UART_RxCpltCallback;
 8001342:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <terminal_task+0x48>)
 8001344:	4a0c      	ldr	r2, [pc, #48]	@ (8001378 <terminal_task+0x4c>)
 8001346:	675a      	str	r2, [r3, #116]	@ 0x74



    while (1) {
      UART_RX_RTOS(&data, portMAX_DELAY);  // Ponto de bloqueio (bloqueia por portMAX_DELAY)
 8001348:	f107 030f 	add.w	r3, r7, #15
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe93 	bl	800107c <UART_RX_RTOS>

      if (data == '\r') {
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	2b0d      	cmp	r3, #13
 800135a:	d104      	bne.n	8001366 <terminal_task+0x3a>
        UART_TX_RTOS("\r\n", strlen("\r\n"));
 800135c:	2102      	movs	r1, #2
 800135e:	4807      	ldr	r0, [pc, #28]	@ (800137c <terminal_task+0x50>)
 8001360:	f7ff fe6c 	bl	800103c <UART_TX_RTOS>
 8001364:	e7f0      	b.n	8001348 <terminal_task+0x1c>
      } else {
        UART_TX_RTOS(&data, 1);   
 8001366:	f107 030f 	add.w	r3, r7, #15
 800136a:	2101      	movs	r1, #1
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe65 	bl	800103c <UART_TX_RTOS>
      UART_RX_RTOS(&data, portMAX_DELAY);  // Ponto de bloqueio (bloqueia por portMAX_DELAY)
 8001372:	e7e9      	b.n	8001348 <terminal_task+0x1c>
 8001374:	20000734 	.word	0x20000734
 8001378:	08000fa9 	.word	0x08000fa9
 800137c:	0800e878 	.word	0x0800e878

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001386:	f000 fe4e 	bl	8002026 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138a:	f000 f861 	bl	8001450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138e:	f000 fa7f 	bl	8001890 <MX_GPIO_Init>
  MX_DMA_Init();
 8001392:	f000 fa37 	bl	8001804 <MX_DMA_Init>
  MX_ADC1_Init();
 8001396:	f000 f89b 	bl	80014d0 <MX_ADC1_Init>
  MX_TIM3_Init();
 800139a:	f000 f9e5 	bl	8001768 <MX_TIM3_Init>
  MX_DAC1_Init();
 800139e:	f000 f911 	bl	80015c4 <MX_DAC1_Init>
  MX_TIM2_Init();
 80013a2:	f000 f993 	bl	80016cc <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 80013a6:	f000 f947 	bl	8001638 <MX_LPUART1_UART_Init>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
    /* add semaphores, ... */

    sem_tx_uart = xSemaphoreCreateBinary();
 80013aa:	2203      	movs	r2, #3
 80013ac:	2100      	movs	r1, #0
 80013ae:	2001      	movs	r0, #1
 80013b0:	f007 fae0 	bl	8008974 <xQueueGenericCreate>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a1d      	ldr	r2, [pc, #116]	@ (800142c <main+0xac>)
 80013b8:	6013      	str	r3, [r2, #0]
    sem_adc = xSemaphoreCreateBinary();
 80013ba:	2203      	movs	r2, #3
 80013bc:	2100      	movs	r1, #0
 80013be:	2001      	movs	r0, #1
 80013c0:	f007 fad8 	bl	8008974 <xQueueGenericCreate>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001430 <main+0xb0>)
 80013c8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
    /* add queues, ... */

    uart_rx_q = xQueueCreate(32, sizeof(char));
 80013ca:	2200      	movs	r2, #0
 80013cc:	2101      	movs	r1, #1
 80013ce:	2020      	movs	r0, #32
 80013d0:	f007 fad0 	bl	8008974 <xQueueGenericCreate>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a17      	ldr	r2, [pc, #92]	@ (8001434 <main+0xb4>)
 80013d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80013da:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <main+0xb8>)
 80013dc:	1d3c      	adds	r4, r7, #4
 80013de:	461d      	mov	r5, r3
 80013e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e4:	682b      	ldr	r3, [r5, #0]
 80013e6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f007 f968 	bl	80086c2 <osThreadCreate>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a11      	ldr	r2, [pc, #68]	@ (800143c <main+0xbc>)
 80013f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

    /* CRIADO COM BASE NA FUNÇÃO terminal_task  */
    (void)xTaskCreate(terminal_task, "Console", 256, NULL, 3, NULL);
 80013f8:	2300      	movs	r3, #0
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	2303      	movs	r3, #3
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2300      	movs	r3, #0
 8001402:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001406:	490e      	ldr	r1, [pc, #56]	@ (8001440 <main+0xc0>)
 8001408:	480e      	ldr	r0, [pc, #56]	@ (8001444 <main+0xc4>)
 800140a:	f007 ff3d 	bl	8009288 <xTaskCreate>
    (void)xTaskCreate(adc_task, "ADC", 2048, NULL, 6, NULL);
 800140e:	2300      	movs	r3, #0
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	2306      	movs	r3, #6
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2300      	movs	r3, #0
 8001418:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800141c:	490a      	ldr	r1, [pc, #40]	@ (8001448 <main+0xc8>)
 800141e:	480b      	ldr	r0, [pc, #44]	@ (800144c <main+0xcc>)
 8001420:	f007 ff32 	bl	8009288 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001424:	f007 f946 	bl	80086b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <main+0xa8>
 800142c:	200008c4 	.word	0x200008c4
 8001430:	200008c8 	.word	0x200008c8
 8001434:	200008cc 	.word	0x200008cc
 8001438:	0800e894 	.word	0x0800e894
 800143c:	200008c0 	.word	0x200008c0
 8001440:	0800e87c 	.word	0x0800e87c
 8001444:	0800132d 	.word	0x0800132d
 8001448:	0800e884 	.word	0x0800e884
 800144c:	080010a9 	.word	0x080010a9

08001450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b094      	sub	sp, #80	@ 0x50
 8001454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001456:	f107 0318 	add.w	r3, r7, #24
 800145a:	2238      	movs	r2, #56	@ 0x38
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f00b f84d 	bl	800c4fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001472:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001476:	f003 f979 	bl	800476c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800147e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001484:	2340      	movs	r3, #64	@ 0x40
 8001486:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001488:	2300      	movs	r3, #0
 800148a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148c:	f107 0318 	add.w	r3, r7, #24
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fa1f 	bl	80048d4 <HAL_RCC_OscConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800149c:	f000 fa2a 	bl	80018f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a0:	230f      	movs	r3, #15
 80014a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014a4:	2301      	movs	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 fd1d 	bl	8004ef8 <HAL_RCC_ClockConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80014c4:	f000 fa16 	bl	80018f4 <Error_Handler>
  }
}
 80014c8:	bf00      	nop
 80014ca:	3750      	adds	r7, #80	@ 0x50
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08c      	sub	sp, #48	@ 0x30
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2220      	movs	r2, #32
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f00b f808 	bl	800c4fe <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014ee:	4b33      	ldr	r3, [pc, #204]	@ (80015bc <MX_ADC1_Init+0xec>)
 80014f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80014f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014f6:	4b31      	ldr	r3, [pc, #196]	@ (80015bc <MX_ADC1_Init+0xec>)
 80014f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014fe:	4b2f      	ldr	r3, [pc, #188]	@ (80015bc <MX_ADC1_Init+0xec>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001504:	4b2d      	ldr	r3, [pc, #180]	@ (80015bc <MX_ADC1_Init+0xec>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800150a:	4b2c      	ldr	r3, [pc, #176]	@ (80015bc <MX_ADC1_Init+0xec>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001510:	4b2a      	ldr	r3, [pc, #168]	@ (80015bc <MX_ADC1_Init+0xec>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001516:	4b29      	ldr	r3, [pc, #164]	@ (80015bc <MX_ADC1_Init+0xec>)
 8001518:	2204      	movs	r2, #4
 800151a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800151c:	4b27      	ldr	r3, [pc, #156]	@ (80015bc <MX_ADC1_Init+0xec>)
 800151e:	2200      	movs	r2, #0
 8001520:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001522:	4b26      	ldr	r3, [pc, #152]	@ (80015bc <MX_ADC1_Init+0xec>)
 8001524:	2200      	movs	r2, #0
 8001526:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001528:	4b24      	ldr	r3, [pc, #144]	@ (80015bc <MX_ADC1_Init+0xec>)
 800152a:	2201      	movs	r2, #1
 800152c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800152e:	4b23      	ldr	r3, [pc, #140]	@ (80015bc <MX_ADC1_Init+0xec>)
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8001536:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <MX_ADC1_Init+0xec>)
 8001538:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 800153c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800153e:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <MX_ADC1_Init+0xec>)
 8001540:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001544:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001546:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <MX_ADC1_Init+0xec>)
 8001548:	2201      	movs	r2, #1
 800154a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800154e:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <MX_ADC1_Init+0xec>)
 8001550:	2200      	movs	r2, #0
 8001552:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001554:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <MX_ADC1_Init+0xec>)
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800155c:	4817      	ldr	r0, [pc, #92]	@ (80015bc <MX_ADC1_Init+0xec>)
 800155e:	f000 ffb7 	bl	80024d0 <HAL_ADC_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001568:	f000 f9c4 	bl	80018f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001574:	4619      	mov	r1, r3
 8001576:	4811      	ldr	r0, [pc, #68]	@ (80015bc <MX_ADC1_Init+0xec>)
 8001578:	f001 ff26 	bl	80033c8 <HAL_ADCEx_MultiModeConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001582:	f000 f9b7 	bl	80018f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <MX_ADC1_Init+0xf0>)
 8001588:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800158a:	2306      	movs	r3, #6
 800158c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001592:	237f      	movs	r3, #127	@ 0x7f
 8001594:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001596:	2304      	movs	r3, #4
 8001598:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	4619      	mov	r1, r3
 80015a2:	4806      	ldr	r0, [pc, #24]	@ (80015bc <MX_ADC1_Init+0xec>)
 80015a4:	f001 f9e0 	bl	8002968 <HAL_ADC_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80015ae:	f000 f9a1 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	3730      	adds	r7, #48	@ 0x30
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200005f4 	.word	0x200005f4
 80015c0:	04300002 	.word	0x04300002

080015c4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ca:	463b      	mov	r3, r7
 80015cc:	2230      	movs	r2, #48	@ 0x30
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f00a ff94 	bl	800c4fe <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015d6:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <MX_DAC1_Init+0x6c>)
 80015d8:	4a16      	ldr	r2, [pc, #88]	@ (8001634 <MX_DAC1_Init+0x70>)
 80015da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015dc:	4814      	ldr	r0, [pc, #80]	@ (8001630 <MX_DAC1_Init+0x6c>)
 80015de:	f002 f877 	bl	80036d0 <HAL_DAC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015e8:	f000 f984 	bl	80018f4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80015ec:	2302      	movs	r3, #2
 80015ee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015fc:	2312      	movs	r3, #18
 80015fe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001608:	2304      	movs	r3, #4
 800160a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	4619      	mov	r1, r3
 8001616:	4806      	ldr	r0, [pc, #24]	@ (8001630 <MX_DAC1_Init+0x6c>)
 8001618:	f002 f9b2 	bl	8003980 <HAL_DAC_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001622:	f000 f967 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	3730      	adds	r7, #48	@ 0x30
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200006c0 	.word	0x200006c0
 8001634:	50000800 	.word	0x50000800

08001638 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800163c:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <MX_LPUART1_UART_Init+0x8c>)
 800163e:	4a22      	ldr	r2, [pc, #136]	@ (80016c8 <MX_LPUART1_UART_Init+0x90>)
 8001640:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001642:	4b20      	ldr	r3, [pc, #128]	@ (80016c4 <MX_LPUART1_UART_Init+0x8c>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b1e      	ldr	r3, [pc, #120]	@ (80016c4 <MX_LPUART1_UART_Init+0x8c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <MX_LPUART1_UART_Init+0x8c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001656:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <MX_LPUART1_UART_Init+0x8c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <MX_LPUART1_UART_Init+0x8c>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <MX_LPUART1_UART_Init+0x8c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001668:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <MX_LPUART1_UART_Init+0x8c>)
 800166a:	2200      	movs	r2, #0
 800166c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800166e:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <MX_LPUART1_UART_Init+0x8c>)
 8001670:	2200      	movs	r2, #0
 8001672:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001674:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <MX_LPUART1_UART_Init+0x8c>)
 8001676:	2200      	movs	r2, #0
 8001678:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800167a:	4812      	ldr	r0, [pc, #72]	@ (80016c4 <MX_LPUART1_UART_Init+0x8c>)
 800167c:	f004 fe38 	bl	80062f0 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001686:	f000 f935 	bl	80018f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800168a:	2100      	movs	r1, #0
 800168c:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <MX_LPUART1_UART_Init+0x8c>)
 800168e:	f006 ff2e 	bl	80084ee <HAL_UARTEx_SetTxFifoThreshold>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001698:	f000 f92c 	bl	80018f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800169c:	2100      	movs	r1, #0
 800169e:	4809      	ldr	r0, [pc, #36]	@ (80016c4 <MX_LPUART1_UART_Init+0x8c>)
 80016a0:	f006 ff63 	bl	800856a <HAL_UARTEx_SetRxFifoThreshold>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80016aa:	f000 f923 	bl	80018f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <MX_LPUART1_UART_Init+0x8c>)
 80016b0:	f006 fee4 	bl	800847c <HAL_UARTEx_DisableFifoMode>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80016ba:	f000 f91b 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000734 	.word	0x20000734
 80016c8:	40008000 	.word	0x40008000

080016cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <MX_TIM2_Init+0x98>)
 80016ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <MX_TIM2_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <MX_TIM2_Init+0x98>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11067;
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <MX_TIM2_Init+0x98>)
 8001700:	f642 323b 	movw	r2, #11067	@ 0x2b3b
 8001704:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <MX_TIM2_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800170c:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <MX_TIM2_Init+0x98>)
 800170e:	2280      	movs	r2, #128	@ 0x80
 8001710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001712:	4814      	ldr	r0, [pc, #80]	@ (8001764 <MX_TIM2_Init+0x98>)
 8001714:	f004 f82e 	bl	8005774 <HAL_TIM_Base_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800171e:	f000 f8e9 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001726:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	4619      	mov	r1, r3
 800172e:	480d      	ldr	r0, [pc, #52]	@ (8001764 <MX_TIM2_Init+0x98>)
 8001730:	f004 fabc 	bl	8005cac <HAL_TIM_ConfigClockSource>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800173a:	f000 f8db 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800173e:	2320      	movs	r3, #32
 8001740:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	@ (8001764 <MX_TIM2_Init+0x98>)
 800174c:	f004 fd08 	bl	8006160 <HAL_TIMEx_MasterConfigSynchronization>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001756:	f000 f8cd 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	3720      	adds	r7, #32
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000828 	.word	0x20000828

08001768 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001786:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <MX_TIM3_Init+0x94>)
 8001788:	4a1d      	ldr	r2, [pc, #116]	@ (8001800 <MX_TIM3_Init+0x98>)
 800178a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <MX_TIM3_Init+0x94>)
 800178e:	2200      	movs	r2, #0
 8001790:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <MX_TIM3_Init+0x94>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 11067;
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <MX_TIM3_Init+0x94>)
 800179a:	f642 323b 	movw	r2, #11067	@ 0x2b3b
 800179e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a0:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <MX_TIM3_Init+0x94>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_TIM3_Init+0x94>)
 80017a8:	2280      	movs	r2, #128	@ 0x80
 80017aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017ac:	4813      	ldr	r0, [pc, #76]	@ (80017fc <MX_TIM3_Init+0x94>)
 80017ae:	f003 ffe1 	bl	8005774 <HAL_TIM_Base_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80017b8:	f000 f89c 	bl	80018f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	4619      	mov	r1, r3
 80017c8:	480c      	ldr	r0, [pc, #48]	@ (80017fc <MX_TIM3_Init+0x94>)
 80017ca:	f004 fa6f 	bl	8005cac <HAL_TIM_ConfigClockSource>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80017d4:	f000 f88e 	bl	80018f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017d8:	2320      	movs	r3, #32
 80017da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	4619      	mov	r1, r3
 80017e4:	4805      	ldr	r0, [pc, #20]	@ (80017fc <MX_TIM3_Init+0x94>)
 80017e6:	f004 fcbb 	bl	8006160 <HAL_TIMEx_MasterConfigSynchronization>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80017f0:	f000 f880 	bl	80018f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000874 	.word	0x20000874
 8001800:	40000400 	.word	0x40000400

08001804 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800180a:	4b20      	ldr	r3, [pc, #128]	@ (800188c <MX_DMA_Init+0x88>)
 800180c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800180e:	4a1f      	ldr	r2, [pc, #124]	@ (800188c <MX_DMA_Init+0x88>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6493      	str	r3, [r2, #72]	@ 0x48
 8001816:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <MX_DMA_Init+0x88>)
 8001818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001822:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <MX_DMA_Init+0x88>)
 8001824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001826:	4a19      	ldr	r2, [pc, #100]	@ (800188c <MX_DMA_Init+0x88>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6493      	str	r3, [r2, #72]	@ 0x48
 800182e:	4b17      	ldr	r3, [pc, #92]	@ (800188c <MX_DMA_Init+0x88>)
 8001830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800183a:	4b14      	ldr	r3, [pc, #80]	@ (800188c <MX_DMA_Init+0x88>)
 800183c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183e:	4a13      	ldr	r2, [pc, #76]	@ (800188c <MX_DMA_Init+0x88>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6493      	str	r3, [r2, #72]	@ 0x48
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <MX_DMA_Init+0x88>)
 8001848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2105      	movs	r1, #5
 8001856:	200b      	movs	r0, #11
 8001858:	f001 ff12 	bl	8003680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800185c:	200b      	movs	r0, #11
 800185e:	f001 ff29 	bl	80036b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2105      	movs	r1, #5
 8001866:	200c      	movs	r0, #12
 8001868:	f001 ff0a 	bl	8003680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800186c:	200c      	movs	r0, #12
 800186e:	f001 ff21 	bl	80036b4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2105      	movs	r1, #5
 8001876:	2039      	movs	r0, #57	@ 0x39
 8001878:	f001 ff02 	bl	8003680 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 800187c:	2039      	movs	r0, #57	@ 0x39
 800187e:	f001 ff19 	bl	80036b4 <HAL_NVIC_EnableIRQ>

}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <MX_GPIO_Init+0x2c>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189a:	4a08      	ldr	r2, [pc, #32]	@ (80018bc <MX_GPIO_Init+0x2c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <MX_GPIO_Init+0x2c>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000

080018c0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 80018c8:	2001      	movs	r0, #1
 80018ca:	f006 ff21 	bl	8008710 <osDelay>
 80018ce:	e7fb      	b.n	80018c8 <StartDefaultTask+0x8>

080018d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018e2:	f000 fbb9 	bl	8002058 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40012c00 	.word	0x40012c00

080018f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f8:	b672      	cpsid	i
}
 80018fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <Error_Handler+0x8>

08001900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <HAL_MspInit+0x50>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800190a:	4a11      	ldr	r2, [pc, #68]	@ (8001950 <HAL_MspInit+0x50>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6613      	str	r3, [r2, #96]	@ 0x60
 8001912:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <HAL_MspInit+0x50>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <HAL_MspInit+0x50>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001922:	4a0b      	ldr	r2, [pc, #44]	@ (8001950 <HAL_MspInit+0x50>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001928:	6593      	str	r3, [r2, #88]	@ 0x58
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_MspInit+0x50>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	210f      	movs	r1, #15
 800193a:	f06f 0001 	mvn.w	r0, #1
 800193e:	f001 fe9f 	bl	8003680 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001942:	f002 ffb7 	bl	80048b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000

08001954 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b09a      	sub	sp, #104	@ 0x68
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	2244      	movs	r2, #68	@ 0x44
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f00a fdc2 	bl	800c4fe <memset>
  if(hadc->Instance==ADC1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001982:	d15f      	bne.n	8001a44 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001984:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001988:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800198a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800198e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4618      	mov	r0, r3
 8001996:	f003 fcfd 	bl	8005394 <HAL_RCCEx_PeriphCLKConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80019a0:	f7ff ffa8 	bl	80018f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019a4:	4b29      	ldr	r3, [pc, #164]	@ (8001a4c <HAL_ADC_MspInit+0xf8>)
 80019a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a8:	4a28      	ldr	r2, [pc, #160]	@ (8001a4c <HAL_ADC_MspInit+0xf8>)
 80019aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019b0:	4b26      	ldr	r3, [pc, #152]	@ (8001a4c <HAL_ADC_MspInit+0xf8>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019bc:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <HAL_ADC_MspInit+0xf8>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c0:	4a22      	ldr	r2, [pc, #136]	@ (8001a4c <HAL_ADC_MspInit+0xf8>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c8:	4b20      	ldr	r3, [pc, #128]	@ (8001a4c <HAL_ADC_MspInit+0xf8>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019d4:	2301      	movs	r3, #1
 80019d6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d8:	2303      	movs	r3, #3
 80019da:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019e4:	4619      	mov	r1, r3
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ea:	f002 fd3d 	bl	8004468 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80019ee:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <HAL_ADC_MspInit+0xfc>)
 80019f0:	4a18      	ldr	r2, [pc, #96]	@ (8001a54 <HAL_ADC_MspInit+0x100>)
 80019f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019f4:	4b16      	ldr	r3, [pc, #88]	@ (8001a50 <HAL_ADC_MspInit+0xfc>)
 80019f6:	2205      	movs	r2, #5
 80019f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <HAL_ADC_MspInit+0xfc>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <HAL_ADC_MspInit+0xfc>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a06:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_ADC_MspInit+0xfc>)
 8001a08:	2280      	movs	r2, #128	@ 0x80
 8001a0a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a0c:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_ADC_MspInit+0xfc>)
 8001a0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a12:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a14:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_ADC_MspInit+0xfc>)
 8001a16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a1a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <HAL_ADC_MspInit+0xfc>)
 8001a1e:	2220      	movs	r2, #32
 8001a20:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_ADC_MspInit+0xfc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a28:	4809      	ldr	r0, [pc, #36]	@ (8001a50 <HAL_ADC_MspInit+0xfc>)
 8001a2a:	f002 f9eb 	bl	8003e04 <HAL_DMA_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001a34:	f7ff ff5e 	bl	80018f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a05      	ldr	r2, [pc, #20]	@ (8001a50 <HAL_ADC_MspInit+0xfc>)
 8001a3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a3e:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <HAL_ADC_MspInit+0xfc>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a44:	bf00      	nop
 8001a46:	3768      	adds	r7, #104	@ 0x68
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	20000660 	.word	0x20000660
 8001a54:	40020008 	.word	0x40020008

08001a58 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	@ 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2b      	ldr	r2, [pc, #172]	@ (8001b24 <HAL_DAC_MspInit+0xcc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d14f      	bne.n	8001b1a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b28 <HAL_DAC_MspInit+0xd0>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8001b28 <HAL_DAC_MspInit+0xd0>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a86:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <HAL_DAC_MspInit+0xd0>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <HAL_DAC_MspInit+0xd0>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a96:	4a24      	ldr	r2, [pc, #144]	@ (8001b28 <HAL_DAC_MspInit+0xd0>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a9e:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <HAL_DAC_MspInit+0xd0>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aaa:	2310      	movs	r3, #16
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac0:	f002 fcd2 	bl	8004468 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Channel2;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b30 <HAL_DAC_MspInit+0xd8>)
 8001ac8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001aca:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001acc:	2206      	movs	r2, #6
 8001ace:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001ad2:	2210      	movs	r2, #16
 8001ad4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001adc:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001ade:	2280      	movs	r2, #128	@ 0x80
 8001ae0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ae2:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ae8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001aec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001af0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001af4:	2220      	movs	r2, #32
 8001af6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001afe:	480b      	ldr	r0, [pc, #44]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001b00:	f002 f980 	bl	8003e04 <HAL_DMA_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001b0a:	f7ff fef3 	bl	80018f4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a06      	ldr	r2, [pc, #24]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	4a05      	ldr	r2, [pc, #20]	@ (8001b2c <HAL_DAC_MspInit+0xd4>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	@ 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	50000800 	.word	0x50000800
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	200006d4 	.word	0x200006d4
 8001b30:	4002041c 	.word	0x4002041c

08001b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b09a      	sub	sp, #104	@ 0x68
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	2244      	movs	r2, #68	@ 0x44
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f00a fcd2 	bl	800c4fe <memset>
  if(huart->Instance==LPUART1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a37      	ldr	r2, [pc, #220]	@ (8001c3c <HAL_UART_MspInit+0x108>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d167      	bne.n	8001c34 <HAL_UART_MspInit+0x100>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b64:	2320      	movs	r3, #32
 8001b66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 fc0f 	bl	8005394 <HAL_RCCEx_PeriphCLKConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b7c:	f7ff feba 	bl	80018f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b80:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <HAL_UART_MspInit+0x10c>)
 8001b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b84:	4a2e      	ldr	r2, [pc, #184]	@ (8001c40 <HAL_UART_MspInit+0x10c>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c40 <HAL_UART_MspInit+0x10c>)
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b29      	ldr	r3, [pc, #164]	@ (8001c40 <HAL_UART_MspInit+0x10c>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9c:	4a28      	ldr	r2, [pc, #160]	@ (8001c40 <HAL_UART_MspInit+0x10c>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba4:	4b26      	ldr	r3, [pc, #152]	@ (8001c40 <HAL_UART_MspInit+0x10c>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bb0:	230c      	movs	r3, #12
 8001bb2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001bc0:	230c      	movs	r3, #12
 8001bc2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bce:	f002 fc4b 	bl	8004468 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <HAL_UART_MspInit+0x110>)
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <HAL_UART_MspInit+0x114>)
 8001bd6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <HAL_UART_MspInit+0x110>)
 8001bda:	2223      	movs	r2, #35	@ 0x23
 8001bdc:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_UART_MspInit+0x110>)
 8001be0:	2210      	movs	r2, #16
 8001be2:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be4:	4b17      	ldr	r3, [pc, #92]	@ (8001c44 <HAL_UART_MspInit+0x110>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bea:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <HAL_UART_MspInit+0x110>)
 8001bec:	2280      	movs	r2, #128	@ 0x80
 8001bee:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <HAL_UART_MspInit+0x110>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <HAL_UART_MspInit+0x110>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_UART_MspInit+0x110>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <HAL_UART_MspInit+0x110>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001c08:	480e      	ldr	r0, [pc, #56]	@ (8001c44 <HAL_UART_MspInit+0x110>)
 8001c0a:	f002 f8fb 	bl	8003e04 <HAL_DMA_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001c14:	f7ff fe6e 	bl	80018f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <HAL_UART_MspInit+0x110>)
 8001c1c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001c1e:	4a09      	ldr	r2, [pc, #36]	@ (8001c44 <HAL_UART_MspInit+0x110>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2105      	movs	r1, #5
 8001c28:	205b      	movs	r0, #91	@ 0x5b
 8001c2a:	f001 fd29 	bl	8003680 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001c2e:	205b      	movs	r0, #91	@ 0x5b
 8001c30:	f001 fd40 	bl	80036b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001c34:	bf00      	nop
 8001c36:	3768      	adds	r7, #104	@ 0x68
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40008000 	.word	0x40008000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	200007c8 	.word	0x200007c8
 8001c48:	4002001c 	.word	0x4002001c

08001c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x5c>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c62:	4a11      	ldr	r2, [pc, #68]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x5c>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x5c>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c76:	e010      	b.n	8001c9a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001cac <HAL_TIM_Base_MspInit+0x60>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d10b      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c82:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x5c>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c86:	4a08      	ldr	r2, [pc, #32]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x5c>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x5c>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40000400 	.word	0x40000400

08001cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08c      	sub	sp, #48	@ 0x30
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001d74 <HAL_InitTick+0xc4>)
 8001cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8001d74 <HAL_InitTick+0xc4>)
 8001cc6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cca:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ccc:	4b29      	ldr	r3, [pc, #164]	@ (8001d74 <HAL_InitTick+0xc4>)
 8001cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cd8:	f107 020c 	add.w	r2, r7, #12
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 fade 	bl	80052a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ce8:	f003 fac6 	bl	8005278 <HAL_RCC_GetPCLK2Freq>
 8001cec:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf0:	4a21      	ldr	r2, [pc, #132]	@ (8001d78 <HAL_InitTick+0xc8>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0c9b      	lsrs	r3, r3, #18
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d7c <HAL_InitTick+0xcc>)
 8001cfe:	4a20      	ldr	r2, [pc, #128]	@ (8001d80 <HAL_InitTick+0xd0>)
 8001d00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d02:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <HAL_InitTick+0xcc>)
 8001d04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <HAL_InitTick+0xcc>)
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <HAL_InitTick+0xcc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d16:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <HAL_InitTick+0xcc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001d1c:	4817      	ldr	r0, [pc, #92]	@ (8001d7c <HAL_InitTick+0xcc>)
 8001d1e:	f003 fd29 	bl	8005774 <HAL_TIM_Base_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001d28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d11b      	bne.n	8001d68 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d30:	4812      	ldr	r0, [pc, #72]	@ (8001d7c <HAL_InitTick+0xcc>)
 8001d32:	f003 fe01 	bl	8005938 <HAL_TIM_Base_Start_IT>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d111      	bne.n	8001d68 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d44:	2019      	movs	r0, #25
 8001d46:	f001 fcb5 	bl	80036b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b0f      	cmp	r3, #15
 8001d4e:	d808      	bhi.n	8001d62 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001d50:	2200      	movs	r2, #0
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	2019      	movs	r0, #25
 8001d56:	f001 fc93 	bl	8003680 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <HAL_InitTick+0xd4>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	e002      	b.n	8001d68 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3730      	adds	r7, #48	@ 0x30
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	431bde83 	.word	0x431bde83
 8001d7c:	200008d8 	.word	0x200008d8
 8001d80:	40012c00 	.word	0x40012c00
 8001d84:	20000404 	.word	0x20000404

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <NMI_Handler+0x4>

08001d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <HardFault_Handler+0x4>

08001d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <MemManage_Handler+0x4>

08001da0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <BusFault_Handler+0x4>

08001da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <UsageFault_Handler+0x4>

08001db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dc4:	4802      	ldr	r0, [pc, #8]	@ (8001dd0 <DMA1_Channel1_IRQHandler+0x10>)
 8001dc6:	f002 fa00 	bl	80041ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000660 	.word	0x20000660

08001dd4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001dd8:	4802      	ldr	r0, [pc, #8]	@ (8001de4 <DMA1_Channel2_IRQHandler+0x10>)
 8001dda:	f002 f9f6 	bl	80041ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200007c8 	.word	0x200007c8

08001de8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dec:	4802      	ldr	r0, [pc, #8]	@ (8001df8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001dee:	f003 fe0d 	bl	8005a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200008d8 	.word	0x200008d8

08001dfc <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001e00:	4802      	ldr	r0, [pc, #8]	@ (8001e0c <DMA2_Channel2_IRQHandler+0x10>)
 8001e02:	f002 f9e2 	bl	80041ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200006d4 	.word	0x200006d4

08001e10 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001e14:	4802      	ldr	r0, [pc, #8]	@ (8001e20 <LPUART1_IRQHandler+0x10>)
 8001e16:	f004 fb87 	bl	8006528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000734 	.word	0x20000734

08001e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return 1;
 8001e28:	2301      	movs	r3, #1
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_kill>:

int _kill(int pid, int sig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e3e:	f00a fc07 	bl	800c650 <__errno>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2216      	movs	r2, #22
 8001e46:	601a      	str	r2, [r3, #0]
  return -1;
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_exit>:

void _exit (int status)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffe7 	bl	8001e34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e66:	bf00      	nop
 8001e68:	e7fd      	b.n	8001e66 <_exit+0x12>

08001e6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e00a      	b.n	8001e92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e7c:	f3af 8000 	nop.w
 8001e80:	4601      	mov	r1, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	60ba      	str	r2, [r7, #8]
 8001e88:	b2ca      	uxtb	r2, r1
 8001e8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	dbf0      	blt.n	8001e7c <_read+0x12>
  }

  return len;
 8001e9a:	687b      	ldr	r3, [r7, #4]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	e009      	b.n	8001eca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	60ba      	str	r2, [r7, #8]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbf1      	blt.n	8001eb6 <_write+0x12>
  }
  return len;
 8001ed2:	687b      	ldr	r3, [r7, #4]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_close>:

int _close(int file)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f04:	605a      	str	r2, [r3, #4]
  return 0;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_isatty>:

int _isatty(int file)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b085      	sub	sp, #20
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f4c:	4a14      	ldr	r2, [pc, #80]	@ (8001fa0 <_sbrk+0x5c>)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <_sbrk+0x60>)
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f58:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f60:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <_sbrk+0x64>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <_sbrk+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f66:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d207      	bcs.n	8001f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f74:	f00a fb6c 	bl	800c650 <__errno>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e009      	b.n	8001f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <_sbrk+0x64>)
 8001f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20008000 	.word	0x20008000
 8001fa4:	00000400 	.word	0x00000400
 8001fa8:	20000924 	.word	0x20000924
 8001fac:	20007938 	.word	0x20007938

08001fb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <SystemInit+0x20>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fba:	4a05      	ldr	r2, [pc, #20]	@ (8001fd0 <SystemInit+0x20>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fd4:	480d      	ldr	r0, [pc, #52]	@ (800200c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fd6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fd8:	f7ff ffea 	bl	8001fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fdc:	480c      	ldr	r0, [pc, #48]	@ (8002010 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fde:	490d      	ldr	r1, [pc, #52]	@ (8002014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8002018 <LoopForever+0xe>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001fe4:	e002      	b.n	8001fec <LoopCopyDataInit>

08001fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fea:	3304      	adds	r3, #4

08001fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff0:	d3f9      	bcc.n	8001fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8002020 <LoopForever+0x16>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff8:	e001      	b.n	8001ffe <LoopFillZerobss>

08001ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ffc:	3204      	adds	r2, #4

08001ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002000:	d3fb      	bcc.n	8001ffa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002002:	f00a fb2b 	bl	800c65c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002006:	f7ff f9bb 	bl	8001380 <main>

0800200a <LoopForever>:

LoopForever:
    b LoopForever
 800200a:	e7fe      	b.n	800200a <LoopForever>
  ldr   r0, =_estack
 800200c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002014:	200005d8 	.word	0x200005d8
  ldr r2, =_sidata
 8002018:	0800f850 	.word	0x0800f850
  ldr r2, =_sbss
 800201c:	200005d8 	.word	0x200005d8
  ldr r4, =_ebss
 8002020:	20007934 	.word	0x20007934

08002024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <ADC1_2_IRQHandler>

08002026 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002030:	2003      	movs	r0, #3
 8002032:	f001 fb1a 	bl	800366a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002036:	200f      	movs	r0, #15
 8002038:	f7ff fe3a 	bl	8001cb0 <HAL_InitTick>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	71fb      	strb	r3, [r7, #7]
 8002046:	e001      	b.n	800204c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002048:	f7ff fc5a 	bl	8001900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800204c:	79fb      	ldrb	r3, [r7, #7]

}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800205c:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <HAL_IncTick+0x1c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b05      	ldr	r3, [pc, #20]	@ (8002078 <HAL_IncTick+0x20>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4413      	add	r3, r2
 8002066:	4a03      	ldr	r2, [pc, #12]	@ (8002074 <HAL_IncTick+0x1c>)
 8002068:	6013      	str	r3, [r2, #0]
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	20000928 	.word	0x20000928
 8002078:	20000408 	.word	0x20000408

0800207c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return uwTick;
 8002080:	4b03      	ldr	r3, [pc, #12]	@ (8002090 <HAL_GetTick+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000928 	.word	0x20000928

08002094 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	609a      	str	r2, [r3, #8]
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	609a      	str	r2, [r3, #8]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3360      	adds	r3, #96	@ 0x60
 800210e:	461a      	mov	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <LL_ADC_SetOffset+0x44>)
 800211e:	4013      	ands	r3, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	4313      	orrs	r3, r2
 800212c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002134:	bf00      	nop
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	03fff000 	.word	0x03fff000

08002144 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3360      	adds	r3, #96	@ 0x60
 8002152:	461a      	mov	r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3360      	adds	r3, #96	@ 0x60
 8002180:	461a      	mov	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	431a      	orrs	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b087      	sub	sp, #28
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3360      	adds	r3, #96	@ 0x60
 80021b6:	461a      	mov	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80021d0:	bf00      	nop
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3360      	adds	r3, #96	@ 0x60
 80021ec:	461a      	mov	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	431a      	orrs	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002206:	bf00      	nop
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	615a      	str	r2, [r3, #20]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800225e:	b480      	push	{r7}
 8002260:	b087      	sub	sp, #28
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3330      	adds	r3, #48	@ 0x30
 800226e:	461a      	mov	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	4413      	add	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	211f      	movs	r1, #31
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	401a      	ands	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	f003 011f 	and.w	r1, r3, #31
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	431a      	orrs	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022aa:	bf00      	nop
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b087      	sub	sp, #28
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3314      	adds	r3, #20
 80022c6:	461a      	mov	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	0e5b      	lsrs	r3, r3, #25
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	4413      	add	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	0d1b      	lsrs	r3, r3, #20
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	2107      	movs	r1, #7
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	401a      	ands	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	0d1b      	lsrs	r3, r3, #20
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	431a      	orrs	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002300:	bf00      	nop
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002324:	43db      	mvns	r3, r3
 8002326:	401a      	ands	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f003 0318 	and.w	r3, r3, #24
 800232e:	4908      	ldr	r1, [pc, #32]	@ (8002350 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002330:	40d9      	lsrs	r1, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	400b      	ands	r3, r1
 8002336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233a:	431a      	orrs	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	0007ffff 	.word	0x0007ffff

08002354 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 031f 	and.w	r3, r3, #31
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002380:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6093      	str	r3, [r2, #8]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023a8:	d101      	bne.n	80023ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80023cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023f8:	d101      	bne.n	80023fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800241c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <LL_ADC_IsEnabled+0x18>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <LL_ADC_IsEnabled+0x1a>
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800246a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800246e:	f043 0204 	orr.w	r2, r3, #4
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b04      	cmp	r3, #4
 8002494:	d101      	bne.n	800249a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d101      	bne.n	80024c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b089      	sub	sp, #36	@ 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e167      	b.n	80027ba <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d109      	bne.n	800250c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff fa2b 	bl	8001954 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff3f 	bl	8002394 <LL_ADC_IsDeepPowerDownEnabled>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff25 	bl	8002370 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff5a 	bl	80023e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d115      	bne.n	8002562 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ff3e 	bl	80023bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002540:	4ba0      	ldr	r3, [pc, #640]	@ (80027c4 <HAL_ADC_Init+0x2f4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	4aa0      	ldr	r2, [pc, #640]	@ (80027c8 <HAL_ADC_Init+0x2f8>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	3301      	adds	r3, #1
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002554:	e002      	b.n	800255c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3b01      	subs	r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f9      	bne.n	8002556 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff3c 	bl	80023e4 <LL_ADC_IsInternalRegulatorEnabled>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10d      	bne.n	800258e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002576:	f043 0210 	orr.w	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff ff75 	bl	8002482 <LL_ADC_REG_IsConversionOngoing>
 8002598:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 8100 	bne.w	80027a8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 80fc 	bne.w	80027a8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025b8:	f043 0202 	orr.w	r2, r3, #2
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff35 	bl	8002434 <LL_ADC_IsEnabled>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d111      	bne.n	80025f4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025d0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80025d4:	f7ff ff2e 	bl	8002434 <LL_ADC_IsEnabled>
 80025d8:	4604      	mov	r4, r0
 80025da:	487c      	ldr	r0, [pc, #496]	@ (80027cc <HAL_ADC_Init+0x2fc>)
 80025dc:	f7ff ff2a 	bl	8002434 <LL_ADC_IsEnabled>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4323      	orrs	r3, r4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4619      	mov	r1, r3
 80025ee:	4878      	ldr	r0, [pc, #480]	@ (80027d0 <HAL_ADC_Init+0x300>)
 80025f0:	f7ff fd50 	bl	8002094 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7f5b      	ldrb	r3, [r3, #29]
 80025f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002604:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800260a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002612:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800261e:	2b01      	cmp	r3, #1
 8002620:	d106      	bne.n	8002630 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002626:	3b01      	subs	r3, #1
 8002628:	045b      	lsls	r3, r3, #17
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d009      	beq.n	800264c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002644:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	4b60      	ldr	r3, [pc, #384]	@ (80027d4 <HAL_ADC_Init+0x304>)
 8002654:	4013      	ands	r3, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	69b9      	ldr	r1, [r7, #24]
 800265c:	430b      	orrs	r3, r1
 800265e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff ff14 	bl	80024a8 <LL_ADC_INJ_IsConversionOngoing>
 8002680:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d16d      	bne.n	8002764 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d16a      	bne.n	8002764 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002692:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800269a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026aa:	f023 0302 	bic.w	r3, r3, #2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	69b9      	ldr	r1, [r7, #24]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d017      	beq.n	80026f0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80026ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80026d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80026dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6911      	ldr	r1, [r2, #16]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80026ee:	e013      	b.n	8002718 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80026fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002710:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002714:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800271e:	2b01      	cmp	r3, #1
 8002720:	d118      	bne.n	8002754 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002738:	4311      	orrs	r1, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800273e:	4311      	orrs	r1, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002744:	430a      	orrs	r2, r1
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	611a      	str	r2, [r3, #16]
 8002752:	e007      	b.n	8002764 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d10c      	bne.n	8002786 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f023 010f 	bic.w	r1, r3, #15
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	1e5a      	subs	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
 8002784:	e007      	b.n	8002796 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 020f 	bic.w	r2, r2, #15
 8002794:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279a:	f023 0303 	bic.w	r3, r3, #3
 800279e:	f043 0201 	orr.w	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027a6:	e007      	b.n	80027b8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ac:	f043 0210 	orr.w	r2, r3, #16
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	@ 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd90      	pop	{r4, r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000400 	.word	0x20000400
 80027c8:	053e2d63 	.word	0x053e2d63
 80027cc:	50000100 	.word	0x50000100
 80027d0:	50000300 	.word	0x50000300
 80027d4:	fff04007 	.word	0xfff04007

080027d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027e4:	4851      	ldr	r0, [pc, #324]	@ (800292c <HAL_ADC_Start_DMA+0x154>)
 80027e6:	f7ff fdb5 	bl	8002354 <LL_ADC_GetMultimode>
 80027ea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fe46 	bl	8002482 <LL_ADC_REG_IsConversionOngoing>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f040 808f 	bne.w	800291c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_ADC_Start_DMA+0x34>
 8002808:	2302      	movs	r3, #2
 800280a:	e08a      	b.n	8002922 <HAL_ADC_Start_DMA+0x14a>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b05      	cmp	r3, #5
 800281e:	d002      	beq.n	8002826 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b09      	cmp	r3, #9
 8002824:	d173      	bne.n	800290e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 fc8e 	bl	8003148 <ADC_Enable>
 800282c:	4603      	mov	r3, r0
 800282e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d166      	bne.n	8002904 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a38      	ldr	r2, [pc, #224]	@ (8002930 <HAL_ADC_Start_DMA+0x158>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d002      	beq.n	800285a <HAL_ADC_Start_DMA+0x82>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	e001      	b.n	800285e <HAL_ADC_Start_DMA+0x86>
 800285a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	4293      	cmp	r3, r2
 8002864:	d002      	beq.n	800286c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002870:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d006      	beq.n	8002892 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002888:	f023 0206 	bic.w	r2, r3, #6
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002890:	e002      	b.n	8002898 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289c:	4a25      	ldr	r2, [pc, #148]	@ (8002934 <HAL_ADC_Start_DMA+0x15c>)
 800289e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a4:	4a24      	ldr	r2, [pc, #144]	@ (8002938 <HAL_ADC_Start_DMA+0x160>)
 80028a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ac:	4a23      	ldr	r2, [pc, #140]	@ (800293c <HAL_ADC_Start_DMA+0x164>)
 80028ae:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	221c      	movs	r2, #28
 80028b6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0210 	orr.w	r2, r2, #16
 80028ce:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	3340      	adds	r3, #64	@ 0x40
 80028ea:	4619      	mov	r1, r3
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f001 fb30 	bl	8003f54 <HAL_DMA_Start_IT>
 80028f4:	4603      	mov	r3, r0
 80028f6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fdac 	bl	800245a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002902:	e00d      	b.n	8002920 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800290c:	e008      	b.n	8002920 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800291a:	e001      	b.n	8002920 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800291c:	2302      	movs	r3, #2
 800291e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002920:	7dfb      	ldrb	r3, [r7, #23]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	50000300 	.word	0x50000300
 8002930:	50000100 	.word	0x50000100
 8002934:	08003255 	.word	0x08003255
 8002938:	0800332d 	.word	0x0800332d
 800293c:	08003349 	.word	0x08003349

08002940 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0b6      	sub	sp, #216	@ 0xd8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_ADC_ConfigChannel+0x22>
 8002986:	2302      	movs	r3, #2
 8002988:	e3c8      	b.n	800311c <HAL_ADC_ConfigChannel+0x7b4>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fd73 	bl	8002482 <LL_ADC_REG_IsConversionOngoing>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f040 83ad 	bne.w	80030fe <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	f7ff fc54 	bl	800225e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fd61 	bl	8002482 <LL_ADC_REG_IsConversionOngoing>
 80029c0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fd6d 	bl	80024a8 <LL_ADC_INJ_IsConversionOngoing>
 80029ce:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 81d9 	bne.w	8002d8e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f040 81d4 	bne.w	8002d8e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029ee:	d10f      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2200      	movs	r2, #0
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7ff fc5b 	bl	80022b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fc02 	bl	8002212 <LL_ADC_SetSamplingTimeCommonConfig>
 8002a0e:	e00e      	b.n	8002a2e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6819      	ldr	r1, [r3, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f7ff fc4a 	bl	80022b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fbf2 	bl	8002212 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	08db      	lsrs	r3, r3, #3
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d022      	beq.n	8002a96 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	6919      	ldr	r1, [r3, #16]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a60:	f7ff fb4c 	bl	80020fc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6818      	ldr	r0, [r3, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6919      	ldr	r1, [r3, #16]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	461a      	mov	r2, r3
 8002a72:	f7ff fb98 	bl	80021a6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d102      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x124>
 8002a86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a8a:	e000      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x126>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f7ff fba4 	bl	80021dc <LL_ADC_SetOffsetSaturation>
 8002a94:	e17b      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fb51 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10a      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x15a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fb46 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	0e9b      	lsrs	r3, r3, #26
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	e01e      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x198>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fb3b 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ae0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ae4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ae8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002af0:	2320      	movs	r3, #32
 8002af2:	e004      	b.n	8002afe <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002af8:	fab3 f383 	clz	r3, r3
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x1b0>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	0e9b      	lsrs	r3, r3, #26
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	e018      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x1e2>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002b2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002b34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e004      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002b40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d106      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2200      	movs	r2, #0
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fb0a 	bl	8002170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2101      	movs	r1, #1
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff faee 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x220>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2101      	movs	r1, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fae3 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	0e9b      	lsrs	r3, r3, #26
 8002b82:	f003 021f 	and.w	r2, r3, #31
 8002b86:	e01e      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x25e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fad8 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002baa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	e004      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002bba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x276>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	e018      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x2a8>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002bf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bf6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002bfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002c02:	2320      	movs	r3, #32
 8002c04:	e004      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002c06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d106      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff faa7 	bl	8002170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2102      	movs	r1, #2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fa8b 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x2e6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fa80 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	0e9b      	lsrs	r3, r3, #26
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	e01e      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x324>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2102      	movs	r1, #2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fa75 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002c74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	e004      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x33c>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0e9b      	lsrs	r3, r3, #26
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	e016      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x36a>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002cb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002cbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002cc4:	2320      	movs	r3, #32
 8002cc6:	e004      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d106      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2102      	movs	r1, #2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fa46 	bl	8002170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2103      	movs	r1, #3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fa2a 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x3a8>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2103      	movs	r1, #3
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fa1f 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002d06:	4603      	mov	r3, r0
 8002d08:	0e9b      	lsrs	r3, r3, #26
 8002d0a:	f003 021f 	and.w	r2, r3, #31
 8002d0e:	e017      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x3d8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2103      	movs	r1, #3
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fa14 	bl	8002144 <LL_ADC_GetOffsetChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002d32:	2320      	movs	r3, #32
 8002d34:	e003      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002d36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d105      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x3f0>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	0e9b      	lsrs	r3, r3, #26
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	e011      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x414>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002d66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002d70:	2320      	movs	r3, #32
 8002d72:	e003      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d106      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2103      	movs	r1, #3
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff f9f1 	bl	8002170 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fb4e 	bl	8002434 <LL_ADC_IsEnabled>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 8140 	bne.w	8003020 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f7ff faad 	bl	800230c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	4a8f      	ldr	r2, [pc, #572]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x68c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	f040 8131 	bne.w	8003020 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10b      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x47e>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	0e9b      	lsrs	r3, r3, #26
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2b09      	cmp	r3, #9
 8002ddc:	bf94      	ite	ls
 8002dde:	2301      	movls	r3, #1
 8002de0:	2300      	movhi	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	e019      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x4b2>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002df4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002df6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002df8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e003      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002e02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2b09      	cmp	r3, #9
 8002e12:	bf94      	ite	ls
 8002e14:	2301      	movls	r3, #1
 8002e16:	2300      	movhi	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d079      	beq.n	8002f12 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d107      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x4d2>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	0e9b      	lsrs	r3, r3, #26
 8002e30:	3301      	adds	r3, #1
 8002e32:	069b      	lsls	r3, r3, #26
 8002e34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e38:	e015      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x4fe>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e4a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002e52:	2320      	movs	r3, #32
 8002e54:	e003      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e58:	fab3 f383 	clz	r3, r3
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	069b      	lsls	r3, r3, #26
 8002e62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x51e>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	0e9b      	lsrs	r3, r3, #26
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	2101      	movs	r1, #1
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	e017      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x54e>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	e003      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	ea42 0103 	orr.w	r1, r2, r3
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x574>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	0e9b      	lsrs	r3, r3, #26
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f003 021f 	and.w	r2, r3, #31
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	051b      	lsls	r3, r3, #20
 8002eda:	e018      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x5a6>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002ef4:	2320      	movs	r3, #32
 8002ef6:	e003      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	f003 021f 	and.w	r2, r3, #31
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	e081      	b.n	8003016 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d107      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x5c6>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	0e9b      	lsrs	r3, r3, #26
 8002f24:	3301      	adds	r3, #1
 8002f26:	069b      	lsls	r3, r3, #26
 8002f28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f2c:	e015      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x5f2>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002f46:	2320      	movs	r3, #32
 8002f48:	e003      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4c:	fab3 f383 	clz	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	069b      	lsls	r3, r3, #26
 8002f56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x612>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	0e9b      	lsrs	r3, r3, #26
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	2101      	movs	r1, #1
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	e017      	b.n	8002faa <HAL_ADC_ConfigChannel+0x642>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	61fb      	str	r3, [r7, #28]
  return result;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002f92:	2320      	movs	r3, #32
 8002f94:	e003      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	ea42 0103 	orr.w	r1, r2, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10d      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x66e>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0e9b      	lsrs	r3, r3, #26
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f003 021f 	and.w	r2, r3, #31
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	3b1e      	subs	r3, #30
 8002fce:	051b      	lsls	r3, r3, #20
 8002fd0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fd4:	e01e      	b.n	8003014 <HAL_ADC_ConfigChannel+0x6ac>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	613b      	str	r3, [r7, #16]
  return result;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d104      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002fee:	2320      	movs	r3, #32
 8002ff0:	e006      	b.n	8003000 <HAL_ADC_ConfigChannel+0x698>
 8002ff2:	bf00      	nop
 8002ff4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	3301      	adds	r3, #1
 8003002:	f003 021f 	and.w	r2, r3, #31
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	3b1e      	subs	r3, #30
 800300e:	051b      	lsls	r3, r3, #20
 8003010:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003014:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800301a:	4619      	mov	r1, r3
 800301c:	f7ff f94b 	bl	80022b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b3f      	ldr	r3, [pc, #252]	@ (8003124 <HAL_ADC_ConfigChannel+0x7bc>)
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d071      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800302c:	483e      	ldr	r0, [pc, #248]	@ (8003128 <HAL_ADC_ConfigChannel+0x7c0>)
 800302e:	f7ff f857 	bl	80020e0 <LL_ADC_GetCommonPathInternalCh>
 8003032:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a3c      	ldr	r2, [pc, #240]	@ (800312c <HAL_ADC_ConfigChannel+0x7c4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_ADC_ConfigChannel+0x6e2>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a3a      	ldr	r2, [pc, #232]	@ (8003130 <HAL_ADC_ConfigChannel+0x7c8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d127      	bne.n	800309a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800304a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800304e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d121      	bne.n	800309a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800305e:	d157      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003060:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003064:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003068:	4619      	mov	r1, r3
 800306a:	482f      	ldr	r0, [pc, #188]	@ (8003128 <HAL_ADC_ConfigChannel+0x7c0>)
 800306c:	f7ff f825 	bl	80020ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003070:	4b30      	ldr	r3, [pc, #192]	@ (8003134 <HAL_ADC_ConfigChannel+0x7cc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	4a30      	ldr	r2, [pc, #192]	@ (8003138 <HAL_ADC_ConfigChannel+0x7d0>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	4613      	mov	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800308a:	e002      	b.n	8003092 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	3b01      	subs	r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f9      	bne.n	800308c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003098:	e03a      	b.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a27      	ldr	r2, [pc, #156]	@ (800313c <HAL_ADC_ConfigChannel+0x7d4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d113      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10d      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a22      	ldr	r2, [pc, #136]	@ (8003140 <HAL_ADC_ConfigChannel+0x7d8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d02a      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030c2:	4619      	mov	r1, r3
 80030c4:	4818      	ldr	r0, [pc, #96]	@ (8003128 <HAL_ADC_ConfigChannel+0x7c0>)
 80030c6:	f7fe fff8 	bl	80020ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030ca:	e021      	b.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003144 <HAL_ADC_ConfigChannel+0x7dc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d11c      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d116      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a16      	ldr	r2, [pc, #88]	@ (8003140 <HAL_ADC_ConfigChannel+0x7d8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d011      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030f4:	4619      	mov	r1, r3
 80030f6:	480c      	ldr	r0, [pc, #48]	@ (8003128 <HAL_ADC_ConfigChannel+0x7c0>)
 80030f8:	f7fe ffdf 	bl	80020ba <LL_ADC_SetCommonPathInternalCh>
 80030fc:	e008      	b.n	8003110 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003102:	f043 0220 	orr.w	r2, r3, #32
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003118:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800311c:	4618      	mov	r0, r3
 800311e:	37d8      	adds	r7, #216	@ 0xd8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	80080000 	.word	0x80080000
 8003128:	50000300 	.word	0x50000300
 800312c:	c3210000 	.word	0xc3210000
 8003130:	90c00010 	.word	0x90c00010
 8003134:	20000400 	.word	0x20000400
 8003138:	053e2d63 	.word	0x053e2d63
 800313c:	c7520000 	.word	0xc7520000
 8003140:	50000100 	.word	0x50000100
 8003144:	cb840000 	.word	0xcb840000

08003148 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003150:	2300      	movs	r3, #0
 8003152:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff f96b 	bl	8002434 <LL_ADC_IsEnabled>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d169      	bne.n	8003238 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	4b36      	ldr	r3, [pc, #216]	@ (8003244 <ADC_Enable+0xfc>)
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00d      	beq.n	800318e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	f043 0210 	orr.w	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003182:	f043 0201 	orr.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e055      	b.n	800323a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff f93a 	bl	800240c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003198:	482b      	ldr	r0, [pc, #172]	@ (8003248 <ADC_Enable+0x100>)
 800319a:	f7fe ffa1 	bl	80020e0 <LL_ADC_GetCommonPathInternalCh>
 800319e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d013      	beq.n	80031d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031a8:	4b28      	ldr	r3, [pc, #160]	@ (800324c <ADC_Enable+0x104>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	099b      	lsrs	r3, r3, #6
 80031ae:	4a28      	ldr	r2, [pc, #160]	@ (8003250 <ADC_Enable+0x108>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031c2:	e002      	b.n	80031ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f9      	bne.n	80031c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031d0:	f7fe ff54 	bl	800207c <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031d6:	e028      	b.n	800322a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff f929 	bl	8002434 <LL_ADC_IsEnabled>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d104      	bne.n	80031f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff f90d 	bl	800240c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031f2:	f7fe ff43 	bl	800207c <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d914      	bls.n	800322a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d00d      	beq.n	800322a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003212:	f043 0210 	orr.w	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e007      	b.n	800323a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d1cf      	bne.n	80031d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	8000003f 	.word	0x8000003f
 8003248:	50000300 	.word	0x50000300
 800324c:	20000400 	.word	0x20000400
 8003250:	053e2d63 	.word	0x053e2d63

08003254 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003260:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003266:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800326a:	2b00      	cmp	r3, #0
 800326c:	d14b      	bne.n	8003306 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003272:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d021      	beq.n	80032cc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe ffd3 	bl	8002238 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d032      	beq.n	80032fe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d12b      	bne.n	80032fe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d11f      	bne.n	80032fe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c2:	f043 0201 	orr.w	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032ca:	e018      	b.n	80032fe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d111      	bne.n	80032fe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d105      	bne.n	80032fe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f6:	f043 0201 	orr.w	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7fd ffaa 	bl	8001258 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003304:	e00e      	b.n	8003324 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f7ff fb1e 	bl	8002954 <HAL_ADC_ErrorCallback>
}
 8003318:	e004      	b.n	8003324 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff fb00 	bl	8002940 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003366:	f043 0204 	orr.w	r2, r3, #4
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7ff faf0 	bl	8002954 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <LL_ADC_IsEnabled>:
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <LL_ADC_IsEnabled+0x18>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <LL_ADC_IsEnabled+0x1a>
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d101      	bne.n	80033ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b0a1      	sub	sp, #132	@ 0x84
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e08b      	b.n	80034fe <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80033ee:	2300      	movs	r3, #0
 80033f0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80033f2:	2300      	movs	r3, #0
 80033f4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033fe:	d102      	bne.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003400:	4b41      	ldr	r3, [pc, #260]	@ (8003508 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	e001      	b.n	800340a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e06a      	b.n	80034fe <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff ffb9 	bl	80033a2 <LL_ADC_REG_IsConversionOngoing>
 8003430:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff ffb3 	bl	80033a2 <LL_ADC_REG_IsConversionOngoing>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d14c      	bne.n	80034dc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003442:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003444:	2b00      	cmp	r3, #0
 8003446:	d149      	bne.n	80034dc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003448:	4b30      	ldr	r3, [pc, #192]	@ (800350c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800344a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d028      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003454:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003466:	035b      	lsls	r3, r3, #13
 8003468:	430b      	orrs	r3, r1
 800346a:	431a      	orrs	r2, r3
 800346c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800346e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003470:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003474:	f7ff ff82 	bl	800337c <LL_ADC_IsEnabled>
 8003478:	4604      	mov	r4, r0
 800347a:	4823      	ldr	r0, [pc, #140]	@ (8003508 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800347c:	f7ff ff7e 	bl	800337c <LL_ADC_IsEnabled>
 8003480:	4603      	mov	r3, r0
 8003482:	4323      	orrs	r3, r4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d133      	bne.n	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003488:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003490:	f023 030f 	bic.w	r3, r3, #15
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	6811      	ldr	r1, [r2, #0]
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	6892      	ldr	r2, [r2, #8]
 800349c:	430a      	orrs	r2, r1
 800349e:	431a      	orrs	r2, r3
 80034a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034a2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034a4:	e024      	b.n	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034b2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034b6:	f7ff ff61 	bl	800337c <LL_ADC_IsEnabled>
 80034ba:	4604      	mov	r4, r0
 80034bc:	4812      	ldr	r0, [pc, #72]	@ (8003508 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80034be:	f7ff ff5d 	bl	800337c <LL_ADC_IsEnabled>
 80034c2:	4603      	mov	r3, r0
 80034c4:	4323      	orrs	r3, r4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d112      	bne.n	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034d2:	f023 030f 	bic.w	r3, r3, #15
 80034d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80034d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034da:	e009      	b.n	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80034ee:	e000      	b.n	80034f2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80034fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3784      	adds	r7, #132	@ 0x84
 8003502:	46bd      	mov	sp, r7
 8003504:	bd90      	pop	{r4, r7, pc}
 8003506:	bf00      	nop
 8003508:	50000100 	.word	0x50000100
 800350c:	50000300 	.word	0x50000300

08003510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003520:	4b0c      	ldr	r3, [pc, #48]	@ (8003554 <__NVIC_SetPriorityGrouping+0x44>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800352c:	4013      	ands	r3, r2
 800352e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003538:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800353c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003542:	4a04      	ldr	r2, [pc, #16]	@ (8003554 <__NVIC_SetPriorityGrouping+0x44>)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	60d3      	str	r3, [r2, #12]
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800355c:	4b04      	ldr	r3, [pc, #16]	@ (8003570 <__NVIC_GetPriorityGrouping+0x18>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	0a1b      	lsrs	r3, r3, #8
 8003562:	f003 0307 	and.w	r3, r3, #7
}
 8003566:	4618      	mov	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003582:	2b00      	cmp	r3, #0
 8003584:	db0b      	blt.n	800359e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	f003 021f 	and.w	r2, r3, #31
 800358c:	4907      	ldr	r1, [pc, #28]	@ (80035ac <__NVIC_EnableIRQ+0x38>)
 800358e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	2001      	movs	r0, #1
 8003596:	fa00 f202 	lsl.w	r2, r0, r2
 800359a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000e100 	.word	0xe000e100

080035b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	6039      	str	r1, [r7, #0]
 80035ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	db0a      	blt.n	80035da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	490c      	ldr	r1, [pc, #48]	@ (80035fc <__NVIC_SetPriority+0x4c>)
 80035ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ce:	0112      	lsls	r2, r2, #4
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	440b      	add	r3, r1
 80035d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d8:	e00a      	b.n	80035f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	4908      	ldr	r1, [pc, #32]	@ (8003600 <__NVIC_SetPriority+0x50>)
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	3b04      	subs	r3, #4
 80035e8:	0112      	lsls	r2, r2, #4
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	440b      	add	r3, r1
 80035ee:	761a      	strb	r2, [r3, #24]
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	e000e100 	.word	0xe000e100
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003604:	b480      	push	{r7}
 8003606:	b089      	sub	sp, #36	@ 0x24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f1c3 0307 	rsb	r3, r3, #7
 800361e:	2b04      	cmp	r3, #4
 8003620:	bf28      	it	cs
 8003622:	2304      	movcs	r3, #4
 8003624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3304      	adds	r3, #4
 800362a:	2b06      	cmp	r3, #6
 800362c:	d902      	bls.n	8003634 <NVIC_EncodePriority+0x30>
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	3b03      	subs	r3, #3
 8003632:	e000      	b.n	8003636 <NVIC_EncodePriority+0x32>
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	f04f 32ff 	mov.w	r2, #4294967295
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43da      	mvns	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	401a      	ands	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800364c:	f04f 31ff 	mov.w	r1, #4294967295
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	fa01 f303 	lsl.w	r3, r1, r3
 8003656:	43d9      	mvns	r1, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800365c:	4313      	orrs	r3, r2
         );
}
 800365e:	4618      	mov	r0, r3
 8003660:	3724      	adds	r7, #36	@ 0x24
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b082      	sub	sp, #8
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff ff4c 	bl	8003510 <__NVIC_SetPriorityGrouping>
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800368e:	f7ff ff63 	bl	8003558 <__NVIC_GetPriorityGrouping>
 8003692:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	6978      	ldr	r0, [r7, #20]
 800369a:	f7ff ffb3 	bl	8003604 <NVIC_EncodePriority>
 800369e:	4602      	mov	r2, r0
 80036a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036a4:	4611      	mov	r1, r2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff ff82 	bl	80035b0 <__NVIC_SetPriority>
}
 80036ac:	bf00      	nop
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ff56 	bl	8003574 <__NVIC_EnableIRQ>
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e014      	b.n	800370c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	791b      	ldrb	r3, [r3, #4]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe f9b0 	bl	8001a58 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0b2      	b.n	8003892 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	795b      	ldrb	r3, [r3, #5]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_DAC_Start_DMA+0x24>
 8003734:	2302      	movs	r3, #2
 8003736:	e0ac      	b.n	8003892 <HAL_DAC_Start_DMA+0x17e>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2202      	movs	r2, #2
 8003742:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d129      	bne.n	800379e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	4a53      	ldr	r2, [pc, #332]	@ (800389c <HAL_DAC_Start_DMA+0x188>)
 8003750:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	4a52      	ldr	r2, [pc, #328]	@ (80038a0 <HAL_DAC_Start_DMA+0x18c>)
 8003758:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	4a51      	ldr	r2, [pc, #324]	@ (80038a4 <HAL_DAC_Start_DMA+0x190>)
 8003760:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003770:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_DAC_Start_DMA+0x6c>
 8003778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377a:	2b04      	cmp	r3, #4
 800377c:	d005      	beq.n	800378a <HAL_DAC_Start_DMA+0x76>
 800377e:	e009      	b.n	8003794 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3308      	adds	r3, #8
 8003786:	61bb      	str	r3, [r7, #24]
        break;
 8003788:	e033      	b.n	80037f2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	330c      	adds	r3, #12
 8003790:	61bb      	str	r3, [r7, #24]
        break;
 8003792:	e02e      	b.n	80037f2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3310      	adds	r3, #16
 800379a:	61bb      	str	r3, [r7, #24]
        break;
 800379c:	e029      	b.n	80037f2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	4a41      	ldr	r2, [pc, #260]	@ (80038a8 <HAL_DAC_Start_DMA+0x194>)
 80037a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	4a40      	ldr	r2, [pc, #256]	@ (80038ac <HAL_DAC_Start_DMA+0x198>)
 80037ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	4a3f      	ldr	r2, [pc, #252]	@ (80038b0 <HAL_DAC_Start_DMA+0x19c>)
 80037b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80037c4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80037c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_DAC_Start_DMA+0xc0>
 80037cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d005      	beq.n	80037de <HAL_DAC_Start_DMA+0xca>
 80037d2:	e009      	b.n	80037e8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3314      	adds	r3, #20
 80037da:	61bb      	str	r3, [r7, #24]
        break;
 80037dc:	e009      	b.n	80037f2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3318      	adds	r3, #24
 80037e4:	61bb      	str	r3, [r7, #24]
        break;
 80037e6:	e004      	b.n	80037f2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	331c      	adds	r3, #28
 80037ee:	61bb      	str	r3, [r7, #24]
        break;
 80037f0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d111      	bne.n	800381c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003806:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6898      	ldr	r0, [r3, #8]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	f000 fb9f 	bl	8003f54 <HAL_DMA_Start_IT>
 8003816:	4603      	mov	r3, r0
 8003818:	77fb      	strb	r3, [r7, #31]
 800381a:	e010      	b.n	800383e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800382a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	68d8      	ldr	r0, [r3, #12]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	f000 fb8d 	bl	8003f54 <HAL_DMA_Start_IT>
 800383a:	4603      	mov	r3, r0
 800383c:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003844:	7ffb      	ldrb	r3, [r7, #31]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d11c      	bne.n	8003884 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6819      	ldr	r1, [r3, #0]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2201      	movs	r2, #1
 8003858:	409a      	lsls	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003862:	4b14      	ldr	r3, [pc, #80]	@ (80038b4 <HAL_DAC_Start_DMA+0x1a0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	099b      	lsrs	r3, r3, #6
 8003868:	4a13      	ldr	r2, [pc, #76]	@ (80038b8 <HAL_DAC_Start_DMA+0x1a4>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	099b      	lsrs	r3, r3, #6
 8003870:	3301      	adds	r3, #1
 8003872:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003874:	e002      	b.n	800387c <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	3b01      	subs	r3, #1
 800387a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f9      	bne.n	8003876 <HAL_DAC_Start_DMA+0x162>
 8003882:	e005      	b.n	8003890 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f043 0204 	orr.w	r2, r3, #4
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003890:	7ffb      	ldrb	r3, [r7, #31]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	08003cf1 	.word	0x08003cf1
 80038a0:	08003d13 	.word	0x08003d13
 80038a4:	08003d2f 	.word	0x08003d2f
 80038a8:	08003d99 	.word	0x08003d99
 80038ac:	08003dbb 	.word	0x08003dbb
 80038b0:	08003dd7 	.word	0x08003dd7
 80038b4:	20000400 	.word	0x20000400
 80038b8:	053e2d63 	.word	0x053e2d63

080038bc <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e03e      	b.n	800394e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6819      	ldr	r1, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43da      	mvns	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	400a      	ands	r2, r1
 80038ec:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6819      	ldr	r1, [r3, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2201      	movs	r2, #1
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43da      	mvns	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	400a      	ands	r2, r1
 8003908:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10d      	bne.n	800392c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fb98 	bl	800404a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e00c      	b.n	8003946 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fb8a 	bl	800404a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003944:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	@ 0x28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_DAC_ConfigChannel+0x1c>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e19e      	b.n	8003cde <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	795b      	ldrb	r3, [r3, #5]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_DAC_ConfigChannel+0x2c>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e198      	b.n	8003cde <HAL_DAC_ConfigChannel+0x35e>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2202      	movs	r2, #2
 80039b6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d17a      	bne.n	8003ab6 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80039c0:	f7fe fb5c 	bl	800207c <HAL_GetTick>
 80039c4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d13d      	bne.n	8003a48 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039cc:	e018      	b.n	8003a00 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039ce:	f7fe fb55 	bl	800207c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d911      	bls.n	8003a00 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f043 0208 	orr.w	r2, r3, #8
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2203      	movs	r2, #3
 80039fa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e16e      	b.n	8003cde <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1df      	bne.n	80039ce <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a16:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a18:	e020      	b.n	8003a5c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003a1a:	f7fe fb2f 	bl	800207c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d90f      	bls.n	8003a48 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	da0a      	bge.n	8003a48 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f043 0208 	orr.w	r2, r3, #8
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2203      	movs	r2, #3
 8003a42:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e14a      	b.n	8003cde <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	dbe3      	blt.n	8003a1a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a5a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	ea02 0103 	and.w	r1, r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	409a      	lsls	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	21ff      	movs	r1, #255	@ 0xff
 8003a98:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	ea02 0103 	and.w	r1, r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	409a      	lsls	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d11d      	bne.n	8003afa <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	221f      	movs	r2, #31
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aee:	4313      	orrs	r3, r2
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2207      	movs	r2, #7
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b12:	4013      	ands	r3, r2
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d102      	bne.n	8003b24 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	623b      	str	r3, [r7, #32]
 8003b22:	e00f      	b.n	8003b44 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d102      	bne.n	8003b32 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	623b      	str	r3, [r7, #32]
 8003b30:	e008      	b.n	8003b44 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	e001      	b.n	8003b44 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	6a3a      	ldr	r2, [r7, #32]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b66:	4013      	ands	r3, r2
 8003b68:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	791b      	ldrb	r3, [r3, #4]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d102      	bne.n	8003b78 <HAL_DAC_ConfigChannel+0x1f8>
 8003b72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b76:	e000      	b.n	8003b7a <HAL_DAC_ConfigChannel+0x1fa>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b92:	4013      	ands	r3, r2
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	795b      	ldrb	r3, [r3, #5]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d102      	bne.n	8003ba4 <HAL_DAC_ConfigChannel+0x224>
 8003b9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ba2:	e000      	b.n	8003ba6 <HAL_DAC_ConfigChannel+0x226>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bae:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d114      	bne.n	8003be6 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003bbc:	f001 fb3a 	bl	8005234 <HAL_RCC_GetHCLKFreq>
 8003bc0:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4a48      	ldr	r2, [pc, #288]	@ (8003ce8 <HAL_DAC_ConfigChannel+0x368>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d904      	bls.n	8003bd4 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bd2:	e00f      	b.n	8003bf4 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4a45      	ldr	r2, [pc, #276]	@ (8003cec <HAL_DAC_ConfigChannel+0x36c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d90a      	bls.n	8003bf2 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be4:	e006      	b.n	8003bf4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bec:	4313      	orrs	r3, r2
 8003bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf0:	e000      	b.n	8003bf4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003bf2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c02:	4313      	orrs	r3, r2
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6819      	ldr	r1, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43da      	mvns	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	400a      	ands	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c46:	4013      	ands	r3, r2
 8003c48:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c68:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6819      	ldr	r1, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	22c0      	movs	r2, #192	@ 0xc0
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43da      	mvns	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	400a      	ands	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	021b      	lsls	r3, r3, #8
 8003c9a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	ea02 0103 	and.w	r1, r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003cdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3728      	adds	r7, #40	@ 0x28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	09896800 	.word	0x09896800
 8003cec:	04c4b400 	.word	0x04c4b400

08003cf0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7fd facc 	bl	800129c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	711a      	strb	r2, [r3, #4]
}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f7ff fe18 	bl	8003956 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f043 0204 	orr.w	r2, r3, #4
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f7ff fe0e 	bl	800396a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	711a      	strb	r2, [r3, #4]
}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f7ff ffd8 	bl	8003d5c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	711a      	strb	r2, [r3, #4]
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f7ff ffd1 	bl	8003d70 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f043 0204 	orr.w	r2, r3, #4
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f7ff ffc7 	bl	8003d84 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	711a      	strb	r2, [r3, #4]
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e08d      	b.n	8003f32 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4b47      	ldr	r3, [pc, #284]	@ (8003f3c <HAL_DMA_Init+0x138>)
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d80f      	bhi.n	8003e42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	4b45      	ldr	r3, [pc, #276]	@ (8003f40 <HAL_DMA_Init+0x13c>)
 8003e2a:	4413      	add	r3, r2
 8003e2c:	4a45      	ldr	r2, [pc, #276]	@ (8003f44 <HAL_DMA_Init+0x140>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	009a      	lsls	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a42      	ldr	r2, [pc, #264]	@ (8003f48 <HAL_DMA_Init+0x144>)
 8003e3e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e40:	e00e      	b.n	8003e60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b40      	ldr	r3, [pc, #256]	@ (8003f4c <HAL_DMA_Init+0x148>)
 8003e4a:	4413      	add	r3, r2
 8003e4c:	4a3d      	ldr	r2, [pc, #244]	@ (8003f44 <HAL_DMA_Init+0x140>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	091b      	lsrs	r3, r3, #4
 8003e54:	009a      	lsls	r2, r3, #2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f50 <HAL_DMA_Init+0x14c>)
 8003e5e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa76 	bl	80043a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ec0:	d102      	bne.n	8003ec8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003edc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d010      	beq.n	8003f08 <HAL_DMA_Init+0x104>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d80c      	bhi.n	8003f08 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa96 	bl	8004420 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	e008      	b.n	8003f1a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40020407 	.word	0x40020407
 8003f40:	bffdfff8 	.word	0xbffdfff8
 8003f44:	cccccccd 	.word	0xcccccccd
 8003f48:	40020000 	.word	0x40020000
 8003f4c:	bffdfbf8 	.word	0xbffdfbf8
 8003f50:	40020400 	.word	0x40020400

08003f54 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_DMA_Start_IT+0x20>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e066      	b.n	8004042 <HAL_DMA_Start_IT+0xee>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d155      	bne.n	8004034 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f9bb 	bl	8004328 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d008      	beq.n	8003fcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 020e 	orr.w	r2, r2, #14
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	e00f      	b.n	8003fec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0204 	bic.w	r2, r2, #4
 8003fda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 020a 	orr.w	r2, r2, #10
 8003fea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d007      	beq.n	800400a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004004:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004008:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004020:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e005      	b.n	8004040 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800403c:	2302      	movs	r3, #2
 800403e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004040:	7dfb      	ldrb	r3, [r7, #23]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d005      	beq.n	800406e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2204      	movs	r2, #4
 8004066:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
 800406c:	e037      	b.n	80040de <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 020e 	bic.w	r2, r2, #14
 800407c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004088:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800408c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a2:	f003 021f 	and.w	r2, r3, #31
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	2101      	movs	r1, #1
 80040ac:	fa01 f202 	lsl.w	r2, r1, r2
 80040b0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040ba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00c      	beq.n	80040de <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040d2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040dc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d00d      	beq.n	8004130 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2204      	movs	r2, #4
 8004118:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
 800412e:	e047      	b.n	80041c0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 020e 	bic.w	r2, r2, #14
 800413e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800415a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800415e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004164:	f003 021f 	and.w	r2, r3, #31
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	2101      	movs	r1, #1
 800416e:	fa01 f202 	lsl.w	r2, r1, r2
 8004172:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800417c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00c      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004190:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004194:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800419e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	4798      	blx	r3
    }
  }
  return status;
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	2204      	movs	r2, #4
 80041ec:	409a      	lsls	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d026      	beq.n	8004244 <HAL_DMA_IRQHandler+0x7a>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d021      	beq.n	8004244 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d107      	bne.n	800421e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0204 	bic.w	r2, r2, #4
 800421c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	f003 021f 	and.w	r2, r3, #31
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	2104      	movs	r1, #4
 800422c:	fa01 f202 	lsl.w	r2, r1, r2
 8004230:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	2b00      	cmp	r3, #0
 8004238:	d071      	beq.n	800431e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004242:	e06c      	b.n	800431e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	2202      	movs	r2, #2
 800424e:	409a      	lsls	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d02e      	beq.n	80042b6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d029      	beq.n	80042b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 020a 	bic.w	r2, r2, #10
 800427e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428c:	f003 021f 	and.w	r2, r3, #31
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004294:	2102      	movs	r1, #2
 8004296:	fa01 f202 	lsl.w	r2, r1, r2
 800429a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d038      	beq.n	800431e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042b4:	e033      	b.n	800431e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2208      	movs	r2, #8
 80042c0:	409a      	lsls	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d02a      	beq.n	8004320 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d025      	beq.n	8004320 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 020e 	bic.w	r2, r2, #14
 80042e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e8:	f003 021f 	and.w	r2, r3, #31
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	2101      	movs	r1, #1
 80042f2:	fa01 f202 	lsl.w	r2, r1, r2
 80042f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004312:	2b00      	cmp	r3, #0
 8004314:	d004      	beq.n	8004320 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800431e:	bf00      	nop
 8004320:	bf00      	nop
}
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800433e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004350:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	f003 021f 	and.w	r2, r3, #31
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	2101      	movs	r1, #1
 8004360:	fa01 f202 	lsl.w	r2, r1, r2
 8004364:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b10      	cmp	r3, #16
 8004374:	d108      	bne.n	8004388 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004386:	e007      	b.n	8004398 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	60da      	str	r2, [r3, #12]
}
 8004398:	bf00      	nop
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	4b16      	ldr	r3, [pc, #88]	@ (800440c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d802      	bhi.n	80043be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80043b8:	4b15      	ldr	r3, [pc, #84]	@ (8004410 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	e001      	b.n	80043c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80043be:	4b15      	ldr	r3, [pc, #84]	@ (8004414 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80043c0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	3b08      	subs	r3, #8
 80043ce:	4a12      	ldr	r2, [pc, #72]	@ (8004418 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80043d0:	fba2 2303 	umull	r2, r3, r2, r3
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	009a      	lsls	r2, r3, #2
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	4413      	add	r3, r2
 80043e4:	461a      	mov	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a0b      	ldr	r2, [pc, #44]	@ (800441c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80043ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	2201      	movs	r2, #1
 80043f8:	409a      	lsls	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40020407 	.word	0x40020407
 8004410:	40020800 	.word	0x40020800
 8004414:	40020820 	.word	0x40020820
 8004418:	cccccccd 	.word	0xcccccccd
 800441c:	40020880 	.word	0x40020880

08004420 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	461a      	mov	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a08      	ldr	r2, [pc, #32]	@ (8004464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004442:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3b01      	subs	r3, #1
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2201      	movs	r2, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	1000823f 	.word	0x1000823f
 8004464:	40020940 	.word	0x40020940

08004468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004476:	e15a      	b.n	800472e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	2101      	movs	r1, #1
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	fa01 f303 	lsl.w	r3, r1, r3
 8004484:	4013      	ands	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 814c 	beq.w	8004728 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d005      	beq.n	80044a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d130      	bne.n	800450a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	2203      	movs	r2, #3
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4013      	ands	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044de:	2201      	movs	r2, #1
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4013      	ands	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	f003 0201 	and.w	r2, r3, #1
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b03      	cmp	r3, #3
 8004514:	d017      	beq.n	8004546 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	2203      	movs	r2, #3
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4013      	ands	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d123      	bne.n	800459a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	08da      	lsrs	r2, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3208      	adds	r2, #8
 800455a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800455e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	220f      	movs	r2, #15
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4013      	ands	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	08da      	lsrs	r2, r3, #3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3208      	adds	r2, #8
 8004594:	6939      	ldr	r1, [r7, #16]
 8004596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	2203      	movs	r2, #3
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4013      	ands	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 0203 	and.w	r2, r3, #3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 80a6 	beq.w	8004728 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045dc:	4b5b      	ldr	r3, [pc, #364]	@ (800474c <HAL_GPIO_Init+0x2e4>)
 80045de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e0:	4a5a      	ldr	r2, [pc, #360]	@ (800474c <HAL_GPIO_Init+0x2e4>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80045e8:	4b58      	ldr	r3, [pc, #352]	@ (800474c <HAL_GPIO_Init+0x2e4>)
 80045ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045f4:	4a56      	ldr	r2, [pc, #344]	@ (8004750 <HAL_GPIO_Init+0x2e8>)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	089b      	lsrs	r3, r3, #2
 80045fa:	3302      	adds	r3, #2
 80045fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	220f      	movs	r2, #15
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	43db      	mvns	r3, r3
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4013      	ands	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800461e:	d01f      	beq.n	8004660 <HAL_GPIO_Init+0x1f8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a4c      	ldr	r2, [pc, #304]	@ (8004754 <HAL_GPIO_Init+0x2ec>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d019      	beq.n	800465c <HAL_GPIO_Init+0x1f4>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a4b      	ldr	r2, [pc, #300]	@ (8004758 <HAL_GPIO_Init+0x2f0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d013      	beq.n	8004658 <HAL_GPIO_Init+0x1f0>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a4a      	ldr	r2, [pc, #296]	@ (800475c <HAL_GPIO_Init+0x2f4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00d      	beq.n	8004654 <HAL_GPIO_Init+0x1ec>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a49      	ldr	r2, [pc, #292]	@ (8004760 <HAL_GPIO_Init+0x2f8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <HAL_GPIO_Init+0x1e8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a48      	ldr	r2, [pc, #288]	@ (8004764 <HAL_GPIO_Init+0x2fc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d101      	bne.n	800464c <HAL_GPIO_Init+0x1e4>
 8004648:	2305      	movs	r3, #5
 800464a:	e00a      	b.n	8004662 <HAL_GPIO_Init+0x1fa>
 800464c:	2306      	movs	r3, #6
 800464e:	e008      	b.n	8004662 <HAL_GPIO_Init+0x1fa>
 8004650:	2304      	movs	r3, #4
 8004652:	e006      	b.n	8004662 <HAL_GPIO_Init+0x1fa>
 8004654:	2303      	movs	r3, #3
 8004656:	e004      	b.n	8004662 <HAL_GPIO_Init+0x1fa>
 8004658:	2302      	movs	r3, #2
 800465a:	e002      	b.n	8004662 <HAL_GPIO_Init+0x1fa>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <HAL_GPIO_Init+0x1fa>
 8004660:	2300      	movs	r3, #0
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	f002 0203 	and.w	r2, r2, #3
 8004668:	0092      	lsls	r2, r2, #2
 800466a:	4093      	lsls	r3, r2
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004672:	4937      	ldr	r1, [pc, #220]	@ (8004750 <HAL_GPIO_Init+0x2e8>)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	089b      	lsrs	r3, r3, #2
 8004678:	3302      	adds	r3, #2
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004680:	4b39      	ldr	r3, [pc, #228]	@ (8004768 <HAL_GPIO_Init+0x300>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	43db      	mvns	r3, r3
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046a4:	4a30      	ldr	r2, [pc, #192]	@ (8004768 <HAL_GPIO_Init+0x300>)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004768 <HAL_GPIO_Init+0x300>)
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	43db      	mvns	r3, r3
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4013      	ands	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046ce:	4a26      	ldr	r2, [pc, #152]	@ (8004768 <HAL_GPIO_Init+0x300>)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80046d4:	4b24      	ldr	r3, [pc, #144]	@ (8004768 <HAL_GPIO_Init+0x300>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	43db      	mvns	r3, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4013      	ands	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004768 <HAL_GPIO_Init+0x300>)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004768 <HAL_GPIO_Init+0x300>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	43db      	mvns	r3, r3
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4013      	ands	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004722:	4a11      	ldr	r2, [pc, #68]	@ (8004768 <HAL_GPIO_Init+0x300>)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	3301      	adds	r3, #1
 800472c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	f47f ae9d 	bne.w	8004478 <HAL_GPIO_Init+0x10>
  }
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40021000 	.word	0x40021000
 8004750:	40010000 	.word	0x40010000
 8004754:	48000400 	.word	0x48000400
 8004758:	48000800 	.word	0x48000800
 800475c:	48000c00 	.word	0x48000c00
 8004760:	48001000 	.word	0x48001000
 8004764:	48001400 	.word	0x48001400
 8004768:	40010400 	.word	0x40010400

0800476c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d141      	bne.n	80047fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800477a:	4b4b      	ldr	r3, [pc, #300]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004786:	d131      	bne.n	80047ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004788:	4b47      	ldr	r3, [pc, #284]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800478a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800478e:	4a46      	ldr	r2, [pc, #280]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004794:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004798:	4b43      	ldr	r3, [pc, #268]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047a0:	4a41      	ldr	r2, [pc, #260]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047a8:	4b40      	ldr	r3, [pc, #256]	@ (80048ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2232      	movs	r2, #50	@ 0x32
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	4a3f      	ldr	r2, [pc, #252]	@ (80048b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047b4:	fba2 2303 	umull	r2, r3, r2, r3
 80047b8:	0c9b      	lsrs	r3, r3, #18
 80047ba:	3301      	adds	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047be:	e002      	b.n	80047c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047c6:	4b38      	ldr	r3, [pc, #224]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d2:	d102      	bne.n	80047da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f2      	bne.n	80047c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047da:	4b33      	ldr	r3, [pc, #204]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e6:	d158      	bne.n	800489a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e057      	b.n	800489c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047ec:	4b2e      	ldr	r3, [pc, #184]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047f2:	4a2d      	ldr	r2, [pc, #180]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80047fc:	e04d      	b.n	800489a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004804:	d141      	bne.n	800488a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004806:	4b28      	ldr	r3, [pc, #160]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800480e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004812:	d131      	bne.n	8004878 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004814:	4b24      	ldr	r3, [pc, #144]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800481a:	4a23      	ldr	r2, [pc, #140]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004820:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004824:	4b20      	ldr	r3, [pc, #128]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800482c:	4a1e      	ldr	r2, [pc, #120]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800482e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004832:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004834:	4b1d      	ldr	r3, [pc, #116]	@ (80048ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2232      	movs	r2, #50	@ 0x32
 800483a:	fb02 f303 	mul.w	r3, r2, r3
 800483e:	4a1c      	ldr	r2, [pc, #112]	@ (80048b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004840:	fba2 2303 	umull	r2, r3, r2, r3
 8004844:	0c9b      	lsrs	r3, r3, #18
 8004846:	3301      	adds	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800484a:	e002      	b.n	8004852 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3b01      	subs	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004852:	4b15      	ldr	r3, [pc, #84]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800485e:	d102      	bne.n	8004866 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f2      	bne.n	800484c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004866:	4b10      	ldr	r3, [pc, #64]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800486e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004872:	d112      	bne.n	800489a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e011      	b.n	800489c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004878:	4b0b      	ldr	r3, [pc, #44]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800487e:	4a0a      	ldr	r2, [pc, #40]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004884:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004888:	e007      	b.n	800489a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800488a:	4b07      	ldr	r3, [pc, #28]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004892:	4a05      	ldr	r2, [pc, #20]	@ (80048a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004894:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004898:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	40007000 	.word	0x40007000
 80048ac:	20000400 	.word	0x20000400
 80048b0:	431bde83 	.word	0x431bde83

080048b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80048b8:	4b05      	ldr	r3, [pc, #20]	@ (80048d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	4a04      	ldr	r2, [pc, #16]	@ (80048d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048c2:	6093      	str	r3, [r2, #8]
}
 80048c4:	bf00      	nop
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40007000 	.word	0x40007000

080048d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e2fe      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d075      	beq.n	80049de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048f2:	4b97      	ldr	r3, [pc, #604]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048fc:	4b94      	ldr	r3, [pc, #592]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b0c      	cmp	r3, #12
 800490a:	d102      	bne.n	8004912 <HAL_RCC_OscConfig+0x3e>
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d002      	beq.n	8004918 <HAL_RCC_OscConfig+0x44>
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b08      	cmp	r3, #8
 8004916:	d10b      	bne.n	8004930 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004918:	4b8d      	ldr	r3, [pc, #564]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d05b      	beq.n	80049dc <HAL_RCC_OscConfig+0x108>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d157      	bne.n	80049dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e2d9      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004938:	d106      	bne.n	8004948 <HAL_RCC_OscConfig+0x74>
 800493a:	4b85      	ldr	r3, [pc, #532]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a84      	ldr	r2, [pc, #528]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	e01d      	b.n	8004984 <HAL_RCC_OscConfig+0xb0>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004950:	d10c      	bne.n	800496c <HAL_RCC_OscConfig+0x98>
 8004952:	4b7f      	ldr	r3, [pc, #508]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a7e      	ldr	r2, [pc, #504]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a7b      	ldr	r2, [pc, #492]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e00b      	b.n	8004984 <HAL_RCC_OscConfig+0xb0>
 800496c:	4b78      	ldr	r3, [pc, #480]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a77      	ldr	r2, [pc, #476]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	4b75      	ldr	r3, [pc, #468]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a74      	ldr	r2, [pc, #464]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 800497e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d013      	beq.n	80049b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fd fb76 	bl	800207c <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004994:	f7fd fb72 	bl	800207c <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	@ 0x64
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e29e      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0xc0>
 80049b2:	e014      	b.n	80049de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd fb62 	bl	800207c <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049bc:	f7fd fb5e 	bl	800207c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	@ 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e28a      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ce:	4b60      	ldr	r3, [pc, #384]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0xe8>
 80049da:	e000      	b.n	80049de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d075      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ea:	4b59      	ldr	r3, [pc, #356]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049f4:	4b56      	ldr	r3, [pc, #344]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0303 	and.w	r3, r3, #3
 80049fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	d102      	bne.n	8004a0a <HAL_RCC_OscConfig+0x136>
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d002      	beq.n	8004a10 <HAL_RCC_OscConfig+0x13c>
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d11f      	bne.n	8004a50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a10:	4b4f      	ldr	r3, [pc, #316]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_OscConfig+0x154>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e25d      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4b49      	ldr	r3, [pc, #292]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	061b      	lsls	r3, r3, #24
 8004a36:	4946      	ldr	r1, [pc, #280]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a3c:	4b45      	ldr	r3, [pc, #276]	@ (8004b54 <HAL_RCC_OscConfig+0x280>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fd f935 	bl	8001cb0 <HAL_InitTick>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d043      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e249      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d023      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a58:	4b3d      	ldr	r3, [pc, #244]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fd fb0a 	bl	800207c <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a6c:	f7fd fb06 	bl	800207c <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e232      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a7e:	4b34      	ldr	r3, [pc, #208]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8a:	4b31      	ldr	r3, [pc, #196]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	061b      	lsls	r3, r3, #24
 8004a98:	492d      	ldr	r1, [pc, #180]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	604b      	str	r3, [r1, #4]
 8004a9e:	e01a      	b.n	8004ad6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a2a      	ldr	r2, [pc, #168]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004aa6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fd fae6 	bl	800207c <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ab4:	f7fd fae2 	bl	800207c <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e20e      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ac6:	4b22      	ldr	r3, [pc, #136]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x1e0>
 8004ad2:	e000      	b.n	8004ad6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ad4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d041      	beq.n	8004b66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01c      	beq.n	8004b24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aea:	4b19      	ldr	r3, [pc, #100]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004af0:	4a17      	ldr	r2, [pc, #92]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fd fabf 	bl	800207c <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b02:	f7fd fabb 	bl	800207c <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e1e7      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b14:	4b0e      	ldr	r3, [pc, #56]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0ef      	beq.n	8004b02 <HAL_RCC_OscConfig+0x22e>
 8004b22:	e020      	b.n	8004b66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b24:	4b0a      	ldr	r3, [pc, #40]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b2a:	4a09      	ldr	r2, [pc, #36]	@ (8004b50 <HAL_RCC_OscConfig+0x27c>)
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b34:	f7fd faa2 	bl	800207c <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b3a:	e00d      	b.n	8004b58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3c:	f7fd fa9e 	bl	800207c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d906      	bls.n	8004b58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e1ca      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000
 8004b54:	20000404 	.word	0x20000404
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b58:	4b8c      	ldr	r3, [pc, #560]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1ea      	bne.n	8004b3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 80a6 	beq.w	8004cc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b74:	2300      	movs	r3, #0
 8004b76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b78:	4b84      	ldr	r3, [pc, #528]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_RCC_OscConfig+0x2b4>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <HAL_RCC_OscConfig+0x2b6>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00d      	beq.n	8004baa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b92:	4a7e      	ldr	r2, [pc, #504]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b9a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004baa:	4b79      	ldr	r3, [pc, #484]	@ (8004d90 <HAL_RCC_OscConfig+0x4bc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d118      	bne.n	8004be8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bb6:	4b76      	ldr	r3, [pc, #472]	@ (8004d90 <HAL_RCC_OscConfig+0x4bc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a75      	ldr	r2, [pc, #468]	@ (8004d90 <HAL_RCC_OscConfig+0x4bc>)
 8004bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc2:	f7fd fa5b 	bl	800207c <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bca:	f7fd fa57 	bl	800207c <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e183      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8004d90 <HAL_RCC_OscConfig+0x4bc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d108      	bne.n	8004c02 <HAL_RCC_OscConfig+0x32e>
 8004bf0:	4b66      	ldr	r3, [pc, #408]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf6:	4a65      	ldr	r2, [pc, #404]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c00:	e024      	b.n	8004c4c <HAL_RCC_OscConfig+0x378>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b05      	cmp	r3, #5
 8004c08:	d110      	bne.n	8004c2c <HAL_RCC_OscConfig+0x358>
 8004c0a:	4b60      	ldr	r3, [pc, #384]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c10:	4a5e      	ldr	r2, [pc, #376]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004c12:	f043 0304 	orr.w	r3, r3, #4
 8004c16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c1a:	4b5c      	ldr	r3, [pc, #368]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c20:	4a5a      	ldr	r2, [pc, #360]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c2a:	e00f      	b.n	8004c4c <HAL_RCC_OscConfig+0x378>
 8004c2c:	4b57      	ldr	r3, [pc, #348]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c32:	4a56      	ldr	r2, [pc, #344]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c3c:	4b53      	ldr	r3, [pc, #332]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c42:	4a52      	ldr	r2, [pc, #328]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004c44:	f023 0304 	bic.w	r3, r3, #4
 8004c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d016      	beq.n	8004c82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c54:	f7fd fa12 	bl	800207c <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c5a:	e00a      	b.n	8004c72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c5c:	f7fd fa0e 	bl	800207c <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e138      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c72:	4b46      	ldr	r3, [pc, #280]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0ed      	beq.n	8004c5c <HAL_RCC_OscConfig+0x388>
 8004c80:	e015      	b.n	8004cae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c82:	f7fd f9fb 	bl	800207c <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c88:	e00a      	b.n	8004ca0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fd f9f7 	bl	800207c <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e121      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1ed      	bne.n	8004c8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cae:	7ffb      	ldrb	r3, [r7, #31]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d105      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb4:	4b35      	ldr	r3, [pc, #212]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb8:	4a34      	ldr	r2, [pc, #208]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cbe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d03c      	beq.n	8004d46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01c      	beq.n	8004d0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cda:	4a2c      	ldr	r2, [pc, #176]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fd f9ca 	bl	800207c <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cec:	f7fd f9c6 	bl	800207c <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e0f2      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cfe:	4b23      	ldr	r3, [pc, #140]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0ef      	beq.n	8004cec <HAL_RCC_OscConfig+0x418>
 8004d0c:	e01b      	b.n	8004d46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d14:	4a1d      	ldr	r2, [pc, #116]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004d16:	f023 0301 	bic.w	r3, r3, #1
 8004d1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1e:	f7fd f9ad 	bl	800207c <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d26:	f7fd f9a9 	bl	800207c <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e0d5      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d38:	4b14      	ldr	r3, [pc, #80]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1ef      	bne.n	8004d26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 80c9 	beq.w	8004ee2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d50:	4b0e      	ldr	r3, [pc, #56]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 030c 	and.w	r3, r3, #12
 8004d58:	2b0c      	cmp	r3, #12
 8004d5a:	f000 8083 	beq.w	8004e64 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d15e      	bne.n	8004e24 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d66:	4b09      	ldr	r3, [pc, #36]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a08      	ldr	r2, [pc, #32]	@ (8004d8c <HAL_RCC_OscConfig+0x4b8>)
 8004d6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d72:	f7fd f983 	bl	800207c <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d78:	e00c      	b.n	8004d94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7a:	f7fd f97f 	bl	800207c <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d905      	bls.n	8004d94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e0ab      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d94:	4b55      	ldr	r3, [pc, #340]	@ (8004eec <HAL_RCC_OscConfig+0x618>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1ec      	bne.n	8004d7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004da0:	4b52      	ldr	r3, [pc, #328]	@ (8004eec <HAL_RCC_OscConfig+0x618>)
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	4b52      	ldr	r3, [pc, #328]	@ (8004ef0 <HAL_RCC_OscConfig+0x61c>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6a11      	ldr	r1, [r2, #32]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004db0:	3a01      	subs	r2, #1
 8004db2:	0112      	lsls	r2, r2, #4
 8004db4:	4311      	orrs	r1, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004dba:	0212      	lsls	r2, r2, #8
 8004dbc:	4311      	orrs	r1, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004dc2:	0852      	lsrs	r2, r2, #1
 8004dc4:	3a01      	subs	r2, #1
 8004dc6:	0552      	lsls	r2, r2, #21
 8004dc8:	4311      	orrs	r1, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004dce:	0852      	lsrs	r2, r2, #1
 8004dd0:	3a01      	subs	r2, #1
 8004dd2:	0652      	lsls	r2, r2, #25
 8004dd4:	4311      	orrs	r1, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004dda:	06d2      	lsls	r2, r2, #27
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	4943      	ldr	r1, [pc, #268]	@ (8004eec <HAL_RCC_OscConfig+0x618>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004de4:	4b41      	ldr	r3, [pc, #260]	@ (8004eec <HAL_RCC_OscConfig+0x618>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a40      	ldr	r2, [pc, #256]	@ (8004eec <HAL_RCC_OscConfig+0x618>)
 8004dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004df0:	4b3e      	ldr	r3, [pc, #248]	@ (8004eec <HAL_RCC_OscConfig+0x618>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4a3d      	ldr	r2, [pc, #244]	@ (8004eec <HAL_RCC_OscConfig+0x618>)
 8004df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dfa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fd f93e 	bl	800207c <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e04:	f7fd f93a 	bl	800207c <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e066      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e16:	4b35      	ldr	r3, [pc, #212]	@ (8004eec <HAL_RCC_OscConfig+0x618>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0x530>
 8004e22:	e05e      	b.n	8004ee2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e24:	4b31      	ldr	r3, [pc, #196]	@ (8004eec <HAL_RCC_OscConfig+0x618>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a30      	ldr	r2, [pc, #192]	@ (8004eec <HAL_RCC_OscConfig+0x618>)
 8004e2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fd f924 	bl	800207c <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e38:	f7fd f920 	bl	800207c <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e04c      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e4a:	4b28      	ldr	r3, [pc, #160]	@ (8004eec <HAL_RCC_OscConfig+0x618>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e56:	4b25      	ldr	r3, [pc, #148]	@ (8004eec <HAL_RCC_OscConfig+0x618>)
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	4924      	ldr	r1, [pc, #144]	@ (8004eec <HAL_RCC_OscConfig+0x618>)
 8004e5c:	4b25      	ldr	r3, [pc, #148]	@ (8004ef4 <HAL_RCC_OscConfig+0x620>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	60cb      	str	r3, [r1, #12]
 8004e62:	e03e      	b.n	8004ee2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e039      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e70:	4b1e      	ldr	r3, [pc, #120]	@ (8004eec <HAL_RCC_OscConfig+0x618>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f003 0203 	and.w	r2, r3, #3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d12c      	bne.n	8004ede <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d123      	bne.n	8004ede <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d11b      	bne.n	8004ede <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d113      	bne.n	8004ede <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d109      	bne.n	8004ede <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d001      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	019f800c 	.word	0x019f800c
 8004ef4:	feeefffc 	.word	0xfeeefffc

08004ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f02:	2300      	movs	r3, #0
 8004f04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e11e      	b.n	800514e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f10:	4b91      	ldr	r3, [pc, #580]	@ (8005158 <HAL_RCC_ClockConfig+0x260>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d910      	bls.n	8004f40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1e:	4b8e      	ldr	r3, [pc, #568]	@ (8005158 <HAL_RCC_ClockConfig+0x260>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f023 020f 	bic.w	r2, r3, #15
 8004f26:	498c      	ldr	r1, [pc, #560]	@ (8005158 <HAL_RCC_ClockConfig+0x260>)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2e:	4b8a      	ldr	r3, [pc, #552]	@ (8005158 <HAL_RCC_ClockConfig+0x260>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e106      	b.n	800514e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d073      	beq.n	8005034 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d129      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f54:	4b81      	ldr	r3, [pc, #516]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0f4      	b.n	800514e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f64:	f000 f9d0 	bl	8005308 <RCC_GetSysClockFreqFromPLLSource>
 8004f68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4a7c      	ldr	r2, [pc, #496]	@ (8005160 <HAL_RCC_ClockConfig+0x268>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d93f      	bls.n	8004ff2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f72:	4b7a      	ldr	r3, [pc, #488]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d009      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d033      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d12f      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f92:	4b72      	ldr	r3, [pc, #456]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f9a:	4a70      	ldr	r2, [pc, #448]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8004f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fa0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fa2:	2380      	movs	r3, #128	@ 0x80
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e024      	b.n	8004ff2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fb0:	4b6a      	ldr	r3, [pc, #424]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0c6      	b.n	800514e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fc0:	4b66      	ldr	r3, [pc, #408]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0be      	b.n	800514e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004fd0:	f000 f8ce 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8004fd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4a61      	ldr	r2, [pc, #388]	@ (8005160 <HAL_RCC_ClockConfig+0x268>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d909      	bls.n	8004ff2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fde:	4b5f      	ldr	r3, [pc, #380]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fe6:	4a5d      	ldr	r2, [pc, #372]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8004fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004fee:	2380      	movs	r3, #128	@ 0x80
 8004ff0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ff2:	4b5a      	ldr	r3, [pc, #360]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f023 0203 	bic.w	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4957      	ldr	r1, [pc, #348]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8005000:	4313      	orrs	r3, r2
 8005002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005004:	f7fd f83a 	bl	800207c <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500a:	e00a      	b.n	8005022 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800500c:	f7fd f836 	bl	800207c <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800501a:	4293      	cmp	r3, r2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e095      	b.n	800514e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005022:	4b4e      	ldr	r3, [pc, #312]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 020c 	and.w	r2, r3, #12
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	429a      	cmp	r2, r3
 8005032:	d1eb      	bne.n	800500c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d023      	beq.n	8005088 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800504c:	4b43      	ldr	r3, [pc, #268]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	4a42      	ldr	r2, [pc, #264]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8005052:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005056:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005064:	4b3d      	ldr	r3, [pc, #244]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800506c:	4a3b      	ldr	r2, [pc, #236]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 800506e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005072:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005074:	4b39      	ldr	r3, [pc, #228]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	4936      	ldr	r1, [pc, #216]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
 8005086:	e008      	b.n	800509a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2b80      	cmp	r3, #128	@ 0x80
 800508c:	d105      	bne.n	800509a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800508e:	4b33      	ldr	r3, [pc, #204]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	4a32      	ldr	r2, [pc, #200]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8005094:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005098:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800509a:	4b2f      	ldr	r3, [pc, #188]	@ (8005158 <HAL_RCC_ClockConfig+0x260>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d21d      	bcs.n	80050e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005158 <HAL_RCC_ClockConfig+0x260>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f023 020f 	bic.w	r2, r3, #15
 80050b0:	4929      	ldr	r1, [pc, #164]	@ (8005158 <HAL_RCC_ClockConfig+0x260>)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050b8:	f7fc ffe0 	bl	800207c <HAL_GetTick>
 80050bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050be:	e00a      	b.n	80050d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c0:	f7fc ffdc 	bl	800207c <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e03b      	b.n	800514e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b20      	ldr	r3, [pc, #128]	@ (8005158 <HAL_RCC_ClockConfig+0x260>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d1ed      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f0:	4b1a      	ldr	r3, [pc, #104]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4917      	ldr	r1, [pc, #92]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800510e:	4b13      	ldr	r3, [pc, #76]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	490f      	ldr	r1, [pc, #60]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 800511e:	4313      	orrs	r3, r2
 8005120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005122:	f000 f825 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8005126:	4602      	mov	r2, r0
 8005128:	4b0c      	ldr	r3, [pc, #48]	@ (800515c <HAL_RCC_ClockConfig+0x264>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	490c      	ldr	r1, [pc, #48]	@ (8005164 <HAL_RCC_ClockConfig+0x26c>)
 8005134:	5ccb      	ldrb	r3, [r1, r3]
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	fa22 f303 	lsr.w	r3, r2, r3
 800513e:	4a0a      	ldr	r2, [pc, #40]	@ (8005168 <HAL_RCC_ClockConfig+0x270>)
 8005140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005142:	4b0a      	ldr	r3, [pc, #40]	@ (800516c <HAL_RCC_ClockConfig+0x274>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7fc fdb2 	bl	8001cb0 <HAL_InitTick>
 800514c:	4603      	mov	r3, r0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40022000 	.word	0x40022000
 800515c:	40021000 	.word	0x40021000
 8005160:	04c4b400 	.word	0x04c4b400
 8005164:	0800e8d8 	.word	0x0800e8d8
 8005168:	20000400 	.word	0x20000400
 800516c:	20000404 	.word	0x20000404

08005170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005176:	4b2c      	ldr	r3, [pc, #176]	@ (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 030c 	and.w	r3, r3, #12
 800517e:	2b04      	cmp	r3, #4
 8005180:	d102      	bne.n	8005188 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005182:	4b2a      	ldr	r3, [pc, #168]	@ (800522c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	e047      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005188:	4b27      	ldr	r3, [pc, #156]	@ (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 030c 	and.w	r3, r3, #12
 8005190:	2b08      	cmp	r3, #8
 8005192:	d102      	bne.n	800519a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005194:	4b26      	ldr	r3, [pc, #152]	@ (8005230 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	e03e      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800519a:	4b23      	ldr	r3, [pc, #140]	@ (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b0c      	cmp	r3, #12
 80051a4:	d136      	bne.n	8005214 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051a6:	4b20      	ldr	r3, [pc, #128]	@ (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	3301      	adds	r3, #1
 80051bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d10c      	bne.n	80051de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005230 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051cc:	4a16      	ldr	r2, [pc, #88]	@ (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ce:	68d2      	ldr	r2, [r2, #12]
 80051d0:	0a12      	lsrs	r2, r2, #8
 80051d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051d6:	fb02 f303 	mul.w	r3, r2, r3
 80051da:	617b      	str	r3, [r7, #20]
      break;
 80051dc:	e00c      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051de:	4a13      	ldr	r2, [pc, #76]	@ (800522c <HAL_RCC_GetSysClockFreq+0xbc>)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e6:	4a10      	ldr	r2, [pc, #64]	@ (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051e8:	68d2      	ldr	r2, [r2, #12]
 80051ea:	0a12      	lsrs	r2, r2, #8
 80051ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051f0:	fb02 f303 	mul.w	r3, r2, r3
 80051f4:	617b      	str	r3, [r7, #20]
      break;
 80051f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	0e5b      	lsrs	r3, r3, #25
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	3301      	adds	r3, #1
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	e001      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005218:	693b      	ldr	r3, [r7, #16]
}
 800521a:	4618      	mov	r0, r3
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40021000 	.word	0x40021000
 800522c:	00f42400 	.word	0x00f42400
 8005230:	007a1200 	.word	0x007a1200

08005234 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005238:	4b03      	ldr	r3, [pc, #12]	@ (8005248 <HAL_RCC_GetHCLKFreq+0x14>)
 800523a:	681b      	ldr	r3, [r3, #0]
}
 800523c:	4618      	mov	r0, r3
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	20000400 	.word	0x20000400

0800524c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005250:	f7ff fff0 	bl	8005234 <HAL_RCC_GetHCLKFreq>
 8005254:	4602      	mov	r2, r0
 8005256:	4b06      	ldr	r3, [pc, #24]	@ (8005270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	4904      	ldr	r1, [pc, #16]	@ (8005274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005262:	5ccb      	ldrb	r3, [r1, r3]
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800526c:	4618      	mov	r0, r3
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40021000 	.word	0x40021000
 8005274:	0800e8e8 	.word	0x0800e8e8

08005278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800527c:	f7ff ffda 	bl	8005234 <HAL_RCC_GetHCLKFreq>
 8005280:	4602      	mov	r2, r0
 8005282:	4b06      	ldr	r3, [pc, #24]	@ (800529c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	0adb      	lsrs	r3, r3, #11
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	4904      	ldr	r1, [pc, #16]	@ (80052a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800528e:	5ccb      	ldrb	r3, [r1, r3]
 8005290:	f003 031f 	and.w	r3, r3, #31
 8005294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005298:	4618      	mov	r0, r3
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40021000 	.word	0x40021000
 80052a0:	0800e8e8 	.word	0x0800e8e8

080052a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	220f      	movs	r2, #15
 80052b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80052b4:	4b12      	ldr	r3, [pc, #72]	@ (8005300 <HAL_RCC_GetClockConfig+0x5c>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0203 	and.w	r2, r3, #3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80052c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005300 <HAL_RCC_GetClockConfig+0x5c>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80052cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005300 <HAL_RCC_GetClockConfig+0x5c>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80052d8:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <HAL_RCC_GetClockConfig+0x5c>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	08db      	lsrs	r3, r3, #3
 80052de:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80052e6:	4b07      	ldr	r3, [pc, #28]	@ (8005304 <HAL_RCC_GetClockConfig+0x60>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 020f 	and.w	r2, r3, #15
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	601a      	str	r2, [r3, #0]
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40021000 	.word	0x40021000
 8005304:	40022000 	.word	0x40022000

08005308 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800530e:	4b1e      	ldr	r3, [pc, #120]	@ (8005388 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005318:	4b1b      	ldr	r3, [pc, #108]	@ (8005388 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	091b      	lsrs	r3, r3, #4
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	3301      	adds	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b03      	cmp	r3, #3
 800532a:	d10c      	bne.n	8005346 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800532c:	4a17      	ldr	r2, [pc, #92]	@ (800538c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	fbb2 f3f3 	udiv	r3, r2, r3
 8005334:	4a14      	ldr	r2, [pc, #80]	@ (8005388 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005336:	68d2      	ldr	r2, [r2, #12]
 8005338:	0a12      	lsrs	r2, r2, #8
 800533a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	617b      	str	r3, [r7, #20]
    break;
 8005344:	e00c      	b.n	8005360 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005346:	4a12      	ldr	r2, [pc, #72]	@ (8005390 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	4a0e      	ldr	r2, [pc, #56]	@ (8005388 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005350:	68d2      	ldr	r2, [r2, #12]
 8005352:	0a12      	lsrs	r2, r2, #8
 8005354:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005358:	fb02 f303 	mul.w	r3, r2, r3
 800535c:	617b      	str	r3, [r7, #20]
    break;
 800535e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005360:	4b09      	ldr	r3, [pc, #36]	@ (8005388 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	0e5b      	lsrs	r3, r3, #25
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	3301      	adds	r3, #1
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800537a:	687b      	ldr	r3, [r7, #4]
}
 800537c:	4618      	mov	r0, r3
 800537e:	371c      	adds	r7, #28
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40021000 	.word	0x40021000
 800538c:	007a1200 	.word	0x007a1200
 8005390:	00f42400 	.word	0x00f42400

08005394 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800539c:	2300      	movs	r3, #0
 800539e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053a0:	2300      	movs	r3, #0
 80053a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8098 	beq.w	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053b2:	2300      	movs	r3, #0
 80053b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053b6:	4b43      	ldr	r3, [pc, #268]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10d      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053c2:	4b40      	ldr	r3, [pc, #256]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c6:	4a3f      	ldr	r2, [pc, #252]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80053ce:	4b3d      	ldr	r3, [pc, #244]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d6:	60bb      	str	r3, [r7, #8]
 80053d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053da:	2301      	movs	r3, #1
 80053dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053de:	4b3a      	ldr	r3, [pc, #232]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a39      	ldr	r2, [pc, #228]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053ea:	f7fc fe47 	bl	800207c <HAL_GetTick>
 80053ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f0:	e009      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053f2:	f7fc fe43 	bl	800207c <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d902      	bls.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	74fb      	strb	r3, [r7, #19]
        break;
 8005404:	e005      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005406:	4b30      	ldr	r3, [pc, #192]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0ef      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005412:	7cfb      	ldrb	r3, [r7, #19]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d159      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005418:	4b2a      	ldr	r3, [pc, #168]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005422:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d01e      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	429a      	cmp	r2, r3
 8005432:	d019      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005434:	4b23      	ldr	r3, [pc, #140]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800543e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005440:	4b20      	ldr	r3, [pc, #128]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005446:	4a1f      	ldr	r2, [pc, #124]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800544c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005450:	4b1c      	ldr	r3, [pc, #112]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005456:	4a1b      	ldr	r2, [pc, #108]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005458:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800545c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005460:	4a18      	ldr	r2, [pc, #96]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d016      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005472:	f7fc fe03 	bl	800207c <HAL_GetTick>
 8005476:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005478:	e00b      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800547a:	f7fc fdff 	bl	800207c <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005488:	4293      	cmp	r3, r2
 800548a:	d902      	bls.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	74fb      	strb	r3, [r7, #19]
            break;
 8005490:	e006      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005492:	4b0c      	ldr	r3, [pc, #48]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0ec      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80054a0:	7cfb      	ldrb	r3, [r7, #19]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10b      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054a6:	4b07      	ldr	r3, [pc, #28]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b4:	4903      	ldr	r1, [pc, #12]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80054bc:	e008      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054be:	7cfb      	ldrb	r3, [r7, #19]
 80054c0:	74bb      	strb	r3, [r7, #18]
 80054c2:	e005      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054c4:	40021000 	.word	0x40021000
 80054c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054cc:	7cfb      	ldrb	r3, [r7, #19]
 80054ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054d0:	7c7b      	ldrb	r3, [r7, #17]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d105      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d6:	4ba6      	ldr	r3, [pc, #664]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054da:	4aa5      	ldr	r2, [pc, #660]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054ee:	4ba0      	ldr	r3, [pc, #640]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f4:	f023 0203 	bic.w	r2, r3, #3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	499c      	ldr	r1, [pc, #624]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005510:	4b97      	ldr	r3, [pc, #604]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005516:	f023 020c 	bic.w	r2, r3, #12
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	4994      	ldr	r1, [pc, #592]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005532:	4b8f      	ldr	r3, [pc, #572]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005538:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	498b      	ldr	r1, [pc, #556]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005554:	4b86      	ldr	r3, [pc, #536]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800555a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	4983      	ldr	r1, [pc, #524]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005564:	4313      	orrs	r3, r2
 8005566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005576:	4b7e      	ldr	r3, [pc, #504]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	497a      	ldr	r1, [pc, #488]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005598:	4b75      	ldr	r3, [pc, #468]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800559e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	4972      	ldr	r1, [pc, #456]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	4969      	ldr	r1, [pc, #420]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055dc:	4b64      	ldr	r3, [pc, #400]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	4961      	ldr	r1, [pc, #388]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055fe:	4b5c      	ldr	r3, [pc, #368]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005604:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560c:	4958      	ldr	r1, [pc, #352]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800561c:	2b00      	cmp	r3, #0
 800561e:	d015      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005620:	4b53      	ldr	r3, [pc, #332]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005626:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562e:	4950      	ldr	r1, [pc, #320]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800563e:	d105      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005640:	4b4b      	ldr	r3, [pc, #300]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	4a4a      	ldr	r2, [pc, #296]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800564a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005654:	2b00      	cmp	r3, #0
 8005656:	d015      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005658:	4b45      	ldr	r3, [pc, #276]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005666:	4942      	ldr	r1, [pc, #264]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005672:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005676:	d105      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005678:	4b3d      	ldr	r3, [pc, #244]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4a3c      	ldr	r2, [pc, #240]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800567e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005682:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d015      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005690:	4b37      	ldr	r3, [pc, #220]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005696:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569e:	4934      	ldr	r1, [pc, #208]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056ae:	d105      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d015      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056c8:	4b29      	ldr	r3, [pc, #164]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d6:	4926      	ldr	r1, [pc, #152]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056e6:	d105      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e8:	4b21      	ldr	r3, [pc, #132]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4a20      	ldr	r2, [pc, #128]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d015      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005700:	4b1b      	ldr	r3, [pc, #108]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005706:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	4918      	ldr	r1, [pc, #96]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800571e:	d105      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005720:	4b13      	ldr	r3, [pc, #76]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	4a12      	ldr	r2, [pc, #72]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800572a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d015      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005738:	4b0d      	ldr	r3, [pc, #52]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800573e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005746:	490a      	ldr	r1, [pc, #40]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005756:	d105      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005758:	4b05      	ldr	r3, [pc, #20]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	4a04      	ldr	r2, [pc, #16]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800575e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005762:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005764:	7cbb      	ldrb	r3, [r7, #18]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40021000 	.word	0x40021000

08005774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e049      	b.n	800581a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fc fa56 	bl	8001c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f000 fb9c 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	d001      	beq.n	800583c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e042      	b.n	80058c2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a21      	ldr	r2, [pc, #132]	@ (80058d0 <HAL_TIM_Base_Start+0xac>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d018      	beq.n	8005880 <HAL_TIM_Base_Start+0x5c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005856:	d013      	beq.n	8005880 <HAL_TIM_Base_Start+0x5c>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1d      	ldr	r2, [pc, #116]	@ (80058d4 <HAL_TIM_Base_Start+0xb0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <HAL_TIM_Base_Start+0x5c>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1c      	ldr	r2, [pc, #112]	@ (80058d8 <HAL_TIM_Base_Start+0xb4>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d009      	beq.n	8005880 <HAL_TIM_Base_Start+0x5c>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1a      	ldr	r2, [pc, #104]	@ (80058dc <HAL_TIM_Base_Start+0xb8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_TIM_Base_Start+0x5c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a19      	ldr	r2, [pc, #100]	@ (80058e0 <HAL_TIM_Base_Start+0xbc>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d115      	bne.n	80058ac <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	4b17      	ldr	r3, [pc, #92]	@ (80058e4 <HAL_TIM_Base_Start+0xc0>)
 8005888:	4013      	ands	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b06      	cmp	r3, #6
 8005890:	d015      	beq.n	80058be <HAL_TIM_Base_Start+0x9a>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005898:	d011      	beq.n	80058be <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0201 	orr.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058aa:	e008      	b.n	80058be <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e000      	b.n	80058c0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40012c00 	.word	0x40012c00
 80058d4:	40000400 	.word	0x40000400
 80058d8:	40000800 	.word	0x40000800
 80058dc:	40013400 	.word	0x40013400
 80058e0:	40014000 	.word	0x40014000
 80058e4:	00010007 	.word	0x00010007

080058e8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6a1a      	ldr	r2, [r3, #32]
 80058f6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10f      	bne.n	8005920 <HAL_TIM_Base_Stop+0x38>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6a1a      	ldr	r2, [r3, #32]
 8005906:	f244 4344 	movw	r3, #17476	@ 0x4444
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d107      	bne.n	8005920 <HAL_TIM_Base_Stop+0x38>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
	...

08005938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	d001      	beq.n	8005950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e04a      	b.n	80059e6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a21      	ldr	r2, [pc, #132]	@ (80059f4 <HAL_TIM_Base_Start_IT+0xbc>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d018      	beq.n	80059a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800597a:	d013      	beq.n	80059a4 <HAL_TIM_Base_Start_IT+0x6c>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a1d      	ldr	r2, [pc, #116]	@ (80059f8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00e      	beq.n	80059a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a1c      	ldr	r2, [pc, #112]	@ (80059fc <HAL_TIM_Base_Start_IT+0xc4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d009      	beq.n	80059a4 <HAL_TIM_Base_Start_IT+0x6c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1a      	ldr	r2, [pc, #104]	@ (8005a00 <HAL_TIM_Base_Start_IT+0xc8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d004      	beq.n	80059a4 <HAL_TIM_Base_Start_IT+0x6c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a19      	ldr	r2, [pc, #100]	@ (8005a04 <HAL_TIM_Base_Start_IT+0xcc>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d115      	bne.n	80059d0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	4b17      	ldr	r3, [pc, #92]	@ (8005a08 <HAL_TIM_Base_Start_IT+0xd0>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b06      	cmp	r3, #6
 80059b4:	d015      	beq.n	80059e2 <HAL_TIM_Base_Start_IT+0xaa>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059bc:	d011      	beq.n	80059e2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0201 	orr.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ce:	e008      	b.n	80059e2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	e000      	b.n	80059e4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40000400 	.word	0x40000400
 80059fc:	40000800 	.word	0x40000800
 8005a00:	40013400 	.word	0x40013400
 8005a04:	40014000 	.word	0x40014000
 8005a08:	00010007 	.word	0x00010007

08005a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d020      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01b      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0202 	mvn.w	r2, #2
 8005a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fa2c 	bl	8005eb4 <HAL_TIM_IC_CaptureCallback>
 8005a5c:	e005      	b.n	8005a6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa1e 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fa2f 	bl	8005ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d020      	beq.n	8005abc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01b      	beq.n	8005abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0204 	mvn.w	r2, #4
 8005a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fa06 	bl	8005eb4 <HAL_TIM_IC_CaptureCallback>
 8005aa8:	e005      	b.n	8005ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f9f8 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fa09 	bl	8005ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d020      	beq.n	8005b08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01b      	beq.n	8005b08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0208 	mvn.w	r2, #8
 8005ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2204      	movs	r2, #4
 8005ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f9e0 	bl	8005eb4 <HAL_TIM_IC_CaptureCallback>
 8005af4:	e005      	b.n	8005b02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f9d2 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f9e3 	bl	8005ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d020      	beq.n	8005b54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01b      	beq.n	8005b54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0210 	mvn.w	r2, #16
 8005b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2208      	movs	r2, #8
 8005b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f9ba 	bl	8005eb4 <HAL_TIM_IC_CaptureCallback>
 8005b40:	e005      	b.n	8005b4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f9ac 	bl	8005ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f9bd 	bl	8005ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00c      	beq.n	8005b78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d007      	beq.n	8005b78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0201 	mvn.w	r2, #1
 8005b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fb feac 	bl	80018d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d104      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00c      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d007      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fb69 	bl	8006278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00c      	beq.n	8005bca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d007      	beq.n	8005bca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fb61 	bl	800628c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00c      	beq.n	8005bee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f977 	bl	8005edc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00c      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d007      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f06f 0220 	mvn.w	r2, #32
 8005c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fb29 	bl	8006264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00c      	beq.n	8005c36 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d007      	beq.n	8005c36 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fb35 	bl	80062a0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00c      	beq.n	8005c5a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fb2d 	bl	80062b4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00c      	beq.n	8005c7e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d007      	beq.n	8005c7e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fb25 	bl	80062c8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00c      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d007      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fb1d 	bl	80062dc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ca2:	bf00      	nop
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIM_ConfigClockSource+0x1c>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e0de      	b.n	8005e86 <HAL_TIM_ConfigClockSource+0x1da>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005ce6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a63      	ldr	r2, [pc, #396]	@ (8005e90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	f000 80a9 	beq.w	8005e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005d08:	4a61      	ldr	r2, [pc, #388]	@ (8005e90 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	f200 80ae 	bhi.w	8005e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005d10:	4a60      	ldr	r2, [pc, #384]	@ (8005e94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	f000 80a1 	beq.w	8005e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005d18:	4a5e      	ldr	r2, [pc, #376]	@ (8005e94 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	f200 80a6 	bhi.w	8005e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005d20:	4a5d      	ldr	r2, [pc, #372]	@ (8005e98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	f000 8099 	beq.w	8005e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005d28:	4a5b      	ldr	r2, [pc, #364]	@ (8005e98 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	f200 809e 	bhi.w	8005e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005d30:	4a5a      	ldr	r2, [pc, #360]	@ (8005e9c <HAL_TIM_ConfigClockSource+0x1f0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	f000 8091 	beq.w	8005e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005d38:	4a58      	ldr	r2, [pc, #352]	@ (8005e9c <HAL_TIM_ConfigClockSource+0x1f0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	f200 8096 	bhi.w	8005e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005d40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d44:	f000 8089 	beq.w	8005e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005d48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d4c:	f200 808e 	bhi.w	8005e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d54:	d03e      	beq.n	8005dd4 <HAL_TIM_ConfigClockSource+0x128>
 8005d56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d5a:	f200 8087 	bhi.w	8005e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d62:	f000 8086 	beq.w	8005e72 <HAL_TIM_ConfigClockSource+0x1c6>
 8005d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d6a:	d87f      	bhi.n	8005e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005d6c:	2b70      	cmp	r3, #112	@ 0x70
 8005d6e:	d01a      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0xfa>
 8005d70:	2b70      	cmp	r3, #112	@ 0x70
 8005d72:	d87b      	bhi.n	8005e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005d74:	2b60      	cmp	r3, #96	@ 0x60
 8005d76:	d050      	beq.n	8005e1a <HAL_TIM_ConfigClockSource+0x16e>
 8005d78:	2b60      	cmp	r3, #96	@ 0x60
 8005d7a:	d877      	bhi.n	8005e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005d7c:	2b50      	cmp	r3, #80	@ 0x50
 8005d7e:	d03c      	beq.n	8005dfa <HAL_TIM_ConfigClockSource+0x14e>
 8005d80:	2b50      	cmp	r3, #80	@ 0x50
 8005d82:	d873      	bhi.n	8005e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005d84:	2b40      	cmp	r3, #64	@ 0x40
 8005d86:	d058      	beq.n	8005e3a <HAL_TIM_ConfigClockSource+0x18e>
 8005d88:	2b40      	cmp	r3, #64	@ 0x40
 8005d8a:	d86f      	bhi.n	8005e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005d8c:	2b30      	cmp	r3, #48	@ 0x30
 8005d8e:	d064      	beq.n	8005e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005d90:	2b30      	cmp	r3, #48	@ 0x30
 8005d92:	d86b      	bhi.n	8005e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d060      	beq.n	8005e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005d98:	2b20      	cmp	r3, #32
 8005d9a:	d867      	bhi.n	8005e6c <HAL_TIM_ConfigClockSource+0x1c0>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d05c      	beq.n	8005e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d05a      	beq.n	8005e5a <HAL_TIM_ConfigClockSource+0x1ae>
 8005da4:	e062      	b.n	8005e6c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005db6:	f000 f9b3 	bl	8006120 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	609a      	str	r2, [r3, #8]
      break;
 8005dd2:	e04f      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005de4:	f000 f99c 	bl	8006120 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005df6:	609a      	str	r2, [r3, #8]
      break;
 8005df8:	e03c      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e06:	461a      	mov	r2, r3
 8005e08:	f000 f90e 	bl	8006028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2150      	movs	r1, #80	@ 0x50
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 f967 	bl	80060e6 <TIM_ITRx_SetConfig>
      break;
 8005e18:	e02c      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e26:	461a      	mov	r2, r3
 8005e28:	f000 f92d 	bl	8006086 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2160      	movs	r1, #96	@ 0x60
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 f957 	bl	80060e6 <TIM_ITRx_SetConfig>
      break;
 8005e38:	e01c      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e46:	461a      	mov	r2, r3
 8005e48:	f000 f8ee 	bl	8006028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2140      	movs	r1, #64	@ 0x40
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 f947 	bl	80060e6 <TIM_ITRx_SetConfig>
      break;
 8005e58:	e00c      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4619      	mov	r1, r3
 8005e64:	4610      	mov	r0, r2
 8005e66:	f000 f93e 	bl	80060e6 <TIM_ITRx_SetConfig>
      break;
 8005e6a:	e003      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e70:	e000      	b.n	8005e74 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	00100070 	.word	0x00100070
 8005e94:	00100040 	.word	0x00100040
 8005e98:	00100030 	.word	0x00100030
 8005e9c:	00100020 	.word	0x00100020

08005ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a42      	ldr	r2, [pc, #264]	@ (800600c <TIM_Base_SetConfig+0x11c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00f      	beq.n	8005f28 <TIM_Base_SetConfig+0x38>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f0e:	d00b      	beq.n	8005f28 <TIM_Base_SetConfig+0x38>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a3f      	ldr	r2, [pc, #252]	@ (8006010 <TIM_Base_SetConfig+0x120>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d007      	beq.n	8005f28 <TIM_Base_SetConfig+0x38>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a3e      	ldr	r2, [pc, #248]	@ (8006014 <TIM_Base_SetConfig+0x124>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d003      	beq.n	8005f28 <TIM_Base_SetConfig+0x38>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a3d      	ldr	r2, [pc, #244]	@ (8006018 <TIM_Base_SetConfig+0x128>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d108      	bne.n	8005f3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a33      	ldr	r2, [pc, #204]	@ (800600c <TIM_Base_SetConfig+0x11c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d01b      	beq.n	8005f7a <TIM_Base_SetConfig+0x8a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f48:	d017      	beq.n	8005f7a <TIM_Base_SetConfig+0x8a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a30      	ldr	r2, [pc, #192]	@ (8006010 <TIM_Base_SetConfig+0x120>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d013      	beq.n	8005f7a <TIM_Base_SetConfig+0x8a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a2f      	ldr	r2, [pc, #188]	@ (8006014 <TIM_Base_SetConfig+0x124>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00f      	beq.n	8005f7a <TIM_Base_SetConfig+0x8a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8006018 <TIM_Base_SetConfig+0x128>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00b      	beq.n	8005f7a <TIM_Base_SetConfig+0x8a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a2d      	ldr	r2, [pc, #180]	@ (800601c <TIM_Base_SetConfig+0x12c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d007      	beq.n	8005f7a <TIM_Base_SetConfig+0x8a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8006020 <TIM_Base_SetConfig+0x130>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d003      	beq.n	8005f7a <TIM_Base_SetConfig+0x8a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a2b      	ldr	r2, [pc, #172]	@ (8006024 <TIM_Base_SetConfig+0x134>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d108      	bne.n	8005f8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a16      	ldr	r2, [pc, #88]	@ (800600c <TIM_Base_SetConfig+0x11c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00f      	beq.n	8005fd8 <TIM_Base_SetConfig+0xe8>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a17      	ldr	r2, [pc, #92]	@ (8006018 <TIM_Base_SetConfig+0x128>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00b      	beq.n	8005fd8 <TIM_Base_SetConfig+0xe8>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a16      	ldr	r2, [pc, #88]	@ (800601c <TIM_Base_SetConfig+0x12c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d007      	beq.n	8005fd8 <TIM_Base_SetConfig+0xe8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a15      	ldr	r2, [pc, #84]	@ (8006020 <TIM_Base_SetConfig+0x130>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d003      	beq.n	8005fd8 <TIM_Base_SetConfig+0xe8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a14      	ldr	r2, [pc, #80]	@ (8006024 <TIM_Base_SetConfig+0x134>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d103      	bne.n	8005fe0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d105      	bne.n	8005ffe <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f023 0201 	bic.w	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	611a      	str	r2, [r3, #16]
  }
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	40012c00 	.word	0x40012c00
 8006010:	40000400 	.word	0x40000400
 8006014:	40000800 	.word	0x40000800
 8006018:	40013400 	.word	0x40013400
 800601c:	40014000 	.word	0x40014000
 8006020:	40014400 	.word	0x40014400
 8006024:	40014800 	.word	0x40014800

08006028 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	f023 0201 	bic.w	r2, r3, #1
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	4313      	orrs	r3, r2
 800605c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f023 030a 	bic.w	r3, r3, #10
 8006064:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	621a      	str	r2, [r3, #32]
}
 800607a:	bf00      	nop
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006086:	b480      	push	{r7}
 8006088:	b087      	sub	sp, #28
 800608a:	af00      	add	r7, sp, #0
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f023 0210 	bic.w	r2, r3, #16
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	031b      	lsls	r3, r3, #12
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b085      	sub	sp, #20
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80060fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4313      	orrs	r3, r2
 8006108:	f043 0307 	orr.w	r3, r3, #7
 800610c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	609a      	str	r2, [r3, #8]
}
 8006114:	bf00      	nop
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800613a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	021a      	lsls	r2, r3, #8
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	431a      	orrs	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4313      	orrs	r3, r2
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	609a      	str	r2, [r3, #8]
}
 8006154:	bf00      	nop
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006174:	2302      	movs	r3, #2
 8006176:	e065      	b.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a2c      	ldr	r2, [pc, #176]	@ (8006250 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d004      	beq.n	80061ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d108      	bne.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80061b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80061c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006250 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d018      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ee:	d013      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a18      	ldr	r2, [pc, #96]	@ (8006258 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d00e      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a17      	ldr	r2, [pc, #92]	@ (800625c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d009      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a12      	ldr	r2, [pc, #72]	@ (8006254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a13      	ldr	r2, [pc, #76]	@ (8006260 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d10c      	bne.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800621e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	4313      	orrs	r3, r2
 8006228:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40012c00 	.word	0x40012c00
 8006254:	40013400 	.word	0x40013400
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40014000 	.word	0x40014000

08006264 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e042      	b.n	8006388 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006308:	2b00      	cmp	r3, #0
 800630a:	d106      	bne.n	800631a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7fb fc0d 	bl	8001b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2224      	movs	r2, #36	@ 0x24
 800631e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0201 	bic.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 ff04 	bl	8007148 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fc35 	bl	8006bb0 <UART_SetConfig>
 8006346:	4603      	mov	r3, r0
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e01b      	b.n	8006388 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800635e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800636e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0201 	orr.w	r2, r2, #1
 800637e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 ff83 	bl	800728c <UART_CheckIdleState>
 8006386:	4603      	mov	r3, r0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08a      	sub	sp, #40	@ 0x28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	4613      	mov	r3, r2
 800639c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063a4:	2b20      	cmp	r3, #32
 80063a6:	d137      	bne.n	8006418 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_UART_Receive_IT+0x24>
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e030      	b.n	800641a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a18      	ldr	r2, [pc, #96]	@ (8006424 <HAL_UART_Receive_IT+0x94>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d01f      	beq.n	8006408 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d018      	beq.n	8006408 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	613b      	str	r3, [r7, #16]
   return(result);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	623b      	str	r3, [r7, #32]
 80063f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	69f9      	ldr	r1, [r7, #28]
 80063fa:	6a3a      	ldr	r2, [r7, #32]
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	61bb      	str	r3, [r7, #24]
   return(result);
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e6      	bne.n	80063d6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006408:	88fb      	ldrh	r3, [r7, #6]
 800640a:	461a      	mov	r2, r3
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f001 f854 	bl	80074bc <UART_Start_Receive_IT>
 8006414:	4603      	mov	r3, r0
 8006416:	e000      	b.n	800641a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006418:	2302      	movs	r3, #2
  }
}
 800641a:	4618      	mov	r0, r3
 800641c:	3728      	adds	r7, #40	@ 0x28
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40008000 	.word	0x40008000

08006428 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08a      	sub	sp, #40	@ 0x28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	4613      	mov	r3, r2
 8006434:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643c:	2b20      	cmp	r3, #32
 800643e:	d167      	bne.n	8006510 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_UART_Transmit_DMA+0x24>
 8006446:	88fb      	ldrh	r3, [r7, #6]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e060      	b.n	8006512 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	88fa      	ldrh	r2, [r7, #6]
 800645a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	88fa      	ldrh	r2, [r7, #6]
 8006462:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2221      	movs	r2, #33	@ 0x21
 8006472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800647a:	2b00      	cmp	r3, #0
 800647c:	d028      	beq.n	80064d0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006482:	4a26      	ldr	r2, [pc, #152]	@ (800651c <HAL_UART_Transmit_DMA+0xf4>)
 8006484:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800648a:	4a25      	ldr	r2, [pc, #148]	@ (8006520 <HAL_UART_Transmit_DMA+0xf8>)
 800648c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006492:	4a24      	ldr	r2, [pc, #144]	@ (8006524 <HAL_UART_Transmit_DMA+0xfc>)
 8006494:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800649a:	2200      	movs	r2, #0
 800649c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a6:	4619      	mov	r1, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3328      	adds	r3, #40	@ 0x28
 80064ae:	461a      	mov	r2, r3
 80064b0:	88fb      	ldrh	r3, [r7, #6]
 80064b2:	f7fd fd4f 	bl	8003f54 <HAL_DMA_Start_IT>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d009      	beq.n	80064d0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2210      	movs	r2, #16
 80064c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e020      	b.n	8006512 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2240      	movs	r2, #64	@ 0x40
 80064d6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3308      	adds	r3, #8
 80064de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	613b      	str	r3, [r7, #16]
   return(result);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3308      	adds	r3, #8
 80064f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064f8:	623a      	str	r2, [r7, #32]
 80064fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	69f9      	ldr	r1, [r7, #28]
 80064fe:	6a3a      	ldr	r2, [r7, #32]
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	61bb      	str	r3, [r7, #24]
   return(result);
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e5      	bne.n	80064d8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	e000      	b.n	8006512 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006510:	2302      	movs	r3, #2
  }
}
 8006512:	4618      	mov	r0, r3
 8006514:	3728      	adds	r7, #40	@ 0x28
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	0800784f 	.word	0x0800784f
 8006520:	080078e9 	.word	0x080078e9
 8006524:	08007905 	.word	0x08007905

08006528 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b0ba      	sub	sp, #232	@ 0xe8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800654e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006552:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006556:	4013      	ands	r3, r2
 8006558:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800655c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11b      	bne.n	800659c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b00      	cmp	r3, #0
 800656e:	d015      	beq.n	800659c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d105      	bne.n	8006588 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800657c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d009      	beq.n	800659c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 82e3 	beq.w	8006b58 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
      }
      return;
 800659a:	e2dd      	b.n	8006b58 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800659c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 8123 	beq.w	80067ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80065aa:	4b8d      	ldr	r3, [pc, #564]	@ (80067e0 <HAL_UART_IRQHandler+0x2b8>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80065b6:	4b8b      	ldr	r3, [pc, #556]	@ (80067e4 <HAL_UART_IRQHandler+0x2bc>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 8116 	beq.w	80067ec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d011      	beq.n	80065f0 <HAL_UART_IRQHandler+0xc8>
 80065cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00b      	beq.n	80065f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2201      	movs	r2, #1
 80065de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e6:	f043 0201 	orr.w	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d011      	beq.n	8006620 <HAL_UART_IRQHandler+0xf8>
 80065fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2202      	movs	r2, #2
 800660e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006616:	f043 0204 	orr.w	r2, r3, #4
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d011      	beq.n	8006650 <HAL_UART_IRQHandler+0x128>
 800662c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2204      	movs	r2, #4
 800663e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006646:	f043 0202 	orr.w	r2, r3, #2
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d017      	beq.n	800668c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800665c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006668:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800666c:	4b5c      	ldr	r3, [pc, #368]	@ (80067e0 <HAL_UART_IRQHandler+0x2b8>)
 800666e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2208      	movs	r2, #8
 800667a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006682:	f043 0208 	orr.w	r2, r3, #8
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800668c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006690:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006694:	2b00      	cmp	r3, #0
 8006696:	d012      	beq.n	80066be <HAL_UART_IRQHandler+0x196>
 8006698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800669c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00c      	beq.n	80066be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066b4:	f043 0220 	orr.w	r2, r3, #32
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8249 	beq.w	8006b5c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d013      	beq.n	80066fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066da:	f003 0320 	and.w	r3, r3, #32
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d105      	bne.n	80066ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d007      	beq.n	80066fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006704:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006712:	2b40      	cmp	r3, #64	@ 0x40
 8006714:	d005      	beq.n	8006722 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800671a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800671e:	2b00      	cmp	r3, #0
 8006720:	d054      	beq.n	80067cc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f001 f82d 	bl	8007782 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006732:	2b40      	cmp	r3, #64	@ 0x40
 8006734:	d146      	bne.n	80067c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3308      	adds	r3, #8
 800673c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006740:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800674c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006754:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3308      	adds	r3, #8
 800675e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006762:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006766:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800676e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800677a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1d9      	bne.n	8006736 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006788:	2b00      	cmp	r3, #0
 800678a:	d017      	beq.n	80067bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006792:	4a15      	ldr	r2, [pc, #84]	@ (80067e8 <HAL_UART_IRQHandler+0x2c0>)
 8006794:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800679c:	4618      	mov	r0, r3
 800679e:	f7fd fcad 	bl	80040fc <HAL_DMA_Abort_IT>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d019      	beq.n	80067dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80067b6:	4610      	mov	r0, r2
 80067b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ba:	e00f      	b.n	80067dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f9e1 	bl	8006b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c2:	e00b      	b.n	80067dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f9dd 	bl	8006b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ca:	e007      	b.n	80067dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f9d9 	bl	8006b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80067da:	e1bf      	b.n	8006b5c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067dc:	bf00      	nop
    return;
 80067de:	e1bd      	b.n	8006b5c <HAL_UART_IRQHandler+0x634>
 80067e0:	10000001 	.word	0x10000001
 80067e4:	04000120 	.word	0x04000120
 80067e8:	08007985 	.word	0x08007985

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	f040 8153 	bne.w	8006a9c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067fa:	f003 0310 	and.w	r3, r3, #16
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 814c 	beq.w	8006a9c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8145 	beq.w	8006a9c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2210      	movs	r2, #16
 8006818:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006824:	2b40      	cmp	r3, #64	@ 0x40
 8006826:	f040 80bb 	bne.w	80069a0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006838:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 818f 	beq.w	8006b60 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006848:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800684c:	429a      	cmp	r2, r3
 800684e:	f080 8187 	bcs.w	8006b60 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006858:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	f040 8087 	bne.w	800697e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006884:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800688c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800689a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800689e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80068b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1da      	bne.n	8006870 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3308      	adds	r3, #8
 80068c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068c4:	e853 3f00 	ldrex	r3, [r3]
 80068c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068cc:	f023 0301 	bic.w	r3, r3, #1
 80068d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3308      	adds	r3, #8
 80068da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80068de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80068e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e1      	bne.n	80068ba <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006906:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006908:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800690c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3308      	adds	r3, #8
 8006916:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800691a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800691c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006920:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e3      	bne.n	80068f6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800694a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800694c:	f023 0310 	bic.w	r3, r3, #16
 8006950:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800695e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006960:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006964:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800696c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e4      	bne.n	800693c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006978:	4618      	mov	r0, r3
 800697a:	f7fd fb66 	bl	800404a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2202      	movs	r2, #2
 8006982:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006990:	b29b      	uxth	r3, r3
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	b29b      	uxth	r3, r3
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f8fd 	bl	8006b98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800699e:	e0df      	b.n	8006b60 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 80d1 	beq.w	8006b64 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80069c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 80cc 	beq.w	8006b64 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80069f0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e4      	bne.n	80069cc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3308      	adds	r3, #8
 8006a08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	623b      	str	r3, [r7, #32]
   return(result);
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e1      	bne.n	8006a02 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0310 	bic.w	r3, r3, #16
 8006a66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006a74:	61fb      	str	r3, [r7, #28]
 8006a76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	69b9      	ldr	r1, [r7, #24]
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	617b      	str	r3, [r7, #20]
   return(result);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e4      	bne.n	8006a52 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a92:	4619      	mov	r1, r3
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f87f 	bl	8006b98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a9a:	e063      	b.n	8006b64 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x59e>
 8006aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d008      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006abc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 fcbe 	bl	8008440 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ac4:	e051      	b.n	8006b6a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d014      	beq.n	8006afc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d105      	bne.n	8006aea <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d008      	beq.n	8006afc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d03a      	beq.n	8006b68 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	4798      	blx	r3
    }
    return;
 8006afa:	e035      	b.n	8006b68 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d009      	beq.n	8006b1c <HAL_UART_IRQHandler+0x5f4>
 8006b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 ff4b 	bl	80079b0 <UART_EndTransmit_IT>
    return;
 8006b1a:	e026      	b.n	8006b6a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d009      	beq.n	8006b3c <HAL_UART_IRQHandler+0x614>
 8006b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fc97 	bl	8008468 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b3a:	e016      	b.n	8006b6a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d010      	beq.n	8006b6a <HAL_UART_IRQHandler+0x642>
 8006b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	da0c      	bge.n	8006b6a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 fc7f 	bl	8008454 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b56:	e008      	b.n	8006b6a <HAL_UART_IRQHandler+0x642>
      return;
 8006b58:	bf00      	nop
 8006b5a:	e006      	b.n	8006b6a <HAL_UART_IRQHandler+0x642>
    return;
 8006b5c:	bf00      	nop
 8006b5e:	e004      	b.n	8006b6a <HAL_UART_IRQHandler+0x642>
      return;
 8006b60:	bf00      	nop
 8006b62:	e002      	b.n	8006b6a <HAL_UART_IRQHandler+0x642>
      return;
 8006b64:	bf00      	nop
 8006b66:	e000      	b.n	8006b6a <HAL_UART_IRQHandler+0x642>
    return;
 8006b68:	bf00      	nop
  }
}
 8006b6a:	37e8      	adds	r7, #232	@ 0xe8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bb4:	b08c      	sub	sp, #48	@ 0x30
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	4bab      	ldr	r3, [pc, #684]	@ (8006e8c <UART_SetConfig+0x2dc>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	6812      	ldr	r2, [r2, #0]
 8006be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006be8:	430b      	orrs	r3, r1
 8006bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4aa0      	ldr	r2, [pc, #640]	@ (8006e90 <UART_SetConfig+0x2e0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d004      	beq.n	8006c1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006c26:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3a:	f023 010f 	bic.w	r1, r3, #15
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a91      	ldr	r2, [pc, #580]	@ (8006e94 <UART_SetConfig+0x2e4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d125      	bne.n	8006ca0 <UART_SetConfig+0xf0>
 8006c54:	4b90      	ldr	r3, [pc, #576]	@ (8006e98 <UART_SetConfig+0x2e8>)
 8006c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d81a      	bhi.n	8006c98 <UART_SetConfig+0xe8>
 8006c62:	a201      	add	r2, pc, #4	@ (adr r2, 8006c68 <UART_SetConfig+0xb8>)
 8006c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c68:	08006c79 	.word	0x08006c79
 8006c6c:	08006c89 	.word	0x08006c89
 8006c70:	08006c81 	.word	0x08006c81
 8006c74:	08006c91 	.word	0x08006c91
 8006c78:	2301      	movs	r3, #1
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c7e:	e0d6      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006c80:	2302      	movs	r3, #2
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c86:	e0d2      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c8e:	e0ce      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006c90:	2308      	movs	r3, #8
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c96:	e0ca      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c9e:	e0c6      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a7d      	ldr	r2, [pc, #500]	@ (8006e9c <UART_SetConfig+0x2ec>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d138      	bne.n	8006d1c <UART_SetConfig+0x16c>
 8006caa:	4b7b      	ldr	r3, [pc, #492]	@ (8006e98 <UART_SetConfig+0x2e8>)
 8006cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb0:	f003 030c 	and.w	r3, r3, #12
 8006cb4:	2b0c      	cmp	r3, #12
 8006cb6:	d82d      	bhi.n	8006d14 <UART_SetConfig+0x164>
 8006cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc0 <UART_SetConfig+0x110>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006cf5 	.word	0x08006cf5
 8006cc4:	08006d15 	.word	0x08006d15
 8006cc8:	08006d15 	.word	0x08006d15
 8006ccc:	08006d15 	.word	0x08006d15
 8006cd0:	08006d05 	.word	0x08006d05
 8006cd4:	08006d15 	.word	0x08006d15
 8006cd8:	08006d15 	.word	0x08006d15
 8006cdc:	08006d15 	.word	0x08006d15
 8006ce0:	08006cfd 	.word	0x08006cfd
 8006ce4:	08006d15 	.word	0x08006d15
 8006ce8:	08006d15 	.word	0x08006d15
 8006cec:	08006d15 	.word	0x08006d15
 8006cf0:	08006d0d 	.word	0x08006d0d
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cfa:	e098      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d02:	e094      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006d04:	2304      	movs	r3, #4
 8006d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d0a:	e090      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006d0c:	2308      	movs	r3, #8
 8006d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d12:	e08c      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006d14:	2310      	movs	r3, #16
 8006d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d1a:	e088      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a5f      	ldr	r2, [pc, #380]	@ (8006ea0 <UART_SetConfig+0x2f0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d125      	bne.n	8006d72 <UART_SetConfig+0x1c2>
 8006d26:	4b5c      	ldr	r3, [pc, #368]	@ (8006e98 <UART_SetConfig+0x2e8>)
 8006d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d30:	2b30      	cmp	r3, #48	@ 0x30
 8006d32:	d016      	beq.n	8006d62 <UART_SetConfig+0x1b2>
 8006d34:	2b30      	cmp	r3, #48	@ 0x30
 8006d36:	d818      	bhi.n	8006d6a <UART_SetConfig+0x1ba>
 8006d38:	2b20      	cmp	r3, #32
 8006d3a:	d00a      	beq.n	8006d52 <UART_SetConfig+0x1a2>
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d814      	bhi.n	8006d6a <UART_SetConfig+0x1ba>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <UART_SetConfig+0x19a>
 8006d44:	2b10      	cmp	r3, #16
 8006d46:	d008      	beq.n	8006d5a <UART_SetConfig+0x1aa>
 8006d48:	e00f      	b.n	8006d6a <UART_SetConfig+0x1ba>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d50:	e06d      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006d52:	2302      	movs	r3, #2
 8006d54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d58:	e069      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006d5a:	2304      	movs	r3, #4
 8006d5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d60:	e065      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006d62:	2308      	movs	r3, #8
 8006d64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d68:	e061      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006d6a:	2310      	movs	r3, #16
 8006d6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d70:	e05d      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a4b      	ldr	r2, [pc, #300]	@ (8006ea4 <UART_SetConfig+0x2f4>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d125      	bne.n	8006dc8 <UART_SetConfig+0x218>
 8006d7c:	4b46      	ldr	r3, [pc, #280]	@ (8006e98 <UART_SetConfig+0x2e8>)
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d86:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d88:	d016      	beq.n	8006db8 <UART_SetConfig+0x208>
 8006d8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d8c:	d818      	bhi.n	8006dc0 <UART_SetConfig+0x210>
 8006d8e:	2b80      	cmp	r3, #128	@ 0x80
 8006d90:	d00a      	beq.n	8006da8 <UART_SetConfig+0x1f8>
 8006d92:	2b80      	cmp	r3, #128	@ 0x80
 8006d94:	d814      	bhi.n	8006dc0 <UART_SetConfig+0x210>
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <UART_SetConfig+0x1f0>
 8006d9a:	2b40      	cmp	r3, #64	@ 0x40
 8006d9c:	d008      	beq.n	8006db0 <UART_SetConfig+0x200>
 8006d9e:	e00f      	b.n	8006dc0 <UART_SetConfig+0x210>
 8006da0:	2300      	movs	r3, #0
 8006da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006da6:	e042      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006da8:	2302      	movs	r3, #2
 8006daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dae:	e03e      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006db0:	2304      	movs	r3, #4
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006db6:	e03a      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006db8:	2308      	movs	r3, #8
 8006dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dbe:	e036      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dc6:	e032      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a30      	ldr	r2, [pc, #192]	@ (8006e90 <UART_SetConfig+0x2e0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d12a      	bne.n	8006e28 <UART_SetConfig+0x278>
 8006dd2:	4b31      	ldr	r3, [pc, #196]	@ (8006e98 <UART_SetConfig+0x2e8>)
 8006dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ddc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006de0:	d01a      	beq.n	8006e18 <UART_SetConfig+0x268>
 8006de2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006de6:	d81b      	bhi.n	8006e20 <UART_SetConfig+0x270>
 8006de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dec:	d00c      	beq.n	8006e08 <UART_SetConfig+0x258>
 8006dee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df2:	d815      	bhi.n	8006e20 <UART_SetConfig+0x270>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <UART_SetConfig+0x250>
 8006df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dfc:	d008      	beq.n	8006e10 <UART_SetConfig+0x260>
 8006dfe:	e00f      	b.n	8006e20 <UART_SetConfig+0x270>
 8006e00:	2300      	movs	r3, #0
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e06:	e012      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e0e:	e00e      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006e10:	2304      	movs	r3, #4
 8006e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e16:	e00a      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006e18:	2308      	movs	r3, #8
 8006e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e1e:	e006      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006e20:	2310      	movs	r3, #16
 8006e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e26:	e002      	b.n	8006e2e <UART_SetConfig+0x27e>
 8006e28:	2310      	movs	r3, #16
 8006e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a17      	ldr	r2, [pc, #92]	@ (8006e90 <UART_SetConfig+0x2e0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	f040 80a8 	bne.w	8006f8a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e3e:	2b08      	cmp	r3, #8
 8006e40:	d834      	bhi.n	8006eac <UART_SetConfig+0x2fc>
 8006e42:	a201      	add	r2, pc, #4	@ (adr r2, 8006e48 <UART_SetConfig+0x298>)
 8006e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e48:	08006e6d 	.word	0x08006e6d
 8006e4c:	08006ead 	.word	0x08006ead
 8006e50:	08006e75 	.word	0x08006e75
 8006e54:	08006ead 	.word	0x08006ead
 8006e58:	08006e7b 	.word	0x08006e7b
 8006e5c:	08006ead 	.word	0x08006ead
 8006e60:	08006ead 	.word	0x08006ead
 8006e64:	08006ead 	.word	0x08006ead
 8006e68:	08006e83 	.word	0x08006e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e6c:	f7fe f9ee 	bl	800524c <HAL_RCC_GetPCLK1Freq>
 8006e70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e72:	e021      	b.n	8006eb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e74:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea8 <UART_SetConfig+0x2f8>)
 8006e76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e78:	e01e      	b.n	8006eb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e7a:	f7fe f979 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8006e7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e80:	e01a      	b.n	8006eb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e88:	e016      	b.n	8006eb8 <UART_SetConfig+0x308>
 8006e8a:	bf00      	nop
 8006e8c:	cfff69f3 	.word	0xcfff69f3
 8006e90:	40008000 	.word	0x40008000
 8006e94:	40013800 	.word	0x40013800
 8006e98:	40021000 	.word	0x40021000
 8006e9c:	40004400 	.word	0x40004400
 8006ea0:	40004800 	.word	0x40004800
 8006ea4:	40004c00 	.word	0x40004c00
 8006ea8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006eb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 812a 	beq.w	8007114 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec4:	4a9e      	ldr	r2, [pc, #632]	@ (8007140 <UART_SetConfig+0x590>)
 8006ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ed2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	4413      	add	r3, r2
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d305      	bcc.n	8006ef0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d903      	bls.n	8006ef8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ef6:	e10d      	b.n	8007114 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	2200      	movs	r2, #0
 8006efc:	60bb      	str	r3, [r7, #8]
 8006efe:	60fa      	str	r2, [r7, #12]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f04:	4a8e      	ldr	r2, [pc, #568]	@ (8007140 <UART_SetConfig+0x590>)
 8006f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	607a      	str	r2, [r7, #4]
 8006f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f1a:	f7f9 febd 	bl	8000c98 <__aeabi_uldivmod>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4610      	mov	r0, r2
 8006f24:	4619      	mov	r1, r3
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	f04f 0300 	mov.w	r3, #0
 8006f2e:	020b      	lsls	r3, r1, #8
 8006f30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f34:	0202      	lsls	r2, r0, #8
 8006f36:	6979      	ldr	r1, [r7, #20]
 8006f38:	6849      	ldr	r1, [r1, #4]
 8006f3a:	0849      	lsrs	r1, r1, #1
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	460c      	mov	r4, r1
 8006f40:	4605      	mov	r5, r0
 8006f42:	eb12 0804 	adds.w	r8, r2, r4
 8006f46:	eb43 0905 	adc.w	r9, r3, r5
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	469a      	mov	sl, r3
 8006f52:	4693      	mov	fp, r2
 8006f54:	4652      	mov	r2, sl
 8006f56:	465b      	mov	r3, fp
 8006f58:	4640      	mov	r0, r8
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	f7f9 fe9c 	bl	8000c98 <__aeabi_uldivmod>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	4613      	mov	r3, r2
 8006f66:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f6e:	d308      	bcc.n	8006f82 <UART_SetConfig+0x3d2>
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f76:	d204      	bcs.n	8006f82 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6a3a      	ldr	r2, [r7, #32]
 8006f7e:	60da      	str	r2, [r3, #12]
 8006f80:	e0c8      	b.n	8007114 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f88:	e0c4      	b.n	8007114 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f92:	d167      	bne.n	8007064 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006f94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d828      	bhi.n	8006fee <UART_SetConfig+0x43e>
 8006f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa4 <UART_SetConfig+0x3f4>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fc9 	.word	0x08006fc9
 8006fa8:	08006fd1 	.word	0x08006fd1
 8006fac:	08006fd9 	.word	0x08006fd9
 8006fb0:	08006fef 	.word	0x08006fef
 8006fb4:	08006fdf 	.word	0x08006fdf
 8006fb8:	08006fef 	.word	0x08006fef
 8006fbc:	08006fef 	.word	0x08006fef
 8006fc0:	08006fef 	.word	0x08006fef
 8006fc4:	08006fe7 	.word	0x08006fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc8:	f7fe f940 	bl	800524c <HAL_RCC_GetPCLK1Freq>
 8006fcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fce:	e014      	b.n	8006ffa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fd0:	f7fe f952 	bl	8005278 <HAL_RCC_GetPCLK2Freq>
 8006fd4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fd6:	e010      	b.n	8006ffa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fd8:	4b5a      	ldr	r3, [pc, #360]	@ (8007144 <UART_SetConfig+0x594>)
 8006fda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fdc:	e00d      	b.n	8006ffa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fde:	f7fe f8c7 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 8006fe2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fe4:	e009      	b.n	8006ffa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fec:	e005      	b.n	8006ffa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ff8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 8089 	beq.w	8007114 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007006:	4a4e      	ldr	r2, [pc, #312]	@ (8007140 <UART_SetConfig+0x590>)
 8007008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800700c:	461a      	mov	r2, r3
 800700e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007010:	fbb3 f3f2 	udiv	r3, r3, r2
 8007014:	005a      	lsls	r2, r3, #1
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	085b      	lsrs	r3, r3, #1
 800701c:	441a      	add	r2, r3
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	fbb2 f3f3 	udiv	r3, r2, r3
 8007026:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	2b0f      	cmp	r3, #15
 800702c:	d916      	bls.n	800705c <UART_SetConfig+0x4ac>
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007034:	d212      	bcs.n	800705c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	b29b      	uxth	r3, r3
 800703a:	f023 030f 	bic.w	r3, r3, #15
 800703e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	085b      	lsrs	r3, r3, #1
 8007044:	b29b      	uxth	r3, r3
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	b29a      	uxth	r2, r3
 800704c:	8bfb      	ldrh	r3, [r7, #30]
 800704e:	4313      	orrs	r3, r2
 8007050:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	8bfa      	ldrh	r2, [r7, #30]
 8007058:	60da      	str	r2, [r3, #12]
 800705a:	e05b      	b.n	8007114 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007062:	e057      	b.n	8007114 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007064:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007068:	2b08      	cmp	r3, #8
 800706a:	d828      	bhi.n	80070be <UART_SetConfig+0x50e>
 800706c:	a201      	add	r2, pc, #4	@ (adr r2, 8007074 <UART_SetConfig+0x4c4>)
 800706e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007072:	bf00      	nop
 8007074:	08007099 	.word	0x08007099
 8007078:	080070a1 	.word	0x080070a1
 800707c:	080070a9 	.word	0x080070a9
 8007080:	080070bf 	.word	0x080070bf
 8007084:	080070af 	.word	0x080070af
 8007088:	080070bf 	.word	0x080070bf
 800708c:	080070bf 	.word	0x080070bf
 8007090:	080070bf 	.word	0x080070bf
 8007094:	080070b7 	.word	0x080070b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007098:	f7fe f8d8 	bl	800524c <HAL_RCC_GetPCLK1Freq>
 800709c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800709e:	e014      	b.n	80070ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070a0:	f7fe f8ea 	bl	8005278 <HAL_RCC_GetPCLK2Freq>
 80070a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070a6:	e010      	b.n	80070ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070a8:	4b26      	ldr	r3, [pc, #152]	@ (8007144 <UART_SetConfig+0x594>)
 80070aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070ac:	e00d      	b.n	80070ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ae:	f7fe f85f 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 80070b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070b4:	e009      	b.n	80070ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070bc:	e005      	b.n	80070ca <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070c8:	bf00      	nop
    }

    if (pclk != 0U)
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d021      	beq.n	8007114 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007140 <UART_SetConfig+0x590>)
 80070d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070da:	461a      	mov	r2, r3
 80070dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070de:	fbb3 f2f2 	udiv	r2, r3, r2
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	441a      	add	r2, r3
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	2b0f      	cmp	r3, #15
 80070f8:	d909      	bls.n	800710e <UART_SetConfig+0x55e>
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007100:	d205      	bcs.n	800710e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	b29a      	uxth	r2, r3
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60da      	str	r2, [r3, #12]
 800710c:	e002      	b.n	8007114 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	2201      	movs	r2, #1
 8007118:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2201      	movs	r2, #1
 8007120:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2200      	movs	r2, #0
 8007128:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2200      	movs	r2, #0
 800712e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007130:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007134:	4618      	mov	r0, r3
 8007136:	3730      	adds	r7, #48	@ 0x30
 8007138:	46bd      	mov	sp, r7
 800713a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800713e:	bf00      	nop
 8007140:	0800e8f0 	.word	0x0800e8f0
 8007144:	00f42400 	.word	0x00f42400

08007148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007154:	f003 0308 	and.w	r3, r3, #8
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00a      	beq.n	80071d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01a      	beq.n	800725e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007246:	d10a      	bne.n	800725e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00a      	beq.n	8007280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	430a      	orrs	r2, r1
 800727e:	605a      	str	r2, [r3, #4]
  }
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b098      	sub	sp, #96	@ 0x60
 8007290:	af02      	add	r7, sp, #8
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800729c:	f7fa feee 	bl	800207c <HAL_GetTick>
 80072a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	d12f      	bne.n	8007310 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b8:	2200      	movs	r2, #0
 80072ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f88e 	bl	80073e0 <UART_WaitOnFlagUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d022      	beq.n	8007310 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072de:	653b      	str	r3, [r7, #80]	@ 0x50
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80072ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e6      	bne.n	80072ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e063      	b.n	80073d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b04      	cmp	r3, #4
 800731c:	d149      	bne.n	80073b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800731e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007326:	2200      	movs	r2, #0
 8007328:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f857 	bl	80073e0 <UART_WaitOnFlagUntilTimeout>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d03c      	beq.n	80073b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	623b      	str	r3, [r7, #32]
   return(result);
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800734c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007356:	633b      	str	r3, [r7, #48]	@ 0x30
 8007358:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800735c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e6      	bne.n	8007338 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	60fb      	str	r3, [r7, #12]
   return(result);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f023 0301 	bic.w	r3, r3, #1
 8007380:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3308      	adds	r3, #8
 8007388:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800738a:	61fa      	str	r2, [r7, #28]
 800738c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	69b9      	ldr	r1, [r7, #24]
 8007390:	69fa      	ldr	r2, [r7, #28]
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	617b      	str	r3, [r7, #20]
   return(result);
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e5      	bne.n	800736a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e012      	b.n	80073d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3758      	adds	r7, #88	@ 0x58
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	4613      	mov	r3, r2
 80073ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f0:	e04f      	b.n	8007492 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f8:	d04b      	beq.n	8007492 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073fa:	f7fa fe3f 	bl	800207c <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	429a      	cmp	r2, r3
 8007408:	d302      	bcc.n	8007410 <UART_WaitOnFlagUntilTimeout+0x30>
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e04e      	b.n	80074b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b00      	cmp	r3, #0
 8007420:	d037      	beq.n	8007492 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b80      	cmp	r3, #128	@ 0x80
 8007426:	d034      	beq.n	8007492 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b40      	cmp	r3, #64	@ 0x40
 800742c:	d031      	beq.n	8007492 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	f003 0308 	and.w	r3, r3, #8
 8007438:	2b08      	cmp	r3, #8
 800743a:	d110      	bne.n	800745e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2208      	movs	r2, #8
 8007442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 f99c 	bl	8007782 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2208      	movs	r2, #8
 800744e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e029      	b.n	80074b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007468:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800746c:	d111      	bne.n	8007492 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007476:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 f982 	bl	8007782 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2220      	movs	r2, #32
 8007482:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e00f      	b.n	80074b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69da      	ldr	r2, [r3, #28]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4013      	ands	r3, r2
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	429a      	cmp	r2, r3
 80074a0:	bf0c      	ite	eq
 80074a2:	2301      	moveq	r3, #1
 80074a4:	2300      	movne	r3, #0
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	461a      	mov	r2, r3
 80074aa:	79fb      	ldrb	r3, [r7, #7]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d0a0      	beq.n	80073f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074bc:	b480      	push	{r7}
 80074be:	b0a3      	sub	sp, #140	@ 0x8c
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	4613      	mov	r3, r2
 80074c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	88fa      	ldrh	r2, [r7, #6]
 80074d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	88fa      	ldrh	r2, [r7, #6]
 80074dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074ee:	d10e      	bne.n	800750e <UART_Start_Receive_IT+0x52>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d105      	bne.n	8007504 <UART_Start_Receive_IT+0x48>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80074fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007502:	e02d      	b.n	8007560 <UART_Start_Receive_IT+0xa4>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	22ff      	movs	r2, #255	@ 0xff
 8007508:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800750c:	e028      	b.n	8007560 <UART_Start_Receive_IT+0xa4>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10d      	bne.n	8007532 <UART_Start_Receive_IT+0x76>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d104      	bne.n	8007528 <UART_Start_Receive_IT+0x6c>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	22ff      	movs	r2, #255	@ 0xff
 8007522:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007526:	e01b      	b.n	8007560 <UART_Start_Receive_IT+0xa4>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	227f      	movs	r2, #127	@ 0x7f
 800752c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007530:	e016      	b.n	8007560 <UART_Start_Receive_IT+0xa4>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800753a:	d10d      	bne.n	8007558 <UART_Start_Receive_IT+0x9c>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d104      	bne.n	800754e <UART_Start_Receive_IT+0x92>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	227f      	movs	r2, #127	@ 0x7f
 8007548:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800754c:	e008      	b.n	8007560 <UART_Start_Receive_IT+0xa4>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	223f      	movs	r2, #63	@ 0x3f
 8007552:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007556:	e003      	b.n	8007560 <UART_Start_Receive_IT+0xa4>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2222      	movs	r2, #34	@ 0x22
 800756c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3308      	adds	r3, #8
 8007576:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007580:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007582:	f043 0301 	orr.w	r3, r3, #1
 8007586:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3308      	adds	r3, #8
 8007590:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007594:	673a      	str	r2, [r7, #112]	@ 0x70
 8007596:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800759a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80075a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e3      	bne.n	8007570 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b0:	d14f      	bne.n	8007652 <UART_Start_Receive_IT+0x196>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80075b8:	88fa      	ldrh	r2, [r7, #6]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d349      	bcc.n	8007652 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c6:	d107      	bne.n	80075d8 <UART_Start_Receive_IT+0x11c>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d103      	bne.n	80075d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4a47      	ldr	r2, [pc, #284]	@ (80076f0 <UART_Start_Receive_IT+0x234>)
 80075d4:	675a      	str	r2, [r3, #116]	@ 0x74
 80075d6:	e002      	b.n	80075de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4a46      	ldr	r2, [pc, #280]	@ (80076f4 <UART_Start_Receive_IT+0x238>)
 80075dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d01a      	beq.n	800761c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80075f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800760a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800760e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e4      	bne.n	80075e6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3308      	adds	r3, #8
 8007622:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800762c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007632:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3308      	adds	r3, #8
 800763a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800763c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800763e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800764a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e5      	bne.n	800761c <UART_Start_Receive_IT+0x160>
 8007650:	e046      	b.n	80076e0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800765a:	d107      	bne.n	800766c <UART_Start_Receive_IT+0x1b0>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d103      	bne.n	800766c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4a24      	ldr	r2, [pc, #144]	@ (80076f8 <UART_Start_Receive_IT+0x23c>)
 8007668:	675a      	str	r2, [r3, #116]	@ 0x74
 800766a:	e002      	b.n	8007672 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4a23      	ldr	r2, [pc, #140]	@ (80076fc <UART_Start_Receive_IT+0x240>)
 8007670:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d019      	beq.n	80076ae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800768e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007698:	637b      	str	r3, [r7, #52]	@ 0x34
 800769a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800769e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80076a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e6      	bne.n	800767a <UART_Start_Receive_IT+0x1be>
 80076ac:	e018      	b.n	80076e0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	613b      	str	r3, [r7, #16]
   return(result);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f043 0320 	orr.w	r3, r3, #32
 80076c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076cc:	623b      	str	r3, [r7, #32]
 80076ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	69f9      	ldr	r1, [r7, #28]
 80076d2:	6a3a      	ldr	r2, [r7, #32]
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1e6      	bne.n	80076ae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	378c      	adds	r7, #140	@ 0x8c
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	080080d9 	.word	0x080080d9
 80076f4:	08007d79 	.word	0x08007d79
 80076f8:	08007bc1 	.word	0x08007bc1
 80076fc:	08007a09 	.word	0x08007a09

08007700 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007700:	b480      	push	{r7}
 8007702:	b08f      	sub	sp, #60	@ 0x3c
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	61fb      	str	r3, [r7, #28]
   return(result);
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800771c:	637b      	str	r3, [r7, #52]	@ 0x34
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007726:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007728:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800772c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e6      	bne.n	8007708 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3308      	adds	r3, #8
 8007740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	60bb      	str	r3, [r7, #8]
   return(result);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007750:	633b      	str	r3, [r7, #48]	@ 0x30
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3308      	adds	r3, #8
 8007758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800775a:	61ba      	str	r2, [r7, #24]
 800775c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6979      	ldr	r1, [r7, #20]
 8007760:	69ba      	ldr	r2, [r7, #24]
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	613b      	str	r3, [r7, #16]
   return(result);
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e5      	bne.n	800773a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007776:	bf00      	nop
 8007778:	373c      	adds	r7, #60	@ 0x3c
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007782:	b480      	push	{r7}
 8007784:	b095      	sub	sp, #84	@ 0x54
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800779e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80077aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e6      	bne.n	800778a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	3308      	adds	r3, #8
 80077c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	e853 3f00 	ldrex	r3, [r3]
 80077ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077d2:	f023 0301 	bic.w	r3, r3, #1
 80077d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3308      	adds	r3, #8
 80077de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077e8:	e841 2300 	strex	r3, r2, [r1]
 80077ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e3      	bne.n	80077bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d118      	bne.n	800782e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	e853 3f00 	ldrex	r3, [r3]
 8007808:	60bb      	str	r3, [r7, #8]
   return(result);
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f023 0310 	bic.w	r3, r3, #16
 8007810:	647b      	str	r3, [r7, #68]	@ 0x44
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800781a:	61bb      	str	r3, [r7, #24]
 800781c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	6979      	ldr	r1, [r7, #20]
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	613b      	str	r3, [r7, #16]
   return(result);
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e6      	bne.n	80077fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2220      	movs	r2, #32
 8007832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007842:	bf00      	nop
 8007844:	3754      	adds	r7, #84	@ 0x54
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b090      	sub	sp, #64	@ 0x40
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0320 	and.w	r3, r3, #32
 8007866:	2b00      	cmp	r3, #0
 8007868:	d137      	bne.n	80078da <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800786a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800786c:	2200      	movs	r2, #0
 800786e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3308      	adds	r3, #8
 8007878:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	623b      	str	r3, [r7, #32]
   return(result);
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007888:	63bb      	str	r3, [r7, #56]	@ 0x38
 800788a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3308      	adds	r3, #8
 8007890:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007892:	633a      	str	r2, [r7, #48]	@ 0x30
 8007894:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e5      	bne.n	8007872 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80078bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078c4:	61fb      	str	r3, [r7, #28]
 80078c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	69b9      	ldr	r1, [r7, #24]
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	e841 2300 	strex	r3, r2, [r1]
 80078d0:	617b      	str	r3, [r7, #20]
   return(result);
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1e6      	bne.n	80078a6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078d8:	e002      	b.n	80078e0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80078da:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80078dc:	f7f9 fb8c 	bl	8000ff8 <HAL_UART_TxCpltCallback>
}
 80078e0:	bf00      	nop
 80078e2:	3740      	adds	r7, #64	@ 0x40
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f7ff f93a 	bl	8006b70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078fc:	bf00      	nop
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007910:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007918:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007920:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800792c:	2b80      	cmp	r3, #128	@ 0x80
 800792e:	d109      	bne.n	8007944 <UART_DMAError+0x40>
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	2b21      	cmp	r3, #33	@ 0x21
 8007934:	d106      	bne.n	8007944 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2200      	movs	r2, #0
 800793a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800793e:	6978      	ldr	r0, [r7, #20]
 8007940:	f7ff fede 	bl	8007700 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794e:	2b40      	cmp	r3, #64	@ 0x40
 8007950:	d109      	bne.n	8007966 <UART_DMAError+0x62>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b22      	cmp	r3, #34	@ 0x22
 8007956:	d106      	bne.n	8007966 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2200      	movs	r2, #0
 800795c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007960:	6978      	ldr	r0, [r7, #20]
 8007962:	f7ff ff0e 	bl	8007782 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800796c:	f043 0210 	orr.w	r2, r3, #16
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007976:	6978      	ldr	r0, [r7, #20]
 8007978:	f7ff f904 	bl	8006b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800797c:	bf00      	nop
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007990:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f7ff f8ee 	bl	8006b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079a8:	bf00      	nop
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079cc:	61fb      	str	r3, [r7, #28]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	61bb      	str	r3, [r7, #24]
 80079d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6979      	ldr	r1, [r7, #20]
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	613b      	str	r3, [r7, #16]
   return(result);
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e6      	bne.n	80079b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7f9 fafd 	bl	8000ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079fe:	bf00      	nop
 8007a00:	3720      	adds	r7, #32
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b09c      	sub	sp, #112	@ 0x70
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007a16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a20:	2b22      	cmp	r3, #34	@ 0x22
 8007a22:	f040 80be 	bne.w	8007ba2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007a34:	b2d9      	uxtb	r1, r3
 8007a36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a40:	400a      	ands	r2, r1
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f040 80a1 	bne.w	8007bb2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e6      	bne.n	8007a70 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab4:	f023 0301 	bic.w	r3, r3, #1
 8007ab8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007ac2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ac4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e5      	bne.n	8007aa2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a33      	ldr	r2, [pc, #204]	@ (8007bbc <UART_RxISR_8BIT+0x1b4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d01f      	beq.n	8007b34 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d018      	beq.n	8007b34 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	623b      	str	r3, [r7, #32]
   return(result);
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b16:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b28:	e841 2300 	strex	r3, r2, [r1]
 8007b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e6      	bne.n	8007b02 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d12e      	bne.n	8007b9a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	e853 3f00 	ldrex	r3, [r3]
 8007b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f023 0310 	bic.w	r3, r3, #16
 8007b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b60:	61fb      	str	r3, [r7, #28]
 8007b62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	69b9      	ldr	r1, [r7, #24]
 8007b66:	69fa      	ldr	r2, [r7, #28]
 8007b68:	e841 2300 	strex	r3, r2, [r1]
 8007b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e6      	bne.n	8007b42 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	f003 0310 	and.w	r3, r3, #16
 8007b7e:	2b10      	cmp	r3, #16
 8007b80:	d103      	bne.n	8007b8a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2210      	movs	r2, #16
 8007b88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff f800 	bl	8006b98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b98:	e00b      	b.n	8007bb2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7f9 fa04 	bl	8000fa8 <HAL_UART_RxCpltCallback>
}
 8007ba0:	e007      	b.n	8007bb2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	699a      	ldr	r2, [r3, #24]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f042 0208 	orr.w	r2, r2, #8
 8007bb0:	619a      	str	r2, [r3, #24]
}
 8007bb2:	bf00      	nop
 8007bb4:	3770      	adds	r7, #112	@ 0x70
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	40008000 	.word	0x40008000

08007bc0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b09c      	sub	sp, #112	@ 0x70
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007bce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bd8:	2b22      	cmp	r3, #34	@ 0x22
 8007bda:	f040 80be 	bne.w	8007d5a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bec:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007bee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007bf2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007bfc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c02:	1c9a      	adds	r2, r3, #2
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	3b01      	subs	r3, #1
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f040 80a1 	bne.w	8007d6a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007c36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c46:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c48:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e6      	bne.n	8007c28 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3308      	adds	r3, #8
 8007c60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6c:	f023 0301 	bic.w	r3, r3, #1
 8007c70:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3308      	adds	r3, #8
 8007c78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e5      	bne.n	8007c5a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2220      	movs	r2, #32
 8007c92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a33      	ldr	r2, [pc, #204]	@ (8007d74 <UART_RxISR_16BIT+0x1b4>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d01f      	beq.n	8007cec <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d018      	beq.n	8007cec <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	e853 3f00 	ldrex	r3, [r3]
 8007cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cda:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ce0:	e841 2300 	strex	r3, r2, [r1]
 8007ce4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e6      	bne.n	8007cba <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d12e      	bne.n	8007d52 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f023 0310 	bic.w	r3, r3, #16
 8007d0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d18:	61bb      	str	r3, [r7, #24]
 8007d1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	6979      	ldr	r1, [r7, #20]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	613b      	str	r3, [r7, #16]
   return(result);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e6      	bne.n	8007cfa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	f003 0310 	and.w	r3, r3, #16
 8007d36:	2b10      	cmp	r3, #16
 8007d38:	d103      	bne.n	8007d42 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2210      	movs	r2, #16
 8007d40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7fe ff24 	bl	8006b98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d50:	e00b      	b.n	8007d6a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7f9 f928 	bl	8000fa8 <HAL_UART_RxCpltCallback>
}
 8007d58:	e007      	b.n	8007d6a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	699a      	ldr	r2, [r3, #24]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f042 0208 	orr.w	r2, r2, #8
 8007d68:	619a      	str	r2, [r3, #24]
}
 8007d6a:	bf00      	nop
 8007d6c:	3770      	adds	r7, #112	@ 0x70
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	40008000 	.word	0x40008000

08007d78 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b0ac      	sub	sp, #176	@ 0xb0
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007d86:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dae:	2b22      	cmp	r3, #34	@ 0x22
 8007db0:	f040 8182 	bne.w	80080b8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007dba:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dbe:	e125      	b.n	800800c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007dca:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007dce:	b2d9      	uxtb	r1, r3
 8007dd0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dda:	400a      	ands	r2, r1
 8007ddc:	b2d2      	uxtb	r2, r2
 8007dde:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e0a:	f003 0307 	and.w	r3, r3, #7
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d053      	beq.n	8007eba <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d011      	beq.n	8007e42 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007e1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00b      	beq.n	8007e42 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e38:	f043 0201 	orr.w	r2, r3, #1
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d011      	beq.n	8007e72 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00b      	beq.n	8007e72 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e68:	f043 0204 	orr.w	r2, r3, #4
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d011      	beq.n	8007ea2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00b      	beq.n	8007ea2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2204      	movs	r2, #4
 8007e90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e98:	f043 0202 	orr.w	r2, r3, #2
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d006      	beq.n	8007eba <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7fe fe69 	bl	8006b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f040 80a2 	bne.w	800800c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007edc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007eea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007eec:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007ef0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007ef8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e4      	bne.n	8007ec8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3308      	adds	r3, #8
 8007f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007f0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f14:	f023 0301 	bic.w	r3, r3, #1
 8007f18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3308      	adds	r3, #8
 8007f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f26:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007f28:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007f2c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007f34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e1      	bne.n	8007efe <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a5f      	ldr	r2, [pc, #380]	@ (80080d0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d021      	beq.n	8007f9c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d01a      	beq.n	8007f9c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f88:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f8a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007f8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007f96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e4      	bne.n	8007f66 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d130      	bne.n	8008006 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb2:	e853 3f00 	ldrex	r3, [r3]
 8007fb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fba:	f023 0310 	bic.w	r3, r3, #16
 8007fbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fd4:	e841 2300 	strex	r3, r2, [r1]
 8007fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e4      	bne.n	8007faa <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	f003 0310 	and.w	r3, r3, #16
 8007fea:	2b10      	cmp	r3, #16
 8007fec:	d103      	bne.n	8007ff6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2210      	movs	r2, #16
 8007ff4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7fe fdca 	bl	8006b98 <HAL_UARTEx_RxEventCallback>
 8008004:	e002      	b.n	800800c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7f8 ffce 	bl	8000fa8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800800c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008010:	2b00      	cmp	r3, #0
 8008012:	d006      	beq.n	8008022 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008018:	f003 0320 	and.w	r3, r3, #32
 800801c:	2b00      	cmp	r3, #0
 800801e:	f47f aecf 	bne.w	8007dc0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008028:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800802c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008030:	2b00      	cmp	r3, #0
 8008032:	d049      	beq.n	80080c8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800803a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800803e:	429a      	cmp	r2, r3
 8008040:	d242      	bcs.n	80080c8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3308      	adds	r3, #8
 8008048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	61fb      	str	r3, [r7, #28]
   return(result);
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3308      	adds	r3, #8
 8008062:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008066:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008068:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800806c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e3      	bne.n	8008042 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a15      	ldr	r2, [pc, #84]	@ (80080d4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800807e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	e853 3f00 	ldrex	r3, [r3]
 800808c:	60bb      	str	r3, [r7, #8]
   return(result);
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f043 0320 	orr.w	r3, r3, #32
 8008094:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	461a      	mov	r2, r3
 800809e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80080a2:	61bb      	str	r3, [r7, #24]
 80080a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	6979      	ldr	r1, [r7, #20]
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	613b      	str	r3, [r7, #16]
   return(result);
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e4      	bne.n	8008080 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080b6:	e007      	b.n	80080c8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	699a      	ldr	r2, [r3, #24]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0208 	orr.w	r2, r2, #8
 80080c6:	619a      	str	r2, [r3, #24]
}
 80080c8:	bf00      	nop
 80080ca:	37b0      	adds	r7, #176	@ 0xb0
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	40008000 	.word	0x40008000
 80080d4:	08007a09 	.word	0x08007a09

080080d8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b0ae      	sub	sp, #184	@ 0xb8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80080e6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800810e:	2b22      	cmp	r3, #34	@ 0x22
 8008110:	f040 8186 	bne.w	8008420 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800811a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800811e:	e129      	b.n	8008374 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008126:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800812e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008132:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008136:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800813a:	4013      	ands	r3, r2
 800813c:	b29a      	uxth	r2, r3
 800813e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008142:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008148:	1c9a      	adds	r2, r3, #2
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008154:	b29b      	uxth	r3, r3
 8008156:	3b01      	subs	r3, #1
 8008158:	b29a      	uxth	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800816a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800816e:	f003 0307 	and.w	r3, r3, #7
 8008172:	2b00      	cmp	r3, #0
 8008174:	d053      	beq.n	800821e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008176:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	d011      	beq.n	80081a6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00b      	beq.n	80081a6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2201      	movs	r2, #1
 8008194:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819c:	f043 0201 	orr.w	r2, r3, #1
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d011      	beq.n	80081d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80081b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00b      	beq.n	80081d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2202      	movs	r2, #2
 80081c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081cc:	f043 0204 	orr.w	r2, r3, #4
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081da:	f003 0304 	and.w	r3, r3, #4
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d011      	beq.n	8008206 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80081e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00b      	beq.n	8008206 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2204      	movs	r2, #4
 80081f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081fc:	f043 0202 	orr.w	r2, r3, #2
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800820c:	2b00      	cmp	r3, #0
 800820e:	d006      	beq.n	800821e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7fe fcb7 	bl	8006b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008224:	b29b      	uxth	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	f040 80a4 	bne.w	8008374 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800823a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800823c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008240:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	461a      	mov	r2, r3
 800824a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800824e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008252:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008254:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008256:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800825a:	e841 2300 	strex	r3, r2, [r1]
 800825e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008260:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1e2      	bne.n	800822c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3308      	adds	r3, #8
 800826c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008278:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800827c:	f023 0301 	bic.w	r3, r3, #1
 8008280:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3308      	adds	r3, #8
 800828a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800828e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008290:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008294:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008296:	e841 2300 	strex	r3, r2, [r1]
 800829a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800829c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1e1      	bne.n	8008266 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2220      	movs	r2, #32
 80082a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a5f      	ldr	r2, [pc, #380]	@ (8008438 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d021      	beq.n	8008304 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d01a      	beq.n	8008304 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082d6:	e853 3f00 	ldrex	r3, [r3]
 80082da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e4      	bne.n	80082ce <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008308:	2b01      	cmp	r3, #1
 800830a:	d130      	bne.n	800836e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831a:	e853 3f00 	ldrex	r3, [r3]
 800831e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008322:	f023 0310 	bic.w	r3, r3, #16
 8008326:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008334:	647b      	str	r3, [r7, #68]	@ 0x44
 8008336:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008338:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800833a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800833c:	e841 2300 	strex	r3, r2, [r1]
 8008340:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1e4      	bne.n	8008312 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	f003 0310 	and.w	r3, r3, #16
 8008352:	2b10      	cmp	r3, #16
 8008354:	d103      	bne.n	800835e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2210      	movs	r2, #16
 800835c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7fe fc16 	bl	8006b98 <HAL_UARTEx_RxEventCallback>
 800836c:	e002      	b.n	8008374 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7f8 fe1a 	bl	8000fa8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008374:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008378:	2b00      	cmp	r3, #0
 800837a:	d006      	beq.n	800838a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800837c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008380:	f003 0320 	and.w	r3, r3, #32
 8008384:	2b00      	cmp	r3, #0
 8008386:	f47f aecb 	bne.w	8008120 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008390:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008394:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008398:	2b00      	cmp	r3, #0
 800839a:	d049      	beq.n	8008430 <UART_RxISR_16BIT_FIFOEN+0x358>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80083a2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d242      	bcs.n	8008430 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3308      	adds	r3, #8
 80083b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	623b      	str	r3, [r7, #32]
   return(result);
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3308      	adds	r3, #8
 80083ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80083ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80083d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083d6:	e841 2300 	strex	r3, r2, [r1]
 80083da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1e3      	bne.n	80083aa <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a15      	ldr	r2, [pc, #84]	@ (800843c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80083e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	e853 3f00 	ldrex	r3, [r3]
 80083f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f043 0320 	orr.w	r3, r3, #32
 80083fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	461a      	mov	r2, r3
 8008406:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800840a:	61fb      	str	r3, [r7, #28]
 800840c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	69b9      	ldr	r1, [r7, #24]
 8008410:	69fa      	ldr	r2, [r7, #28]
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	617b      	str	r3, [r7, #20]
   return(result);
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e4      	bne.n	80083e8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800841e:	e007      	b.n	8008430 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	699a      	ldr	r2, [r3, #24]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0208 	orr.w	r2, r2, #8
 800842e:	619a      	str	r2, [r3, #24]
}
 8008430:	bf00      	nop
 8008432:	37b8      	adds	r7, #184	@ 0xb8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	40008000 	.word	0x40008000
 800843c:	08007bc1 	.word	0x08007bc1

08008440 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800848a:	2b01      	cmp	r3, #1
 800848c:	d101      	bne.n	8008492 <HAL_UARTEx_DisableFifoMode+0x16>
 800848e:	2302      	movs	r3, #2
 8008490:	e027      	b.n	80084e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2224      	movs	r2, #36	@ 0x24
 800849e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 0201 	bic.w	r2, r2, #1
 80084b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80084c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2220      	movs	r2, #32
 80084d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d101      	bne.n	8008506 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008502:	2302      	movs	r3, #2
 8008504:	e02d      	b.n	8008562 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2224      	movs	r2, #36	@ 0x24
 8008512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f022 0201 	bic.w	r2, r2, #1
 800852c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	430a      	orrs	r2, r1
 8008540:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f850 	bl	80085e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800857e:	2302      	movs	r3, #2
 8008580:	e02d      	b.n	80085de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2224      	movs	r2, #36	@ 0x24
 800858e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f022 0201 	bic.w	r2, r2, #1
 80085a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	430a      	orrs	r2, r1
 80085bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f812 	bl	80085e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2220      	movs	r2, #32
 80085d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
	...

080085e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d108      	bne.n	800860a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008608:	e031      	b.n	800866e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800860a:	2308      	movs	r3, #8
 800860c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800860e:	2308      	movs	r3, #8
 8008610:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	0e5b      	lsrs	r3, r3, #25
 800861a:	b2db      	uxtb	r3, r3
 800861c:	f003 0307 	and.w	r3, r3, #7
 8008620:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	0f5b      	lsrs	r3, r3, #29
 800862a:	b2db      	uxtb	r3, r3
 800862c:	f003 0307 	and.w	r3, r3, #7
 8008630:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	7b3a      	ldrb	r2, [r7, #12]
 8008636:	4911      	ldr	r1, [pc, #68]	@ (800867c <UARTEx_SetNbDataToProcess+0x94>)
 8008638:	5c8a      	ldrb	r2, [r1, r2]
 800863a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800863e:	7b3a      	ldrb	r2, [r7, #12]
 8008640:	490f      	ldr	r1, [pc, #60]	@ (8008680 <UARTEx_SetNbDataToProcess+0x98>)
 8008642:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008644:	fb93 f3f2 	sdiv	r3, r3, r2
 8008648:	b29a      	uxth	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	7b7a      	ldrb	r2, [r7, #13]
 8008654:	4909      	ldr	r1, [pc, #36]	@ (800867c <UARTEx_SetNbDataToProcess+0x94>)
 8008656:	5c8a      	ldrb	r2, [r1, r2]
 8008658:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800865c:	7b7a      	ldrb	r2, [r7, #13]
 800865e:	4908      	ldr	r1, [pc, #32]	@ (8008680 <UARTEx_SetNbDataToProcess+0x98>)
 8008660:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008662:	fb93 f3f2 	sdiv	r3, r3, r2
 8008666:	b29a      	uxth	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800866e:	bf00      	nop
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	0800e908 	.word	0x0800e908
 8008680:	0800e910 	.word	0x0800e910

08008684 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	4603      	mov	r3, r0
 800868c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008696:	2b84      	cmp	r3, #132	@ 0x84
 8008698:	d005      	beq.n	80086a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800869a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4413      	add	r3, r2
 80086a2:	3303      	adds	r3, #3
 80086a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80086a6:	68fb      	ldr	r3, [r7, #12]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80086b8:	f000 ff76 	bl	80095a8 <vTaskStartScheduler>
  
  return osOK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80086c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086c4:	b087      	sub	sp, #28
 80086c6:	af02      	add	r7, sp, #8
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685c      	ldr	r4, [r3, #4]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086d8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff ffcf 	bl	8008684 <makeFreeRtosPriority>
 80086e6:	4602      	mov	r2, r0
 80086e8:	f107 030c 	add.w	r3, r7, #12
 80086ec:	9301      	str	r3, [sp, #4]
 80086ee:	9200      	str	r2, [sp, #0]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	4632      	mov	r2, r6
 80086f4:	4629      	mov	r1, r5
 80086f6:	4620      	mov	r0, r4
 80086f8:	f000 fdc6 	bl	8009288 <xTaskCreate>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d001      	beq.n	8008706 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8008702:	2300      	movs	r3, #0
 8008704:	e000      	b.n	8008708 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8008706:	68fb      	ldr	r3, [r7, #12]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008710 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <osDelay+0x16>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	e000      	b.n	8008728 <osDelay+0x18>
 8008726:	2301      	movs	r3, #1
 8008728:	4618      	mov	r0, r3
 800872a:	f000 ff07 	bl	800953c <vTaskDelay>
  
  return osOK;
 800872e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f103 0208 	add.w	r2, r3, #8
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f04f 32ff 	mov.w	r2, #4294967295
 8008750:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f103 0208 	add.w	r2, r3, #8
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f103 0208 	add.w	r2, r3, #8
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008786:	bf00      	nop
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008792:	b480      	push	{r7}
 8008794:	b085      	sub	sp, #20
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	689a      	ldr	r2, [r3, #8]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	683a      	ldr	r2, [r7, #0]
 80087bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	1c5a      	adds	r2, r3, #1
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	601a      	str	r2, [r3, #0]
}
 80087ce:	bf00      	nop
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087da:	b480      	push	{r7}
 80087dc:	b085      	sub	sp, #20
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f0:	d103      	bne.n	80087fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	60fb      	str	r3, [r7, #12]
 80087f8:	e00c      	b.n	8008814 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3308      	adds	r3, #8
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	e002      	b.n	8008808 <vListInsert+0x2e>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	60fb      	str	r3, [r7, #12]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	429a      	cmp	r2, r3
 8008812:	d2f6      	bcs.n	8008802 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	601a      	str	r2, [r3, #0]
}
 8008840:	bf00      	nop
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	6892      	ldr	r2, [r2, #8]
 8008862:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	6852      	ldr	r2, [r2, #4]
 800886c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	429a      	cmp	r2, r3
 8008876:	d103      	bne.n	8008880 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	689a      	ldr	r2, [r3, #8]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	1e5a      	subs	r2, r3, #1
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10b      	bne.n	80088cc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80088c6:	bf00      	nop
 80088c8:	bf00      	nop
 80088ca:	e7fd      	b.n	80088c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80088cc:	f001 fdc4 	bl	800a458 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088d8:	68f9      	ldr	r1, [r7, #12]
 80088da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80088dc:	fb01 f303 	mul.w	r3, r1, r3
 80088e0:	441a      	add	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088fc:	3b01      	subs	r3, #1
 80088fe:	68f9      	ldr	r1, [r7, #12]
 8008900:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008902:	fb01 f303 	mul.w	r3, r1, r3
 8008906:	441a      	add	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	22ff      	movs	r2, #255	@ 0xff
 8008910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	22ff      	movs	r2, #255	@ 0xff
 8008918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d114      	bne.n	800894c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d01a      	beq.n	8008960 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3310      	adds	r3, #16
 800892e:	4618      	mov	r0, r3
 8008930:	f001 f898 	bl	8009a64 <xTaskRemoveFromEventList>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d012      	beq.n	8008960 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800893a:	4b0d      	ldr	r3, [pc, #52]	@ (8008970 <xQueueGenericReset+0xd0>)
 800893c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	e009      	b.n	8008960 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3310      	adds	r3, #16
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff fef1 	bl	8008738 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3324      	adds	r3, #36	@ 0x24
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff feec 	bl	8008738 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008960:	f001 fdac 	bl	800a4bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008964:	2301      	movs	r3, #1
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	e000ed04 	.word	0xe000ed04

08008974 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08a      	sub	sp, #40	@ 0x28
 8008978:	af02      	add	r7, sp, #8
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	4613      	mov	r3, r2
 8008980:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10b      	bne.n	80089a0 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	613b      	str	r3, [r7, #16]
}
 800899a:	bf00      	nop
 800899c:	bf00      	nop
 800899e:	e7fd      	b.n	800899c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	fb02 f303 	mul.w	r3, r2, r3
 80089a8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	3350      	adds	r3, #80	@ 0x50
 80089ae:	4618      	mov	r0, r3
 80089b0:	f001 fe74 	bl	800a69c <pvPortMalloc>
 80089b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00d      	beq.n	80089d8 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	3350      	adds	r3, #80	@ 0x50
 80089c4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089c6:	79fa      	ldrb	r2, [r7, #7]
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	4613      	mov	r3, r2
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	68b9      	ldr	r1, [r7, #8]
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f000 f805 	bl	80089e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80089d8:	69bb      	ldr	r3, [r7, #24]
	}
 80089da:	4618      	mov	r0, r3
 80089dc:	3720      	adds	r7, #32
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
 80089ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d103      	bne.n	80089fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	e002      	b.n	8008a04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a10:	2101      	movs	r1, #1
 8008a12:	69b8      	ldr	r0, [r7, #24]
 8008a14:	f7ff ff44 	bl	80088a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	78fa      	ldrb	r2, [r7, #3]
 8008a1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008a20:	bf00      	nop
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b090      	sub	sp, #64	@ 0x40
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
 8008a34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10b      	bne.n	8008a58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a52:	bf00      	nop
 8008a54:	bf00      	nop
 8008a56:	e7fd      	b.n	8008a54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d103      	bne.n	8008a66 <xQueueGenericSendFromISR+0x3e>
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <xQueueGenericSendFromISR+0x42>
 8008a66:	2301      	movs	r3, #1
 8008a68:	e000      	b.n	8008a6c <xQueueGenericSendFromISR+0x44>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10b      	bne.n	8008a88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	e7fd      	b.n	8008a84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d103      	bne.n	8008a96 <xQueueGenericSendFromISR+0x6e>
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d101      	bne.n	8008a9a <xQueueGenericSendFromISR+0x72>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <xQueueGenericSendFromISR+0x74>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10b      	bne.n	8008ab8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	623b      	str	r3, [r7, #32]
}
 8008ab2:	bf00      	nop
 8008ab4:	bf00      	nop
 8008ab6:	e7fd      	b.n	8008ab4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ab8:	f001 fdae 	bl	800a618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008abc:	f3ef 8211 	mrs	r2, BASEPRI
 8008ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	61fa      	str	r2, [r7, #28]
 8008ad2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ad4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ad6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d302      	bcc.n	8008aea <xQueueGenericSendFromISR+0xc2>
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d12f      	bne.n	8008b4a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b00:	f000 faca 	bl	8009098 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b04:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0c:	d112      	bne.n	8008b34 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d016      	beq.n	8008b44 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b18:	3324      	adds	r3, #36	@ 0x24
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 ffa2 	bl	8009a64 <xTaskRemoveFromEventList>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00e      	beq.n	8008b44 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	601a      	str	r2, [r3, #0]
 8008b32:	e007      	b.n	8008b44 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b38:	3301      	adds	r3, #1
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	b25a      	sxtb	r2, r3
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008b44:	2301      	movs	r3, #1
 8008b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008b48:	e001      	b.n	8008b4e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b50:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3740      	adds	r7, #64	@ 0x40
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08e      	sub	sp, #56	@ 0x38
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10b      	bne.n	8008b90 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	623b      	str	r3, [r7, #32]
}
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	e7fd      	b.n	8008b8c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00b      	beq.n	8008bb0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	61fb      	str	r3, [r7, #28]
}
 8008baa:	bf00      	nop
 8008bac:	bf00      	nop
 8008bae:	e7fd      	b.n	8008bac <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <xQueueGiveFromISR+0x5c>
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <xQueueGiveFromISR+0x60>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <xQueueGiveFromISR+0x62>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10b      	bne.n	8008be2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	61bb      	str	r3, [r7, #24]
}
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	e7fd      	b.n	8008bde <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008be2:	f001 fd19 	bl	800a618 <vPortValidateInterruptPriority>
	__asm volatile
 8008be6:	f3ef 8211 	mrs	r2, BASEPRI
 8008bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	617a      	str	r2, [r7, #20]
 8008bfc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008bfe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c06:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d22b      	bcs.n	8008c6a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c22:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2c:	d112      	bne.n	8008c54 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d016      	beq.n	8008c64 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	3324      	adds	r3, #36	@ 0x24
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 ff12 	bl	8009a64 <xTaskRemoveFromEventList>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00e      	beq.n	8008c64 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00b      	beq.n	8008c64 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	601a      	str	r2, [r3, #0]
 8008c52:	e007      	b.n	8008c64 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c58:	3301      	adds	r3, #1
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	b25a      	sxtb	r2, r3
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008c64:	2301      	movs	r3, #1
 8008c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c68:	e001      	b.n	8008c6e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c70:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f383 8811 	msr	BASEPRI, r3
}
 8008c78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3738      	adds	r7, #56	@ 0x38
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b08c      	sub	sp, #48	@ 0x30
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c90:	2300      	movs	r3, #0
 8008c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10b      	bne.n	8008cb6 <xQueueReceive+0x32>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	623b      	str	r3, [r7, #32]
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	e7fd      	b.n	8008cb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d103      	bne.n	8008cc4 <xQueueReceive+0x40>
 8008cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <xQueueReceive+0x44>
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e000      	b.n	8008cca <xQueueReceive+0x46>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10b      	bne.n	8008ce6 <xQueueReceive+0x62>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	61fb      	str	r3, [r7, #28]
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	e7fd      	b.n	8008ce2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ce6:	f001 f863 	bl	8009db0 <xTaskGetSchedulerState>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d102      	bne.n	8008cf6 <xQueueReceive+0x72>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <xQueueReceive+0x76>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e000      	b.n	8008cfc <xQueueReceive+0x78>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10b      	bne.n	8008d18 <xQueueReceive+0x94>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	61bb      	str	r3, [r7, #24]
}
 8008d12:	bf00      	nop
 8008d14:	bf00      	nop
 8008d16:	e7fd      	b.n	8008d14 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d18:	f001 fb9e 	bl	800a458 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d20:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01f      	beq.n	8008d68 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d28:	68b9      	ldr	r1, [r7, #8]
 8008d2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d2c:	f000 fa1e 	bl	800916c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d32:	1e5a      	subs	r2, r3, #1
 8008d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d36:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00f      	beq.n	8008d60 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d42:	3310      	adds	r3, #16
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 fe8d 	bl	8009a64 <xTaskRemoveFromEventList>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d007      	beq.n	8008d60 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d50:	4b3c      	ldr	r3, [pc, #240]	@ (8008e44 <xQueueReceive+0x1c0>)
 8008d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d60:	f001 fbac 	bl	800a4bc <vPortExitCritical>
				return pdPASS;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e069      	b.n	8008e3c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d103      	bne.n	8008d76 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d6e:	f001 fba5 	bl	800a4bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d72:	2300      	movs	r3, #0
 8008d74:	e062      	b.n	8008e3c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d106      	bne.n	8008d8a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d7c:	f107 0310 	add.w	r3, r7, #16
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fed3 	bl	8009b2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d86:	2301      	movs	r3, #1
 8008d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d8a:	f001 fb97 	bl	800a4bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d8e:	f000 fc5f 	bl	8009650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d92:	f001 fb61 	bl	800a458 <vPortEnterCritical>
 8008d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d9c:	b25b      	sxtb	r3, r3
 8008d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da2:	d103      	bne.n	8008dac <xQueueReceive+0x128>
 8008da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008db2:	b25b      	sxtb	r3, r3
 8008db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db8:	d103      	bne.n	8008dc2 <xQueueReceive+0x13e>
 8008dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dc2:	f001 fb7b 	bl	800a4bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dc6:	1d3a      	adds	r2, r7, #4
 8008dc8:	f107 0310 	add.w	r3, r7, #16
 8008dcc:	4611      	mov	r1, r2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f000 fec2 	bl	8009b58 <xTaskCheckForTimeOut>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d123      	bne.n	8008e22 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ddc:	f000 fa3e 	bl	800925c <prvIsQueueEmpty>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d017      	beq.n	8008e16 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de8:	3324      	adds	r3, #36	@ 0x24
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	4611      	mov	r1, r2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 fe12 	bl	8009a18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008df4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008df6:	f000 f9df 	bl	80091b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008dfa:	f000 fc37 	bl	800966c <xTaskResumeAll>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d189      	bne.n	8008d18 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e04:	4b0f      	ldr	r3, [pc, #60]	@ (8008e44 <xQueueReceive+0x1c0>)
 8008e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	e780      	b.n	8008d18 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e18:	f000 f9ce 	bl	80091b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e1c:	f000 fc26 	bl	800966c <xTaskResumeAll>
 8008e20:	e77a      	b.n	8008d18 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e24:	f000 f9c8 	bl	80091b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e28:	f000 fc20 	bl	800966c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e2e:	f000 fa15 	bl	800925c <prvIsQueueEmpty>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f43f af6f 	beq.w	8008d18 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3730      	adds	r7, #48	@ 0x30
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	e000ed04 	.word	0xe000ed04

08008e48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08e      	sub	sp, #56	@ 0x38
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e52:	2300      	movs	r3, #0
 8008e54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10b      	bne.n	8008e7c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	623b      	str	r3, [r7, #32]
}
 8008e76:	bf00      	nop
 8008e78:	bf00      	nop
 8008e7a:	e7fd      	b.n	8008e78 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	61fb      	str	r3, [r7, #28]
}
 8008e96:	bf00      	nop
 8008e98:	bf00      	nop
 8008e9a:	e7fd      	b.n	8008e98 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e9c:	f000 ff88 	bl	8009db0 <xTaskGetSchedulerState>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d102      	bne.n	8008eac <xQueueSemaphoreTake+0x64>
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <xQueueSemaphoreTake+0x68>
 8008eac:	2301      	movs	r3, #1
 8008eae:	e000      	b.n	8008eb2 <xQueueSemaphoreTake+0x6a>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10b      	bne.n	8008ece <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	61bb      	str	r3, [r7, #24]
}
 8008ec8:	bf00      	nop
 8008eca:	bf00      	nop
 8008ecc:	e7fd      	b.n	8008eca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ece:	f001 fac3 	bl	800a458 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d024      	beq.n	8008f28 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee0:	1e5a      	subs	r2, r3, #1
 8008ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d104      	bne.n	8008ef8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008eee:	f001 f90b 	bl	800a108 <pvTaskIncrementMutexHeldCount>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00f      	beq.n	8008f20 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f02:	3310      	adds	r3, #16
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fdad 	bl	8009a64 <xTaskRemoveFromEventList>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d007      	beq.n	8008f20 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f10:	4b54      	ldr	r3, [pc, #336]	@ (8009064 <xQueueSemaphoreTake+0x21c>)
 8008f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f20:	f001 facc 	bl	800a4bc <vPortExitCritical>
				return pdPASS;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e098      	b.n	800905a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d112      	bne.n	8008f54 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	617b      	str	r3, [r7, #20]
}
 8008f46:	bf00      	nop
 8008f48:	bf00      	nop
 8008f4a:	e7fd      	b.n	8008f48 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008f4c:	f001 fab6 	bl	800a4bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f50:	2300      	movs	r3, #0
 8008f52:	e082      	b.n	800905a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d106      	bne.n	8008f68 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f5a:	f107 030c 	add.w	r3, r7, #12
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fde4 	bl	8009b2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f64:	2301      	movs	r3, #1
 8008f66:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f68:	f001 faa8 	bl	800a4bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f6c:	f000 fb70 	bl	8009650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f70:	f001 fa72 	bl	800a458 <vPortEnterCritical>
 8008f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f7a:	b25b      	sxtb	r3, r3
 8008f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f80:	d103      	bne.n	8008f8a <xQueueSemaphoreTake+0x142>
 8008f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f84:	2200      	movs	r2, #0
 8008f86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f90:	b25b      	sxtb	r3, r3
 8008f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f96:	d103      	bne.n	8008fa0 <xQueueSemaphoreTake+0x158>
 8008f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fa0:	f001 fa8c 	bl	800a4bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fa4:	463a      	mov	r2, r7
 8008fa6:	f107 030c 	add.w	r3, r7, #12
 8008faa:	4611      	mov	r1, r2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f000 fdd3 	bl	8009b58 <xTaskCheckForTimeOut>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d132      	bne.n	800901e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008fba:	f000 f94f 	bl	800925c <prvIsQueueEmpty>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d026      	beq.n	8009012 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d109      	bne.n	8008fe0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008fcc:	f001 fa44 	bl	800a458 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 ff09 	bl	8009dec <xTaskPriorityInherit>
 8008fda:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008fdc:	f001 fa6e 	bl	800a4bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe2:	3324      	adds	r3, #36	@ 0x24
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 fd15 	bl	8009a18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008fee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ff0:	f000 f8e2 	bl	80091b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ff4:	f000 fb3a 	bl	800966c <xTaskResumeAll>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f47f af67 	bne.w	8008ece <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009000:	4b18      	ldr	r3, [pc, #96]	@ (8009064 <xQueueSemaphoreTake+0x21c>)
 8009002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	e75d      	b.n	8008ece <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009012:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009014:	f000 f8d0 	bl	80091b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009018:	f000 fb28 	bl	800966c <xTaskResumeAll>
 800901c:	e757      	b.n	8008ece <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800901e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009020:	f000 f8ca 	bl	80091b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009024:	f000 fb22 	bl	800966c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009028:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800902a:	f000 f917 	bl	800925c <prvIsQueueEmpty>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	f43f af4c 	beq.w	8008ece <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00d      	beq.n	8009058 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800903c:	f001 fa0c 	bl	800a458 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009040:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009042:	f000 f811 	bl	8009068 <prvGetDisinheritPriorityAfterTimeout>
 8009046:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800904e:	4618      	mov	r0, r3
 8009050:	f000 ffca 	bl	8009fe8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009054:	f001 fa32 	bl	800a4bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009058:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800905a:	4618      	mov	r0, r3
 800905c:	3738      	adds	r7, #56	@ 0x38
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	e000ed04 	.word	0xe000ed04

08009068 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009074:	2b00      	cmp	r3, #0
 8009076:	d006      	beq.n	8009086 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f1c3 0307 	rsb	r3, r3, #7
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	e001      	b.n	800908a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009086:	2300      	movs	r3, #0
 8009088:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800908a:	68fb      	ldr	r3, [r7, #12]
	}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10d      	bne.n	80090d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d14d      	bne.n	800915a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 ff08 	bl	8009ed8 <xTaskPriorityDisinherit>
 80090c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	609a      	str	r2, [r3, #8]
 80090d0:	e043      	b.n	800915a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d119      	bne.n	800910c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6858      	ldr	r0, [r3, #4]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090e0:	461a      	mov	r2, r3
 80090e2:	68b9      	ldr	r1, [r7, #8]
 80090e4:	f003 fae1 	bl	800c6aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f0:	441a      	add	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d32b      	bcc.n	800915a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	605a      	str	r2, [r3, #4]
 800910a:	e026      	b.n	800915a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	68d8      	ldr	r0, [r3, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009114:	461a      	mov	r2, r3
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	f003 fac7 	bl	800c6aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	68da      	ldr	r2, [r3, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009124:	425b      	negs	r3, r3
 8009126:	441a      	add	r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	68da      	ldr	r2, [r3, #12]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	429a      	cmp	r2, r3
 8009136:	d207      	bcs.n	8009148 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	689a      	ldr	r2, [r3, #8]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009140:	425b      	negs	r3, r3
 8009142:	441a      	add	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b02      	cmp	r3, #2
 800914c:	d105      	bne.n	800915a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	3b01      	subs	r3, #1
 8009158:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	1c5a      	adds	r2, r3, #1
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009162:	697b      	ldr	r3, [r7, #20]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917a:	2b00      	cmp	r3, #0
 800917c:	d018      	beq.n	80091b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009186:	441a      	add	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	429a      	cmp	r2, r3
 8009196:	d303      	bcc.n	80091a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	68d9      	ldr	r1, [r3, #12]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a8:	461a      	mov	r2, r3
 80091aa:	6838      	ldr	r0, [r7, #0]
 80091ac:	f003 fa7d 	bl	800c6aa <memcpy>
	}
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80091c0:	f001 f94a 	bl	800a458 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091cc:	e011      	b.n	80091f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d012      	beq.n	80091fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3324      	adds	r3, #36	@ 0x24
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 fc42 	bl	8009a64 <xTaskRemoveFromEventList>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80091e6:	f000 fd1b 	bl	8009c20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	3b01      	subs	r3, #1
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	dce9      	bgt.n	80091ce <prvUnlockQueue+0x16>
 80091fa:	e000      	b.n	80091fe <prvUnlockQueue+0x46>
					break;
 80091fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	22ff      	movs	r2, #255	@ 0xff
 8009202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009206:	f001 f959 	bl	800a4bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800920a:	f001 f925 	bl	800a458 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009214:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009216:	e011      	b.n	800923c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d012      	beq.n	8009246 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3310      	adds	r3, #16
 8009224:	4618      	mov	r0, r3
 8009226:	f000 fc1d 	bl	8009a64 <xTaskRemoveFromEventList>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009230:	f000 fcf6 	bl	8009c20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	3b01      	subs	r3, #1
 8009238:	b2db      	uxtb	r3, r3
 800923a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800923c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009240:	2b00      	cmp	r3, #0
 8009242:	dce9      	bgt.n	8009218 <prvUnlockQueue+0x60>
 8009244:	e000      	b.n	8009248 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009246:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	22ff      	movs	r2, #255	@ 0xff
 800924c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009250:	f001 f934 	bl	800a4bc <vPortExitCritical>
}
 8009254:	bf00      	nop
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009264:	f001 f8f8 	bl	800a458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009270:	2301      	movs	r3, #1
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	e001      	b.n	800927a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009276:	2300      	movs	r3, #0
 8009278:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800927a:	f001 f91f 	bl	800a4bc <vPortExitCritical>

	return xReturn;
 800927e:	68fb      	ldr	r3, [r7, #12]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08c      	sub	sp, #48	@ 0x30
 800928c:	af04      	add	r7, sp, #16
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	603b      	str	r3, [r7, #0]
 8009294:	4613      	mov	r3, r2
 8009296:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009298:	88fb      	ldrh	r3, [r7, #6]
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	4618      	mov	r0, r3
 800929e:	f001 f9fd 	bl	800a69c <pvPortMalloc>
 80092a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00e      	beq.n	80092c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092aa:	20bc      	movs	r0, #188	@ 0xbc
 80092ac:	f001 f9f6 	bl	800a69c <pvPortMalloc>
 80092b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80092be:	e005      	b.n	80092cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092c0:	6978      	ldr	r0, [r7, #20]
 80092c2:	f001 fab9 	bl	800a838 <vPortFree>
 80092c6:	e001      	b.n	80092cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092c8:	2300      	movs	r3, #0
 80092ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d013      	beq.n	80092fa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092d2:	88fa      	ldrh	r2, [r7, #6]
 80092d4:	2300      	movs	r3, #0
 80092d6:	9303      	str	r3, [sp, #12]
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	9302      	str	r3, [sp, #8]
 80092dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092de:	9301      	str	r3, [sp, #4]
 80092e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	68b9      	ldr	r1, [r7, #8]
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 f80f 	bl	800930c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092ee:	69f8      	ldr	r0, [r7, #28]
 80092f0:	f000 f8b6 	bl	8009460 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092f4:	2301      	movs	r3, #1
 80092f6:	61bb      	str	r3, [r7, #24]
 80092f8:	e002      	b.n	8009300 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092fa:	f04f 33ff 	mov.w	r3, #4294967295
 80092fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009300:	69bb      	ldr	r3, [r7, #24]
	}
 8009302:	4618      	mov	r0, r3
 8009304:	3720      	adds	r7, #32
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
	...

0800930c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b088      	sub	sp, #32
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800931a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	461a      	mov	r2, r3
 8009324:	21a5      	movs	r1, #165	@ 0xa5
 8009326:	f003 f8ea 	bl	800c4fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800932a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009334:	3b01      	subs	r3, #1
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	4413      	add	r3, r2
 800933a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	f023 0307 	bic.w	r3, r3, #7
 8009342:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	f003 0307 	and.w	r3, r3, #7
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00b      	beq.n	8009366 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	617b      	str	r3, [r7, #20]
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	e7fd      	b.n	8009362 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01f      	beq.n	80093ac <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800936c:	2300      	movs	r3, #0
 800936e:	61fb      	str	r3, [r7, #28]
 8009370:	e012      	b.n	8009398 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	4413      	add	r3, r2
 8009378:	7819      	ldrb	r1, [r3, #0]
 800937a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	4413      	add	r3, r2
 8009380:	3334      	adds	r3, #52	@ 0x34
 8009382:	460a      	mov	r2, r1
 8009384:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	4413      	add	r3, r2
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d006      	beq.n	80093a0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	3301      	adds	r3, #1
 8009396:	61fb      	str	r3, [r7, #28]
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	2b1f      	cmp	r3, #31
 800939c:	d9e9      	bls.n	8009372 <prvInitialiseNewTask+0x66>
 800939e:	e000      	b.n	80093a2 <prvInitialiseNewTask+0x96>
			{
				break;
 80093a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80093aa:	e003      	b.n	80093b4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80093ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b6:	2b06      	cmp	r3, #6
 80093b8:	d901      	bls.n	80093be <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093ba:	2306      	movs	r3, #6
 80093bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093c8:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 80093ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093cc:	2200      	movs	r2, #0
 80093ce:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d2:	3304      	adds	r3, #4
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7ff f9cf 	bl	8008778 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093dc:	3318      	adds	r3, #24
 80093de:	4618      	mov	r0, r3
 80093e0:	f7ff f9ca 	bl	8008778 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ec:	f1c3 0207 	rsb	r2, r3, #7
 80093f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80093fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fc:	2200      	movs	r2, #0
 80093fe:	665a      	str	r2, [r3, #100]	@ 0x64
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009402:	2200      	movs	r2, #0
 8009404:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940a:	2200      	movs	r2, #0
 800940c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009412:	3368      	adds	r3, #104	@ 0x68
 8009414:	224c      	movs	r2, #76	@ 0x4c
 8009416:	2100      	movs	r1, #0
 8009418:	4618      	mov	r0, r3
 800941a:	f003 f870 	bl	800c4fe <memset>
 800941e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009420:	4a0c      	ldr	r2, [pc, #48]	@ (8009454 <prvInitialiseNewTask+0x148>)
 8009422:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009426:	4a0c      	ldr	r2, [pc, #48]	@ (8009458 <prvInitialiseNewTask+0x14c>)
 8009428:	671a      	str	r2, [r3, #112]	@ 0x70
 800942a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942c:	4a0b      	ldr	r2, [pc, #44]	@ (800945c <prvInitialiseNewTask+0x150>)
 800942e:	675a      	str	r2, [r3, #116]	@ 0x74
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	68f9      	ldr	r1, [r7, #12]
 8009434:	69b8      	ldr	r0, [r7, #24]
 8009436:	f000 fee1 	bl	800a1fc <pxPortInitialiseStack>
 800943a:	4602      	mov	r2, r0
 800943c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009442:	2b00      	cmp	r3, #0
 8009444:	d002      	beq.n	800944c <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800944a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800944c:	bf00      	nop
 800944e:	3720      	adds	r7, #32
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	200077e8 	.word	0x200077e8
 8009458:	20007850 	.word	0x20007850
 800945c:	200078b8 	.word	0x200078b8

08009460 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009468:	f000 fff6 	bl	800a458 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800946c:	4b2c      	ldr	r3, [pc, #176]	@ (8009520 <prvAddNewTaskToReadyList+0xc0>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3301      	adds	r3, #1
 8009472:	4a2b      	ldr	r2, [pc, #172]	@ (8009520 <prvAddNewTaskToReadyList+0xc0>)
 8009474:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009476:	4b2b      	ldr	r3, [pc, #172]	@ (8009524 <prvAddNewTaskToReadyList+0xc4>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d109      	bne.n	8009492 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800947e:	4a29      	ldr	r2, [pc, #164]	@ (8009524 <prvAddNewTaskToReadyList+0xc4>)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009484:	4b26      	ldr	r3, [pc, #152]	@ (8009520 <prvAddNewTaskToReadyList+0xc0>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d110      	bne.n	80094ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800948c:	f000 fbec 	bl	8009c68 <prvInitialiseTaskLists>
 8009490:	e00d      	b.n	80094ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009492:	4b25      	ldr	r3, [pc, #148]	@ (8009528 <prvAddNewTaskToReadyList+0xc8>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d109      	bne.n	80094ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800949a:	4b22      	ldr	r3, [pc, #136]	@ (8009524 <prvAddNewTaskToReadyList+0xc4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d802      	bhi.n	80094ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80094a8:	4a1e      	ldr	r2, [pc, #120]	@ (8009524 <prvAddNewTaskToReadyList+0xc4>)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80094ae:	4b1f      	ldr	r3, [pc, #124]	@ (800952c <prvAddNewTaskToReadyList+0xcc>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3301      	adds	r3, #1
 80094b4:	4a1d      	ldr	r2, [pc, #116]	@ (800952c <prvAddNewTaskToReadyList+0xcc>)
 80094b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80094b8:	4b1c      	ldr	r3, [pc, #112]	@ (800952c <prvAddNewTaskToReadyList+0xcc>)
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c4:	2201      	movs	r2, #1
 80094c6:	409a      	lsls	r2, r3
 80094c8:	4b19      	ldr	r3, [pc, #100]	@ (8009530 <prvAddNewTaskToReadyList+0xd0>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	4a18      	ldr	r2, [pc, #96]	@ (8009530 <prvAddNewTaskToReadyList+0xd0>)
 80094d0:	6013      	str	r3, [r2, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094d6:	4613      	mov	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4a15      	ldr	r2, [pc, #84]	@ (8009534 <prvAddNewTaskToReadyList+0xd4>)
 80094e0:	441a      	add	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	3304      	adds	r3, #4
 80094e6:	4619      	mov	r1, r3
 80094e8:	4610      	mov	r0, r2
 80094ea:	f7ff f952 	bl	8008792 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094ee:	f000 ffe5 	bl	800a4bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009528 <prvAddNewTaskToReadyList+0xc8>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00e      	beq.n	8009518 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009524 <prvAddNewTaskToReadyList+0xc4>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009504:	429a      	cmp	r2, r3
 8009506:	d207      	bcs.n	8009518 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009508:	4b0b      	ldr	r3, [pc, #44]	@ (8009538 <prvAddNewTaskToReadyList+0xd8>)
 800950a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009518:	bf00      	nop
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20000a2c 	.word	0x20000a2c
 8009524:	2000092c 	.word	0x2000092c
 8009528:	20000a38 	.word	0x20000a38
 800952c:	20000a48 	.word	0x20000a48
 8009530:	20000a34 	.word	0x20000a34
 8009534:	20000930 	.word	0x20000930
 8009538:	e000ed04 	.word	0xe000ed04

0800953c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009544:	2300      	movs	r3, #0
 8009546:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d018      	beq.n	8009580 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800954e:	4b14      	ldr	r3, [pc, #80]	@ (80095a0 <vTaskDelay+0x64>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00b      	beq.n	800956e <vTaskDelay+0x32>
	__asm volatile
 8009556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	60bb      	str	r3, [r7, #8]
}
 8009568:	bf00      	nop
 800956a:	bf00      	nop
 800956c:	e7fd      	b.n	800956a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800956e:	f000 f86f 	bl	8009650 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009572:	2100      	movs	r1, #0
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fddb 	bl	800a130 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800957a:	f000 f877 	bl	800966c <xTaskResumeAll>
 800957e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d107      	bne.n	8009596 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009586:	4b07      	ldr	r3, [pc, #28]	@ (80095a4 <vTaskDelay+0x68>)
 8009588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009596:	bf00      	nop
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	20000a54 	.word	0x20000a54
 80095a4:	e000ed04 	.word	0xe000ed04

080095a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80095ae:	4b20      	ldr	r3, [pc, #128]	@ (8009630 <vTaskStartScheduler+0x88>)
 80095b0:	9301      	str	r3, [sp, #4]
 80095b2:	2300      	movs	r3, #0
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	2300      	movs	r3, #0
 80095b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80095bc:	491d      	ldr	r1, [pc, #116]	@ (8009634 <vTaskStartScheduler+0x8c>)
 80095be:	481e      	ldr	r0, [pc, #120]	@ (8009638 <vTaskStartScheduler+0x90>)
 80095c0:	f7ff fe62 	bl	8009288 <xTaskCreate>
 80095c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d11d      	bne.n	8009608 <vTaskStartScheduler+0x60>
	__asm volatile
 80095cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	60bb      	str	r3, [r7, #8]
}
 80095de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095e0:	4b16      	ldr	r3, [pc, #88]	@ (800963c <vTaskStartScheduler+0x94>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3368      	adds	r3, #104	@ 0x68
 80095e6:	4a16      	ldr	r2, [pc, #88]	@ (8009640 <vTaskStartScheduler+0x98>)
 80095e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095ea:	4b16      	ldr	r3, [pc, #88]	@ (8009644 <vTaskStartScheduler+0x9c>)
 80095ec:	f04f 32ff 	mov.w	r2, #4294967295
 80095f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095f2:	4b15      	ldr	r3, [pc, #84]	@ (8009648 <vTaskStartScheduler+0xa0>)
 80095f4:	2201      	movs	r2, #1
 80095f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095f8:	4b14      	ldr	r3, [pc, #80]	@ (800964c <vTaskStartScheduler+0xa4>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80095fe:	f7f7 fcc3 	bl	8000f88 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009602:	f000 fe85 	bl	800a310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009606:	e00f      	b.n	8009628 <vTaskStartScheduler+0x80>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960e:	d10b      	bne.n	8009628 <vTaskStartScheduler+0x80>
	__asm volatile
 8009610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	607b      	str	r3, [r7, #4]
}
 8009622:	bf00      	nop
 8009624:	bf00      	nop
 8009626:	e7fd      	b.n	8009624 <vTaskStartScheduler+0x7c>
}
 8009628:	bf00      	nop
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	20000a50 	.word	0x20000a50
 8009634:	0800e8a8 	.word	0x0800e8a8
 8009638:	08009c39 	.word	0x08009c39
 800963c:	2000092c 	.word	0x2000092c
 8009640:	2000041c 	.word	0x2000041c
 8009644:	20000a4c 	.word	0x20000a4c
 8009648:	20000a38 	.word	0x20000a38
 800964c:	20000a30 	.word	0x20000a30

08009650 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009650:	b480      	push	{r7}
 8009652:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009654:	4b04      	ldr	r3, [pc, #16]	@ (8009668 <vTaskSuspendAll+0x18>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	3301      	adds	r3, #1
 800965a:	4a03      	ldr	r2, [pc, #12]	@ (8009668 <vTaskSuspendAll+0x18>)
 800965c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800965e:	bf00      	nop
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	20000a54 	.word	0x20000a54

0800966c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009672:	2300      	movs	r3, #0
 8009674:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009676:	2300      	movs	r3, #0
 8009678:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800967a:	4b42      	ldr	r3, [pc, #264]	@ (8009784 <xTaskResumeAll+0x118>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10b      	bne.n	800969a <xTaskResumeAll+0x2e>
	__asm volatile
 8009682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009686:	f383 8811 	msr	BASEPRI, r3
 800968a:	f3bf 8f6f 	isb	sy
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	603b      	str	r3, [r7, #0]
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop
 8009698:	e7fd      	b.n	8009696 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800969a:	f000 fedd 	bl	800a458 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800969e:	4b39      	ldr	r3, [pc, #228]	@ (8009784 <xTaskResumeAll+0x118>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3b01      	subs	r3, #1
 80096a4:	4a37      	ldr	r2, [pc, #220]	@ (8009784 <xTaskResumeAll+0x118>)
 80096a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096a8:	4b36      	ldr	r3, [pc, #216]	@ (8009784 <xTaskResumeAll+0x118>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d161      	bne.n	8009774 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096b0:	4b35      	ldr	r3, [pc, #212]	@ (8009788 <xTaskResumeAll+0x11c>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d05d      	beq.n	8009774 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096b8:	e02e      	b.n	8009718 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ba:	4b34      	ldr	r3, [pc, #208]	@ (800978c <xTaskResumeAll+0x120>)
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3318      	adds	r3, #24
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7ff f8c0 	bl	800884c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	3304      	adds	r3, #4
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7ff f8bb 	bl	800884c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096da:	2201      	movs	r2, #1
 80096dc:	409a      	lsls	r2, r3
 80096de:	4b2c      	ldr	r3, [pc, #176]	@ (8009790 <xTaskResumeAll+0x124>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	4a2a      	ldr	r2, [pc, #168]	@ (8009790 <xTaskResumeAll+0x124>)
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ec:	4613      	mov	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4a27      	ldr	r2, [pc, #156]	@ (8009794 <xTaskResumeAll+0x128>)
 80096f6:	441a      	add	r2, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3304      	adds	r3, #4
 80096fc:	4619      	mov	r1, r3
 80096fe:	4610      	mov	r0, r2
 8009700:	f7ff f847 	bl	8008792 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009708:	4b23      	ldr	r3, [pc, #140]	@ (8009798 <xTaskResumeAll+0x12c>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970e:	429a      	cmp	r2, r3
 8009710:	d302      	bcc.n	8009718 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009712:	4b22      	ldr	r3, [pc, #136]	@ (800979c <xTaskResumeAll+0x130>)
 8009714:	2201      	movs	r2, #1
 8009716:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009718:	4b1c      	ldr	r3, [pc, #112]	@ (800978c <xTaskResumeAll+0x120>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1cc      	bne.n	80096ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009726:	f000 fb23 	bl	8009d70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800972a:	4b1d      	ldr	r3, [pc, #116]	@ (80097a0 <xTaskResumeAll+0x134>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d010      	beq.n	8009758 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009736:	f000 f837 	bl	80097a8 <xTaskIncrementTick>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009740:	4b16      	ldr	r3, [pc, #88]	@ (800979c <xTaskResumeAll+0x130>)
 8009742:	2201      	movs	r2, #1
 8009744:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	3b01      	subs	r3, #1
 800974a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1f1      	bne.n	8009736 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009752:	4b13      	ldr	r3, [pc, #76]	@ (80097a0 <xTaskResumeAll+0x134>)
 8009754:	2200      	movs	r2, #0
 8009756:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009758:	4b10      	ldr	r3, [pc, #64]	@ (800979c <xTaskResumeAll+0x130>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d009      	beq.n	8009774 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009760:	2301      	movs	r3, #1
 8009762:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009764:	4b0f      	ldr	r3, [pc, #60]	@ (80097a4 <xTaskResumeAll+0x138>)
 8009766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009774:	f000 fea2 	bl	800a4bc <vPortExitCritical>

	return xAlreadyYielded;
 8009778:	68bb      	ldr	r3, [r7, #8]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20000a54 	.word	0x20000a54
 8009788:	20000a2c 	.word	0x20000a2c
 800978c:	200009ec 	.word	0x200009ec
 8009790:	20000a34 	.word	0x20000a34
 8009794:	20000930 	.word	0x20000930
 8009798:	2000092c 	.word	0x2000092c
 800979c:	20000a40 	.word	0x20000a40
 80097a0:	20000a3c 	.word	0x20000a3c
 80097a4:	e000ed04 	.word	0xe000ed04

080097a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80097ae:	2300      	movs	r3, #0
 80097b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097b2:	4b4f      	ldr	r3, [pc, #316]	@ (80098f0 <xTaskIncrementTick+0x148>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f040 808f 	bne.w	80098da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097bc:	4b4d      	ldr	r3, [pc, #308]	@ (80098f4 <xTaskIncrementTick+0x14c>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3301      	adds	r3, #1
 80097c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097c4:	4a4b      	ldr	r2, [pc, #300]	@ (80098f4 <xTaskIncrementTick+0x14c>)
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d121      	bne.n	8009814 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80097d0:	4b49      	ldr	r3, [pc, #292]	@ (80098f8 <xTaskIncrementTick+0x150>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00b      	beq.n	80097f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80097da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	603b      	str	r3, [r7, #0]
}
 80097ec:	bf00      	nop
 80097ee:	bf00      	nop
 80097f0:	e7fd      	b.n	80097ee <xTaskIncrementTick+0x46>
 80097f2:	4b41      	ldr	r3, [pc, #260]	@ (80098f8 <xTaskIncrementTick+0x150>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	60fb      	str	r3, [r7, #12]
 80097f8:	4b40      	ldr	r3, [pc, #256]	@ (80098fc <xTaskIncrementTick+0x154>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a3e      	ldr	r2, [pc, #248]	@ (80098f8 <xTaskIncrementTick+0x150>)
 80097fe:	6013      	str	r3, [r2, #0]
 8009800:	4a3e      	ldr	r2, [pc, #248]	@ (80098fc <xTaskIncrementTick+0x154>)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6013      	str	r3, [r2, #0]
 8009806:	4b3e      	ldr	r3, [pc, #248]	@ (8009900 <xTaskIncrementTick+0x158>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3301      	adds	r3, #1
 800980c:	4a3c      	ldr	r2, [pc, #240]	@ (8009900 <xTaskIncrementTick+0x158>)
 800980e:	6013      	str	r3, [r2, #0]
 8009810:	f000 faae 	bl	8009d70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009814:	4b3b      	ldr	r3, [pc, #236]	@ (8009904 <xTaskIncrementTick+0x15c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	429a      	cmp	r2, r3
 800981c:	d348      	bcc.n	80098b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800981e:	4b36      	ldr	r3, [pc, #216]	@ (80098f8 <xTaskIncrementTick+0x150>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d104      	bne.n	8009832 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009828:	4b36      	ldr	r3, [pc, #216]	@ (8009904 <xTaskIncrementTick+0x15c>)
 800982a:	f04f 32ff 	mov.w	r2, #4294967295
 800982e:	601a      	str	r2, [r3, #0]
					break;
 8009830:	e03e      	b.n	80098b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009832:	4b31      	ldr	r3, [pc, #196]	@ (80098f8 <xTaskIncrementTick+0x150>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	429a      	cmp	r2, r3
 8009848:	d203      	bcs.n	8009852 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800984a:	4a2e      	ldr	r2, [pc, #184]	@ (8009904 <xTaskIncrementTick+0x15c>)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009850:	e02e      	b.n	80098b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	3304      	adds	r3, #4
 8009856:	4618      	mov	r0, r3
 8009858:	f7fe fff8 	bl	800884c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009860:	2b00      	cmp	r3, #0
 8009862:	d004      	beq.n	800986e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	3318      	adds	r3, #24
 8009868:	4618      	mov	r0, r3
 800986a:	f7fe ffef 	bl	800884c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009872:	2201      	movs	r2, #1
 8009874:	409a      	lsls	r2, r3
 8009876:	4b24      	ldr	r3, [pc, #144]	@ (8009908 <xTaskIncrementTick+0x160>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4313      	orrs	r3, r2
 800987c:	4a22      	ldr	r2, [pc, #136]	@ (8009908 <xTaskIncrementTick+0x160>)
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009884:	4613      	mov	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4a1f      	ldr	r2, [pc, #124]	@ (800990c <xTaskIncrementTick+0x164>)
 800988e:	441a      	add	r2, r3
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	3304      	adds	r3, #4
 8009894:	4619      	mov	r1, r3
 8009896:	4610      	mov	r0, r2
 8009898:	f7fe ff7b 	bl	8008792 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009910 <xTaskIncrementTick+0x168>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d3b9      	bcc.n	800981e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80098aa:	2301      	movs	r3, #1
 80098ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098ae:	e7b6      	b.n	800981e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098b0:	4b17      	ldr	r3, [pc, #92]	@ (8009910 <xTaskIncrementTick+0x168>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098b6:	4915      	ldr	r1, [pc, #84]	@ (800990c <xTaskIncrementTick+0x164>)
 80098b8:	4613      	mov	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	440b      	add	r3, r1
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d901      	bls.n	80098cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80098c8:	2301      	movs	r3, #1
 80098ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098cc:	4b11      	ldr	r3, [pc, #68]	@ (8009914 <xTaskIncrementTick+0x16c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d007      	beq.n	80098e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80098d4:	2301      	movs	r3, #1
 80098d6:	617b      	str	r3, [r7, #20]
 80098d8:	e004      	b.n	80098e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098da:	4b0f      	ldr	r3, [pc, #60]	@ (8009918 <xTaskIncrementTick+0x170>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3301      	adds	r3, #1
 80098e0:	4a0d      	ldr	r2, [pc, #52]	@ (8009918 <xTaskIncrementTick+0x170>)
 80098e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098e4:	697b      	ldr	r3, [r7, #20]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3718      	adds	r7, #24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	20000a54 	.word	0x20000a54
 80098f4:	20000a30 	.word	0x20000a30
 80098f8:	200009e4 	.word	0x200009e4
 80098fc:	200009e8 	.word	0x200009e8
 8009900:	20000a44 	.word	0x20000a44
 8009904:	20000a4c 	.word	0x20000a4c
 8009908:	20000a34 	.word	0x20000a34
 800990c:	20000930 	.word	0x20000930
 8009910:	2000092c 	.word	0x2000092c
 8009914:	20000a40 	.word	0x20000a40
 8009918:	20000a3c 	.word	0x20000a3c

0800991c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009922:	4b35      	ldr	r3, [pc, #212]	@ (80099f8 <vTaskSwitchContext+0xdc>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800992a:	4b34      	ldr	r3, [pc, #208]	@ (80099fc <vTaskSwitchContext+0xe0>)
 800992c:	2201      	movs	r2, #1
 800992e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009930:	e05e      	b.n	80099f0 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8009932:	4b32      	ldr	r3, [pc, #200]	@ (80099fc <vTaskSwitchContext+0xe0>)
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009938:	f7f7 fb2d 	bl	8000f96 <getRunTimeCounterValue>
 800993c:	4603      	mov	r3, r0
 800993e:	4a30      	ldr	r2, [pc, #192]	@ (8009a00 <vTaskSwitchContext+0xe4>)
 8009940:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009942:	4b2f      	ldr	r3, [pc, #188]	@ (8009a00 <vTaskSwitchContext+0xe4>)
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	4b2f      	ldr	r3, [pc, #188]	@ (8009a04 <vTaskSwitchContext+0xe8>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d909      	bls.n	8009962 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800994e:	4b2e      	ldr	r3, [pc, #184]	@ (8009a08 <vTaskSwitchContext+0xec>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8009954:	4a2a      	ldr	r2, [pc, #168]	@ (8009a00 <vTaskSwitchContext+0xe4>)
 8009956:	6810      	ldr	r0, [r2, #0]
 8009958:	4a2a      	ldr	r2, [pc, #168]	@ (8009a04 <vTaskSwitchContext+0xe8>)
 800995a:	6812      	ldr	r2, [r2, #0]
 800995c:	1a82      	subs	r2, r0, r2
 800995e:	440a      	add	r2, r1
 8009960:	665a      	str	r2, [r3, #100]	@ 0x64
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009962:	4b27      	ldr	r3, [pc, #156]	@ (8009a00 <vTaskSwitchContext+0xe4>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a27      	ldr	r2, [pc, #156]	@ (8009a04 <vTaskSwitchContext+0xe8>)
 8009968:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800996a:	4b28      	ldr	r3, [pc, #160]	@ (8009a0c <vTaskSwitchContext+0xf0>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	fab3 f383 	clz	r3, r3
 8009976:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009978:	7afb      	ldrb	r3, [r7, #11]
 800997a:	f1c3 031f 	rsb	r3, r3, #31
 800997e:	617b      	str	r3, [r7, #20]
 8009980:	4923      	ldr	r1, [pc, #140]	@ (8009a10 <vTaskSwitchContext+0xf4>)
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	4613      	mov	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	440b      	add	r3, r1
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10b      	bne.n	80099ac <vTaskSwitchContext+0x90>
	__asm volatile
 8009994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	607b      	str	r3, [r7, #4]
}
 80099a6:	bf00      	nop
 80099a8:	bf00      	nop
 80099aa:	e7fd      	b.n	80099a8 <vTaskSwitchContext+0x8c>
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	4613      	mov	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4a16      	ldr	r2, [pc, #88]	@ (8009a10 <vTaskSwitchContext+0xf4>)
 80099b8:	4413      	add	r3, r2
 80099ba:	613b      	str	r3, [r7, #16]
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	685a      	ldr	r2, [r3, #4]
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	605a      	str	r2, [r3, #4]
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	3308      	adds	r3, #8
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d104      	bne.n	80099dc <vTaskSwitchContext+0xc0>
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	605a      	str	r2, [r3, #4]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	4a09      	ldr	r2, [pc, #36]	@ (8009a08 <vTaskSwitchContext+0xec>)
 80099e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099e6:	4b08      	ldr	r3, [pc, #32]	@ (8009a08 <vTaskSwitchContext+0xec>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3368      	adds	r3, #104	@ 0x68
 80099ec:	4a09      	ldr	r2, [pc, #36]	@ (8009a14 <vTaskSwitchContext+0xf8>)
 80099ee:	6013      	str	r3, [r2, #0]
}
 80099f0:	bf00      	nop
 80099f2:	3718      	adds	r7, #24
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	20000a54 	.word	0x20000a54
 80099fc:	20000a40 	.word	0x20000a40
 8009a00:	20000a5c 	.word	0x20000a5c
 8009a04:	20000a58 	.word	0x20000a58
 8009a08:	2000092c 	.word	0x2000092c
 8009a0c:	20000a34 	.word	0x20000a34
 8009a10:	20000930 	.word	0x20000930
 8009a14:	2000041c 	.word	0x2000041c

08009a18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10b      	bne.n	8009a40 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	60fb      	str	r3, [r7, #12]
}
 8009a3a:	bf00      	nop
 8009a3c:	bf00      	nop
 8009a3e:	e7fd      	b.n	8009a3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a40:	4b07      	ldr	r3, [pc, #28]	@ (8009a60 <vTaskPlaceOnEventList+0x48>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	3318      	adds	r3, #24
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7fe fec6 	bl	80087da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a4e:	2101      	movs	r1, #1
 8009a50:	6838      	ldr	r0, [r7, #0]
 8009a52:	f000 fb6d 	bl	800a130 <prvAddCurrentTaskToDelayedList>
}
 8009a56:	bf00      	nop
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	2000092c 	.word	0x2000092c

08009a64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10b      	bne.n	8009a92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	60fb      	str	r3, [r7, #12]
}
 8009a8c:	bf00      	nop
 8009a8e:	bf00      	nop
 8009a90:	e7fd      	b.n	8009a8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	3318      	adds	r3, #24
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fed8 	bl	800884c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009b14 <xTaskRemoveFromEventList+0xb0>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d11c      	bne.n	8009ade <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fe fecf 	bl	800884c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	409a      	lsls	r2, r3
 8009ab6:	4b18      	ldr	r3, [pc, #96]	@ (8009b18 <xTaskRemoveFromEventList+0xb4>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	4a16      	ldr	r2, [pc, #88]	@ (8009b18 <xTaskRemoveFromEventList+0xb4>)
 8009abe:	6013      	str	r3, [r2, #0]
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4a13      	ldr	r2, [pc, #76]	@ (8009b1c <xTaskRemoveFromEventList+0xb8>)
 8009ace:	441a      	add	r2, r3
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4610      	mov	r0, r2
 8009ad8:	f7fe fe5b 	bl	8008792 <vListInsertEnd>
 8009adc:	e005      	b.n	8009aea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	3318      	adds	r3, #24
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	480e      	ldr	r0, [pc, #56]	@ (8009b20 <xTaskRemoveFromEventList+0xbc>)
 8009ae6:	f7fe fe54 	bl	8008792 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aee:	4b0d      	ldr	r3, [pc, #52]	@ (8009b24 <xTaskRemoveFromEventList+0xc0>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d905      	bls.n	8009b04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009af8:	2301      	movs	r3, #1
 8009afa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009afc:	4b0a      	ldr	r3, [pc, #40]	@ (8009b28 <xTaskRemoveFromEventList+0xc4>)
 8009afe:	2201      	movs	r2, #1
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	e001      	b.n	8009b08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009b04:	2300      	movs	r3, #0
 8009b06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b08:	697b      	ldr	r3, [r7, #20]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20000a54 	.word	0x20000a54
 8009b18:	20000a34 	.word	0x20000a34
 8009b1c:	20000930 	.word	0x20000930
 8009b20:	200009ec 	.word	0x200009ec
 8009b24:	2000092c 	.word	0x2000092c
 8009b28:	20000a40 	.word	0x20000a40

08009b2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b34:	4b06      	ldr	r3, [pc, #24]	@ (8009b50 <vTaskInternalSetTimeOutState+0x24>)
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b3c:	4b05      	ldr	r3, [pc, #20]	@ (8009b54 <vTaskInternalSetTimeOutState+0x28>)
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	605a      	str	r2, [r3, #4]
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	20000a44 	.word	0x20000a44
 8009b54:	20000a30 	.word	0x20000a30

08009b58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10b      	bne.n	8009b80 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	613b      	str	r3, [r7, #16]
}
 8009b7a:	bf00      	nop
 8009b7c:	bf00      	nop
 8009b7e:	e7fd      	b.n	8009b7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10b      	bne.n	8009b9e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	60fb      	str	r3, [r7, #12]
}
 8009b98:	bf00      	nop
 8009b9a:	bf00      	nop
 8009b9c:	e7fd      	b.n	8009b9a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009b9e:	f000 fc5b 	bl	800a458 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8009c18 <xTaskCheckForTimeOut+0xc0>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bba:	d102      	bne.n	8009bc2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61fb      	str	r3, [r7, #28]
 8009bc0:	e023      	b.n	8009c0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	4b15      	ldr	r3, [pc, #84]	@ (8009c1c <xTaskCheckForTimeOut+0xc4>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d007      	beq.n	8009bde <xTaskCheckForTimeOut+0x86>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	69ba      	ldr	r2, [r7, #24]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d302      	bcc.n	8009bde <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	61fb      	str	r3, [r7, #28]
 8009bdc:	e015      	b.n	8009c0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d20b      	bcs.n	8009c00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	1ad2      	subs	r2, r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff ff99 	bl	8009b2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	61fb      	str	r3, [r7, #28]
 8009bfe:	e004      	b.n	8009c0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	2200      	movs	r2, #0
 8009c04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c06:	2301      	movs	r3, #1
 8009c08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c0a:	f000 fc57 	bl	800a4bc <vPortExitCritical>

	return xReturn;
 8009c0e:	69fb      	ldr	r3, [r7, #28]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3720      	adds	r7, #32
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20000a30 	.word	0x20000a30
 8009c1c:	20000a44 	.word	0x20000a44

08009c20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c20:	b480      	push	{r7}
 8009c22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c24:	4b03      	ldr	r3, [pc, #12]	@ (8009c34 <vTaskMissedYield+0x14>)
 8009c26:	2201      	movs	r2, #1
 8009c28:	601a      	str	r2, [r3, #0]
}
 8009c2a:	bf00      	nop
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	20000a40 	.word	0x20000a40

08009c38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c40:	f000 f852 	bl	8009ce8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c44:	4b06      	ldr	r3, [pc, #24]	@ (8009c60 <prvIdleTask+0x28>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d9f9      	bls.n	8009c40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c4c:	4b05      	ldr	r3, [pc, #20]	@ (8009c64 <prvIdleTask+0x2c>)
 8009c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c5c:	e7f0      	b.n	8009c40 <prvIdleTask+0x8>
 8009c5e:	bf00      	nop
 8009c60:	20000930 	.word	0x20000930
 8009c64:	e000ed04 	.word	0xe000ed04

08009c68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c6e:	2300      	movs	r3, #0
 8009c70:	607b      	str	r3, [r7, #4]
 8009c72:	e00c      	b.n	8009c8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	4613      	mov	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4a12      	ldr	r2, [pc, #72]	@ (8009cc8 <prvInitialiseTaskLists+0x60>)
 8009c80:	4413      	add	r3, r2
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fe fd58 	bl	8008738 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	607b      	str	r3, [r7, #4]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b06      	cmp	r3, #6
 8009c92:	d9ef      	bls.n	8009c74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c94:	480d      	ldr	r0, [pc, #52]	@ (8009ccc <prvInitialiseTaskLists+0x64>)
 8009c96:	f7fe fd4f 	bl	8008738 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c9a:	480d      	ldr	r0, [pc, #52]	@ (8009cd0 <prvInitialiseTaskLists+0x68>)
 8009c9c:	f7fe fd4c 	bl	8008738 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ca0:	480c      	ldr	r0, [pc, #48]	@ (8009cd4 <prvInitialiseTaskLists+0x6c>)
 8009ca2:	f7fe fd49 	bl	8008738 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ca6:	480c      	ldr	r0, [pc, #48]	@ (8009cd8 <prvInitialiseTaskLists+0x70>)
 8009ca8:	f7fe fd46 	bl	8008738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cac:	480b      	ldr	r0, [pc, #44]	@ (8009cdc <prvInitialiseTaskLists+0x74>)
 8009cae:	f7fe fd43 	bl	8008738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8009ce0 <prvInitialiseTaskLists+0x78>)
 8009cb4:	4a05      	ldr	r2, [pc, #20]	@ (8009ccc <prvInitialiseTaskLists+0x64>)
 8009cb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce4 <prvInitialiseTaskLists+0x7c>)
 8009cba:	4a05      	ldr	r2, [pc, #20]	@ (8009cd0 <prvInitialiseTaskLists+0x68>)
 8009cbc:	601a      	str	r2, [r3, #0]
}
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20000930 	.word	0x20000930
 8009ccc:	200009bc 	.word	0x200009bc
 8009cd0:	200009d0 	.word	0x200009d0
 8009cd4:	200009ec 	.word	0x200009ec
 8009cd8:	20000a00 	.word	0x20000a00
 8009cdc:	20000a18 	.word	0x20000a18
 8009ce0:	200009e4 	.word	0x200009e4
 8009ce4:	200009e8 	.word	0x200009e8

08009ce8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cee:	e019      	b.n	8009d24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cf0:	f000 fbb2 	bl	800a458 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cf4:	4b10      	ldr	r3, [pc, #64]	@ (8009d38 <prvCheckTasksWaitingTermination+0x50>)
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	3304      	adds	r3, #4
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fe fda3 	bl	800884c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d06:	4b0d      	ldr	r3, [pc, #52]	@ (8009d3c <prvCheckTasksWaitingTermination+0x54>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8009d3c <prvCheckTasksWaitingTermination+0x54>)
 8009d0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d10:	4b0b      	ldr	r3, [pc, #44]	@ (8009d40 <prvCheckTasksWaitingTermination+0x58>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3b01      	subs	r3, #1
 8009d16:	4a0a      	ldr	r2, [pc, #40]	@ (8009d40 <prvCheckTasksWaitingTermination+0x58>)
 8009d18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d1a:	f000 fbcf 	bl	800a4bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f810 	bl	8009d44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d24:	4b06      	ldr	r3, [pc, #24]	@ (8009d40 <prvCheckTasksWaitingTermination+0x58>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1e1      	bne.n	8009cf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	20000a00 	.word	0x20000a00
 8009d3c:	20000a2c 	.word	0x20000a2c
 8009d40:	20000a14 	.word	0x20000a14

08009d44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	3368      	adds	r3, #104	@ 0x68
 8009d50:	4618      	mov	r0, r3
 8009d52:	f002 fbf1 	bl	800c538 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 fd6c 	bl	800a838 <vPortFree>
			vPortFree( pxTCB );
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fd69 	bl	800a838 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d66:	bf00      	nop
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
	...

08009d70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d76:	4b0c      	ldr	r3, [pc, #48]	@ (8009da8 <prvResetNextTaskUnblockTime+0x38>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d104      	bne.n	8009d8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d80:	4b0a      	ldr	r3, [pc, #40]	@ (8009dac <prvResetNextTaskUnblockTime+0x3c>)
 8009d82:	f04f 32ff 	mov.w	r2, #4294967295
 8009d86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d88:	e008      	b.n	8009d9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d8a:	4b07      	ldr	r3, [pc, #28]	@ (8009da8 <prvResetNextTaskUnblockTime+0x38>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	4a04      	ldr	r2, [pc, #16]	@ (8009dac <prvResetNextTaskUnblockTime+0x3c>)
 8009d9a:	6013      	str	r3, [r2, #0]
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr
 8009da8:	200009e4 	.word	0x200009e4
 8009dac:	20000a4c 	.word	0x20000a4c

08009db0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009db6:	4b0b      	ldr	r3, [pc, #44]	@ (8009de4 <xTaskGetSchedulerState+0x34>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d102      	bne.n	8009dc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	607b      	str	r3, [r7, #4]
 8009dc2:	e008      	b.n	8009dd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dc4:	4b08      	ldr	r3, [pc, #32]	@ (8009de8 <xTaskGetSchedulerState+0x38>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d102      	bne.n	8009dd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	607b      	str	r3, [r7, #4]
 8009dd0:	e001      	b.n	8009dd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009dd6:	687b      	ldr	r3, [r7, #4]
	}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr
 8009de4:	20000a38 	.word	0x20000a38
 8009de8:	20000a54 	.word	0x20000a54

08009dec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d05e      	beq.n	8009ec0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e06:	4b31      	ldr	r3, [pc, #196]	@ (8009ecc <xTaskPriorityInherit+0xe0>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d24e      	bcs.n	8009eae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	db06      	blt.n	8009e26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e18:	4b2c      	ldr	r3, [pc, #176]	@ (8009ecc <xTaskPriorityInherit+0xe0>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1e:	f1c3 0207 	rsb	r2, r3, #7
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6959      	ldr	r1, [r3, #20]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e2e:	4613      	mov	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	4a26      	ldr	r2, [pc, #152]	@ (8009ed0 <xTaskPriorityInherit+0xe4>)
 8009e38:	4413      	add	r3, r2
 8009e3a:	4299      	cmp	r1, r3
 8009e3c:	d12f      	bne.n	8009e9e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	3304      	adds	r3, #4
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe fd02 	bl	800884c <uxListRemove>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10a      	bne.n	8009e64 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e52:	2201      	movs	r2, #1
 8009e54:	fa02 f303 	lsl.w	r3, r2, r3
 8009e58:	43da      	mvns	r2, r3
 8009e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ed4 <xTaskPriorityInherit+0xe8>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4013      	ands	r3, r2
 8009e60:	4a1c      	ldr	r2, [pc, #112]	@ (8009ed4 <xTaskPriorityInherit+0xe8>)
 8009e62:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e64:	4b19      	ldr	r3, [pc, #100]	@ (8009ecc <xTaskPriorityInherit+0xe0>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e72:	2201      	movs	r2, #1
 8009e74:	409a      	lsls	r2, r3
 8009e76:	4b17      	ldr	r3, [pc, #92]	@ (8009ed4 <xTaskPriorityInherit+0xe8>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	4a15      	ldr	r2, [pc, #84]	@ (8009ed4 <xTaskPriorityInherit+0xe8>)
 8009e7e:	6013      	str	r3, [r2, #0]
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e84:	4613      	mov	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4a10      	ldr	r2, [pc, #64]	@ (8009ed0 <xTaskPriorityInherit+0xe4>)
 8009e8e:	441a      	add	r2, r3
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	3304      	adds	r3, #4
 8009e94:	4619      	mov	r1, r3
 8009e96:	4610      	mov	r0, r2
 8009e98:	f7fe fc7b 	bl	8008792 <vListInsertEnd>
 8009e9c:	e004      	b.n	8009ea8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8009ecc <xTaskPriorityInherit+0xe0>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	e008      	b.n	8009ec0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009eb2:	4b06      	ldr	r3, [pc, #24]	@ (8009ecc <xTaskPriorityInherit+0xe0>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d201      	bcs.n	8009ec0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
	}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	2000092c 	.word	0x2000092c
 8009ed0:	20000930 	.word	0x20000930
 8009ed4:	20000a34 	.word	0x20000a34

08009ed8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d070      	beq.n	8009fd0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009eee:	4b3b      	ldr	r3, [pc, #236]	@ (8009fdc <xTaskPriorityDisinherit+0x104>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d00b      	beq.n	8009f10 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	60fb      	str	r3, [r7, #12]
}
 8009f0a:	bf00      	nop
 8009f0c:	bf00      	nop
 8009f0e:	e7fd      	b.n	8009f0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10b      	bne.n	8009f30 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1c:	f383 8811 	msr	BASEPRI, r3
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	60bb      	str	r3, [r7, #8]
}
 8009f2a:	bf00      	nop
 8009f2c:	bf00      	nop
 8009f2e:	e7fd      	b.n	8009f2c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f34:	1e5a      	subs	r2, r3, #1
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	661a      	str	r2, [r3, #96]	@ 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d044      	beq.n	8009fd0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d140      	bne.n	8009fd0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	3304      	adds	r3, #4
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fe fc7a 	bl	800884c <uxListRemove>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d115      	bne.n	8009f8a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f62:	491f      	ldr	r1, [pc, #124]	@ (8009fe0 <xTaskPriorityDisinherit+0x108>)
 8009f64:	4613      	mov	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	440b      	add	r3, r1
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <xTaskPriorityDisinherit+0xb2>
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f78:	2201      	movs	r2, #1
 8009f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7e:	43da      	mvns	r2, r3
 8009f80:	4b18      	ldr	r3, [pc, #96]	@ (8009fe4 <xTaskPriorityDisinherit+0x10c>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4013      	ands	r3, r2
 8009f86:	4a17      	ldr	r2, [pc, #92]	@ (8009fe4 <xTaskPriorityDisinherit+0x10c>)
 8009f88:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f96:	f1c3 0207 	rsb	r2, r3, #7
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	409a      	lsls	r2, r3
 8009fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8009fe4 <xTaskPriorityDisinherit+0x10c>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	4a0d      	ldr	r2, [pc, #52]	@ (8009fe4 <xTaskPriorityDisinherit+0x10c>)
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4a08      	ldr	r2, [pc, #32]	@ (8009fe0 <xTaskPriorityDisinherit+0x108>)
 8009fbe:	441a      	add	r2, r3
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	f7fe fbe3 	bl	8008792 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fd0:	697b      	ldr	r3, [r7, #20]
	}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	2000092c 	.word	0x2000092c
 8009fe0:	20000930 	.word	0x20000930
 8009fe4:	20000a34 	.word	0x20000a34

08009fe8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d079      	beq.n	800a0f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10b      	bne.n	800a020 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	60fb      	str	r3, [r7, #12]
}
 800a01a:	bf00      	nop
 800a01c:	bf00      	nop
 800a01e:	e7fd      	b.n	800a01c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	429a      	cmp	r2, r3
 800a028:	d902      	bls.n	800a030 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	61fb      	str	r3, [r7, #28]
 800a02e:	e002      	b.n	800a036 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a034:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d059      	beq.n	800a0f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a044:	697a      	ldr	r2, [r7, #20]
 800a046:	429a      	cmp	r2, r3
 800a048:	d154      	bne.n	800a0f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a04a:	4b2c      	ldr	r3, [pc, #176]	@ (800a0fc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	69ba      	ldr	r2, [r7, #24]
 800a050:	429a      	cmp	r2, r3
 800a052:	d10b      	bne.n	800a06c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	60bb      	str	r3, [r7, #8]
}
 800a066:	bf00      	nop
 800a068:	bf00      	nop
 800a06a:	e7fd      	b.n	800a068 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a070:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	69fa      	ldr	r2, [r7, #28]
 800a076:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a078:	69bb      	ldr	r3, [r7, #24]
 800a07a:	699b      	ldr	r3, [r3, #24]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	db04      	blt.n	800a08a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	f1c3 0207 	rsb	r2, r3, #7
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	6959      	ldr	r1, [r3, #20]
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	4613      	mov	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4a19      	ldr	r2, [pc, #100]	@ (800a100 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a09a:	4413      	add	r3, r2
 800a09c:	4299      	cmp	r1, r3
 800a09e:	d129      	bne.n	800a0f4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fe fbd1 	bl	800884c <uxListRemove>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10a      	bne.n	800a0c6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ba:	43da      	mvns	r2, r3
 800a0bc:	4b11      	ldr	r3, [pc, #68]	@ (800a104 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	4a10      	ldr	r2, [pc, #64]	@ (800a104 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a0c4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	409a      	lsls	r2, r3
 800a0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a104 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	4a0b      	ldr	r2, [pc, #44]	@ (800a104 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4a06      	ldr	r2, [pc, #24]	@ (800a100 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a0e6:	441a      	add	r2, r3
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	f7fe fb4f 	bl	8008792 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0f4:	bf00      	nop
 800a0f6:	3720      	adds	r7, #32
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	2000092c 	.word	0x2000092c
 800a100:	20000930 	.word	0x20000930
 800a104:	20000a34 	.word	0x20000a34

0800a108 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a108:	b480      	push	{r7}
 800a10a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a10c:	4b07      	ldr	r3, [pc, #28]	@ (800a12c <pvTaskIncrementMutexHeldCount+0x24>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d004      	beq.n	800a11e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a114:	4b05      	ldr	r3, [pc, #20]	@ (800a12c <pvTaskIncrementMutexHeldCount+0x24>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a11a:	3201      	adds	r2, #1
 800a11c:	661a      	str	r2, [r3, #96]	@ 0x60
		}

		return pxCurrentTCB;
 800a11e:	4b03      	ldr	r3, [pc, #12]	@ (800a12c <pvTaskIncrementMutexHeldCount+0x24>)
 800a120:	681b      	ldr	r3, [r3, #0]
	}
 800a122:	4618      	mov	r0, r3
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	2000092c 	.word	0x2000092c

0800a130 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a13a:	4b29      	ldr	r3, [pc, #164]	@ (800a1e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a140:	4b28      	ldr	r3, [pc, #160]	@ (800a1e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	3304      	adds	r3, #4
 800a146:	4618      	mov	r0, r3
 800a148:	f7fe fb80 	bl	800884c <uxListRemove>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10b      	bne.n	800a16a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a152:	4b24      	ldr	r3, [pc, #144]	@ (800a1e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a158:	2201      	movs	r2, #1
 800a15a:	fa02 f303 	lsl.w	r3, r2, r3
 800a15e:	43da      	mvns	r2, r3
 800a160:	4b21      	ldr	r3, [pc, #132]	@ (800a1e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4013      	ands	r3, r2
 800a166:	4a20      	ldr	r2, [pc, #128]	@ (800a1e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a168:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a170:	d10a      	bne.n	800a188 <prvAddCurrentTaskToDelayedList+0x58>
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d007      	beq.n	800a188 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a178:	4b1a      	ldr	r3, [pc, #104]	@ (800a1e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3304      	adds	r3, #4
 800a17e:	4619      	mov	r1, r3
 800a180:	481a      	ldr	r0, [pc, #104]	@ (800a1ec <prvAddCurrentTaskToDelayedList+0xbc>)
 800a182:	f7fe fb06 	bl	8008792 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a186:	e026      	b.n	800a1d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4413      	add	r3, r2
 800a18e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a190:	4b14      	ldr	r3, [pc, #80]	@ (800a1e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d209      	bcs.n	800a1b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1a0:	4b13      	ldr	r3, [pc, #76]	@ (800a1f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	4b0f      	ldr	r3, [pc, #60]	@ (800a1e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3304      	adds	r3, #4
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	f7fe fb14 	bl	80087da <vListInsert>
}
 800a1b2:	e010      	b.n	800a1d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1b4:	4b0f      	ldr	r3, [pc, #60]	@ (800a1f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a1e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3304      	adds	r3, #4
 800a1be:	4619      	mov	r1, r3
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	f7fe fb0a 	bl	80087da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a1c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a1f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d202      	bcs.n	800a1d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a1d0:	4a09      	ldr	r2, [pc, #36]	@ (800a1f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	6013      	str	r3, [r2, #0]
}
 800a1d6:	bf00      	nop
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	20000a30 	.word	0x20000a30
 800a1e4:	2000092c 	.word	0x2000092c
 800a1e8:	20000a34 	.word	0x20000a34
 800a1ec:	20000a18 	.word	0x20000a18
 800a1f0:	200009e8 	.word	0x200009e8
 800a1f4:	200009e4 	.word	0x200009e4
 800a1f8:	20000a4c 	.word	0x20000a4c

0800a1fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	3b04      	subs	r3, #4
 800a20c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3b04      	subs	r3, #4
 800a21a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	f023 0201 	bic.w	r2, r3, #1
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3b04      	subs	r3, #4
 800a22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a22c:	4a0c      	ldr	r2, [pc, #48]	@ (800a260 <pxPortInitialiseStack+0x64>)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	3b14      	subs	r3, #20
 800a236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3b04      	subs	r3, #4
 800a242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f06f 0202 	mvn.w	r2, #2
 800a24a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3b20      	subs	r3, #32
 800a250:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a252:	68fb      	ldr	r3, [r7, #12]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	0800a265 	.word	0x0800a265

0800a264 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a26e:	4b13      	ldr	r3, [pc, #76]	@ (800a2bc <prvTaskExitError+0x58>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a276:	d00b      	beq.n	800a290 <prvTaskExitError+0x2c>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	60fb      	str	r3, [r7, #12]
}
 800a28a:	bf00      	nop
 800a28c:	bf00      	nop
 800a28e:	e7fd      	b.n	800a28c <prvTaskExitError+0x28>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	60bb      	str	r3, [r7, #8]
}
 800a2a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a2a4:	bf00      	nop
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d0fc      	beq.n	800a2a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a2ac:	bf00      	nop
 800a2ae:	bf00      	nop
 800a2b0:	3714      	adds	r7, #20
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	2000040c 	.word	0x2000040c

0800a2c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2c0:	4b07      	ldr	r3, [pc, #28]	@ (800a2e0 <pxCurrentTCBConst2>)
 800a2c2:	6819      	ldr	r1, [r3, #0]
 800a2c4:	6808      	ldr	r0, [r1, #0]
 800a2c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ca:	f380 8809 	msr	PSP, r0
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f04f 0000 	mov.w	r0, #0
 800a2d6:	f380 8811 	msr	BASEPRI, r0
 800a2da:	4770      	bx	lr
 800a2dc:	f3af 8000 	nop.w

0800a2e0 <pxCurrentTCBConst2>:
 800a2e0:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2e4:	bf00      	nop
 800a2e6:	bf00      	nop

0800a2e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2e8:	4808      	ldr	r0, [pc, #32]	@ (800a30c <prvPortStartFirstTask+0x24>)
 800a2ea:	6800      	ldr	r0, [r0, #0]
 800a2ec:	6800      	ldr	r0, [r0, #0]
 800a2ee:	f380 8808 	msr	MSP, r0
 800a2f2:	f04f 0000 	mov.w	r0, #0
 800a2f6:	f380 8814 	msr	CONTROL, r0
 800a2fa:	b662      	cpsie	i
 800a2fc:	b661      	cpsie	f
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	df00      	svc	0
 800a308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a30a:	bf00      	nop
 800a30c:	e000ed08 	.word	0xe000ed08

0800a310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a316:	4b47      	ldr	r3, [pc, #284]	@ (800a434 <xPortStartScheduler+0x124>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a47      	ldr	r2, [pc, #284]	@ (800a438 <xPortStartScheduler+0x128>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d10b      	bne.n	800a338 <xPortStartScheduler+0x28>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	613b      	str	r3, [r7, #16]
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	e7fd      	b.n	800a334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a338:	4b3e      	ldr	r3, [pc, #248]	@ (800a434 <xPortStartScheduler+0x124>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a3f      	ldr	r2, [pc, #252]	@ (800a43c <xPortStartScheduler+0x12c>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d10b      	bne.n	800a35a <xPortStartScheduler+0x4a>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	60fb      	str	r3, [r7, #12]
}
 800a354:	bf00      	nop
 800a356:	bf00      	nop
 800a358:	e7fd      	b.n	800a356 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a35a:	4b39      	ldr	r3, [pc, #228]	@ (800a440 <xPortStartScheduler+0x130>)
 800a35c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	b2db      	uxtb	r3, r3
 800a364:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	22ff      	movs	r2, #255	@ 0xff
 800a36a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	b2db      	uxtb	r3, r3
 800a372:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a374:	78fb      	ldrb	r3, [r7, #3]
 800a376:	b2db      	uxtb	r3, r3
 800a378:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a37c:	b2da      	uxtb	r2, r3
 800a37e:	4b31      	ldr	r3, [pc, #196]	@ (800a444 <xPortStartScheduler+0x134>)
 800a380:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a382:	4b31      	ldr	r3, [pc, #196]	@ (800a448 <xPortStartScheduler+0x138>)
 800a384:	2207      	movs	r2, #7
 800a386:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a388:	e009      	b.n	800a39e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a38a:	4b2f      	ldr	r3, [pc, #188]	@ (800a448 <xPortStartScheduler+0x138>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3b01      	subs	r3, #1
 800a390:	4a2d      	ldr	r2, [pc, #180]	@ (800a448 <xPortStartScheduler+0x138>)
 800a392:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a394:	78fb      	ldrb	r3, [r7, #3]
 800a396:	b2db      	uxtb	r3, r3
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a39e:	78fb      	ldrb	r3, [r7, #3]
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3a6:	2b80      	cmp	r3, #128	@ 0x80
 800a3a8:	d0ef      	beq.n	800a38a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a3aa:	4b27      	ldr	r3, [pc, #156]	@ (800a448 <xPortStartScheduler+0x138>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f1c3 0307 	rsb	r3, r3, #7
 800a3b2:	2b04      	cmp	r3, #4
 800a3b4:	d00b      	beq.n	800a3ce <xPortStartScheduler+0xbe>
	__asm volatile
 800a3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	60bb      	str	r3, [r7, #8]
}
 800a3c8:	bf00      	nop
 800a3ca:	bf00      	nop
 800a3cc:	e7fd      	b.n	800a3ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a448 <xPortStartScheduler+0x138>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	021b      	lsls	r3, r3, #8
 800a3d4:	4a1c      	ldr	r2, [pc, #112]	@ (800a448 <xPortStartScheduler+0x138>)
 800a3d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3d8:	4b1b      	ldr	r3, [pc, #108]	@ (800a448 <xPortStartScheduler+0x138>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3e0:	4a19      	ldr	r2, [pc, #100]	@ (800a448 <xPortStartScheduler+0x138>)
 800a3e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3ec:	4b17      	ldr	r3, [pc, #92]	@ (800a44c <xPortStartScheduler+0x13c>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a16      	ldr	r2, [pc, #88]	@ (800a44c <xPortStartScheduler+0x13c>)
 800a3f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a3f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3f8:	4b14      	ldr	r3, [pc, #80]	@ (800a44c <xPortStartScheduler+0x13c>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a13      	ldr	r2, [pc, #76]	@ (800a44c <xPortStartScheduler+0x13c>)
 800a3fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a402:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a404:	f000 f8da 	bl	800a5bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a408:	4b11      	ldr	r3, [pc, #68]	@ (800a450 <xPortStartScheduler+0x140>)
 800a40a:	2200      	movs	r2, #0
 800a40c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a40e:	f000 f8f9 	bl	800a604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a412:	4b10      	ldr	r3, [pc, #64]	@ (800a454 <xPortStartScheduler+0x144>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a0f      	ldr	r2, [pc, #60]	@ (800a454 <xPortStartScheduler+0x144>)
 800a418:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a41c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a41e:	f7ff ff63 	bl	800a2e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a422:	f7ff fa7b 	bl	800991c <vTaskSwitchContext>
	prvTaskExitError();
 800a426:	f7ff ff1d 	bl	800a264 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3718      	adds	r7, #24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	e000ed00 	.word	0xe000ed00
 800a438:	410fc271 	.word	0x410fc271
 800a43c:	410fc270 	.word	0x410fc270
 800a440:	e000e400 	.word	0xe000e400
 800a444:	20000a60 	.word	0x20000a60
 800a448:	20000a64 	.word	0x20000a64
 800a44c:	e000ed20 	.word	0xe000ed20
 800a450:	2000040c 	.word	0x2000040c
 800a454:	e000ef34 	.word	0xe000ef34

0800a458 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	607b      	str	r3, [r7, #4]
}
 800a470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a472:	4b10      	ldr	r3, [pc, #64]	@ (800a4b4 <vPortEnterCritical+0x5c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3301      	adds	r3, #1
 800a478:	4a0e      	ldr	r2, [pc, #56]	@ (800a4b4 <vPortEnterCritical+0x5c>)
 800a47a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a47c:	4b0d      	ldr	r3, [pc, #52]	@ (800a4b4 <vPortEnterCritical+0x5c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b01      	cmp	r3, #1
 800a482:	d110      	bne.n	800a4a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a484:	4b0c      	ldr	r3, [pc, #48]	@ (800a4b8 <vPortEnterCritical+0x60>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00b      	beq.n	800a4a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	603b      	str	r3, [r7, #0]
}
 800a4a0:	bf00      	nop
 800a4a2:	bf00      	nop
 800a4a4:	e7fd      	b.n	800a4a2 <vPortEnterCritical+0x4a>
	}
}
 800a4a6:	bf00      	nop
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	2000040c 	.word	0x2000040c
 800a4b8:	e000ed04 	.word	0xe000ed04

0800a4bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4c2:	4b12      	ldr	r3, [pc, #72]	@ (800a50c <vPortExitCritical+0x50>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10b      	bne.n	800a4e2 <vPortExitCritical+0x26>
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	607b      	str	r3, [r7, #4]
}
 800a4dc:	bf00      	nop
 800a4de:	bf00      	nop
 800a4e0:	e7fd      	b.n	800a4de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a50c <vPortExitCritical+0x50>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	4a08      	ldr	r2, [pc, #32]	@ (800a50c <vPortExitCritical+0x50>)
 800a4ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4ec:	4b07      	ldr	r3, [pc, #28]	@ (800a50c <vPortExitCritical+0x50>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d105      	bne.n	800a500 <vPortExitCritical+0x44>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	f383 8811 	msr	BASEPRI, r3
}
 800a4fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	2000040c 	.word	0x2000040c

0800a510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a510:	f3ef 8009 	mrs	r0, PSP
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	4b15      	ldr	r3, [pc, #84]	@ (800a570 <pxCurrentTCBConst>)
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	f01e 0f10 	tst.w	lr, #16
 800a520:	bf08      	it	eq
 800a522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52a:	6010      	str	r0, [r2, #0]
 800a52c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a530:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a534:	f380 8811 	msr	BASEPRI, r0
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f7ff f9ec 	bl	800991c <vTaskSwitchContext>
 800a544:	f04f 0000 	mov.w	r0, #0
 800a548:	f380 8811 	msr	BASEPRI, r0
 800a54c:	bc09      	pop	{r0, r3}
 800a54e:	6819      	ldr	r1, [r3, #0]
 800a550:	6808      	ldr	r0, [r1, #0]
 800a552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a556:	f01e 0f10 	tst.w	lr, #16
 800a55a:	bf08      	it	eq
 800a55c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a560:	f380 8809 	msr	PSP, r0
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	f3af 8000 	nop.w

0800a570 <pxCurrentTCBConst>:
 800a570:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop

0800a578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	607b      	str	r3, [r7, #4]
}
 800a590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a592:	f7ff f909 	bl	80097a8 <xTaskIncrementTick>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d003      	beq.n	800a5a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a59c:	4b06      	ldr	r3, [pc, #24]	@ (800a5b8 <SysTick_Handler+0x40>)
 800a59e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	f383 8811 	msr	BASEPRI, r3
}
 800a5ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5b0:	bf00      	nop
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	e000ed04 	.word	0xe000ed04

0800a5bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5bc:	b480      	push	{r7}
 800a5be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f0 <vPortSetupTimerInterrupt+0x34>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f4 <vPortSetupTimerInterrupt+0x38>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f8 <vPortSetupTimerInterrupt+0x3c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a0a      	ldr	r2, [pc, #40]	@ (800a5fc <vPortSetupTimerInterrupt+0x40>)
 800a5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d6:	099b      	lsrs	r3, r3, #6
 800a5d8:	4a09      	ldr	r2, [pc, #36]	@ (800a600 <vPortSetupTimerInterrupt+0x44>)
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5de:	4b04      	ldr	r3, [pc, #16]	@ (800a5f0 <vPortSetupTimerInterrupt+0x34>)
 800a5e0:	2207      	movs	r2, #7
 800a5e2:	601a      	str	r2, [r3, #0]
}
 800a5e4:	bf00      	nop
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	e000e010 	.word	0xe000e010
 800a5f4:	e000e018 	.word	0xe000e018
 800a5f8:	20000400 	.word	0x20000400
 800a5fc:	10624dd3 	.word	0x10624dd3
 800a600:	e000e014 	.word	0xe000e014

0800a604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a604:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a614 <vPortEnableVFP+0x10>
 800a608:	6801      	ldr	r1, [r0, #0]
 800a60a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a60e:	6001      	str	r1, [r0, #0]
 800a610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a612:	bf00      	nop
 800a614:	e000ed88 	.word	0xe000ed88

0800a618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a61e:	f3ef 8305 	mrs	r3, IPSR
 800a622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2b0f      	cmp	r3, #15
 800a628:	d915      	bls.n	800a656 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a62a:	4a18      	ldr	r2, [pc, #96]	@ (800a68c <vPortValidateInterruptPriority+0x74>)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	4413      	add	r3, r2
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a634:	4b16      	ldr	r3, [pc, #88]	@ (800a690 <vPortValidateInterruptPriority+0x78>)
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	7afa      	ldrb	r2, [r7, #11]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d20b      	bcs.n	800a656 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a642:	f383 8811 	msr	BASEPRI, r3
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	607b      	str	r3, [r7, #4]
}
 800a650:	bf00      	nop
 800a652:	bf00      	nop
 800a654:	e7fd      	b.n	800a652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a656:	4b0f      	ldr	r3, [pc, #60]	@ (800a694 <vPortValidateInterruptPriority+0x7c>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a65e:	4b0e      	ldr	r3, [pc, #56]	@ (800a698 <vPortValidateInterruptPriority+0x80>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	429a      	cmp	r2, r3
 800a664:	d90b      	bls.n	800a67e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66a:	f383 8811 	msr	BASEPRI, r3
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f3bf 8f4f 	dsb	sy
 800a676:	603b      	str	r3, [r7, #0]
}
 800a678:	bf00      	nop
 800a67a:	bf00      	nop
 800a67c:	e7fd      	b.n	800a67a <vPortValidateInterruptPriority+0x62>
	}
 800a67e:	bf00      	nop
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	e000e3f0 	.word	0xe000e3f0
 800a690:	20000a60 	.word	0x20000a60
 800a694:	e000ed0c 	.word	0xe000ed0c
 800a698:	20000a64 	.word	0x20000a64

0800a69c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b08a      	sub	sp, #40	@ 0x28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6a8:	f7fe ffd2 	bl	8009650 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a6ac:	4b5c      	ldr	r3, [pc, #368]	@ (800a820 <pvPortMalloc+0x184>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d101      	bne.n	800a6b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6b4:	f000 f924 	bl	800a900 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6b8:	4b5a      	ldr	r3, [pc, #360]	@ (800a824 <pvPortMalloc+0x188>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4013      	ands	r3, r2
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f040 8095 	bne.w	800a7f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d01e      	beq.n	800a70a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a6cc:	2208      	movs	r2, #8
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f003 0307 	and.w	r3, r3, #7
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d015      	beq.n	800a70a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f023 0307 	bic.w	r3, r3, #7
 800a6e4:	3308      	adds	r3, #8
 800a6e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f003 0307 	and.w	r3, r3, #7
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00b      	beq.n	800a70a <pvPortMalloc+0x6e>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	617b      	str	r3, [r7, #20]
}
 800a704:	bf00      	nop
 800a706:	bf00      	nop
 800a708:	e7fd      	b.n	800a706 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d06f      	beq.n	800a7f0 <pvPortMalloc+0x154>
 800a710:	4b45      	ldr	r3, [pc, #276]	@ (800a828 <pvPortMalloc+0x18c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	429a      	cmp	r2, r3
 800a718:	d86a      	bhi.n	800a7f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a71a:	4b44      	ldr	r3, [pc, #272]	@ (800a82c <pvPortMalloc+0x190>)
 800a71c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a71e:	4b43      	ldr	r3, [pc, #268]	@ (800a82c <pvPortMalloc+0x190>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a724:	e004      	b.n	800a730 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a728:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	429a      	cmp	r2, r3
 800a738:	d903      	bls.n	800a742 <pvPortMalloc+0xa6>
 800a73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1f1      	bne.n	800a726 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a742:	4b37      	ldr	r3, [pc, #220]	@ (800a820 <pvPortMalloc+0x184>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a748:	429a      	cmp	r2, r3
 800a74a:	d051      	beq.n	800a7f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2208      	movs	r2, #8
 800a752:	4413      	add	r3, r2
 800a754:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	6a3b      	ldr	r3, [r7, #32]
 800a75c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	1ad2      	subs	r2, r2, r3
 800a766:	2308      	movs	r3, #8
 800a768:	005b      	lsls	r3, r3, #1
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d920      	bls.n	800a7b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a76e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4413      	add	r3, r2
 800a774:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	f003 0307 	and.w	r3, r3, #7
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00b      	beq.n	800a798 <pvPortMalloc+0xfc>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	613b      	str	r3, [r7, #16]
}
 800a792:	bf00      	nop
 800a794:	bf00      	nop
 800a796:	e7fd      	b.n	800a794 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	1ad2      	subs	r2, r2, r3
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7aa:	69b8      	ldr	r0, [r7, #24]
 800a7ac:	f000 f90a 	bl	800a9c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7b0:	4b1d      	ldr	r3, [pc, #116]	@ (800a828 <pvPortMalloc+0x18c>)
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	4a1b      	ldr	r2, [pc, #108]	@ (800a828 <pvPortMalloc+0x18c>)
 800a7bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7be:	4b1a      	ldr	r3, [pc, #104]	@ (800a828 <pvPortMalloc+0x18c>)
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	4b1b      	ldr	r3, [pc, #108]	@ (800a830 <pvPortMalloc+0x194>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d203      	bcs.n	800a7d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7ca:	4b17      	ldr	r3, [pc, #92]	@ (800a828 <pvPortMalloc+0x18c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a18      	ldr	r2, [pc, #96]	@ (800a830 <pvPortMalloc+0x194>)
 800a7d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	4b13      	ldr	r3, [pc, #76]	@ (800a824 <pvPortMalloc+0x188>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a7e6:	4b13      	ldr	r3, [pc, #76]	@ (800a834 <pvPortMalloc+0x198>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	4a11      	ldr	r2, [pc, #68]	@ (800a834 <pvPortMalloc+0x198>)
 800a7ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7f0:	f7fe ff3c 	bl	800966c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	f003 0307 	and.w	r3, r3, #7
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00b      	beq.n	800a816 <pvPortMalloc+0x17a>
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	60fb      	str	r3, [r7, #12]
}
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	e7fd      	b.n	800a812 <pvPortMalloc+0x176>
	return pvReturn;
 800a816:	69fb      	ldr	r3, [r7, #28]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3728      	adds	r7, #40	@ 0x28
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	200077d0 	.word	0x200077d0
 800a824:	200077e4 	.word	0x200077e4
 800a828:	200077d4 	.word	0x200077d4
 800a82c:	200077c8 	.word	0x200077c8
 800a830:	200077d8 	.word	0x200077d8
 800a834:	200077dc 	.word	0x200077dc

0800a838 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d04f      	beq.n	800a8ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a84a:	2308      	movs	r3, #8
 800a84c:	425b      	negs	r3, r3
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	4413      	add	r3, r2
 800a852:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	685a      	ldr	r2, [r3, #4]
 800a85c:	4b25      	ldr	r3, [pc, #148]	@ (800a8f4 <vPortFree+0xbc>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4013      	ands	r3, r2
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10b      	bne.n	800a87e <vPortFree+0x46>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	60fb      	str	r3, [r7, #12]
}
 800a878:	bf00      	nop
 800a87a:	bf00      	nop
 800a87c:	e7fd      	b.n	800a87a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00b      	beq.n	800a89e <vPortFree+0x66>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	60bb      	str	r3, [r7, #8]
}
 800a898:	bf00      	nop
 800a89a:	bf00      	nop
 800a89c:	e7fd      	b.n	800a89a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	4b14      	ldr	r3, [pc, #80]	@ (800a8f4 <vPortFree+0xbc>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d01e      	beq.n	800a8ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d11a      	bne.n	800a8ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	685a      	ldr	r2, [r3, #4]
 800a8b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f4 <vPortFree+0xbc>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	43db      	mvns	r3, r3
 800a8be:	401a      	ands	r2, r3
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8c4:	f7fe fec4 	bl	8009650 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	685a      	ldr	r2, [r3, #4]
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a8f8 <vPortFree+0xc0>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	4a09      	ldr	r2, [pc, #36]	@ (800a8f8 <vPortFree+0xc0>)
 800a8d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8d6:	6938      	ldr	r0, [r7, #16]
 800a8d8:	f000 f874 	bl	800a9c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a8dc:	4b07      	ldr	r3, [pc, #28]	@ (800a8fc <vPortFree+0xc4>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	4a06      	ldr	r2, [pc, #24]	@ (800a8fc <vPortFree+0xc4>)
 800a8e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a8e6:	f7fe fec1 	bl	800966c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8ea:	bf00      	nop
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	200077e4 	.word	0x200077e4
 800a8f8:	200077d4 	.word	0x200077d4
 800a8fc:	200077e0 	.word	0x200077e0

0800a900 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a906:	f646 5360 	movw	r3, #28000	@ 0x6d60
 800a90a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a90c:	4b27      	ldr	r3, [pc, #156]	@ (800a9ac <prvHeapInit+0xac>)
 800a90e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f003 0307 	and.w	r3, r3, #7
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00c      	beq.n	800a934 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3307      	adds	r3, #7
 800a91e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f023 0307 	bic.w	r3, r3, #7
 800a926:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	4a1f      	ldr	r2, [pc, #124]	@ (800a9ac <prvHeapInit+0xac>)
 800a930:	4413      	add	r3, r2
 800a932:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a938:	4a1d      	ldr	r2, [pc, #116]	@ (800a9b0 <prvHeapInit+0xb0>)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a93e:	4b1c      	ldr	r3, [pc, #112]	@ (800a9b0 <prvHeapInit+0xb0>)
 800a940:	2200      	movs	r2, #0
 800a942:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	68ba      	ldr	r2, [r7, #8]
 800a948:	4413      	add	r3, r2
 800a94a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a94c:	2208      	movs	r2, #8
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	1a9b      	subs	r3, r3, r2
 800a952:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f023 0307 	bic.w	r3, r3, #7
 800a95a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4a15      	ldr	r2, [pc, #84]	@ (800a9b4 <prvHeapInit+0xb4>)
 800a960:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a962:	4b14      	ldr	r3, [pc, #80]	@ (800a9b4 <prvHeapInit+0xb4>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2200      	movs	r2, #0
 800a968:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a96a:	4b12      	ldr	r3, [pc, #72]	@ (800a9b4 <prvHeapInit+0xb4>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2200      	movs	r2, #0
 800a970:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	1ad2      	subs	r2, r2, r3
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a980:	4b0c      	ldr	r3, [pc, #48]	@ (800a9b4 <prvHeapInit+0xb4>)
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	4a0a      	ldr	r2, [pc, #40]	@ (800a9b8 <prvHeapInit+0xb8>)
 800a98e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	4a09      	ldr	r2, [pc, #36]	@ (800a9bc <prvHeapInit+0xbc>)
 800a996:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a998:	4b09      	ldr	r3, [pc, #36]	@ (800a9c0 <prvHeapInit+0xc0>)
 800a99a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a99e:	601a      	str	r2, [r3, #0]
}
 800a9a0:	bf00      	nop
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	20000a68 	.word	0x20000a68
 800a9b0:	200077c8 	.word	0x200077c8
 800a9b4:	200077d0 	.word	0x200077d0
 800a9b8:	200077d8 	.word	0x200077d8
 800a9bc:	200077d4 	.word	0x200077d4
 800a9c0:	200077e4 	.word	0x200077e4

0800a9c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9cc:	4b28      	ldr	r3, [pc, #160]	@ (800aa70 <prvInsertBlockIntoFreeList+0xac>)
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	e002      	b.n	800a9d8 <prvInsertBlockIntoFreeList+0x14>
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d8f7      	bhi.n	800a9d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d108      	bne.n	800aa06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	685a      	ldr	r2, [r3, #4]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	441a      	add	r2, r3
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	441a      	add	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d118      	bne.n	800aa4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	4b15      	ldr	r3, [pc, #84]	@ (800aa74 <prvInsertBlockIntoFreeList+0xb0>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d00d      	beq.n	800aa42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	685a      	ldr	r2, [r3, #4]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	441a      	add	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	601a      	str	r2, [r3, #0]
 800aa40:	e008      	b.n	800aa54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa42:	4b0c      	ldr	r3, [pc, #48]	@ (800aa74 <prvInsertBlockIntoFreeList+0xb0>)
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	601a      	str	r2, [r3, #0]
 800aa4a:	e003      	b.n	800aa54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d002      	beq.n	800aa62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa62:	bf00      	nop
 800aa64:	3714      	adds	r7, #20
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	200077c8 	.word	0x200077c8
 800aa74:	200077d0 	.word	0x200077d0

0800aa78 <arm_cfft_radix8by2_f32>:
 800aa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7c:	ed2d 8b08 	vpush	{d8-d11}
 800aa80:	4607      	mov	r7, r0
 800aa82:	4608      	mov	r0, r1
 800aa84:	f8b7 c000 	ldrh.w	ip, [r7]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800aa8e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800aa92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800aa96:	f000 80b0 	beq.w	800abfa <arm_cfft_radix8by2_f32+0x182>
 800aa9a:	008c      	lsls	r4, r1, #2
 800aa9c:	3410      	adds	r4, #16
 800aa9e:	f100 0310 	add.w	r3, r0, #16
 800aaa2:	1906      	adds	r6, r0, r4
 800aaa4:	3210      	adds	r2, #16
 800aaa6:	4444      	add	r4, r8
 800aaa8:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800aaac:	f108 0510 	add.w	r5, r8, #16
 800aab0:	ed15 2a04 	vldr	s4, [r5, #-16]
 800aab4:	ed55 2a03 	vldr	s5, [r5, #-12]
 800aab8:	ed54 4a04 	vldr	s9, [r4, #-16]
 800aabc:	ed14 4a03 	vldr	s8, [r4, #-12]
 800aac0:	ed14 6a02 	vldr	s12, [r4, #-8]
 800aac4:	ed54 5a01 	vldr	s11, [r4, #-4]
 800aac8:	ed53 3a04 	vldr	s7, [r3, #-16]
 800aacc:	ed15 0a02 	vldr	s0, [r5, #-8]
 800aad0:	ed55 0a01 	vldr	s1, [r5, #-4]
 800aad4:	ed56 6a04 	vldr	s13, [r6, #-16]
 800aad8:	ed16 3a03 	vldr	s6, [r6, #-12]
 800aadc:	ed13 7a03 	vldr	s14, [r3, #-12]
 800aae0:	ed13 5a02 	vldr	s10, [r3, #-8]
 800aae4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800aae8:	ed16 1a02 	vldr	s2, [r6, #-8]
 800aaec:	ed56 1a01 	vldr	s3, [r6, #-4]
 800aaf0:	ee73 ba82 	vadd.f32	s23, s7, s4
 800aaf4:	ee37 ba22 	vadd.f32	s22, s14, s5
 800aaf8:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800aafc:	ee33 9a04 	vadd.f32	s18, s6, s8
 800ab00:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800ab04:	ee75 aa00 	vadd.f32	s21, s10, s0
 800ab08:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800ab0c:	ee71 8a06 	vadd.f32	s17, s2, s12
 800ab10:	ed43 ba04 	vstr	s23, [r3, #-16]
 800ab14:	ed03 ba03 	vstr	s22, [r3, #-12]
 800ab18:	ed43 aa02 	vstr	s21, [r3, #-8]
 800ab1c:	ed03 aa01 	vstr	s20, [r3, #-4]
 800ab20:	ed06 8a01 	vstr	s16, [r6, #-4]
 800ab24:	ed46 9a04 	vstr	s19, [r6, #-16]
 800ab28:	ed06 9a03 	vstr	s18, [r6, #-12]
 800ab2c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800ab30:	ee37 7a62 	vsub.f32	s14, s14, s5
 800ab34:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800ab38:	ee34 4a43 	vsub.f32	s8, s8, s6
 800ab3c:	ed52 6a03 	vldr	s13, [r2, #-12]
 800ab40:	ed12 3a04 	vldr	s6, [r2, #-16]
 800ab44:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800ab48:	ee27 8a26 	vmul.f32	s16, s14, s13
 800ab4c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800ab50:	ee23 2a83 	vmul.f32	s4, s7, s6
 800ab54:	ee64 4a83 	vmul.f32	s9, s9, s6
 800ab58:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800ab5c:	ee27 7a03 	vmul.f32	s14, s14, s6
 800ab60:	ee64 6a26 	vmul.f32	s13, s8, s13
 800ab64:	ee24 4a03 	vmul.f32	s8, s8, s6
 800ab68:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ab6c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ab70:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800ab74:	ee32 3a08 	vadd.f32	s6, s4, s16
 800ab78:	ed05 7a03 	vstr	s14, [r5, #-12]
 800ab7c:	ed05 3a04 	vstr	s6, [r5, #-16]
 800ab80:	ed04 4a04 	vstr	s8, [r4, #-16]
 800ab84:	ed44 6a03 	vstr	s13, [r4, #-12]
 800ab88:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ab8c:	ee76 6a41 	vsub.f32	s13, s12, s2
 800ab90:	ee35 5a40 	vsub.f32	s10, s10, s0
 800ab94:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800ab98:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ab9c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800aba0:	ee67 3a87 	vmul.f32	s7, s15, s14
 800aba4:	ee66 4a87 	vmul.f32	s9, s13, s14
 800aba8:	ee25 4a25 	vmul.f32	s8, s10, s11
 800abac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800abb0:	ee25 5a07 	vmul.f32	s10, s10, s14
 800abb4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800abb8:	ee26 7a07 	vmul.f32	s14, s12, s14
 800abbc:	ee26 6a25 	vmul.f32	s12, s12, s11
 800abc0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800abc4:	ee74 5a23 	vadd.f32	s11, s8, s7
 800abc8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800abcc:	ee37 7a26 	vadd.f32	s14, s14, s13
 800abd0:	3310      	adds	r3, #16
 800abd2:	4563      	cmp	r3, ip
 800abd4:	ed45 5a02 	vstr	s11, [r5, #-8]
 800abd8:	f106 0610 	add.w	r6, r6, #16
 800abdc:	ed45 7a01 	vstr	s15, [r5, #-4]
 800abe0:	f102 0210 	add.w	r2, r2, #16
 800abe4:	ed04 6a02 	vstr	s12, [r4, #-8]
 800abe8:	ed04 7a01 	vstr	s14, [r4, #-4]
 800abec:	f105 0510 	add.w	r5, r5, #16
 800abf0:	f104 0410 	add.w	r4, r4, #16
 800abf4:	f47f af5c 	bne.w	800aab0 <arm_cfft_radix8by2_f32+0x38>
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	b28c      	uxth	r4, r1
 800abfc:	4621      	mov	r1, r4
 800abfe:	2302      	movs	r3, #2
 800ac00:	f000 fc60 	bl	800b4c4 <arm_radix8_butterfly_f32>
 800ac04:	ecbd 8b08 	vpop	{d8-d11}
 800ac08:	4621      	mov	r1, r4
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	4640      	mov	r0, r8
 800ac0e:	2302      	movs	r3, #2
 800ac10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac14:	f000 bc56 	b.w	800b4c4 <arm_radix8_butterfly_f32>

0800ac18 <arm_cfft_radix8by4_f32>:
 800ac18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1c:	ed2d 8b0a 	vpush	{d8-d12}
 800ac20:	b08d      	sub	sp, #52	@ 0x34
 800ac22:	460d      	mov	r5, r1
 800ac24:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ac26:	8801      	ldrh	r1, [r0, #0]
 800ac28:	6842      	ldr	r2, [r0, #4]
 800ac2a:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac2c:	0849      	lsrs	r1, r1, #1
 800ac2e:	008b      	lsls	r3, r1, #2
 800ac30:	18ee      	adds	r6, r5, r3
 800ac32:	18f0      	adds	r0, r6, r3
 800ac34:	edd0 5a00 	vldr	s11, [r0]
 800ac38:	edd5 7a00 	vldr	s15, [r5]
 800ac3c:	ed96 7a00 	vldr	s14, [r6]
 800ac40:	edd0 3a01 	vldr	s7, [r0, #4]
 800ac44:	ed96 4a01 	vldr	s8, [r6, #4]
 800ac48:	ed95 5a01 	vldr	s10, [r5, #4]
 800ac4c:	9008      	str	r0, [sp, #32]
 800ac4e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800ac52:	18c7      	adds	r7, r0, r3
 800ac54:	edd7 4a00 	vldr	s9, [r7]
 800ac58:	ed97 3a01 	vldr	s6, [r7, #4]
 800ac5c:	9701      	str	r7, [sp, #4]
 800ac5e:	ee77 6a06 	vadd.f32	s13, s14, s12
 800ac62:	462c      	mov	r4, r5
 800ac64:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ac68:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ac6c:	ee16 ca90 	vmov	ip, s13
 800ac70:	f844 cb08 	str.w	ip, [r4], #8
 800ac74:	ee75 6a23 	vadd.f32	s13, s10, s7
 800ac78:	edd6 5a01 	vldr	s11, [r6, #4]
 800ac7c:	edd7 2a01 	vldr	s5, [r7, #4]
 800ac80:	9404      	str	r4, [sp, #16]
 800ac82:	ee35 5a63 	vsub.f32	s10, s10, s7
 800ac86:	ee74 3a27 	vadd.f32	s7, s8, s15
 800ac8a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ac8e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800ac92:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800ac96:	0849      	lsrs	r1, r1, #1
 800ac98:	f102 0e08 	add.w	lr, r2, #8
 800ac9c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800aca0:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800aca4:	9109      	str	r1, [sp, #36]	@ 0x24
 800aca6:	ee35 4a47 	vsub.f32	s8, s10, s14
 800acaa:	f1a1 0902 	sub.w	r9, r1, #2
 800acae:	f8cd e00c 	str.w	lr, [sp, #12]
 800acb2:	4631      	mov	r1, r6
 800acb4:	ee13 ea90 	vmov	lr, s7
 800acb8:	ee36 6a64 	vsub.f32	s12, s12, s9
 800acbc:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800acc0:	4604      	mov	r4, r0
 800acc2:	edc5 5a01 	vstr	s11, [r5, #4]
 800acc6:	ee37 7a05 	vadd.f32	s14, s14, s10
 800acca:	f841 eb08 	str.w	lr, [r1], #8
 800acce:	ee34 5a24 	vadd.f32	s10, s8, s9
 800acd2:	ee16 ea10 	vmov	lr, s12
 800acd6:	ed86 5a01 	vstr	s10, [r6, #4]
 800acda:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800acde:	f844 eb08 	str.w	lr, [r4], #8
 800ace2:	ee77 7a83 	vadd.f32	s15, s15, s6
 800ace6:	edc0 6a01 	vstr	s13, [r0, #4]
 800acea:	9405      	str	r4, [sp, #20]
 800acec:	4604      	mov	r4, r0
 800acee:	ee17 0a90 	vmov	r0, s15
 800acf2:	9106      	str	r1, [sp, #24]
 800acf4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800acf8:	f102 0110 	add.w	r1, r2, #16
 800acfc:	46bc      	mov	ip, r7
 800acfe:	9100      	str	r1, [sp, #0]
 800ad00:	f847 0b08 	str.w	r0, [r7], #8
 800ad04:	f102 0118 	add.w	r1, r2, #24
 800ad08:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800ad0c:	9102      	str	r1, [sp, #8]
 800ad0e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800ad12:	9007      	str	r0, [sp, #28]
 800ad14:	f000 8134 	beq.w	800af80 <arm_cfft_radix8by4_f32+0x368>
 800ad18:	f102 0920 	add.w	r9, r2, #32
 800ad1c:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800ad20:	9a01      	ldr	r2, [sp, #4]
 800ad22:	f8dd a000 	ldr.w	sl, [sp]
 800ad26:	3b0c      	subs	r3, #12
 800ad28:	4683      	mov	fp, r0
 800ad2a:	4463      	add	r3, ip
 800ad2c:	f105 0e10 	add.w	lr, r5, #16
 800ad30:	f1a4 010c 	sub.w	r1, r4, #12
 800ad34:	f104 0510 	add.w	r5, r4, #16
 800ad38:	f1a6 0c0c 	sub.w	ip, r6, #12
 800ad3c:	f1a2 040c 	sub.w	r4, r2, #12
 800ad40:	f106 0010 	add.w	r0, r6, #16
 800ad44:	3210      	adds	r2, #16
 800ad46:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800ad4a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800ad4e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800ad52:	ed52 1a02 	vldr	s3, [r2, #-8]
 800ad56:	ed55 6a01 	vldr	s13, [r5, #-4]
 800ad5a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800ad5e:	ed12 1a01 	vldr	s2, [r2, #-4]
 800ad62:	ed10 8a01 	vldr	s16, [r0, #-4]
 800ad66:	ee35 4a25 	vadd.f32	s8, s10, s11
 800ad6a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800ad6e:	ee37 7a84 	vadd.f32	s14, s15, s8
 800ad72:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ad76:	ee37 7a21 	vadd.f32	s14, s14, s3
 800ad7a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800ad7e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800ad82:	ed10 7a01 	vldr	s14, [r0, #-4]
 800ad86:	ed52 6a01 	vldr	s13, [r2, #-4]
 800ad8a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800ad8e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800ad92:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ad96:	ee70 3a67 	vsub.f32	s7, s0, s15
 800ad9a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800ad9e:	ed94 7a02 	vldr	s14, [r4, #8]
 800ada2:	ed9c 2a02 	vldr	s4, [ip, #8]
 800ada6:	ed91 ba02 	vldr	s22, [r1, #8]
 800adaa:	edd3 9a02 	vldr	s19, [r3, #8]
 800adae:	edd4 2a01 	vldr	s5, [r4, #4]
 800adb2:	ed9c 9a01 	vldr	s18, [ip, #4]
 800adb6:	ed93 5a01 	vldr	s10, [r3, #4]
 800adba:	edd1 0a01 	vldr	s1, [r1, #4]
 800adbe:	ee72 6a07 	vadd.f32	s13, s4, s14
 800adc2:	ee32 2a47 	vsub.f32	s4, s4, s14
 800adc6:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800adca:	ee79 4a22 	vadd.f32	s9, s18, s5
 800adce:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800add2:	ee79 2a62 	vsub.f32	s5, s18, s5
 800add6:	ed8c 7a02 	vstr	s14, [ip, #8]
 800adda:	ed91 7a01 	vldr	s14, [r1, #4]
 800adde:	edd3 8a01 	vldr	s17, [r3, #4]
 800ade2:	ee34 7a87 	vadd.f32	s14, s9, s14
 800ade6:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800adea:	ee37 7a28 	vadd.f32	s14, s14, s17
 800adee:	ee32 9a60 	vsub.f32	s18, s4, s1
 800adf2:	ed8c 7a01 	vstr	s14, [ip, #4]
 800adf6:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800adfa:	ed1a aa02 	vldr	s20, [sl, #-8]
 800adfe:	ee73 8a22 	vadd.f32	s17, s6, s5
 800ae02:	ee39 9a05 	vadd.f32	s18, s18, s10
 800ae06:	ee7a aac1 	vsub.f32	s21, s21, s2
 800ae0a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800ae0e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800ae12:	ee69 ba07 	vmul.f32	s23, s18, s14
 800ae16:	ee6a aa87 	vmul.f32	s21, s21, s14
 800ae1a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800ae1e:	ee63 ca87 	vmul.f32	s25, s7, s14
 800ae22:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800ae26:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800ae2a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800ae2e:	ee73 3aea 	vsub.f32	s7, s7, s21
 800ae32:	ee78 8a89 	vadd.f32	s17, s17, s18
 800ae36:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800ae3a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800ae3e:	ee34 4a67 	vsub.f32	s8, s8, s15
 800ae42:	ee76 6acb 	vsub.f32	s13, s13, s22
 800ae46:	ee36 6a48 	vsub.f32	s12, s12, s16
 800ae4a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800ae4e:	ed00 7a02 	vstr	s14, [r0, #-8]
 800ae52:	ed40 3a01 	vstr	s7, [r0, #-4]
 800ae56:	edc1 8a01 	vstr	s17, [r1, #4]
 800ae5a:	ed81 aa02 	vstr	s20, [r1, #8]
 800ae5e:	ed59 3a04 	vldr	s7, [r9, #-16]
 800ae62:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800ae66:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800ae6a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800ae6e:	ee34 4a61 	vsub.f32	s8, s8, s3
 800ae72:	ee36 6a41 	vsub.f32	s12, s12, s2
 800ae76:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800ae7a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800ae7e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800ae82:	ee26 6a23 	vmul.f32	s12, s12, s7
 800ae86:	ee24 4a26 	vmul.f32	s8, s8, s13
 800ae8a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ae8e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800ae92:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800ae96:	ee36 6a44 	vsub.f32	s12, s12, s8
 800ae9a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ae9e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800aea2:	ee79 3a29 	vadd.f32	s7, s18, s19
 800aea6:	ee75 6a60 	vsub.f32	s13, s10, s1
 800aeaa:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800aeae:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aeb2:	ed45 3a02 	vstr	s7, [r5, #-8]
 800aeb6:	ed05 6a01 	vstr	s12, [r5, #-4]
 800aeba:	ed84 7a01 	vstr	s14, [r4, #4]
 800aebe:	ed84 4a02 	vstr	s8, [r4, #8]
 800aec2:	ee35 6a81 	vadd.f32	s12, s11, s2
 800aec6:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800aeca:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800aece:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800aed2:	ee33 3a62 	vsub.f32	s6, s6, s5
 800aed6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800aeda:	ee67 2a26 	vmul.f32	s5, s14, s13
 800aede:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800aee2:	ee26 5a25 	vmul.f32	s10, s12, s11
 800aee6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800aeea:	ee26 6a26 	vmul.f32	s12, s12, s13
 800aeee:	ee27 7a25 	vmul.f32	s14, s14, s11
 800aef2:	ee63 6a26 	vmul.f32	s13, s6, s13
 800aef6:	ee23 3a25 	vmul.f32	s6, s6, s11
 800aefa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800aefe:	ee75 5a24 	vadd.f32	s11, s10, s9
 800af02:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800af06:	ee36 7a87 	vadd.f32	s14, s13, s14
 800af0a:	f1bb 0b01 	subs.w	fp, fp, #1
 800af0e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800af12:	ed42 7a01 	vstr	s15, [r2, #-4]
 800af16:	f10e 0e08 	add.w	lr, lr, #8
 800af1a:	ed83 3a02 	vstr	s6, [r3, #8]
 800af1e:	ed83 7a01 	vstr	s14, [r3, #4]
 800af22:	f1ac 0c08 	sub.w	ip, ip, #8
 800af26:	f10a 0a08 	add.w	sl, sl, #8
 800af2a:	f100 0008 	add.w	r0, r0, #8
 800af2e:	f1a1 0108 	sub.w	r1, r1, #8
 800af32:	f109 0910 	add.w	r9, r9, #16
 800af36:	f105 0508 	add.w	r5, r5, #8
 800af3a:	f1a4 0408 	sub.w	r4, r4, #8
 800af3e:	f108 0818 	add.w	r8, r8, #24
 800af42:	f102 0208 	add.w	r2, r2, #8
 800af46:	f1a3 0308 	sub.w	r3, r3, #8
 800af4a:	f47f aefc 	bne.w	800ad46 <arm_cfft_radix8by4_f32+0x12e>
 800af4e:	9907      	ldr	r1, [sp, #28]
 800af50:	9800      	ldr	r0, [sp, #0]
 800af52:	00cb      	lsls	r3, r1, #3
 800af54:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800af58:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800af5c:	9100      	str	r1, [sp, #0]
 800af5e:	9904      	ldr	r1, [sp, #16]
 800af60:	4419      	add	r1, r3
 800af62:	9104      	str	r1, [sp, #16]
 800af64:	9903      	ldr	r1, [sp, #12]
 800af66:	4419      	add	r1, r3
 800af68:	9103      	str	r1, [sp, #12]
 800af6a:	9906      	ldr	r1, [sp, #24]
 800af6c:	4419      	add	r1, r3
 800af6e:	9106      	str	r1, [sp, #24]
 800af70:	9905      	ldr	r1, [sp, #20]
 800af72:	441f      	add	r7, r3
 800af74:	4419      	add	r1, r3
 800af76:	9b02      	ldr	r3, [sp, #8]
 800af78:	9105      	str	r1, [sp, #20]
 800af7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af7e:	9302      	str	r3, [sp, #8]
 800af80:	9904      	ldr	r1, [sp, #16]
 800af82:	9805      	ldr	r0, [sp, #20]
 800af84:	ed91 4a00 	vldr	s8, [r1]
 800af88:	edd0 6a00 	vldr	s13, [r0]
 800af8c:	9b06      	ldr	r3, [sp, #24]
 800af8e:	ed97 3a00 	vldr	s6, [r7]
 800af92:	edd3 7a00 	vldr	s15, [r3]
 800af96:	edd0 4a01 	vldr	s9, [r0, #4]
 800af9a:	edd1 3a01 	vldr	s7, [r1, #4]
 800af9e:	ed97 2a01 	vldr	s4, [r7, #4]
 800afa2:	ed93 7a01 	vldr	s14, [r3, #4]
 800afa6:	9a03      	ldr	r2, [sp, #12]
 800afa8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800afac:	ee34 6a26 	vadd.f32	s12, s8, s13
 800afb0:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800afb4:	ee37 5a86 	vadd.f32	s10, s15, s12
 800afb8:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800afbc:	ee35 5a03 	vadd.f32	s10, s10, s6
 800afc0:	ee74 6a66 	vsub.f32	s13, s8, s13
 800afc4:	ed81 5a00 	vstr	s10, [r1]
 800afc8:	ed93 5a01 	vldr	s10, [r3, #4]
 800afcc:	edd7 4a01 	vldr	s9, [r7, #4]
 800afd0:	ee35 5a85 	vadd.f32	s10, s11, s10
 800afd4:	ee37 4a26 	vadd.f32	s8, s14, s13
 800afd8:	ee35 5a24 	vadd.f32	s10, s10, s9
 800afdc:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800afe0:	ed81 5a01 	vstr	s10, [r1, #4]
 800afe4:	edd2 1a00 	vldr	s3, [r2]
 800afe8:	edd2 2a01 	vldr	s5, [r2, #4]
 800afec:	ee34 5a83 	vadd.f32	s10, s9, s6
 800aff0:	ee34 4a42 	vsub.f32	s8, s8, s4
 800aff4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800aff8:	ee64 4a21 	vmul.f32	s9, s8, s3
 800affc:	ee24 4a22 	vmul.f32	s8, s8, s5
 800b000:	ee65 2a22 	vmul.f32	s5, s10, s5
 800b004:	ee25 5a21 	vmul.f32	s10, s10, s3
 800b008:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b00c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b010:	edc3 2a00 	vstr	s5, [r3]
 800b014:	ed83 5a01 	vstr	s10, [r3, #4]
 800b018:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800b01c:	9b00      	ldr	r3, [sp, #0]
 800b01e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800b022:	ed93 4a01 	vldr	s8, [r3, #4]
 800b026:	ed93 5a00 	vldr	s10, [r3]
 800b02a:	9b02      	ldr	r3, [sp, #8]
 800b02c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800b030:	ee66 4a05 	vmul.f32	s9, s12, s10
 800b034:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b038:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b03c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b040:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b044:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800b048:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b04c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b050:	ed80 6a01 	vstr	s12, [r0, #4]
 800b054:	edc0 5a00 	vstr	s11, [r0]
 800b058:	edd3 5a01 	vldr	s11, [r3, #4]
 800b05c:	edd3 6a00 	vldr	s13, [r3]
 800b060:	ee37 7a02 	vadd.f32	s14, s14, s4
 800b064:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800b068:	ee27 6a26 	vmul.f32	s12, s14, s13
 800b06c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b070:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b074:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b078:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b07c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b080:	ed87 7a01 	vstr	s14, [r7, #4]
 800b084:	edc7 7a00 	vstr	s15, [r7]
 800b088:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800b08c:	4621      	mov	r1, r4
 800b08e:	686a      	ldr	r2, [r5, #4]
 800b090:	2304      	movs	r3, #4
 800b092:	f000 fa17 	bl	800b4c4 <arm_radix8_butterfly_f32>
 800b096:	4630      	mov	r0, r6
 800b098:	4621      	mov	r1, r4
 800b09a:	686a      	ldr	r2, [r5, #4]
 800b09c:	2304      	movs	r3, #4
 800b09e:	f000 fa11 	bl	800b4c4 <arm_radix8_butterfly_f32>
 800b0a2:	9808      	ldr	r0, [sp, #32]
 800b0a4:	686a      	ldr	r2, [r5, #4]
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	2304      	movs	r3, #4
 800b0aa:	f000 fa0b 	bl	800b4c4 <arm_radix8_butterfly_f32>
 800b0ae:	686a      	ldr	r2, [r5, #4]
 800b0b0:	9801      	ldr	r0, [sp, #4]
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	2304      	movs	r3, #4
 800b0b6:	b00d      	add	sp, #52	@ 0x34
 800b0b8:	ecbd 8b0a 	vpop	{d8-d12}
 800b0bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c0:	f000 ba00 	b.w	800b4c4 <arm_radix8_butterfly_f32>

0800b0c4 <arm_cfft_f32>:
 800b0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c8:	2a01      	cmp	r2, #1
 800b0ca:	4606      	mov	r6, r0
 800b0cc:	4617      	mov	r7, r2
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	4698      	mov	r8, r3
 800b0d2:	8805      	ldrh	r5, [r0, #0]
 800b0d4:	d056      	beq.n	800b184 <arm_cfft_f32+0xc0>
 800b0d6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800b0da:	d063      	beq.n	800b1a4 <arm_cfft_f32+0xe0>
 800b0dc:	d916      	bls.n	800b10c <arm_cfft_f32+0x48>
 800b0de:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800b0e2:	d01a      	beq.n	800b11a <arm_cfft_f32+0x56>
 800b0e4:	d947      	bls.n	800b176 <arm_cfft_f32+0xb2>
 800b0e6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800b0ea:	d05b      	beq.n	800b1a4 <arm_cfft_f32+0xe0>
 800b0ec:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800b0f0:	d105      	bne.n	800b0fe <arm_cfft_f32+0x3a>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	6872      	ldr	r2, [r6, #4]
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f000 f9e3 	bl	800b4c4 <arm_radix8_butterfly_f32>
 800b0fe:	f1b8 0f00 	cmp.w	r8, #0
 800b102:	d111      	bne.n	800b128 <arm_cfft_f32+0x64>
 800b104:	2f01      	cmp	r7, #1
 800b106:	d016      	beq.n	800b136 <arm_cfft_f32+0x72>
 800b108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b10c:	2d20      	cmp	r5, #32
 800b10e:	d049      	beq.n	800b1a4 <arm_cfft_f32+0xe0>
 800b110:	d935      	bls.n	800b17e <arm_cfft_f32+0xba>
 800b112:	2d40      	cmp	r5, #64	@ 0x40
 800b114:	d0ed      	beq.n	800b0f2 <arm_cfft_f32+0x2e>
 800b116:	2d80      	cmp	r5, #128	@ 0x80
 800b118:	d1f1      	bne.n	800b0fe <arm_cfft_f32+0x3a>
 800b11a:	4621      	mov	r1, r4
 800b11c:	4630      	mov	r0, r6
 800b11e:	f7ff fcab 	bl	800aa78 <arm_cfft_radix8by2_f32>
 800b122:	f1b8 0f00 	cmp.w	r8, #0
 800b126:	d0ed      	beq.n	800b104 <arm_cfft_f32+0x40>
 800b128:	68b2      	ldr	r2, [r6, #8]
 800b12a:	89b1      	ldrh	r1, [r6, #12]
 800b12c:	4620      	mov	r0, r4
 800b12e:	f000 f841 	bl	800b1b4 <arm_bitreversal_32>
 800b132:	2f01      	cmp	r7, #1
 800b134:	d1e8      	bne.n	800b108 <arm_cfft_f32+0x44>
 800b136:	ee07 5a90 	vmov	s15, r5
 800b13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b13e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b142:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b146:	2d00      	cmp	r5, #0
 800b148:	d0de      	beq.n	800b108 <arm_cfft_f32+0x44>
 800b14a:	f104 0108 	add.w	r1, r4, #8
 800b14e:	2300      	movs	r3, #0
 800b150:	3301      	adds	r3, #1
 800b152:	429d      	cmp	r5, r3
 800b154:	f101 0108 	add.w	r1, r1, #8
 800b158:	ed11 7a04 	vldr	s14, [r1, #-16]
 800b15c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b160:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b164:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b168:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b16c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b170:	d1ee      	bne.n	800b150 <arm_cfft_f32+0x8c>
 800b172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b176:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800b17a:	d0ba      	beq.n	800b0f2 <arm_cfft_f32+0x2e>
 800b17c:	e7bf      	b.n	800b0fe <arm_cfft_f32+0x3a>
 800b17e:	2d10      	cmp	r5, #16
 800b180:	d0cb      	beq.n	800b11a <arm_cfft_f32+0x56>
 800b182:	e7bc      	b.n	800b0fe <arm_cfft_f32+0x3a>
 800b184:	b19d      	cbz	r5, 800b1ae <arm_cfft_f32+0xea>
 800b186:	f101 030c 	add.w	r3, r1, #12
 800b18a:	2200      	movs	r2, #0
 800b18c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800b190:	3201      	adds	r2, #1
 800b192:	eef1 7a67 	vneg.f32	s15, s15
 800b196:	4295      	cmp	r5, r2
 800b198:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b19c:	f103 0308 	add.w	r3, r3, #8
 800b1a0:	d1f4      	bne.n	800b18c <arm_cfft_f32+0xc8>
 800b1a2:	e798      	b.n	800b0d6 <arm_cfft_f32+0x12>
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f7ff fd36 	bl	800ac18 <arm_cfft_radix8by4_f32>
 800b1ac:	e7a7      	b.n	800b0fe <arm_cfft_f32+0x3a>
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d0aa      	beq.n	800b108 <arm_cfft_f32+0x44>
 800b1b2:	e7b9      	b.n	800b128 <arm_cfft_f32+0x64>

0800b1b4 <arm_bitreversal_32>:
 800b1b4:	b1e9      	cbz	r1, 800b1f2 <arm_bitreversal_32+0x3e>
 800b1b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1b8:	2500      	movs	r5, #0
 800b1ba:	f102 0e02 	add.w	lr, r2, #2
 800b1be:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800b1c2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800b1c6:	08a4      	lsrs	r4, r4, #2
 800b1c8:	089b      	lsrs	r3, r3, #2
 800b1ca:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800b1ce:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800b1d2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800b1d6:	00a6      	lsls	r6, r4, #2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800b1de:	3304      	adds	r3, #4
 800b1e0:	1d34      	adds	r4, r6, #4
 800b1e2:	3502      	adds	r5, #2
 800b1e4:	58c6      	ldr	r6, [r0, r3]
 800b1e6:	5907      	ldr	r7, [r0, r4]
 800b1e8:	50c7      	str	r7, [r0, r3]
 800b1ea:	428d      	cmp	r5, r1
 800b1ec:	5106      	str	r6, [r0, r4]
 800b1ee:	d3e6      	bcc.n	800b1be <arm_bitreversal_32+0xa>
 800b1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1f2:	4770      	bx	lr

0800b1f4 <arm_cmplx_mag_f32>:
 800b1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f8:	ed2d 8b02 	vpush	{d8}
 800b1fc:	0897      	lsrs	r7, r2, #2
 800b1fe:	b084      	sub	sp, #16
 800b200:	d077      	beq.n	800b2f2 <arm_cmplx_mag_f32+0xfe>
 800b202:	f04f 0800 	mov.w	r8, #0
 800b206:	f100 0420 	add.w	r4, r0, #32
 800b20a:	f101 0510 	add.w	r5, r1, #16
 800b20e:	463e      	mov	r6, r7
 800b210:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800b214:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800b218:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b21c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b220:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b224:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b22c:	f2c0 80c5 	blt.w	800b3ba <arm_cmplx_mag_f32+0x1c6>
 800b230:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b238:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b23c:	f100 80cb 	bmi.w	800b3d6 <arm_cmplx_mag_f32+0x1e2>
 800b240:	ed05 8a04 	vstr	s16, [r5, #-16]
 800b244:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800b248:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800b24c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b250:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b254:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b258:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b260:	f2c0 80a8 	blt.w	800b3b4 <arm_cmplx_mag_f32+0x1c0>
 800b264:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b26c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b270:	f100 80a8 	bmi.w	800b3c4 <arm_cmplx_mag_f32+0x1d0>
 800b274:	ed05 8a03 	vstr	s16, [r5, #-12]
 800b278:	ed14 0a04 	vldr	s0, [r4, #-16]
 800b27c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b280:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b284:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b288:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b28c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b294:	f2c0 808b 	blt.w	800b3ae <arm_cmplx_mag_f32+0x1ba>
 800b298:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b2a4:	f100 80a9 	bmi.w	800b3fa <arm_cmplx_mag_f32+0x206>
 800b2a8:	ed05 8a02 	vstr	s16, [r5, #-8]
 800b2ac:	ed14 0a02 	vldr	s0, [r4, #-8]
 800b2b0:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b2b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b2b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b2bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b2c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2c8:	db6e      	blt.n	800b3a8 <arm_cmplx_mag_f32+0x1b4>
 800b2ca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2d2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b2d6:	f100 8087 	bmi.w	800b3e8 <arm_cmplx_mag_f32+0x1f4>
 800b2da:	ed05 8a01 	vstr	s16, [r5, #-4]
 800b2de:	3e01      	subs	r6, #1
 800b2e0:	f104 0420 	add.w	r4, r4, #32
 800b2e4:	f105 0510 	add.w	r5, r5, #16
 800b2e8:	d192      	bne.n	800b210 <arm_cmplx_mag_f32+0x1c>
 800b2ea:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800b2ee:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800b2f2:	f012 0203 	ands.w	r2, r2, #3
 800b2f6:	d052      	beq.n	800b39e <arm_cmplx_mag_f32+0x1aa>
 800b2f8:	ed90 0a00 	vldr	s0, [r0]
 800b2fc:	edd0 7a01 	vldr	s15, [r0, #4]
 800b300:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b304:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b308:	2300      	movs	r3, #0
 800b30a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b30e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b316:	bfb8      	it	lt
 800b318:	600b      	strlt	r3, [r1, #0]
 800b31a:	db08      	blt.n	800b32e <arm_cmplx_mag_f32+0x13a>
 800b31c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b324:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b328:	d479      	bmi.n	800b41e <arm_cmplx_mag_f32+0x22a>
 800b32a:	ed81 8a00 	vstr	s16, [r1]
 800b32e:	3a01      	subs	r2, #1
 800b330:	d035      	beq.n	800b39e <arm_cmplx_mag_f32+0x1aa>
 800b332:	ed90 0a02 	vldr	s0, [r0, #8]
 800b336:	edd0 7a03 	vldr	s15, [r0, #12]
 800b33a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b33e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b342:	2300      	movs	r3, #0
 800b344:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b348:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b350:	bfb8      	it	lt
 800b352:	604b      	strlt	r3, [r1, #4]
 800b354:	db08      	blt.n	800b368 <arm_cmplx_mag_f32+0x174>
 800b356:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b35e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b362:	d453      	bmi.n	800b40c <arm_cmplx_mag_f32+0x218>
 800b364:	ed81 8a01 	vstr	s16, [r1, #4]
 800b368:	2a01      	cmp	r2, #1
 800b36a:	d018      	beq.n	800b39e <arm_cmplx_mag_f32+0x1aa>
 800b36c:	ed90 0a04 	vldr	s0, [r0, #16]
 800b370:	edd0 7a05 	vldr	s15, [r0, #20]
 800b374:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b378:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b37c:	2300      	movs	r3, #0
 800b37e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b382:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b38a:	db19      	blt.n	800b3c0 <arm_cmplx_mag_f32+0x1cc>
 800b38c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b394:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b398:	d44a      	bmi.n	800b430 <arm_cmplx_mag_f32+0x23c>
 800b39a:	ed81 8a02 	vstr	s16, [r1, #8]
 800b39e:	b004      	add	sp, #16
 800b3a0:	ecbd 8b02 	vpop	{d8}
 800b3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3a8:	f845 8c04 	str.w	r8, [r5, #-4]
 800b3ac:	e797      	b.n	800b2de <arm_cmplx_mag_f32+0xea>
 800b3ae:	f845 8c08 	str.w	r8, [r5, #-8]
 800b3b2:	e77b      	b.n	800b2ac <arm_cmplx_mag_f32+0xb8>
 800b3b4:	f845 8c0c 	str.w	r8, [r5, #-12]
 800b3b8:	e75e      	b.n	800b278 <arm_cmplx_mag_f32+0x84>
 800b3ba:	f845 8c10 	str.w	r8, [r5, #-16]
 800b3be:	e741      	b.n	800b244 <arm_cmplx_mag_f32+0x50>
 800b3c0:	608b      	str	r3, [r1, #8]
 800b3c2:	e7ec      	b.n	800b39e <arm_cmplx_mag_f32+0x1aa>
 800b3c4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b3c8:	9001      	str	r0, [sp, #4]
 800b3ca:	f003 f811 	bl	800e3f0 <sqrtf>
 800b3ce:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b3d2:	9801      	ldr	r0, [sp, #4]
 800b3d4:	e74e      	b.n	800b274 <arm_cmplx_mag_f32+0x80>
 800b3d6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b3da:	9001      	str	r0, [sp, #4]
 800b3dc:	f003 f808 	bl	800e3f0 <sqrtf>
 800b3e0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b3e4:	9801      	ldr	r0, [sp, #4]
 800b3e6:	e72b      	b.n	800b240 <arm_cmplx_mag_f32+0x4c>
 800b3e8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b3ec:	9001      	str	r0, [sp, #4]
 800b3ee:	f002 ffff 	bl	800e3f0 <sqrtf>
 800b3f2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b3f6:	9801      	ldr	r0, [sp, #4]
 800b3f8:	e76f      	b.n	800b2da <arm_cmplx_mag_f32+0xe6>
 800b3fa:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b3fe:	9001      	str	r0, [sp, #4]
 800b400:	f002 fff6 	bl	800e3f0 <sqrtf>
 800b404:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b408:	9801      	ldr	r0, [sp, #4]
 800b40a:	e74d      	b.n	800b2a8 <arm_cmplx_mag_f32+0xb4>
 800b40c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b410:	9201      	str	r2, [sp, #4]
 800b412:	f002 ffed 	bl	800e3f0 <sqrtf>
 800b416:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800b41a:	9903      	ldr	r1, [sp, #12]
 800b41c:	e7a2      	b.n	800b364 <arm_cmplx_mag_f32+0x170>
 800b41e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b422:	9201      	str	r2, [sp, #4]
 800b424:	f002 ffe4 	bl	800e3f0 <sqrtf>
 800b428:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800b42c:	9903      	ldr	r1, [sp, #12]
 800b42e:	e77c      	b.n	800b32a <arm_cmplx_mag_f32+0x136>
 800b430:	9101      	str	r1, [sp, #4]
 800b432:	f002 ffdd 	bl	800e3f0 <sqrtf>
 800b436:	9901      	ldr	r1, [sp, #4]
 800b438:	e7af      	b.n	800b39a <arm_cmplx_mag_f32+0x1a6>
 800b43a:	bf00      	nop

0800b43c <arm_scale_f32>:
 800b43c:	b470      	push	{r4, r5, r6}
 800b43e:	0896      	lsrs	r6, r2, #2
 800b440:	d025      	beq.n	800b48e <arm_scale_f32+0x52>
 800b442:	f100 0410 	add.w	r4, r0, #16
 800b446:	f101 0310 	add.w	r3, r1, #16
 800b44a:	4635      	mov	r5, r6
 800b44c:	ed54 7a04 	vldr	s15, [r4, #-16]
 800b450:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b454:	3d01      	subs	r5, #1
 800b456:	ed43 7a04 	vstr	s15, [r3, #-16]
 800b45a:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b45e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b462:	f104 0410 	add.w	r4, r4, #16
 800b466:	ed43 7a03 	vstr	s15, [r3, #-12]
 800b46a:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800b46e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b472:	f103 0310 	add.w	r3, r3, #16
 800b476:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800b47a:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800b47e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b482:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800b486:	d1e1      	bne.n	800b44c <arm_scale_f32+0x10>
 800b488:	0136      	lsls	r6, r6, #4
 800b48a:	4430      	add	r0, r6
 800b48c:	4431      	add	r1, r6
 800b48e:	f012 0203 	ands.w	r2, r2, #3
 800b492:	d015      	beq.n	800b4c0 <arm_scale_f32+0x84>
 800b494:	edd0 7a00 	vldr	s15, [r0]
 800b498:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b49c:	3a01      	subs	r2, #1
 800b49e:	edc1 7a00 	vstr	s15, [r1]
 800b4a2:	d00d      	beq.n	800b4c0 <arm_scale_f32+0x84>
 800b4a4:	edd0 7a01 	vldr	s15, [r0, #4]
 800b4a8:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b4ac:	2a01      	cmp	r2, #1
 800b4ae:	edc1 7a01 	vstr	s15, [r1, #4]
 800b4b2:	d005      	beq.n	800b4c0 <arm_scale_f32+0x84>
 800b4b4:	edd0 7a02 	vldr	s15, [r0, #8]
 800b4b8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b4bc:	ed81 0a02 	vstr	s0, [r1, #8]
 800b4c0:	bc70      	pop	{r4, r5, r6}
 800b4c2:	4770      	bx	lr

0800b4c4 <arm_radix8_butterfly_f32>:
 800b4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c8:	ed2d 8b10 	vpush	{d8-d15}
 800b4cc:	b095      	sub	sp, #84	@ 0x54
 800b4ce:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800b7bc <arm_radix8_butterfly_f32+0x2f8>
 800b4da:	9012      	str	r0, [sp, #72]	@ 0x48
 800b4dc:	468b      	mov	fp, r1
 800b4de:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b4e0:	4689      	mov	r9, r1
 800b4e2:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800b4e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b4e8:	960f      	str	r6, [sp, #60]	@ 0x3c
 800b4ea:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800b4ee:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800b4f2:	eb03 0508 	add.w	r5, r3, r8
 800b4f6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800b4fa:	eb05 040e 	add.w	r4, r5, lr
 800b4fe:	0137      	lsls	r7, r6, #4
 800b500:	eba6 030a 	sub.w	r3, r6, sl
 800b504:	eb04 000e 	add.w	r0, r4, lr
 800b508:	44b2      	add	sl, r6
 800b50a:	1d3a      	adds	r2, r7, #4
 800b50c:	9702      	str	r7, [sp, #8]
 800b50e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b512:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800b516:	ebae 0c06 	sub.w	ip, lr, r6
 800b51a:	9703      	str	r7, [sp, #12]
 800b51c:	eb03 0708 	add.w	r7, r3, r8
 800b520:	9701      	str	r7, [sp, #4]
 800b522:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800b526:	9706      	str	r7, [sp, #24]
 800b528:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b52a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b52e:	f10e 0104 	add.w	r1, lr, #4
 800b532:	4439      	add	r1, r7
 800b534:	443a      	add	r2, r7
 800b536:	0137      	lsls	r7, r6, #4
 800b538:	00f6      	lsls	r6, r6, #3
 800b53a:	9704      	str	r7, [sp, #16]
 800b53c:	9605      	str	r6, [sp, #20]
 800b53e:	9f01      	ldr	r7, [sp, #4]
 800b540:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b542:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800b546:	f04f 0c00 	mov.w	ip, #0
 800b54a:	edd4 6a00 	vldr	s13, [r4]
 800b54e:	edd7 1a00 	vldr	s3, [r7]
 800b552:	ed16 aa01 	vldr	s20, [r6, #-4]
 800b556:	edd5 5a00 	vldr	s11, [r5]
 800b55a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800b55e:	ed90 6a00 	vldr	s12, [r0]
 800b562:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b566:	ed93 3a00 	vldr	s6, [r3]
 800b56a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800b56e:	ee33 2a21 	vadd.f32	s4, s6, s3
 800b572:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800b576:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800b57a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800b57e:	ee34 4a80 	vadd.f32	s8, s9, s0
 800b582:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b586:	ee74 6a07 	vadd.f32	s13, s8, s14
 800b58a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800b58e:	ed46 6a01 	vstr	s13, [r6, #-4]
 800b592:	ed85 4a00 	vstr	s8, [r5]
 800b596:	edd1 6a00 	vldr	s13, [r1]
 800b59a:	ed94 9a01 	vldr	s18, [r4, #4]
 800b59e:	edd3 2a01 	vldr	s5, [r3, #4]
 800b5a2:	edd7 8a01 	vldr	s17, [r7, #4]
 800b5a6:	edd6 0a00 	vldr	s1, [r6]
 800b5aa:	edd5 3a01 	vldr	s7, [r5, #4]
 800b5ae:	ed90 8a01 	vldr	s16, [r0, #4]
 800b5b2:	ed92 7a00 	vldr	s14, [r2]
 800b5b6:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b5ba:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800b5be:	ee72 aae8 	vsub.f32	s21, s5, s17
 800b5c2:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800b5c6:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800b5ca:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b5ce:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800b5d2:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800b5d6:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800b5da:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800b5de:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800b5e2:	ee77 0a08 	vadd.f32	s1, s14, s16
 800b5e6:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800b5ea:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b5ee:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800b5f2:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800b5f6:	ee76 6a89 	vadd.f32	s13, s13, s18
 800b5fa:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800b5fe:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b602:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800b606:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b60a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800b60e:	ee33 2a20 	vadd.f32	s4, s6, s1
 800b612:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800b616:	ee33 3a60 	vsub.f32	s6, s6, s1
 800b61a:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800b61e:	ee77 0a01 	vadd.f32	s1, s14, s2
 800b622:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800b626:	ee37 7a41 	vsub.f32	s14, s14, s2
 800b62a:	ee73 1a84 	vadd.f32	s3, s7, s8
 800b62e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b632:	ee76 3a27 	vadd.f32	s7, s12, s15
 800b636:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b63a:	ee32 8a00 	vadd.f32	s16, s4, s0
 800b63e:	ee33 1a45 	vsub.f32	s2, s6, s10
 800b642:	ee32 2a40 	vsub.f32	s4, s4, s0
 800b646:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b64a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800b64e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800b652:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800b656:	ee34 6a67 	vsub.f32	s12, s8, s15
 800b65a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800b65e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800b662:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800b666:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b66a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800b66e:	44dc      	add	ip, fp
 800b670:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b674:	45e1      	cmp	r9, ip
 800b676:	ed86 8a00 	vstr	s16, [r6]
 800b67a:	ed85 2a01 	vstr	s4, [r5, #4]
 800b67e:	4456      	add	r6, sl
 800b680:	ed02 0a01 	vstr	s0, [r2, #-4]
 800b684:	4455      	add	r5, sl
 800b686:	edc0 6a00 	vstr	s13, [r0]
 800b68a:	ed82 1a00 	vstr	s2, [r2]
 800b68e:	ed80 5a01 	vstr	s10, [r0, #4]
 800b692:	4452      	add	r2, sl
 800b694:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b698:	4450      	add	r0, sl
 800b69a:	edc7 2a00 	vstr	s5, [r7]
 800b69e:	edc4 4a00 	vstr	s9, [r4]
 800b6a2:	ed83 7a00 	vstr	s14, [r3]
 800b6a6:	edc1 5a00 	vstr	s11, [r1]
 800b6aa:	edc7 3a01 	vstr	s7, [r7, #4]
 800b6ae:	4451      	add	r1, sl
 800b6b0:	ed84 6a01 	vstr	s12, [r4, #4]
 800b6b4:	4457      	add	r7, sl
 800b6b6:	edc3 7a01 	vstr	s15, [r3, #4]
 800b6ba:	4454      	add	r4, sl
 800b6bc:	4453      	add	r3, sl
 800b6be:	f63f af44 	bhi.w	800b54a <arm_radix8_butterfly_f32+0x86>
 800b6c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6c4:	2b07      	cmp	r3, #7
 800b6c6:	f240 81b7 	bls.w	800ba38 <arm_radix8_butterfly_f32+0x574>
 800b6ca:	9b06      	ldr	r3, [sp, #24]
 800b6cc:	9903      	ldr	r1, [sp, #12]
 800b6ce:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b6d0:	9e05      	ldr	r6, [sp, #20]
 800b6d2:	9a04      	ldr	r2, [sp, #16]
 800b6d4:	f103 0c08 	add.w	ip, r3, #8
 800b6d8:	9b02      	ldr	r3, [sp, #8]
 800b6da:	3108      	adds	r1, #8
 800b6dc:	f108 0808 	add.w	r8, r8, #8
 800b6e0:	1841      	adds	r1, r0, r1
 800b6e2:	3608      	adds	r6, #8
 800b6e4:	330c      	adds	r3, #12
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	4444      	add	r4, r8
 800b6ea:	18c3      	adds	r3, r0, r3
 800b6ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800b6ee:	1981      	adds	r1, r0, r6
 800b6f0:	f10e 0e08 	add.w	lr, lr, #8
 800b6f4:	3208      	adds	r2, #8
 800b6f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b6f8:	9107      	str	r1, [sp, #28]
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	4601      	mov	r1, r0
 800b6fe:	9304      	str	r3, [sp, #16]
 800b700:	f100 030c 	add.w	r3, r0, #12
 800b704:	4474      	add	r4, lr
 800b706:	f04f 0801 	mov.w	r8, #1
 800b70a:	1882      	adds	r2, r0, r2
 800b70c:	4461      	add	r1, ip
 800b70e:	9305      	str	r3, [sp, #20]
 800b710:	464b      	mov	r3, r9
 800b712:	940a      	str	r4, [sp, #40]	@ 0x28
 800b714:	46c1      	mov	r9, r8
 800b716:	9208      	str	r2, [sp, #32]
 800b718:	46d8      	mov	r8, fp
 800b71a:	9106      	str	r1, [sp, #24]
 800b71c:	f04f 0e00 	mov.w	lr, #0
 800b720:	469b      	mov	fp, r3
 800b722:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b724:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b726:	449e      	add	lr, r3
 800b728:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800b72c:	441a      	add	r2, r3
 800b72e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b730:	441a      	add	r2, r3
 800b732:	18d4      	adds	r4, r2, r3
 800b734:	18e5      	adds	r5, r4, r3
 800b736:	18ee      	adds	r6, r5, r3
 800b738:	18f7      	adds	r7, r6, r3
 800b73a:	eb07 0c03 	add.w	ip, r7, r3
 800b73e:	920d      	str	r2, [sp, #52]	@ 0x34
 800b740:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800b744:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800b748:	910c      	str	r1, [sp, #48]	@ 0x30
 800b74a:	4419      	add	r1, r3
 800b74c:	9103      	str	r1, [sp, #12]
 800b74e:	4419      	add	r1, r3
 800b750:	18ca      	adds	r2, r1, r3
 800b752:	9202      	str	r2, [sp, #8]
 800b754:	441a      	add	r2, r3
 800b756:	18d0      	adds	r0, r2, r3
 800b758:	ed92 ea01 	vldr	s28, [r2, #4]
 800b75c:	9a02      	ldr	r2, [sp, #8]
 800b75e:	edd4 7a00 	vldr	s15, [r4]
 800b762:	edd2 da01 	vldr	s27, [r2, #4]
 800b766:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b768:	ed91 da01 	vldr	s26, [r1, #4]
 800b76c:	ed92 ca01 	vldr	s24, [r2, #4]
 800b770:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b772:	9903      	ldr	r1, [sp, #12]
 800b774:	edcd 7a03 	vstr	s15, [sp, #12]
 800b778:	edd2 7a00 	vldr	s15, [r2]
 800b77c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b77e:	edcd 7a02 	vstr	s15, [sp, #8]
 800b782:	edd2 7a00 	vldr	s15, [r2]
 800b786:	edd0 ea01 	vldr	s29, [r0, #4]
 800b78a:	edd1 ca01 	vldr	s25, [r1, #4]
 800b78e:	eddc ba00 	vldr	s23, [ip]
 800b792:	edd7 aa00 	vldr	s21, [r7]
 800b796:	ed96 aa00 	vldr	s20, [r6]
 800b79a:	edd5 9a00 	vldr	s19, [r5]
 800b79e:	edcd 7a01 	vstr	s15, [sp, #4]
 800b7a2:	4403      	add	r3, r0
 800b7a4:	ed93 fa01 	vldr	s30, [r3, #4]
 800b7a8:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800b7ac:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800b7b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800b7b8:	46cc      	mov	ip, r9
 800b7ba:	e001      	b.n	800b7c0 <arm_radix8_butterfly_f32+0x2fc>
 800b7bc:	3f3504f3 	.word	0x3f3504f3
 800b7c0:	ed91 6a00 	vldr	s12, [r1]
 800b7c4:	ed93 5a00 	vldr	s10, [r3]
 800b7c8:	edd0 fa00 	vldr	s31, [r0]
 800b7cc:	edd4 7a00 	vldr	s15, [r4]
 800b7d0:	ed95 7a00 	vldr	s14, [r5]
 800b7d4:	ed56 3a01 	vldr	s7, [r6, #-4]
 800b7d8:	ed17 3a01 	vldr	s6, [r7, #-4]
 800b7dc:	ed92 2a00 	vldr	s4, [r2]
 800b7e0:	ed96 0a00 	vldr	s0, [r6]
 800b7e4:	ee33 8a85 	vadd.f32	s16, s7, s10
 800b7e8:	ee32 1a06 	vadd.f32	s2, s4, s12
 800b7ec:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800b7f0:	ee77 4a87 	vadd.f32	s9, s15, s14
 800b7f4:	ee78 1a04 	vadd.f32	s3, s16, s8
 800b7f8:	ee71 6a24 	vadd.f32	s13, s2, s9
 800b7fc:	ee32 2a46 	vsub.f32	s4, s4, s12
 800b800:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800b804:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b808:	ed06 6a01 	vstr	s12, [r6, #-4]
 800b80c:	edd4 8a01 	vldr	s17, [r4, #4]
 800b810:	ed92 9a01 	vldr	s18, [r2, #4]
 800b814:	edd7 0a00 	vldr	s1, [r7]
 800b818:	edd1 2a01 	vldr	s5, [r1, #4]
 800b81c:	ed95 7a01 	vldr	s14, [r5, #4]
 800b820:	ed93 6a01 	vldr	s12, [r3, #4]
 800b824:	edd0 5a01 	vldr	s11, [r0, #4]
 800b828:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b82c:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800b830:	ee39 5a62 	vsub.f32	s10, s18, s5
 800b834:	ee78 fac7 	vsub.f32	s31, s17, s14
 800b838:	ee38 4a44 	vsub.f32	s8, s16, s8
 800b83c:	ee38 7a87 	vadd.f32	s14, s17, s14
 800b840:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800b844:	ee79 2a22 	vadd.f32	s5, s18, s5
 800b848:	ee32 9a27 	vadd.f32	s18, s4, s15
 800b84c:	ee72 7a67 	vsub.f32	s15, s4, s15
 800b850:	ee30 2a06 	vadd.f32	s4, s0, s12
 800b854:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800b858:	ee71 4a64 	vsub.f32	s9, s2, s9
 800b85c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800b860:	ee32 1a08 	vadd.f32	s2, s4, s16
 800b864:	ee72 fa87 	vadd.f32	s31, s5, s14
 800b868:	ee32 2a48 	vsub.f32	s4, s4, s16
 800b86c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800b870:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800b874:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b878:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800b87c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800b880:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800b884:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800b888:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b88c:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b890:	ee74 0a22 	vadd.f32	s1, s8, s5
 800b894:	ee36 0a28 	vadd.f32	s0, s12, s17
 800b898:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b89c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800b8a0:	ee32 4a64 	vsub.f32	s8, s4, s9
 800b8a4:	ee73 8a09 	vadd.f32	s17, s6, s18
 800b8a8:	ee74 4a82 	vadd.f32	s9, s9, s4
 800b8ac:	ee33 9a49 	vsub.f32	s18, s6, s18
 800b8b0:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800b8b4:	ee35 3a85 	vadd.f32	s6, s11, s10
 800b8b8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800b8bc:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800b8c0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800b8c4:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800b8c8:	ee30 7a68 	vsub.f32	s14, s0, s17
 800b8cc:	ee35 8a03 	vadd.f32	s16, s10, s6
 800b8d0:	ee38 0a80 	vadd.f32	s0, s17, s0
 800b8d4:	ee73 3a82 	vadd.f32	s7, s7, s4
 800b8d8:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800b8dc:	ed9d 2a01 	vldr	s4, [sp, #4]
 800b8e0:	eddd 1a02 	vldr	s3, [sp, #8]
 800b8e4:	ee35 5a43 	vsub.f32	s10, s10, s6
 800b8e8:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800b8ec:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800b8f0:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800b8f4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b8f8:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800b8fc:	ee76 5a49 	vsub.f32	s11, s12, s18
 800b900:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800b904:	ee39 6a06 	vadd.f32	s12, s18, s12
 800b908:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800b90c:	ee21 4a84 	vmul.f32	s8, s3, s8
 800b910:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800b914:	ee22 7a07 	vmul.f32	s14, s4, s14
 800b918:	ee22 2a08 	vmul.f32	s4, s4, s16
 800b91c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800b920:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800b924:	ee31 1a09 	vadd.f32	s2, s2, s18
 800b928:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800b92c:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800b930:	ee74 0a60 	vsub.f32	s1, s8, s1
 800b934:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b938:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800b93c:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800b940:	ee72 1a21 	vadd.f32	s3, s4, s3
 800b944:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800b948:	ee38 2a89 	vadd.f32	s4, s17, s18
 800b94c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800b950:	ee38 8a04 	vadd.f32	s16, s16, s8
 800b954:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800b958:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800b95c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800b960:	eddd 5a03 	vldr	s11, [sp, #12]
 800b964:	edc6 fa00 	vstr	s31, [r6]
 800b968:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800b96c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800b970:	ee30 0a45 	vsub.f32	s0, s0, s10
 800b974:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800b978:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800b97c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800b980:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800b984:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800b988:	ee25 6a86 	vmul.f32	s12, s11, s12
 800b98c:	ee74 4a89 	vadd.f32	s9, s9, s18
 800b990:	ee34 3a43 	vsub.f32	s6, s8, s6
 800b994:	ee78 8a85 	vadd.f32	s17, s17, s10
 800b998:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b99c:	44c4      	add	ip, r8
 800b99e:	45e3      	cmp	fp, ip
 800b9a0:	edc3 3a00 	vstr	s7, [r3]
 800b9a4:	edc3 6a01 	vstr	s13, [r3, #4]
 800b9a8:	4456      	add	r6, sl
 800b9aa:	ed07 1a01 	vstr	s2, [r7, #-4]
 800b9ae:	edc7 0a00 	vstr	s1, [r7]
 800b9b2:	4453      	add	r3, sl
 800b9b4:	ed80 2a00 	vstr	s4, [r0]
 800b9b8:	edc0 2a01 	vstr	s5, [r0, #4]
 800b9bc:	4457      	add	r7, sl
 800b9be:	edc2 1a00 	vstr	s3, [r2]
 800b9c2:	ed82 7a01 	vstr	s14, [r2, #4]
 800b9c6:	4450      	add	r0, sl
 800b9c8:	ed85 8a00 	vstr	s16, [r5]
 800b9cc:	ed85 0a01 	vstr	s0, [r5, #4]
 800b9d0:	4452      	add	r2, sl
 800b9d2:	edc1 4a00 	vstr	s9, [r1]
 800b9d6:	4455      	add	r5, sl
 800b9d8:	ed81 3a01 	vstr	s6, [r1, #4]
 800b9dc:	edc4 8a00 	vstr	s17, [r4]
 800b9e0:	ed84 6a01 	vstr	s12, [r4, #4]
 800b9e4:	4451      	add	r1, sl
 800b9e6:	4454      	add	r4, sl
 800b9e8:	f63f aeea 	bhi.w	800b7c0 <arm_radix8_butterfly_f32+0x2fc>
 800b9ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9fa:	3308      	adds	r3, #8
 800b9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9fe:	9b08      	ldr	r3, [sp, #32]
 800ba00:	3308      	adds	r3, #8
 800ba02:	9308      	str	r3, [sp, #32]
 800ba04:	9b07      	ldr	r3, [sp, #28]
 800ba06:	3308      	adds	r3, #8
 800ba08:	9307      	str	r3, [sp, #28]
 800ba0a:	9b06      	ldr	r3, [sp, #24]
 800ba0c:	3308      	adds	r3, #8
 800ba0e:	9306      	str	r3, [sp, #24]
 800ba10:	9b05      	ldr	r3, [sp, #20]
 800ba12:	3308      	adds	r3, #8
 800ba14:	9305      	str	r3, [sp, #20]
 800ba16:	9b04      	ldr	r3, [sp, #16]
 800ba18:	3308      	adds	r3, #8
 800ba1a:	9304      	str	r3, [sp, #16]
 800ba1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba1e:	f109 0901 	add.w	r9, r9, #1
 800ba22:	454b      	cmp	r3, r9
 800ba24:	f47f ae7d 	bne.w	800b722 <arm_radix8_butterfly_f32+0x25e>
 800ba28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ba2a:	00db      	lsls	r3, r3, #3
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	46d9      	mov	r9, fp
 800ba30:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba32:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800ba36:	e554      	b.n	800b4e2 <arm_radix8_butterfly_f32+0x1e>
 800ba38:	b015      	add	sp, #84	@ 0x54
 800ba3a:	ecbd 8b10 	vpop	{d8-d15}
 800ba3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba42:	bf00      	nop

0800ba44 <__cvt>:
 800ba44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba48:	ec57 6b10 	vmov	r6, r7, d0
 800ba4c:	2f00      	cmp	r7, #0
 800ba4e:	460c      	mov	r4, r1
 800ba50:	4619      	mov	r1, r3
 800ba52:	463b      	mov	r3, r7
 800ba54:	bfbb      	ittet	lt
 800ba56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ba5a:	461f      	movlt	r7, r3
 800ba5c:	2300      	movge	r3, #0
 800ba5e:	232d      	movlt	r3, #45	@ 0x2d
 800ba60:	700b      	strb	r3, [r1, #0]
 800ba62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ba68:	4691      	mov	r9, r2
 800ba6a:	f023 0820 	bic.w	r8, r3, #32
 800ba6e:	bfbc      	itt	lt
 800ba70:	4632      	movlt	r2, r6
 800ba72:	4616      	movlt	r6, r2
 800ba74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ba78:	d005      	beq.n	800ba86 <__cvt+0x42>
 800ba7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ba7e:	d100      	bne.n	800ba82 <__cvt+0x3e>
 800ba80:	3401      	adds	r4, #1
 800ba82:	2102      	movs	r1, #2
 800ba84:	e000      	b.n	800ba88 <__cvt+0x44>
 800ba86:	2103      	movs	r1, #3
 800ba88:	ab03      	add	r3, sp, #12
 800ba8a:	9301      	str	r3, [sp, #4]
 800ba8c:	ab02      	add	r3, sp, #8
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	ec47 6b10 	vmov	d0, r6, r7
 800ba94:	4653      	mov	r3, sl
 800ba96:	4622      	mov	r2, r4
 800ba98:	f000 fe9e 	bl	800c7d8 <_dtoa_r>
 800ba9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800baa0:	4605      	mov	r5, r0
 800baa2:	d119      	bne.n	800bad8 <__cvt+0x94>
 800baa4:	f019 0f01 	tst.w	r9, #1
 800baa8:	d00e      	beq.n	800bac8 <__cvt+0x84>
 800baaa:	eb00 0904 	add.w	r9, r0, r4
 800baae:	2200      	movs	r2, #0
 800bab0:	2300      	movs	r3, #0
 800bab2:	4630      	mov	r0, r6
 800bab4:	4639      	mov	r1, r7
 800bab6:	f7f5 f82f 	bl	8000b18 <__aeabi_dcmpeq>
 800baba:	b108      	cbz	r0, 800bac0 <__cvt+0x7c>
 800babc:	f8cd 900c 	str.w	r9, [sp, #12]
 800bac0:	2230      	movs	r2, #48	@ 0x30
 800bac2:	9b03      	ldr	r3, [sp, #12]
 800bac4:	454b      	cmp	r3, r9
 800bac6:	d31e      	bcc.n	800bb06 <__cvt+0xc2>
 800bac8:	9b03      	ldr	r3, [sp, #12]
 800baca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bacc:	1b5b      	subs	r3, r3, r5
 800bace:	4628      	mov	r0, r5
 800bad0:	6013      	str	r3, [r2, #0]
 800bad2:	b004      	add	sp, #16
 800bad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bad8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800badc:	eb00 0904 	add.w	r9, r0, r4
 800bae0:	d1e5      	bne.n	800baae <__cvt+0x6a>
 800bae2:	7803      	ldrb	r3, [r0, #0]
 800bae4:	2b30      	cmp	r3, #48	@ 0x30
 800bae6:	d10a      	bne.n	800bafe <__cvt+0xba>
 800bae8:	2200      	movs	r2, #0
 800baea:	2300      	movs	r3, #0
 800baec:	4630      	mov	r0, r6
 800baee:	4639      	mov	r1, r7
 800baf0:	f7f5 f812 	bl	8000b18 <__aeabi_dcmpeq>
 800baf4:	b918      	cbnz	r0, 800bafe <__cvt+0xba>
 800baf6:	f1c4 0401 	rsb	r4, r4, #1
 800bafa:	f8ca 4000 	str.w	r4, [sl]
 800bafe:	f8da 3000 	ldr.w	r3, [sl]
 800bb02:	4499      	add	r9, r3
 800bb04:	e7d3      	b.n	800baae <__cvt+0x6a>
 800bb06:	1c59      	adds	r1, r3, #1
 800bb08:	9103      	str	r1, [sp, #12]
 800bb0a:	701a      	strb	r2, [r3, #0]
 800bb0c:	e7d9      	b.n	800bac2 <__cvt+0x7e>

0800bb0e <__exponent>:
 800bb0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb10:	2900      	cmp	r1, #0
 800bb12:	bfba      	itte	lt
 800bb14:	4249      	neglt	r1, r1
 800bb16:	232d      	movlt	r3, #45	@ 0x2d
 800bb18:	232b      	movge	r3, #43	@ 0x2b
 800bb1a:	2909      	cmp	r1, #9
 800bb1c:	7002      	strb	r2, [r0, #0]
 800bb1e:	7043      	strb	r3, [r0, #1]
 800bb20:	dd29      	ble.n	800bb76 <__exponent+0x68>
 800bb22:	f10d 0307 	add.w	r3, sp, #7
 800bb26:	461d      	mov	r5, r3
 800bb28:	270a      	movs	r7, #10
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	fbb1 f6f7 	udiv	r6, r1, r7
 800bb30:	fb07 1416 	mls	r4, r7, r6, r1
 800bb34:	3430      	adds	r4, #48	@ 0x30
 800bb36:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bb3a:	460c      	mov	r4, r1
 800bb3c:	2c63      	cmp	r4, #99	@ 0x63
 800bb3e:	f103 33ff 	add.w	r3, r3, #4294967295
 800bb42:	4631      	mov	r1, r6
 800bb44:	dcf1      	bgt.n	800bb2a <__exponent+0x1c>
 800bb46:	3130      	adds	r1, #48	@ 0x30
 800bb48:	1e94      	subs	r4, r2, #2
 800bb4a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bb4e:	1c41      	adds	r1, r0, #1
 800bb50:	4623      	mov	r3, r4
 800bb52:	42ab      	cmp	r3, r5
 800bb54:	d30a      	bcc.n	800bb6c <__exponent+0x5e>
 800bb56:	f10d 0309 	add.w	r3, sp, #9
 800bb5a:	1a9b      	subs	r3, r3, r2
 800bb5c:	42ac      	cmp	r4, r5
 800bb5e:	bf88      	it	hi
 800bb60:	2300      	movhi	r3, #0
 800bb62:	3302      	adds	r3, #2
 800bb64:	4403      	add	r3, r0
 800bb66:	1a18      	subs	r0, r3, r0
 800bb68:	b003      	add	sp, #12
 800bb6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb6c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bb70:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bb74:	e7ed      	b.n	800bb52 <__exponent+0x44>
 800bb76:	2330      	movs	r3, #48	@ 0x30
 800bb78:	3130      	adds	r1, #48	@ 0x30
 800bb7a:	7083      	strb	r3, [r0, #2]
 800bb7c:	70c1      	strb	r1, [r0, #3]
 800bb7e:	1d03      	adds	r3, r0, #4
 800bb80:	e7f1      	b.n	800bb66 <__exponent+0x58>
	...

0800bb84 <_printf_float>:
 800bb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb88:	b08d      	sub	sp, #52	@ 0x34
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bb90:	4616      	mov	r6, r2
 800bb92:	461f      	mov	r7, r3
 800bb94:	4605      	mov	r5, r0
 800bb96:	f000 fcbb 	bl	800c510 <_localeconv_r>
 800bb9a:	6803      	ldr	r3, [r0, #0]
 800bb9c:	9304      	str	r3, [sp, #16]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7f4 fb8e 	bl	80002c0 <strlen>
 800bba4:	2300      	movs	r3, #0
 800bba6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bba8:	f8d8 3000 	ldr.w	r3, [r8]
 800bbac:	9005      	str	r0, [sp, #20]
 800bbae:	3307      	adds	r3, #7
 800bbb0:	f023 0307 	bic.w	r3, r3, #7
 800bbb4:	f103 0208 	add.w	r2, r3, #8
 800bbb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bbbc:	f8d4 b000 	ldr.w	fp, [r4]
 800bbc0:	f8c8 2000 	str.w	r2, [r8]
 800bbc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bbc8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bbcc:	9307      	str	r3, [sp, #28]
 800bbce:	f8cd 8018 	str.w	r8, [sp, #24]
 800bbd2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bbd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbda:	4b9c      	ldr	r3, [pc, #624]	@ (800be4c <_printf_float+0x2c8>)
 800bbdc:	f04f 32ff 	mov.w	r2, #4294967295
 800bbe0:	f7f4 ffcc 	bl	8000b7c <__aeabi_dcmpun>
 800bbe4:	bb70      	cbnz	r0, 800bc44 <_printf_float+0xc0>
 800bbe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbea:	4b98      	ldr	r3, [pc, #608]	@ (800be4c <_printf_float+0x2c8>)
 800bbec:	f04f 32ff 	mov.w	r2, #4294967295
 800bbf0:	f7f4 ffa6 	bl	8000b40 <__aeabi_dcmple>
 800bbf4:	bb30      	cbnz	r0, 800bc44 <_printf_float+0xc0>
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	4649      	mov	r1, r9
 800bbfe:	f7f4 ff95 	bl	8000b2c <__aeabi_dcmplt>
 800bc02:	b110      	cbz	r0, 800bc0a <_printf_float+0x86>
 800bc04:	232d      	movs	r3, #45	@ 0x2d
 800bc06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc0a:	4a91      	ldr	r2, [pc, #580]	@ (800be50 <_printf_float+0x2cc>)
 800bc0c:	4b91      	ldr	r3, [pc, #580]	@ (800be54 <_printf_float+0x2d0>)
 800bc0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bc12:	bf94      	ite	ls
 800bc14:	4690      	movls	r8, r2
 800bc16:	4698      	movhi	r8, r3
 800bc18:	2303      	movs	r3, #3
 800bc1a:	6123      	str	r3, [r4, #16]
 800bc1c:	f02b 0304 	bic.w	r3, fp, #4
 800bc20:	6023      	str	r3, [r4, #0]
 800bc22:	f04f 0900 	mov.w	r9, #0
 800bc26:	9700      	str	r7, [sp, #0]
 800bc28:	4633      	mov	r3, r6
 800bc2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bc2c:	4621      	mov	r1, r4
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f000 f9d2 	bl	800bfd8 <_printf_common>
 800bc34:	3001      	adds	r0, #1
 800bc36:	f040 808d 	bne.w	800bd54 <_printf_float+0x1d0>
 800bc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3e:	b00d      	add	sp, #52	@ 0x34
 800bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc44:	4642      	mov	r2, r8
 800bc46:	464b      	mov	r3, r9
 800bc48:	4640      	mov	r0, r8
 800bc4a:	4649      	mov	r1, r9
 800bc4c:	f7f4 ff96 	bl	8000b7c <__aeabi_dcmpun>
 800bc50:	b140      	cbz	r0, 800bc64 <_printf_float+0xe0>
 800bc52:	464b      	mov	r3, r9
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	bfbc      	itt	lt
 800bc58:	232d      	movlt	r3, #45	@ 0x2d
 800bc5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bc5e:	4a7e      	ldr	r2, [pc, #504]	@ (800be58 <_printf_float+0x2d4>)
 800bc60:	4b7e      	ldr	r3, [pc, #504]	@ (800be5c <_printf_float+0x2d8>)
 800bc62:	e7d4      	b.n	800bc0e <_printf_float+0x8a>
 800bc64:	6863      	ldr	r3, [r4, #4]
 800bc66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bc6a:	9206      	str	r2, [sp, #24]
 800bc6c:	1c5a      	adds	r2, r3, #1
 800bc6e:	d13b      	bne.n	800bce8 <_printf_float+0x164>
 800bc70:	2306      	movs	r3, #6
 800bc72:	6063      	str	r3, [r4, #4]
 800bc74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bc78:	2300      	movs	r3, #0
 800bc7a:	6022      	str	r2, [r4, #0]
 800bc7c:	9303      	str	r3, [sp, #12]
 800bc7e:	ab0a      	add	r3, sp, #40	@ 0x28
 800bc80:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bc84:	ab09      	add	r3, sp, #36	@ 0x24
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	6861      	ldr	r1, [r4, #4]
 800bc8a:	ec49 8b10 	vmov	d0, r8, r9
 800bc8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bc92:	4628      	mov	r0, r5
 800bc94:	f7ff fed6 	bl	800ba44 <__cvt>
 800bc98:	9b06      	ldr	r3, [sp, #24]
 800bc9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc9c:	2b47      	cmp	r3, #71	@ 0x47
 800bc9e:	4680      	mov	r8, r0
 800bca0:	d129      	bne.n	800bcf6 <_printf_float+0x172>
 800bca2:	1cc8      	adds	r0, r1, #3
 800bca4:	db02      	blt.n	800bcac <_printf_float+0x128>
 800bca6:	6863      	ldr	r3, [r4, #4]
 800bca8:	4299      	cmp	r1, r3
 800bcaa:	dd41      	ble.n	800bd30 <_printf_float+0x1ac>
 800bcac:	f1aa 0a02 	sub.w	sl, sl, #2
 800bcb0:	fa5f fa8a 	uxtb.w	sl, sl
 800bcb4:	3901      	subs	r1, #1
 800bcb6:	4652      	mov	r2, sl
 800bcb8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bcbc:	9109      	str	r1, [sp, #36]	@ 0x24
 800bcbe:	f7ff ff26 	bl	800bb0e <__exponent>
 800bcc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcc4:	1813      	adds	r3, r2, r0
 800bcc6:	2a01      	cmp	r2, #1
 800bcc8:	4681      	mov	r9, r0
 800bcca:	6123      	str	r3, [r4, #16]
 800bccc:	dc02      	bgt.n	800bcd4 <_printf_float+0x150>
 800bcce:	6822      	ldr	r2, [r4, #0]
 800bcd0:	07d2      	lsls	r2, r2, #31
 800bcd2:	d501      	bpl.n	800bcd8 <_printf_float+0x154>
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	6123      	str	r3, [r4, #16]
 800bcd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d0a2      	beq.n	800bc26 <_printf_float+0xa2>
 800bce0:	232d      	movs	r3, #45	@ 0x2d
 800bce2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bce6:	e79e      	b.n	800bc26 <_printf_float+0xa2>
 800bce8:	9a06      	ldr	r2, [sp, #24]
 800bcea:	2a47      	cmp	r2, #71	@ 0x47
 800bcec:	d1c2      	bne.n	800bc74 <_printf_float+0xf0>
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1c0      	bne.n	800bc74 <_printf_float+0xf0>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e7bd      	b.n	800bc72 <_printf_float+0xee>
 800bcf6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bcfa:	d9db      	bls.n	800bcb4 <_printf_float+0x130>
 800bcfc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bd00:	d118      	bne.n	800bd34 <_printf_float+0x1b0>
 800bd02:	2900      	cmp	r1, #0
 800bd04:	6863      	ldr	r3, [r4, #4]
 800bd06:	dd0b      	ble.n	800bd20 <_printf_float+0x19c>
 800bd08:	6121      	str	r1, [r4, #16]
 800bd0a:	b913      	cbnz	r3, 800bd12 <_printf_float+0x18e>
 800bd0c:	6822      	ldr	r2, [r4, #0]
 800bd0e:	07d0      	lsls	r0, r2, #31
 800bd10:	d502      	bpl.n	800bd18 <_printf_float+0x194>
 800bd12:	3301      	adds	r3, #1
 800bd14:	440b      	add	r3, r1
 800bd16:	6123      	str	r3, [r4, #16]
 800bd18:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bd1a:	f04f 0900 	mov.w	r9, #0
 800bd1e:	e7db      	b.n	800bcd8 <_printf_float+0x154>
 800bd20:	b913      	cbnz	r3, 800bd28 <_printf_float+0x1a4>
 800bd22:	6822      	ldr	r2, [r4, #0]
 800bd24:	07d2      	lsls	r2, r2, #31
 800bd26:	d501      	bpl.n	800bd2c <_printf_float+0x1a8>
 800bd28:	3302      	adds	r3, #2
 800bd2a:	e7f4      	b.n	800bd16 <_printf_float+0x192>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e7f2      	b.n	800bd16 <_printf_float+0x192>
 800bd30:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bd34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd36:	4299      	cmp	r1, r3
 800bd38:	db05      	blt.n	800bd46 <_printf_float+0x1c2>
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	6121      	str	r1, [r4, #16]
 800bd3e:	07d8      	lsls	r0, r3, #31
 800bd40:	d5ea      	bpl.n	800bd18 <_printf_float+0x194>
 800bd42:	1c4b      	adds	r3, r1, #1
 800bd44:	e7e7      	b.n	800bd16 <_printf_float+0x192>
 800bd46:	2900      	cmp	r1, #0
 800bd48:	bfd4      	ite	le
 800bd4a:	f1c1 0202 	rsble	r2, r1, #2
 800bd4e:	2201      	movgt	r2, #1
 800bd50:	4413      	add	r3, r2
 800bd52:	e7e0      	b.n	800bd16 <_printf_float+0x192>
 800bd54:	6823      	ldr	r3, [r4, #0]
 800bd56:	055a      	lsls	r2, r3, #21
 800bd58:	d407      	bmi.n	800bd6a <_printf_float+0x1e6>
 800bd5a:	6923      	ldr	r3, [r4, #16]
 800bd5c:	4642      	mov	r2, r8
 800bd5e:	4631      	mov	r1, r6
 800bd60:	4628      	mov	r0, r5
 800bd62:	47b8      	blx	r7
 800bd64:	3001      	adds	r0, #1
 800bd66:	d12b      	bne.n	800bdc0 <_printf_float+0x23c>
 800bd68:	e767      	b.n	800bc3a <_printf_float+0xb6>
 800bd6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bd6e:	f240 80dd 	bls.w	800bf2c <_printf_float+0x3a8>
 800bd72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bd76:	2200      	movs	r2, #0
 800bd78:	2300      	movs	r3, #0
 800bd7a:	f7f4 fecd 	bl	8000b18 <__aeabi_dcmpeq>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d033      	beq.n	800bdea <_printf_float+0x266>
 800bd82:	4a37      	ldr	r2, [pc, #220]	@ (800be60 <_printf_float+0x2dc>)
 800bd84:	2301      	movs	r3, #1
 800bd86:	4631      	mov	r1, r6
 800bd88:	4628      	mov	r0, r5
 800bd8a:	47b8      	blx	r7
 800bd8c:	3001      	adds	r0, #1
 800bd8e:	f43f af54 	beq.w	800bc3a <_printf_float+0xb6>
 800bd92:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bd96:	4543      	cmp	r3, r8
 800bd98:	db02      	blt.n	800bda0 <_printf_float+0x21c>
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	07d8      	lsls	r0, r3, #31
 800bd9e:	d50f      	bpl.n	800bdc0 <_printf_float+0x23c>
 800bda0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bda4:	4631      	mov	r1, r6
 800bda6:	4628      	mov	r0, r5
 800bda8:	47b8      	blx	r7
 800bdaa:	3001      	adds	r0, #1
 800bdac:	f43f af45 	beq.w	800bc3a <_printf_float+0xb6>
 800bdb0:	f04f 0900 	mov.w	r9, #0
 800bdb4:	f108 38ff 	add.w	r8, r8, #4294967295
 800bdb8:	f104 0a1a 	add.w	sl, r4, #26
 800bdbc:	45c8      	cmp	r8, r9
 800bdbe:	dc09      	bgt.n	800bdd4 <_printf_float+0x250>
 800bdc0:	6823      	ldr	r3, [r4, #0]
 800bdc2:	079b      	lsls	r3, r3, #30
 800bdc4:	f100 8103 	bmi.w	800bfce <_printf_float+0x44a>
 800bdc8:	68e0      	ldr	r0, [r4, #12]
 800bdca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdcc:	4298      	cmp	r0, r3
 800bdce:	bfb8      	it	lt
 800bdd0:	4618      	movlt	r0, r3
 800bdd2:	e734      	b.n	800bc3e <_printf_float+0xba>
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	4652      	mov	r2, sl
 800bdd8:	4631      	mov	r1, r6
 800bdda:	4628      	mov	r0, r5
 800bddc:	47b8      	blx	r7
 800bdde:	3001      	adds	r0, #1
 800bde0:	f43f af2b 	beq.w	800bc3a <_printf_float+0xb6>
 800bde4:	f109 0901 	add.w	r9, r9, #1
 800bde8:	e7e8      	b.n	800bdbc <_printf_float+0x238>
 800bdea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	dc39      	bgt.n	800be64 <_printf_float+0x2e0>
 800bdf0:	4a1b      	ldr	r2, [pc, #108]	@ (800be60 <_printf_float+0x2dc>)
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	4631      	mov	r1, r6
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	47b8      	blx	r7
 800bdfa:	3001      	adds	r0, #1
 800bdfc:	f43f af1d 	beq.w	800bc3a <_printf_float+0xb6>
 800be00:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800be04:	ea59 0303 	orrs.w	r3, r9, r3
 800be08:	d102      	bne.n	800be10 <_printf_float+0x28c>
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	07d9      	lsls	r1, r3, #31
 800be0e:	d5d7      	bpl.n	800bdc0 <_printf_float+0x23c>
 800be10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be14:	4631      	mov	r1, r6
 800be16:	4628      	mov	r0, r5
 800be18:	47b8      	blx	r7
 800be1a:	3001      	adds	r0, #1
 800be1c:	f43f af0d 	beq.w	800bc3a <_printf_float+0xb6>
 800be20:	f04f 0a00 	mov.w	sl, #0
 800be24:	f104 0b1a 	add.w	fp, r4, #26
 800be28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be2a:	425b      	negs	r3, r3
 800be2c:	4553      	cmp	r3, sl
 800be2e:	dc01      	bgt.n	800be34 <_printf_float+0x2b0>
 800be30:	464b      	mov	r3, r9
 800be32:	e793      	b.n	800bd5c <_printf_float+0x1d8>
 800be34:	2301      	movs	r3, #1
 800be36:	465a      	mov	r2, fp
 800be38:	4631      	mov	r1, r6
 800be3a:	4628      	mov	r0, r5
 800be3c:	47b8      	blx	r7
 800be3e:	3001      	adds	r0, #1
 800be40:	f43f aefb 	beq.w	800bc3a <_printf_float+0xb6>
 800be44:	f10a 0a01 	add.w	sl, sl, #1
 800be48:	e7ee      	b.n	800be28 <_printf_float+0x2a4>
 800be4a:	bf00      	nop
 800be4c:	7fefffff 	.word	0x7fefffff
 800be50:	0800f498 	.word	0x0800f498
 800be54:	0800f49c 	.word	0x0800f49c
 800be58:	0800f4a0 	.word	0x0800f4a0
 800be5c:	0800f4a4 	.word	0x0800f4a4
 800be60:	0800f4a8 	.word	0x0800f4a8
 800be64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800be66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be6a:	4553      	cmp	r3, sl
 800be6c:	bfa8      	it	ge
 800be6e:	4653      	movge	r3, sl
 800be70:	2b00      	cmp	r3, #0
 800be72:	4699      	mov	r9, r3
 800be74:	dc36      	bgt.n	800bee4 <_printf_float+0x360>
 800be76:	f04f 0b00 	mov.w	fp, #0
 800be7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800be7e:	f104 021a 	add.w	r2, r4, #26
 800be82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800be84:	9306      	str	r3, [sp, #24]
 800be86:	eba3 0309 	sub.w	r3, r3, r9
 800be8a:	455b      	cmp	r3, fp
 800be8c:	dc31      	bgt.n	800bef2 <_printf_float+0x36e>
 800be8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be90:	459a      	cmp	sl, r3
 800be92:	dc3a      	bgt.n	800bf0a <_printf_float+0x386>
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	07da      	lsls	r2, r3, #31
 800be98:	d437      	bmi.n	800bf0a <_printf_float+0x386>
 800be9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be9c:	ebaa 0903 	sub.w	r9, sl, r3
 800bea0:	9b06      	ldr	r3, [sp, #24]
 800bea2:	ebaa 0303 	sub.w	r3, sl, r3
 800bea6:	4599      	cmp	r9, r3
 800bea8:	bfa8      	it	ge
 800beaa:	4699      	movge	r9, r3
 800beac:	f1b9 0f00 	cmp.w	r9, #0
 800beb0:	dc33      	bgt.n	800bf1a <_printf_float+0x396>
 800beb2:	f04f 0800 	mov.w	r8, #0
 800beb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800beba:	f104 0b1a 	add.w	fp, r4, #26
 800bebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bec0:	ebaa 0303 	sub.w	r3, sl, r3
 800bec4:	eba3 0309 	sub.w	r3, r3, r9
 800bec8:	4543      	cmp	r3, r8
 800beca:	f77f af79 	ble.w	800bdc0 <_printf_float+0x23c>
 800bece:	2301      	movs	r3, #1
 800bed0:	465a      	mov	r2, fp
 800bed2:	4631      	mov	r1, r6
 800bed4:	4628      	mov	r0, r5
 800bed6:	47b8      	blx	r7
 800bed8:	3001      	adds	r0, #1
 800beda:	f43f aeae 	beq.w	800bc3a <_printf_float+0xb6>
 800bede:	f108 0801 	add.w	r8, r8, #1
 800bee2:	e7ec      	b.n	800bebe <_printf_float+0x33a>
 800bee4:	4642      	mov	r2, r8
 800bee6:	4631      	mov	r1, r6
 800bee8:	4628      	mov	r0, r5
 800beea:	47b8      	blx	r7
 800beec:	3001      	adds	r0, #1
 800beee:	d1c2      	bne.n	800be76 <_printf_float+0x2f2>
 800bef0:	e6a3      	b.n	800bc3a <_printf_float+0xb6>
 800bef2:	2301      	movs	r3, #1
 800bef4:	4631      	mov	r1, r6
 800bef6:	4628      	mov	r0, r5
 800bef8:	9206      	str	r2, [sp, #24]
 800befa:	47b8      	blx	r7
 800befc:	3001      	adds	r0, #1
 800befe:	f43f ae9c 	beq.w	800bc3a <_printf_float+0xb6>
 800bf02:	9a06      	ldr	r2, [sp, #24]
 800bf04:	f10b 0b01 	add.w	fp, fp, #1
 800bf08:	e7bb      	b.n	800be82 <_printf_float+0x2fe>
 800bf0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf0e:	4631      	mov	r1, r6
 800bf10:	4628      	mov	r0, r5
 800bf12:	47b8      	blx	r7
 800bf14:	3001      	adds	r0, #1
 800bf16:	d1c0      	bne.n	800be9a <_printf_float+0x316>
 800bf18:	e68f      	b.n	800bc3a <_printf_float+0xb6>
 800bf1a:	9a06      	ldr	r2, [sp, #24]
 800bf1c:	464b      	mov	r3, r9
 800bf1e:	4442      	add	r2, r8
 800bf20:	4631      	mov	r1, r6
 800bf22:	4628      	mov	r0, r5
 800bf24:	47b8      	blx	r7
 800bf26:	3001      	adds	r0, #1
 800bf28:	d1c3      	bne.n	800beb2 <_printf_float+0x32e>
 800bf2a:	e686      	b.n	800bc3a <_printf_float+0xb6>
 800bf2c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bf30:	f1ba 0f01 	cmp.w	sl, #1
 800bf34:	dc01      	bgt.n	800bf3a <_printf_float+0x3b6>
 800bf36:	07db      	lsls	r3, r3, #31
 800bf38:	d536      	bpl.n	800bfa8 <_printf_float+0x424>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	4642      	mov	r2, r8
 800bf3e:	4631      	mov	r1, r6
 800bf40:	4628      	mov	r0, r5
 800bf42:	47b8      	blx	r7
 800bf44:	3001      	adds	r0, #1
 800bf46:	f43f ae78 	beq.w	800bc3a <_printf_float+0xb6>
 800bf4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf4e:	4631      	mov	r1, r6
 800bf50:	4628      	mov	r0, r5
 800bf52:	47b8      	blx	r7
 800bf54:	3001      	adds	r0, #1
 800bf56:	f43f ae70 	beq.w	800bc3a <_printf_float+0xb6>
 800bf5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2300      	movs	r3, #0
 800bf62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf66:	f7f4 fdd7 	bl	8000b18 <__aeabi_dcmpeq>
 800bf6a:	b9c0      	cbnz	r0, 800bf9e <_printf_float+0x41a>
 800bf6c:	4653      	mov	r3, sl
 800bf6e:	f108 0201 	add.w	r2, r8, #1
 800bf72:	4631      	mov	r1, r6
 800bf74:	4628      	mov	r0, r5
 800bf76:	47b8      	blx	r7
 800bf78:	3001      	adds	r0, #1
 800bf7a:	d10c      	bne.n	800bf96 <_printf_float+0x412>
 800bf7c:	e65d      	b.n	800bc3a <_printf_float+0xb6>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	465a      	mov	r2, fp
 800bf82:	4631      	mov	r1, r6
 800bf84:	4628      	mov	r0, r5
 800bf86:	47b8      	blx	r7
 800bf88:	3001      	adds	r0, #1
 800bf8a:	f43f ae56 	beq.w	800bc3a <_printf_float+0xb6>
 800bf8e:	f108 0801 	add.w	r8, r8, #1
 800bf92:	45d0      	cmp	r8, sl
 800bf94:	dbf3      	blt.n	800bf7e <_printf_float+0x3fa>
 800bf96:	464b      	mov	r3, r9
 800bf98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bf9c:	e6df      	b.n	800bd5e <_printf_float+0x1da>
 800bf9e:	f04f 0800 	mov.w	r8, #0
 800bfa2:	f104 0b1a 	add.w	fp, r4, #26
 800bfa6:	e7f4      	b.n	800bf92 <_printf_float+0x40e>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	4642      	mov	r2, r8
 800bfac:	e7e1      	b.n	800bf72 <_printf_float+0x3ee>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	464a      	mov	r2, r9
 800bfb2:	4631      	mov	r1, r6
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	47b8      	blx	r7
 800bfb8:	3001      	adds	r0, #1
 800bfba:	f43f ae3e 	beq.w	800bc3a <_printf_float+0xb6>
 800bfbe:	f108 0801 	add.w	r8, r8, #1
 800bfc2:	68e3      	ldr	r3, [r4, #12]
 800bfc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bfc6:	1a5b      	subs	r3, r3, r1
 800bfc8:	4543      	cmp	r3, r8
 800bfca:	dcf0      	bgt.n	800bfae <_printf_float+0x42a>
 800bfcc:	e6fc      	b.n	800bdc8 <_printf_float+0x244>
 800bfce:	f04f 0800 	mov.w	r8, #0
 800bfd2:	f104 0919 	add.w	r9, r4, #25
 800bfd6:	e7f4      	b.n	800bfc2 <_printf_float+0x43e>

0800bfd8 <_printf_common>:
 800bfd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfdc:	4616      	mov	r6, r2
 800bfde:	4698      	mov	r8, r3
 800bfe0:	688a      	ldr	r2, [r1, #8]
 800bfe2:	690b      	ldr	r3, [r1, #16]
 800bfe4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	bfb8      	it	lt
 800bfec:	4613      	movlt	r3, r2
 800bfee:	6033      	str	r3, [r6, #0]
 800bff0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bff4:	4607      	mov	r7, r0
 800bff6:	460c      	mov	r4, r1
 800bff8:	b10a      	cbz	r2, 800bffe <_printf_common+0x26>
 800bffa:	3301      	adds	r3, #1
 800bffc:	6033      	str	r3, [r6, #0]
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	0699      	lsls	r1, r3, #26
 800c002:	bf42      	ittt	mi
 800c004:	6833      	ldrmi	r3, [r6, #0]
 800c006:	3302      	addmi	r3, #2
 800c008:	6033      	strmi	r3, [r6, #0]
 800c00a:	6825      	ldr	r5, [r4, #0]
 800c00c:	f015 0506 	ands.w	r5, r5, #6
 800c010:	d106      	bne.n	800c020 <_printf_common+0x48>
 800c012:	f104 0a19 	add.w	sl, r4, #25
 800c016:	68e3      	ldr	r3, [r4, #12]
 800c018:	6832      	ldr	r2, [r6, #0]
 800c01a:	1a9b      	subs	r3, r3, r2
 800c01c:	42ab      	cmp	r3, r5
 800c01e:	dc26      	bgt.n	800c06e <_printf_common+0x96>
 800c020:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c024:	6822      	ldr	r2, [r4, #0]
 800c026:	3b00      	subs	r3, #0
 800c028:	bf18      	it	ne
 800c02a:	2301      	movne	r3, #1
 800c02c:	0692      	lsls	r2, r2, #26
 800c02e:	d42b      	bmi.n	800c088 <_printf_common+0xb0>
 800c030:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c034:	4641      	mov	r1, r8
 800c036:	4638      	mov	r0, r7
 800c038:	47c8      	blx	r9
 800c03a:	3001      	adds	r0, #1
 800c03c:	d01e      	beq.n	800c07c <_printf_common+0xa4>
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	6922      	ldr	r2, [r4, #16]
 800c042:	f003 0306 	and.w	r3, r3, #6
 800c046:	2b04      	cmp	r3, #4
 800c048:	bf02      	ittt	eq
 800c04a:	68e5      	ldreq	r5, [r4, #12]
 800c04c:	6833      	ldreq	r3, [r6, #0]
 800c04e:	1aed      	subeq	r5, r5, r3
 800c050:	68a3      	ldr	r3, [r4, #8]
 800c052:	bf0c      	ite	eq
 800c054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c058:	2500      	movne	r5, #0
 800c05a:	4293      	cmp	r3, r2
 800c05c:	bfc4      	itt	gt
 800c05e:	1a9b      	subgt	r3, r3, r2
 800c060:	18ed      	addgt	r5, r5, r3
 800c062:	2600      	movs	r6, #0
 800c064:	341a      	adds	r4, #26
 800c066:	42b5      	cmp	r5, r6
 800c068:	d11a      	bne.n	800c0a0 <_printf_common+0xc8>
 800c06a:	2000      	movs	r0, #0
 800c06c:	e008      	b.n	800c080 <_printf_common+0xa8>
 800c06e:	2301      	movs	r3, #1
 800c070:	4652      	mov	r2, sl
 800c072:	4641      	mov	r1, r8
 800c074:	4638      	mov	r0, r7
 800c076:	47c8      	blx	r9
 800c078:	3001      	adds	r0, #1
 800c07a:	d103      	bne.n	800c084 <_printf_common+0xac>
 800c07c:	f04f 30ff 	mov.w	r0, #4294967295
 800c080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c084:	3501      	adds	r5, #1
 800c086:	e7c6      	b.n	800c016 <_printf_common+0x3e>
 800c088:	18e1      	adds	r1, r4, r3
 800c08a:	1c5a      	adds	r2, r3, #1
 800c08c:	2030      	movs	r0, #48	@ 0x30
 800c08e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c092:	4422      	add	r2, r4
 800c094:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c098:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c09c:	3302      	adds	r3, #2
 800c09e:	e7c7      	b.n	800c030 <_printf_common+0x58>
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	4622      	mov	r2, r4
 800c0a4:	4641      	mov	r1, r8
 800c0a6:	4638      	mov	r0, r7
 800c0a8:	47c8      	blx	r9
 800c0aa:	3001      	adds	r0, #1
 800c0ac:	d0e6      	beq.n	800c07c <_printf_common+0xa4>
 800c0ae:	3601      	adds	r6, #1
 800c0b0:	e7d9      	b.n	800c066 <_printf_common+0x8e>
	...

0800c0b4 <_printf_i>:
 800c0b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b8:	7e0f      	ldrb	r7, [r1, #24]
 800c0ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c0bc:	2f78      	cmp	r7, #120	@ 0x78
 800c0be:	4691      	mov	r9, r2
 800c0c0:	4680      	mov	r8, r0
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	469a      	mov	sl, r3
 800c0c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c0ca:	d807      	bhi.n	800c0dc <_printf_i+0x28>
 800c0cc:	2f62      	cmp	r7, #98	@ 0x62
 800c0ce:	d80a      	bhi.n	800c0e6 <_printf_i+0x32>
 800c0d0:	2f00      	cmp	r7, #0
 800c0d2:	f000 80d2 	beq.w	800c27a <_printf_i+0x1c6>
 800c0d6:	2f58      	cmp	r7, #88	@ 0x58
 800c0d8:	f000 80b9 	beq.w	800c24e <_printf_i+0x19a>
 800c0dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c0e4:	e03a      	b.n	800c15c <_printf_i+0xa8>
 800c0e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c0ea:	2b15      	cmp	r3, #21
 800c0ec:	d8f6      	bhi.n	800c0dc <_printf_i+0x28>
 800c0ee:	a101      	add	r1, pc, #4	@ (adr r1, 800c0f4 <_printf_i+0x40>)
 800c0f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0f4:	0800c14d 	.word	0x0800c14d
 800c0f8:	0800c161 	.word	0x0800c161
 800c0fc:	0800c0dd 	.word	0x0800c0dd
 800c100:	0800c0dd 	.word	0x0800c0dd
 800c104:	0800c0dd 	.word	0x0800c0dd
 800c108:	0800c0dd 	.word	0x0800c0dd
 800c10c:	0800c161 	.word	0x0800c161
 800c110:	0800c0dd 	.word	0x0800c0dd
 800c114:	0800c0dd 	.word	0x0800c0dd
 800c118:	0800c0dd 	.word	0x0800c0dd
 800c11c:	0800c0dd 	.word	0x0800c0dd
 800c120:	0800c261 	.word	0x0800c261
 800c124:	0800c18b 	.word	0x0800c18b
 800c128:	0800c21b 	.word	0x0800c21b
 800c12c:	0800c0dd 	.word	0x0800c0dd
 800c130:	0800c0dd 	.word	0x0800c0dd
 800c134:	0800c283 	.word	0x0800c283
 800c138:	0800c0dd 	.word	0x0800c0dd
 800c13c:	0800c18b 	.word	0x0800c18b
 800c140:	0800c0dd 	.word	0x0800c0dd
 800c144:	0800c0dd 	.word	0x0800c0dd
 800c148:	0800c223 	.word	0x0800c223
 800c14c:	6833      	ldr	r3, [r6, #0]
 800c14e:	1d1a      	adds	r2, r3, #4
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	6032      	str	r2, [r6, #0]
 800c154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c158:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c15c:	2301      	movs	r3, #1
 800c15e:	e09d      	b.n	800c29c <_printf_i+0x1e8>
 800c160:	6833      	ldr	r3, [r6, #0]
 800c162:	6820      	ldr	r0, [r4, #0]
 800c164:	1d19      	adds	r1, r3, #4
 800c166:	6031      	str	r1, [r6, #0]
 800c168:	0606      	lsls	r6, r0, #24
 800c16a:	d501      	bpl.n	800c170 <_printf_i+0xbc>
 800c16c:	681d      	ldr	r5, [r3, #0]
 800c16e:	e003      	b.n	800c178 <_printf_i+0xc4>
 800c170:	0645      	lsls	r5, r0, #25
 800c172:	d5fb      	bpl.n	800c16c <_printf_i+0xb8>
 800c174:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c178:	2d00      	cmp	r5, #0
 800c17a:	da03      	bge.n	800c184 <_printf_i+0xd0>
 800c17c:	232d      	movs	r3, #45	@ 0x2d
 800c17e:	426d      	negs	r5, r5
 800c180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c184:	4859      	ldr	r0, [pc, #356]	@ (800c2ec <_printf_i+0x238>)
 800c186:	230a      	movs	r3, #10
 800c188:	e011      	b.n	800c1ae <_printf_i+0xfa>
 800c18a:	6821      	ldr	r1, [r4, #0]
 800c18c:	6833      	ldr	r3, [r6, #0]
 800c18e:	0608      	lsls	r0, r1, #24
 800c190:	f853 5b04 	ldr.w	r5, [r3], #4
 800c194:	d402      	bmi.n	800c19c <_printf_i+0xe8>
 800c196:	0649      	lsls	r1, r1, #25
 800c198:	bf48      	it	mi
 800c19a:	b2ad      	uxthmi	r5, r5
 800c19c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c19e:	4853      	ldr	r0, [pc, #332]	@ (800c2ec <_printf_i+0x238>)
 800c1a0:	6033      	str	r3, [r6, #0]
 800c1a2:	bf14      	ite	ne
 800c1a4:	230a      	movne	r3, #10
 800c1a6:	2308      	moveq	r3, #8
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c1ae:	6866      	ldr	r6, [r4, #4]
 800c1b0:	60a6      	str	r6, [r4, #8]
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	bfa2      	ittt	ge
 800c1b6:	6821      	ldrge	r1, [r4, #0]
 800c1b8:	f021 0104 	bicge.w	r1, r1, #4
 800c1bc:	6021      	strge	r1, [r4, #0]
 800c1be:	b90d      	cbnz	r5, 800c1c4 <_printf_i+0x110>
 800c1c0:	2e00      	cmp	r6, #0
 800c1c2:	d04b      	beq.n	800c25c <_printf_i+0x1a8>
 800c1c4:	4616      	mov	r6, r2
 800c1c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c1ca:	fb03 5711 	mls	r7, r3, r1, r5
 800c1ce:	5dc7      	ldrb	r7, [r0, r7]
 800c1d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c1d4:	462f      	mov	r7, r5
 800c1d6:	42bb      	cmp	r3, r7
 800c1d8:	460d      	mov	r5, r1
 800c1da:	d9f4      	bls.n	800c1c6 <_printf_i+0x112>
 800c1dc:	2b08      	cmp	r3, #8
 800c1de:	d10b      	bne.n	800c1f8 <_printf_i+0x144>
 800c1e0:	6823      	ldr	r3, [r4, #0]
 800c1e2:	07df      	lsls	r7, r3, #31
 800c1e4:	d508      	bpl.n	800c1f8 <_printf_i+0x144>
 800c1e6:	6923      	ldr	r3, [r4, #16]
 800c1e8:	6861      	ldr	r1, [r4, #4]
 800c1ea:	4299      	cmp	r1, r3
 800c1ec:	bfde      	ittt	le
 800c1ee:	2330      	movle	r3, #48	@ 0x30
 800c1f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c1f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c1f8:	1b92      	subs	r2, r2, r6
 800c1fa:	6122      	str	r2, [r4, #16]
 800c1fc:	f8cd a000 	str.w	sl, [sp]
 800c200:	464b      	mov	r3, r9
 800c202:	aa03      	add	r2, sp, #12
 800c204:	4621      	mov	r1, r4
 800c206:	4640      	mov	r0, r8
 800c208:	f7ff fee6 	bl	800bfd8 <_printf_common>
 800c20c:	3001      	adds	r0, #1
 800c20e:	d14a      	bne.n	800c2a6 <_printf_i+0x1f2>
 800c210:	f04f 30ff 	mov.w	r0, #4294967295
 800c214:	b004      	add	sp, #16
 800c216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	f043 0320 	orr.w	r3, r3, #32
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	4833      	ldr	r0, [pc, #204]	@ (800c2f0 <_printf_i+0x23c>)
 800c224:	2778      	movs	r7, #120	@ 0x78
 800c226:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	6831      	ldr	r1, [r6, #0]
 800c22e:	061f      	lsls	r7, r3, #24
 800c230:	f851 5b04 	ldr.w	r5, [r1], #4
 800c234:	d402      	bmi.n	800c23c <_printf_i+0x188>
 800c236:	065f      	lsls	r7, r3, #25
 800c238:	bf48      	it	mi
 800c23a:	b2ad      	uxthmi	r5, r5
 800c23c:	6031      	str	r1, [r6, #0]
 800c23e:	07d9      	lsls	r1, r3, #31
 800c240:	bf44      	itt	mi
 800c242:	f043 0320 	orrmi.w	r3, r3, #32
 800c246:	6023      	strmi	r3, [r4, #0]
 800c248:	b11d      	cbz	r5, 800c252 <_printf_i+0x19e>
 800c24a:	2310      	movs	r3, #16
 800c24c:	e7ac      	b.n	800c1a8 <_printf_i+0xf4>
 800c24e:	4827      	ldr	r0, [pc, #156]	@ (800c2ec <_printf_i+0x238>)
 800c250:	e7e9      	b.n	800c226 <_printf_i+0x172>
 800c252:	6823      	ldr	r3, [r4, #0]
 800c254:	f023 0320 	bic.w	r3, r3, #32
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	e7f6      	b.n	800c24a <_printf_i+0x196>
 800c25c:	4616      	mov	r6, r2
 800c25e:	e7bd      	b.n	800c1dc <_printf_i+0x128>
 800c260:	6833      	ldr	r3, [r6, #0]
 800c262:	6825      	ldr	r5, [r4, #0]
 800c264:	6961      	ldr	r1, [r4, #20]
 800c266:	1d18      	adds	r0, r3, #4
 800c268:	6030      	str	r0, [r6, #0]
 800c26a:	062e      	lsls	r6, r5, #24
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	d501      	bpl.n	800c274 <_printf_i+0x1c0>
 800c270:	6019      	str	r1, [r3, #0]
 800c272:	e002      	b.n	800c27a <_printf_i+0x1c6>
 800c274:	0668      	lsls	r0, r5, #25
 800c276:	d5fb      	bpl.n	800c270 <_printf_i+0x1bc>
 800c278:	8019      	strh	r1, [r3, #0]
 800c27a:	2300      	movs	r3, #0
 800c27c:	6123      	str	r3, [r4, #16]
 800c27e:	4616      	mov	r6, r2
 800c280:	e7bc      	b.n	800c1fc <_printf_i+0x148>
 800c282:	6833      	ldr	r3, [r6, #0]
 800c284:	1d1a      	adds	r2, r3, #4
 800c286:	6032      	str	r2, [r6, #0]
 800c288:	681e      	ldr	r6, [r3, #0]
 800c28a:	6862      	ldr	r2, [r4, #4]
 800c28c:	2100      	movs	r1, #0
 800c28e:	4630      	mov	r0, r6
 800c290:	f7f3 ffc6 	bl	8000220 <memchr>
 800c294:	b108      	cbz	r0, 800c29a <_printf_i+0x1e6>
 800c296:	1b80      	subs	r0, r0, r6
 800c298:	6060      	str	r0, [r4, #4]
 800c29a:	6863      	ldr	r3, [r4, #4]
 800c29c:	6123      	str	r3, [r4, #16]
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2a4:	e7aa      	b.n	800c1fc <_printf_i+0x148>
 800c2a6:	6923      	ldr	r3, [r4, #16]
 800c2a8:	4632      	mov	r2, r6
 800c2aa:	4649      	mov	r1, r9
 800c2ac:	4640      	mov	r0, r8
 800c2ae:	47d0      	blx	sl
 800c2b0:	3001      	adds	r0, #1
 800c2b2:	d0ad      	beq.n	800c210 <_printf_i+0x15c>
 800c2b4:	6823      	ldr	r3, [r4, #0]
 800c2b6:	079b      	lsls	r3, r3, #30
 800c2b8:	d413      	bmi.n	800c2e2 <_printf_i+0x22e>
 800c2ba:	68e0      	ldr	r0, [r4, #12]
 800c2bc:	9b03      	ldr	r3, [sp, #12]
 800c2be:	4298      	cmp	r0, r3
 800c2c0:	bfb8      	it	lt
 800c2c2:	4618      	movlt	r0, r3
 800c2c4:	e7a6      	b.n	800c214 <_printf_i+0x160>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	4632      	mov	r2, r6
 800c2ca:	4649      	mov	r1, r9
 800c2cc:	4640      	mov	r0, r8
 800c2ce:	47d0      	blx	sl
 800c2d0:	3001      	adds	r0, #1
 800c2d2:	d09d      	beq.n	800c210 <_printf_i+0x15c>
 800c2d4:	3501      	adds	r5, #1
 800c2d6:	68e3      	ldr	r3, [r4, #12]
 800c2d8:	9903      	ldr	r1, [sp, #12]
 800c2da:	1a5b      	subs	r3, r3, r1
 800c2dc:	42ab      	cmp	r3, r5
 800c2de:	dcf2      	bgt.n	800c2c6 <_printf_i+0x212>
 800c2e0:	e7eb      	b.n	800c2ba <_printf_i+0x206>
 800c2e2:	2500      	movs	r5, #0
 800c2e4:	f104 0619 	add.w	r6, r4, #25
 800c2e8:	e7f5      	b.n	800c2d6 <_printf_i+0x222>
 800c2ea:	bf00      	nop
 800c2ec:	0800f4aa 	.word	0x0800f4aa
 800c2f0:	0800f4bb 	.word	0x0800f4bb

0800c2f4 <std>:
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	b510      	push	{r4, lr}
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	e9c0 3300 	strd	r3, r3, [r0]
 800c2fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c302:	6083      	str	r3, [r0, #8]
 800c304:	8181      	strh	r1, [r0, #12]
 800c306:	6643      	str	r3, [r0, #100]	@ 0x64
 800c308:	81c2      	strh	r2, [r0, #14]
 800c30a:	6183      	str	r3, [r0, #24]
 800c30c:	4619      	mov	r1, r3
 800c30e:	2208      	movs	r2, #8
 800c310:	305c      	adds	r0, #92	@ 0x5c
 800c312:	f000 f8f4 	bl	800c4fe <memset>
 800c316:	4b0d      	ldr	r3, [pc, #52]	@ (800c34c <std+0x58>)
 800c318:	6263      	str	r3, [r4, #36]	@ 0x24
 800c31a:	4b0d      	ldr	r3, [pc, #52]	@ (800c350 <std+0x5c>)
 800c31c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c31e:	4b0d      	ldr	r3, [pc, #52]	@ (800c354 <std+0x60>)
 800c320:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c322:	4b0d      	ldr	r3, [pc, #52]	@ (800c358 <std+0x64>)
 800c324:	6323      	str	r3, [r4, #48]	@ 0x30
 800c326:	4b0d      	ldr	r3, [pc, #52]	@ (800c35c <std+0x68>)
 800c328:	6224      	str	r4, [r4, #32]
 800c32a:	429c      	cmp	r4, r3
 800c32c:	d006      	beq.n	800c33c <std+0x48>
 800c32e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c332:	4294      	cmp	r4, r2
 800c334:	d002      	beq.n	800c33c <std+0x48>
 800c336:	33d0      	adds	r3, #208	@ 0xd0
 800c338:	429c      	cmp	r4, r3
 800c33a:	d105      	bne.n	800c348 <std+0x54>
 800c33c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c344:	f000 b9ae 	b.w	800c6a4 <__retarget_lock_init_recursive>
 800c348:	bd10      	pop	{r4, pc}
 800c34a:	bf00      	nop
 800c34c:	0800c479 	.word	0x0800c479
 800c350:	0800c49b 	.word	0x0800c49b
 800c354:	0800c4d3 	.word	0x0800c4d3
 800c358:	0800c4f7 	.word	0x0800c4f7
 800c35c:	200077e8 	.word	0x200077e8

0800c360 <stdio_exit_handler>:
 800c360:	4a02      	ldr	r2, [pc, #8]	@ (800c36c <stdio_exit_handler+0xc>)
 800c362:	4903      	ldr	r1, [pc, #12]	@ (800c370 <stdio_exit_handler+0x10>)
 800c364:	4803      	ldr	r0, [pc, #12]	@ (800c374 <stdio_exit_handler+0x14>)
 800c366:	f000 b869 	b.w	800c43c <_fwalk_sglue>
 800c36a:	bf00      	nop
 800c36c:	20000410 	.word	0x20000410
 800c370:	0800dd6d 	.word	0x0800dd6d
 800c374:	20000420 	.word	0x20000420

0800c378 <cleanup_stdio>:
 800c378:	6841      	ldr	r1, [r0, #4]
 800c37a:	4b0c      	ldr	r3, [pc, #48]	@ (800c3ac <cleanup_stdio+0x34>)
 800c37c:	4299      	cmp	r1, r3
 800c37e:	b510      	push	{r4, lr}
 800c380:	4604      	mov	r4, r0
 800c382:	d001      	beq.n	800c388 <cleanup_stdio+0x10>
 800c384:	f001 fcf2 	bl	800dd6c <_fflush_r>
 800c388:	68a1      	ldr	r1, [r4, #8]
 800c38a:	4b09      	ldr	r3, [pc, #36]	@ (800c3b0 <cleanup_stdio+0x38>)
 800c38c:	4299      	cmp	r1, r3
 800c38e:	d002      	beq.n	800c396 <cleanup_stdio+0x1e>
 800c390:	4620      	mov	r0, r4
 800c392:	f001 fceb 	bl	800dd6c <_fflush_r>
 800c396:	68e1      	ldr	r1, [r4, #12]
 800c398:	4b06      	ldr	r3, [pc, #24]	@ (800c3b4 <cleanup_stdio+0x3c>)
 800c39a:	4299      	cmp	r1, r3
 800c39c:	d004      	beq.n	800c3a8 <cleanup_stdio+0x30>
 800c39e:	4620      	mov	r0, r4
 800c3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3a4:	f001 bce2 	b.w	800dd6c <_fflush_r>
 800c3a8:	bd10      	pop	{r4, pc}
 800c3aa:	bf00      	nop
 800c3ac:	200077e8 	.word	0x200077e8
 800c3b0:	20007850 	.word	0x20007850
 800c3b4:	200078b8 	.word	0x200078b8

0800c3b8 <global_stdio_init.part.0>:
 800c3b8:	b510      	push	{r4, lr}
 800c3ba:	4b0b      	ldr	r3, [pc, #44]	@ (800c3e8 <global_stdio_init.part.0+0x30>)
 800c3bc:	4c0b      	ldr	r4, [pc, #44]	@ (800c3ec <global_stdio_init.part.0+0x34>)
 800c3be:	4a0c      	ldr	r2, [pc, #48]	@ (800c3f0 <global_stdio_init.part.0+0x38>)
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	2104      	movs	r1, #4
 800c3c8:	f7ff ff94 	bl	800c2f4 <std>
 800c3cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	2109      	movs	r1, #9
 800c3d4:	f7ff ff8e 	bl	800c2f4 <std>
 800c3d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c3dc:	2202      	movs	r2, #2
 800c3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3e2:	2112      	movs	r1, #18
 800c3e4:	f7ff bf86 	b.w	800c2f4 <std>
 800c3e8:	20007920 	.word	0x20007920
 800c3ec:	200077e8 	.word	0x200077e8
 800c3f0:	0800c361 	.word	0x0800c361

0800c3f4 <__sfp_lock_acquire>:
 800c3f4:	4801      	ldr	r0, [pc, #4]	@ (800c3fc <__sfp_lock_acquire+0x8>)
 800c3f6:	f000 b956 	b.w	800c6a6 <__retarget_lock_acquire_recursive>
 800c3fa:	bf00      	nop
 800c3fc:	20007929 	.word	0x20007929

0800c400 <__sfp_lock_release>:
 800c400:	4801      	ldr	r0, [pc, #4]	@ (800c408 <__sfp_lock_release+0x8>)
 800c402:	f000 b951 	b.w	800c6a8 <__retarget_lock_release_recursive>
 800c406:	bf00      	nop
 800c408:	20007929 	.word	0x20007929

0800c40c <__sinit>:
 800c40c:	b510      	push	{r4, lr}
 800c40e:	4604      	mov	r4, r0
 800c410:	f7ff fff0 	bl	800c3f4 <__sfp_lock_acquire>
 800c414:	6a23      	ldr	r3, [r4, #32]
 800c416:	b11b      	cbz	r3, 800c420 <__sinit+0x14>
 800c418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c41c:	f7ff bff0 	b.w	800c400 <__sfp_lock_release>
 800c420:	4b04      	ldr	r3, [pc, #16]	@ (800c434 <__sinit+0x28>)
 800c422:	6223      	str	r3, [r4, #32]
 800c424:	4b04      	ldr	r3, [pc, #16]	@ (800c438 <__sinit+0x2c>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1f5      	bne.n	800c418 <__sinit+0xc>
 800c42c:	f7ff ffc4 	bl	800c3b8 <global_stdio_init.part.0>
 800c430:	e7f2      	b.n	800c418 <__sinit+0xc>
 800c432:	bf00      	nop
 800c434:	0800c379 	.word	0x0800c379
 800c438:	20007920 	.word	0x20007920

0800c43c <_fwalk_sglue>:
 800c43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c440:	4607      	mov	r7, r0
 800c442:	4688      	mov	r8, r1
 800c444:	4614      	mov	r4, r2
 800c446:	2600      	movs	r6, #0
 800c448:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c44c:	f1b9 0901 	subs.w	r9, r9, #1
 800c450:	d505      	bpl.n	800c45e <_fwalk_sglue+0x22>
 800c452:	6824      	ldr	r4, [r4, #0]
 800c454:	2c00      	cmp	r4, #0
 800c456:	d1f7      	bne.n	800c448 <_fwalk_sglue+0xc>
 800c458:	4630      	mov	r0, r6
 800c45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c45e:	89ab      	ldrh	r3, [r5, #12]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d907      	bls.n	800c474 <_fwalk_sglue+0x38>
 800c464:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c468:	3301      	adds	r3, #1
 800c46a:	d003      	beq.n	800c474 <_fwalk_sglue+0x38>
 800c46c:	4629      	mov	r1, r5
 800c46e:	4638      	mov	r0, r7
 800c470:	47c0      	blx	r8
 800c472:	4306      	orrs	r6, r0
 800c474:	3568      	adds	r5, #104	@ 0x68
 800c476:	e7e9      	b.n	800c44c <_fwalk_sglue+0x10>

0800c478 <__sread>:
 800c478:	b510      	push	{r4, lr}
 800c47a:	460c      	mov	r4, r1
 800c47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c480:	f000 f8c2 	bl	800c608 <_read_r>
 800c484:	2800      	cmp	r0, #0
 800c486:	bfab      	itete	ge
 800c488:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c48a:	89a3      	ldrhlt	r3, [r4, #12]
 800c48c:	181b      	addge	r3, r3, r0
 800c48e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c492:	bfac      	ite	ge
 800c494:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c496:	81a3      	strhlt	r3, [r4, #12]
 800c498:	bd10      	pop	{r4, pc}

0800c49a <__swrite>:
 800c49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c49e:	461f      	mov	r7, r3
 800c4a0:	898b      	ldrh	r3, [r1, #12]
 800c4a2:	05db      	lsls	r3, r3, #23
 800c4a4:	4605      	mov	r5, r0
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	4616      	mov	r6, r2
 800c4aa:	d505      	bpl.n	800c4b8 <__swrite+0x1e>
 800c4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4b0:	2302      	movs	r3, #2
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f000 f896 	bl	800c5e4 <_lseek_r>
 800c4b8:	89a3      	ldrh	r3, [r4, #12]
 800c4ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c4c2:	81a3      	strh	r3, [r4, #12]
 800c4c4:	4632      	mov	r2, r6
 800c4c6:	463b      	mov	r3, r7
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ce:	f000 b8ad 	b.w	800c62c <_write_r>

0800c4d2 <__sseek>:
 800c4d2:	b510      	push	{r4, lr}
 800c4d4:	460c      	mov	r4, r1
 800c4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4da:	f000 f883 	bl	800c5e4 <_lseek_r>
 800c4de:	1c43      	adds	r3, r0, #1
 800c4e0:	89a3      	ldrh	r3, [r4, #12]
 800c4e2:	bf15      	itete	ne
 800c4e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c4e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c4ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c4ee:	81a3      	strheq	r3, [r4, #12]
 800c4f0:	bf18      	it	ne
 800c4f2:	81a3      	strhne	r3, [r4, #12]
 800c4f4:	bd10      	pop	{r4, pc}

0800c4f6 <__sclose>:
 800c4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4fa:	f000 b80d 	b.w	800c518 <_close_r>

0800c4fe <memset>:
 800c4fe:	4402      	add	r2, r0
 800c500:	4603      	mov	r3, r0
 800c502:	4293      	cmp	r3, r2
 800c504:	d100      	bne.n	800c508 <memset+0xa>
 800c506:	4770      	bx	lr
 800c508:	f803 1b01 	strb.w	r1, [r3], #1
 800c50c:	e7f9      	b.n	800c502 <memset+0x4>
	...

0800c510 <_localeconv_r>:
 800c510:	4800      	ldr	r0, [pc, #0]	@ (800c514 <_localeconv_r+0x4>)
 800c512:	4770      	bx	lr
 800c514:	2000055c 	.word	0x2000055c

0800c518 <_close_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4d06      	ldr	r5, [pc, #24]	@ (800c534 <_close_r+0x1c>)
 800c51c:	2300      	movs	r3, #0
 800c51e:	4604      	mov	r4, r0
 800c520:	4608      	mov	r0, r1
 800c522:	602b      	str	r3, [r5, #0]
 800c524:	f7f5 fcda 	bl	8001edc <_close>
 800c528:	1c43      	adds	r3, r0, #1
 800c52a:	d102      	bne.n	800c532 <_close_r+0x1a>
 800c52c:	682b      	ldr	r3, [r5, #0]
 800c52e:	b103      	cbz	r3, 800c532 <_close_r+0x1a>
 800c530:	6023      	str	r3, [r4, #0]
 800c532:	bd38      	pop	{r3, r4, r5, pc}
 800c534:	20007924 	.word	0x20007924

0800c538 <_reclaim_reent>:
 800c538:	4b29      	ldr	r3, [pc, #164]	@ (800c5e0 <_reclaim_reent+0xa8>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4283      	cmp	r3, r0
 800c53e:	b570      	push	{r4, r5, r6, lr}
 800c540:	4604      	mov	r4, r0
 800c542:	d04b      	beq.n	800c5dc <_reclaim_reent+0xa4>
 800c544:	69c3      	ldr	r3, [r0, #28]
 800c546:	b1ab      	cbz	r3, 800c574 <_reclaim_reent+0x3c>
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	b16b      	cbz	r3, 800c568 <_reclaim_reent+0x30>
 800c54c:	2500      	movs	r5, #0
 800c54e:	69e3      	ldr	r3, [r4, #28]
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	5959      	ldr	r1, [r3, r5]
 800c554:	2900      	cmp	r1, #0
 800c556:	d13b      	bne.n	800c5d0 <_reclaim_reent+0x98>
 800c558:	3504      	adds	r5, #4
 800c55a:	2d80      	cmp	r5, #128	@ 0x80
 800c55c:	d1f7      	bne.n	800c54e <_reclaim_reent+0x16>
 800c55e:	69e3      	ldr	r3, [r4, #28]
 800c560:	4620      	mov	r0, r4
 800c562:	68d9      	ldr	r1, [r3, #12]
 800c564:	f000 fefc 	bl	800d360 <_free_r>
 800c568:	69e3      	ldr	r3, [r4, #28]
 800c56a:	6819      	ldr	r1, [r3, #0]
 800c56c:	b111      	cbz	r1, 800c574 <_reclaim_reent+0x3c>
 800c56e:	4620      	mov	r0, r4
 800c570:	f000 fef6 	bl	800d360 <_free_r>
 800c574:	6961      	ldr	r1, [r4, #20]
 800c576:	b111      	cbz	r1, 800c57e <_reclaim_reent+0x46>
 800c578:	4620      	mov	r0, r4
 800c57a:	f000 fef1 	bl	800d360 <_free_r>
 800c57e:	69e1      	ldr	r1, [r4, #28]
 800c580:	b111      	cbz	r1, 800c588 <_reclaim_reent+0x50>
 800c582:	4620      	mov	r0, r4
 800c584:	f000 feec 	bl	800d360 <_free_r>
 800c588:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c58a:	b111      	cbz	r1, 800c592 <_reclaim_reent+0x5a>
 800c58c:	4620      	mov	r0, r4
 800c58e:	f000 fee7 	bl	800d360 <_free_r>
 800c592:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c594:	b111      	cbz	r1, 800c59c <_reclaim_reent+0x64>
 800c596:	4620      	mov	r0, r4
 800c598:	f000 fee2 	bl	800d360 <_free_r>
 800c59c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c59e:	b111      	cbz	r1, 800c5a6 <_reclaim_reent+0x6e>
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f000 fedd 	bl	800d360 <_free_r>
 800c5a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c5a8:	b111      	cbz	r1, 800c5b0 <_reclaim_reent+0x78>
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f000 fed8 	bl	800d360 <_free_r>
 800c5b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c5b2:	b111      	cbz	r1, 800c5ba <_reclaim_reent+0x82>
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	f000 fed3 	bl	800d360 <_free_r>
 800c5ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c5bc:	b111      	cbz	r1, 800c5c4 <_reclaim_reent+0x8c>
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f000 fece 	bl	800d360 <_free_r>
 800c5c4:	6a23      	ldr	r3, [r4, #32]
 800c5c6:	b14b      	cbz	r3, 800c5dc <_reclaim_reent+0xa4>
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5ce:	4718      	bx	r3
 800c5d0:	680e      	ldr	r6, [r1, #0]
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f000 fec4 	bl	800d360 <_free_r>
 800c5d8:	4631      	mov	r1, r6
 800c5da:	e7bb      	b.n	800c554 <_reclaim_reent+0x1c>
 800c5dc:	bd70      	pop	{r4, r5, r6, pc}
 800c5de:	bf00      	nop
 800c5e0:	2000041c 	.word	0x2000041c

0800c5e4 <_lseek_r>:
 800c5e4:	b538      	push	{r3, r4, r5, lr}
 800c5e6:	4d07      	ldr	r5, [pc, #28]	@ (800c604 <_lseek_r+0x20>)
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	4608      	mov	r0, r1
 800c5ec:	4611      	mov	r1, r2
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	602a      	str	r2, [r5, #0]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	f7f5 fc99 	bl	8001f2a <_lseek>
 800c5f8:	1c43      	adds	r3, r0, #1
 800c5fa:	d102      	bne.n	800c602 <_lseek_r+0x1e>
 800c5fc:	682b      	ldr	r3, [r5, #0]
 800c5fe:	b103      	cbz	r3, 800c602 <_lseek_r+0x1e>
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	bd38      	pop	{r3, r4, r5, pc}
 800c604:	20007924 	.word	0x20007924

0800c608 <_read_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	4d07      	ldr	r5, [pc, #28]	@ (800c628 <_read_r+0x20>)
 800c60c:	4604      	mov	r4, r0
 800c60e:	4608      	mov	r0, r1
 800c610:	4611      	mov	r1, r2
 800c612:	2200      	movs	r2, #0
 800c614:	602a      	str	r2, [r5, #0]
 800c616:	461a      	mov	r2, r3
 800c618:	f7f5 fc27 	bl	8001e6a <_read>
 800c61c:	1c43      	adds	r3, r0, #1
 800c61e:	d102      	bne.n	800c626 <_read_r+0x1e>
 800c620:	682b      	ldr	r3, [r5, #0]
 800c622:	b103      	cbz	r3, 800c626 <_read_r+0x1e>
 800c624:	6023      	str	r3, [r4, #0]
 800c626:	bd38      	pop	{r3, r4, r5, pc}
 800c628:	20007924 	.word	0x20007924

0800c62c <_write_r>:
 800c62c:	b538      	push	{r3, r4, r5, lr}
 800c62e:	4d07      	ldr	r5, [pc, #28]	@ (800c64c <_write_r+0x20>)
 800c630:	4604      	mov	r4, r0
 800c632:	4608      	mov	r0, r1
 800c634:	4611      	mov	r1, r2
 800c636:	2200      	movs	r2, #0
 800c638:	602a      	str	r2, [r5, #0]
 800c63a:	461a      	mov	r2, r3
 800c63c:	f7f5 fc32 	bl	8001ea4 <_write>
 800c640:	1c43      	adds	r3, r0, #1
 800c642:	d102      	bne.n	800c64a <_write_r+0x1e>
 800c644:	682b      	ldr	r3, [r5, #0]
 800c646:	b103      	cbz	r3, 800c64a <_write_r+0x1e>
 800c648:	6023      	str	r3, [r4, #0]
 800c64a:	bd38      	pop	{r3, r4, r5, pc}
 800c64c:	20007924 	.word	0x20007924

0800c650 <__errno>:
 800c650:	4b01      	ldr	r3, [pc, #4]	@ (800c658 <__errno+0x8>)
 800c652:	6818      	ldr	r0, [r3, #0]
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	2000041c 	.word	0x2000041c

0800c65c <__libc_init_array>:
 800c65c:	b570      	push	{r4, r5, r6, lr}
 800c65e:	4d0d      	ldr	r5, [pc, #52]	@ (800c694 <__libc_init_array+0x38>)
 800c660:	4c0d      	ldr	r4, [pc, #52]	@ (800c698 <__libc_init_array+0x3c>)
 800c662:	1b64      	subs	r4, r4, r5
 800c664:	10a4      	asrs	r4, r4, #2
 800c666:	2600      	movs	r6, #0
 800c668:	42a6      	cmp	r6, r4
 800c66a:	d109      	bne.n	800c680 <__libc_init_array+0x24>
 800c66c:	4d0b      	ldr	r5, [pc, #44]	@ (800c69c <__libc_init_array+0x40>)
 800c66e:	4c0c      	ldr	r4, [pc, #48]	@ (800c6a0 <__libc_init_array+0x44>)
 800c670:	f002 f85c 	bl	800e72c <_init>
 800c674:	1b64      	subs	r4, r4, r5
 800c676:	10a4      	asrs	r4, r4, #2
 800c678:	2600      	movs	r6, #0
 800c67a:	42a6      	cmp	r6, r4
 800c67c:	d105      	bne.n	800c68a <__libc_init_array+0x2e>
 800c67e:	bd70      	pop	{r4, r5, r6, pc}
 800c680:	f855 3b04 	ldr.w	r3, [r5], #4
 800c684:	4798      	blx	r3
 800c686:	3601      	adds	r6, #1
 800c688:	e7ee      	b.n	800c668 <__libc_init_array+0xc>
 800c68a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c68e:	4798      	blx	r3
 800c690:	3601      	adds	r6, #1
 800c692:	e7f2      	b.n	800c67a <__libc_init_array+0x1e>
 800c694:	0800f848 	.word	0x0800f848
 800c698:	0800f848 	.word	0x0800f848
 800c69c:	0800f848 	.word	0x0800f848
 800c6a0:	0800f84c 	.word	0x0800f84c

0800c6a4 <__retarget_lock_init_recursive>:
 800c6a4:	4770      	bx	lr

0800c6a6 <__retarget_lock_acquire_recursive>:
 800c6a6:	4770      	bx	lr

0800c6a8 <__retarget_lock_release_recursive>:
 800c6a8:	4770      	bx	lr

0800c6aa <memcpy>:
 800c6aa:	440a      	add	r2, r1
 800c6ac:	4291      	cmp	r1, r2
 800c6ae:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6b2:	d100      	bne.n	800c6b6 <memcpy+0xc>
 800c6b4:	4770      	bx	lr
 800c6b6:	b510      	push	{r4, lr}
 800c6b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6c0:	4291      	cmp	r1, r2
 800c6c2:	d1f9      	bne.n	800c6b8 <memcpy+0xe>
 800c6c4:	bd10      	pop	{r4, pc}

0800c6c6 <quorem>:
 800c6c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ca:	6903      	ldr	r3, [r0, #16]
 800c6cc:	690c      	ldr	r4, [r1, #16]
 800c6ce:	42a3      	cmp	r3, r4
 800c6d0:	4607      	mov	r7, r0
 800c6d2:	db7e      	blt.n	800c7d2 <quorem+0x10c>
 800c6d4:	3c01      	subs	r4, #1
 800c6d6:	f101 0814 	add.w	r8, r1, #20
 800c6da:	00a3      	lsls	r3, r4, #2
 800c6dc:	f100 0514 	add.w	r5, r0, #20
 800c6e0:	9300      	str	r3, [sp, #0]
 800c6e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6e6:	9301      	str	r3, [sp, #4]
 800c6e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c6ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c6f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c6fc:	d32e      	bcc.n	800c75c <quorem+0x96>
 800c6fe:	f04f 0a00 	mov.w	sl, #0
 800c702:	46c4      	mov	ip, r8
 800c704:	46ae      	mov	lr, r5
 800c706:	46d3      	mov	fp, sl
 800c708:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c70c:	b298      	uxth	r0, r3
 800c70e:	fb06 a000 	mla	r0, r6, r0, sl
 800c712:	0c02      	lsrs	r2, r0, #16
 800c714:	0c1b      	lsrs	r3, r3, #16
 800c716:	fb06 2303 	mla	r3, r6, r3, r2
 800c71a:	f8de 2000 	ldr.w	r2, [lr]
 800c71e:	b280      	uxth	r0, r0
 800c720:	b292      	uxth	r2, r2
 800c722:	1a12      	subs	r2, r2, r0
 800c724:	445a      	add	r2, fp
 800c726:	f8de 0000 	ldr.w	r0, [lr]
 800c72a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c72e:	b29b      	uxth	r3, r3
 800c730:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c734:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c738:	b292      	uxth	r2, r2
 800c73a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c73e:	45e1      	cmp	r9, ip
 800c740:	f84e 2b04 	str.w	r2, [lr], #4
 800c744:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c748:	d2de      	bcs.n	800c708 <quorem+0x42>
 800c74a:	9b00      	ldr	r3, [sp, #0]
 800c74c:	58eb      	ldr	r3, [r5, r3]
 800c74e:	b92b      	cbnz	r3, 800c75c <quorem+0x96>
 800c750:	9b01      	ldr	r3, [sp, #4]
 800c752:	3b04      	subs	r3, #4
 800c754:	429d      	cmp	r5, r3
 800c756:	461a      	mov	r2, r3
 800c758:	d32f      	bcc.n	800c7ba <quorem+0xf4>
 800c75a:	613c      	str	r4, [r7, #16]
 800c75c:	4638      	mov	r0, r7
 800c75e:	f001 f979 	bl	800da54 <__mcmp>
 800c762:	2800      	cmp	r0, #0
 800c764:	db25      	blt.n	800c7b2 <quorem+0xec>
 800c766:	4629      	mov	r1, r5
 800c768:	2000      	movs	r0, #0
 800c76a:	f858 2b04 	ldr.w	r2, [r8], #4
 800c76e:	f8d1 c000 	ldr.w	ip, [r1]
 800c772:	fa1f fe82 	uxth.w	lr, r2
 800c776:	fa1f f38c 	uxth.w	r3, ip
 800c77a:	eba3 030e 	sub.w	r3, r3, lr
 800c77e:	4403      	add	r3, r0
 800c780:	0c12      	lsrs	r2, r2, #16
 800c782:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c786:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c790:	45c1      	cmp	r9, r8
 800c792:	f841 3b04 	str.w	r3, [r1], #4
 800c796:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c79a:	d2e6      	bcs.n	800c76a <quorem+0xa4>
 800c79c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c7a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c7a4:	b922      	cbnz	r2, 800c7b0 <quorem+0xea>
 800c7a6:	3b04      	subs	r3, #4
 800c7a8:	429d      	cmp	r5, r3
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	d30b      	bcc.n	800c7c6 <quorem+0x100>
 800c7ae:	613c      	str	r4, [r7, #16]
 800c7b0:	3601      	adds	r6, #1
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	b003      	add	sp, #12
 800c7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ba:	6812      	ldr	r2, [r2, #0]
 800c7bc:	3b04      	subs	r3, #4
 800c7be:	2a00      	cmp	r2, #0
 800c7c0:	d1cb      	bne.n	800c75a <quorem+0x94>
 800c7c2:	3c01      	subs	r4, #1
 800c7c4:	e7c6      	b.n	800c754 <quorem+0x8e>
 800c7c6:	6812      	ldr	r2, [r2, #0]
 800c7c8:	3b04      	subs	r3, #4
 800c7ca:	2a00      	cmp	r2, #0
 800c7cc:	d1ef      	bne.n	800c7ae <quorem+0xe8>
 800c7ce:	3c01      	subs	r4, #1
 800c7d0:	e7ea      	b.n	800c7a8 <quorem+0xe2>
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	e7ee      	b.n	800c7b4 <quorem+0xee>
	...

0800c7d8 <_dtoa_r>:
 800c7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7dc:	69c7      	ldr	r7, [r0, #28]
 800c7de:	b099      	sub	sp, #100	@ 0x64
 800c7e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c7e4:	ec55 4b10 	vmov	r4, r5, d0
 800c7e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c7ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800c7ec:	4683      	mov	fp, r0
 800c7ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800c7f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c7f2:	b97f      	cbnz	r7, 800c814 <_dtoa_r+0x3c>
 800c7f4:	2010      	movs	r0, #16
 800c7f6:	f000 fdfd 	bl	800d3f4 <malloc>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	f8cb 001c 	str.w	r0, [fp, #28]
 800c800:	b920      	cbnz	r0, 800c80c <_dtoa_r+0x34>
 800c802:	4ba7      	ldr	r3, [pc, #668]	@ (800caa0 <_dtoa_r+0x2c8>)
 800c804:	21ef      	movs	r1, #239	@ 0xef
 800c806:	48a7      	ldr	r0, [pc, #668]	@ (800caa4 <_dtoa_r+0x2cc>)
 800c808:	f001 fae8 	bl	800dddc <__assert_func>
 800c80c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c810:	6007      	str	r7, [r0, #0]
 800c812:	60c7      	str	r7, [r0, #12]
 800c814:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c818:	6819      	ldr	r1, [r3, #0]
 800c81a:	b159      	cbz	r1, 800c834 <_dtoa_r+0x5c>
 800c81c:	685a      	ldr	r2, [r3, #4]
 800c81e:	604a      	str	r2, [r1, #4]
 800c820:	2301      	movs	r3, #1
 800c822:	4093      	lsls	r3, r2
 800c824:	608b      	str	r3, [r1, #8]
 800c826:	4658      	mov	r0, fp
 800c828:	f000 feda 	bl	800d5e0 <_Bfree>
 800c82c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c830:	2200      	movs	r2, #0
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	1e2b      	subs	r3, r5, #0
 800c836:	bfb9      	ittee	lt
 800c838:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c83c:	9303      	strlt	r3, [sp, #12]
 800c83e:	2300      	movge	r3, #0
 800c840:	6033      	strge	r3, [r6, #0]
 800c842:	9f03      	ldr	r7, [sp, #12]
 800c844:	4b98      	ldr	r3, [pc, #608]	@ (800caa8 <_dtoa_r+0x2d0>)
 800c846:	bfbc      	itt	lt
 800c848:	2201      	movlt	r2, #1
 800c84a:	6032      	strlt	r2, [r6, #0]
 800c84c:	43bb      	bics	r3, r7
 800c84e:	d112      	bne.n	800c876 <_dtoa_r+0x9e>
 800c850:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c852:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c856:	6013      	str	r3, [r2, #0]
 800c858:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c85c:	4323      	orrs	r3, r4
 800c85e:	f000 854d 	beq.w	800d2fc <_dtoa_r+0xb24>
 800c862:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c864:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cabc <_dtoa_r+0x2e4>
 800c868:	2b00      	cmp	r3, #0
 800c86a:	f000 854f 	beq.w	800d30c <_dtoa_r+0xb34>
 800c86e:	f10a 0303 	add.w	r3, sl, #3
 800c872:	f000 bd49 	b.w	800d308 <_dtoa_r+0xb30>
 800c876:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c87a:	2200      	movs	r2, #0
 800c87c:	ec51 0b17 	vmov	r0, r1, d7
 800c880:	2300      	movs	r3, #0
 800c882:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c886:	f7f4 f947 	bl	8000b18 <__aeabi_dcmpeq>
 800c88a:	4680      	mov	r8, r0
 800c88c:	b158      	cbz	r0, 800c8a6 <_dtoa_r+0xce>
 800c88e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c890:	2301      	movs	r3, #1
 800c892:	6013      	str	r3, [r2, #0]
 800c894:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c896:	b113      	cbz	r3, 800c89e <_dtoa_r+0xc6>
 800c898:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c89a:	4b84      	ldr	r3, [pc, #528]	@ (800caac <_dtoa_r+0x2d4>)
 800c89c:	6013      	str	r3, [r2, #0]
 800c89e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cac0 <_dtoa_r+0x2e8>
 800c8a2:	f000 bd33 	b.w	800d30c <_dtoa_r+0xb34>
 800c8a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c8aa:	aa16      	add	r2, sp, #88	@ 0x58
 800c8ac:	a917      	add	r1, sp, #92	@ 0x5c
 800c8ae:	4658      	mov	r0, fp
 800c8b0:	f001 f980 	bl	800dbb4 <__d2b>
 800c8b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c8b8:	4681      	mov	r9, r0
 800c8ba:	2e00      	cmp	r6, #0
 800c8bc:	d077      	beq.n	800c9ae <_dtoa_r+0x1d6>
 800c8be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c8c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c8c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c8d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c8d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c8d8:	4619      	mov	r1, r3
 800c8da:	2200      	movs	r2, #0
 800c8dc:	4b74      	ldr	r3, [pc, #464]	@ (800cab0 <_dtoa_r+0x2d8>)
 800c8de:	f7f3 fcfb 	bl	80002d8 <__aeabi_dsub>
 800c8e2:	a369      	add	r3, pc, #420	@ (adr r3, 800ca88 <_dtoa_r+0x2b0>)
 800c8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e8:	f7f3 feae 	bl	8000648 <__aeabi_dmul>
 800c8ec:	a368      	add	r3, pc, #416	@ (adr r3, 800ca90 <_dtoa_r+0x2b8>)
 800c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f2:	f7f3 fcf3 	bl	80002dc <__adddf3>
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	460d      	mov	r5, r1
 800c8fc:	f7f3 fe3a 	bl	8000574 <__aeabi_i2d>
 800c900:	a365      	add	r3, pc, #404	@ (adr r3, 800ca98 <_dtoa_r+0x2c0>)
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	f7f3 fe9f 	bl	8000648 <__aeabi_dmul>
 800c90a:	4602      	mov	r2, r0
 800c90c:	460b      	mov	r3, r1
 800c90e:	4620      	mov	r0, r4
 800c910:	4629      	mov	r1, r5
 800c912:	f7f3 fce3 	bl	80002dc <__adddf3>
 800c916:	4604      	mov	r4, r0
 800c918:	460d      	mov	r5, r1
 800c91a:	f7f4 f945 	bl	8000ba8 <__aeabi_d2iz>
 800c91e:	2200      	movs	r2, #0
 800c920:	4607      	mov	r7, r0
 800c922:	2300      	movs	r3, #0
 800c924:	4620      	mov	r0, r4
 800c926:	4629      	mov	r1, r5
 800c928:	f7f4 f900 	bl	8000b2c <__aeabi_dcmplt>
 800c92c:	b140      	cbz	r0, 800c940 <_dtoa_r+0x168>
 800c92e:	4638      	mov	r0, r7
 800c930:	f7f3 fe20 	bl	8000574 <__aeabi_i2d>
 800c934:	4622      	mov	r2, r4
 800c936:	462b      	mov	r3, r5
 800c938:	f7f4 f8ee 	bl	8000b18 <__aeabi_dcmpeq>
 800c93c:	b900      	cbnz	r0, 800c940 <_dtoa_r+0x168>
 800c93e:	3f01      	subs	r7, #1
 800c940:	2f16      	cmp	r7, #22
 800c942:	d851      	bhi.n	800c9e8 <_dtoa_r+0x210>
 800c944:	4b5b      	ldr	r3, [pc, #364]	@ (800cab4 <_dtoa_r+0x2dc>)
 800c946:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c952:	f7f4 f8eb 	bl	8000b2c <__aeabi_dcmplt>
 800c956:	2800      	cmp	r0, #0
 800c958:	d048      	beq.n	800c9ec <_dtoa_r+0x214>
 800c95a:	3f01      	subs	r7, #1
 800c95c:	2300      	movs	r3, #0
 800c95e:	9312      	str	r3, [sp, #72]	@ 0x48
 800c960:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c962:	1b9b      	subs	r3, r3, r6
 800c964:	1e5a      	subs	r2, r3, #1
 800c966:	bf44      	itt	mi
 800c968:	f1c3 0801 	rsbmi	r8, r3, #1
 800c96c:	2300      	movmi	r3, #0
 800c96e:	9208      	str	r2, [sp, #32]
 800c970:	bf54      	ite	pl
 800c972:	f04f 0800 	movpl.w	r8, #0
 800c976:	9308      	strmi	r3, [sp, #32]
 800c978:	2f00      	cmp	r7, #0
 800c97a:	db39      	blt.n	800c9f0 <_dtoa_r+0x218>
 800c97c:	9b08      	ldr	r3, [sp, #32]
 800c97e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c980:	443b      	add	r3, r7
 800c982:	9308      	str	r3, [sp, #32]
 800c984:	2300      	movs	r3, #0
 800c986:	930a      	str	r3, [sp, #40]	@ 0x28
 800c988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c98a:	2b09      	cmp	r3, #9
 800c98c:	d864      	bhi.n	800ca58 <_dtoa_r+0x280>
 800c98e:	2b05      	cmp	r3, #5
 800c990:	bfc4      	itt	gt
 800c992:	3b04      	subgt	r3, #4
 800c994:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c998:	f1a3 0302 	sub.w	r3, r3, #2
 800c99c:	bfcc      	ite	gt
 800c99e:	2400      	movgt	r4, #0
 800c9a0:	2401      	movle	r4, #1
 800c9a2:	2b03      	cmp	r3, #3
 800c9a4:	d863      	bhi.n	800ca6e <_dtoa_r+0x296>
 800c9a6:	e8df f003 	tbb	[pc, r3]
 800c9aa:	372a      	.short	0x372a
 800c9ac:	5535      	.short	0x5535
 800c9ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c9b2:	441e      	add	r6, r3
 800c9b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c9b8:	2b20      	cmp	r3, #32
 800c9ba:	bfc1      	itttt	gt
 800c9bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c9c0:	409f      	lslgt	r7, r3
 800c9c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c9c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c9ca:	bfd6      	itet	le
 800c9cc:	f1c3 0320 	rsble	r3, r3, #32
 800c9d0:	ea47 0003 	orrgt.w	r0, r7, r3
 800c9d4:	fa04 f003 	lslle.w	r0, r4, r3
 800c9d8:	f7f3 fdbc 	bl	8000554 <__aeabi_ui2d>
 800c9dc:	2201      	movs	r2, #1
 800c9de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c9e2:	3e01      	subs	r6, #1
 800c9e4:	9214      	str	r2, [sp, #80]	@ 0x50
 800c9e6:	e777      	b.n	800c8d8 <_dtoa_r+0x100>
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e7b8      	b.n	800c95e <_dtoa_r+0x186>
 800c9ec:	9012      	str	r0, [sp, #72]	@ 0x48
 800c9ee:	e7b7      	b.n	800c960 <_dtoa_r+0x188>
 800c9f0:	427b      	negs	r3, r7
 800c9f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	eba8 0807 	sub.w	r8, r8, r7
 800c9fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c9fc:	e7c4      	b.n	800c988 <_dtoa_r+0x1b0>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	dc35      	bgt.n	800ca74 <_dtoa_r+0x29c>
 800ca08:	2301      	movs	r3, #1
 800ca0a:	9300      	str	r3, [sp, #0]
 800ca0c:	9307      	str	r3, [sp, #28]
 800ca0e:	461a      	mov	r2, r3
 800ca10:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca12:	e00b      	b.n	800ca2c <_dtoa_r+0x254>
 800ca14:	2301      	movs	r3, #1
 800ca16:	e7f3      	b.n	800ca00 <_dtoa_r+0x228>
 800ca18:	2300      	movs	r3, #0
 800ca1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca1e:	18fb      	adds	r3, r7, r3
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	3301      	adds	r3, #1
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	9307      	str	r3, [sp, #28]
 800ca28:	bfb8      	it	lt
 800ca2a:	2301      	movlt	r3, #1
 800ca2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ca30:	2100      	movs	r1, #0
 800ca32:	2204      	movs	r2, #4
 800ca34:	f102 0514 	add.w	r5, r2, #20
 800ca38:	429d      	cmp	r5, r3
 800ca3a:	d91f      	bls.n	800ca7c <_dtoa_r+0x2a4>
 800ca3c:	6041      	str	r1, [r0, #4]
 800ca3e:	4658      	mov	r0, fp
 800ca40:	f000 fd8e 	bl	800d560 <_Balloc>
 800ca44:	4682      	mov	sl, r0
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d13c      	bne.n	800cac4 <_dtoa_r+0x2ec>
 800ca4a:	4b1b      	ldr	r3, [pc, #108]	@ (800cab8 <_dtoa_r+0x2e0>)
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ca52:	e6d8      	b.n	800c806 <_dtoa_r+0x2e>
 800ca54:	2301      	movs	r3, #1
 800ca56:	e7e0      	b.n	800ca1a <_dtoa_r+0x242>
 800ca58:	2401      	movs	r4, #1
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ca60:	f04f 33ff 	mov.w	r3, #4294967295
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	9307      	str	r3, [sp, #28]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	2312      	movs	r3, #18
 800ca6c:	e7d0      	b.n	800ca10 <_dtoa_r+0x238>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca72:	e7f5      	b.n	800ca60 <_dtoa_r+0x288>
 800ca74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca76:	9300      	str	r3, [sp, #0]
 800ca78:	9307      	str	r3, [sp, #28]
 800ca7a:	e7d7      	b.n	800ca2c <_dtoa_r+0x254>
 800ca7c:	3101      	adds	r1, #1
 800ca7e:	0052      	lsls	r2, r2, #1
 800ca80:	e7d8      	b.n	800ca34 <_dtoa_r+0x25c>
 800ca82:	bf00      	nop
 800ca84:	f3af 8000 	nop.w
 800ca88:	636f4361 	.word	0x636f4361
 800ca8c:	3fd287a7 	.word	0x3fd287a7
 800ca90:	8b60c8b3 	.word	0x8b60c8b3
 800ca94:	3fc68a28 	.word	0x3fc68a28
 800ca98:	509f79fb 	.word	0x509f79fb
 800ca9c:	3fd34413 	.word	0x3fd34413
 800caa0:	0800f4d9 	.word	0x0800f4d9
 800caa4:	0800f4f0 	.word	0x0800f4f0
 800caa8:	7ff00000 	.word	0x7ff00000
 800caac:	0800f4a9 	.word	0x0800f4a9
 800cab0:	3ff80000 	.word	0x3ff80000
 800cab4:	0800f5e8 	.word	0x0800f5e8
 800cab8:	0800f548 	.word	0x0800f548
 800cabc:	0800f4d5 	.word	0x0800f4d5
 800cac0:	0800f4a8 	.word	0x0800f4a8
 800cac4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cac8:	6018      	str	r0, [r3, #0]
 800caca:	9b07      	ldr	r3, [sp, #28]
 800cacc:	2b0e      	cmp	r3, #14
 800cace:	f200 80a4 	bhi.w	800cc1a <_dtoa_r+0x442>
 800cad2:	2c00      	cmp	r4, #0
 800cad4:	f000 80a1 	beq.w	800cc1a <_dtoa_r+0x442>
 800cad8:	2f00      	cmp	r7, #0
 800cada:	dd33      	ble.n	800cb44 <_dtoa_r+0x36c>
 800cadc:	4bad      	ldr	r3, [pc, #692]	@ (800cd94 <_dtoa_r+0x5bc>)
 800cade:	f007 020f 	and.w	r2, r7, #15
 800cae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cae6:	ed93 7b00 	vldr	d7, [r3]
 800caea:	05f8      	lsls	r0, r7, #23
 800caec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800caf0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800caf4:	d516      	bpl.n	800cb24 <_dtoa_r+0x34c>
 800caf6:	4ba8      	ldr	r3, [pc, #672]	@ (800cd98 <_dtoa_r+0x5c0>)
 800caf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cafc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb00:	f7f3 fecc 	bl	800089c <__aeabi_ddiv>
 800cb04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb08:	f004 040f 	and.w	r4, r4, #15
 800cb0c:	2603      	movs	r6, #3
 800cb0e:	4da2      	ldr	r5, [pc, #648]	@ (800cd98 <_dtoa_r+0x5c0>)
 800cb10:	b954      	cbnz	r4, 800cb28 <_dtoa_r+0x350>
 800cb12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb1a:	f7f3 febf 	bl	800089c <__aeabi_ddiv>
 800cb1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb22:	e028      	b.n	800cb76 <_dtoa_r+0x39e>
 800cb24:	2602      	movs	r6, #2
 800cb26:	e7f2      	b.n	800cb0e <_dtoa_r+0x336>
 800cb28:	07e1      	lsls	r1, r4, #31
 800cb2a:	d508      	bpl.n	800cb3e <_dtoa_r+0x366>
 800cb2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb34:	f7f3 fd88 	bl	8000648 <__aeabi_dmul>
 800cb38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb3c:	3601      	adds	r6, #1
 800cb3e:	1064      	asrs	r4, r4, #1
 800cb40:	3508      	adds	r5, #8
 800cb42:	e7e5      	b.n	800cb10 <_dtoa_r+0x338>
 800cb44:	f000 80d2 	beq.w	800ccec <_dtoa_r+0x514>
 800cb48:	427c      	negs	r4, r7
 800cb4a:	4b92      	ldr	r3, [pc, #584]	@ (800cd94 <_dtoa_r+0x5bc>)
 800cb4c:	4d92      	ldr	r5, [pc, #584]	@ (800cd98 <_dtoa_r+0x5c0>)
 800cb4e:	f004 020f 	and.w	r2, r4, #15
 800cb52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb5e:	f7f3 fd73 	bl	8000648 <__aeabi_dmul>
 800cb62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb66:	1124      	asrs	r4, r4, #4
 800cb68:	2300      	movs	r3, #0
 800cb6a:	2602      	movs	r6, #2
 800cb6c:	2c00      	cmp	r4, #0
 800cb6e:	f040 80b2 	bne.w	800ccd6 <_dtoa_r+0x4fe>
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1d3      	bne.n	800cb1e <_dtoa_r+0x346>
 800cb76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cb78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f000 80b7 	beq.w	800ccf0 <_dtoa_r+0x518>
 800cb82:	4b86      	ldr	r3, [pc, #536]	@ (800cd9c <_dtoa_r+0x5c4>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	4620      	mov	r0, r4
 800cb88:	4629      	mov	r1, r5
 800cb8a:	f7f3 ffcf 	bl	8000b2c <__aeabi_dcmplt>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	f000 80ae 	beq.w	800ccf0 <_dtoa_r+0x518>
 800cb94:	9b07      	ldr	r3, [sp, #28]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f000 80aa 	beq.w	800ccf0 <_dtoa_r+0x518>
 800cb9c:	9b00      	ldr	r3, [sp, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	dd37      	ble.n	800cc12 <_dtoa_r+0x43a>
 800cba2:	1e7b      	subs	r3, r7, #1
 800cba4:	9304      	str	r3, [sp, #16]
 800cba6:	4620      	mov	r0, r4
 800cba8:	4b7d      	ldr	r3, [pc, #500]	@ (800cda0 <_dtoa_r+0x5c8>)
 800cbaa:	2200      	movs	r2, #0
 800cbac:	4629      	mov	r1, r5
 800cbae:	f7f3 fd4b 	bl	8000648 <__aeabi_dmul>
 800cbb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbb6:	9c00      	ldr	r4, [sp, #0]
 800cbb8:	3601      	adds	r6, #1
 800cbba:	4630      	mov	r0, r6
 800cbbc:	f7f3 fcda 	bl	8000574 <__aeabi_i2d>
 800cbc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbc4:	f7f3 fd40 	bl	8000648 <__aeabi_dmul>
 800cbc8:	4b76      	ldr	r3, [pc, #472]	@ (800cda4 <_dtoa_r+0x5cc>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f7f3 fb86 	bl	80002dc <__adddf3>
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cbd6:	2c00      	cmp	r4, #0
 800cbd8:	f040 808d 	bne.w	800ccf6 <_dtoa_r+0x51e>
 800cbdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbe0:	4b71      	ldr	r3, [pc, #452]	@ (800cda8 <_dtoa_r+0x5d0>)
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f7f3 fb78 	bl	80002d8 <__aeabi_dsub>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	460b      	mov	r3, r1
 800cbec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cbf0:	462a      	mov	r2, r5
 800cbf2:	4633      	mov	r3, r6
 800cbf4:	f7f3 ffb8 	bl	8000b68 <__aeabi_dcmpgt>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	f040 828b 	bne.w	800d114 <_dtoa_r+0x93c>
 800cbfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc02:	462a      	mov	r2, r5
 800cc04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cc08:	f7f3 ff90 	bl	8000b2c <__aeabi_dcmplt>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	f040 8128 	bne.w	800ce62 <_dtoa_r+0x68a>
 800cc12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cc16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cc1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f2c0 815a 	blt.w	800ced6 <_dtoa_r+0x6fe>
 800cc22:	2f0e      	cmp	r7, #14
 800cc24:	f300 8157 	bgt.w	800ced6 <_dtoa_r+0x6fe>
 800cc28:	4b5a      	ldr	r3, [pc, #360]	@ (800cd94 <_dtoa_r+0x5bc>)
 800cc2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc2e:	ed93 7b00 	vldr	d7, [r3]
 800cc32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	ed8d 7b00 	vstr	d7, [sp]
 800cc3a:	da03      	bge.n	800cc44 <_dtoa_r+0x46c>
 800cc3c:	9b07      	ldr	r3, [sp, #28]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	f340 8101 	ble.w	800ce46 <_dtoa_r+0x66e>
 800cc44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cc48:	4656      	mov	r6, sl
 800cc4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc4e:	4620      	mov	r0, r4
 800cc50:	4629      	mov	r1, r5
 800cc52:	f7f3 fe23 	bl	800089c <__aeabi_ddiv>
 800cc56:	f7f3 ffa7 	bl	8000ba8 <__aeabi_d2iz>
 800cc5a:	4680      	mov	r8, r0
 800cc5c:	f7f3 fc8a 	bl	8000574 <__aeabi_i2d>
 800cc60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc64:	f7f3 fcf0 	bl	8000648 <__aeabi_dmul>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	4629      	mov	r1, r5
 800cc70:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cc74:	f7f3 fb30 	bl	80002d8 <__aeabi_dsub>
 800cc78:	f806 4b01 	strb.w	r4, [r6], #1
 800cc7c:	9d07      	ldr	r5, [sp, #28]
 800cc7e:	eba6 040a 	sub.w	r4, r6, sl
 800cc82:	42a5      	cmp	r5, r4
 800cc84:	4602      	mov	r2, r0
 800cc86:	460b      	mov	r3, r1
 800cc88:	f040 8117 	bne.w	800ceba <_dtoa_r+0x6e2>
 800cc8c:	f7f3 fb26 	bl	80002dc <__adddf3>
 800cc90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc94:	4604      	mov	r4, r0
 800cc96:	460d      	mov	r5, r1
 800cc98:	f7f3 ff66 	bl	8000b68 <__aeabi_dcmpgt>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	f040 80f9 	bne.w	800ce94 <_dtoa_r+0x6bc>
 800cca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cca6:	4620      	mov	r0, r4
 800cca8:	4629      	mov	r1, r5
 800ccaa:	f7f3 ff35 	bl	8000b18 <__aeabi_dcmpeq>
 800ccae:	b118      	cbz	r0, 800ccb8 <_dtoa_r+0x4e0>
 800ccb0:	f018 0f01 	tst.w	r8, #1
 800ccb4:	f040 80ee 	bne.w	800ce94 <_dtoa_r+0x6bc>
 800ccb8:	4649      	mov	r1, r9
 800ccba:	4658      	mov	r0, fp
 800ccbc:	f000 fc90 	bl	800d5e0 <_Bfree>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	7033      	strb	r3, [r6, #0]
 800ccc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ccc6:	3701      	adds	r7, #1
 800ccc8:	601f      	str	r7, [r3, #0]
 800ccca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f000 831d 	beq.w	800d30c <_dtoa_r+0xb34>
 800ccd2:	601e      	str	r6, [r3, #0]
 800ccd4:	e31a      	b.n	800d30c <_dtoa_r+0xb34>
 800ccd6:	07e2      	lsls	r2, r4, #31
 800ccd8:	d505      	bpl.n	800cce6 <_dtoa_r+0x50e>
 800ccda:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ccde:	f7f3 fcb3 	bl	8000648 <__aeabi_dmul>
 800cce2:	3601      	adds	r6, #1
 800cce4:	2301      	movs	r3, #1
 800cce6:	1064      	asrs	r4, r4, #1
 800cce8:	3508      	adds	r5, #8
 800ccea:	e73f      	b.n	800cb6c <_dtoa_r+0x394>
 800ccec:	2602      	movs	r6, #2
 800ccee:	e742      	b.n	800cb76 <_dtoa_r+0x39e>
 800ccf0:	9c07      	ldr	r4, [sp, #28]
 800ccf2:	9704      	str	r7, [sp, #16]
 800ccf4:	e761      	b.n	800cbba <_dtoa_r+0x3e2>
 800ccf6:	4b27      	ldr	r3, [pc, #156]	@ (800cd94 <_dtoa_r+0x5bc>)
 800ccf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ccfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ccfe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cd02:	4454      	add	r4, sl
 800cd04:	2900      	cmp	r1, #0
 800cd06:	d053      	beq.n	800cdb0 <_dtoa_r+0x5d8>
 800cd08:	4928      	ldr	r1, [pc, #160]	@ (800cdac <_dtoa_r+0x5d4>)
 800cd0a:	2000      	movs	r0, #0
 800cd0c:	f7f3 fdc6 	bl	800089c <__aeabi_ddiv>
 800cd10:	4633      	mov	r3, r6
 800cd12:	462a      	mov	r2, r5
 800cd14:	f7f3 fae0 	bl	80002d8 <__aeabi_dsub>
 800cd18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cd1c:	4656      	mov	r6, sl
 800cd1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd22:	f7f3 ff41 	bl	8000ba8 <__aeabi_d2iz>
 800cd26:	4605      	mov	r5, r0
 800cd28:	f7f3 fc24 	bl	8000574 <__aeabi_i2d>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	460b      	mov	r3, r1
 800cd30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd34:	f7f3 fad0 	bl	80002d8 <__aeabi_dsub>
 800cd38:	3530      	adds	r5, #48	@ 0x30
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd42:	f806 5b01 	strb.w	r5, [r6], #1
 800cd46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cd4a:	f7f3 feef 	bl	8000b2c <__aeabi_dcmplt>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	d171      	bne.n	800ce36 <_dtoa_r+0x65e>
 800cd52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd56:	4911      	ldr	r1, [pc, #68]	@ (800cd9c <_dtoa_r+0x5c4>)
 800cd58:	2000      	movs	r0, #0
 800cd5a:	f7f3 fabd 	bl	80002d8 <__aeabi_dsub>
 800cd5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cd62:	f7f3 fee3 	bl	8000b2c <__aeabi_dcmplt>
 800cd66:	2800      	cmp	r0, #0
 800cd68:	f040 8095 	bne.w	800ce96 <_dtoa_r+0x6be>
 800cd6c:	42a6      	cmp	r6, r4
 800cd6e:	f43f af50 	beq.w	800cc12 <_dtoa_r+0x43a>
 800cd72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cd76:	4b0a      	ldr	r3, [pc, #40]	@ (800cda0 <_dtoa_r+0x5c8>)
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f7f3 fc65 	bl	8000648 <__aeabi_dmul>
 800cd7e:	4b08      	ldr	r3, [pc, #32]	@ (800cda0 <_dtoa_r+0x5c8>)
 800cd80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cd84:	2200      	movs	r2, #0
 800cd86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd8a:	f7f3 fc5d 	bl	8000648 <__aeabi_dmul>
 800cd8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd92:	e7c4      	b.n	800cd1e <_dtoa_r+0x546>
 800cd94:	0800f5e8 	.word	0x0800f5e8
 800cd98:	0800f5c0 	.word	0x0800f5c0
 800cd9c:	3ff00000 	.word	0x3ff00000
 800cda0:	40240000 	.word	0x40240000
 800cda4:	401c0000 	.word	0x401c0000
 800cda8:	40140000 	.word	0x40140000
 800cdac:	3fe00000 	.word	0x3fe00000
 800cdb0:	4631      	mov	r1, r6
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f7f3 fc48 	bl	8000648 <__aeabi_dmul>
 800cdb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cdbc:	9415      	str	r4, [sp, #84]	@ 0x54
 800cdbe:	4656      	mov	r6, sl
 800cdc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdc4:	f7f3 fef0 	bl	8000ba8 <__aeabi_d2iz>
 800cdc8:	4605      	mov	r5, r0
 800cdca:	f7f3 fbd3 	bl	8000574 <__aeabi_i2d>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdd6:	f7f3 fa7f 	bl	80002d8 <__aeabi_dsub>
 800cdda:	3530      	adds	r5, #48	@ 0x30
 800cddc:	f806 5b01 	strb.w	r5, [r6], #1
 800cde0:	4602      	mov	r2, r0
 800cde2:	460b      	mov	r3, r1
 800cde4:	42a6      	cmp	r6, r4
 800cde6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cdea:	f04f 0200 	mov.w	r2, #0
 800cdee:	d124      	bne.n	800ce3a <_dtoa_r+0x662>
 800cdf0:	4bac      	ldr	r3, [pc, #688]	@ (800d0a4 <_dtoa_r+0x8cc>)
 800cdf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cdf6:	f7f3 fa71 	bl	80002dc <__adddf3>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce02:	f7f3 feb1 	bl	8000b68 <__aeabi_dcmpgt>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d145      	bne.n	800ce96 <_dtoa_r+0x6be>
 800ce0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ce0e:	49a5      	ldr	r1, [pc, #660]	@ (800d0a4 <_dtoa_r+0x8cc>)
 800ce10:	2000      	movs	r0, #0
 800ce12:	f7f3 fa61 	bl	80002d8 <__aeabi_dsub>
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce1e:	f7f3 fe85 	bl	8000b2c <__aeabi_dcmplt>
 800ce22:	2800      	cmp	r0, #0
 800ce24:	f43f aef5 	beq.w	800cc12 <_dtoa_r+0x43a>
 800ce28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ce2a:	1e73      	subs	r3, r6, #1
 800ce2c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ce2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ce32:	2b30      	cmp	r3, #48	@ 0x30
 800ce34:	d0f8      	beq.n	800ce28 <_dtoa_r+0x650>
 800ce36:	9f04      	ldr	r7, [sp, #16]
 800ce38:	e73e      	b.n	800ccb8 <_dtoa_r+0x4e0>
 800ce3a:	4b9b      	ldr	r3, [pc, #620]	@ (800d0a8 <_dtoa_r+0x8d0>)
 800ce3c:	f7f3 fc04 	bl	8000648 <__aeabi_dmul>
 800ce40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce44:	e7bc      	b.n	800cdc0 <_dtoa_r+0x5e8>
 800ce46:	d10c      	bne.n	800ce62 <_dtoa_r+0x68a>
 800ce48:	4b98      	ldr	r3, [pc, #608]	@ (800d0ac <_dtoa_r+0x8d4>)
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce50:	f7f3 fbfa 	bl	8000648 <__aeabi_dmul>
 800ce54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce58:	f7f3 fe7c 	bl	8000b54 <__aeabi_dcmpge>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	f000 8157 	beq.w	800d110 <_dtoa_r+0x938>
 800ce62:	2400      	movs	r4, #0
 800ce64:	4625      	mov	r5, r4
 800ce66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce68:	43db      	mvns	r3, r3
 800ce6a:	9304      	str	r3, [sp, #16]
 800ce6c:	4656      	mov	r6, sl
 800ce6e:	2700      	movs	r7, #0
 800ce70:	4621      	mov	r1, r4
 800ce72:	4658      	mov	r0, fp
 800ce74:	f000 fbb4 	bl	800d5e0 <_Bfree>
 800ce78:	2d00      	cmp	r5, #0
 800ce7a:	d0dc      	beq.n	800ce36 <_dtoa_r+0x65e>
 800ce7c:	b12f      	cbz	r7, 800ce8a <_dtoa_r+0x6b2>
 800ce7e:	42af      	cmp	r7, r5
 800ce80:	d003      	beq.n	800ce8a <_dtoa_r+0x6b2>
 800ce82:	4639      	mov	r1, r7
 800ce84:	4658      	mov	r0, fp
 800ce86:	f000 fbab 	bl	800d5e0 <_Bfree>
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	4658      	mov	r0, fp
 800ce8e:	f000 fba7 	bl	800d5e0 <_Bfree>
 800ce92:	e7d0      	b.n	800ce36 <_dtoa_r+0x65e>
 800ce94:	9704      	str	r7, [sp, #16]
 800ce96:	4633      	mov	r3, r6
 800ce98:	461e      	mov	r6, r3
 800ce9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce9e:	2a39      	cmp	r2, #57	@ 0x39
 800cea0:	d107      	bne.n	800ceb2 <_dtoa_r+0x6da>
 800cea2:	459a      	cmp	sl, r3
 800cea4:	d1f8      	bne.n	800ce98 <_dtoa_r+0x6c0>
 800cea6:	9a04      	ldr	r2, [sp, #16]
 800cea8:	3201      	adds	r2, #1
 800ceaa:	9204      	str	r2, [sp, #16]
 800ceac:	2230      	movs	r2, #48	@ 0x30
 800ceae:	f88a 2000 	strb.w	r2, [sl]
 800ceb2:	781a      	ldrb	r2, [r3, #0]
 800ceb4:	3201      	adds	r2, #1
 800ceb6:	701a      	strb	r2, [r3, #0]
 800ceb8:	e7bd      	b.n	800ce36 <_dtoa_r+0x65e>
 800ceba:	4b7b      	ldr	r3, [pc, #492]	@ (800d0a8 <_dtoa_r+0x8d0>)
 800cebc:	2200      	movs	r2, #0
 800cebe:	f7f3 fbc3 	bl	8000648 <__aeabi_dmul>
 800cec2:	2200      	movs	r2, #0
 800cec4:	2300      	movs	r3, #0
 800cec6:	4604      	mov	r4, r0
 800cec8:	460d      	mov	r5, r1
 800ceca:	f7f3 fe25 	bl	8000b18 <__aeabi_dcmpeq>
 800cece:	2800      	cmp	r0, #0
 800ced0:	f43f aebb 	beq.w	800cc4a <_dtoa_r+0x472>
 800ced4:	e6f0      	b.n	800ccb8 <_dtoa_r+0x4e0>
 800ced6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ced8:	2a00      	cmp	r2, #0
 800ceda:	f000 80db 	beq.w	800d094 <_dtoa_r+0x8bc>
 800cede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cee0:	2a01      	cmp	r2, #1
 800cee2:	f300 80bf 	bgt.w	800d064 <_dtoa_r+0x88c>
 800cee6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cee8:	2a00      	cmp	r2, #0
 800ceea:	f000 80b7 	beq.w	800d05c <_dtoa_r+0x884>
 800ceee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cef2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cef4:	4646      	mov	r6, r8
 800cef6:	9a08      	ldr	r2, [sp, #32]
 800cef8:	2101      	movs	r1, #1
 800cefa:	441a      	add	r2, r3
 800cefc:	4658      	mov	r0, fp
 800cefe:	4498      	add	r8, r3
 800cf00:	9208      	str	r2, [sp, #32]
 800cf02:	f000 fc21 	bl	800d748 <__i2b>
 800cf06:	4605      	mov	r5, r0
 800cf08:	b15e      	cbz	r6, 800cf22 <_dtoa_r+0x74a>
 800cf0a:	9b08      	ldr	r3, [sp, #32]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	dd08      	ble.n	800cf22 <_dtoa_r+0x74a>
 800cf10:	42b3      	cmp	r3, r6
 800cf12:	9a08      	ldr	r2, [sp, #32]
 800cf14:	bfa8      	it	ge
 800cf16:	4633      	movge	r3, r6
 800cf18:	eba8 0803 	sub.w	r8, r8, r3
 800cf1c:	1af6      	subs	r6, r6, r3
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	9308      	str	r3, [sp, #32]
 800cf22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf24:	b1f3      	cbz	r3, 800cf64 <_dtoa_r+0x78c>
 800cf26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	f000 80b7 	beq.w	800d09c <_dtoa_r+0x8c4>
 800cf2e:	b18c      	cbz	r4, 800cf54 <_dtoa_r+0x77c>
 800cf30:	4629      	mov	r1, r5
 800cf32:	4622      	mov	r2, r4
 800cf34:	4658      	mov	r0, fp
 800cf36:	f000 fcc7 	bl	800d8c8 <__pow5mult>
 800cf3a:	464a      	mov	r2, r9
 800cf3c:	4601      	mov	r1, r0
 800cf3e:	4605      	mov	r5, r0
 800cf40:	4658      	mov	r0, fp
 800cf42:	f000 fc17 	bl	800d774 <__multiply>
 800cf46:	4649      	mov	r1, r9
 800cf48:	9004      	str	r0, [sp, #16]
 800cf4a:	4658      	mov	r0, fp
 800cf4c:	f000 fb48 	bl	800d5e0 <_Bfree>
 800cf50:	9b04      	ldr	r3, [sp, #16]
 800cf52:	4699      	mov	r9, r3
 800cf54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf56:	1b1a      	subs	r2, r3, r4
 800cf58:	d004      	beq.n	800cf64 <_dtoa_r+0x78c>
 800cf5a:	4649      	mov	r1, r9
 800cf5c:	4658      	mov	r0, fp
 800cf5e:	f000 fcb3 	bl	800d8c8 <__pow5mult>
 800cf62:	4681      	mov	r9, r0
 800cf64:	2101      	movs	r1, #1
 800cf66:	4658      	mov	r0, fp
 800cf68:	f000 fbee 	bl	800d748 <__i2b>
 800cf6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf6e:	4604      	mov	r4, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	f000 81cf 	beq.w	800d314 <_dtoa_r+0xb3c>
 800cf76:	461a      	mov	r2, r3
 800cf78:	4601      	mov	r1, r0
 800cf7a:	4658      	mov	r0, fp
 800cf7c:	f000 fca4 	bl	800d8c8 <__pow5mult>
 800cf80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	4604      	mov	r4, r0
 800cf86:	f300 8095 	bgt.w	800d0b4 <_dtoa_r+0x8dc>
 800cf8a:	9b02      	ldr	r3, [sp, #8]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f040 8087 	bne.w	800d0a0 <_dtoa_r+0x8c8>
 800cf92:	9b03      	ldr	r3, [sp, #12]
 800cf94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f040 8089 	bne.w	800d0b0 <_dtoa_r+0x8d8>
 800cf9e:	9b03      	ldr	r3, [sp, #12]
 800cfa0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cfa4:	0d1b      	lsrs	r3, r3, #20
 800cfa6:	051b      	lsls	r3, r3, #20
 800cfa8:	b12b      	cbz	r3, 800cfb6 <_dtoa_r+0x7de>
 800cfaa:	9b08      	ldr	r3, [sp, #32]
 800cfac:	3301      	adds	r3, #1
 800cfae:	9308      	str	r3, [sp, #32]
 800cfb0:	f108 0801 	add.w	r8, r8, #1
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f000 81b0 	beq.w	800d320 <_dtoa_r+0xb48>
 800cfc0:	6923      	ldr	r3, [r4, #16]
 800cfc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cfc6:	6918      	ldr	r0, [r3, #16]
 800cfc8:	f000 fb72 	bl	800d6b0 <__hi0bits>
 800cfcc:	f1c0 0020 	rsb	r0, r0, #32
 800cfd0:	9b08      	ldr	r3, [sp, #32]
 800cfd2:	4418      	add	r0, r3
 800cfd4:	f010 001f 	ands.w	r0, r0, #31
 800cfd8:	d077      	beq.n	800d0ca <_dtoa_r+0x8f2>
 800cfda:	f1c0 0320 	rsb	r3, r0, #32
 800cfde:	2b04      	cmp	r3, #4
 800cfe0:	dd6b      	ble.n	800d0ba <_dtoa_r+0x8e2>
 800cfe2:	9b08      	ldr	r3, [sp, #32]
 800cfe4:	f1c0 001c 	rsb	r0, r0, #28
 800cfe8:	4403      	add	r3, r0
 800cfea:	4480      	add	r8, r0
 800cfec:	4406      	add	r6, r0
 800cfee:	9308      	str	r3, [sp, #32]
 800cff0:	f1b8 0f00 	cmp.w	r8, #0
 800cff4:	dd05      	ble.n	800d002 <_dtoa_r+0x82a>
 800cff6:	4649      	mov	r1, r9
 800cff8:	4642      	mov	r2, r8
 800cffa:	4658      	mov	r0, fp
 800cffc:	f000 fcbe 	bl	800d97c <__lshift>
 800d000:	4681      	mov	r9, r0
 800d002:	9b08      	ldr	r3, [sp, #32]
 800d004:	2b00      	cmp	r3, #0
 800d006:	dd05      	ble.n	800d014 <_dtoa_r+0x83c>
 800d008:	4621      	mov	r1, r4
 800d00a:	461a      	mov	r2, r3
 800d00c:	4658      	mov	r0, fp
 800d00e:	f000 fcb5 	bl	800d97c <__lshift>
 800d012:	4604      	mov	r4, r0
 800d014:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d016:	2b00      	cmp	r3, #0
 800d018:	d059      	beq.n	800d0ce <_dtoa_r+0x8f6>
 800d01a:	4621      	mov	r1, r4
 800d01c:	4648      	mov	r0, r9
 800d01e:	f000 fd19 	bl	800da54 <__mcmp>
 800d022:	2800      	cmp	r0, #0
 800d024:	da53      	bge.n	800d0ce <_dtoa_r+0x8f6>
 800d026:	1e7b      	subs	r3, r7, #1
 800d028:	9304      	str	r3, [sp, #16]
 800d02a:	4649      	mov	r1, r9
 800d02c:	2300      	movs	r3, #0
 800d02e:	220a      	movs	r2, #10
 800d030:	4658      	mov	r0, fp
 800d032:	f000 faf7 	bl	800d624 <__multadd>
 800d036:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d038:	4681      	mov	r9, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f000 8172 	beq.w	800d324 <_dtoa_r+0xb4c>
 800d040:	2300      	movs	r3, #0
 800d042:	4629      	mov	r1, r5
 800d044:	220a      	movs	r2, #10
 800d046:	4658      	mov	r0, fp
 800d048:	f000 faec 	bl	800d624 <__multadd>
 800d04c:	9b00      	ldr	r3, [sp, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	4605      	mov	r5, r0
 800d052:	dc67      	bgt.n	800d124 <_dtoa_r+0x94c>
 800d054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d056:	2b02      	cmp	r3, #2
 800d058:	dc41      	bgt.n	800d0de <_dtoa_r+0x906>
 800d05a:	e063      	b.n	800d124 <_dtoa_r+0x94c>
 800d05c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d05e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d062:	e746      	b.n	800cef2 <_dtoa_r+0x71a>
 800d064:	9b07      	ldr	r3, [sp, #28]
 800d066:	1e5c      	subs	r4, r3, #1
 800d068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d06a:	42a3      	cmp	r3, r4
 800d06c:	bfbf      	itttt	lt
 800d06e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d070:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d072:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d074:	1ae3      	sublt	r3, r4, r3
 800d076:	bfb4      	ite	lt
 800d078:	18d2      	addlt	r2, r2, r3
 800d07a:	1b1c      	subge	r4, r3, r4
 800d07c:	9b07      	ldr	r3, [sp, #28]
 800d07e:	bfbc      	itt	lt
 800d080:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d082:	2400      	movlt	r4, #0
 800d084:	2b00      	cmp	r3, #0
 800d086:	bfb5      	itete	lt
 800d088:	eba8 0603 	sublt.w	r6, r8, r3
 800d08c:	9b07      	ldrge	r3, [sp, #28]
 800d08e:	2300      	movlt	r3, #0
 800d090:	4646      	movge	r6, r8
 800d092:	e730      	b.n	800cef6 <_dtoa_r+0x71e>
 800d094:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d096:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d098:	4646      	mov	r6, r8
 800d09a:	e735      	b.n	800cf08 <_dtoa_r+0x730>
 800d09c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d09e:	e75c      	b.n	800cf5a <_dtoa_r+0x782>
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	e788      	b.n	800cfb6 <_dtoa_r+0x7de>
 800d0a4:	3fe00000 	.word	0x3fe00000
 800d0a8:	40240000 	.word	0x40240000
 800d0ac:	40140000 	.word	0x40140000
 800d0b0:	9b02      	ldr	r3, [sp, #8]
 800d0b2:	e780      	b.n	800cfb6 <_dtoa_r+0x7de>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0b8:	e782      	b.n	800cfc0 <_dtoa_r+0x7e8>
 800d0ba:	d099      	beq.n	800cff0 <_dtoa_r+0x818>
 800d0bc:	9a08      	ldr	r2, [sp, #32]
 800d0be:	331c      	adds	r3, #28
 800d0c0:	441a      	add	r2, r3
 800d0c2:	4498      	add	r8, r3
 800d0c4:	441e      	add	r6, r3
 800d0c6:	9208      	str	r2, [sp, #32]
 800d0c8:	e792      	b.n	800cff0 <_dtoa_r+0x818>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	e7f6      	b.n	800d0bc <_dtoa_r+0x8e4>
 800d0ce:	9b07      	ldr	r3, [sp, #28]
 800d0d0:	9704      	str	r7, [sp, #16]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	dc20      	bgt.n	800d118 <_dtoa_r+0x940>
 800d0d6:	9300      	str	r3, [sp, #0]
 800d0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	dd1e      	ble.n	800d11c <_dtoa_r+0x944>
 800d0de:	9b00      	ldr	r3, [sp, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f47f aec0 	bne.w	800ce66 <_dtoa_r+0x68e>
 800d0e6:	4621      	mov	r1, r4
 800d0e8:	2205      	movs	r2, #5
 800d0ea:	4658      	mov	r0, fp
 800d0ec:	f000 fa9a 	bl	800d624 <__multadd>
 800d0f0:	4601      	mov	r1, r0
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	4648      	mov	r0, r9
 800d0f6:	f000 fcad 	bl	800da54 <__mcmp>
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	f77f aeb3 	ble.w	800ce66 <_dtoa_r+0x68e>
 800d100:	4656      	mov	r6, sl
 800d102:	2331      	movs	r3, #49	@ 0x31
 800d104:	f806 3b01 	strb.w	r3, [r6], #1
 800d108:	9b04      	ldr	r3, [sp, #16]
 800d10a:	3301      	adds	r3, #1
 800d10c:	9304      	str	r3, [sp, #16]
 800d10e:	e6ae      	b.n	800ce6e <_dtoa_r+0x696>
 800d110:	9c07      	ldr	r4, [sp, #28]
 800d112:	9704      	str	r7, [sp, #16]
 800d114:	4625      	mov	r5, r4
 800d116:	e7f3      	b.n	800d100 <_dtoa_r+0x928>
 800d118:	9b07      	ldr	r3, [sp, #28]
 800d11a:	9300      	str	r3, [sp, #0]
 800d11c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d11e:	2b00      	cmp	r3, #0
 800d120:	f000 8104 	beq.w	800d32c <_dtoa_r+0xb54>
 800d124:	2e00      	cmp	r6, #0
 800d126:	dd05      	ble.n	800d134 <_dtoa_r+0x95c>
 800d128:	4629      	mov	r1, r5
 800d12a:	4632      	mov	r2, r6
 800d12c:	4658      	mov	r0, fp
 800d12e:	f000 fc25 	bl	800d97c <__lshift>
 800d132:	4605      	mov	r5, r0
 800d134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d136:	2b00      	cmp	r3, #0
 800d138:	d05a      	beq.n	800d1f0 <_dtoa_r+0xa18>
 800d13a:	6869      	ldr	r1, [r5, #4]
 800d13c:	4658      	mov	r0, fp
 800d13e:	f000 fa0f 	bl	800d560 <_Balloc>
 800d142:	4606      	mov	r6, r0
 800d144:	b928      	cbnz	r0, 800d152 <_dtoa_r+0x97a>
 800d146:	4b84      	ldr	r3, [pc, #528]	@ (800d358 <_dtoa_r+0xb80>)
 800d148:	4602      	mov	r2, r0
 800d14a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d14e:	f7ff bb5a 	b.w	800c806 <_dtoa_r+0x2e>
 800d152:	692a      	ldr	r2, [r5, #16]
 800d154:	3202      	adds	r2, #2
 800d156:	0092      	lsls	r2, r2, #2
 800d158:	f105 010c 	add.w	r1, r5, #12
 800d15c:	300c      	adds	r0, #12
 800d15e:	f7ff faa4 	bl	800c6aa <memcpy>
 800d162:	2201      	movs	r2, #1
 800d164:	4631      	mov	r1, r6
 800d166:	4658      	mov	r0, fp
 800d168:	f000 fc08 	bl	800d97c <__lshift>
 800d16c:	f10a 0301 	add.w	r3, sl, #1
 800d170:	9307      	str	r3, [sp, #28]
 800d172:	9b00      	ldr	r3, [sp, #0]
 800d174:	4453      	add	r3, sl
 800d176:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d178:	9b02      	ldr	r3, [sp, #8]
 800d17a:	f003 0301 	and.w	r3, r3, #1
 800d17e:	462f      	mov	r7, r5
 800d180:	930a      	str	r3, [sp, #40]	@ 0x28
 800d182:	4605      	mov	r5, r0
 800d184:	9b07      	ldr	r3, [sp, #28]
 800d186:	4621      	mov	r1, r4
 800d188:	3b01      	subs	r3, #1
 800d18a:	4648      	mov	r0, r9
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	f7ff fa9a 	bl	800c6c6 <quorem>
 800d192:	4639      	mov	r1, r7
 800d194:	9002      	str	r0, [sp, #8]
 800d196:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d19a:	4648      	mov	r0, r9
 800d19c:	f000 fc5a 	bl	800da54 <__mcmp>
 800d1a0:	462a      	mov	r2, r5
 800d1a2:	9008      	str	r0, [sp, #32]
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	4658      	mov	r0, fp
 800d1a8:	f000 fc70 	bl	800da8c <__mdiff>
 800d1ac:	68c2      	ldr	r2, [r0, #12]
 800d1ae:	4606      	mov	r6, r0
 800d1b0:	bb02      	cbnz	r2, 800d1f4 <_dtoa_r+0xa1c>
 800d1b2:	4601      	mov	r1, r0
 800d1b4:	4648      	mov	r0, r9
 800d1b6:	f000 fc4d 	bl	800da54 <__mcmp>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	4631      	mov	r1, r6
 800d1be:	4658      	mov	r0, fp
 800d1c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d1c2:	f000 fa0d 	bl	800d5e0 <_Bfree>
 800d1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1ca:	9e07      	ldr	r6, [sp, #28]
 800d1cc:	ea43 0102 	orr.w	r1, r3, r2
 800d1d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1d2:	4319      	orrs	r1, r3
 800d1d4:	d110      	bne.n	800d1f8 <_dtoa_r+0xa20>
 800d1d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d1da:	d029      	beq.n	800d230 <_dtoa_r+0xa58>
 800d1dc:	9b08      	ldr	r3, [sp, #32]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	dd02      	ble.n	800d1e8 <_dtoa_r+0xa10>
 800d1e2:	9b02      	ldr	r3, [sp, #8]
 800d1e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d1e8:	9b00      	ldr	r3, [sp, #0]
 800d1ea:	f883 8000 	strb.w	r8, [r3]
 800d1ee:	e63f      	b.n	800ce70 <_dtoa_r+0x698>
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	e7bb      	b.n	800d16c <_dtoa_r+0x994>
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	e7e1      	b.n	800d1bc <_dtoa_r+0x9e4>
 800d1f8:	9b08      	ldr	r3, [sp, #32]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	db04      	blt.n	800d208 <_dtoa_r+0xa30>
 800d1fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d200:	430b      	orrs	r3, r1
 800d202:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d204:	430b      	orrs	r3, r1
 800d206:	d120      	bne.n	800d24a <_dtoa_r+0xa72>
 800d208:	2a00      	cmp	r2, #0
 800d20a:	dded      	ble.n	800d1e8 <_dtoa_r+0xa10>
 800d20c:	4649      	mov	r1, r9
 800d20e:	2201      	movs	r2, #1
 800d210:	4658      	mov	r0, fp
 800d212:	f000 fbb3 	bl	800d97c <__lshift>
 800d216:	4621      	mov	r1, r4
 800d218:	4681      	mov	r9, r0
 800d21a:	f000 fc1b 	bl	800da54 <__mcmp>
 800d21e:	2800      	cmp	r0, #0
 800d220:	dc03      	bgt.n	800d22a <_dtoa_r+0xa52>
 800d222:	d1e1      	bne.n	800d1e8 <_dtoa_r+0xa10>
 800d224:	f018 0f01 	tst.w	r8, #1
 800d228:	d0de      	beq.n	800d1e8 <_dtoa_r+0xa10>
 800d22a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d22e:	d1d8      	bne.n	800d1e2 <_dtoa_r+0xa0a>
 800d230:	9a00      	ldr	r2, [sp, #0]
 800d232:	2339      	movs	r3, #57	@ 0x39
 800d234:	7013      	strb	r3, [r2, #0]
 800d236:	4633      	mov	r3, r6
 800d238:	461e      	mov	r6, r3
 800d23a:	3b01      	subs	r3, #1
 800d23c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d240:	2a39      	cmp	r2, #57	@ 0x39
 800d242:	d052      	beq.n	800d2ea <_dtoa_r+0xb12>
 800d244:	3201      	adds	r2, #1
 800d246:	701a      	strb	r2, [r3, #0]
 800d248:	e612      	b.n	800ce70 <_dtoa_r+0x698>
 800d24a:	2a00      	cmp	r2, #0
 800d24c:	dd07      	ble.n	800d25e <_dtoa_r+0xa86>
 800d24e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d252:	d0ed      	beq.n	800d230 <_dtoa_r+0xa58>
 800d254:	9a00      	ldr	r2, [sp, #0]
 800d256:	f108 0301 	add.w	r3, r8, #1
 800d25a:	7013      	strb	r3, [r2, #0]
 800d25c:	e608      	b.n	800ce70 <_dtoa_r+0x698>
 800d25e:	9b07      	ldr	r3, [sp, #28]
 800d260:	9a07      	ldr	r2, [sp, #28]
 800d262:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d268:	4293      	cmp	r3, r2
 800d26a:	d028      	beq.n	800d2be <_dtoa_r+0xae6>
 800d26c:	4649      	mov	r1, r9
 800d26e:	2300      	movs	r3, #0
 800d270:	220a      	movs	r2, #10
 800d272:	4658      	mov	r0, fp
 800d274:	f000 f9d6 	bl	800d624 <__multadd>
 800d278:	42af      	cmp	r7, r5
 800d27a:	4681      	mov	r9, r0
 800d27c:	f04f 0300 	mov.w	r3, #0
 800d280:	f04f 020a 	mov.w	r2, #10
 800d284:	4639      	mov	r1, r7
 800d286:	4658      	mov	r0, fp
 800d288:	d107      	bne.n	800d29a <_dtoa_r+0xac2>
 800d28a:	f000 f9cb 	bl	800d624 <__multadd>
 800d28e:	4607      	mov	r7, r0
 800d290:	4605      	mov	r5, r0
 800d292:	9b07      	ldr	r3, [sp, #28]
 800d294:	3301      	adds	r3, #1
 800d296:	9307      	str	r3, [sp, #28]
 800d298:	e774      	b.n	800d184 <_dtoa_r+0x9ac>
 800d29a:	f000 f9c3 	bl	800d624 <__multadd>
 800d29e:	4629      	mov	r1, r5
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	220a      	movs	r2, #10
 800d2a6:	4658      	mov	r0, fp
 800d2a8:	f000 f9bc 	bl	800d624 <__multadd>
 800d2ac:	4605      	mov	r5, r0
 800d2ae:	e7f0      	b.n	800d292 <_dtoa_r+0xaba>
 800d2b0:	9b00      	ldr	r3, [sp, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	bfcc      	ite	gt
 800d2b6:	461e      	movgt	r6, r3
 800d2b8:	2601      	movle	r6, #1
 800d2ba:	4456      	add	r6, sl
 800d2bc:	2700      	movs	r7, #0
 800d2be:	4649      	mov	r1, r9
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	4658      	mov	r0, fp
 800d2c4:	f000 fb5a 	bl	800d97c <__lshift>
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	4681      	mov	r9, r0
 800d2cc:	f000 fbc2 	bl	800da54 <__mcmp>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	dcb0      	bgt.n	800d236 <_dtoa_r+0xa5e>
 800d2d4:	d102      	bne.n	800d2dc <_dtoa_r+0xb04>
 800d2d6:	f018 0f01 	tst.w	r8, #1
 800d2da:	d1ac      	bne.n	800d236 <_dtoa_r+0xa5e>
 800d2dc:	4633      	mov	r3, r6
 800d2de:	461e      	mov	r6, r3
 800d2e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2e4:	2a30      	cmp	r2, #48	@ 0x30
 800d2e6:	d0fa      	beq.n	800d2de <_dtoa_r+0xb06>
 800d2e8:	e5c2      	b.n	800ce70 <_dtoa_r+0x698>
 800d2ea:	459a      	cmp	sl, r3
 800d2ec:	d1a4      	bne.n	800d238 <_dtoa_r+0xa60>
 800d2ee:	9b04      	ldr	r3, [sp, #16]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	9304      	str	r3, [sp, #16]
 800d2f4:	2331      	movs	r3, #49	@ 0x31
 800d2f6:	f88a 3000 	strb.w	r3, [sl]
 800d2fa:	e5b9      	b.n	800ce70 <_dtoa_r+0x698>
 800d2fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d2fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d35c <_dtoa_r+0xb84>
 800d302:	b11b      	cbz	r3, 800d30c <_dtoa_r+0xb34>
 800d304:	f10a 0308 	add.w	r3, sl, #8
 800d308:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d30a:	6013      	str	r3, [r2, #0]
 800d30c:	4650      	mov	r0, sl
 800d30e:	b019      	add	sp, #100	@ 0x64
 800d310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d316:	2b01      	cmp	r3, #1
 800d318:	f77f ae37 	ble.w	800cf8a <_dtoa_r+0x7b2>
 800d31c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d31e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d320:	2001      	movs	r0, #1
 800d322:	e655      	b.n	800cfd0 <_dtoa_r+0x7f8>
 800d324:	9b00      	ldr	r3, [sp, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	f77f aed6 	ble.w	800d0d8 <_dtoa_r+0x900>
 800d32c:	4656      	mov	r6, sl
 800d32e:	4621      	mov	r1, r4
 800d330:	4648      	mov	r0, r9
 800d332:	f7ff f9c8 	bl	800c6c6 <quorem>
 800d336:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d33a:	f806 8b01 	strb.w	r8, [r6], #1
 800d33e:	9b00      	ldr	r3, [sp, #0]
 800d340:	eba6 020a 	sub.w	r2, r6, sl
 800d344:	4293      	cmp	r3, r2
 800d346:	ddb3      	ble.n	800d2b0 <_dtoa_r+0xad8>
 800d348:	4649      	mov	r1, r9
 800d34a:	2300      	movs	r3, #0
 800d34c:	220a      	movs	r2, #10
 800d34e:	4658      	mov	r0, fp
 800d350:	f000 f968 	bl	800d624 <__multadd>
 800d354:	4681      	mov	r9, r0
 800d356:	e7ea      	b.n	800d32e <_dtoa_r+0xb56>
 800d358:	0800f548 	.word	0x0800f548
 800d35c:	0800f4cc 	.word	0x0800f4cc

0800d360 <_free_r>:
 800d360:	b538      	push	{r3, r4, r5, lr}
 800d362:	4605      	mov	r5, r0
 800d364:	2900      	cmp	r1, #0
 800d366:	d041      	beq.n	800d3ec <_free_r+0x8c>
 800d368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d36c:	1f0c      	subs	r4, r1, #4
 800d36e:	2b00      	cmp	r3, #0
 800d370:	bfb8      	it	lt
 800d372:	18e4      	addlt	r4, r4, r3
 800d374:	f000 f8e8 	bl	800d548 <__malloc_lock>
 800d378:	4a1d      	ldr	r2, [pc, #116]	@ (800d3f0 <_free_r+0x90>)
 800d37a:	6813      	ldr	r3, [r2, #0]
 800d37c:	b933      	cbnz	r3, 800d38c <_free_r+0x2c>
 800d37e:	6063      	str	r3, [r4, #4]
 800d380:	6014      	str	r4, [r2, #0]
 800d382:	4628      	mov	r0, r5
 800d384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d388:	f000 b8e4 	b.w	800d554 <__malloc_unlock>
 800d38c:	42a3      	cmp	r3, r4
 800d38e:	d908      	bls.n	800d3a2 <_free_r+0x42>
 800d390:	6820      	ldr	r0, [r4, #0]
 800d392:	1821      	adds	r1, r4, r0
 800d394:	428b      	cmp	r3, r1
 800d396:	bf01      	itttt	eq
 800d398:	6819      	ldreq	r1, [r3, #0]
 800d39a:	685b      	ldreq	r3, [r3, #4]
 800d39c:	1809      	addeq	r1, r1, r0
 800d39e:	6021      	streq	r1, [r4, #0]
 800d3a0:	e7ed      	b.n	800d37e <_free_r+0x1e>
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	b10b      	cbz	r3, 800d3ac <_free_r+0x4c>
 800d3a8:	42a3      	cmp	r3, r4
 800d3aa:	d9fa      	bls.n	800d3a2 <_free_r+0x42>
 800d3ac:	6811      	ldr	r1, [r2, #0]
 800d3ae:	1850      	adds	r0, r2, r1
 800d3b0:	42a0      	cmp	r0, r4
 800d3b2:	d10b      	bne.n	800d3cc <_free_r+0x6c>
 800d3b4:	6820      	ldr	r0, [r4, #0]
 800d3b6:	4401      	add	r1, r0
 800d3b8:	1850      	adds	r0, r2, r1
 800d3ba:	4283      	cmp	r3, r0
 800d3bc:	6011      	str	r1, [r2, #0]
 800d3be:	d1e0      	bne.n	800d382 <_free_r+0x22>
 800d3c0:	6818      	ldr	r0, [r3, #0]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	6053      	str	r3, [r2, #4]
 800d3c6:	4408      	add	r0, r1
 800d3c8:	6010      	str	r0, [r2, #0]
 800d3ca:	e7da      	b.n	800d382 <_free_r+0x22>
 800d3cc:	d902      	bls.n	800d3d4 <_free_r+0x74>
 800d3ce:	230c      	movs	r3, #12
 800d3d0:	602b      	str	r3, [r5, #0]
 800d3d2:	e7d6      	b.n	800d382 <_free_r+0x22>
 800d3d4:	6820      	ldr	r0, [r4, #0]
 800d3d6:	1821      	adds	r1, r4, r0
 800d3d8:	428b      	cmp	r3, r1
 800d3da:	bf04      	itt	eq
 800d3dc:	6819      	ldreq	r1, [r3, #0]
 800d3de:	685b      	ldreq	r3, [r3, #4]
 800d3e0:	6063      	str	r3, [r4, #4]
 800d3e2:	bf04      	itt	eq
 800d3e4:	1809      	addeq	r1, r1, r0
 800d3e6:	6021      	streq	r1, [r4, #0]
 800d3e8:	6054      	str	r4, [r2, #4]
 800d3ea:	e7ca      	b.n	800d382 <_free_r+0x22>
 800d3ec:	bd38      	pop	{r3, r4, r5, pc}
 800d3ee:	bf00      	nop
 800d3f0:	20007930 	.word	0x20007930

0800d3f4 <malloc>:
 800d3f4:	4b02      	ldr	r3, [pc, #8]	@ (800d400 <malloc+0xc>)
 800d3f6:	4601      	mov	r1, r0
 800d3f8:	6818      	ldr	r0, [r3, #0]
 800d3fa:	f000 b825 	b.w	800d448 <_malloc_r>
 800d3fe:	bf00      	nop
 800d400:	2000041c 	.word	0x2000041c

0800d404 <sbrk_aligned>:
 800d404:	b570      	push	{r4, r5, r6, lr}
 800d406:	4e0f      	ldr	r6, [pc, #60]	@ (800d444 <sbrk_aligned+0x40>)
 800d408:	460c      	mov	r4, r1
 800d40a:	6831      	ldr	r1, [r6, #0]
 800d40c:	4605      	mov	r5, r0
 800d40e:	b911      	cbnz	r1, 800d416 <sbrk_aligned+0x12>
 800d410:	f000 fcd4 	bl	800ddbc <_sbrk_r>
 800d414:	6030      	str	r0, [r6, #0]
 800d416:	4621      	mov	r1, r4
 800d418:	4628      	mov	r0, r5
 800d41a:	f000 fccf 	bl	800ddbc <_sbrk_r>
 800d41e:	1c43      	adds	r3, r0, #1
 800d420:	d103      	bne.n	800d42a <sbrk_aligned+0x26>
 800d422:	f04f 34ff 	mov.w	r4, #4294967295
 800d426:	4620      	mov	r0, r4
 800d428:	bd70      	pop	{r4, r5, r6, pc}
 800d42a:	1cc4      	adds	r4, r0, #3
 800d42c:	f024 0403 	bic.w	r4, r4, #3
 800d430:	42a0      	cmp	r0, r4
 800d432:	d0f8      	beq.n	800d426 <sbrk_aligned+0x22>
 800d434:	1a21      	subs	r1, r4, r0
 800d436:	4628      	mov	r0, r5
 800d438:	f000 fcc0 	bl	800ddbc <_sbrk_r>
 800d43c:	3001      	adds	r0, #1
 800d43e:	d1f2      	bne.n	800d426 <sbrk_aligned+0x22>
 800d440:	e7ef      	b.n	800d422 <sbrk_aligned+0x1e>
 800d442:	bf00      	nop
 800d444:	2000792c 	.word	0x2000792c

0800d448 <_malloc_r>:
 800d448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d44c:	1ccd      	adds	r5, r1, #3
 800d44e:	f025 0503 	bic.w	r5, r5, #3
 800d452:	3508      	adds	r5, #8
 800d454:	2d0c      	cmp	r5, #12
 800d456:	bf38      	it	cc
 800d458:	250c      	movcc	r5, #12
 800d45a:	2d00      	cmp	r5, #0
 800d45c:	4606      	mov	r6, r0
 800d45e:	db01      	blt.n	800d464 <_malloc_r+0x1c>
 800d460:	42a9      	cmp	r1, r5
 800d462:	d904      	bls.n	800d46e <_malloc_r+0x26>
 800d464:	230c      	movs	r3, #12
 800d466:	6033      	str	r3, [r6, #0]
 800d468:	2000      	movs	r0, #0
 800d46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d46e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d544 <_malloc_r+0xfc>
 800d472:	f000 f869 	bl	800d548 <__malloc_lock>
 800d476:	f8d8 3000 	ldr.w	r3, [r8]
 800d47a:	461c      	mov	r4, r3
 800d47c:	bb44      	cbnz	r4, 800d4d0 <_malloc_r+0x88>
 800d47e:	4629      	mov	r1, r5
 800d480:	4630      	mov	r0, r6
 800d482:	f7ff ffbf 	bl	800d404 <sbrk_aligned>
 800d486:	1c43      	adds	r3, r0, #1
 800d488:	4604      	mov	r4, r0
 800d48a:	d158      	bne.n	800d53e <_malloc_r+0xf6>
 800d48c:	f8d8 4000 	ldr.w	r4, [r8]
 800d490:	4627      	mov	r7, r4
 800d492:	2f00      	cmp	r7, #0
 800d494:	d143      	bne.n	800d51e <_malloc_r+0xd6>
 800d496:	2c00      	cmp	r4, #0
 800d498:	d04b      	beq.n	800d532 <_malloc_r+0xea>
 800d49a:	6823      	ldr	r3, [r4, #0]
 800d49c:	4639      	mov	r1, r7
 800d49e:	4630      	mov	r0, r6
 800d4a0:	eb04 0903 	add.w	r9, r4, r3
 800d4a4:	f000 fc8a 	bl	800ddbc <_sbrk_r>
 800d4a8:	4581      	cmp	r9, r0
 800d4aa:	d142      	bne.n	800d532 <_malloc_r+0xea>
 800d4ac:	6821      	ldr	r1, [r4, #0]
 800d4ae:	1a6d      	subs	r5, r5, r1
 800d4b0:	4629      	mov	r1, r5
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	f7ff ffa6 	bl	800d404 <sbrk_aligned>
 800d4b8:	3001      	adds	r0, #1
 800d4ba:	d03a      	beq.n	800d532 <_malloc_r+0xea>
 800d4bc:	6823      	ldr	r3, [r4, #0]
 800d4be:	442b      	add	r3, r5
 800d4c0:	6023      	str	r3, [r4, #0]
 800d4c2:	f8d8 3000 	ldr.w	r3, [r8]
 800d4c6:	685a      	ldr	r2, [r3, #4]
 800d4c8:	bb62      	cbnz	r2, 800d524 <_malloc_r+0xdc>
 800d4ca:	f8c8 7000 	str.w	r7, [r8]
 800d4ce:	e00f      	b.n	800d4f0 <_malloc_r+0xa8>
 800d4d0:	6822      	ldr	r2, [r4, #0]
 800d4d2:	1b52      	subs	r2, r2, r5
 800d4d4:	d420      	bmi.n	800d518 <_malloc_r+0xd0>
 800d4d6:	2a0b      	cmp	r2, #11
 800d4d8:	d917      	bls.n	800d50a <_malloc_r+0xc2>
 800d4da:	1961      	adds	r1, r4, r5
 800d4dc:	42a3      	cmp	r3, r4
 800d4de:	6025      	str	r5, [r4, #0]
 800d4e0:	bf18      	it	ne
 800d4e2:	6059      	strne	r1, [r3, #4]
 800d4e4:	6863      	ldr	r3, [r4, #4]
 800d4e6:	bf08      	it	eq
 800d4e8:	f8c8 1000 	streq.w	r1, [r8]
 800d4ec:	5162      	str	r2, [r4, r5]
 800d4ee:	604b      	str	r3, [r1, #4]
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f000 f82f 	bl	800d554 <__malloc_unlock>
 800d4f6:	f104 000b 	add.w	r0, r4, #11
 800d4fa:	1d23      	adds	r3, r4, #4
 800d4fc:	f020 0007 	bic.w	r0, r0, #7
 800d500:	1ac2      	subs	r2, r0, r3
 800d502:	bf1c      	itt	ne
 800d504:	1a1b      	subne	r3, r3, r0
 800d506:	50a3      	strne	r3, [r4, r2]
 800d508:	e7af      	b.n	800d46a <_malloc_r+0x22>
 800d50a:	6862      	ldr	r2, [r4, #4]
 800d50c:	42a3      	cmp	r3, r4
 800d50e:	bf0c      	ite	eq
 800d510:	f8c8 2000 	streq.w	r2, [r8]
 800d514:	605a      	strne	r2, [r3, #4]
 800d516:	e7eb      	b.n	800d4f0 <_malloc_r+0xa8>
 800d518:	4623      	mov	r3, r4
 800d51a:	6864      	ldr	r4, [r4, #4]
 800d51c:	e7ae      	b.n	800d47c <_malloc_r+0x34>
 800d51e:	463c      	mov	r4, r7
 800d520:	687f      	ldr	r7, [r7, #4]
 800d522:	e7b6      	b.n	800d492 <_malloc_r+0x4a>
 800d524:	461a      	mov	r2, r3
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	42a3      	cmp	r3, r4
 800d52a:	d1fb      	bne.n	800d524 <_malloc_r+0xdc>
 800d52c:	2300      	movs	r3, #0
 800d52e:	6053      	str	r3, [r2, #4]
 800d530:	e7de      	b.n	800d4f0 <_malloc_r+0xa8>
 800d532:	230c      	movs	r3, #12
 800d534:	6033      	str	r3, [r6, #0]
 800d536:	4630      	mov	r0, r6
 800d538:	f000 f80c 	bl	800d554 <__malloc_unlock>
 800d53c:	e794      	b.n	800d468 <_malloc_r+0x20>
 800d53e:	6005      	str	r5, [r0, #0]
 800d540:	e7d6      	b.n	800d4f0 <_malloc_r+0xa8>
 800d542:	bf00      	nop
 800d544:	20007930 	.word	0x20007930

0800d548 <__malloc_lock>:
 800d548:	4801      	ldr	r0, [pc, #4]	@ (800d550 <__malloc_lock+0x8>)
 800d54a:	f7ff b8ac 	b.w	800c6a6 <__retarget_lock_acquire_recursive>
 800d54e:	bf00      	nop
 800d550:	20007928 	.word	0x20007928

0800d554 <__malloc_unlock>:
 800d554:	4801      	ldr	r0, [pc, #4]	@ (800d55c <__malloc_unlock+0x8>)
 800d556:	f7ff b8a7 	b.w	800c6a8 <__retarget_lock_release_recursive>
 800d55a:	bf00      	nop
 800d55c:	20007928 	.word	0x20007928

0800d560 <_Balloc>:
 800d560:	b570      	push	{r4, r5, r6, lr}
 800d562:	69c6      	ldr	r6, [r0, #28]
 800d564:	4604      	mov	r4, r0
 800d566:	460d      	mov	r5, r1
 800d568:	b976      	cbnz	r6, 800d588 <_Balloc+0x28>
 800d56a:	2010      	movs	r0, #16
 800d56c:	f7ff ff42 	bl	800d3f4 <malloc>
 800d570:	4602      	mov	r2, r0
 800d572:	61e0      	str	r0, [r4, #28]
 800d574:	b920      	cbnz	r0, 800d580 <_Balloc+0x20>
 800d576:	4b18      	ldr	r3, [pc, #96]	@ (800d5d8 <_Balloc+0x78>)
 800d578:	4818      	ldr	r0, [pc, #96]	@ (800d5dc <_Balloc+0x7c>)
 800d57a:	216b      	movs	r1, #107	@ 0x6b
 800d57c:	f000 fc2e 	bl	800dddc <__assert_func>
 800d580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d584:	6006      	str	r6, [r0, #0]
 800d586:	60c6      	str	r6, [r0, #12]
 800d588:	69e6      	ldr	r6, [r4, #28]
 800d58a:	68f3      	ldr	r3, [r6, #12]
 800d58c:	b183      	cbz	r3, 800d5b0 <_Balloc+0x50>
 800d58e:	69e3      	ldr	r3, [r4, #28]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d596:	b9b8      	cbnz	r0, 800d5c8 <_Balloc+0x68>
 800d598:	2101      	movs	r1, #1
 800d59a:	fa01 f605 	lsl.w	r6, r1, r5
 800d59e:	1d72      	adds	r2, r6, #5
 800d5a0:	0092      	lsls	r2, r2, #2
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	f000 fc38 	bl	800de18 <_calloc_r>
 800d5a8:	b160      	cbz	r0, 800d5c4 <_Balloc+0x64>
 800d5aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5ae:	e00e      	b.n	800d5ce <_Balloc+0x6e>
 800d5b0:	2221      	movs	r2, #33	@ 0x21
 800d5b2:	2104      	movs	r1, #4
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	f000 fc2f 	bl	800de18 <_calloc_r>
 800d5ba:	69e3      	ldr	r3, [r4, #28]
 800d5bc:	60f0      	str	r0, [r6, #12]
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1e4      	bne.n	800d58e <_Balloc+0x2e>
 800d5c4:	2000      	movs	r0, #0
 800d5c6:	bd70      	pop	{r4, r5, r6, pc}
 800d5c8:	6802      	ldr	r2, [r0, #0]
 800d5ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5d4:	e7f7      	b.n	800d5c6 <_Balloc+0x66>
 800d5d6:	bf00      	nop
 800d5d8:	0800f4d9 	.word	0x0800f4d9
 800d5dc:	0800f559 	.word	0x0800f559

0800d5e0 <_Bfree>:
 800d5e0:	b570      	push	{r4, r5, r6, lr}
 800d5e2:	69c6      	ldr	r6, [r0, #28]
 800d5e4:	4605      	mov	r5, r0
 800d5e6:	460c      	mov	r4, r1
 800d5e8:	b976      	cbnz	r6, 800d608 <_Bfree+0x28>
 800d5ea:	2010      	movs	r0, #16
 800d5ec:	f7ff ff02 	bl	800d3f4 <malloc>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	61e8      	str	r0, [r5, #28]
 800d5f4:	b920      	cbnz	r0, 800d600 <_Bfree+0x20>
 800d5f6:	4b09      	ldr	r3, [pc, #36]	@ (800d61c <_Bfree+0x3c>)
 800d5f8:	4809      	ldr	r0, [pc, #36]	@ (800d620 <_Bfree+0x40>)
 800d5fa:	218f      	movs	r1, #143	@ 0x8f
 800d5fc:	f000 fbee 	bl	800dddc <__assert_func>
 800d600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d604:	6006      	str	r6, [r0, #0]
 800d606:	60c6      	str	r6, [r0, #12]
 800d608:	b13c      	cbz	r4, 800d61a <_Bfree+0x3a>
 800d60a:	69eb      	ldr	r3, [r5, #28]
 800d60c:	6862      	ldr	r2, [r4, #4]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d614:	6021      	str	r1, [r4, #0]
 800d616:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d61a:	bd70      	pop	{r4, r5, r6, pc}
 800d61c:	0800f4d9 	.word	0x0800f4d9
 800d620:	0800f559 	.word	0x0800f559

0800d624 <__multadd>:
 800d624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d628:	690d      	ldr	r5, [r1, #16]
 800d62a:	4607      	mov	r7, r0
 800d62c:	460c      	mov	r4, r1
 800d62e:	461e      	mov	r6, r3
 800d630:	f101 0c14 	add.w	ip, r1, #20
 800d634:	2000      	movs	r0, #0
 800d636:	f8dc 3000 	ldr.w	r3, [ip]
 800d63a:	b299      	uxth	r1, r3
 800d63c:	fb02 6101 	mla	r1, r2, r1, r6
 800d640:	0c1e      	lsrs	r6, r3, #16
 800d642:	0c0b      	lsrs	r3, r1, #16
 800d644:	fb02 3306 	mla	r3, r2, r6, r3
 800d648:	b289      	uxth	r1, r1
 800d64a:	3001      	adds	r0, #1
 800d64c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d650:	4285      	cmp	r5, r0
 800d652:	f84c 1b04 	str.w	r1, [ip], #4
 800d656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d65a:	dcec      	bgt.n	800d636 <__multadd+0x12>
 800d65c:	b30e      	cbz	r6, 800d6a2 <__multadd+0x7e>
 800d65e:	68a3      	ldr	r3, [r4, #8]
 800d660:	42ab      	cmp	r3, r5
 800d662:	dc19      	bgt.n	800d698 <__multadd+0x74>
 800d664:	6861      	ldr	r1, [r4, #4]
 800d666:	4638      	mov	r0, r7
 800d668:	3101      	adds	r1, #1
 800d66a:	f7ff ff79 	bl	800d560 <_Balloc>
 800d66e:	4680      	mov	r8, r0
 800d670:	b928      	cbnz	r0, 800d67e <__multadd+0x5a>
 800d672:	4602      	mov	r2, r0
 800d674:	4b0c      	ldr	r3, [pc, #48]	@ (800d6a8 <__multadd+0x84>)
 800d676:	480d      	ldr	r0, [pc, #52]	@ (800d6ac <__multadd+0x88>)
 800d678:	21ba      	movs	r1, #186	@ 0xba
 800d67a:	f000 fbaf 	bl	800dddc <__assert_func>
 800d67e:	6922      	ldr	r2, [r4, #16]
 800d680:	3202      	adds	r2, #2
 800d682:	f104 010c 	add.w	r1, r4, #12
 800d686:	0092      	lsls	r2, r2, #2
 800d688:	300c      	adds	r0, #12
 800d68a:	f7ff f80e 	bl	800c6aa <memcpy>
 800d68e:	4621      	mov	r1, r4
 800d690:	4638      	mov	r0, r7
 800d692:	f7ff ffa5 	bl	800d5e0 <_Bfree>
 800d696:	4644      	mov	r4, r8
 800d698:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d69c:	3501      	adds	r5, #1
 800d69e:	615e      	str	r6, [r3, #20]
 800d6a0:	6125      	str	r5, [r4, #16]
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6a8:	0800f548 	.word	0x0800f548
 800d6ac:	0800f559 	.word	0x0800f559

0800d6b0 <__hi0bits>:
 800d6b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	bf36      	itet	cc
 800d6b8:	0403      	lslcc	r3, r0, #16
 800d6ba:	2000      	movcs	r0, #0
 800d6bc:	2010      	movcc	r0, #16
 800d6be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d6c2:	bf3c      	itt	cc
 800d6c4:	021b      	lslcc	r3, r3, #8
 800d6c6:	3008      	addcc	r0, #8
 800d6c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d6cc:	bf3c      	itt	cc
 800d6ce:	011b      	lslcc	r3, r3, #4
 800d6d0:	3004      	addcc	r0, #4
 800d6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6d6:	bf3c      	itt	cc
 800d6d8:	009b      	lslcc	r3, r3, #2
 800d6da:	3002      	addcc	r0, #2
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	db05      	blt.n	800d6ec <__hi0bits+0x3c>
 800d6e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d6e4:	f100 0001 	add.w	r0, r0, #1
 800d6e8:	bf08      	it	eq
 800d6ea:	2020      	moveq	r0, #32
 800d6ec:	4770      	bx	lr

0800d6ee <__lo0bits>:
 800d6ee:	6803      	ldr	r3, [r0, #0]
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	f013 0007 	ands.w	r0, r3, #7
 800d6f6:	d00b      	beq.n	800d710 <__lo0bits+0x22>
 800d6f8:	07d9      	lsls	r1, r3, #31
 800d6fa:	d421      	bmi.n	800d740 <__lo0bits+0x52>
 800d6fc:	0798      	lsls	r0, r3, #30
 800d6fe:	bf49      	itett	mi
 800d700:	085b      	lsrmi	r3, r3, #1
 800d702:	089b      	lsrpl	r3, r3, #2
 800d704:	2001      	movmi	r0, #1
 800d706:	6013      	strmi	r3, [r2, #0]
 800d708:	bf5c      	itt	pl
 800d70a:	6013      	strpl	r3, [r2, #0]
 800d70c:	2002      	movpl	r0, #2
 800d70e:	4770      	bx	lr
 800d710:	b299      	uxth	r1, r3
 800d712:	b909      	cbnz	r1, 800d718 <__lo0bits+0x2a>
 800d714:	0c1b      	lsrs	r3, r3, #16
 800d716:	2010      	movs	r0, #16
 800d718:	b2d9      	uxtb	r1, r3
 800d71a:	b909      	cbnz	r1, 800d720 <__lo0bits+0x32>
 800d71c:	3008      	adds	r0, #8
 800d71e:	0a1b      	lsrs	r3, r3, #8
 800d720:	0719      	lsls	r1, r3, #28
 800d722:	bf04      	itt	eq
 800d724:	091b      	lsreq	r3, r3, #4
 800d726:	3004      	addeq	r0, #4
 800d728:	0799      	lsls	r1, r3, #30
 800d72a:	bf04      	itt	eq
 800d72c:	089b      	lsreq	r3, r3, #2
 800d72e:	3002      	addeq	r0, #2
 800d730:	07d9      	lsls	r1, r3, #31
 800d732:	d403      	bmi.n	800d73c <__lo0bits+0x4e>
 800d734:	085b      	lsrs	r3, r3, #1
 800d736:	f100 0001 	add.w	r0, r0, #1
 800d73a:	d003      	beq.n	800d744 <__lo0bits+0x56>
 800d73c:	6013      	str	r3, [r2, #0]
 800d73e:	4770      	bx	lr
 800d740:	2000      	movs	r0, #0
 800d742:	4770      	bx	lr
 800d744:	2020      	movs	r0, #32
 800d746:	4770      	bx	lr

0800d748 <__i2b>:
 800d748:	b510      	push	{r4, lr}
 800d74a:	460c      	mov	r4, r1
 800d74c:	2101      	movs	r1, #1
 800d74e:	f7ff ff07 	bl	800d560 <_Balloc>
 800d752:	4602      	mov	r2, r0
 800d754:	b928      	cbnz	r0, 800d762 <__i2b+0x1a>
 800d756:	4b05      	ldr	r3, [pc, #20]	@ (800d76c <__i2b+0x24>)
 800d758:	4805      	ldr	r0, [pc, #20]	@ (800d770 <__i2b+0x28>)
 800d75a:	f240 1145 	movw	r1, #325	@ 0x145
 800d75e:	f000 fb3d 	bl	800dddc <__assert_func>
 800d762:	2301      	movs	r3, #1
 800d764:	6144      	str	r4, [r0, #20]
 800d766:	6103      	str	r3, [r0, #16]
 800d768:	bd10      	pop	{r4, pc}
 800d76a:	bf00      	nop
 800d76c:	0800f548 	.word	0x0800f548
 800d770:	0800f559 	.word	0x0800f559

0800d774 <__multiply>:
 800d774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d778:	4614      	mov	r4, r2
 800d77a:	690a      	ldr	r2, [r1, #16]
 800d77c:	6923      	ldr	r3, [r4, #16]
 800d77e:	429a      	cmp	r2, r3
 800d780:	bfa8      	it	ge
 800d782:	4623      	movge	r3, r4
 800d784:	460f      	mov	r7, r1
 800d786:	bfa4      	itt	ge
 800d788:	460c      	movge	r4, r1
 800d78a:	461f      	movge	r7, r3
 800d78c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d790:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d794:	68a3      	ldr	r3, [r4, #8]
 800d796:	6861      	ldr	r1, [r4, #4]
 800d798:	eb0a 0609 	add.w	r6, sl, r9
 800d79c:	42b3      	cmp	r3, r6
 800d79e:	b085      	sub	sp, #20
 800d7a0:	bfb8      	it	lt
 800d7a2:	3101      	addlt	r1, #1
 800d7a4:	f7ff fedc 	bl	800d560 <_Balloc>
 800d7a8:	b930      	cbnz	r0, 800d7b8 <__multiply+0x44>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	4b44      	ldr	r3, [pc, #272]	@ (800d8c0 <__multiply+0x14c>)
 800d7ae:	4845      	ldr	r0, [pc, #276]	@ (800d8c4 <__multiply+0x150>)
 800d7b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d7b4:	f000 fb12 	bl	800dddc <__assert_func>
 800d7b8:	f100 0514 	add.w	r5, r0, #20
 800d7bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d7c0:	462b      	mov	r3, r5
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	4543      	cmp	r3, r8
 800d7c6:	d321      	bcc.n	800d80c <__multiply+0x98>
 800d7c8:	f107 0114 	add.w	r1, r7, #20
 800d7cc:	f104 0214 	add.w	r2, r4, #20
 800d7d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d7d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d7d8:	9302      	str	r3, [sp, #8]
 800d7da:	1b13      	subs	r3, r2, r4
 800d7dc:	3b15      	subs	r3, #21
 800d7de:	f023 0303 	bic.w	r3, r3, #3
 800d7e2:	3304      	adds	r3, #4
 800d7e4:	f104 0715 	add.w	r7, r4, #21
 800d7e8:	42ba      	cmp	r2, r7
 800d7ea:	bf38      	it	cc
 800d7ec:	2304      	movcc	r3, #4
 800d7ee:	9301      	str	r3, [sp, #4]
 800d7f0:	9b02      	ldr	r3, [sp, #8]
 800d7f2:	9103      	str	r1, [sp, #12]
 800d7f4:	428b      	cmp	r3, r1
 800d7f6:	d80c      	bhi.n	800d812 <__multiply+0x9e>
 800d7f8:	2e00      	cmp	r6, #0
 800d7fa:	dd03      	ble.n	800d804 <__multiply+0x90>
 800d7fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d800:	2b00      	cmp	r3, #0
 800d802:	d05b      	beq.n	800d8bc <__multiply+0x148>
 800d804:	6106      	str	r6, [r0, #16]
 800d806:	b005      	add	sp, #20
 800d808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d80c:	f843 2b04 	str.w	r2, [r3], #4
 800d810:	e7d8      	b.n	800d7c4 <__multiply+0x50>
 800d812:	f8b1 a000 	ldrh.w	sl, [r1]
 800d816:	f1ba 0f00 	cmp.w	sl, #0
 800d81a:	d024      	beq.n	800d866 <__multiply+0xf2>
 800d81c:	f104 0e14 	add.w	lr, r4, #20
 800d820:	46a9      	mov	r9, r5
 800d822:	f04f 0c00 	mov.w	ip, #0
 800d826:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d82a:	f8d9 3000 	ldr.w	r3, [r9]
 800d82e:	fa1f fb87 	uxth.w	fp, r7
 800d832:	b29b      	uxth	r3, r3
 800d834:	fb0a 330b 	mla	r3, sl, fp, r3
 800d838:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d83c:	f8d9 7000 	ldr.w	r7, [r9]
 800d840:	4463      	add	r3, ip
 800d842:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d846:	fb0a c70b 	mla	r7, sl, fp, ip
 800d84a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d84e:	b29b      	uxth	r3, r3
 800d850:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d854:	4572      	cmp	r2, lr
 800d856:	f849 3b04 	str.w	r3, [r9], #4
 800d85a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d85e:	d8e2      	bhi.n	800d826 <__multiply+0xb2>
 800d860:	9b01      	ldr	r3, [sp, #4]
 800d862:	f845 c003 	str.w	ip, [r5, r3]
 800d866:	9b03      	ldr	r3, [sp, #12]
 800d868:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d86c:	3104      	adds	r1, #4
 800d86e:	f1b9 0f00 	cmp.w	r9, #0
 800d872:	d021      	beq.n	800d8b8 <__multiply+0x144>
 800d874:	682b      	ldr	r3, [r5, #0]
 800d876:	f104 0c14 	add.w	ip, r4, #20
 800d87a:	46ae      	mov	lr, r5
 800d87c:	f04f 0a00 	mov.w	sl, #0
 800d880:	f8bc b000 	ldrh.w	fp, [ip]
 800d884:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d888:	fb09 770b 	mla	r7, r9, fp, r7
 800d88c:	4457      	add	r7, sl
 800d88e:	b29b      	uxth	r3, r3
 800d890:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d894:	f84e 3b04 	str.w	r3, [lr], #4
 800d898:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d89c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d8a0:	f8be 3000 	ldrh.w	r3, [lr]
 800d8a4:	fb09 330a 	mla	r3, r9, sl, r3
 800d8a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d8ac:	4562      	cmp	r2, ip
 800d8ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d8b2:	d8e5      	bhi.n	800d880 <__multiply+0x10c>
 800d8b4:	9f01      	ldr	r7, [sp, #4]
 800d8b6:	51eb      	str	r3, [r5, r7]
 800d8b8:	3504      	adds	r5, #4
 800d8ba:	e799      	b.n	800d7f0 <__multiply+0x7c>
 800d8bc:	3e01      	subs	r6, #1
 800d8be:	e79b      	b.n	800d7f8 <__multiply+0x84>
 800d8c0:	0800f548 	.word	0x0800f548
 800d8c4:	0800f559 	.word	0x0800f559

0800d8c8 <__pow5mult>:
 800d8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8cc:	4615      	mov	r5, r2
 800d8ce:	f012 0203 	ands.w	r2, r2, #3
 800d8d2:	4607      	mov	r7, r0
 800d8d4:	460e      	mov	r6, r1
 800d8d6:	d007      	beq.n	800d8e8 <__pow5mult+0x20>
 800d8d8:	4c25      	ldr	r4, [pc, #148]	@ (800d970 <__pow5mult+0xa8>)
 800d8da:	3a01      	subs	r2, #1
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d8e2:	f7ff fe9f 	bl	800d624 <__multadd>
 800d8e6:	4606      	mov	r6, r0
 800d8e8:	10ad      	asrs	r5, r5, #2
 800d8ea:	d03d      	beq.n	800d968 <__pow5mult+0xa0>
 800d8ec:	69fc      	ldr	r4, [r7, #28]
 800d8ee:	b97c      	cbnz	r4, 800d910 <__pow5mult+0x48>
 800d8f0:	2010      	movs	r0, #16
 800d8f2:	f7ff fd7f 	bl	800d3f4 <malloc>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	61f8      	str	r0, [r7, #28]
 800d8fa:	b928      	cbnz	r0, 800d908 <__pow5mult+0x40>
 800d8fc:	4b1d      	ldr	r3, [pc, #116]	@ (800d974 <__pow5mult+0xac>)
 800d8fe:	481e      	ldr	r0, [pc, #120]	@ (800d978 <__pow5mult+0xb0>)
 800d900:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d904:	f000 fa6a 	bl	800dddc <__assert_func>
 800d908:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d90c:	6004      	str	r4, [r0, #0]
 800d90e:	60c4      	str	r4, [r0, #12]
 800d910:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d914:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d918:	b94c      	cbnz	r4, 800d92e <__pow5mult+0x66>
 800d91a:	f240 2171 	movw	r1, #625	@ 0x271
 800d91e:	4638      	mov	r0, r7
 800d920:	f7ff ff12 	bl	800d748 <__i2b>
 800d924:	2300      	movs	r3, #0
 800d926:	f8c8 0008 	str.w	r0, [r8, #8]
 800d92a:	4604      	mov	r4, r0
 800d92c:	6003      	str	r3, [r0, #0]
 800d92e:	f04f 0900 	mov.w	r9, #0
 800d932:	07eb      	lsls	r3, r5, #31
 800d934:	d50a      	bpl.n	800d94c <__pow5mult+0x84>
 800d936:	4631      	mov	r1, r6
 800d938:	4622      	mov	r2, r4
 800d93a:	4638      	mov	r0, r7
 800d93c:	f7ff ff1a 	bl	800d774 <__multiply>
 800d940:	4631      	mov	r1, r6
 800d942:	4680      	mov	r8, r0
 800d944:	4638      	mov	r0, r7
 800d946:	f7ff fe4b 	bl	800d5e0 <_Bfree>
 800d94a:	4646      	mov	r6, r8
 800d94c:	106d      	asrs	r5, r5, #1
 800d94e:	d00b      	beq.n	800d968 <__pow5mult+0xa0>
 800d950:	6820      	ldr	r0, [r4, #0]
 800d952:	b938      	cbnz	r0, 800d964 <__pow5mult+0x9c>
 800d954:	4622      	mov	r2, r4
 800d956:	4621      	mov	r1, r4
 800d958:	4638      	mov	r0, r7
 800d95a:	f7ff ff0b 	bl	800d774 <__multiply>
 800d95e:	6020      	str	r0, [r4, #0]
 800d960:	f8c0 9000 	str.w	r9, [r0]
 800d964:	4604      	mov	r4, r0
 800d966:	e7e4      	b.n	800d932 <__pow5mult+0x6a>
 800d968:	4630      	mov	r0, r6
 800d96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d96e:	bf00      	nop
 800d970:	0800f5b4 	.word	0x0800f5b4
 800d974:	0800f4d9 	.word	0x0800f4d9
 800d978:	0800f559 	.word	0x0800f559

0800d97c <__lshift>:
 800d97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d980:	460c      	mov	r4, r1
 800d982:	6849      	ldr	r1, [r1, #4]
 800d984:	6923      	ldr	r3, [r4, #16]
 800d986:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d98a:	68a3      	ldr	r3, [r4, #8]
 800d98c:	4607      	mov	r7, r0
 800d98e:	4691      	mov	r9, r2
 800d990:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d994:	f108 0601 	add.w	r6, r8, #1
 800d998:	42b3      	cmp	r3, r6
 800d99a:	db0b      	blt.n	800d9b4 <__lshift+0x38>
 800d99c:	4638      	mov	r0, r7
 800d99e:	f7ff fddf 	bl	800d560 <_Balloc>
 800d9a2:	4605      	mov	r5, r0
 800d9a4:	b948      	cbnz	r0, 800d9ba <__lshift+0x3e>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	4b28      	ldr	r3, [pc, #160]	@ (800da4c <__lshift+0xd0>)
 800d9aa:	4829      	ldr	r0, [pc, #164]	@ (800da50 <__lshift+0xd4>)
 800d9ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d9b0:	f000 fa14 	bl	800dddc <__assert_func>
 800d9b4:	3101      	adds	r1, #1
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	e7ee      	b.n	800d998 <__lshift+0x1c>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	f100 0114 	add.w	r1, r0, #20
 800d9c0:	f100 0210 	add.w	r2, r0, #16
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	4553      	cmp	r3, sl
 800d9c8:	db33      	blt.n	800da32 <__lshift+0xb6>
 800d9ca:	6920      	ldr	r0, [r4, #16]
 800d9cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d9d0:	f104 0314 	add.w	r3, r4, #20
 800d9d4:	f019 091f 	ands.w	r9, r9, #31
 800d9d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d9dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d9e0:	d02b      	beq.n	800da3a <__lshift+0xbe>
 800d9e2:	f1c9 0e20 	rsb	lr, r9, #32
 800d9e6:	468a      	mov	sl, r1
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	6818      	ldr	r0, [r3, #0]
 800d9ec:	fa00 f009 	lsl.w	r0, r0, r9
 800d9f0:	4310      	orrs	r0, r2
 800d9f2:	f84a 0b04 	str.w	r0, [sl], #4
 800d9f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9fa:	459c      	cmp	ip, r3
 800d9fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800da00:	d8f3      	bhi.n	800d9ea <__lshift+0x6e>
 800da02:	ebac 0304 	sub.w	r3, ip, r4
 800da06:	3b15      	subs	r3, #21
 800da08:	f023 0303 	bic.w	r3, r3, #3
 800da0c:	3304      	adds	r3, #4
 800da0e:	f104 0015 	add.w	r0, r4, #21
 800da12:	4584      	cmp	ip, r0
 800da14:	bf38      	it	cc
 800da16:	2304      	movcc	r3, #4
 800da18:	50ca      	str	r2, [r1, r3]
 800da1a:	b10a      	cbz	r2, 800da20 <__lshift+0xa4>
 800da1c:	f108 0602 	add.w	r6, r8, #2
 800da20:	3e01      	subs	r6, #1
 800da22:	4638      	mov	r0, r7
 800da24:	612e      	str	r6, [r5, #16]
 800da26:	4621      	mov	r1, r4
 800da28:	f7ff fdda 	bl	800d5e0 <_Bfree>
 800da2c:	4628      	mov	r0, r5
 800da2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da32:	f842 0f04 	str.w	r0, [r2, #4]!
 800da36:	3301      	adds	r3, #1
 800da38:	e7c5      	b.n	800d9c6 <__lshift+0x4a>
 800da3a:	3904      	subs	r1, #4
 800da3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da40:	f841 2f04 	str.w	r2, [r1, #4]!
 800da44:	459c      	cmp	ip, r3
 800da46:	d8f9      	bhi.n	800da3c <__lshift+0xc0>
 800da48:	e7ea      	b.n	800da20 <__lshift+0xa4>
 800da4a:	bf00      	nop
 800da4c:	0800f548 	.word	0x0800f548
 800da50:	0800f559 	.word	0x0800f559

0800da54 <__mcmp>:
 800da54:	690a      	ldr	r2, [r1, #16]
 800da56:	4603      	mov	r3, r0
 800da58:	6900      	ldr	r0, [r0, #16]
 800da5a:	1a80      	subs	r0, r0, r2
 800da5c:	b530      	push	{r4, r5, lr}
 800da5e:	d10e      	bne.n	800da7e <__mcmp+0x2a>
 800da60:	3314      	adds	r3, #20
 800da62:	3114      	adds	r1, #20
 800da64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800da68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800da6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800da70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800da74:	4295      	cmp	r5, r2
 800da76:	d003      	beq.n	800da80 <__mcmp+0x2c>
 800da78:	d205      	bcs.n	800da86 <__mcmp+0x32>
 800da7a:	f04f 30ff 	mov.w	r0, #4294967295
 800da7e:	bd30      	pop	{r4, r5, pc}
 800da80:	42a3      	cmp	r3, r4
 800da82:	d3f3      	bcc.n	800da6c <__mcmp+0x18>
 800da84:	e7fb      	b.n	800da7e <__mcmp+0x2a>
 800da86:	2001      	movs	r0, #1
 800da88:	e7f9      	b.n	800da7e <__mcmp+0x2a>
	...

0800da8c <__mdiff>:
 800da8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da90:	4689      	mov	r9, r1
 800da92:	4606      	mov	r6, r0
 800da94:	4611      	mov	r1, r2
 800da96:	4648      	mov	r0, r9
 800da98:	4614      	mov	r4, r2
 800da9a:	f7ff ffdb 	bl	800da54 <__mcmp>
 800da9e:	1e05      	subs	r5, r0, #0
 800daa0:	d112      	bne.n	800dac8 <__mdiff+0x3c>
 800daa2:	4629      	mov	r1, r5
 800daa4:	4630      	mov	r0, r6
 800daa6:	f7ff fd5b 	bl	800d560 <_Balloc>
 800daaa:	4602      	mov	r2, r0
 800daac:	b928      	cbnz	r0, 800daba <__mdiff+0x2e>
 800daae:	4b3f      	ldr	r3, [pc, #252]	@ (800dbac <__mdiff+0x120>)
 800dab0:	f240 2137 	movw	r1, #567	@ 0x237
 800dab4:	483e      	ldr	r0, [pc, #248]	@ (800dbb0 <__mdiff+0x124>)
 800dab6:	f000 f991 	bl	800dddc <__assert_func>
 800daba:	2301      	movs	r3, #1
 800dabc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dac0:	4610      	mov	r0, r2
 800dac2:	b003      	add	sp, #12
 800dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac8:	bfbc      	itt	lt
 800daca:	464b      	movlt	r3, r9
 800dacc:	46a1      	movlt	r9, r4
 800dace:	4630      	mov	r0, r6
 800dad0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dad4:	bfba      	itte	lt
 800dad6:	461c      	movlt	r4, r3
 800dad8:	2501      	movlt	r5, #1
 800dada:	2500      	movge	r5, #0
 800dadc:	f7ff fd40 	bl	800d560 <_Balloc>
 800dae0:	4602      	mov	r2, r0
 800dae2:	b918      	cbnz	r0, 800daec <__mdiff+0x60>
 800dae4:	4b31      	ldr	r3, [pc, #196]	@ (800dbac <__mdiff+0x120>)
 800dae6:	f240 2145 	movw	r1, #581	@ 0x245
 800daea:	e7e3      	b.n	800dab4 <__mdiff+0x28>
 800daec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800daf0:	6926      	ldr	r6, [r4, #16]
 800daf2:	60c5      	str	r5, [r0, #12]
 800daf4:	f109 0310 	add.w	r3, r9, #16
 800daf8:	f109 0514 	add.w	r5, r9, #20
 800dafc:	f104 0e14 	add.w	lr, r4, #20
 800db00:	f100 0b14 	add.w	fp, r0, #20
 800db04:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800db08:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800db0c:	9301      	str	r3, [sp, #4]
 800db0e:	46d9      	mov	r9, fp
 800db10:	f04f 0c00 	mov.w	ip, #0
 800db14:	9b01      	ldr	r3, [sp, #4]
 800db16:	f85e 0b04 	ldr.w	r0, [lr], #4
 800db1a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800db1e:	9301      	str	r3, [sp, #4]
 800db20:	fa1f f38a 	uxth.w	r3, sl
 800db24:	4619      	mov	r1, r3
 800db26:	b283      	uxth	r3, r0
 800db28:	1acb      	subs	r3, r1, r3
 800db2a:	0c00      	lsrs	r0, r0, #16
 800db2c:	4463      	add	r3, ip
 800db2e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800db32:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800db36:	b29b      	uxth	r3, r3
 800db38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800db3c:	4576      	cmp	r6, lr
 800db3e:	f849 3b04 	str.w	r3, [r9], #4
 800db42:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800db46:	d8e5      	bhi.n	800db14 <__mdiff+0x88>
 800db48:	1b33      	subs	r3, r6, r4
 800db4a:	3b15      	subs	r3, #21
 800db4c:	f023 0303 	bic.w	r3, r3, #3
 800db50:	3415      	adds	r4, #21
 800db52:	3304      	adds	r3, #4
 800db54:	42a6      	cmp	r6, r4
 800db56:	bf38      	it	cc
 800db58:	2304      	movcc	r3, #4
 800db5a:	441d      	add	r5, r3
 800db5c:	445b      	add	r3, fp
 800db5e:	461e      	mov	r6, r3
 800db60:	462c      	mov	r4, r5
 800db62:	4544      	cmp	r4, r8
 800db64:	d30e      	bcc.n	800db84 <__mdiff+0xf8>
 800db66:	f108 0103 	add.w	r1, r8, #3
 800db6a:	1b49      	subs	r1, r1, r5
 800db6c:	f021 0103 	bic.w	r1, r1, #3
 800db70:	3d03      	subs	r5, #3
 800db72:	45a8      	cmp	r8, r5
 800db74:	bf38      	it	cc
 800db76:	2100      	movcc	r1, #0
 800db78:	440b      	add	r3, r1
 800db7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800db7e:	b191      	cbz	r1, 800dba6 <__mdiff+0x11a>
 800db80:	6117      	str	r7, [r2, #16]
 800db82:	e79d      	b.n	800dac0 <__mdiff+0x34>
 800db84:	f854 1b04 	ldr.w	r1, [r4], #4
 800db88:	46e6      	mov	lr, ip
 800db8a:	0c08      	lsrs	r0, r1, #16
 800db8c:	fa1c fc81 	uxtah	ip, ip, r1
 800db90:	4471      	add	r1, lr
 800db92:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800db96:	b289      	uxth	r1, r1
 800db98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800db9c:	f846 1b04 	str.w	r1, [r6], #4
 800dba0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dba4:	e7dd      	b.n	800db62 <__mdiff+0xd6>
 800dba6:	3f01      	subs	r7, #1
 800dba8:	e7e7      	b.n	800db7a <__mdiff+0xee>
 800dbaa:	bf00      	nop
 800dbac:	0800f548 	.word	0x0800f548
 800dbb0:	0800f559 	.word	0x0800f559

0800dbb4 <__d2b>:
 800dbb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dbb8:	460f      	mov	r7, r1
 800dbba:	2101      	movs	r1, #1
 800dbbc:	ec59 8b10 	vmov	r8, r9, d0
 800dbc0:	4616      	mov	r6, r2
 800dbc2:	f7ff fccd 	bl	800d560 <_Balloc>
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	b930      	cbnz	r0, 800dbd8 <__d2b+0x24>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	4b23      	ldr	r3, [pc, #140]	@ (800dc5c <__d2b+0xa8>)
 800dbce:	4824      	ldr	r0, [pc, #144]	@ (800dc60 <__d2b+0xac>)
 800dbd0:	f240 310f 	movw	r1, #783	@ 0x30f
 800dbd4:	f000 f902 	bl	800dddc <__assert_func>
 800dbd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dbdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dbe0:	b10d      	cbz	r5, 800dbe6 <__d2b+0x32>
 800dbe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dbe6:	9301      	str	r3, [sp, #4]
 800dbe8:	f1b8 0300 	subs.w	r3, r8, #0
 800dbec:	d023      	beq.n	800dc36 <__d2b+0x82>
 800dbee:	4668      	mov	r0, sp
 800dbf0:	9300      	str	r3, [sp, #0]
 800dbf2:	f7ff fd7c 	bl	800d6ee <__lo0bits>
 800dbf6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dbfa:	b1d0      	cbz	r0, 800dc32 <__d2b+0x7e>
 800dbfc:	f1c0 0320 	rsb	r3, r0, #32
 800dc00:	fa02 f303 	lsl.w	r3, r2, r3
 800dc04:	430b      	orrs	r3, r1
 800dc06:	40c2      	lsrs	r2, r0
 800dc08:	6163      	str	r3, [r4, #20]
 800dc0a:	9201      	str	r2, [sp, #4]
 800dc0c:	9b01      	ldr	r3, [sp, #4]
 800dc0e:	61a3      	str	r3, [r4, #24]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	bf0c      	ite	eq
 800dc14:	2201      	moveq	r2, #1
 800dc16:	2202      	movne	r2, #2
 800dc18:	6122      	str	r2, [r4, #16]
 800dc1a:	b1a5      	cbz	r5, 800dc46 <__d2b+0x92>
 800dc1c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dc20:	4405      	add	r5, r0
 800dc22:	603d      	str	r5, [r7, #0]
 800dc24:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dc28:	6030      	str	r0, [r6, #0]
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	b003      	add	sp, #12
 800dc2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc32:	6161      	str	r1, [r4, #20]
 800dc34:	e7ea      	b.n	800dc0c <__d2b+0x58>
 800dc36:	a801      	add	r0, sp, #4
 800dc38:	f7ff fd59 	bl	800d6ee <__lo0bits>
 800dc3c:	9b01      	ldr	r3, [sp, #4]
 800dc3e:	6163      	str	r3, [r4, #20]
 800dc40:	3020      	adds	r0, #32
 800dc42:	2201      	movs	r2, #1
 800dc44:	e7e8      	b.n	800dc18 <__d2b+0x64>
 800dc46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dc4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dc4e:	6038      	str	r0, [r7, #0]
 800dc50:	6918      	ldr	r0, [r3, #16]
 800dc52:	f7ff fd2d 	bl	800d6b0 <__hi0bits>
 800dc56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dc5a:	e7e5      	b.n	800dc28 <__d2b+0x74>
 800dc5c:	0800f548 	.word	0x0800f548
 800dc60:	0800f559 	.word	0x0800f559

0800dc64 <__sflush_r>:
 800dc64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc6c:	0716      	lsls	r6, r2, #28
 800dc6e:	4605      	mov	r5, r0
 800dc70:	460c      	mov	r4, r1
 800dc72:	d454      	bmi.n	800dd1e <__sflush_r+0xba>
 800dc74:	684b      	ldr	r3, [r1, #4]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	dc02      	bgt.n	800dc80 <__sflush_r+0x1c>
 800dc7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	dd48      	ble.n	800dd12 <__sflush_r+0xae>
 800dc80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc82:	2e00      	cmp	r6, #0
 800dc84:	d045      	beq.n	800dd12 <__sflush_r+0xae>
 800dc86:	2300      	movs	r3, #0
 800dc88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc8c:	682f      	ldr	r7, [r5, #0]
 800dc8e:	6a21      	ldr	r1, [r4, #32]
 800dc90:	602b      	str	r3, [r5, #0]
 800dc92:	d030      	beq.n	800dcf6 <__sflush_r+0x92>
 800dc94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dc96:	89a3      	ldrh	r3, [r4, #12]
 800dc98:	0759      	lsls	r1, r3, #29
 800dc9a:	d505      	bpl.n	800dca8 <__sflush_r+0x44>
 800dc9c:	6863      	ldr	r3, [r4, #4]
 800dc9e:	1ad2      	subs	r2, r2, r3
 800dca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dca2:	b10b      	cbz	r3, 800dca8 <__sflush_r+0x44>
 800dca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dca6:	1ad2      	subs	r2, r2, r3
 800dca8:	2300      	movs	r3, #0
 800dcaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dcac:	6a21      	ldr	r1, [r4, #32]
 800dcae:	4628      	mov	r0, r5
 800dcb0:	47b0      	blx	r6
 800dcb2:	1c43      	adds	r3, r0, #1
 800dcb4:	89a3      	ldrh	r3, [r4, #12]
 800dcb6:	d106      	bne.n	800dcc6 <__sflush_r+0x62>
 800dcb8:	6829      	ldr	r1, [r5, #0]
 800dcba:	291d      	cmp	r1, #29
 800dcbc:	d82b      	bhi.n	800dd16 <__sflush_r+0xb2>
 800dcbe:	4a2a      	ldr	r2, [pc, #168]	@ (800dd68 <__sflush_r+0x104>)
 800dcc0:	410a      	asrs	r2, r1
 800dcc2:	07d6      	lsls	r6, r2, #31
 800dcc4:	d427      	bmi.n	800dd16 <__sflush_r+0xb2>
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	6062      	str	r2, [r4, #4]
 800dcca:	04d9      	lsls	r1, r3, #19
 800dccc:	6922      	ldr	r2, [r4, #16]
 800dcce:	6022      	str	r2, [r4, #0]
 800dcd0:	d504      	bpl.n	800dcdc <__sflush_r+0x78>
 800dcd2:	1c42      	adds	r2, r0, #1
 800dcd4:	d101      	bne.n	800dcda <__sflush_r+0x76>
 800dcd6:	682b      	ldr	r3, [r5, #0]
 800dcd8:	b903      	cbnz	r3, 800dcdc <__sflush_r+0x78>
 800dcda:	6560      	str	r0, [r4, #84]	@ 0x54
 800dcdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcde:	602f      	str	r7, [r5, #0]
 800dce0:	b1b9      	cbz	r1, 800dd12 <__sflush_r+0xae>
 800dce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dce6:	4299      	cmp	r1, r3
 800dce8:	d002      	beq.n	800dcf0 <__sflush_r+0x8c>
 800dcea:	4628      	mov	r0, r5
 800dcec:	f7ff fb38 	bl	800d360 <_free_r>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	6363      	str	r3, [r4, #52]	@ 0x34
 800dcf4:	e00d      	b.n	800dd12 <__sflush_r+0xae>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	4628      	mov	r0, r5
 800dcfa:	47b0      	blx	r6
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	1c50      	adds	r0, r2, #1
 800dd00:	d1c9      	bne.n	800dc96 <__sflush_r+0x32>
 800dd02:	682b      	ldr	r3, [r5, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d0c6      	beq.n	800dc96 <__sflush_r+0x32>
 800dd08:	2b1d      	cmp	r3, #29
 800dd0a:	d001      	beq.n	800dd10 <__sflush_r+0xac>
 800dd0c:	2b16      	cmp	r3, #22
 800dd0e:	d11e      	bne.n	800dd4e <__sflush_r+0xea>
 800dd10:	602f      	str	r7, [r5, #0]
 800dd12:	2000      	movs	r0, #0
 800dd14:	e022      	b.n	800dd5c <__sflush_r+0xf8>
 800dd16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd1a:	b21b      	sxth	r3, r3
 800dd1c:	e01b      	b.n	800dd56 <__sflush_r+0xf2>
 800dd1e:	690f      	ldr	r7, [r1, #16]
 800dd20:	2f00      	cmp	r7, #0
 800dd22:	d0f6      	beq.n	800dd12 <__sflush_r+0xae>
 800dd24:	0793      	lsls	r3, r2, #30
 800dd26:	680e      	ldr	r6, [r1, #0]
 800dd28:	bf08      	it	eq
 800dd2a:	694b      	ldreq	r3, [r1, #20]
 800dd2c:	600f      	str	r7, [r1, #0]
 800dd2e:	bf18      	it	ne
 800dd30:	2300      	movne	r3, #0
 800dd32:	eba6 0807 	sub.w	r8, r6, r7
 800dd36:	608b      	str	r3, [r1, #8]
 800dd38:	f1b8 0f00 	cmp.w	r8, #0
 800dd3c:	dde9      	ble.n	800dd12 <__sflush_r+0xae>
 800dd3e:	6a21      	ldr	r1, [r4, #32]
 800dd40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dd42:	4643      	mov	r3, r8
 800dd44:	463a      	mov	r2, r7
 800dd46:	4628      	mov	r0, r5
 800dd48:	47b0      	blx	r6
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	dc08      	bgt.n	800dd60 <__sflush_r+0xfc>
 800dd4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd56:	81a3      	strh	r3, [r4, #12]
 800dd58:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd60:	4407      	add	r7, r0
 800dd62:	eba8 0800 	sub.w	r8, r8, r0
 800dd66:	e7e7      	b.n	800dd38 <__sflush_r+0xd4>
 800dd68:	dfbffffe 	.word	0xdfbffffe

0800dd6c <_fflush_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	690b      	ldr	r3, [r1, #16]
 800dd70:	4605      	mov	r5, r0
 800dd72:	460c      	mov	r4, r1
 800dd74:	b913      	cbnz	r3, 800dd7c <_fflush_r+0x10>
 800dd76:	2500      	movs	r5, #0
 800dd78:	4628      	mov	r0, r5
 800dd7a:	bd38      	pop	{r3, r4, r5, pc}
 800dd7c:	b118      	cbz	r0, 800dd86 <_fflush_r+0x1a>
 800dd7e:	6a03      	ldr	r3, [r0, #32]
 800dd80:	b90b      	cbnz	r3, 800dd86 <_fflush_r+0x1a>
 800dd82:	f7fe fb43 	bl	800c40c <__sinit>
 800dd86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d0f3      	beq.n	800dd76 <_fflush_r+0xa>
 800dd8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd90:	07d0      	lsls	r0, r2, #31
 800dd92:	d404      	bmi.n	800dd9e <_fflush_r+0x32>
 800dd94:	0599      	lsls	r1, r3, #22
 800dd96:	d402      	bmi.n	800dd9e <_fflush_r+0x32>
 800dd98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd9a:	f7fe fc84 	bl	800c6a6 <__retarget_lock_acquire_recursive>
 800dd9e:	4628      	mov	r0, r5
 800dda0:	4621      	mov	r1, r4
 800dda2:	f7ff ff5f 	bl	800dc64 <__sflush_r>
 800dda6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dda8:	07da      	lsls	r2, r3, #31
 800ddaa:	4605      	mov	r5, r0
 800ddac:	d4e4      	bmi.n	800dd78 <_fflush_r+0xc>
 800ddae:	89a3      	ldrh	r3, [r4, #12]
 800ddb0:	059b      	lsls	r3, r3, #22
 800ddb2:	d4e1      	bmi.n	800dd78 <_fflush_r+0xc>
 800ddb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddb6:	f7fe fc77 	bl	800c6a8 <__retarget_lock_release_recursive>
 800ddba:	e7dd      	b.n	800dd78 <_fflush_r+0xc>

0800ddbc <_sbrk_r>:
 800ddbc:	b538      	push	{r3, r4, r5, lr}
 800ddbe:	4d06      	ldr	r5, [pc, #24]	@ (800ddd8 <_sbrk_r+0x1c>)
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	4608      	mov	r0, r1
 800ddc6:	602b      	str	r3, [r5, #0]
 800ddc8:	f7f4 f8bc 	bl	8001f44 <_sbrk>
 800ddcc:	1c43      	adds	r3, r0, #1
 800ddce:	d102      	bne.n	800ddd6 <_sbrk_r+0x1a>
 800ddd0:	682b      	ldr	r3, [r5, #0]
 800ddd2:	b103      	cbz	r3, 800ddd6 <_sbrk_r+0x1a>
 800ddd4:	6023      	str	r3, [r4, #0]
 800ddd6:	bd38      	pop	{r3, r4, r5, pc}
 800ddd8:	20007924 	.word	0x20007924

0800dddc <__assert_func>:
 800dddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddde:	4614      	mov	r4, r2
 800dde0:	461a      	mov	r2, r3
 800dde2:	4b09      	ldr	r3, [pc, #36]	@ (800de08 <__assert_func+0x2c>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4605      	mov	r5, r0
 800dde8:	68d8      	ldr	r0, [r3, #12]
 800ddea:	b954      	cbnz	r4, 800de02 <__assert_func+0x26>
 800ddec:	4b07      	ldr	r3, [pc, #28]	@ (800de0c <__assert_func+0x30>)
 800ddee:	461c      	mov	r4, r3
 800ddf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddf4:	9100      	str	r1, [sp, #0]
 800ddf6:	462b      	mov	r3, r5
 800ddf8:	4905      	ldr	r1, [pc, #20]	@ (800de10 <__assert_func+0x34>)
 800ddfa:	f000 f841 	bl	800de80 <fiprintf>
 800ddfe:	f000 f851 	bl	800dea4 <abort>
 800de02:	4b04      	ldr	r3, [pc, #16]	@ (800de14 <__assert_func+0x38>)
 800de04:	e7f4      	b.n	800ddf0 <__assert_func+0x14>
 800de06:	bf00      	nop
 800de08:	2000041c 	.word	0x2000041c
 800de0c:	0800f6f5 	.word	0x0800f6f5
 800de10:	0800f6c7 	.word	0x0800f6c7
 800de14:	0800f6ba 	.word	0x0800f6ba

0800de18 <_calloc_r>:
 800de18:	b570      	push	{r4, r5, r6, lr}
 800de1a:	fba1 5402 	umull	r5, r4, r1, r2
 800de1e:	b93c      	cbnz	r4, 800de30 <_calloc_r+0x18>
 800de20:	4629      	mov	r1, r5
 800de22:	f7ff fb11 	bl	800d448 <_malloc_r>
 800de26:	4606      	mov	r6, r0
 800de28:	b928      	cbnz	r0, 800de36 <_calloc_r+0x1e>
 800de2a:	2600      	movs	r6, #0
 800de2c:	4630      	mov	r0, r6
 800de2e:	bd70      	pop	{r4, r5, r6, pc}
 800de30:	220c      	movs	r2, #12
 800de32:	6002      	str	r2, [r0, #0]
 800de34:	e7f9      	b.n	800de2a <_calloc_r+0x12>
 800de36:	462a      	mov	r2, r5
 800de38:	4621      	mov	r1, r4
 800de3a:	f7fe fb60 	bl	800c4fe <memset>
 800de3e:	e7f5      	b.n	800de2c <_calloc_r+0x14>

0800de40 <__ascii_mbtowc>:
 800de40:	b082      	sub	sp, #8
 800de42:	b901      	cbnz	r1, 800de46 <__ascii_mbtowc+0x6>
 800de44:	a901      	add	r1, sp, #4
 800de46:	b142      	cbz	r2, 800de5a <__ascii_mbtowc+0x1a>
 800de48:	b14b      	cbz	r3, 800de5e <__ascii_mbtowc+0x1e>
 800de4a:	7813      	ldrb	r3, [r2, #0]
 800de4c:	600b      	str	r3, [r1, #0]
 800de4e:	7812      	ldrb	r2, [r2, #0]
 800de50:	1e10      	subs	r0, r2, #0
 800de52:	bf18      	it	ne
 800de54:	2001      	movne	r0, #1
 800de56:	b002      	add	sp, #8
 800de58:	4770      	bx	lr
 800de5a:	4610      	mov	r0, r2
 800de5c:	e7fb      	b.n	800de56 <__ascii_mbtowc+0x16>
 800de5e:	f06f 0001 	mvn.w	r0, #1
 800de62:	e7f8      	b.n	800de56 <__ascii_mbtowc+0x16>

0800de64 <__ascii_wctomb>:
 800de64:	4603      	mov	r3, r0
 800de66:	4608      	mov	r0, r1
 800de68:	b141      	cbz	r1, 800de7c <__ascii_wctomb+0x18>
 800de6a:	2aff      	cmp	r2, #255	@ 0xff
 800de6c:	d904      	bls.n	800de78 <__ascii_wctomb+0x14>
 800de6e:	228a      	movs	r2, #138	@ 0x8a
 800de70:	601a      	str	r2, [r3, #0]
 800de72:	f04f 30ff 	mov.w	r0, #4294967295
 800de76:	4770      	bx	lr
 800de78:	700a      	strb	r2, [r1, #0]
 800de7a:	2001      	movs	r0, #1
 800de7c:	4770      	bx	lr
	...

0800de80 <fiprintf>:
 800de80:	b40e      	push	{r1, r2, r3}
 800de82:	b503      	push	{r0, r1, lr}
 800de84:	4601      	mov	r1, r0
 800de86:	ab03      	add	r3, sp, #12
 800de88:	4805      	ldr	r0, [pc, #20]	@ (800dea0 <fiprintf+0x20>)
 800de8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800de8e:	6800      	ldr	r0, [r0, #0]
 800de90:	9301      	str	r3, [sp, #4]
 800de92:	f000 f837 	bl	800df04 <_vfiprintf_r>
 800de96:	b002      	add	sp, #8
 800de98:	f85d eb04 	ldr.w	lr, [sp], #4
 800de9c:	b003      	add	sp, #12
 800de9e:	4770      	bx	lr
 800dea0:	2000041c 	.word	0x2000041c

0800dea4 <abort>:
 800dea4:	b508      	push	{r3, lr}
 800dea6:	2006      	movs	r0, #6
 800dea8:	f000 fa00 	bl	800e2ac <raise>
 800deac:	2001      	movs	r0, #1
 800deae:	f7f3 ffd1 	bl	8001e54 <_exit>

0800deb2 <__sfputc_r>:
 800deb2:	6893      	ldr	r3, [r2, #8]
 800deb4:	3b01      	subs	r3, #1
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	b410      	push	{r4}
 800deba:	6093      	str	r3, [r2, #8]
 800debc:	da08      	bge.n	800ded0 <__sfputc_r+0x1e>
 800debe:	6994      	ldr	r4, [r2, #24]
 800dec0:	42a3      	cmp	r3, r4
 800dec2:	db01      	blt.n	800dec8 <__sfputc_r+0x16>
 800dec4:	290a      	cmp	r1, #10
 800dec6:	d103      	bne.n	800ded0 <__sfputc_r+0x1e>
 800dec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800decc:	f000 b932 	b.w	800e134 <__swbuf_r>
 800ded0:	6813      	ldr	r3, [r2, #0]
 800ded2:	1c58      	adds	r0, r3, #1
 800ded4:	6010      	str	r0, [r2, #0]
 800ded6:	7019      	strb	r1, [r3, #0]
 800ded8:	4608      	mov	r0, r1
 800deda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <__sfputs_r>:
 800dee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dee2:	4606      	mov	r6, r0
 800dee4:	460f      	mov	r7, r1
 800dee6:	4614      	mov	r4, r2
 800dee8:	18d5      	adds	r5, r2, r3
 800deea:	42ac      	cmp	r4, r5
 800deec:	d101      	bne.n	800def2 <__sfputs_r+0x12>
 800deee:	2000      	movs	r0, #0
 800def0:	e007      	b.n	800df02 <__sfputs_r+0x22>
 800def2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800def6:	463a      	mov	r2, r7
 800def8:	4630      	mov	r0, r6
 800defa:	f7ff ffda 	bl	800deb2 <__sfputc_r>
 800defe:	1c43      	adds	r3, r0, #1
 800df00:	d1f3      	bne.n	800deea <__sfputs_r+0xa>
 800df02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df04 <_vfiprintf_r>:
 800df04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df08:	460d      	mov	r5, r1
 800df0a:	b09d      	sub	sp, #116	@ 0x74
 800df0c:	4614      	mov	r4, r2
 800df0e:	4698      	mov	r8, r3
 800df10:	4606      	mov	r6, r0
 800df12:	b118      	cbz	r0, 800df1c <_vfiprintf_r+0x18>
 800df14:	6a03      	ldr	r3, [r0, #32]
 800df16:	b90b      	cbnz	r3, 800df1c <_vfiprintf_r+0x18>
 800df18:	f7fe fa78 	bl	800c40c <__sinit>
 800df1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df1e:	07d9      	lsls	r1, r3, #31
 800df20:	d405      	bmi.n	800df2e <_vfiprintf_r+0x2a>
 800df22:	89ab      	ldrh	r3, [r5, #12]
 800df24:	059a      	lsls	r2, r3, #22
 800df26:	d402      	bmi.n	800df2e <_vfiprintf_r+0x2a>
 800df28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df2a:	f7fe fbbc 	bl	800c6a6 <__retarget_lock_acquire_recursive>
 800df2e:	89ab      	ldrh	r3, [r5, #12]
 800df30:	071b      	lsls	r3, r3, #28
 800df32:	d501      	bpl.n	800df38 <_vfiprintf_r+0x34>
 800df34:	692b      	ldr	r3, [r5, #16]
 800df36:	b99b      	cbnz	r3, 800df60 <_vfiprintf_r+0x5c>
 800df38:	4629      	mov	r1, r5
 800df3a:	4630      	mov	r0, r6
 800df3c:	f000 f938 	bl	800e1b0 <__swsetup_r>
 800df40:	b170      	cbz	r0, 800df60 <_vfiprintf_r+0x5c>
 800df42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df44:	07dc      	lsls	r4, r3, #31
 800df46:	d504      	bpl.n	800df52 <_vfiprintf_r+0x4e>
 800df48:	f04f 30ff 	mov.w	r0, #4294967295
 800df4c:	b01d      	add	sp, #116	@ 0x74
 800df4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df52:	89ab      	ldrh	r3, [r5, #12]
 800df54:	0598      	lsls	r0, r3, #22
 800df56:	d4f7      	bmi.n	800df48 <_vfiprintf_r+0x44>
 800df58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df5a:	f7fe fba5 	bl	800c6a8 <__retarget_lock_release_recursive>
 800df5e:	e7f3      	b.n	800df48 <_vfiprintf_r+0x44>
 800df60:	2300      	movs	r3, #0
 800df62:	9309      	str	r3, [sp, #36]	@ 0x24
 800df64:	2320      	movs	r3, #32
 800df66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800df6e:	2330      	movs	r3, #48	@ 0x30
 800df70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e120 <_vfiprintf_r+0x21c>
 800df74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df78:	f04f 0901 	mov.w	r9, #1
 800df7c:	4623      	mov	r3, r4
 800df7e:	469a      	mov	sl, r3
 800df80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df84:	b10a      	cbz	r2, 800df8a <_vfiprintf_r+0x86>
 800df86:	2a25      	cmp	r2, #37	@ 0x25
 800df88:	d1f9      	bne.n	800df7e <_vfiprintf_r+0x7a>
 800df8a:	ebba 0b04 	subs.w	fp, sl, r4
 800df8e:	d00b      	beq.n	800dfa8 <_vfiprintf_r+0xa4>
 800df90:	465b      	mov	r3, fp
 800df92:	4622      	mov	r2, r4
 800df94:	4629      	mov	r1, r5
 800df96:	4630      	mov	r0, r6
 800df98:	f7ff ffa2 	bl	800dee0 <__sfputs_r>
 800df9c:	3001      	adds	r0, #1
 800df9e:	f000 80a7 	beq.w	800e0f0 <_vfiprintf_r+0x1ec>
 800dfa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfa4:	445a      	add	r2, fp
 800dfa6:	9209      	str	r2, [sp, #36]	@ 0x24
 800dfa8:	f89a 3000 	ldrb.w	r3, [sl]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	f000 809f 	beq.w	800e0f0 <_vfiprintf_r+0x1ec>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	f04f 32ff 	mov.w	r2, #4294967295
 800dfb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfbc:	f10a 0a01 	add.w	sl, sl, #1
 800dfc0:	9304      	str	r3, [sp, #16]
 800dfc2:	9307      	str	r3, [sp, #28]
 800dfc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dfc8:	931a      	str	r3, [sp, #104]	@ 0x68
 800dfca:	4654      	mov	r4, sl
 800dfcc:	2205      	movs	r2, #5
 800dfce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfd2:	4853      	ldr	r0, [pc, #332]	@ (800e120 <_vfiprintf_r+0x21c>)
 800dfd4:	f7f2 f924 	bl	8000220 <memchr>
 800dfd8:	9a04      	ldr	r2, [sp, #16]
 800dfda:	b9d8      	cbnz	r0, 800e014 <_vfiprintf_r+0x110>
 800dfdc:	06d1      	lsls	r1, r2, #27
 800dfde:	bf44      	itt	mi
 800dfe0:	2320      	movmi	r3, #32
 800dfe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfe6:	0713      	lsls	r3, r2, #28
 800dfe8:	bf44      	itt	mi
 800dfea:	232b      	movmi	r3, #43	@ 0x2b
 800dfec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dff0:	f89a 3000 	ldrb.w	r3, [sl]
 800dff4:	2b2a      	cmp	r3, #42	@ 0x2a
 800dff6:	d015      	beq.n	800e024 <_vfiprintf_r+0x120>
 800dff8:	9a07      	ldr	r2, [sp, #28]
 800dffa:	4654      	mov	r4, sl
 800dffc:	2000      	movs	r0, #0
 800dffe:	f04f 0c0a 	mov.w	ip, #10
 800e002:	4621      	mov	r1, r4
 800e004:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e008:	3b30      	subs	r3, #48	@ 0x30
 800e00a:	2b09      	cmp	r3, #9
 800e00c:	d94b      	bls.n	800e0a6 <_vfiprintf_r+0x1a2>
 800e00e:	b1b0      	cbz	r0, 800e03e <_vfiprintf_r+0x13a>
 800e010:	9207      	str	r2, [sp, #28]
 800e012:	e014      	b.n	800e03e <_vfiprintf_r+0x13a>
 800e014:	eba0 0308 	sub.w	r3, r0, r8
 800e018:	fa09 f303 	lsl.w	r3, r9, r3
 800e01c:	4313      	orrs	r3, r2
 800e01e:	9304      	str	r3, [sp, #16]
 800e020:	46a2      	mov	sl, r4
 800e022:	e7d2      	b.n	800dfca <_vfiprintf_r+0xc6>
 800e024:	9b03      	ldr	r3, [sp, #12]
 800e026:	1d19      	adds	r1, r3, #4
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	9103      	str	r1, [sp, #12]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	bfbb      	ittet	lt
 800e030:	425b      	neglt	r3, r3
 800e032:	f042 0202 	orrlt.w	r2, r2, #2
 800e036:	9307      	strge	r3, [sp, #28]
 800e038:	9307      	strlt	r3, [sp, #28]
 800e03a:	bfb8      	it	lt
 800e03c:	9204      	strlt	r2, [sp, #16]
 800e03e:	7823      	ldrb	r3, [r4, #0]
 800e040:	2b2e      	cmp	r3, #46	@ 0x2e
 800e042:	d10a      	bne.n	800e05a <_vfiprintf_r+0x156>
 800e044:	7863      	ldrb	r3, [r4, #1]
 800e046:	2b2a      	cmp	r3, #42	@ 0x2a
 800e048:	d132      	bne.n	800e0b0 <_vfiprintf_r+0x1ac>
 800e04a:	9b03      	ldr	r3, [sp, #12]
 800e04c:	1d1a      	adds	r2, r3, #4
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	9203      	str	r2, [sp, #12]
 800e052:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e056:	3402      	adds	r4, #2
 800e058:	9305      	str	r3, [sp, #20]
 800e05a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e130 <_vfiprintf_r+0x22c>
 800e05e:	7821      	ldrb	r1, [r4, #0]
 800e060:	2203      	movs	r2, #3
 800e062:	4650      	mov	r0, sl
 800e064:	f7f2 f8dc 	bl	8000220 <memchr>
 800e068:	b138      	cbz	r0, 800e07a <_vfiprintf_r+0x176>
 800e06a:	9b04      	ldr	r3, [sp, #16]
 800e06c:	eba0 000a 	sub.w	r0, r0, sl
 800e070:	2240      	movs	r2, #64	@ 0x40
 800e072:	4082      	lsls	r2, r0
 800e074:	4313      	orrs	r3, r2
 800e076:	3401      	adds	r4, #1
 800e078:	9304      	str	r3, [sp, #16]
 800e07a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e07e:	4829      	ldr	r0, [pc, #164]	@ (800e124 <_vfiprintf_r+0x220>)
 800e080:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e084:	2206      	movs	r2, #6
 800e086:	f7f2 f8cb 	bl	8000220 <memchr>
 800e08a:	2800      	cmp	r0, #0
 800e08c:	d03f      	beq.n	800e10e <_vfiprintf_r+0x20a>
 800e08e:	4b26      	ldr	r3, [pc, #152]	@ (800e128 <_vfiprintf_r+0x224>)
 800e090:	bb1b      	cbnz	r3, 800e0da <_vfiprintf_r+0x1d6>
 800e092:	9b03      	ldr	r3, [sp, #12]
 800e094:	3307      	adds	r3, #7
 800e096:	f023 0307 	bic.w	r3, r3, #7
 800e09a:	3308      	adds	r3, #8
 800e09c:	9303      	str	r3, [sp, #12]
 800e09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0a0:	443b      	add	r3, r7
 800e0a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0a4:	e76a      	b.n	800df7c <_vfiprintf_r+0x78>
 800e0a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0aa:	460c      	mov	r4, r1
 800e0ac:	2001      	movs	r0, #1
 800e0ae:	e7a8      	b.n	800e002 <_vfiprintf_r+0xfe>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	3401      	adds	r4, #1
 800e0b4:	9305      	str	r3, [sp, #20]
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	f04f 0c0a 	mov.w	ip, #10
 800e0bc:	4620      	mov	r0, r4
 800e0be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0c2:	3a30      	subs	r2, #48	@ 0x30
 800e0c4:	2a09      	cmp	r2, #9
 800e0c6:	d903      	bls.n	800e0d0 <_vfiprintf_r+0x1cc>
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d0c6      	beq.n	800e05a <_vfiprintf_r+0x156>
 800e0cc:	9105      	str	r1, [sp, #20]
 800e0ce:	e7c4      	b.n	800e05a <_vfiprintf_r+0x156>
 800e0d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	e7f0      	b.n	800e0bc <_vfiprintf_r+0x1b8>
 800e0da:	ab03      	add	r3, sp, #12
 800e0dc:	9300      	str	r3, [sp, #0]
 800e0de:	462a      	mov	r2, r5
 800e0e0:	4b12      	ldr	r3, [pc, #72]	@ (800e12c <_vfiprintf_r+0x228>)
 800e0e2:	a904      	add	r1, sp, #16
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	f7fd fd4d 	bl	800bb84 <_printf_float>
 800e0ea:	4607      	mov	r7, r0
 800e0ec:	1c78      	adds	r0, r7, #1
 800e0ee:	d1d6      	bne.n	800e09e <_vfiprintf_r+0x19a>
 800e0f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0f2:	07d9      	lsls	r1, r3, #31
 800e0f4:	d405      	bmi.n	800e102 <_vfiprintf_r+0x1fe>
 800e0f6:	89ab      	ldrh	r3, [r5, #12]
 800e0f8:	059a      	lsls	r2, r3, #22
 800e0fa:	d402      	bmi.n	800e102 <_vfiprintf_r+0x1fe>
 800e0fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0fe:	f7fe fad3 	bl	800c6a8 <__retarget_lock_release_recursive>
 800e102:	89ab      	ldrh	r3, [r5, #12]
 800e104:	065b      	lsls	r3, r3, #25
 800e106:	f53f af1f 	bmi.w	800df48 <_vfiprintf_r+0x44>
 800e10a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e10c:	e71e      	b.n	800df4c <_vfiprintf_r+0x48>
 800e10e:	ab03      	add	r3, sp, #12
 800e110:	9300      	str	r3, [sp, #0]
 800e112:	462a      	mov	r2, r5
 800e114:	4b05      	ldr	r3, [pc, #20]	@ (800e12c <_vfiprintf_r+0x228>)
 800e116:	a904      	add	r1, sp, #16
 800e118:	4630      	mov	r0, r6
 800e11a:	f7fd ffcb 	bl	800c0b4 <_printf_i>
 800e11e:	e7e4      	b.n	800e0ea <_vfiprintf_r+0x1e6>
 800e120:	0800f7f7 	.word	0x0800f7f7
 800e124:	0800f801 	.word	0x0800f801
 800e128:	0800bb85 	.word	0x0800bb85
 800e12c:	0800dee1 	.word	0x0800dee1
 800e130:	0800f7fd 	.word	0x0800f7fd

0800e134 <__swbuf_r>:
 800e134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e136:	460e      	mov	r6, r1
 800e138:	4614      	mov	r4, r2
 800e13a:	4605      	mov	r5, r0
 800e13c:	b118      	cbz	r0, 800e146 <__swbuf_r+0x12>
 800e13e:	6a03      	ldr	r3, [r0, #32]
 800e140:	b90b      	cbnz	r3, 800e146 <__swbuf_r+0x12>
 800e142:	f7fe f963 	bl	800c40c <__sinit>
 800e146:	69a3      	ldr	r3, [r4, #24]
 800e148:	60a3      	str	r3, [r4, #8]
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	071a      	lsls	r2, r3, #28
 800e14e:	d501      	bpl.n	800e154 <__swbuf_r+0x20>
 800e150:	6923      	ldr	r3, [r4, #16]
 800e152:	b943      	cbnz	r3, 800e166 <__swbuf_r+0x32>
 800e154:	4621      	mov	r1, r4
 800e156:	4628      	mov	r0, r5
 800e158:	f000 f82a 	bl	800e1b0 <__swsetup_r>
 800e15c:	b118      	cbz	r0, 800e166 <__swbuf_r+0x32>
 800e15e:	f04f 37ff 	mov.w	r7, #4294967295
 800e162:	4638      	mov	r0, r7
 800e164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e166:	6823      	ldr	r3, [r4, #0]
 800e168:	6922      	ldr	r2, [r4, #16]
 800e16a:	1a98      	subs	r0, r3, r2
 800e16c:	6963      	ldr	r3, [r4, #20]
 800e16e:	b2f6      	uxtb	r6, r6
 800e170:	4283      	cmp	r3, r0
 800e172:	4637      	mov	r7, r6
 800e174:	dc05      	bgt.n	800e182 <__swbuf_r+0x4e>
 800e176:	4621      	mov	r1, r4
 800e178:	4628      	mov	r0, r5
 800e17a:	f7ff fdf7 	bl	800dd6c <_fflush_r>
 800e17e:	2800      	cmp	r0, #0
 800e180:	d1ed      	bne.n	800e15e <__swbuf_r+0x2a>
 800e182:	68a3      	ldr	r3, [r4, #8]
 800e184:	3b01      	subs	r3, #1
 800e186:	60a3      	str	r3, [r4, #8]
 800e188:	6823      	ldr	r3, [r4, #0]
 800e18a:	1c5a      	adds	r2, r3, #1
 800e18c:	6022      	str	r2, [r4, #0]
 800e18e:	701e      	strb	r6, [r3, #0]
 800e190:	6962      	ldr	r2, [r4, #20]
 800e192:	1c43      	adds	r3, r0, #1
 800e194:	429a      	cmp	r2, r3
 800e196:	d004      	beq.n	800e1a2 <__swbuf_r+0x6e>
 800e198:	89a3      	ldrh	r3, [r4, #12]
 800e19a:	07db      	lsls	r3, r3, #31
 800e19c:	d5e1      	bpl.n	800e162 <__swbuf_r+0x2e>
 800e19e:	2e0a      	cmp	r6, #10
 800e1a0:	d1df      	bne.n	800e162 <__swbuf_r+0x2e>
 800e1a2:	4621      	mov	r1, r4
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	f7ff fde1 	bl	800dd6c <_fflush_r>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d0d9      	beq.n	800e162 <__swbuf_r+0x2e>
 800e1ae:	e7d6      	b.n	800e15e <__swbuf_r+0x2a>

0800e1b0 <__swsetup_r>:
 800e1b0:	b538      	push	{r3, r4, r5, lr}
 800e1b2:	4b29      	ldr	r3, [pc, #164]	@ (800e258 <__swsetup_r+0xa8>)
 800e1b4:	4605      	mov	r5, r0
 800e1b6:	6818      	ldr	r0, [r3, #0]
 800e1b8:	460c      	mov	r4, r1
 800e1ba:	b118      	cbz	r0, 800e1c4 <__swsetup_r+0x14>
 800e1bc:	6a03      	ldr	r3, [r0, #32]
 800e1be:	b90b      	cbnz	r3, 800e1c4 <__swsetup_r+0x14>
 800e1c0:	f7fe f924 	bl	800c40c <__sinit>
 800e1c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1c8:	0719      	lsls	r1, r3, #28
 800e1ca:	d422      	bmi.n	800e212 <__swsetup_r+0x62>
 800e1cc:	06da      	lsls	r2, r3, #27
 800e1ce:	d407      	bmi.n	800e1e0 <__swsetup_r+0x30>
 800e1d0:	2209      	movs	r2, #9
 800e1d2:	602a      	str	r2, [r5, #0]
 800e1d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1d8:	81a3      	strh	r3, [r4, #12]
 800e1da:	f04f 30ff 	mov.w	r0, #4294967295
 800e1de:	e033      	b.n	800e248 <__swsetup_r+0x98>
 800e1e0:	0758      	lsls	r0, r3, #29
 800e1e2:	d512      	bpl.n	800e20a <__swsetup_r+0x5a>
 800e1e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e1e6:	b141      	cbz	r1, 800e1fa <__swsetup_r+0x4a>
 800e1e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e1ec:	4299      	cmp	r1, r3
 800e1ee:	d002      	beq.n	800e1f6 <__swsetup_r+0x46>
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	f7ff f8b5 	bl	800d360 <_free_r>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e1fa:	89a3      	ldrh	r3, [r4, #12]
 800e1fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e200:	81a3      	strh	r3, [r4, #12]
 800e202:	2300      	movs	r3, #0
 800e204:	6063      	str	r3, [r4, #4]
 800e206:	6923      	ldr	r3, [r4, #16]
 800e208:	6023      	str	r3, [r4, #0]
 800e20a:	89a3      	ldrh	r3, [r4, #12]
 800e20c:	f043 0308 	orr.w	r3, r3, #8
 800e210:	81a3      	strh	r3, [r4, #12]
 800e212:	6923      	ldr	r3, [r4, #16]
 800e214:	b94b      	cbnz	r3, 800e22a <__swsetup_r+0x7a>
 800e216:	89a3      	ldrh	r3, [r4, #12]
 800e218:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e21c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e220:	d003      	beq.n	800e22a <__swsetup_r+0x7a>
 800e222:	4621      	mov	r1, r4
 800e224:	4628      	mov	r0, r5
 800e226:	f000 f883 	bl	800e330 <__smakebuf_r>
 800e22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e22e:	f013 0201 	ands.w	r2, r3, #1
 800e232:	d00a      	beq.n	800e24a <__swsetup_r+0x9a>
 800e234:	2200      	movs	r2, #0
 800e236:	60a2      	str	r2, [r4, #8]
 800e238:	6962      	ldr	r2, [r4, #20]
 800e23a:	4252      	negs	r2, r2
 800e23c:	61a2      	str	r2, [r4, #24]
 800e23e:	6922      	ldr	r2, [r4, #16]
 800e240:	b942      	cbnz	r2, 800e254 <__swsetup_r+0xa4>
 800e242:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e246:	d1c5      	bne.n	800e1d4 <__swsetup_r+0x24>
 800e248:	bd38      	pop	{r3, r4, r5, pc}
 800e24a:	0799      	lsls	r1, r3, #30
 800e24c:	bf58      	it	pl
 800e24e:	6962      	ldrpl	r2, [r4, #20]
 800e250:	60a2      	str	r2, [r4, #8]
 800e252:	e7f4      	b.n	800e23e <__swsetup_r+0x8e>
 800e254:	2000      	movs	r0, #0
 800e256:	e7f7      	b.n	800e248 <__swsetup_r+0x98>
 800e258:	2000041c 	.word	0x2000041c

0800e25c <_raise_r>:
 800e25c:	291f      	cmp	r1, #31
 800e25e:	b538      	push	{r3, r4, r5, lr}
 800e260:	4605      	mov	r5, r0
 800e262:	460c      	mov	r4, r1
 800e264:	d904      	bls.n	800e270 <_raise_r+0x14>
 800e266:	2316      	movs	r3, #22
 800e268:	6003      	str	r3, [r0, #0]
 800e26a:	f04f 30ff 	mov.w	r0, #4294967295
 800e26e:	bd38      	pop	{r3, r4, r5, pc}
 800e270:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e272:	b112      	cbz	r2, 800e27a <_raise_r+0x1e>
 800e274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e278:	b94b      	cbnz	r3, 800e28e <_raise_r+0x32>
 800e27a:	4628      	mov	r0, r5
 800e27c:	f000 f830 	bl	800e2e0 <_getpid_r>
 800e280:	4622      	mov	r2, r4
 800e282:	4601      	mov	r1, r0
 800e284:	4628      	mov	r0, r5
 800e286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e28a:	f000 b817 	b.w	800e2bc <_kill_r>
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d00a      	beq.n	800e2a8 <_raise_r+0x4c>
 800e292:	1c59      	adds	r1, r3, #1
 800e294:	d103      	bne.n	800e29e <_raise_r+0x42>
 800e296:	2316      	movs	r3, #22
 800e298:	6003      	str	r3, [r0, #0]
 800e29a:	2001      	movs	r0, #1
 800e29c:	e7e7      	b.n	800e26e <_raise_r+0x12>
 800e29e:	2100      	movs	r1, #0
 800e2a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	4798      	blx	r3
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	e7e0      	b.n	800e26e <_raise_r+0x12>

0800e2ac <raise>:
 800e2ac:	4b02      	ldr	r3, [pc, #8]	@ (800e2b8 <raise+0xc>)
 800e2ae:	4601      	mov	r1, r0
 800e2b0:	6818      	ldr	r0, [r3, #0]
 800e2b2:	f7ff bfd3 	b.w	800e25c <_raise_r>
 800e2b6:	bf00      	nop
 800e2b8:	2000041c 	.word	0x2000041c

0800e2bc <_kill_r>:
 800e2bc:	b538      	push	{r3, r4, r5, lr}
 800e2be:	4d07      	ldr	r5, [pc, #28]	@ (800e2dc <_kill_r+0x20>)
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	4604      	mov	r4, r0
 800e2c4:	4608      	mov	r0, r1
 800e2c6:	4611      	mov	r1, r2
 800e2c8:	602b      	str	r3, [r5, #0]
 800e2ca:	f7f3 fdb3 	bl	8001e34 <_kill>
 800e2ce:	1c43      	adds	r3, r0, #1
 800e2d0:	d102      	bne.n	800e2d8 <_kill_r+0x1c>
 800e2d2:	682b      	ldr	r3, [r5, #0]
 800e2d4:	b103      	cbz	r3, 800e2d8 <_kill_r+0x1c>
 800e2d6:	6023      	str	r3, [r4, #0]
 800e2d8:	bd38      	pop	{r3, r4, r5, pc}
 800e2da:	bf00      	nop
 800e2dc:	20007924 	.word	0x20007924

0800e2e0 <_getpid_r>:
 800e2e0:	f7f3 bda0 	b.w	8001e24 <_getpid>

0800e2e4 <__swhatbuf_r>:
 800e2e4:	b570      	push	{r4, r5, r6, lr}
 800e2e6:	460c      	mov	r4, r1
 800e2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ec:	2900      	cmp	r1, #0
 800e2ee:	b096      	sub	sp, #88	@ 0x58
 800e2f0:	4615      	mov	r5, r2
 800e2f2:	461e      	mov	r6, r3
 800e2f4:	da0d      	bge.n	800e312 <__swhatbuf_r+0x2e>
 800e2f6:	89a3      	ldrh	r3, [r4, #12]
 800e2f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e2fc:	f04f 0100 	mov.w	r1, #0
 800e300:	bf14      	ite	ne
 800e302:	2340      	movne	r3, #64	@ 0x40
 800e304:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e308:	2000      	movs	r0, #0
 800e30a:	6031      	str	r1, [r6, #0]
 800e30c:	602b      	str	r3, [r5, #0]
 800e30e:	b016      	add	sp, #88	@ 0x58
 800e310:	bd70      	pop	{r4, r5, r6, pc}
 800e312:	466a      	mov	r2, sp
 800e314:	f000 f848 	bl	800e3a8 <_fstat_r>
 800e318:	2800      	cmp	r0, #0
 800e31a:	dbec      	blt.n	800e2f6 <__swhatbuf_r+0x12>
 800e31c:	9901      	ldr	r1, [sp, #4]
 800e31e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e322:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e326:	4259      	negs	r1, r3
 800e328:	4159      	adcs	r1, r3
 800e32a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e32e:	e7eb      	b.n	800e308 <__swhatbuf_r+0x24>

0800e330 <__smakebuf_r>:
 800e330:	898b      	ldrh	r3, [r1, #12]
 800e332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e334:	079d      	lsls	r5, r3, #30
 800e336:	4606      	mov	r6, r0
 800e338:	460c      	mov	r4, r1
 800e33a:	d507      	bpl.n	800e34c <__smakebuf_r+0x1c>
 800e33c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e340:	6023      	str	r3, [r4, #0]
 800e342:	6123      	str	r3, [r4, #16]
 800e344:	2301      	movs	r3, #1
 800e346:	6163      	str	r3, [r4, #20]
 800e348:	b003      	add	sp, #12
 800e34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e34c:	ab01      	add	r3, sp, #4
 800e34e:	466a      	mov	r2, sp
 800e350:	f7ff ffc8 	bl	800e2e4 <__swhatbuf_r>
 800e354:	9f00      	ldr	r7, [sp, #0]
 800e356:	4605      	mov	r5, r0
 800e358:	4639      	mov	r1, r7
 800e35a:	4630      	mov	r0, r6
 800e35c:	f7ff f874 	bl	800d448 <_malloc_r>
 800e360:	b948      	cbnz	r0, 800e376 <__smakebuf_r+0x46>
 800e362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e366:	059a      	lsls	r2, r3, #22
 800e368:	d4ee      	bmi.n	800e348 <__smakebuf_r+0x18>
 800e36a:	f023 0303 	bic.w	r3, r3, #3
 800e36e:	f043 0302 	orr.w	r3, r3, #2
 800e372:	81a3      	strh	r3, [r4, #12]
 800e374:	e7e2      	b.n	800e33c <__smakebuf_r+0xc>
 800e376:	89a3      	ldrh	r3, [r4, #12]
 800e378:	6020      	str	r0, [r4, #0]
 800e37a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e37e:	81a3      	strh	r3, [r4, #12]
 800e380:	9b01      	ldr	r3, [sp, #4]
 800e382:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e386:	b15b      	cbz	r3, 800e3a0 <__smakebuf_r+0x70>
 800e388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e38c:	4630      	mov	r0, r6
 800e38e:	f000 f81d 	bl	800e3cc <_isatty_r>
 800e392:	b128      	cbz	r0, 800e3a0 <__smakebuf_r+0x70>
 800e394:	89a3      	ldrh	r3, [r4, #12]
 800e396:	f023 0303 	bic.w	r3, r3, #3
 800e39a:	f043 0301 	orr.w	r3, r3, #1
 800e39e:	81a3      	strh	r3, [r4, #12]
 800e3a0:	89a3      	ldrh	r3, [r4, #12]
 800e3a2:	431d      	orrs	r5, r3
 800e3a4:	81a5      	strh	r5, [r4, #12]
 800e3a6:	e7cf      	b.n	800e348 <__smakebuf_r+0x18>

0800e3a8 <_fstat_r>:
 800e3a8:	b538      	push	{r3, r4, r5, lr}
 800e3aa:	4d07      	ldr	r5, [pc, #28]	@ (800e3c8 <_fstat_r+0x20>)
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	4608      	mov	r0, r1
 800e3b2:	4611      	mov	r1, r2
 800e3b4:	602b      	str	r3, [r5, #0]
 800e3b6:	f7f3 fd9d 	bl	8001ef4 <_fstat>
 800e3ba:	1c43      	adds	r3, r0, #1
 800e3bc:	d102      	bne.n	800e3c4 <_fstat_r+0x1c>
 800e3be:	682b      	ldr	r3, [r5, #0]
 800e3c0:	b103      	cbz	r3, 800e3c4 <_fstat_r+0x1c>
 800e3c2:	6023      	str	r3, [r4, #0]
 800e3c4:	bd38      	pop	{r3, r4, r5, pc}
 800e3c6:	bf00      	nop
 800e3c8:	20007924 	.word	0x20007924

0800e3cc <_isatty_r>:
 800e3cc:	b538      	push	{r3, r4, r5, lr}
 800e3ce:	4d06      	ldr	r5, [pc, #24]	@ (800e3e8 <_isatty_r+0x1c>)
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	4608      	mov	r0, r1
 800e3d6:	602b      	str	r3, [r5, #0]
 800e3d8:	f7f3 fd9c 	bl	8001f14 <_isatty>
 800e3dc:	1c43      	adds	r3, r0, #1
 800e3de:	d102      	bne.n	800e3e6 <_isatty_r+0x1a>
 800e3e0:	682b      	ldr	r3, [r5, #0]
 800e3e2:	b103      	cbz	r3, 800e3e6 <_isatty_r+0x1a>
 800e3e4:	6023      	str	r3, [r4, #0]
 800e3e6:	bd38      	pop	{r3, r4, r5, pc}
 800e3e8:	20007924 	.word	0x20007924

0800e3ec <atan2f>:
 800e3ec:	f000 b822 	b.w	800e434 <__ieee754_atan2f>

0800e3f0 <sqrtf>:
 800e3f0:	b508      	push	{r3, lr}
 800e3f2:	ed2d 8b02 	vpush	{d8}
 800e3f6:	eeb0 8a40 	vmov.f32	s16, s0
 800e3fa:	f000 f817 	bl	800e42c <__ieee754_sqrtf>
 800e3fe:	eeb4 8a48 	vcmp.f32	s16, s16
 800e402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e406:	d60c      	bvs.n	800e422 <sqrtf+0x32>
 800e408:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e428 <sqrtf+0x38>
 800e40c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e414:	d505      	bpl.n	800e422 <sqrtf+0x32>
 800e416:	f7fe f91b 	bl	800c650 <__errno>
 800e41a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e41e:	2321      	movs	r3, #33	@ 0x21
 800e420:	6003      	str	r3, [r0, #0]
 800e422:	ecbd 8b02 	vpop	{d8}
 800e426:	bd08      	pop	{r3, pc}
 800e428:	00000000 	.word	0x00000000

0800e42c <__ieee754_sqrtf>:
 800e42c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e430:	4770      	bx	lr
	...

0800e434 <__ieee754_atan2f>:
 800e434:	ee10 2a90 	vmov	r2, s1
 800e438:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800e43c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e440:	b510      	push	{r4, lr}
 800e442:	eef0 7a40 	vmov.f32	s15, s0
 800e446:	d806      	bhi.n	800e456 <__ieee754_atan2f+0x22>
 800e448:	ee10 0a10 	vmov	r0, s0
 800e44c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800e450:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e454:	d904      	bls.n	800e460 <__ieee754_atan2f+0x2c>
 800e456:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e45a:	eeb0 0a67 	vmov.f32	s0, s15
 800e45e:	bd10      	pop	{r4, pc}
 800e460:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800e464:	d103      	bne.n	800e46e <__ieee754_atan2f+0x3a>
 800e466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e46a:	f000 b883 	b.w	800e574 <atanf>
 800e46e:	1794      	asrs	r4, r2, #30
 800e470:	f004 0402 	and.w	r4, r4, #2
 800e474:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e478:	b943      	cbnz	r3, 800e48c <__ieee754_atan2f+0x58>
 800e47a:	2c02      	cmp	r4, #2
 800e47c:	d05e      	beq.n	800e53c <__ieee754_atan2f+0x108>
 800e47e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e550 <__ieee754_atan2f+0x11c>
 800e482:	2c03      	cmp	r4, #3
 800e484:	bf08      	it	eq
 800e486:	eef0 7a47 	vmoveq.f32	s15, s14
 800e48a:	e7e6      	b.n	800e45a <__ieee754_atan2f+0x26>
 800e48c:	b941      	cbnz	r1, 800e4a0 <__ieee754_atan2f+0x6c>
 800e48e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800e554 <__ieee754_atan2f+0x120>
 800e492:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800e558 <__ieee754_atan2f+0x124>
 800e496:	2800      	cmp	r0, #0
 800e498:	bfb8      	it	lt
 800e49a:	eef0 7a47 	vmovlt.f32	s15, s14
 800e49e:	e7dc      	b.n	800e45a <__ieee754_atan2f+0x26>
 800e4a0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e4a4:	d110      	bne.n	800e4c8 <__ieee754_atan2f+0x94>
 800e4a6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e4aa:	f104 34ff 	add.w	r4, r4, #4294967295
 800e4ae:	d107      	bne.n	800e4c0 <__ieee754_atan2f+0x8c>
 800e4b0:	2c02      	cmp	r4, #2
 800e4b2:	d846      	bhi.n	800e542 <__ieee754_atan2f+0x10e>
 800e4b4:	4b29      	ldr	r3, [pc, #164]	@ (800e55c <__ieee754_atan2f+0x128>)
 800e4b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e4ba:	edd3 7a00 	vldr	s15, [r3]
 800e4be:	e7cc      	b.n	800e45a <__ieee754_atan2f+0x26>
 800e4c0:	2c02      	cmp	r4, #2
 800e4c2:	d841      	bhi.n	800e548 <__ieee754_atan2f+0x114>
 800e4c4:	4b26      	ldr	r3, [pc, #152]	@ (800e560 <__ieee754_atan2f+0x12c>)
 800e4c6:	e7f6      	b.n	800e4b6 <__ieee754_atan2f+0x82>
 800e4c8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e4cc:	d0df      	beq.n	800e48e <__ieee754_atan2f+0x5a>
 800e4ce:	1a5b      	subs	r3, r3, r1
 800e4d0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800e4d4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e4d8:	da1a      	bge.n	800e510 <__ieee754_atan2f+0xdc>
 800e4da:	2a00      	cmp	r2, #0
 800e4dc:	da01      	bge.n	800e4e2 <__ieee754_atan2f+0xae>
 800e4de:	313c      	adds	r1, #60	@ 0x3c
 800e4e0:	db19      	blt.n	800e516 <__ieee754_atan2f+0xe2>
 800e4e2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e4e6:	f000 f919 	bl	800e71c <fabsf>
 800e4ea:	f000 f843 	bl	800e574 <atanf>
 800e4ee:	eef0 7a40 	vmov.f32	s15, s0
 800e4f2:	2c01      	cmp	r4, #1
 800e4f4:	d012      	beq.n	800e51c <__ieee754_atan2f+0xe8>
 800e4f6:	2c02      	cmp	r4, #2
 800e4f8:	d017      	beq.n	800e52a <__ieee754_atan2f+0xf6>
 800e4fa:	2c00      	cmp	r4, #0
 800e4fc:	d0ad      	beq.n	800e45a <__ieee754_atan2f+0x26>
 800e4fe:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800e564 <__ieee754_atan2f+0x130>
 800e502:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e506:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800e568 <__ieee754_atan2f+0x134>
 800e50a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e50e:	e7a4      	b.n	800e45a <__ieee754_atan2f+0x26>
 800e510:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800e554 <__ieee754_atan2f+0x120>
 800e514:	e7ed      	b.n	800e4f2 <__ieee754_atan2f+0xbe>
 800e516:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e56c <__ieee754_atan2f+0x138>
 800e51a:	e7ea      	b.n	800e4f2 <__ieee754_atan2f+0xbe>
 800e51c:	ee17 3a90 	vmov	r3, s15
 800e520:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e524:	ee07 3a90 	vmov	s15, r3
 800e528:	e797      	b.n	800e45a <__ieee754_atan2f+0x26>
 800e52a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e564 <__ieee754_atan2f+0x130>
 800e52e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e532:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800e568 <__ieee754_atan2f+0x134>
 800e536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e53a:	e78e      	b.n	800e45a <__ieee754_atan2f+0x26>
 800e53c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800e568 <__ieee754_atan2f+0x134>
 800e540:	e78b      	b.n	800e45a <__ieee754_atan2f+0x26>
 800e542:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800e570 <__ieee754_atan2f+0x13c>
 800e546:	e788      	b.n	800e45a <__ieee754_atan2f+0x26>
 800e548:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800e56c <__ieee754_atan2f+0x138>
 800e54c:	e785      	b.n	800e45a <__ieee754_atan2f+0x26>
 800e54e:	bf00      	nop
 800e550:	c0490fdb 	.word	0xc0490fdb
 800e554:	3fc90fdb 	.word	0x3fc90fdb
 800e558:	bfc90fdb 	.word	0xbfc90fdb
 800e55c:	0800f814 	.word	0x0800f814
 800e560:	0800f808 	.word	0x0800f808
 800e564:	33bbbd2e 	.word	0x33bbbd2e
 800e568:	40490fdb 	.word	0x40490fdb
 800e56c:	00000000 	.word	0x00000000
 800e570:	3f490fdb 	.word	0x3f490fdb

0800e574 <atanf>:
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	ee10 5a10 	vmov	r5, s0
 800e57a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e57e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800e582:	eef0 7a40 	vmov.f32	s15, s0
 800e586:	d310      	bcc.n	800e5aa <atanf+0x36>
 800e588:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800e58c:	d904      	bls.n	800e598 <atanf+0x24>
 800e58e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e592:	eeb0 0a67 	vmov.f32	s0, s15
 800e596:	bd38      	pop	{r3, r4, r5, pc}
 800e598:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800e6d0 <atanf+0x15c>
 800e59c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800e6d4 <atanf+0x160>
 800e5a0:	2d00      	cmp	r5, #0
 800e5a2:	bfc8      	it	gt
 800e5a4:	eef0 7a47 	vmovgt.f32	s15, s14
 800e5a8:	e7f3      	b.n	800e592 <atanf+0x1e>
 800e5aa:	4b4b      	ldr	r3, [pc, #300]	@ (800e6d8 <atanf+0x164>)
 800e5ac:	429c      	cmp	r4, r3
 800e5ae:	d810      	bhi.n	800e5d2 <atanf+0x5e>
 800e5b0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800e5b4:	d20a      	bcs.n	800e5cc <atanf+0x58>
 800e5b6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800e6dc <atanf+0x168>
 800e5ba:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e5be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e5c2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ca:	dce2      	bgt.n	800e592 <atanf+0x1e>
 800e5cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e5d0:	e013      	b.n	800e5fa <atanf+0x86>
 800e5d2:	f000 f8a3 	bl	800e71c <fabsf>
 800e5d6:	4b42      	ldr	r3, [pc, #264]	@ (800e6e0 <atanf+0x16c>)
 800e5d8:	429c      	cmp	r4, r3
 800e5da:	d84f      	bhi.n	800e67c <atanf+0x108>
 800e5dc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800e5e0:	429c      	cmp	r4, r3
 800e5e2:	d841      	bhi.n	800e668 <atanf+0xf4>
 800e5e4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800e5e8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e5ec:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e5f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e5fa:	1c5a      	adds	r2, r3, #1
 800e5fc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e600:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800e6e4 <atanf+0x170>
 800e604:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800e6e8 <atanf+0x174>
 800e608:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800e6ec <atanf+0x178>
 800e60c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e610:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e614:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800e6f0 <atanf+0x17c>
 800e618:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e61c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800e6f4 <atanf+0x180>
 800e620:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e624:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e6f8 <atanf+0x184>
 800e628:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e62c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e6fc <atanf+0x188>
 800e630:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e634:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800e700 <atanf+0x18c>
 800e638:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e63c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800e704 <atanf+0x190>
 800e640:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e644:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800e708 <atanf+0x194>
 800e648:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e64c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800e70c <atanf+0x198>
 800e650:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e654:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e658:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e65c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e660:	d121      	bne.n	800e6a6 <atanf+0x132>
 800e662:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e666:	e794      	b.n	800e592 <atanf+0x1e>
 800e668:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e66c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e670:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e674:	2301      	movs	r3, #1
 800e676:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e67a:	e7be      	b.n	800e5fa <atanf+0x86>
 800e67c:	4b24      	ldr	r3, [pc, #144]	@ (800e710 <atanf+0x19c>)
 800e67e:	429c      	cmp	r4, r3
 800e680:	d80b      	bhi.n	800e69a <atanf+0x126>
 800e682:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800e686:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e68a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e68e:	2302      	movs	r3, #2
 800e690:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e698:	e7af      	b.n	800e5fa <atanf+0x86>
 800e69a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800e69e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e6a2:	2303      	movs	r3, #3
 800e6a4:	e7a9      	b.n	800e5fa <atanf+0x86>
 800e6a6:	4a1b      	ldr	r2, [pc, #108]	@ (800e714 <atanf+0x1a0>)
 800e6a8:	491b      	ldr	r1, [pc, #108]	@ (800e718 <atanf+0x1a4>)
 800e6aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e6ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e6b2:	edd3 6a00 	vldr	s13, [r3]
 800e6b6:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e6ba:	2d00      	cmp	r5, #0
 800e6bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e6c0:	edd2 7a00 	vldr	s15, [r2]
 800e6c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e6c8:	bfb8      	it	lt
 800e6ca:	eef1 7a67 	vneglt.f32	s15, s15
 800e6ce:	e760      	b.n	800e592 <atanf+0x1e>
 800e6d0:	bfc90fdb 	.word	0xbfc90fdb
 800e6d4:	3fc90fdb 	.word	0x3fc90fdb
 800e6d8:	3edfffff 	.word	0x3edfffff
 800e6dc:	7149f2ca 	.word	0x7149f2ca
 800e6e0:	3f97ffff 	.word	0x3f97ffff
 800e6e4:	3c8569d7 	.word	0x3c8569d7
 800e6e8:	3d4bda59 	.word	0x3d4bda59
 800e6ec:	bd6ef16b 	.word	0xbd6ef16b
 800e6f0:	3d886b35 	.word	0x3d886b35
 800e6f4:	3dba2e6e 	.word	0x3dba2e6e
 800e6f8:	3e124925 	.word	0x3e124925
 800e6fc:	3eaaaaab 	.word	0x3eaaaaab
 800e700:	bd15a221 	.word	0xbd15a221
 800e704:	bd9d8795 	.word	0xbd9d8795
 800e708:	bde38e38 	.word	0xbde38e38
 800e70c:	be4ccccd 	.word	0xbe4ccccd
 800e710:	401bffff 	.word	0x401bffff
 800e714:	0800f830 	.word	0x0800f830
 800e718:	0800f820 	.word	0x0800f820

0800e71c <fabsf>:
 800e71c:	ee10 3a10 	vmov	r3, s0
 800e720:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e724:	ee00 3a10 	vmov	s0, r3
 800e728:	4770      	bx	lr
	...

0800e72c <_init>:
 800e72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e72e:	bf00      	nop
 800e730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e732:	bc08      	pop	{r3}
 800e734:	469e      	mov	lr, r3
 800e736:	4770      	bx	lr

0800e738 <_fini>:
 800e738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e73a:	bf00      	nop
 800e73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e73e:	bc08      	pop	{r3}
 800e740:	469e      	mov	lr, r3
 800e742:	4770      	bx	lr
