
embarcados_aula_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  0800c3b0  0800c3b0  0000d3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c790  0800c790  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c790  0800c790  0000d790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c798  0800c798  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c798  0800c798  0000d798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c79c  0800c79c  0000d79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c7a0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045b0  200001d8  0800c978  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004788  0800c978  0000e788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e654  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004086  00000000  00000000  0002c85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf0  00000000  00000000  000308e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a5  00000000  00000000  000324d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005153  00000000  00000000  00033a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f5d1  00000000  00000000  00038bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8a40  00000000  00000000  000581a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140be1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008734  00000000  00000000  00140c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00149358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c394 	.word	0x0800c394

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800c394 	.word	0x0800c394

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Essas funções são utilizadas dentro das interrupções */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
	char data = huart->Instance->RDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	72fb      	strb	r3, [r7, #11]
	xQueueSendFromISR(uart_rx_q, &data, &pxHigherPriorityTaskWoken);
 8000efe:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <HAL_UART_RxCpltCallback+0x48>)
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	f107 020c 	add.w	r2, r7, #12
 8000f06:	f107 010b 	add.w	r1, r7, #11
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f006 fd68 	bl	80079e0 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d007      	beq.n	8000f26 <HAL_UART_RxCpltCallback+0x3e>
 8000f16:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <HAL_UART_RxCpltCallback+0x4c>)
 8000f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	f3bf 8f4f 	dsb	sy
 8000f22:	f3bf 8f6f 	isb	sy
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200004dc 	.word	0x200004dc
 8000f34:	e000ed04 	.word	0xe000ed04

08000f38 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(sem_tx_uart, &pxHigherPriorityTaskWoken);
 8000f44:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <HAL_UART_TxCpltCallback+0x3c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f107 020c 	add.w	r2, r7, #12
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f006 fde4 	bl	8007b1c <xQueueGiveFromISR>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d007      	beq.n	8000f6a <HAL_UART_TxCpltCallback+0x32>
 8000f5a:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <HAL_UART_TxCpltCallback+0x40>)
 8000f5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	f3bf 8f4f 	dsb	sy
 8000f66:	f3bf 8f6f 	isb	sy
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200004d4 	.word	0x200004d4
 8000f78:	e000ed04 	.word	0xe000ed04

08000f7c <UART_TX_RTOS>:


/* Apenas tarefas podem usar isso aqui. Interrupções não podem, pois isso é uma função bloqueante */
BaseType_t UART_TX_RTOS(const char *pData, uint16_t Size) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
	BaseType_t ret = pdTRUE;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]

	ret = HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t *)pData, Size);
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	4808      	ldr	r0, [pc, #32]	@ (8000fb4 <UART_TX_RTOS+0x38>)
 8000f94:	f004 fa28 	bl	80053e8 <HAL_UART_Transmit_DMA>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60fb      	str	r3, [r7, #12]
	xSemaphoreTake(sem_tx_uart, portMAX_DELAY);
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <UART_TX_RTOS+0x3c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f006 ff2b 	bl	8007e00 <xQueueSemaphoreTake>
	return ret;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000344 	.word	0x20000344
 8000fb8:	200004d4 	.word	0x200004d4

08000fbc <UART_RX_RTOS>:

BaseType_t UART_RX_RTOS(char *pData, TickType_t timeout) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	return xQueueReceive(uart_rx_q, pData, timeout);
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <UART_RX_RTOS+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f006 fe34 	bl	8007c3c <xQueueReceive>
 8000fd4:	4603      	mov	r3, r0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200004dc 	.word	0x200004dc

08000fe4 <terminal_task>:


void terminal_task(void *param) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	  char data;
	  while (1) {
		  /* O desejado é ligar a interrupção eternamente, mas não é oq acontece */
		  HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)&data, 1);
 8000fec:	f107 030f 	add.w	r3, r7, #15
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4808      	ldr	r0, [pc, #32]	@ (8001018 <terminal_task+0x34>)
 8000ff6:	f004 f9ab 	bl	8005350 <HAL_UART_Receive_IT>
		  UART_RX_RTOS(&data, portMAX_DELAY); // Ponto de bloqueio (bloqueia por portMAX_DELAY)
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	f04f 31ff 	mov.w	r1, #4294967295
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ffda 	bl	8000fbc <UART_RX_RTOS>

		  // tem um caracter em data. Para aparecer o caractere digitado, precisamos devolver:
		  UART_TX_RTOS(&data, 1);
 8001008:	f107 030f 	add.w	r3, r7, #15
 800100c:	2101      	movs	r1, #1
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ffb4 	bl	8000f7c <UART_TX_RTOS>
		  HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)&data, 1);
 8001014:	bf00      	nop
 8001016:	e7e9      	b.n	8000fec <terminal_task+0x8>
 8001018:	20000344 	.word	0x20000344

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b5b0      	push	{r4, r5, r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001022:	f000 fdf4 	bl	8001c0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001026:	f000 f855 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102a:	f000 fa93 	bl	8001554 <MX_GPIO_Init>
  MX_DMA_Init();
 800102e:	f000 fa4b 	bl	80014c8 <MX_DMA_Init>
  MX_IWDG_Init();
 8001032:	f000 f945 	bl	80012c0 <MX_IWDG_Init>
  MX_ADC1_Init();
 8001036:	f000 f88f 	bl	8001158 <MX_ADC1_Init>
  MX_TIM3_Init();
 800103a:	f000 f9f7 	bl	800142c <MX_TIM3_Init>
  MX_DAC1_Init();
 800103e:	f000 f905 	bl	800124c <MX_DAC1_Init>
  MX_TIM2_Init();
 8001042:	f000 f9a5 	bl	8001390 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8001046:	f000 f959 	bl	80012fc <MX_LPUART1_UART_Init>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  sem_tx_uart = xSemaphoreCreateBinary();
 800104a:	2203      	movs	r2, #3
 800104c:	2100      	movs	r1, #0
 800104e:	2001      	movs	r0, #1
 8001050:	f006 fc70 	bl	8007934 <xQueueGenericCreate>
 8001054:	4603      	mov	r3, r0
 8001056:	4a18      	ldr	r2, [pc, #96]	@ (80010b8 <main+0x9c>)
 8001058:	6013      	str	r3, [r2, #0]
  sem_adc = xSemaphoreCreateBinary();
 800105a:	2203      	movs	r2, #3
 800105c:	2100      	movs	r1, #0
 800105e:	2001      	movs	r0, #1
 8001060:	f006 fc68 	bl	8007934 <xQueueGenericCreate>
 8001064:	4603      	mov	r3, r0
 8001066:	4a15      	ldr	r2, [pc, #84]	@ (80010bc <main+0xa0>)
 8001068:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  uart_rx_q = xQueueCreate(32, sizeof(char));
 800106a:	2200      	movs	r2, #0
 800106c:	2101      	movs	r1, #1
 800106e:	2020      	movs	r0, #32
 8001070:	f006 fc60 	bl	8007934 <xQueueGenericCreate>
 8001074:	4603      	mov	r3, r0
 8001076:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <main+0xa4>)
 8001078:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800107a:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <main+0xa8>)
 800107c:	1d3c      	adds	r4, r7, #4
 800107e:	461d      	mov	r5, r3
 8001080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f006 faf8 	bl	8007682 <osThreadCreate>
 8001092:	4603      	mov	r3, r0
 8001094:	4a0c      	ldr	r2, [pc, #48]	@ (80010c8 <main+0xac>)
 8001096:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */



  /* CRIADO COM BASE NA FUNÇÃO terminal_task  */
  (void)xTaskCreate(terminal_task, "Console", 256, NULL, 3, NULL);
 8001098:	2300      	movs	r3, #0
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	2303      	movs	r3, #3
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2300      	movs	r3, #0
 80010a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010a6:	4909      	ldr	r1, [pc, #36]	@ (80010cc <main+0xb0>)
 80010a8:	4809      	ldr	r0, [pc, #36]	@ (80010d0 <main+0xb4>)
 80010aa:	f007 f8c9 	bl	8008240 <xTaskCreate>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010ae:	f006 fae1 	bl	8007674 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b2:	bf00      	nop
 80010b4:	e7fd      	b.n	80010b2 <main+0x96>
 80010b6:	bf00      	nop
 80010b8:	200004d4 	.word	0x200004d4
 80010bc:	200004d8 	.word	0x200004d8
 80010c0:	200004dc 	.word	0x200004dc
 80010c4:	0800c3c4 	.word	0x0800c3c4
 80010c8:	200004d0 	.word	0x200004d0
 80010cc:	0800c3b0 	.word	0x0800c3b0
 80010d0:	08000fe5 	.word	0x08000fe5

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b094      	sub	sp, #80	@ 0x50
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0318 	add.w	r3, r7, #24
 80010de:	2238      	movs	r2, #56	@ 0x38
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f009 f9dd 	bl	800a4a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010fa:	f002 fdfb 	bl	8003cf4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010fe:	230a      	movs	r3, #10
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001102:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001108:	2340      	movs	r3, #64	@ 0x40
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800110c:	2301      	movs	r3, #1
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001110:	2300      	movs	r3, #0
 8001112:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f107 0318 	add.w	r3, r7, #24
 8001118:	4618      	mov	r0, r3
 800111a:	f002 fe9f 	bl	8003e5c <HAL_RCC_OscConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001124:	f000 fa42 	bl	80015ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800112c:	2301      	movs	r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f003 f99d 	bl	8004480 <HAL_RCC_ClockConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800114c:	f000 fa2e 	bl	80015ac <Error_Handler>
  }
}
 8001150:	bf00      	nop
 8001152:	3750      	adds	r7, #80	@ 0x50
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	@ 0x30
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800115e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2220      	movs	r2, #32
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f009 f996 	bl	800a4a2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001176:	4b33      	ldr	r3, [pc, #204]	@ (8001244 <MX_ADC1_Init+0xec>)
 8001178:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800117c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800117e:	4b31      	ldr	r3, [pc, #196]	@ (8001244 <MX_ADC1_Init+0xec>)
 8001180:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001184:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001186:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <MX_ADC1_Init+0xec>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118c:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <MX_ADC1_Init+0xec>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001192:	4b2c      	ldr	r3, [pc, #176]	@ (8001244 <MX_ADC1_Init+0xec>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001198:	4b2a      	ldr	r3, [pc, #168]	@ (8001244 <MX_ADC1_Init+0xec>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119e:	4b29      	ldr	r3, [pc, #164]	@ (8001244 <MX_ADC1_Init+0xec>)
 80011a0:	2204      	movs	r2, #4
 80011a2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011a4:	4b27      	ldr	r3, [pc, #156]	@ (8001244 <MX_ADC1_Init+0xec>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011aa:	4b26      	ldr	r3, [pc, #152]	@ (8001244 <MX_ADC1_Init+0xec>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80011b0:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <MX_ADC1_Init+0xec>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b6:	4b23      	ldr	r3, [pc, #140]	@ (8001244 <MX_ADC1_Init+0xec>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80011be:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <MX_ADC1_Init+0xec>)
 80011c0:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80011c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001244 <MX_ADC1_Init+0xec>)
 80011c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <MX_ADC1_Init+0xec>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <MX_ADC1_Init+0xec>)
 80011d8:	2200      	movs	r2, #0
 80011da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011dc:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <MX_ADC1_Init+0xec>)
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e4:	4817      	ldr	r0, [pc, #92]	@ (8001244 <MX_ADC1_Init+0xec>)
 80011e6:	f000 ff59 	bl	800209c <HAL_ADC_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80011f0:	f000 f9dc 	bl	80015ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011fc:	4619      	mov	r1, r3
 80011fe:	4811      	ldr	r0, [pc, #68]	@ (8001244 <MX_ADC1_Init+0xec>)
 8001200:	f001 fce6 	bl	8002bd0 <HAL_ADCEx_MultiModeConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800120a:	f000 f9cf 	bl	80015ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_ADC1_Init+0xf0>)
 8001210:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001212:	2306      	movs	r3, #6
 8001214:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800121a:	237f      	movs	r3, #127	@ 0x7f
 800121c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800121e:	2304      	movs	r3, #4
 8001220:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	@ (8001244 <MX_ADC1_Init+0xec>)
 800122c:	f001 f8ba 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001236:	f000 f9b9 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	3730      	adds	r7, #48	@ 0x30
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200001f4 	.word	0x200001f4
 8001248:	04300002 	.word	0x04300002

0800124c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	@ 0x30
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2230      	movs	r2, #48	@ 0x30
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f009 f922 	bl	800a4a2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800125e:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <MX_DAC1_Init+0x6c>)
 8001260:	4a16      	ldr	r2, [pc, #88]	@ (80012bc <MX_DAC1_Init+0x70>)
 8001262:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001264:	4814      	ldr	r0, [pc, #80]	@ (80012b8 <MX_DAC1_Init+0x6c>)
 8001266:	f001 fe66 	bl	8002f36 <HAL_DAC_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001270:	f000 f99c 	bl	80015ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001274:	2302      	movs	r3, #2
 8001276:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001284:	2312      	movs	r3, #18
 8001286:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001290:	2304      	movs	r3, #4
 8001292:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <MX_DAC1_Init+0x6c>)
 80012a0:	f001 fe6c 	bl	8002f7c <HAL_DAC_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80012aa:	f000 f97f 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3730      	adds	r7, #48	@ 0x30
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200002c0 	.word	0x200002c0
 80012bc:	50000800 	.word	0x50000800

080012c0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <MX_IWDG_Init+0x34>)
 80012c6:	4a0c      	ldr	r2, [pc, #48]	@ (80012f8 <MX_IWDG_Init+0x38>)
 80012c8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <MX_IWDG_Init+0x34>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <MX_IWDG_Init+0x34>)
 80012d2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80012d6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <MX_IWDG_Init+0x34>)
 80012da:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80012de:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	@ (80012f4 <MX_IWDG_Init+0x34>)
 80012e2:	f002 fcb7 	bl	8003c54 <HAL_IWDG_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80012ec:	f000 f95e 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000334 	.word	0x20000334
 80012f8:	40003000 	.word	0x40003000

080012fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001300:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <MX_LPUART1_UART_Init+0x8c>)
 8001302:	4a22      	ldr	r2, [pc, #136]	@ (800138c <MX_LPUART1_UART_Init+0x90>)
 8001304:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <MX_LPUART1_UART_Init+0x8c>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <MX_LPUART1_UART_Init+0x8c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b1c      	ldr	r3, [pc, #112]	@ (8001388 <MX_LPUART1_UART_Init+0x8c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <MX_LPUART1_UART_Init+0x8c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <MX_LPUART1_UART_Init+0x8c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <MX_LPUART1_UART_Init+0x8c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <MX_LPUART1_UART_Init+0x8c>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <MX_LPUART1_UART_Init+0x8c>)
 8001334:	2200      	movs	r2, #0
 8001336:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <MX_LPUART1_UART_Init+0x8c>)
 800133a:	2200      	movs	r2, #0
 800133c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800133e:	4812      	ldr	r0, [pc, #72]	@ (8001388 <MX_LPUART1_UART_Init+0x8c>)
 8001340:	f003 ffb6 	bl	80052b0 <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800134a:	f000 f92f 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134e:	2100      	movs	r1, #0
 8001350:	480d      	ldr	r0, [pc, #52]	@ (8001388 <MX_LPUART1_UART_Init+0x8c>)
 8001352:	f006 f8ac 	bl	80074ae <HAL_UARTEx_SetTxFifoThreshold>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800135c:	f000 f926 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001360:	2100      	movs	r1, #0
 8001362:	4809      	ldr	r0, [pc, #36]	@ (8001388 <MX_LPUART1_UART_Init+0x8c>)
 8001364:	f006 f8e1 	bl	800752a <HAL_UARTEx_SetRxFifoThreshold>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800136e:	f000 f91d 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_LPUART1_UART_Init+0x8c>)
 8001374:	f006 f862 	bl	800743c <HAL_UARTEx_DisableFifoMode>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800137e:	f000 f915 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000344 	.word	0x20000344
 800138c:	40008000 	.word	0x40008000

08001390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11067;
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013c4:	f642 323b 	movw	r2, #11067	@ 0x2b3b
 80013c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013d2:	2280      	movs	r2, #128	@ 0x80
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d6:	4814      	ldr	r0, [pc, #80]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013d8:	f003 fc5e 	bl	8004c98 <HAL_TIM_Base_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013e2:	f000 f8e3 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4619      	mov	r1, r3
 80013f2:	480d      	ldr	r0, [pc, #52]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013f4:	f003 fca8 	bl	8004d48 <HAL_TIM_ConfigClockSource>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013fe:	f000 f8d5 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001402:	2320      	movs	r3, #32
 8001404:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	@ (8001428 <MX_TIM2_Init+0x98>)
 8001410:	f003 fecc 	bl	80051ac <HAL_TIMEx_MasterConfigSynchronization>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800141a:	f000 f8c7 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	3720      	adds	r7, #32
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000438 	.word	0x20000438

0800142c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800144a:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <MX_TIM3_Init+0x94>)
 800144c:	4a1d      	ldr	r2, [pc, #116]	@ (80014c4 <MX_TIM3_Init+0x98>)
 800144e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <MX_TIM3_Init+0x94>)
 8001452:	2200      	movs	r2, #0
 8001454:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <MX_TIM3_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 11067;
 800145c:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <MX_TIM3_Init+0x94>)
 800145e:	f642 323b 	movw	r2, #11067	@ 0x2b3b
 8001462:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <MX_TIM3_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <MX_TIM3_Init+0x94>)
 800146c:	2280      	movs	r2, #128	@ 0x80
 800146e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001470:	4813      	ldr	r0, [pc, #76]	@ (80014c0 <MX_TIM3_Init+0x94>)
 8001472:	f003 fc11 	bl	8004c98 <HAL_TIM_Base_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800147c:	f000 f896 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001480:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001484:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4619      	mov	r1, r3
 800148c:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <MX_TIM3_Init+0x94>)
 800148e:	f003 fc5b 	bl	8004d48 <HAL_TIM_ConfigClockSource>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001498:	f000 f888 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800149c:	2320      	movs	r3, #32
 800149e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_TIM3_Init+0x94>)
 80014aa:	f003 fe7f 	bl	80051ac <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014b4:	f000 f87a 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000484 	.word	0x20000484
 80014c4:	40000400 	.word	0x40000400

080014c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014ce:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <MX_DMA_Init+0x88>)
 80014d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001550 <MX_DMA_Init+0x88>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80014da:	4b1d      	ldr	r3, [pc, #116]	@ (8001550 <MX_DMA_Init+0x88>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <MX_DMA_Init+0x88>)
 80014e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ea:	4a19      	ldr	r2, [pc, #100]	@ (8001550 <MX_DMA_Init+0x88>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80014f2:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <MX_DMA_Init+0x88>)
 80014f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014fe:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <MX_DMA_Init+0x88>)
 8001500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001502:	4a13      	ldr	r2, [pc, #76]	@ (8001550 <MX_DMA_Init+0x88>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6493      	str	r3, [r2, #72]	@ 0x48
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_DMA_Init+0x88>)
 800150c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	200b      	movs	r0, #11
 800151c:	f001 fcd7 	bl	8002ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001520:	200b      	movs	r0, #11
 8001522:	f001 fcee 	bl	8002f02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2105      	movs	r1, #5
 800152a:	200c      	movs	r0, #12
 800152c:	f001 fccf 	bl	8002ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001530:	200c      	movs	r0, #12
 8001532:	f001 fce6 	bl	8002f02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2039      	movs	r0, #57	@ 0x39
 800153c:	f001 fcc7 	bl	8002ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8001540:	2039      	movs	r0, #57	@ 0x39
 8001542:	f001 fcde 	bl	8002f02 <HAL_NVIC_EnableIRQ>

}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000

08001554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_GPIO_Init+0x44>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a0e      	ldr	r2, [pc, #56]	@ (8001598 <MX_GPIO_Init+0x44>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <MX_GPIO_Init+0x44>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <MX_GPIO_Init+0x44>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <MX_GPIO_Init+0x44>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_GPIO_Init+0x44>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000

0800159c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f006 f893 	bl	80076d0 <osDelay>
 80015aa:	e7fb      	b.n	80015a4 <StartDefaultTask+0x8>

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <Error_Handler+0x8>

080015b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_MspInit+0x50>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c2:	4a11      	ldr	r2, [pc, #68]	@ (8001608 <HAL_MspInit+0x50>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <HAL_MspInit+0x50>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <HAL_MspInit+0x50>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015da:	4a0b      	ldr	r2, [pc, #44]	@ (8001608 <HAL_MspInit+0x50>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_MspInit+0x50>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	210f      	movs	r1, #15
 80015f2:	f06f 0001 	mvn.w	r0, #1
 80015f6:	f001 fc6a 	bl	8002ece <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015fa:	f002 fc1f 	bl	8003e3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b09a      	sub	sp, #104	@ 0x68
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001624:	f107 0310 	add.w	r3, r7, #16
 8001628:	2244      	movs	r2, #68	@ 0x44
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f008 ff38 	bl	800a4a2 <memset>
  if(hadc->Instance==ADC1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800163a:	d15f      	bne.n	80016fc <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800163c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001640:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001642:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001646:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	4618      	mov	r0, r3
 800164e:	f003 f933 	bl	80048b8 <HAL_RCCEx_PeriphCLKConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001658:	f7ff ffa8 	bl	80015ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800165c:	4b29      	ldr	r3, [pc, #164]	@ (8001704 <HAL_ADC_MspInit+0xf8>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001660:	4a28      	ldr	r2, [pc, #160]	@ (8001704 <HAL_ADC_MspInit+0xf8>)
 8001662:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001666:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001668:	4b26      	ldr	r3, [pc, #152]	@ (8001704 <HAL_ADC_MspInit+0xf8>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	4b23      	ldr	r3, [pc, #140]	@ (8001704 <HAL_ADC_MspInit+0xf8>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001678:	4a22      	ldr	r2, [pc, #136]	@ (8001704 <HAL_ADC_MspInit+0xf8>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001680:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <HAL_ADC_MspInit+0xf8>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800168c:	2301      	movs	r3, #1
 800168e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001690:	2303      	movs	r3, #3
 8001692:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a2:	f002 f955 	bl	8003950 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016a6:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <HAL_ADC_MspInit+0xfc>)
 80016a8:	4a18      	ldr	r2, [pc, #96]	@ (800170c <HAL_ADC_MspInit+0x100>)
 80016aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80016ac:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <HAL_ADC_MspInit+0xfc>)
 80016ae:	2205      	movs	r2, #5
 80016b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_ADC_MspInit+0xfc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <HAL_ADC_MspInit+0xfc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <HAL_ADC_MspInit+0xfc>)
 80016c0:	2280      	movs	r2, #128	@ 0x80
 80016c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016c4:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <HAL_ADC_MspInit+0xfc>)
 80016c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <HAL_ADC_MspInit+0xfc>)
 80016ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <HAL_ADC_MspInit+0xfc>)
 80016d6:	2220      	movs	r2, #32
 80016d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016da:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <HAL_ADC_MspInit+0xfc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016e0:	4809      	ldr	r0, [pc, #36]	@ (8001708 <HAL_ADC_MspInit+0xfc>)
 80016e2:	f001 fe03 	bl	80032ec <HAL_DMA_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80016ec:	f7ff ff5e 	bl	80015ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a05      	ldr	r2, [pc, #20]	@ (8001708 <HAL_ADC_MspInit+0xfc>)
 80016f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80016f6:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <HAL_ADC_MspInit+0xfc>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016fc:	bf00      	nop
 80016fe:	3768      	adds	r7, #104	@ 0x68
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000
 8001708:	20000260 	.word	0x20000260
 800170c:	40020008 	.word	0x40020008

08001710 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	@ 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a2b      	ldr	r2, [pc, #172]	@ (80017dc <HAL_DAC_MspInit+0xcc>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d14f      	bne.n	80017d2 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001732:	4b2b      	ldr	r3, [pc, #172]	@ (80017e0 <HAL_DAC_MspInit+0xd0>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	4a2a      	ldr	r2, [pc, #168]	@ (80017e0 <HAL_DAC_MspInit+0xd0>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800173c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173e:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <HAL_DAC_MspInit+0xd0>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	4b25      	ldr	r3, [pc, #148]	@ (80017e0 <HAL_DAC_MspInit+0xd0>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	4a24      	ldr	r2, [pc, #144]	@ (80017e0 <HAL_DAC_MspInit+0xd0>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001756:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <HAL_DAC_MspInit+0xd0>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001762:	2310      	movs	r3, #16
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001766:	2303      	movs	r3, #3
 8001768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001778:	f002 f8ea 	bl	8003950 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Channel2;
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <HAL_DAC_MspInit+0xd4>)
 800177e:	4a1a      	ldr	r2, [pc, #104]	@ (80017e8 <HAL_DAC_MspInit+0xd8>)
 8001780:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001782:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <HAL_DAC_MspInit+0xd4>)
 8001784:	2206      	movs	r2, #6
 8001786:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <HAL_DAC_MspInit+0xd4>)
 800178a:	2210      	movs	r2, #16
 800178c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <HAL_DAC_MspInit+0xd4>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001794:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <HAL_DAC_MspInit+0xd4>)
 8001796:	2280      	movs	r2, #128	@ 0x80
 8001798:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800179a:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <HAL_DAC_MspInit+0xd4>)
 800179c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017a0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <HAL_DAC_MspInit+0xd4>)
 80017a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017a8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <HAL_DAC_MspInit+0xd4>)
 80017ac:	2220      	movs	r2, #32
 80017ae:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <HAL_DAC_MspInit+0xd4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80017b6:	480b      	ldr	r0, [pc, #44]	@ (80017e4 <HAL_DAC_MspInit+0xd4>)
 80017b8:	f001 fd98 	bl	80032ec <HAL_DMA_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80017c2:	f7ff fef3 	bl	80015ac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a06      	ldr	r2, [pc, #24]	@ (80017e4 <HAL_DAC_MspInit+0xd4>)
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <HAL_DAC_MspInit+0xd4>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	@ 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	50000800 	.word	0x50000800
 80017e0:	40021000 	.word	0x40021000
 80017e4:	200002d4 	.word	0x200002d4
 80017e8:	4002041c 	.word	0x4002041c

080017ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b09a      	sub	sp, #104	@ 0x68
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	2244      	movs	r2, #68	@ 0x44
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f008 fe48 	bl	800a4a2 <memset>
  if(huart->Instance==LPUART1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a37      	ldr	r2, [pc, #220]	@ (80018f4 <HAL_UART_MspInit+0x108>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d166      	bne.n	80018ea <HAL_UART_MspInit+0xfe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800181c:	2320      	movs	r3, #32
 800181e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4618      	mov	r0, r3
 800182a:	f003 f845 	bl	80048b8 <HAL_RCCEx_PeriphCLKConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001834:	f7ff feba 	bl	80015ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001838:	4b2f      	ldr	r3, [pc, #188]	@ (80018f8 <HAL_UART_MspInit+0x10c>)
 800183a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183c:	4a2e      	ldr	r2, [pc, #184]	@ (80018f8 <HAL_UART_MspInit+0x10c>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001844:	4b2c      	ldr	r3, [pc, #176]	@ (80018f8 <HAL_UART_MspInit+0x10c>)
 8001846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001850:	4b29      	ldr	r3, [pc, #164]	@ (80018f8 <HAL_UART_MspInit+0x10c>)
 8001852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001854:	4a28      	ldr	r2, [pc, #160]	@ (80018f8 <HAL_UART_MspInit+0x10c>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185c:	4b26      	ldr	r3, [pc, #152]	@ (80018f8 <HAL_UART_MspInit+0x10c>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001868:	2303      	movs	r3, #3
 800186a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001878:	2308      	movs	r3, #8
 800187a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001880:	4619      	mov	r1, r3
 8001882:	481e      	ldr	r0, [pc, #120]	@ (80018fc <HAL_UART_MspInit+0x110>)
 8001884:	f002 f864 	bl	8003950 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8001888:	4b1d      	ldr	r3, [pc, #116]	@ (8001900 <HAL_UART_MspInit+0x114>)
 800188a:	4a1e      	ldr	r2, [pc, #120]	@ (8001904 <HAL_UART_MspInit+0x118>)
 800188c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800188e:	4b1c      	ldr	r3, [pc, #112]	@ (8001900 <HAL_UART_MspInit+0x114>)
 8001890:	2223      	movs	r2, #35	@ 0x23
 8001892:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001894:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <HAL_UART_MspInit+0x114>)
 8001896:	2210      	movs	r2, #16
 8001898:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800189a:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_UART_MspInit+0x114>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018a0:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <HAL_UART_MspInit+0x114>)
 80018a2:	2280      	movs	r2, #128	@ 0x80
 80018a4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018a6:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <HAL_UART_MspInit+0x114>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ac:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <HAL_UART_MspInit+0x114>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <HAL_UART_MspInit+0x114>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <HAL_UART_MspInit+0x114>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80018be:	4810      	ldr	r0, [pc, #64]	@ (8001900 <HAL_UART_MspInit+0x114>)
 80018c0:	f001 fd14 	bl	80032ec <HAL_DMA_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80018ca:	f7ff fe6f 	bl	80015ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001900 <HAL_UART_MspInit+0x114>)
 80018d2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80018d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <HAL_UART_MspInit+0x114>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2105      	movs	r1, #5
 80018de:	205b      	movs	r0, #91	@ 0x5b
 80018e0:	f001 faf5 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80018e4:	205b      	movs	r0, #91	@ 0x5b
 80018e6:	f001 fb0c 	bl	8002f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	3768      	adds	r7, #104	@ 0x68
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40008000 	.word	0x40008000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	48000800 	.word	0x48000800
 8001900:	200003d8 	.word	0x200003d8
 8001904:	4002001c 	.word	0x4002001c

08001908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001918:	d10c      	bne.n	8001934 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_TIM_Base_MspInit+0x5c>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191e:	4a11      	ldr	r2, [pc, #68]	@ (8001964 <HAL_TIM_Base_MspInit+0x5c>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6593      	str	r3, [r2, #88]	@ 0x58
 8001926:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <HAL_TIM_Base_MspInit+0x5c>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001932:	e010      	b.n	8001956 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0b      	ldr	r2, [pc, #44]	@ (8001968 <HAL_TIM_Base_MspInit+0x60>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d10b      	bne.n	8001956 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_TIM_Base_MspInit+0x5c>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001942:	4a08      	ldr	r2, [pc, #32]	@ (8001964 <HAL_TIM_Base_MspInit+0x5c>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6593      	str	r3, [r2, #88]	@ 0x58
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_TIM_Base_MspInit+0x5c>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	40000400 	.word	0x40000400

0800196c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <NMI_Handler+0x4>

08001974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <HardFault_Handler+0x4>

0800197c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <MemManage_Handler+0x4>

08001984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <UsageFault_Handler+0x4>

08001994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a6:	f000 f985 	bl	8001cb4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80019aa:	f007 f9b3 	bl	8008d14 <xTaskGetSchedulerState>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d001      	beq.n	80019b8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80019b4:	f007 fd98 	bl	80094e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <DMA1_Channel1_IRQHandler+0x10>)
 80019c2:	f001 fe76 	bl	80036b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000260 	.word	0x20000260

080019d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <DMA1_Channel2_IRQHandler+0x10>)
 80019d6:	f001 fe6c 	bl	80036b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200003d8 	.word	0x200003d8

080019e4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80019e8:	4802      	ldr	r0, [pc, #8]	@ (80019f4 <DMA2_Channel2_IRQHandler+0x10>)
 80019ea:	f001 fe62 	bl	80036b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200002d4 	.word	0x200002d4

080019f8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80019fc:	4802      	ldr	r0, [pc, #8]	@ (8001a08 <LPUART1_IRQHandler+0x10>)
 80019fe:	f003 fd73 	bl	80054e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000344 	.word	0x20000344

08001a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return 1;
 8001a10:	2301      	movs	r3, #1
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_kill>:

int _kill(int pid, int sig)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a26:	f008 fde5 	bl	800a5f4 <__errno>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2216      	movs	r2, #22
 8001a2e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <_exit>:

void _exit (int status)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffe7 	bl	8001a1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a4e:	bf00      	nop
 8001a50:	e7fd      	b.n	8001a4e <_exit+0x12>

08001a52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e00a      	b.n	8001a7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a64:	f3af 8000 	nop.w
 8001a68:	4601      	mov	r1, r0
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	60ba      	str	r2, [r7, #8]
 8001a70:	b2ca      	uxtb	r2, r1
 8001a72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	dbf0      	blt.n	8001a64 <_read+0x12>
  }

  return len;
 8001a82:	687b      	ldr	r3, [r7, #4]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e009      	b.n	8001ab2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	60ba      	str	r2, [r7, #8]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbf1      	blt.n	8001a9e <_write+0x12>
  }
  return len;
 8001aba:	687b      	ldr	r3, [r7, #4]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_close>:

int _close(int file)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aec:	605a      	str	r2, [r3, #4]
  return 0;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_isatty>:

int _isatty(int file)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b04:	2301      	movs	r3, #1
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	@ (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	@ (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d207      	bcs.n	8001b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b5c:	f008 fd4a 	bl	800a5f4 <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	220c      	movs	r2, #12
 8001b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e009      	b.n	8001b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b72:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a05      	ldr	r2, [pc, #20]	@ (8001b90 <_sbrk+0x64>)
 8001b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20008000 	.word	0x20008000
 8001b8c:	00000400 	.word	0x00000400
 8001b90:	200004e0 	.word	0x200004e0
 8001b94:	20004788 	.word	0x20004788

08001b98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <SystemInit+0x20>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ba2:	4a05      	ldr	r2, [pc, #20]	@ (8001bb8 <SystemInit+0x20>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bbc:	480d      	ldr	r0, [pc, #52]	@ (8001bf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bbe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc0:	f7ff ffea 	bl	8001b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc4:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc6:	490d      	ldr	r1, [pc, #52]	@ (8001bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <LoopForever+0xe>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8001c08 <LoopForever+0x16>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001bea:	f008 fd09 	bl	800a600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bee:	f7ff fa15 	bl	800101c <main>

08001bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf2:	e7fe      	b.n	8001bf2 <LoopForever>
  ldr   r0, =_estack
 8001bf4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001c00:	0800c7a0 	.word	0x0800c7a0
  ldr r2, =_sbss
 8001c04:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c08:	20004788 	.word	0x20004788

08001c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC1_2_IRQHandler>

08001c0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f001 f94d 	bl	8002eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c1e:	200f      	movs	r0, #15
 8001c20:	f000 f80e 	bl	8001c40 <HAL_InitTick>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	e001      	b.n	8001c34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c30:	f7ff fcc2 	bl	80015b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c34:	79fb      	ldrb	r3, [r7, #7]

}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ca8 <HAL_InitTick+0x68>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d022      	beq.n	8001c9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c54:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <HAL_InitTick+0x6c>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <HAL_InitTick+0x68>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c60:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 f958 	bl	8002f1e <HAL_SYSTICK_Config>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10f      	bne.n	8001c94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b0f      	cmp	r3, #15
 8001c78:	d809      	bhi.n	8001c8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c82:	f001 f924 	bl	8002ece <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <HAL_InitTick+0x70>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	e007      	b.n	8001c9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	73fb      	strb	r3, [r7, #15]
 8001c92:	e004      	b.n	8001c9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	e001      	b.n	8001c9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <HAL_IncTick+0x1c>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <HAL_IncTick+0x20>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a03      	ldr	r2, [pc, #12]	@ (8001cd0 <HAL_IncTick+0x1c>)
 8001cc4:	6013      	str	r3, [r2, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	200004e4 	.word	0x200004e4
 8001cd4:	20000008 	.word	0x20000008

08001cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <HAL_GetTick+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	200004e4 	.word	0x200004e4

08001cf0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	609a      	str	r2, [r3, #8]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3360      	adds	r3, #96	@ 0x60
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <LL_ADC_SetOffset+0x44>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	4313      	orrs	r3, r2
 8001d88:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d90:	bf00      	nop
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	03fff000 	.word	0x03fff000

08001da0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3360      	adds	r3, #96	@ 0x60
 8001dae:	461a      	mov	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3360      	adds	r3, #96	@ 0x60
 8001ddc:	461a      	mov	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b087      	sub	sp, #28
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3360      	adds	r3, #96	@ 0x60
 8001e12:	461a      	mov	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e2c:	bf00      	nop
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3360      	adds	r3, #96	@ 0x60
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e62:	bf00      	nop
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	615a      	str	r2, [r3, #20]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3330      	adds	r3, #48	@ 0x30
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	4413      	add	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	211f      	movs	r1, #31
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	0e9b      	lsrs	r3, r3, #26
 8001ecc:	f003 011f 	and.w	r1, r3, #31
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	431a      	orrs	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ee0:	bf00      	nop
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3314      	adds	r3, #20
 8001efc:	461a      	mov	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	0e5b      	lsrs	r3, r3, #25
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	4413      	add	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	0d1b      	lsrs	r3, r3, #20
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	2107      	movs	r1, #7
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	401a      	ands	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	0d1b      	lsrs	r3, r3, #20
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	431a      	orrs	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f36:	bf00      	nop
 8001f38:	371c      	adds	r7, #28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	401a      	ands	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0318 	and.w	r3, r3, #24
 8001f66:	4908      	ldr	r1, [pc, #32]	@ (8001f88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f68:	40d9      	lsrs	r1, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	400b      	ands	r3, r1
 8001f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f72:	431a      	orrs	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	0007ffff 	.word	0x0007ffff

08001f8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6093      	str	r3, [r2, #8]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fc4:	d101      	bne.n	8001fca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001fe8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002010:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002014:	d101      	bne.n	800201a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <LL_ADC_IsEnabled+0x18>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <LL_ADC_IsEnabled+0x1a>
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b04      	cmp	r3, #4
 8002060:	d101      	bne.n	8002066 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b08      	cmp	r3, #8
 8002086:	d101      	bne.n	800208c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b089      	sub	sp, #36	@ 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e167      	b.n	8002386 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d109      	bne.n	80020d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff faa1 	bl	800160c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff67 	bl	8001fb0 <LL_ADC_IsDeepPowerDownEnabled>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d004      	beq.n	80020f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff4d 	bl	8001f8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff82 	bl	8002000 <LL_ADC_IsInternalRegulatorEnabled>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d115      	bne.n	800212e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff66 	bl	8001fd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800210c:	4ba0      	ldr	r3, [pc, #640]	@ (8002390 <HAL_ADC_Init+0x2f4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	099b      	lsrs	r3, r3, #6
 8002112:	4aa0      	ldr	r2, [pc, #640]	@ (8002394 <HAL_ADC_Init+0x2f8>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	3301      	adds	r3, #1
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002120:	e002      	b.n	8002128 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3b01      	subs	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f9      	bne.n	8002122 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff64 	bl	8002000 <LL_ADC_IsInternalRegulatorEnabled>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10d      	bne.n	800215a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002142:	f043 0210 	orr.w	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff75 	bl	800204e <LL_ADC_REG_IsConversionOngoing>
 8002164:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 8100 	bne.w	8002374 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80fc 	bne.w	8002374 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002180:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002184:	f043 0202 	orr.w	r2, r3, #2
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff49 	bl	8002028 <LL_ADC_IsEnabled>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d111      	bne.n	80021c0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800219c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021a0:	f7ff ff42 	bl	8002028 <LL_ADC_IsEnabled>
 80021a4:	4604      	mov	r4, r0
 80021a6:	487c      	ldr	r0, [pc, #496]	@ (8002398 <HAL_ADC_Init+0x2fc>)
 80021a8:	f7ff ff3e 	bl	8002028 <LL_ADC_IsEnabled>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4323      	orrs	r3, r4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4619      	mov	r1, r3
 80021ba:	4878      	ldr	r0, [pc, #480]	@ (800239c <HAL_ADC_Init+0x300>)
 80021bc:	f7ff fd98 	bl	8001cf0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7f5b      	ldrb	r3, [r3, #29]
 80021c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d106      	bne.n	80021fc <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f2:	3b01      	subs	r3, #1
 80021f4:	045b      	lsls	r3, r3, #17
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d009      	beq.n	8002218 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002208:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	4b60      	ldr	r3, [pc, #384]	@ (80023a0 <HAL_ADC_Init+0x304>)
 8002220:	4013      	ands	r3, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	69b9      	ldr	r1, [r7, #24]
 8002228:	430b      	orrs	r3, r1
 800222a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ff14 	bl	8002074 <LL_ADC_INJ_IsConversionOngoing>
 800224c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d16d      	bne.n	8002330 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d16a      	bne.n	8002330 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800225e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002266:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002276:	f023 0302 	bic.w	r3, r3, #2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	69b9      	ldr	r1, [r7, #24]
 8002280:	430b      	orrs	r3, r1
 8002282:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d017      	beq.n	80022bc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800229a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80022a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6911      	ldr	r1, [r2, #16]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80022ba:	e013      	b.n	80022e4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80022ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d118      	bne.n	8002320 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002304:	4311      	orrs	r1, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800230a:	4311      	orrs	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002310:	430a      	orrs	r2, r1
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	611a      	str	r2, [r3, #16]
 800231e:	e007      	b.n	8002330 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d10c      	bne.n	8002352 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	f023 010f 	bic.w	r1, r3, #15
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	1e5a      	subs	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002350:	e007      	b.n	8002362 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 020f 	bic.w	r2, r2, #15
 8002360:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	f043 0201 	orr.w	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002372:	e007      	b.n	8002384 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002378:	f043 0210 	orr.w	r2, r3, #16
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002384:	7ffb      	ldrb	r3, [r7, #31]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	@ 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd90      	pop	{r4, r7, pc}
 800238e:	bf00      	nop
 8002390:	20000000 	.word	0x20000000
 8002394:	053e2d63 	.word	0x053e2d63
 8002398:	50000100 	.word	0x50000100
 800239c:	50000300 	.word	0x50000300
 80023a0:	fff04007 	.word	0xfff04007

080023a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b0b6      	sub	sp, #216	@ 0xd8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x22>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e3c8      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x7b4>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fe3b 	bl	800204e <LL_ADC_REG_IsConversionOngoing>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 83ad 	bne.w	8002b3a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	f7ff fd51 	bl	8001e94 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fe29 	bl	800204e <LL_ADC_REG_IsConversionOngoing>
 80023fc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fe35 	bl	8002074 <LL_ADC_INJ_IsConversionOngoing>
 800240a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800240e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 81d9 	bne.w	80027ca <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002418:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800241c:	2b00      	cmp	r3, #0
 800241e:	f040 81d4 	bne.w	80027ca <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800242a:	d10f      	bne.n	800244c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2200      	movs	r2, #0
 8002436:	4619      	mov	r1, r3
 8002438:	f7ff fd58 	bl	8001eec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fd12 	bl	8001e6e <LL_ADC_SetSamplingTimeCommonConfig>
 800244a:	e00e      	b.n	800246a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6819      	ldr	r1, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	461a      	mov	r2, r3
 800245a:	f7ff fd47 	bl	8001eec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fd02 	bl	8001e6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	08db      	lsrs	r3, r3, #3
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d022      	beq.n	80024d2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6919      	ldr	r1, [r3, #16]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800249c:	f7ff fc5c 	bl	8001d58 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	6919      	ldr	r1, [r3, #16]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	461a      	mov	r2, r3
 80024ae:	f7ff fca8 	bl	8001e02 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d102      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x124>
 80024c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024c6:	e000      	b.n	80024ca <HAL_ADC_ConfigChannel+0x126>
 80024c8:	2300      	movs	r3, #0
 80024ca:	461a      	mov	r2, r3
 80024cc:	f7ff fcb4 	bl	8001e38 <LL_ADC_SetOffsetSaturation>
 80024d0:	e17b      	b.n	80027ca <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fc61 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10a      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x15a>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fc56 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 80024f4:	4603      	mov	r3, r0
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	f003 021f 	and.w	r2, r3, #31
 80024fc:	e01e      	b.n	800253c <HAL_ADC_ConfigChannel+0x198>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fc4b 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800251c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002520:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002524:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800252c:	2320      	movs	r3, #32
 800252e:	e004      	b.n	800253a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002530:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002534:	fab3 f383 	clz	r3, r3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x1b0>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	0e9b      	lsrs	r3, r3, #26
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	e018      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1e2>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800256c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002570:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002578:	2320      	movs	r3, #32
 800257a:	e004      	b.n	8002586 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800257c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002586:	429a      	cmp	r2, r3
 8002588:	d106      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fc1a 	bl	8001dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fbfe 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10a      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x220>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2101      	movs	r1, #1
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fbf3 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 80025ba:	4603      	mov	r3, r0
 80025bc:	0e9b      	lsrs	r3, r3, #26
 80025be:	f003 021f 	and.w	r2, r3, #31
 80025c2:	e01e      	b.n	8002602 <HAL_ADC_ConfigChannel+0x25e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2101      	movs	r1, #1
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fbe8 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80025e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80025ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80025f2:	2320      	movs	r3, #32
 80025f4:	e004      	b.n	8002600 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80025f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260a:	2b00      	cmp	r3, #0
 800260c:	d105      	bne.n	800261a <HAL_ADC_ConfigChannel+0x276>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	0e9b      	lsrs	r3, r3, #26
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	e018      	b.n	800264c <HAL_ADC_ConfigChannel+0x2a8>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800262e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002632:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002636:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800263e:	2320      	movs	r3, #32
 8002640:	e004      	b.n	800264c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002642:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800264c:	429a      	cmp	r2, r3
 800264e:	d106      	bne.n	800265e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2200      	movs	r2, #0
 8002656:	2101      	movs	r1, #1
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fbb7 	bl	8001dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2102      	movs	r1, #2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fb9b 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 800266a:	4603      	mov	r3, r0
 800266c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <HAL_ADC_ConfigChannel+0x2e6>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2102      	movs	r1, #2
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fb90 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	0e9b      	lsrs	r3, r3, #26
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	e01e      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x324>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2102      	movs	r1, #2
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fb85 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002696:	4603      	mov	r3, r0
 8002698:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80026a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80026b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80026b8:	2320      	movs	r3, #32
 80026ba:	e004      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80026bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d105      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x33c>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0e9b      	lsrs	r3, r3, #26
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	e016      	b.n	800270e <HAL_ADC_ConfigChannel+0x36a>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80026f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80026f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002700:	2320      	movs	r3, #32
 8002702:	e004      	b.n	800270e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002704:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800270e:	429a      	cmp	r2, r3
 8002710:	d106      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2200      	movs	r2, #0
 8002718:	2102      	movs	r1, #2
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fb56 	bl	8001dcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2103      	movs	r1, #3
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fb3a 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10a      	bne.n	800274c <HAL_ADC_ConfigChannel+0x3a8>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2103      	movs	r1, #3
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fb2f 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	0e9b      	lsrs	r3, r3, #26
 8002746:	f003 021f 	and.w	r2, r3, #31
 800274a:	e017      	b.n	800277c <HAL_ADC_ConfigChannel+0x3d8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2103      	movs	r1, #3
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fb24 	bl	8001da0 <LL_ADC_GetOffsetChannel>
 8002758:	4603      	mov	r3, r0
 800275a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002764:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002766:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002768:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e003      	b.n	800277a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002772:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x3f0>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0e9b      	lsrs	r3, r3, #26
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	e011      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x414>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80027a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80027a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80027ac:	2320      	movs	r3, #32
 80027ae:	e003      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80027b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d106      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	2103      	movs	r1, #3
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fb01 	bl	8001dcc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fc2a 	bl	8002028 <LL_ADC_IsEnabled>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f040 8140 	bne.w	8002a5c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6819      	ldr	r1, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	461a      	mov	r2, r3
 80027ea:	f7ff fbab 	bl	8001f44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	4a8f      	ldr	r2, [pc, #572]	@ (8002a30 <HAL_ADC_ConfigChannel+0x68c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	f040 8131 	bne.w	8002a5c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10b      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x47e>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	0e9b      	lsrs	r3, r3, #26
 8002810:	3301      	adds	r3, #1
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	2b09      	cmp	r3, #9
 8002818:	bf94      	ite	ls
 800281a:	2301      	movls	r3, #1
 800281c:	2300      	movhi	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	e019      	b.n	8002856 <HAL_ADC_ConfigChannel+0x4b2>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002830:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002832:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002834:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800283a:	2320      	movs	r3, #32
 800283c:	e003      	b.n	8002846 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800283e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
 8002846:	3301      	adds	r3, #1
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	2b09      	cmp	r3, #9
 800284e:	bf94      	ite	ls
 8002850:	2301      	movls	r3, #1
 8002852:	2300      	movhi	r3, #0
 8002854:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002856:	2b00      	cmp	r3, #0
 8002858:	d079      	beq.n	800294e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002862:	2b00      	cmp	r3, #0
 8002864:	d107      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x4d2>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	0e9b      	lsrs	r3, r3, #26
 800286c:	3301      	adds	r3, #1
 800286e:	069b      	lsls	r3, r3, #26
 8002870:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002874:	e015      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x4fe>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002886:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800288e:	2320      	movs	r3, #32
 8002890:	e003      	b.n	800289a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	3301      	adds	r3, #1
 800289c:	069b      	lsls	r3, r3, #26
 800289e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x51e>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	0e9b      	lsrs	r3, r3, #26
 80028b4:	3301      	adds	r3, #1
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	e017      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x54e>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80028d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80028d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80028da:	2320      	movs	r3, #32
 80028dc:	e003      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80028de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	3301      	adds	r3, #1
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	2101      	movs	r1, #1
 80028ee:	fa01 f303 	lsl.w	r3, r1, r3
 80028f2:	ea42 0103 	orr.w	r1, r2, r3
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10a      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x574>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	0e9b      	lsrs	r3, r3, #26
 8002908:	3301      	adds	r3, #1
 800290a:	f003 021f 	and.w	r2, r3, #31
 800290e:	4613      	mov	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	051b      	lsls	r3, r3, #20
 8002916:	e018      	b.n	800294a <HAL_ADC_ConfigChannel+0x5a6>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002920:	fa93 f3a3 	rbit	r3, r3
 8002924:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002928:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800292a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002930:	2320      	movs	r3, #32
 8002932:	e003      	b.n	800293c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	3301      	adds	r3, #1
 800293e:	f003 021f 	and.w	r2, r3, #31
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800294a:	430b      	orrs	r3, r1
 800294c:	e081      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002956:	2b00      	cmp	r3, #0
 8002958:	d107      	bne.n	800296a <HAL_ADC_ConfigChannel+0x5c6>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0e9b      	lsrs	r3, r3, #26
 8002960:	3301      	adds	r3, #1
 8002962:	069b      	lsls	r3, r3, #26
 8002964:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002968:	e015      	b.n	8002996 <HAL_ADC_ConfigChannel+0x5f2>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800297c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002982:	2320      	movs	r3, #32
 8002984:	e003      	b.n	800298e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	3301      	adds	r3, #1
 8002990:	069b      	lsls	r3, r3, #26
 8002992:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x612>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	0e9b      	lsrs	r3, r3, #26
 80029a8:	3301      	adds	r3, #1
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2101      	movs	r1, #1
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	e017      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x642>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	61fb      	str	r3, [r7, #28]
  return result;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80029ce:	2320      	movs	r3, #32
 80029d0:	e003      	b.n	80029da <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	3301      	adds	r3, #1
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2101      	movs	r1, #1
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	ea42 0103 	orr.w	r1, r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10d      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x66e>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	3301      	adds	r3, #1
 80029fe:	f003 021f 	and.w	r2, r3, #31
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	3b1e      	subs	r3, #30
 8002a0a:	051b      	lsls	r3, r3, #20
 8002a0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a10:	e01e      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x6ac>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	613b      	str	r3, [r7, #16]
  return result;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d104      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	e006      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x698>
 8002a2e:	bf00      	nop
 8002a30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f003 021f 	and.w	r2, r3, #31
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	3b1e      	subs	r3, #30
 8002a4a:	051b      	lsls	r3, r3, #20
 8002a4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a56:	4619      	mov	r1, r3
 8002a58:	f7ff fa48 	bl	8001eec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b3f      	ldr	r3, [pc, #252]	@ (8002b60 <HAL_ADC_ConfigChannel+0x7bc>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d071      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a68:	483e      	ldr	r0, [pc, #248]	@ (8002b64 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a6a:	f7ff f967 	bl	8001d3c <LL_ADC_GetCommonPathInternalCh>
 8002a6e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a3c      	ldr	r2, [pc, #240]	@ (8002b68 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d004      	beq.n	8002a86 <HAL_ADC_ConfigChannel+0x6e2>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a3a      	ldr	r2, [pc, #232]	@ (8002b6c <HAL_ADC_ConfigChannel+0x7c8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d127      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d121      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a9a:	d157      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002aa0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	482f      	ldr	r0, [pc, #188]	@ (8002b64 <HAL_ADC_ConfigChannel+0x7c0>)
 8002aa8:	f7ff f935 	bl	8001d16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aac:	4b30      	ldr	r3, [pc, #192]	@ (8002b70 <HAL_ADC_ConfigChannel+0x7cc>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	099b      	lsrs	r3, r3, #6
 8002ab2:	4a30      	ldr	r2, [pc, #192]	@ (8002b74 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ac6:	e002      	b.n	8002ace <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f9      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ad4:	e03a      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a27      	ldr	r2, [pc, #156]	@ (8002b78 <HAL_ADC_ConfigChannel+0x7d4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d113      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ae0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ae4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10d      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a22      	ldr	r2, [pc, #136]	@ (8002b7c <HAL_ADC_ConfigChannel+0x7d8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d02a      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002afa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002afe:	4619      	mov	r1, r3
 8002b00:	4818      	ldr	r0, [pc, #96]	@ (8002b64 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b02:	f7ff f908 	bl	8001d16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b06:	e021      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b80 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d11c      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d116      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a16      	ldr	r2, [pc, #88]	@ (8002b7c <HAL_ADC_ConfigChannel+0x7d8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d011      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b30:	4619      	mov	r1, r3
 8002b32:	480c      	ldr	r0, [pc, #48]	@ (8002b64 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b34:	f7ff f8ef 	bl	8001d16 <LL_ADC_SetCommonPathInternalCh>
 8002b38:	e008      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3e:	f043 0220 	orr.w	r2, r3, #32
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b54:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	37d8      	adds	r7, #216	@ 0xd8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	80080000 	.word	0x80080000
 8002b64:	50000300 	.word	0x50000300
 8002b68:	c3210000 	.word	0xc3210000
 8002b6c:	90c00010 	.word	0x90c00010
 8002b70:	20000000 	.word	0x20000000
 8002b74:	053e2d63 	.word	0x053e2d63
 8002b78:	c7520000 	.word	0xc7520000
 8002b7c:	50000100 	.word	0x50000100
 8002b80:	cb840000 	.word	0xcb840000

08002b84 <LL_ADC_IsEnabled>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <LL_ADC_IsEnabled+0x18>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <LL_ADC_IsEnabled+0x1a>
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <LL_ADC_REG_IsConversionOngoing>:
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d101      	bne.n	8002bc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b0a1      	sub	sp, #132	@ 0x84
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e08b      	b.n	8002d06 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c06:	d102      	bne.n	8002c0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c08:	4b41      	ldr	r3, [pc, #260]	@ (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	e001      	b.n	8002c12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10b      	bne.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e06a      	b.n	8002d06 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ffb9 	bl	8002baa <LL_ADC_REG_IsConversionOngoing>
 8002c38:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ffb3 	bl	8002baa <LL_ADC_REG_IsConversionOngoing>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d14c      	bne.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d149      	bne.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c50:	4b30      	ldr	r3, [pc, #192]	@ (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002c52:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d028      	beq.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c6e:	035b      	lsls	r3, r3, #13
 8002c70:	430b      	orrs	r3, r1
 8002c72:	431a      	orrs	r2, r3
 8002c74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c78:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c7c:	f7ff ff82 	bl	8002b84 <LL_ADC_IsEnabled>
 8002c80:	4604      	mov	r4, r0
 8002c82:	4823      	ldr	r0, [pc, #140]	@ (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c84:	f7ff ff7e 	bl	8002b84 <LL_ADC_IsEnabled>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4323      	orrs	r3, r4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d133      	bne.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c98:	f023 030f 	bic.w	r3, r3, #15
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	6811      	ldr	r1, [r2, #0]
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	6892      	ldr	r2, [r2, #8]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002caa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cac:	e024      	b.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cb8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cba:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002cbe:	f7ff ff61 	bl	8002b84 <LL_ADC_IsEnabled>
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	4812      	ldr	r0, [pc, #72]	@ (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002cc6:	f7ff ff5d 	bl	8002b84 <LL_ADC_IsEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4323      	orrs	r3, r4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d112      	bne.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002cda:	f023 030f 	bic.w	r3, r3, #15
 8002cde:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ce0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce2:	e009      	b.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce8:	f043 0220 	orr.w	r2, r3, #32
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002cf6:	e000      	b.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cf8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d02:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3784      	adds	r7, #132	@ 0x84
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd90      	pop	{r4, r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	50000100 	.word	0x50000100
 8002d14:	50000300 	.word	0x50000300

08002d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d28:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d34:	4013      	ands	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d4a:	4a04      	ldr	r2, [pc, #16]	@ (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	60d3      	str	r3, [r2, #12]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d64:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <__NVIC_GetPriorityGrouping+0x18>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	f003 0307 	and.w	r3, r3, #7
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	db0b      	blt.n	8002da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	f003 021f 	and.w	r2, r3, #31
 8002d94:	4907      	ldr	r1, [pc, #28]	@ (8002db4 <__NVIC_EnableIRQ+0x38>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000e100 	.word	0xe000e100

08002db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	db0a      	blt.n	8002de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	490c      	ldr	r1, [pc, #48]	@ (8002e04 <__NVIC_SetPriority+0x4c>)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	0112      	lsls	r2, r2, #4
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de0:	e00a      	b.n	8002df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4908      	ldr	r1, [pc, #32]	@ (8002e08 <__NVIC_SetPriority+0x50>)
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	3b04      	subs	r3, #4
 8002df0:	0112      	lsls	r2, r2, #4
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	440b      	add	r3, r1
 8002df6:	761a      	strb	r2, [r3, #24]
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000e100 	.word	0xe000e100
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	@ 0x24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f1c3 0307 	rsb	r3, r3, #7
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	bf28      	it	cs
 8002e2a:	2304      	movcs	r3, #4
 8002e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2b06      	cmp	r3, #6
 8002e34:	d902      	bls.n	8002e3c <NVIC_EncodePriority+0x30>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3b03      	subs	r3, #3
 8002e3a:	e000      	b.n	8002e3e <NVIC_EncodePriority+0x32>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	401a      	ands	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e54:	f04f 31ff 	mov.w	r1, #4294967295
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	43d9      	mvns	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	4313      	orrs	r3, r2
         );
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3724      	adds	r7, #36	@ 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e84:	d301      	bcc.n	8002e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00f      	b.n	8002eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb4 <SysTick_Config+0x40>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e92:	210f      	movs	r1, #15
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	f7ff ff8e 	bl	8002db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e9c:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <SysTick_Config+0x40>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea2:	4b04      	ldr	r3, [pc, #16]	@ (8002eb4 <SysTick_Config+0x40>)
 8002ea4:	2207      	movs	r2, #7
 8002ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	e000e010 	.word	0xe000e010

08002eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ff29 	bl	8002d18 <__NVIC_SetPriorityGrouping>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002edc:	f7ff ff40 	bl	8002d60 <__NVIC_GetPriorityGrouping>
 8002ee0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	6978      	ldr	r0, [r7, #20]
 8002ee8:	f7ff ff90 	bl	8002e0c <NVIC_EncodePriority>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff5f 	bl	8002db8 <__NVIC_SetPriority>
}
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff ff33 	bl	8002d7c <__NVIC_EnableIRQ>
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff ffa4 	bl	8002e74 <SysTick_Config>
 8002f2c:	4603      	mov	r3, r0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e014      	b.n	8002f72 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	791b      	ldrb	r3, [r3, #4]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d105      	bne.n	8002f5e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7fe fbd9 	bl	8001710 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2202      	movs	r2, #2
 8002f62:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	@ 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_DAC_ConfigChannel+0x1c>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e19e      	b.n	80032da <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	795b      	ldrb	r3, [r3, #5]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_DAC_ConfigChannel+0x2c>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e198      	b.n	80032da <HAL_DAC_ConfigChannel+0x35e>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d17a      	bne.n	80030b2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002fbc:	f7fe fe8c 	bl	8001cd8 <HAL_GetTick>
 8002fc0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d13d      	bne.n	8003044 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fc8:	e018      	b.n	8002ffc <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fca:	f7fe fe85 	bl	8001cd8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d911      	bls.n	8002ffc <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f043 0208 	orr.w	r2, r3, #8
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e16e      	b.n	80032da <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003002:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1df      	bne.n	8002fca <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003012:	641a      	str	r2, [r3, #64]	@ 0x40
 8003014:	e020      	b.n	8003058 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003016:	f7fe fe5f 	bl	8001cd8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d90f      	bls.n	8003044 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302a:	2b00      	cmp	r3, #0
 800302c:	da0a      	bge.n	8003044 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f043 0208 	orr.w	r2, r3, #8
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2203      	movs	r2, #3
 800303e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e14a      	b.n	80032da <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304a:	2b00      	cmp	r3, #0
 800304c:	dbe3      	blt.n	8003016 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003056:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	ea02 0103 	and.w	r1, r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	409a      	lsls	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	21ff      	movs	r1, #255	@ 0xff
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	ea02 0103 	and.w	r1, r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	409a      	lsls	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d11d      	bne.n	80030f6 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	221f      	movs	r2, #31
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d2:	4013      	ands	r3, r2
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ea:	4313      	orrs	r3, r2
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030fc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2207      	movs	r2, #7
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310e:	4013      	ands	r3, r2
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d102      	bne.n	8003120 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800311a:	2300      	movs	r3, #0
 800311c:	623b      	str	r3, [r7, #32]
 800311e:	e00f      	b.n	8003140 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d102      	bne.n	800312e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003128:	2301      	movs	r3, #1
 800312a:	623b      	str	r3, [r7, #32]
 800312c:	e008      	b.n	8003140 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d102      	bne.n	800313c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003136:	2301      	movs	r3, #1
 8003138:	623b      	str	r3, [r7, #32]
 800313a:	e001      	b.n	8003140 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800313c:	2300      	movs	r3, #0
 800313e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	6a3a      	ldr	r2, [r7, #32]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003162:	4013      	ands	r3, r2
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	791b      	ldrb	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d102      	bne.n	8003174 <HAL_DAC_ConfigChannel+0x1f8>
 800316e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003172:	e000      	b.n	8003176 <HAL_DAC_ConfigChannel+0x1fa>
 8003174:	2300      	movs	r3, #0
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800318e:	4013      	ands	r3, r2
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	795b      	ldrb	r3, [r3, #5]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d102      	bne.n	80031a0 <HAL_DAC_ConfigChannel+0x224>
 800319a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800319e:	e000      	b.n	80031a2 <HAL_DAC_ConfigChannel+0x226>
 80031a0:	2300      	movs	r3, #0
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d114      	bne.n	80031e2 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80031b8:	f001 fb00 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 80031bc:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4a48      	ldr	r2, [pc, #288]	@ (80032e4 <HAL_DAC_ConfigChannel+0x368>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d904      	bls.n	80031d0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ce:	e00f      	b.n	80031f0 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4a45      	ldr	r2, [pc, #276]	@ (80032e8 <HAL_DAC_ConfigChannel+0x36c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d90a      	bls.n	80031ee <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031de:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e0:	e006      	b.n	80031f0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e8:	4313      	orrs	r3, r2
 80031ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ec:	e000      	b.n	80031f0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80031ee:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031fe:	4313      	orrs	r3, r2
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003208:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43da      	mvns	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	400a      	ands	r2, r1
 8003226:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003242:	4013      	ands	r3, r2
 8003244:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800325a:	4313      	orrs	r3, r2
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003264:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6819      	ldr	r1, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	22c0      	movs	r2, #192	@ 0xc0
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43da      	mvns	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	400a      	ands	r2, r1
 8003280:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	f003 030f 	and.w	r3, r3, #15
 800328c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	ea02 0103 	and.w	r1, r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	409a      	lsls	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80032d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3728      	adds	r7, #40	@ 0x28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	09896800 	.word	0x09896800
 80032e8:	04c4b400 	.word	0x04c4b400

080032ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e08d      	b.n	800341a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	4b47      	ldr	r3, [pc, #284]	@ (8003424 <HAL_DMA_Init+0x138>)
 8003306:	429a      	cmp	r2, r3
 8003308:	d80f      	bhi.n	800332a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	4b45      	ldr	r3, [pc, #276]	@ (8003428 <HAL_DMA_Init+0x13c>)
 8003312:	4413      	add	r3, r2
 8003314:	4a45      	ldr	r2, [pc, #276]	@ (800342c <HAL_DMA_Init+0x140>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	009a      	lsls	r2, r3, #2
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a42      	ldr	r2, [pc, #264]	@ (8003430 <HAL_DMA_Init+0x144>)
 8003326:	641a      	str	r2, [r3, #64]	@ 0x40
 8003328:	e00e      	b.n	8003348 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	4b40      	ldr	r3, [pc, #256]	@ (8003434 <HAL_DMA_Init+0x148>)
 8003332:	4413      	add	r3, r2
 8003334:	4a3d      	ldr	r2, [pc, #244]	@ (800342c <HAL_DMA_Init+0x140>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	009a      	lsls	r2, r3, #2
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a3c      	ldr	r2, [pc, #240]	@ (8003438 <HAL_DMA_Init+0x14c>)
 8003346:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800335e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003362:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800336c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003384:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fa76 	bl	800388c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033a8:	d102      	bne.n	80033b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d010      	beq.n	80033f0 <HAL_DMA_Init+0x104>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d80c      	bhi.n	80033f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa96 	bl	8003908 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	e008      	b.n	8003402 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40020407 	.word	0x40020407
 8003428:	bffdfff8 	.word	0xbffdfff8
 800342c:	cccccccd 	.word	0xcccccccd
 8003430:	40020000 	.word	0x40020000
 8003434:	bffdfbf8 	.word	0xbffdfbf8
 8003438:	40020400 	.word	0x40020400

0800343c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_DMA_Start_IT+0x20>
 8003458:	2302      	movs	r3, #2
 800345a:	e066      	b.n	800352a <HAL_DMA_Start_IT+0xee>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	d155      	bne.n	800351c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f9bb 	bl	8003810 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 020e 	orr.w	r2, r2, #14
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e00f      	b.n	80034d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0204 	bic.w	r2, r2, #4
 80034c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 020a 	orr.w	r2, r2, #10
 80034d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034f0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003504:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003508:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e005      	b.n	8003528 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003524:	2302      	movs	r3, #2
 8003526:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003528:	7dfb      	ldrb	r3, [r7, #23]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d005      	beq.n	8003556 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2204      	movs	r2, #4
 800354e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
 8003554:	e037      	b.n	80035c6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 020e 	bic.w	r2, r2, #14
 8003564:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003570:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003574:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0201 	bic.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	f003 021f 	and.w	r2, r3, #31
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	2101      	movs	r1, #1
 8003594:	fa01 f202 	lsl.w	r2, r1, r2
 8003598:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035a2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00c      	beq.n	80035c6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035ba:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80035c4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d00d      	beq.n	8003618 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2204      	movs	r2, #4
 8003600:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
 8003616:	e047      	b.n	80036a8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 020e 	bic.w	r2, r2, #14
 8003626:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003642:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003646:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	2101      	movs	r1, #1
 8003656:	fa01 f202 	lsl.w	r2, r1, r2
 800365a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003664:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00c      	beq.n	8003688 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003678:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800367c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003686:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
    }
  }
  return status;
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2204      	movs	r2, #4
 80036d4:	409a      	lsls	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d026      	beq.n	800372c <HAL_DMA_IRQHandler+0x7a>
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d021      	beq.n	800372c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d107      	bne.n	8003706 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0204 	bic.w	r2, r2, #4
 8003704:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370a:	f003 021f 	and.w	r2, r3, #31
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	2104      	movs	r1, #4
 8003714:	fa01 f202 	lsl.w	r2, r1, r2
 8003718:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	2b00      	cmp	r3, #0
 8003720:	d071      	beq.n	8003806 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800372a:	e06c      	b.n	8003806 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	2202      	movs	r2, #2
 8003736:	409a      	lsls	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d02e      	beq.n	800379e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d029      	beq.n	800379e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 020a 	bic.w	r2, r2, #10
 8003766:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003774:	f003 021f 	and.w	r2, r3, #31
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	2102      	movs	r1, #2
 800377e:	fa01 f202 	lsl.w	r2, r1, r2
 8003782:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d038      	beq.n	8003806 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800379c:	e033      	b.n	8003806 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	2208      	movs	r2, #8
 80037a8:	409a      	lsls	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d02a      	beq.n	8003808 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d025      	beq.n	8003808 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 020e 	bic.w	r2, r2, #14
 80037ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d0:	f003 021f 	and.w	r2, r3, #31
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f202 	lsl.w	r2, r1, r2
 80037de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003806:	bf00      	nop
 8003808:	bf00      	nop
}
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003826:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003838:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383e:	f003 021f 	and.w	r2, r3, #31
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	2101      	movs	r1, #1
 8003848:	fa01 f202 	lsl.w	r2, r1, r2
 800384c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b10      	cmp	r3, #16
 800385c:	d108      	bne.n	8003870 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800386e:	e007      	b.n	8003880 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	4b16      	ldr	r3, [pc, #88]	@ (80038f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800389c:	429a      	cmp	r2, r3
 800389e:	d802      	bhi.n	80038a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80038a0:	4b15      	ldr	r3, [pc, #84]	@ (80038f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	e001      	b.n	80038aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80038a6:	4b15      	ldr	r3, [pc, #84]	@ (80038fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80038a8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	3b08      	subs	r3, #8
 80038b6:	4a12      	ldr	r2, [pc, #72]	@ (8003900 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	089b      	lsrs	r3, r3, #2
 80038c6:	009a      	lsls	r2, r3, #2
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	461a      	mov	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003904 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80038d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 031f 	and.w	r3, r3, #31
 80038de:	2201      	movs	r2, #1
 80038e0:	409a      	lsls	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40020407 	.word	0x40020407
 80038f8:	40020800 	.word	0x40020800
 80038fc:	40020820 	.word	0x40020820
 8003900:	cccccccd 	.word	0xcccccccd
 8003904:	40020880 	.word	0x40020880

08003908 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4b0b      	ldr	r3, [pc, #44]	@ (8003948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	461a      	mov	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a08      	ldr	r2, [pc, #32]	@ (800394c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800392a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3b01      	subs	r3, #1
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	2201      	movs	r2, #1
 8003936:	409a      	lsls	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	1000823f 	.word	0x1000823f
 800394c:	40020940 	.word	0x40020940

08003950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800395e:	e15a      	b.n	8003c16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	2101      	movs	r1, #1
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	fa01 f303 	lsl.w	r3, r1, r3
 800396c:	4013      	ands	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 814c 	beq.w	8003c10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d005      	beq.n	8003990 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800398c:	2b02      	cmp	r3, #2
 800398e:	d130      	bne.n	80039f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	2203      	movs	r2, #3
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43db      	mvns	r3, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4013      	ands	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039c6:	2201      	movs	r2, #1
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4013      	ands	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	f003 0201 	and.w	r2, r3, #1
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d017      	beq.n	8003a2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	2203      	movs	r2, #3
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d123      	bne.n	8003a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	08da      	lsrs	r2, r3, #3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3208      	adds	r2, #8
 8003a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	08da      	lsrs	r2, r3, #3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3208      	adds	r2, #8
 8003a7c:	6939      	ldr	r1, [r7, #16]
 8003a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43db      	mvns	r3, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 0203 	and.w	r2, r3, #3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80a6 	beq.w	8003c10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac4:	4b5b      	ldr	r3, [pc, #364]	@ (8003c34 <HAL_GPIO_Init+0x2e4>)
 8003ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac8:	4a5a      	ldr	r2, [pc, #360]	@ (8003c34 <HAL_GPIO_Init+0x2e4>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ad0:	4b58      	ldr	r3, [pc, #352]	@ (8003c34 <HAL_GPIO_Init+0x2e4>)
 8003ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003adc:	4a56      	ldr	r2, [pc, #344]	@ (8003c38 <HAL_GPIO_Init+0x2e8>)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	220f      	movs	r2, #15
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b06:	d01f      	beq.n	8003b48 <HAL_GPIO_Init+0x1f8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a4c      	ldr	r2, [pc, #304]	@ (8003c3c <HAL_GPIO_Init+0x2ec>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d019      	beq.n	8003b44 <HAL_GPIO_Init+0x1f4>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a4b      	ldr	r2, [pc, #300]	@ (8003c40 <HAL_GPIO_Init+0x2f0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d013      	beq.n	8003b40 <HAL_GPIO_Init+0x1f0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a4a      	ldr	r2, [pc, #296]	@ (8003c44 <HAL_GPIO_Init+0x2f4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00d      	beq.n	8003b3c <HAL_GPIO_Init+0x1ec>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a49      	ldr	r2, [pc, #292]	@ (8003c48 <HAL_GPIO_Init+0x2f8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d007      	beq.n	8003b38 <HAL_GPIO_Init+0x1e8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a48      	ldr	r2, [pc, #288]	@ (8003c4c <HAL_GPIO_Init+0x2fc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <HAL_GPIO_Init+0x1e4>
 8003b30:	2305      	movs	r3, #5
 8003b32:	e00a      	b.n	8003b4a <HAL_GPIO_Init+0x1fa>
 8003b34:	2306      	movs	r3, #6
 8003b36:	e008      	b.n	8003b4a <HAL_GPIO_Init+0x1fa>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	e006      	b.n	8003b4a <HAL_GPIO_Init+0x1fa>
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e004      	b.n	8003b4a <HAL_GPIO_Init+0x1fa>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e002      	b.n	8003b4a <HAL_GPIO_Init+0x1fa>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <HAL_GPIO_Init+0x1fa>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	f002 0203 	and.w	r2, r2, #3
 8003b50:	0092      	lsls	r2, r2, #2
 8003b52:	4093      	lsls	r3, r2
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b5a:	4937      	ldr	r1, [pc, #220]	@ (8003c38 <HAL_GPIO_Init+0x2e8>)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	3302      	adds	r3, #2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b68:	4b39      	ldr	r3, [pc, #228]	@ (8003c50 <HAL_GPIO_Init+0x300>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b8c:	4a30      	ldr	r2, [pc, #192]	@ (8003c50 <HAL_GPIO_Init+0x300>)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b92:	4b2f      	ldr	r3, [pc, #188]	@ (8003c50 <HAL_GPIO_Init+0x300>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bb6:	4a26      	ldr	r2, [pc, #152]	@ (8003c50 <HAL_GPIO_Init+0x300>)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003bbc:	4b24      	ldr	r3, [pc, #144]	@ (8003c50 <HAL_GPIO_Init+0x300>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003be0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c50 <HAL_GPIO_Init+0x300>)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003be6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c50 <HAL_GPIO_Init+0x300>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c0a:	4a11      	ldr	r2, [pc, #68]	@ (8003c50 <HAL_GPIO_Init+0x300>)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	3301      	adds	r3, #1
 8003c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f47f ae9d 	bne.w	8003960 <HAL_GPIO_Init+0x10>
  }
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	48000400 	.word	0x48000400
 8003c40:	48000800 	.word	0x48000800
 8003c44:	48000c00 	.word	0x48000c00
 8003c48:	48001000 	.word	0x48001000
 8003c4c:	48001400 	.word	0x48001400
 8003c50:	40010400 	.word	0x40010400

08003c54 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e041      	b.n	8003cea <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f245 5255 	movw	r2, #21845	@ 0x5555
 8003c78:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6852      	ldr	r2, [r2, #4]
 8003c82:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6892      	ldr	r2, [r2, #8]
 8003c8c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003c8e:	f7fe f823 	bl	8001cd8 <HAL_GetTick>
 8003c92:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003c94:	e00f      	b.n	8003cb6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003c96:	f7fe f81f 	bl	8001cd8 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b31      	cmp	r3, #49	@ 0x31
 8003ca2:	d908      	bls.n	8003cb6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e019      	b.n	8003cea <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e8      	bne.n	8003c96 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d005      	beq.n	8003cde <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68d2      	ldr	r2, [r2, #12]
 8003cda:	611a      	str	r2, [r3, #16]
 8003cdc:	e004      	b.n	8003ce8 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d141      	bne.n	8003d86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d02:	4b4b      	ldr	r3, [pc, #300]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d0e:	d131      	bne.n	8003d74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d10:	4b47      	ldr	r3, [pc, #284]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d16:	4a46      	ldr	r2, [pc, #280]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d20:	4b43      	ldr	r3, [pc, #268]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d28:	4a41      	ldr	r2, [pc, #260]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d30:	4b40      	ldr	r3, [pc, #256]	@ (8003e34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2232      	movs	r2, #50	@ 0x32
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	0c9b      	lsrs	r3, r3, #18
 8003d42:	3301      	adds	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d46:	e002      	b.n	8003d4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d4e:	4b38      	ldr	r3, [pc, #224]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d5a:	d102      	bne.n	8003d62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f2      	bne.n	8003d48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d62:	4b33      	ldr	r3, [pc, #204]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6e:	d158      	bne.n	8003e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e057      	b.n	8003e24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d74:	4b2e      	ldr	r3, [pc, #184]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d84:	e04d      	b.n	8003e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d8c:	d141      	bne.n	8003e12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d8e:	4b28      	ldr	r3, [pc, #160]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9a:	d131      	bne.n	8003e00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d9c:	4b24      	ldr	r3, [pc, #144]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003da2:	4a23      	ldr	r2, [pc, #140]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dac:	4b20      	ldr	r3, [pc, #128]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003db4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2232      	movs	r2, #50	@ 0x32
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	0c9b      	lsrs	r3, r3, #18
 8003dce:	3301      	adds	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd2:	e002      	b.n	8003dda <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dda:	4b15      	ldr	r3, [pc, #84]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de6:	d102      	bne.n	8003dee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f2      	bne.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dee:	4b10      	ldr	r3, [pc, #64]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dfa:	d112      	bne.n	8003e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e011      	b.n	8003e24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e00:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e06:	4a0a      	ldr	r2, [pc, #40]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e10:	e007      	b.n	8003e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e12:	4b07      	ldr	r3, [pc, #28]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e1a:	4a05      	ldr	r2, [pc, #20]	@ (8003e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	40007000 	.word	0x40007000
 8003e34:	20000000 	.word	0x20000000
 8003e38:	431bde83 	.word	0x431bde83

08003e3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e40:	4b05      	ldr	r3, [pc, #20]	@ (8003e58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4a04      	ldr	r2, [pc, #16]	@ (8003e58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e4a:	6093      	str	r3, [r2, #8]
}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40007000 	.word	0x40007000

08003e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e2fe      	b.n	800446c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d075      	beq.n	8003f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7a:	4b97      	ldr	r3, [pc, #604]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e84:	4b94      	ldr	r3, [pc, #592]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b0c      	cmp	r3, #12
 8003e92:	d102      	bne.n	8003e9a <HAL_RCC_OscConfig+0x3e>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x44>
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea0:	4b8d      	ldr	r3, [pc, #564]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d05b      	beq.n	8003f64 <HAL_RCC_OscConfig+0x108>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d157      	bne.n	8003f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e2d9      	b.n	800446c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec0:	d106      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x74>
 8003ec2:	4b85      	ldr	r3, [pc, #532]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a84      	ldr	r2, [pc, #528]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e01d      	b.n	8003f0c <HAL_RCC_OscConfig+0xb0>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x98>
 8003eda:	4b7f      	ldr	r3, [pc, #508]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a7e      	ldr	r2, [pc, #504]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b7c      	ldr	r3, [pc, #496]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a7b      	ldr	r2, [pc, #492]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e00b      	b.n	8003f0c <HAL_RCC_OscConfig+0xb0>
 8003ef4:	4b78      	ldr	r3, [pc, #480]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a77      	ldr	r2, [pc, #476]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b75      	ldr	r3, [pc, #468]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a74      	ldr	r2, [pc, #464]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d013      	beq.n	8003f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd fee0 	bl	8001cd8 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f1c:	f7fd fedc 	bl	8001cd8 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	@ 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e29e      	b.n	800446c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f2e:	4b6a      	ldr	r3, [pc, #424]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0xc0>
 8003f3a:	e014      	b.n	8003f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fd fecc 	bl	8001cd8 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fd fec8 	bl	8001cd8 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	@ 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e28a      	b.n	800446c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f56:	4b60      	ldr	r3, [pc, #384]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0xe8>
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d075      	beq.n	800405e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f72:	4b59      	ldr	r3, [pc, #356]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f7c:	4b56      	ldr	r3, [pc, #344]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	d102      	bne.n	8003f92 <HAL_RCC_OscConfig+0x136>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d002      	beq.n	8003f98 <HAL_RCC_OscConfig+0x13c>
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d11f      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f98:	4b4f      	ldr	r3, [pc, #316]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x154>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e25d      	b.n	800446c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb0:	4b49      	ldr	r3, [pc, #292]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	4946      	ldr	r1, [pc, #280]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fc4:	4b45      	ldr	r3, [pc, #276]	@ (80040dc <HAL_RCC_OscConfig+0x280>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fd fe39 	bl	8001c40 <HAL_InitTick>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d043      	beq.n	800405c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e249      	b.n	800446c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d023      	beq.n	8004028 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe0:	4b3d      	ldr	r3, [pc, #244]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a3c      	ldr	r2, [pc, #240]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8003fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7fd fe74 	bl	8001cd8 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff4:	f7fd fe70 	bl	8001cd8 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e232      	b.n	800446c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004006:	4b34      	ldr	r3, [pc, #208]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004012:	4b31      	ldr	r3, [pc, #196]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	061b      	lsls	r3, r3, #24
 8004020:	492d      	ldr	r1, [pc, #180]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8004022:	4313      	orrs	r3, r2
 8004024:	604b      	str	r3, [r1, #4]
 8004026:	e01a      	b.n	800405e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004028:	4b2b      	ldr	r3, [pc, #172]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a2a      	ldr	r2, [pc, #168]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 800402e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fd fe50 	bl	8001cd8 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800403c:	f7fd fe4c 	bl	8001cd8 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e20e      	b.n	800446c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800404e:	4b22      	ldr	r3, [pc, #136]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x1e0>
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800405c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d041      	beq.n	80040ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d01c      	beq.n	80040ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004072:	4b19      	ldr	r3, [pc, #100]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 8004074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004078:	4a17      	ldr	r2, [pc, #92]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004082:	f7fd fe29 	bl	8001cd8 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408a:	f7fd fe25 	bl	8001cd8 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e1e7      	b.n	800446c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800409c:	4b0e      	ldr	r3, [pc, #56]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 800409e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0ef      	beq.n	800408a <HAL_RCC_OscConfig+0x22e>
 80040aa:	e020      	b.n	80040ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ac:	4b0a      	ldr	r3, [pc, #40]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 80040ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040b2:	4a09      	ldr	r2, [pc, #36]	@ (80040d8 <HAL_RCC_OscConfig+0x27c>)
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fd fe0c 	bl	8001cd8 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040c2:	e00d      	b.n	80040e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c4:	f7fd fe08 	bl	8001cd8 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d906      	bls.n	80040e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e1ca      	b.n	800446c <HAL_RCC_OscConfig+0x610>
 80040d6:	bf00      	nop
 80040d8:	40021000 	.word	0x40021000
 80040dc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040e0:	4b8c      	ldr	r3, [pc, #560]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80040e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1ea      	bne.n	80040c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80a6 	beq.w	8004248 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040fc:	2300      	movs	r3, #0
 80040fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004100:	4b84      	ldr	r3, [pc, #528]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_OscConfig+0x2b4>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <HAL_RCC_OscConfig+0x2b6>
 8004110:	2300      	movs	r3, #0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00d      	beq.n	8004132 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	4b7f      	ldr	r3, [pc, #508]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411a:	4a7e      	ldr	r2, [pc, #504]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 800411c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004120:	6593      	str	r3, [r2, #88]	@ 0x58
 8004122:	4b7c      	ldr	r3, [pc, #496]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800412e:	2301      	movs	r3, #1
 8004130:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004132:	4b79      	ldr	r3, [pc, #484]	@ (8004318 <HAL_RCC_OscConfig+0x4bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d118      	bne.n	8004170 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800413e:	4b76      	ldr	r3, [pc, #472]	@ (8004318 <HAL_RCC_OscConfig+0x4bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a75      	ldr	r2, [pc, #468]	@ (8004318 <HAL_RCC_OscConfig+0x4bc>)
 8004144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414a:	f7fd fdc5 	bl	8001cd8 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004152:	f7fd fdc1 	bl	8001cd8 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e183      	b.n	800446c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004164:	4b6c      	ldr	r3, [pc, #432]	@ (8004318 <HAL_RCC_OscConfig+0x4bc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d108      	bne.n	800418a <HAL_RCC_OscConfig+0x32e>
 8004178:	4b66      	ldr	r3, [pc, #408]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417e:	4a65      	ldr	r2, [pc, #404]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004188:	e024      	b.n	80041d4 <HAL_RCC_OscConfig+0x378>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b05      	cmp	r3, #5
 8004190:	d110      	bne.n	80041b4 <HAL_RCC_OscConfig+0x358>
 8004192:	4b60      	ldr	r3, [pc, #384]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004198:	4a5e      	ldr	r2, [pc, #376]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 800419a:	f043 0304 	orr.w	r3, r3, #4
 800419e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80041a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041b2:	e00f      	b.n	80041d4 <HAL_RCC_OscConfig+0x378>
 80041b4:	4b57      	ldr	r3, [pc, #348]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ba:	4a56      	ldr	r2, [pc, #344]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041c4:	4b53      	ldr	r3, [pc, #332]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ca:	4a52      	ldr	r2, [pc, #328]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d016      	beq.n	800420a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fd fd7c 	bl	8001cd8 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e2:	e00a      	b.n	80041fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e4:	f7fd fd78 	bl	8001cd8 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e138      	b.n	800446c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041fa:	4b46      	ldr	r3, [pc, #280]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ed      	beq.n	80041e4 <HAL_RCC_OscConfig+0x388>
 8004208:	e015      	b.n	8004236 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420a:	f7fd fd65 	bl	8001cd8 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004210:	e00a      	b.n	8004228 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fd fd61 	bl	8001cd8 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004220:	4293      	cmp	r3, r2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e121      	b.n	800446c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004228:	4b3a      	ldr	r3, [pc, #232]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1ed      	bne.n	8004212 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004236:	7ffb      	ldrb	r3, [r7, #31]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d105      	bne.n	8004248 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800423c:	4b35      	ldr	r3, [pc, #212]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004240:	4a34      	ldr	r2, [pc, #208]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004242:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004246:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d03c      	beq.n	80042ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01c      	beq.n	8004296 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800425c:	4b2d      	ldr	r3, [pc, #180]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 800425e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004262:	4a2c      	ldr	r2, [pc, #176]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426c:	f7fd fd34 	bl	8001cd8 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004274:	f7fd fd30 	bl	8001cd8 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e0f2      	b.n	800446c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004286:	4b23      	ldr	r3, [pc, #140]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004288:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0ef      	beq.n	8004274 <HAL_RCC_OscConfig+0x418>
 8004294:	e01b      	b.n	80042ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004296:	4b1f      	ldr	r3, [pc, #124]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 8004298:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800429c:	4a1d      	ldr	r2, [pc, #116]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a6:	f7fd fd17 	bl	8001cd8 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042ae:	f7fd fd13 	bl	8001cd8 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e0d5      	b.n	800446c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042c0:	4b14      	ldr	r3, [pc, #80]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80042c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1ef      	bne.n	80042ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 80c9 	beq.w	800446a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 030c 	and.w	r3, r3, #12
 80042e0:	2b0c      	cmp	r3, #12
 80042e2:	f000 8083 	beq.w	80043ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d15e      	bne.n	80043ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ee:	4b09      	ldr	r3, [pc, #36]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a08      	ldr	r2, [pc, #32]	@ (8004314 <HAL_RCC_OscConfig+0x4b8>)
 80042f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fd fced 	bl	8001cd8 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004300:	e00c      	b.n	800431c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004302:	f7fd fce9 	bl	8001cd8 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d905      	bls.n	800431c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e0ab      	b.n	800446c <HAL_RCC_OscConfig+0x610>
 8004314:	40021000 	.word	0x40021000
 8004318:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800431c:	4b55      	ldr	r3, [pc, #340]	@ (8004474 <HAL_RCC_OscConfig+0x618>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1ec      	bne.n	8004302 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004328:	4b52      	ldr	r3, [pc, #328]	@ (8004474 <HAL_RCC_OscConfig+0x618>)
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	4b52      	ldr	r3, [pc, #328]	@ (8004478 <HAL_RCC_OscConfig+0x61c>)
 800432e:	4013      	ands	r3, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6a11      	ldr	r1, [r2, #32]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004338:	3a01      	subs	r2, #1
 800433a:	0112      	lsls	r2, r2, #4
 800433c:	4311      	orrs	r1, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004342:	0212      	lsls	r2, r2, #8
 8004344:	4311      	orrs	r1, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800434a:	0852      	lsrs	r2, r2, #1
 800434c:	3a01      	subs	r2, #1
 800434e:	0552      	lsls	r2, r2, #21
 8004350:	4311      	orrs	r1, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004356:	0852      	lsrs	r2, r2, #1
 8004358:	3a01      	subs	r2, #1
 800435a:	0652      	lsls	r2, r2, #25
 800435c:	4311      	orrs	r1, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004362:	06d2      	lsls	r2, r2, #27
 8004364:	430a      	orrs	r2, r1
 8004366:	4943      	ldr	r1, [pc, #268]	@ (8004474 <HAL_RCC_OscConfig+0x618>)
 8004368:	4313      	orrs	r3, r2
 800436a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800436c:	4b41      	ldr	r3, [pc, #260]	@ (8004474 <HAL_RCC_OscConfig+0x618>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a40      	ldr	r2, [pc, #256]	@ (8004474 <HAL_RCC_OscConfig+0x618>)
 8004372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004376:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004378:	4b3e      	ldr	r3, [pc, #248]	@ (8004474 <HAL_RCC_OscConfig+0x618>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a3d      	ldr	r2, [pc, #244]	@ (8004474 <HAL_RCC_OscConfig+0x618>)
 800437e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004382:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd fca8 	bl	8001cd8 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438c:	f7fd fca4 	bl	8001cd8 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e066      	b.n	800446c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439e:	4b35      	ldr	r3, [pc, #212]	@ (8004474 <HAL_RCC_OscConfig+0x618>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x530>
 80043aa:	e05e      	b.n	800446a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ac:	4b31      	ldr	r3, [pc, #196]	@ (8004474 <HAL_RCC_OscConfig+0x618>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a30      	ldr	r2, [pc, #192]	@ (8004474 <HAL_RCC_OscConfig+0x618>)
 80043b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fd fc8e 	bl	8001cd8 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fd fc8a 	bl	8001cd8 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e04c      	b.n	800446c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d2:	4b28      	ldr	r3, [pc, #160]	@ (8004474 <HAL_RCC_OscConfig+0x618>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043de:	4b25      	ldr	r3, [pc, #148]	@ (8004474 <HAL_RCC_OscConfig+0x618>)
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	4924      	ldr	r1, [pc, #144]	@ (8004474 <HAL_RCC_OscConfig+0x618>)
 80043e4:	4b25      	ldr	r3, [pc, #148]	@ (800447c <HAL_RCC_OscConfig+0x620>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	60cb      	str	r3, [r1, #12]
 80043ea:	e03e      	b.n	800446a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e039      	b.n	800446c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004474 <HAL_RCC_OscConfig+0x618>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f003 0203 	and.w	r2, r3, #3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	429a      	cmp	r2, r3
 800440a:	d12c      	bne.n	8004466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004416:	3b01      	subs	r3, #1
 8004418:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d123      	bne.n	8004466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004428:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d11b      	bne.n	8004466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800443a:	429a      	cmp	r2, r3
 800443c:	d113      	bne.n	8004466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	3b01      	subs	r3, #1
 800444c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d109      	bne.n	8004466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	3b01      	subs	r3, #1
 8004460:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d001      	beq.n	800446a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40021000 	.word	0x40021000
 8004478:	019f800c 	.word	0x019f800c
 800447c:	feeefffc 	.word	0xfeeefffc

08004480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e11e      	b.n	80046d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004498:	4b91      	ldr	r3, [pc, #580]	@ (80046e0 <HAL_RCC_ClockConfig+0x260>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d910      	bls.n	80044c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a6:	4b8e      	ldr	r3, [pc, #568]	@ (80046e0 <HAL_RCC_ClockConfig+0x260>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 020f 	bic.w	r2, r3, #15
 80044ae:	498c      	ldr	r1, [pc, #560]	@ (80046e0 <HAL_RCC_ClockConfig+0x260>)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b6:	4b8a      	ldr	r3, [pc, #552]	@ (80046e0 <HAL_RCC_ClockConfig+0x260>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d001      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e106      	b.n	80046d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d073      	beq.n	80045bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d129      	bne.n	8004530 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044dc:	4b81      	ldr	r3, [pc, #516]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0f4      	b.n	80046d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80044ec:	f000 f99e 	bl	800482c <RCC_GetSysClockFreqFromPLLSource>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4a7c      	ldr	r2, [pc, #496]	@ (80046e8 <HAL_RCC_ClockConfig+0x268>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d93f      	bls.n	800457a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044fa:	4b7a      	ldr	r3, [pc, #488]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800450e:	2b00      	cmp	r3, #0
 8004510:	d033      	beq.n	800457a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004516:	2b00      	cmp	r3, #0
 8004518:	d12f      	bne.n	800457a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800451a:	4b72      	ldr	r3, [pc, #456]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004522:	4a70      	ldr	r2, [pc, #448]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 8004524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004528:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800452a:	2380      	movs	r3, #128	@ 0x80
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	e024      	b.n	800457a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d107      	bne.n	8004548 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004538:	4b6a      	ldr	r3, [pc, #424]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d109      	bne.n	8004558 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0c6      	b.n	80046d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004548:	4b66      	ldr	r3, [pc, #408]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0be      	b.n	80046d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004558:	f000 f8ce 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 800455c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4a61      	ldr	r2, [pc, #388]	@ (80046e8 <HAL_RCC_ClockConfig+0x268>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d909      	bls.n	800457a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004566:	4b5f      	ldr	r3, [pc, #380]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800456e:	4a5d      	ldr	r2, [pc, #372]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 8004570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004574:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004576:	2380      	movs	r3, #128	@ 0x80
 8004578:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800457a:	4b5a      	ldr	r3, [pc, #360]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 0203 	bic.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4957      	ldr	r1, [pc, #348]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 8004588:	4313      	orrs	r3, r2
 800458a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458c:	f7fd fba4 	bl	8001cd8 <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	e00a      	b.n	80045aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004594:	f7fd fba0 	bl	8001cd8 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e095      	b.n	80046d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	4b4e      	ldr	r3, [pc, #312]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 020c 	and.w	r2, r3, #12
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1eb      	bne.n	8004594 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d023      	beq.n	8004610 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045d4:	4b43      	ldr	r3, [pc, #268]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	4a42      	ldr	r2, [pc, #264]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80045da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80045ec:	4b3d      	ldr	r3, [pc, #244]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045f4:	4a3b      	ldr	r2, [pc, #236]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80045f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045fc:	4b39      	ldr	r3, [pc, #228]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	4936      	ldr	r1, [pc, #216]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 800460a:	4313      	orrs	r3, r2
 800460c:	608b      	str	r3, [r1, #8]
 800460e:	e008      	b.n	8004622 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2b80      	cmp	r3, #128	@ 0x80
 8004614:	d105      	bne.n	8004622 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004616:	4b33      	ldr	r3, [pc, #204]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	4a32      	ldr	r2, [pc, #200]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 800461c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004620:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004622:	4b2f      	ldr	r3, [pc, #188]	@ (80046e0 <HAL_RCC_ClockConfig+0x260>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d21d      	bcs.n	800466c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004630:	4b2b      	ldr	r3, [pc, #172]	@ (80046e0 <HAL_RCC_ClockConfig+0x260>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 020f 	bic.w	r2, r3, #15
 8004638:	4929      	ldr	r1, [pc, #164]	@ (80046e0 <HAL_RCC_ClockConfig+0x260>)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004640:	f7fd fb4a 	bl	8001cd8 <HAL_GetTick>
 8004644:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004646:	e00a      	b.n	800465e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004648:	f7fd fb46 	bl	8001cd8 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e03b      	b.n	80046d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b20      	ldr	r3, [pc, #128]	@ (80046e0 <HAL_RCC_ClockConfig+0x260>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d1ed      	bne.n	8004648 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004678:	4b1a      	ldr	r3, [pc, #104]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4917      	ldr	r1, [pc, #92]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004696:	4b13      	ldr	r3, [pc, #76]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	490f      	ldr	r1, [pc, #60]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046aa:	f000 f825 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b0c      	ldr	r3, [pc, #48]	@ (80046e4 <HAL_RCC_ClockConfig+0x264>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	490c      	ldr	r1, [pc, #48]	@ (80046ec <HAL_RCC_ClockConfig+0x26c>)
 80046bc:	5ccb      	ldrb	r3, [r1, r3]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	4a0a      	ldr	r2, [pc, #40]	@ (80046f0 <HAL_RCC_ClockConfig+0x270>)
 80046c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046ca:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <HAL_RCC_ClockConfig+0x274>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fd fab6 	bl	8001c40 <HAL_InitTick>
 80046d4:	4603      	mov	r3, r0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40022000 	.word	0x40022000
 80046e4:	40021000 	.word	0x40021000
 80046e8:	04c4b400 	.word	0x04c4b400
 80046ec:	0800c3e0 	.word	0x0800c3e0
 80046f0:	20000000 	.word	0x20000000
 80046f4:	20000004 	.word	0x20000004

080046f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046fe:	4b2c      	ldr	r3, [pc, #176]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b04      	cmp	r3, #4
 8004708:	d102      	bne.n	8004710 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800470a:	4b2a      	ldr	r3, [pc, #168]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	e047      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004710:	4b27      	ldr	r3, [pc, #156]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 030c 	and.w	r3, r3, #12
 8004718:	2b08      	cmp	r3, #8
 800471a:	d102      	bne.n	8004722 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800471c:	4b26      	ldr	r3, [pc, #152]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	e03e      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004722:	4b23      	ldr	r3, [pc, #140]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	2b0c      	cmp	r3, #12
 800472c:	d136      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800472e:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004738:	4b1d      	ldr	r3, [pc, #116]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	3301      	adds	r3, #1
 8004744:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d10c      	bne.n	8004766 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800474c:	4a1a      	ldr	r2, [pc, #104]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	4a16      	ldr	r2, [pc, #88]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004756:	68d2      	ldr	r2, [r2, #12]
 8004758:	0a12      	lsrs	r2, r2, #8
 800475a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	617b      	str	r3, [r7, #20]
      break;
 8004764:	e00c      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004766:	4a13      	ldr	r2, [pc, #76]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	fbb2 f3f3 	udiv	r3, r2, r3
 800476e:	4a10      	ldr	r2, [pc, #64]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004770:	68d2      	ldr	r2, [r2, #12]
 8004772:	0a12      	lsrs	r2, r2, #8
 8004774:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004778:	fb02 f303 	mul.w	r3, r2, r3
 800477c:	617b      	str	r3, [r7, #20]
      break;
 800477e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004780:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	0e5b      	lsrs	r3, r3, #25
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	3301      	adds	r3, #1
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	e001      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047a0:	693b      	ldr	r3, [r7, #16]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	00f42400 	.word	0x00f42400
 80047b8:	007a1200 	.word	0x007a1200

080047bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c0:	4b03      	ldr	r3, [pc, #12]	@ (80047d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047c2:	681b      	ldr	r3, [r3, #0]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000000 	.word	0x20000000

080047d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047d8:	f7ff fff0 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	0a1b      	lsrs	r3, r3, #8
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	4904      	ldr	r1, [pc, #16]	@ (80047fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ea:	5ccb      	ldrb	r3, [r1, r3]
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021000 	.word	0x40021000
 80047fc:	0800c3f0 	.word	0x0800c3f0

08004800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004804:	f7ff ffda 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	0adb      	lsrs	r3, r3, #11
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4904      	ldr	r1, [pc, #16]	@ (8004828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004820:	4618      	mov	r0, r3
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000
 8004828:	0800c3f0 	.word	0x0800c3f0

0800482c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004832:	4b1e      	ldr	r3, [pc, #120]	@ (80048ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800483c:	4b1b      	ldr	r3, [pc, #108]	@ (80048ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	091b      	lsrs	r3, r3, #4
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	3301      	adds	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b03      	cmp	r3, #3
 800484e:	d10c      	bne.n	800486a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004850:	4a17      	ldr	r2, [pc, #92]	@ (80048b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	fbb2 f3f3 	udiv	r3, r2, r3
 8004858:	4a14      	ldr	r2, [pc, #80]	@ (80048ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800485a:	68d2      	ldr	r2, [r2, #12]
 800485c:	0a12      	lsrs	r2, r2, #8
 800485e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	617b      	str	r3, [r7, #20]
    break;
 8004868:	e00c      	b.n	8004884 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800486a:	4a12      	ldr	r2, [pc, #72]	@ (80048b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	4a0e      	ldr	r2, [pc, #56]	@ (80048ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004874:	68d2      	ldr	r2, [r2, #12]
 8004876:	0a12      	lsrs	r2, r2, #8
 8004878:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800487c:	fb02 f303 	mul.w	r3, r2, r3
 8004880:	617b      	str	r3, [r7, #20]
    break;
 8004882:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004884:	4b09      	ldr	r3, [pc, #36]	@ (80048ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	0e5b      	lsrs	r3, r3, #25
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	3301      	adds	r3, #1
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800489e:	687b      	ldr	r3, [r7, #4]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	40021000 	.word	0x40021000
 80048b0:	007a1200 	.word	0x007a1200
 80048b4:	00f42400 	.word	0x00f42400

080048b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048c0:	2300      	movs	r3, #0
 80048c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048c4:	2300      	movs	r3, #0
 80048c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 8098 	beq.w	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d6:	2300      	movs	r3, #0
 80048d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048da:	4b43      	ldr	r3, [pc, #268]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10d      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e6:	4b40      	ldr	r3, [pc, #256]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ea:	4a3f      	ldr	r2, [pc, #252]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80048f2:	4b3d      	ldr	r3, [pc, #244]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fa:	60bb      	str	r3, [r7, #8]
 80048fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048fe:	2301      	movs	r3, #1
 8004900:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004902:	4b3a      	ldr	r3, [pc, #232]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a39      	ldr	r2, [pc, #228]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800490c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800490e:	f7fd f9e3 	bl	8001cd8 <HAL_GetTick>
 8004912:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004914:	e009      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004916:	f7fd f9df 	bl	8001cd8 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d902      	bls.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	74fb      	strb	r3, [r7, #19]
        break;
 8004928:	e005      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800492a:	4b30      	ldr	r3, [pc, #192]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0ef      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004936:	7cfb      	ldrb	r3, [r7, #19]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d159      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800493c:	4b2a      	ldr	r3, [pc, #168]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004946:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d01e      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	429a      	cmp	r2, r3
 8004956:	d019      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004958:	4b23      	ldr	r3, [pc, #140]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004962:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004964:	4b20      	ldr	r3, [pc, #128]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496a:	4a1f      	ldr	r2, [pc, #124]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800496c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004974:	4b1c      	ldr	r3, [pc, #112]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497a:	4a1b      	ldr	r2, [pc, #108]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004980:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004984:	4a18      	ldr	r2, [pc, #96]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d016      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004996:	f7fd f99f 	bl	8001cd8 <HAL_GetTick>
 800499a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800499c:	e00b      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499e:	f7fd f99b 	bl	8001cd8 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d902      	bls.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	74fb      	strb	r3, [r7, #19]
            break;
 80049b4:	e006      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b6:	4b0c      	ldr	r3, [pc, #48]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0ec      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80049c4:	7cfb      	ldrb	r3, [r7, #19]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10b      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049ca:	4b07      	ldr	r3, [pc, #28]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d8:	4903      	ldr	r1, [pc, #12]	@ (80049e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049e0:	e008      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	74bb      	strb	r3, [r7, #18]
 80049e6:	e005      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f0:	7cfb      	ldrb	r3, [r7, #19]
 80049f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049f4:	7c7b      	ldrb	r3, [r7, #17]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d105      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049fa:	4ba6      	ldr	r3, [pc, #664]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fe:	4aa5      	ldr	r2, [pc, #660]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a12:	4ba0      	ldr	r3, [pc, #640]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a18:	f023 0203 	bic.w	r2, r3, #3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	499c      	ldr	r1, [pc, #624]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a34:	4b97      	ldr	r3, [pc, #604]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3a:	f023 020c 	bic.w	r2, r3, #12
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	4994      	ldr	r1, [pc, #592]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a56:	4b8f      	ldr	r3, [pc, #572]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	498b      	ldr	r1, [pc, #556]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a78:	4b86      	ldr	r3, [pc, #536]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	4983      	ldr	r1, [pc, #524]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a9a:	4b7e      	ldr	r3, [pc, #504]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	497a      	ldr	r1, [pc, #488]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004abc:	4b75      	ldr	r3, [pc, #468]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	4972      	ldr	r1, [pc, #456]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ade:	4b6d      	ldr	r3, [pc, #436]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	4969      	ldr	r1, [pc, #420]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b00:	4b64      	ldr	r3, [pc, #400]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	4961      	ldr	r1, [pc, #388]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b22:	4b5c      	ldr	r3, [pc, #368]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	4958      	ldr	r1, [pc, #352]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d015      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b44:	4b53      	ldr	r3, [pc, #332]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b52:	4950      	ldr	r1, [pc, #320]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b62:	d105      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b64:	4b4b      	ldr	r3, [pc, #300]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4a4a      	ldr	r2, [pc, #296]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d015      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b7c:	4b45      	ldr	r3, [pc, #276]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8a:	4942      	ldr	r1, [pc, #264]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b9a:	d105      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4a3c      	ldr	r2, [pc, #240]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ba6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d015      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bb4:	4b37      	ldr	r3, [pc, #220]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	4934      	ldr	r1, [pc, #208]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bd2:	d105      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4a2e      	ldr	r2, [pc, #184]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bde:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d015      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bec:	4b29      	ldr	r3, [pc, #164]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bfa:	4926      	ldr	r1, [pc, #152]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c0a:	d105      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c0c:	4b21      	ldr	r3, [pc, #132]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4a20      	ldr	r2, [pc, #128]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d015      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c24:	4b1b      	ldr	r3, [pc, #108]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c32:	4918      	ldr	r1, [pc, #96]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c42:	d105      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c44:	4b13      	ldr	r3, [pc, #76]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4a12      	ldr	r2, [pc, #72]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d015      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6a:	490a      	ldr	r1, [pc, #40]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c7a:	d105      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c7c:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4a04      	ldr	r2, [pc, #16]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c88:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000

08004c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e049      	b.n	8004d3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fc fe22 	bl	8001908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	f000 f930 	bl	8004f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_TIM_ConfigClockSource+0x1c>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e0de      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x1da>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004d82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a63      	ldr	r2, [pc, #396]	@ (8004f2c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	f000 80a9 	beq.w	8004ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8004da4:	4a61      	ldr	r2, [pc, #388]	@ (8004f2c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	f200 80ae 	bhi.w	8004f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8004dac:	4a60      	ldr	r2, [pc, #384]	@ (8004f30 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	f000 80a1 	beq.w	8004ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8004db4:	4a5e      	ldr	r2, [pc, #376]	@ (8004f30 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	f200 80a6 	bhi.w	8004f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8004dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8004f34 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	f000 8099 	beq.w	8004ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8004dc4:	4a5b      	ldr	r2, [pc, #364]	@ (8004f34 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	f200 809e 	bhi.w	8004f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8004dcc:	4a5a      	ldr	r2, [pc, #360]	@ (8004f38 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	f000 8091 	beq.w	8004ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8004dd4:	4a58      	ldr	r2, [pc, #352]	@ (8004f38 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	f200 8096 	bhi.w	8004f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ddc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004de0:	f000 8089 	beq.w	8004ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8004de4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004de8:	f200 808e 	bhi.w	8004f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8004dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004df0:	d03e      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0x128>
 8004df2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004df6:	f200 8087 	bhi.w	8004f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dfe:	f000 8086 	beq.w	8004f0e <HAL_TIM_ConfigClockSource+0x1c6>
 8004e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e06:	d87f      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e08:	2b70      	cmp	r3, #112	@ 0x70
 8004e0a:	d01a      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0xfa>
 8004e0c:	2b70      	cmp	r3, #112	@ 0x70
 8004e0e:	d87b      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e10:	2b60      	cmp	r3, #96	@ 0x60
 8004e12:	d050      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x16e>
 8004e14:	2b60      	cmp	r3, #96	@ 0x60
 8004e16:	d877      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e18:	2b50      	cmp	r3, #80	@ 0x50
 8004e1a:	d03c      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x14e>
 8004e1c:	2b50      	cmp	r3, #80	@ 0x50
 8004e1e:	d873      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e20:	2b40      	cmp	r3, #64	@ 0x40
 8004e22:	d058      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x18e>
 8004e24:	2b40      	cmp	r3, #64	@ 0x40
 8004e26:	d86f      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e28:	2b30      	cmp	r3, #48	@ 0x30
 8004e2a:	d064      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8004e2c:	2b30      	cmp	r3, #48	@ 0x30
 8004e2e:	d86b      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d060      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d867      	bhi.n	8004f08 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d05c      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d05a      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x1ae>
 8004e40:	e062      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e52:	f000 f98b 	bl	800516c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	609a      	str	r2, [r3, #8]
      break;
 8004e6e:	e04f      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e80:	f000 f974 	bl	800516c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e92:	609a      	str	r2, [r3, #8]
      break;
 8004e94:	e03c      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f000 f8e6 	bl	8005074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2150      	movs	r1, #80	@ 0x50
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 f93f 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004eb4:	e02c      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f000 f905 	bl	80050d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2160      	movs	r1, #96	@ 0x60
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f92f 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004ed4:	e01c      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f000 f8c6 	bl	8005074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2140      	movs	r1, #64	@ 0x40
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f91f 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004ef4:	e00c      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f000 f916 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004f06:	e003      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f0c:	e000      	b.n	8004f10 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004f0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	00100070 	.word	0x00100070
 8004f30:	00100040 	.word	0x00100040
 8004f34:	00100030 	.word	0x00100030
 8004f38:	00100020 	.word	0x00100020

08004f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a42      	ldr	r2, [pc, #264]	@ (8005058 <TIM_Base_SetConfig+0x11c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00f      	beq.n	8004f74 <TIM_Base_SetConfig+0x38>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f5a:	d00b      	beq.n	8004f74 <TIM_Base_SetConfig+0x38>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a3f      	ldr	r2, [pc, #252]	@ (800505c <TIM_Base_SetConfig+0x120>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d007      	beq.n	8004f74 <TIM_Base_SetConfig+0x38>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a3e      	ldr	r2, [pc, #248]	@ (8005060 <TIM_Base_SetConfig+0x124>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_Base_SetConfig+0x38>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a3d      	ldr	r2, [pc, #244]	@ (8005064 <TIM_Base_SetConfig+0x128>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d108      	bne.n	8004f86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a33      	ldr	r2, [pc, #204]	@ (8005058 <TIM_Base_SetConfig+0x11c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d01b      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f94:	d017      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a30      	ldr	r2, [pc, #192]	@ (800505c <TIM_Base_SetConfig+0x120>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d013      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a2f      	ldr	r2, [pc, #188]	@ (8005060 <TIM_Base_SetConfig+0x124>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00f      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8005064 <TIM_Base_SetConfig+0x128>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00b      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8005068 <TIM_Base_SetConfig+0x12c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d007      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2c      	ldr	r2, [pc, #176]	@ (800506c <TIM_Base_SetConfig+0x130>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d003      	beq.n	8004fc6 <TIM_Base_SetConfig+0x8a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8005070 <TIM_Base_SetConfig+0x134>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d108      	bne.n	8004fd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a16      	ldr	r2, [pc, #88]	@ (8005058 <TIM_Base_SetConfig+0x11c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00f      	beq.n	8005024 <TIM_Base_SetConfig+0xe8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a17      	ldr	r2, [pc, #92]	@ (8005064 <TIM_Base_SetConfig+0x128>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00b      	beq.n	8005024 <TIM_Base_SetConfig+0xe8>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a16      	ldr	r2, [pc, #88]	@ (8005068 <TIM_Base_SetConfig+0x12c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_Base_SetConfig+0xe8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a15      	ldr	r2, [pc, #84]	@ (800506c <TIM_Base_SetConfig+0x130>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_Base_SetConfig+0xe8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a14      	ldr	r2, [pc, #80]	@ (8005070 <TIM_Base_SetConfig+0x134>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d103      	bne.n	800502c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b01      	cmp	r3, #1
 800503c:	d105      	bne.n	800504a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f023 0201 	bic.w	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	611a      	str	r2, [r3, #16]
  }
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40012c00 	.word	0x40012c00
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40013400 	.word	0x40013400
 8005068:	40014000 	.word	0x40014000
 800506c:	40014400 	.word	0x40014400
 8005070:	40014800 	.word	0x40014800

08005074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f023 0201 	bic.w	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800509e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f023 030a 	bic.w	r3, r3, #10
 80050b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b087      	sub	sp, #28
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f023 0210 	bic.w	r2, r3, #16
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	031b      	lsls	r3, r3, #12
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800510e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	621a      	str	r2, [r3, #32]
}
 8005126:	bf00      	nop
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005148:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800514c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	f043 0307 	orr.w	r3, r3, #7
 8005158:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	609a      	str	r2, [r3, #8]
}
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	021a      	lsls	r2, r3, #8
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	431a      	orrs	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4313      	orrs	r3, r2
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	609a      	str	r2, [r3, #8]
}
 80051a0:	bf00      	nop
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e065      	b.n	8005290 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a2c      	ldr	r2, [pc, #176]	@ (800529c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a2b      	ldr	r2, [pc, #172]	@ (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d108      	bne.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80051fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005214:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1b      	ldr	r2, [pc, #108]	@ (800529c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d018      	beq.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800523a:	d013      	beq.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a18      	ldr	r2, [pc, #96]	@ (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00e      	beq.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a17      	ldr	r2, [pc, #92]	@ (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d009      	beq.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a12      	ldr	r2, [pc, #72]	@ (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d004      	beq.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a13      	ldr	r2, [pc, #76]	@ (80052ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d10c      	bne.n	800527e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800526a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	4313      	orrs	r3, r2
 8005274:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40013400 	.word	0x40013400
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40014000 	.word	0x40014000

080052b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e042      	b.n	8005348 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7fc fa89 	bl	80017ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2224      	movs	r2, #36	@ 0x24
 80052de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0201 	bic.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 ff04 	bl	8006108 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fc35 	bl	8005b70 <UART_SetConfig>
 8005306:	4603      	mov	r3, r0
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e01b      	b.n	8005348 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800531e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800532e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 ff83 	bl	800624c <UART_CheckIdleState>
 8005346:	4603      	mov	r3, r0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	@ 0x28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	4613      	mov	r3, r2
 800535c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005364:	2b20      	cmp	r3, #32
 8005366:	d137      	bne.n	80053d8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_UART_Receive_IT+0x24>
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e030      	b.n	80053da <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a18      	ldr	r2, [pc, #96]	@ (80053e4 <HAL_UART_Receive_IT+0x94>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d01f      	beq.n	80053c8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d018      	beq.n	80053c8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	613b      	str	r3, [r7, #16]
   return(result);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	623b      	str	r3, [r7, #32]
 80053b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	69f9      	ldr	r1, [r7, #28]
 80053ba:	6a3a      	ldr	r2, [r7, #32]
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e6      	bne.n	8005396 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	461a      	mov	r2, r3
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f001 f854 	bl	800647c <UART_Start_Receive_IT>
 80053d4:	4603      	mov	r3, r0
 80053d6:	e000      	b.n	80053da <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
  }
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3728      	adds	r7, #40	@ 0x28
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40008000 	.word	0x40008000

080053e8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	@ 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d167      	bne.n	80054d0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <HAL_UART_Transmit_DMA+0x24>
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e060      	b.n	80054d2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	88fa      	ldrh	r2, [r7, #6]
 800541a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	88fa      	ldrh	r2, [r7, #6]
 8005422:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2221      	movs	r2, #33	@ 0x21
 8005432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d028      	beq.n	8005490 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005442:	4a26      	ldr	r2, [pc, #152]	@ (80054dc <HAL_UART_Transmit_DMA+0xf4>)
 8005444:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800544a:	4a25      	ldr	r2, [pc, #148]	@ (80054e0 <HAL_UART_Transmit_DMA+0xf8>)
 800544c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005452:	4a24      	ldr	r2, [pc, #144]	@ (80054e4 <HAL_UART_Transmit_DMA+0xfc>)
 8005454:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800545a:	2200      	movs	r2, #0
 800545c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005466:	4619      	mov	r1, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3328      	adds	r3, #40	@ 0x28
 800546e:	461a      	mov	r2, r3
 8005470:	88fb      	ldrh	r3, [r7, #6]
 8005472:	f7fd ffe3 	bl	800343c <HAL_DMA_Start_IT>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d009      	beq.n	8005490 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2210      	movs	r2, #16
 8005480:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e020      	b.n	80054d2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2240      	movs	r2, #64	@ 0x40
 8005496:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3308      	adds	r3, #8
 800549e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	613b      	str	r3, [r7, #16]
   return(result);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b8:	623a      	str	r2, [r7, #32]
 80054ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	69f9      	ldr	r1, [r7, #28]
 80054be:	6a3a      	ldr	r2, [r7, #32]
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e5      	bne.n	8005498 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	e000      	b.n	80054d2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80054d0:	2302      	movs	r3, #2
  }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3728      	adds	r7, #40	@ 0x28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	0800680f 	.word	0x0800680f
 80054e0:	080068a9 	.word	0x080068a9
 80054e4:	080068c5 	.word	0x080068c5

080054e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b0ba      	sub	sp, #232	@ 0xe8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800550e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005512:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005516:	4013      	ands	r3, r2
 8005518:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800551c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d11b      	bne.n	800555c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b00      	cmp	r3, #0
 800552e:	d015      	beq.n	800555c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b00      	cmp	r3, #0
 800553a:	d105      	bne.n	8005548 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800553c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d009      	beq.n	800555c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 82e3 	beq.w	8005b18 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
      }
      return;
 800555a:	e2dd      	b.n	8005b18 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800555c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8123 	beq.w	80057ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005566:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800556a:	4b8d      	ldr	r3, [pc, #564]	@ (80057a0 <HAL_UART_IRQHandler+0x2b8>)
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005572:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005576:	4b8b      	ldr	r3, [pc, #556]	@ (80057a4 <HAL_UART_IRQHandler+0x2bc>)
 8005578:	4013      	ands	r3, r2
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 8116 	beq.w	80057ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d011      	beq.n	80055b0 <HAL_UART_IRQHandler+0xc8>
 800558c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2201      	movs	r2, #1
 800559e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a6:	f043 0201 	orr.w	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d011      	beq.n	80055e0 <HAL_UART_IRQHandler+0xf8>
 80055bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2202      	movs	r2, #2
 80055ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d6:	f043 0204 	orr.w	r2, r3, #4
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d011      	beq.n	8005610 <HAL_UART_IRQHandler+0x128>
 80055ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00b      	beq.n	8005610 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2204      	movs	r2, #4
 80055fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005606:	f043 0202 	orr.w	r2, r3, #2
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b00      	cmp	r3, #0
 800561a:	d017      	beq.n	800564c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800561c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d105      	bne.n	8005634 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005628:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800562c:	4b5c      	ldr	r3, [pc, #368]	@ (80057a0 <HAL_UART_IRQHandler+0x2b8>)
 800562e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2208      	movs	r2, #8
 800563a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005642:	f043 0208 	orr.w	r2, r3, #8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800564c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005654:	2b00      	cmp	r3, #0
 8005656:	d012      	beq.n	800567e <HAL_UART_IRQHandler+0x196>
 8005658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800565c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00c      	beq.n	800567e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800566c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005674:	f043 0220 	orr.w	r2, r3, #32
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 8249 	beq.w	8005b1c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d013      	beq.n	80056be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d105      	bne.n	80056ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d2:	2b40      	cmp	r3, #64	@ 0x40
 80056d4:	d005      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d054      	beq.n	800578c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 f82d 	bl	8006742 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f2:	2b40      	cmp	r3, #64	@ 0x40
 80056f4:	d146      	bne.n	8005784 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3308      	adds	r3, #8
 80056fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800570c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005710:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005714:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3308      	adds	r3, #8
 800571e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005722:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005726:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800572e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800573a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1d9      	bne.n	80056f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005748:	2b00      	cmp	r3, #0
 800574a:	d017      	beq.n	800577c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005752:	4a15      	ldr	r2, [pc, #84]	@ (80057a8 <HAL_UART_IRQHandler+0x2c0>)
 8005754:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800575c:	4618      	mov	r0, r3
 800575e:	f7fd ff41 	bl	80035e4 <HAL_DMA_Abort_IT>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d019      	beq.n	800579c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800576e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005776:	4610      	mov	r0, r2
 8005778:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577a:	e00f      	b.n	800579c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f9e1 	bl	8005b44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005782:	e00b      	b.n	800579c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f9dd 	bl	8005b44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578a:	e007      	b.n	800579c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f9d9 	bl	8005b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800579a:	e1bf      	b.n	8005b1c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579c:	bf00      	nop
    return;
 800579e:	e1bd      	b.n	8005b1c <HAL_UART_IRQHandler+0x634>
 80057a0:	10000001 	.word	0x10000001
 80057a4:	04000120 	.word	0x04000120
 80057a8:	08006945 	.word	0x08006945

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	f040 8153 	bne.w	8005a5c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 814c 	beq.w	8005a5c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 8145 	beq.w	8005a5c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2210      	movs	r2, #16
 80057d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e4:	2b40      	cmp	r3, #64	@ 0x40
 80057e6:	f040 80bb 	bne.w	8005960 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 818f 	beq.w	8005b20 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005808:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800580c:	429a      	cmp	r2, r3
 800580e:	f080 8187 	bcs.w	8005b20 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005818:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	f040 8087 	bne.w	800593e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005844:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800584c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800585a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800585e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005866:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005872:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1da      	bne.n	8005830 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800588a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800588c:	f023 0301 	bic.w	r3, r3, #1
 8005890:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3308      	adds	r3, #8
 800589a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800589e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e1      	bne.n	800587a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3308      	adds	r3, #8
 80058bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80058c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80058da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80058dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80058e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80058e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e3      	bne.n	80058b6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800590a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800590c:	f023 0310 	bic.w	r3, r3, #16
 8005910:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800591e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005920:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005922:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005924:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005926:	e841 2300 	strex	r3, r2, [r1]
 800592a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800592c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1e4      	bne.n	80058fc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005938:	4618      	mov	r0, r3
 800593a:	f7fd fdfa 	bl	8003532 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005950:	b29b      	uxth	r3, r3
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	b29b      	uxth	r3, r3
 8005956:	4619      	mov	r1, r3
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f8fd 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800595e:	e0df      	b.n	8005b20 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800596c:	b29b      	uxth	r3, r3
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80d1 	beq.w	8005b24 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005982:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 80cc 	beq.w	8005b24 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800599a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80059ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80059b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e4      	bne.n	800598c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3308      	adds	r3, #8
 80059c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	623b      	str	r3, [r7, #32]
   return(result);
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3308      	adds	r3, #8
 80059e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80059ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80059ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e1      	bne.n	80059c2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0310 	bic.w	r3, r3, #16
 8005a26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	69b9      	ldr	r1, [r7, #24]
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	617b      	str	r3, [r7, #20]
   return(result);
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e4      	bne.n	8005a12 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f87f 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a5a:	e063      	b.n	8005b24 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00e      	beq.n	8005a86 <HAL_UART_IRQHandler+0x59e>
 8005a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005a7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 fcbe 	bl	8007400 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a84:	e051      	b.n	8005b2a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d014      	beq.n	8005abc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d105      	bne.n	8005aaa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d03a      	beq.n	8005b28 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
    }
    return;
 8005aba:	e035      	b.n	8005b28 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d009      	beq.n	8005adc <HAL_UART_IRQHandler+0x5f4>
 8005ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 ff4b 	bl	8006970 <UART_EndTransmit_IT>
    return;
 8005ada:	e026      	b.n	8005b2a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d009      	beq.n	8005afc <HAL_UART_IRQHandler+0x614>
 8005ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 fc97 	bl	8007428 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005afa:	e016      	b.n	8005b2a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d010      	beq.n	8005b2a <HAL_UART_IRQHandler+0x642>
 8005b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	da0c      	bge.n	8005b2a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f001 fc7f 	bl	8007414 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b16:	e008      	b.n	8005b2a <HAL_UART_IRQHandler+0x642>
      return;
 8005b18:	bf00      	nop
 8005b1a:	e006      	b.n	8005b2a <HAL_UART_IRQHandler+0x642>
    return;
 8005b1c:	bf00      	nop
 8005b1e:	e004      	b.n	8005b2a <HAL_UART_IRQHandler+0x642>
      return;
 8005b20:	bf00      	nop
 8005b22:	e002      	b.n	8005b2a <HAL_UART_IRQHandler+0x642>
      return;
 8005b24:	bf00      	nop
 8005b26:	e000      	b.n	8005b2a <HAL_UART_IRQHandler+0x642>
    return;
 8005b28:	bf00      	nop
  }
}
 8005b2a:	37e8      	adds	r7, #232	@ 0xe8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b74:	b08c      	sub	sp, #48	@ 0x30
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4bab      	ldr	r3, [pc, #684]	@ (8005e4c <UART_SetConfig+0x2dc>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4aa0      	ldr	r2, [pc, #640]	@ (8005e50 <UART_SetConfig+0x2e0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005be6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	6812      	ldr	r2, [r2, #0]
 8005bee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfa:	f023 010f 	bic.w	r1, r3, #15
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a91      	ldr	r2, [pc, #580]	@ (8005e54 <UART_SetConfig+0x2e4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d125      	bne.n	8005c60 <UART_SetConfig+0xf0>
 8005c14:	4b90      	ldr	r3, [pc, #576]	@ (8005e58 <UART_SetConfig+0x2e8>)
 8005c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d81a      	bhi.n	8005c58 <UART_SetConfig+0xe8>
 8005c22:	a201      	add	r2, pc, #4	@ (adr r2, 8005c28 <UART_SetConfig+0xb8>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c39 	.word	0x08005c39
 8005c2c:	08005c49 	.word	0x08005c49
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c51 	.word	0x08005c51
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c3e:	e0d6      	b.n	8005dee <UART_SetConfig+0x27e>
 8005c40:	2302      	movs	r3, #2
 8005c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c46:	e0d2      	b.n	8005dee <UART_SetConfig+0x27e>
 8005c48:	2304      	movs	r3, #4
 8005c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c4e:	e0ce      	b.n	8005dee <UART_SetConfig+0x27e>
 8005c50:	2308      	movs	r3, #8
 8005c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c56:	e0ca      	b.n	8005dee <UART_SetConfig+0x27e>
 8005c58:	2310      	movs	r3, #16
 8005c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c5e:	e0c6      	b.n	8005dee <UART_SetConfig+0x27e>
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a7d      	ldr	r2, [pc, #500]	@ (8005e5c <UART_SetConfig+0x2ec>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d138      	bne.n	8005cdc <UART_SetConfig+0x16c>
 8005c6a:	4b7b      	ldr	r3, [pc, #492]	@ (8005e58 <UART_SetConfig+0x2e8>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c70:	f003 030c 	and.w	r3, r3, #12
 8005c74:	2b0c      	cmp	r3, #12
 8005c76:	d82d      	bhi.n	8005cd4 <UART_SetConfig+0x164>
 8005c78:	a201      	add	r2, pc, #4	@ (adr r2, 8005c80 <UART_SetConfig+0x110>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005cb5 	.word	0x08005cb5
 8005c84:	08005cd5 	.word	0x08005cd5
 8005c88:	08005cd5 	.word	0x08005cd5
 8005c8c:	08005cd5 	.word	0x08005cd5
 8005c90:	08005cc5 	.word	0x08005cc5
 8005c94:	08005cd5 	.word	0x08005cd5
 8005c98:	08005cd5 	.word	0x08005cd5
 8005c9c:	08005cd5 	.word	0x08005cd5
 8005ca0:	08005cbd 	.word	0x08005cbd
 8005ca4:	08005cd5 	.word	0x08005cd5
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005cd5 	.word	0x08005cd5
 8005cb0:	08005ccd 	.word	0x08005ccd
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cba:	e098      	b.n	8005dee <UART_SetConfig+0x27e>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cc2:	e094      	b.n	8005dee <UART_SetConfig+0x27e>
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cca:	e090      	b.n	8005dee <UART_SetConfig+0x27e>
 8005ccc:	2308      	movs	r3, #8
 8005cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cd2:	e08c      	b.n	8005dee <UART_SetConfig+0x27e>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cda:	e088      	b.n	8005dee <UART_SetConfig+0x27e>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a5f      	ldr	r2, [pc, #380]	@ (8005e60 <UART_SetConfig+0x2f0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d125      	bne.n	8005d32 <UART_SetConfig+0x1c2>
 8005ce6:	4b5c      	ldr	r3, [pc, #368]	@ (8005e58 <UART_SetConfig+0x2e8>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005cf0:	2b30      	cmp	r3, #48	@ 0x30
 8005cf2:	d016      	beq.n	8005d22 <UART_SetConfig+0x1b2>
 8005cf4:	2b30      	cmp	r3, #48	@ 0x30
 8005cf6:	d818      	bhi.n	8005d2a <UART_SetConfig+0x1ba>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d00a      	beq.n	8005d12 <UART_SetConfig+0x1a2>
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d814      	bhi.n	8005d2a <UART_SetConfig+0x1ba>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <UART_SetConfig+0x19a>
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d008      	beq.n	8005d1a <UART_SetConfig+0x1aa>
 8005d08:	e00f      	b.n	8005d2a <UART_SetConfig+0x1ba>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d10:	e06d      	b.n	8005dee <UART_SetConfig+0x27e>
 8005d12:	2302      	movs	r3, #2
 8005d14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d18:	e069      	b.n	8005dee <UART_SetConfig+0x27e>
 8005d1a:	2304      	movs	r3, #4
 8005d1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d20:	e065      	b.n	8005dee <UART_SetConfig+0x27e>
 8005d22:	2308      	movs	r3, #8
 8005d24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d28:	e061      	b.n	8005dee <UART_SetConfig+0x27e>
 8005d2a:	2310      	movs	r3, #16
 8005d2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d30:	e05d      	b.n	8005dee <UART_SetConfig+0x27e>
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a4b      	ldr	r2, [pc, #300]	@ (8005e64 <UART_SetConfig+0x2f4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d125      	bne.n	8005d88 <UART_SetConfig+0x218>
 8005d3c:	4b46      	ldr	r3, [pc, #280]	@ (8005e58 <UART_SetConfig+0x2e8>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d46:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d48:	d016      	beq.n	8005d78 <UART_SetConfig+0x208>
 8005d4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d4c:	d818      	bhi.n	8005d80 <UART_SetConfig+0x210>
 8005d4e:	2b80      	cmp	r3, #128	@ 0x80
 8005d50:	d00a      	beq.n	8005d68 <UART_SetConfig+0x1f8>
 8005d52:	2b80      	cmp	r3, #128	@ 0x80
 8005d54:	d814      	bhi.n	8005d80 <UART_SetConfig+0x210>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <UART_SetConfig+0x1f0>
 8005d5a:	2b40      	cmp	r3, #64	@ 0x40
 8005d5c:	d008      	beq.n	8005d70 <UART_SetConfig+0x200>
 8005d5e:	e00f      	b.n	8005d80 <UART_SetConfig+0x210>
 8005d60:	2300      	movs	r3, #0
 8005d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d66:	e042      	b.n	8005dee <UART_SetConfig+0x27e>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d6e:	e03e      	b.n	8005dee <UART_SetConfig+0x27e>
 8005d70:	2304      	movs	r3, #4
 8005d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d76:	e03a      	b.n	8005dee <UART_SetConfig+0x27e>
 8005d78:	2308      	movs	r3, #8
 8005d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d7e:	e036      	b.n	8005dee <UART_SetConfig+0x27e>
 8005d80:	2310      	movs	r3, #16
 8005d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d86:	e032      	b.n	8005dee <UART_SetConfig+0x27e>
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a30      	ldr	r2, [pc, #192]	@ (8005e50 <UART_SetConfig+0x2e0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d12a      	bne.n	8005de8 <UART_SetConfig+0x278>
 8005d92:	4b31      	ldr	r3, [pc, #196]	@ (8005e58 <UART_SetConfig+0x2e8>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005da0:	d01a      	beq.n	8005dd8 <UART_SetConfig+0x268>
 8005da2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005da6:	d81b      	bhi.n	8005de0 <UART_SetConfig+0x270>
 8005da8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dac:	d00c      	beq.n	8005dc8 <UART_SetConfig+0x258>
 8005dae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005db2:	d815      	bhi.n	8005de0 <UART_SetConfig+0x270>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <UART_SetConfig+0x250>
 8005db8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dbc:	d008      	beq.n	8005dd0 <UART_SetConfig+0x260>
 8005dbe:	e00f      	b.n	8005de0 <UART_SetConfig+0x270>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dc6:	e012      	b.n	8005dee <UART_SetConfig+0x27e>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dce:	e00e      	b.n	8005dee <UART_SetConfig+0x27e>
 8005dd0:	2304      	movs	r3, #4
 8005dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dd6:	e00a      	b.n	8005dee <UART_SetConfig+0x27e>
 8005dd8:	2308      	movs	r3, #8
 8005dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dde:	e006      	b.n	8005dee <UART_SetConfig+0x27e>
 8005de0:	2310      	movs	r3, #16
 8005de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005de6:	e002      	b.n	8005dee <UART_SetConfig+0x27e>
 8005de8:	2310      	movs	r3, #16
 8005dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a17      	ldr	r2, [pc, #92]	@ (8005e50 <UART_SetConfig+0x2e0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	f040 80a8 	bne.w	8005f4a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d834      	bhi.n	8005e6c <UART_SetConfig+0x2fc>
 8005e02:	a201      	add	r2, pc, #4	@ (adr r2, 8005e08 <UART_SetConfig+0x298>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e6d 	.word	0x08005e6d
 8005e10:	08005e35 	.word	0x08005e35
 8005e14:	08005e6d 	.word	0x08005e6d
 8005e18:	08005e3b 	.word	0x08005e3b
 8005e1c:	08005e6d 	.word	0x08005e6d
 8005e20:	08005e6d 	.word	0x08005e6d
 8005e24:	08005e6d 	.word	0x08005e6d
 8005e28:	08005e43 	.word	0x08005e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e2c:	f7fe fcd2 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8005e30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e32:	e021      	b.n	8005e78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e34:	4b0c      	ldr	r3, [pc, #48]	@ (8005e68 <UART_SetConfig+0x2f8>)
 8005e36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e38:	e01e      	b.n	8005e78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3a:	f7fe fc5d 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 8005e3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e40:	e01a      	b.n	8005e78 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e48:	e016      	b.n	8005e78 <UART_SetConfig+0x308>
 8005e4a:	bf00      	nop
 8005e4c:	cfff69f3 	.word	0xcfff69f3
 8005e50:	40008000 	.word	0x40008000
 8005e54:	40013800 	.word	0x40013800
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	40004400 	.word	0x40004400
 8005e60:	40004800 	.word	0x40004800
 8005e64:	40004c00 	.word	0x40004c00
 8005e68:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 812a 	beq.w	80060d4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e84:	4a9e      	ldr	r2, [pc, #632]	@ (8006100 <UART_SetConfig+0x590>)
 8005e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	4413      	add	r3, r2
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d305      	bcc.n	8005eb0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d903      	bls.n	8005eb8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005eb6:	e10d      	b.n	80060d4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eba:	2200      	movs	r2, #0
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	60fa      	str	r2, [r7, #12]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec4:	4a8e      	ldr	r2, [pc, #568]	@ (8006100 <UART_SetConfig+0x590>)
 8005ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2200      	movs	r2, #0
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ed6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005eda:	f7fa fe8d 	bl	8000bf8 <__aeabi_uldivmod>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	f04f 0200 	mov.w	r2, #0
 8005eea:	f04f 0300 	mov.w	r3, #0
 8005eee:	020b      	lsls	r3, r1, #8
 8005ef0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ef4:	0202      	lsls	r2, r0, #8
 8005ef6:	6979      	ldr	r1, [r7, #20]
 8005ef8:	6849      	ldr	r1, [r1, #4]
 8005efa:	0849      	lsrs	r1, r1, #1
 8005efc:	2000      	movs	r0, #0
 8005efe:	460c      	mov	r4, r1
 8005f00:	4605      	mov	r5, r0
 8005f02:	eb12 0804 	adds.w	r8, r2, r4
 8005f06:	eb43 0905 	adc.w	r9, r3, r5
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	469a      	mov	sl, r3
 8005f12:	4693      	mov	fp, r2
 8005f14:	4652      	mov	r2, sl
 8005f16:	465b      	mov	r3, fp
 8005f18:	4640      	mov	r0, r8
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	f7fa fe6c 	bl	8000bf8 <__aeabi_uldivmod>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4613      	mov	r3, r2
 8005f26:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f2e:	d308      	bcc.n	8005f42 <UART_SetConfig+0x3d2>
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f36:	d204      	bcs.n	8005f42 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6a3a      	ldr	r2, [r7, #32]
 8005f3e:	60da      	str	r2, [r3, #12]
 8005f40:	e0c8      	b.n	80060d4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f48:	e0c4      	b.n	80060d4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f52:	d167      	bne.n	8006024 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005f54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d828      	bhi.n	8005fae <UART_SetConfig+0x43e>
 8005f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f64 <UART_SetConfig+0x3f4>)
 8005f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f62:	bf00      	nop
 8005f64:	08005f89 	.word	0x08005f89
 8005f68:	08005f91 	.word	0x08005f91
 8005f6c:	08005f99 	.word	0x08005f99
 8005f70:	08005faf 	.word	0x08005faf
 8005f74:	08005f9f 	.word	0x08005f9f
 8005f78:	08005faf 	.word	0x08005faf
 8005f7c:	08005faf 	.word	0x08005faf
 8005f80:	08005faf 	.word	0x08005faf
 8005f84:	08005fa7 	.word	0x08005fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f88:	f7fe fc24 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8005f8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f8e:	e014      	b.n	8005fba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f90:	f7fe fc36 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 8005f94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f96:	e010      	b.n	8005fba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f98:	4b5a      	ldr	r3, [pc, #360]	@ (8006104 <UART_SetConfig+0x594>)
 8005f9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f9c:	e00d      	b.n	8005fba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f9e:	f7fe fbab 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 8005fa2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fa4:	e009      	b.n	8005fba <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005faa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fac:	e005      	b.n	8005fba <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005fb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8089 	beq.w	80060d4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc6:	4a4e      	ldr	r2, [pc, #312]	@ (8006100 <UART_SetConfig+0x590>)
 8005fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fd4:	005a      	lsls	r2, r3, #1
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	441a      	add	r2, r3
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	2b0f      	cmp	r3, #15
 8005fec:	d916      	bls.n	800601c <UART_SetConfig+0x4ac>
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff4:	d212      	bcs.n	800601c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	f023 030f 	bic.w	r3, r3, #15
 8005ffe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	085b      	lsrs	r3, r3, #1
 8006004:	b29b      	uxth	r3, r3
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	b29a      	uxth	r2, r3
 800600c:	8bfb      	ldrh	r3, [r7, #30]
 800600e:	4313      	orrs	r3, r2
 8006010:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	8bfa      	ldrh	r2, [r7, #30]
 8006018:	60da      	str	r2, [r3, #12]
 800601a:	e05b      	b.n	80060d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006022:	e057      	b.n	80060d4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006024:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006028:	2b08      	cmp	r3, #8
 800602a:	d828      	bhi.n	800607e <UART_SetConfig+0x50e>
 800602c:	a201      	add	r2, pc, #4	@ (adr r2, 8006034 <UART_SetConfig+0x4c4>)
 800602e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006032:	bf00      	nop
 8006034:	08006059 	.word	0x08006059
 8006038:	08006061 	.word	0x08006061
 800603c:	08006069 	.word	0x08006069
 8006040:	0800607f 	.word	0x0800607f
 8006044:	0800606f 	.word	0x0800606f
 8006048:	0800607f 	.word	0x0800607f
 800604c:	0800607f 	.word	0x0800607f
 8006050:	0800607f 	.word	0x0800607f
 8006054:	08006077 	.word	0x08006077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006058:	f7fe fbbc 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 800605c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800605e:	e014      	b.n	800608a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006060:	f7fe fbce 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 8006064:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006066:	e010      	b.n	800608a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006068:	4b26      	ldr	r3, [pc, #152]	@ (8006104 <UART_SetConfig+0x594>)
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800606c:	e00d      	b.n	800608a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800606e:	f7fe fb43 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 8006072:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006074:	e009      	b.n	800608a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006076:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800607a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800607c:	e005      	b.n	800608a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006088:	bf00      	nop
    }

    if (pclk != 0U)
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	d021      	beq.n	80060d4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006094:	4a1a      	ldr	r2, [pc, #104]	@ (8006100 <UART_SetConfig+0x590>)
 8006096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800609a:	461a      	mov	r2, r3
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	fbb3 f2f2 	udiv	r2, r3, r2
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	085b      	lsrs	r3, r3, #1
 80060a8:	441a      	add	r2, r3
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	2b0f      	cmp	r3, #15
 80060b8:	d909      	bls.n	80060ce <UART_SetConfig+0x55e>
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060c0:	d205      	bcs.n	80060ce <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60da      	str	r2, [r3, #12]
 80060cc:	e002      	b.n	80060d4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2201      	movs	r2, #1
 80060e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2200      	movs	r2, #0
 80060e8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2200      	movs	r2, #0
 80060ee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80060f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3730      	adds	r7, #48	@ 0x30
 80060f8:	46bd      	mov	sp, r7
 80060fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060fe:	bf00      	nop
 8006100:	0800c3f8 	.word	0x0800c3f8
 8006104:	00f42400 	.word	0x00f42400

08006108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01a      	beq.n	800621e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006206:	d10a      	bne.n	800621e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	605a      	str	r2, [r3, #4]
  }
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b098      	sub	sp, #96	@ 0x60
 8006250:	af02      	add	r7, sp, #8
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800625c:	f7fb fd3c 	bl	8001cd8 <HAL_GetTick>
 8006260:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0308 	and.w	r3, r3, #8
 800626c:	2b08      	cmp	r3, #8
 800626e:	d12f      	bne.n	80062d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006270:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006278:	2200      	movs	r2, #0
 800627a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f88e 	bl	80063a0 <UART_WaitOnFlagUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d022      	beq.n	80062d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006292:	e853 3f00 	ldrex	r3, [r3]
 8006296:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800629a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800629e:	653b      	str	r3, [r7, #80]	@ 0x50
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e6      	bne.n	800628a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e063      	b.n	8006398 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d149      	bne.n	8006372 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062e6:	2200      	movs	r2, #0
 80062e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f857 	bl	80063a0 <UART_WaitOnFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d03c      	beq.n	8006372 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	e853 3f00 	ldrex	r3, [r3]
 8006304:	623b      	str	r3, [r7, #32]
   return(result);
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800630c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006316:	633b      	str	r3, [r7, #48]	@ 0x30
 8006318:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800631c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e6      	bne.n	80062f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3308      	adds	r3, #8
 8006330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	60fb      	str	r3, [r7, #12]
   return(result);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f023 0301 	bic.w	r3, r3, #1
 8006340:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3308      	adds	r3, #8
 8006348:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800634a:	61fa      	str	r2, [r7, #28]
 800634c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	69b9      	ldr	r1, [r7, #24]
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	617b      	str	r3, [r7, #20]
   return(result);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e5      	bne.n	800632a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e012      	b.n	8006398 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2220      	movs	r2, #32
 8006376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3758      	adds	r7, #88	@ 0x58
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	4613      	mov	r3, r2
 80063ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b0:	e04f      	b.n	8006452 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d04b      	beq.n	8006452 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ba:	f7fb fc8d 	bl	8001cd8 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d302      	bcc.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e04e      	b.n	8006472 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d037      	beq.n	8006452 <UART_WaitOnFlagUntilTimeout+0xb2>
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b80      	cmp	r3, #128	@ 0x80
 80063e6:	d034      	beq.n	8006452 <UART_WaitOnFlagUntilTimeout+0xb2>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b40      	cmp	r3, #64	@ 0x40
 80063ec:	d031      	beq.n	8006452 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d110      	bne.n	800641e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2208      	movs	r2, #8
 8006402:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f99c 	bl	8006742 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2208      	movs	r2, #8
 800640e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e029      	b.n	8006472 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006428:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800642c:	d111      	bne.n	8006452 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006436:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 f982 	bl	8006742 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2220      	movs	r2, #32
 8006442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e00f      	b.n	8006472 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69da      	ldr	r2, [r3, #28]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4013      	ands	r3, r2
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	429a      	cmp	r2, r3
 8006460:	bf0c      	ite	eq
 8006462:	2301      	moveq	r3, #1
 8006464:	2300      	movne	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	79fb      	ldrb	r3, [r7, #7]
 800646c:	429a      	cmp	r2, r3
 800646e:	d0a0      	beq.n	80063b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800647c:	b480      	push	{r7}
 800647e:	b0a3      	sub	sp, #140	@ 0x8c
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	4613      	mov	r3, r2
 8006488:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	88fa      	ldrh	r2, [r7, #6]
 8006494:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ae:	d10e      	bne.n	80064ce <UART_Start_Receive_IT+0x52>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d105      	bne.n	80064c4 <UART_Start_Receive_IT+0x48>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80064be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80064c2:	e02d      	b.n	8006520 <UART_Start_Receive_IT+0xa4>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	22ff      	movs	r2, #255	@ 0xff
 80064c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80064cc:	e028      	b.n	8006520 <UART_Start_Receive_IT+0xa4>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10d      	bne.n	80064f2 <UART_Start_Receive_IT+0x76>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <UART_Start_Receive_IT+0x6c>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	22ff      	movs	r2, #255	@ 0xff
 80064e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80064e6:	e01b      	b.n	8006520 <UART_Start_Receive_IT+0xa4>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	227f      	movs	r2, #127	@ 0x7f
 80064ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80064f0:	e016      	b.n	8006520 <UART_Start_Receive_IT+0xa4>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064fa:	d10d      	bne.n	8006518 <UART_Start_Receive_IT+0x9c>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d104      	bne.n	800650e <UART_Start_Receive_IT+0x92>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	227f      	movs	r2, #127	@ 0x7f
 8006508:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800650c:	e008      	b.n	8006520 <UART_Start_Receive_IT+0xa4>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	223f      	movs	r2, #63	@ 0x3f
 8006512:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006516:	e003      	b.n	8006520 <UART_Start_Receive_IT+0xa4>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2222      	movs	r2, #34	@ 0x22
 800652c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3308      	adds	r3, #8
 8006536:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006540:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006554:	673a      	str	r2, [r7, #112]	@ 0x70
 8006556:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800655a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006562:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e3      	bne.n	8006530 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800656c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006570:	d14f      	bne.n	8006612 <UART_Start_Receive_IT+0x196>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006578:	88fa      	ldrh	r2, [r7, #6]
 800657a:	429a      	cmp	r2, r3
 800657c:	d349      	bcc.n	8006612 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006586:	d107      	bne.n	8006598 <UART_Start_Receive_IT+0x11c>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d103      	bne.n	8006598 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4a47      	ldr	r2, [pc, #284]	@ (80066b0 <UART_Start_Receive_IT+0x234>)
 8006594:	675a      	str	r2, [r3, #116]	@ 0x74
 8006596:	e002      	b.n	800659e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4a46      	ldr	r2, [pc, #280]	@ (80066b4 <UART_Start_Receive_IT+0x238>)
 800659c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d01a      	beq.n	80065dc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ae:	e853 3f00 	ldrex	r3, [r3]
 80065b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80065b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80065c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ca:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80065ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80065d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e4      	bne.n	80065a6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3308      	adds	r3, #8
 80065e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e6:	e853 3f00 	ldrex	r3, [r3]
 80065ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3308      	adds	r3, #8
 80065fa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80065fc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80065fe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006602:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800660a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e5      	bne.n	80065dc <UART_Start_Receive_IT+0x160>
 8006610:	e046      	b.n	80066a0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800661a:	d107      	bne.n	800662c <UART_Start_Receive_IT+0x1b0>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d103      	bne.n	800662c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4a24      	ldr	r2, [pc, #144]	@ (80066b8 <UART_Start_Receive_IT+0x23c>)
 8006628:	675a      	str	r2, [r3, #116]	@ 0x74
 800662a:	e002      	b.n	8006632 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4a23      	ldr	r2, [pc, #140]	@ (80066bc <UART_Start_Receive_IT+0x240>)
 8006630:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d019      	beq.n	800666e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800664e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	461a      	mov	r2, r3
 8006656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006658:	637b      	str	r3, [r7, #52]	@ 0x34
 800665a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800665e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e6      	bne.n	800663a <UART_Start_Receive_IT+0x1be>
 800666c:	e018      	b.n	80066a0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	613b      	str	r3, [r7, #16]
   return(result);
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f043 0320 	orr.w	r3, r3, #32
 8006682:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800668c:	623b      	str	r3, [r7, #32]
 800668e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	69f9      	ldr	r1, [r7, #28]
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	61bb      	str	r3, [r7, #24]
   return(result);
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e6      	bne.n	800666e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	378c      	adds	r7, #140	@ 0x8c
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	08007099 	.word	0x08007099
 80066b4:	08006d39 	.word	0x08006d39
 80066b8:	08006b81 	.word	0x08006b81
 80066bc:	080069c9 	.word	0x080069c9

080066c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b08f      	sub	sp, #60	@ 0x3c
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80066dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066e8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e6      	bne.n	80066c8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3308      	adds	r3, #8
 8006700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	60bb      	str	r3, [r7, #8]
   return(result);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006710:	633b      	str	r3, [r7, #48]	@ 0x30
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3308      	adds	r3, #8
 8006718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800671a:	61ba      	str	r2, [r7, #24]
 800671c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	6979      	ldr	r1, [r7, #20]
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	613b      	str	r3, [r7, #16]
   return(result);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e5      	bne.n	80066fa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006736:	bf00      	nop
 8006738:	373c      	adds	r7, #60	@ 0x3c
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006742:	b480      	push	{r7}
 8006744:	b095      	sub	sp, #84	@ 0x54
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800675e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006768:	643b      	str	r3, [r7, #64]	@ 0x40
 800676a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800676e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e6      	bne.n	800674a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3308      	adds	r3, #8
 8006782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	61fb      	str	r3, [r7, #28]
   return(result);
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006792:	f023 0301 	bic.w	r3, r3, #1
 8006796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3308      	adds	r3, #8
 800679e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067a8:	e841 2300 	strex	r3, r2, [r1]
 80067ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1e3      	bne.n	800677c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d118      	bne.n	80067ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f023 0310 	bic.w	r3, r3, #16
 80067d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6979      	ldr	r1, [r7, #20]
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	613b      	str	r3, [r7, #16]
   return(result);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e6      	bne.n	80067bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006802:	bf00      	nop
 8006804:	3754      	adds	r7, #84	@ 0x54
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b090      	sub	sp, #64	@ 0x40
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800681a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d137      	bne.n	800689a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800682a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800682c:	2200      	movs	r2, #0
 800682e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3308      	adds	r3, #8
 8006838:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	623b      	str	r3, [r7, #32]
   return(result);
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006848:	63bb      	str	r3, [r7, #56]	@ 0x38
 800684a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3308      	adds	r3, #8
 8006850:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006852:	633a      	str	r2, [r7, #48]	@ 0x30
 8006854:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e5      	bne.n	8006832 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	60fb      	str	r3, [r7, #12]
   return(result);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800687a:	637b      	str	r3, [r7, #52]	@ 0x34
 800687c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	69b9      	ldr	r1, [r7, #24]
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	617b      	str	r3, [r7, #20]
   return(result);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e6      	bne.n	8006866 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006898:	e002      	b.n	80068a0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800689a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800689c:	f7fa fb4c 	bl	8000f38 <HAL_UART_TxCpltCallback>
}
 80068a0:	bf00      	nop
 80068a2:	3740      	adds	r7, #64	@ 0x40
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f7ff f93a 	bl	8005b30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068bc:	bf00      	nop
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068e0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ec:	2b80      	cmp	r3, #128	@ 0x80
 80068ee:	d109      	bne.n	8006904 <UART_DMAError+0x40>
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	2b21      	cmp	r3, #33	@ 0x21
 80068f4:	d106      	bne.n	8006904 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80068fe:	6978      	ldr	r0, [r7, #20]
 8006900:	f7ff fede 	bl	80066c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800690e:	2b40      	cmp	r3, #64	@ 0x40
 8006910:	d109      	bne.n	8006926 <UART_DMAError+0x62>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b22      	cmp	r3, #34	@ 0x22
 8006916:	d106      	bne.n	8006926 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2200      	movs	r2, #0
 800691c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006920:	6978      	ldr	r0, [r7, #20]
 8006922:	f7ff ff0e 	bl	8006742 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692c:	f043 0210 	orr.w	r2, r3, #16
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006936:	6978      	ldr	r0, [r7, #20]
 8006938:	f7ff f904 	bl	8005b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800693c:	bf00      	nop
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006950:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7ff f8ee 	bl	8005b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b088      	sub	sp, #32
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	60bb      	str	r3, [r7, #8]
   return(result);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800698c:	61fb      	str	r3, [r7, #28]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	61bb      	str	r3, [r7, #24]
 8006998:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6979      	ldr	r1, [r7, #20]
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	613b      	str	r3, [r7, #16]
   return(result);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e6      	bne.n	8006978 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7fa fabd 	bl	8000f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069be:	bf00      	nop
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b09c      	sub	sp, #112	@ 0x70
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80069d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069e0:	2b22      	cmp	r3, #34	@ 0x22
 80069e2:	f040 80be 	bne.w	8006b62 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80069f4:	b2d9      	uxtb	r1, r3
 80069f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a00:	400a      	ands	r2, r1
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f040 80a1 	bne.w	8006b72 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e6      	bne.n	8006a30 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3308      	adds	r3, #8
 8006a68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a74:	f023 0301 	bic.w	r3, r3, #1
 8006a78:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a82:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e5      	bne.n	8006a62 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a33      	ldr	r2, [pc, #204]	@ (8006b7c <UART_RxISR_8BIT+0x1b4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d01f      	beq.n	8006af4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d018      	beq.n	8006af4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	623b      	str	r3, [r7, #32]
   return(result);
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ad6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ae2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e6      	bne.n	8006ac2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d12e      	bne.n	8006b5a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0310 	bic.w	r3, r3, #16
 8006b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b20:	61fb      	str	r3, [r7, #28]
 8006b22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	69b9      	ldr	r1, [r7, #24]
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e6      	bne.n	8006b02 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	f003 0310 	and.w	r3, r3, #16
 8006b3e:	2b10      	cmp	r3, #16
 8006b40:	d103      	bne.n	8006b4a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2210      	movs	r2, #16
 8006b48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff f800 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b58:	e00b      	b.n	8006b72 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7fa f9c4 	bl	8000ee8 <HAL_UART_RxCpltCallback>
}
 8006b60:	e007      	b.n	8006b72 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	699a      	ldr	r2, [r3, #24]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 0208 	orr.w	r2, r2, #8
 8006b70:	619a      	str	r2, [r3, #24]
}
 8006b72:	bf00      	nop
 8006b74:	3770      	adds	r7, #112	@ 0x70
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40008000 	.word	0x40008000

08006b80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b09c      	sub	sp, #112	@ 0x70
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006b8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b98:	2b22      	cmp	r3, #34	@ 0x22
 8006b9a:	f040 80be 	bne.w	8006d1a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006bae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006bb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bbc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bc2:	1c9a      	adds	r2, r3, #2
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f040 80a1 	bne.w	8006d2a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006bf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bfc:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c06:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c08:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e6      	bne.n	8006be8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3308      	adds	r3, #8
 8006c38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e5      	bne.n	8006c1a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a33      	ldr	r2, [pc, #204]	@ (8006d34 <UART_RxISR_16BIT+0x1b4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d01f      	beq.n	8006cac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d018      	beq.n	8006cac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c9a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e6      	bne.n	8006c7a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d12e      	bne.n	8006d12 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f023 0310 	bic.w	r3, r3, #16
 8006cce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6979      	ldr	r1, [r7, #20]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e6      	bne.n	8006cba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	f003 0310 	and.w	r3, r3, #16
 8006cf6:	2b10      	cmp	r3, #16
 8006cf8:	d103      	bne.n	8006d02 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2210      	movs	r2, #16
 8006d00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fe ff24 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d10:	e00b      	b.n	8006d2a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fa f8e8 	bl	8000ee8 <HAL_UART_RxCpltCallback>
}
 8006d18:	e007      	b.n	8006d2a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699a      	ldr	r2, [r3, #24]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0208 	orr.w	r2, r2, #8
 8006d28:	619a      	str	r2, [r3, #24]
}
 8006d2a:	bf00      	nop
 8006d2c:	3770      	adds	r7, #112	@ 0x70
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	40008000 	.word	0x40008000

08006d38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b0ac      	sub	sp, #176	@ 0xb0
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d46:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d6e:	2b22      	cmp	r3, #34	@ 0x22
 8006d70:	f040 8182 	bne.w	8007078 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d7a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d7e:	e125      	b.n	8006fcc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d86:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d8a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006d8e:	b2d9      	uxtb	r1, r3
 8006d90:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d9a:	400a      	ands	r2, r1
 8006d9c:	b2d2      	uxtb	r2, r2
 8006d9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d053      	beq.n	8006e7a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d011      	beq.n	8006e02 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00b      	beq.n	8006e02 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2201      	movs	r2, #1
 8006df0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df8:	f043 0201 	orr.w	r2, r3, #1
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d011      	beq.n	8006e32 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00b      	beq.n	8006e32 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e28:	f043 0204 	orr.w	r2, r3, #4
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d011      	beq.n	8006e62 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00b      	beq.n	8006e62 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2204      	movs	r2, #4
 8006e50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e58:	f043 0202 	orr.w	r2, r3, #2
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d006      	beq.n	8006e7a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7fe fe69 	bl	8005b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f040 80a2 	bne.w	8006fcc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006eac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006eb0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006eb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e4      	bne.n	8006e88 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006ece:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ed4:	f023 0301 	bic.w	r3, r3, #1
 8006ed8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ee6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006ee8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006eec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006ef4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e1      	bne.n	8006ebe <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a5f      	ldr	r2, [pc, #380]	@ (8007090 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d021      	beq.n	8006f5c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d01a      	beq.n	8006f5c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f48:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f4a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e4      	bne.n	8006f26 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d130      	bne.n	8006fc6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7a:	f023 0310 	bic.w	r3, r3, #16
 8006f7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f94:	e841 2300 	strex	r3, r2, [r1]
 8006f98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1e4      	bne.n	8006f6a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	f003 0310 	and.w	r3, r3, #16
 8006faa:	2b10      	cmp	r3, #16
 8006fac:	d103      	bne.n	8006fb6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2210      	movs	r2, #16
 8006fb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7fe fdca 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
 8006fc4:	e002      	b.n	8006fcc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7f9 ff8e 	bl	8000ee8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fcc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d006      	beq.n	8006fe2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006fd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f47f aecf 	bne.w	8006d80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fe8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006fec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d049      	beq.n	8007088 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006ffa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d242      	bcs.n	8007088 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3308      	adds	r3, #8
 8007008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	61fb      	str	r3, [r7, #28]
   return(result);
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007018:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3308      	adds	r3, #8
 8007022:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007026:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007028:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800702c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e3      	bne.n	8007002 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a15      	ldr	r2, [pc, #84]	@ (8007094 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800703e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	60bb      	str	r3, [r7, #8]
   return(result);
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f043 0320 	orr.w	r3, r3, #32
 8007054:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007062:	61bb      	str	r3, [r7, #24]
 8007064:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	6979      	ldr	r1, [r7, #20]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	e841 2300 	strex	r3, r2, [r1]
 800706e:	613b      	str	r3, [r7, #16]
   return(result);
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1e4      	bne.n	8007040 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007076:	e007      	b.n	8007088 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699a      	ldr	r2, [r3, #24]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0208 	orr.w	r2, r2, #8
 8007086:	619a      	str	r2, [r3, #24]
}
 8007088:	bf00      	nop
 800708a:	37b0      	adds	r7, #176	@ 0xb0
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	40008000 	.word	0x40008000
 8007094:	080069c9 	.word	0x080069c9

08007098 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b0ae      	sub	sp, #184	@ 0xb8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80070a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070ce:	2b22      	cmp	r3, #34	@ 0x22
 80070d0:	f040 8186 	bne.w	80073e0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80070da:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070de:	e129      	b.n	8007334 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80070f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80070f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80070fa:	4013      	ands	r3, r2
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007102:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007108:	1c9a      	adds	r2, r3, #2
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007114:	b29b      	uxth	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	b29a      	uxth	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800712a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	2b00      	cmp	r3, #0
 8007134:	d053      	beq.n	80071de <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007136:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d011      	beq.n	8007166 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00b      	beq.n	8007166 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2201      	movs	r2, #1
 8007154:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800715c:	f043 0201 	orr.w	r2, r3, #1
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007166:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d011      	beq.n	8007196 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007172:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00b      	beq.n	8007196 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2202      	movs	r2, #2
 8007184:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800718c:	f043 0204 	orr.w	r2, r3, #4
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d011      	beq.n	80071c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80071a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2204      	movs	r2, #4
 80071b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071bc:	f043 0202 	orr.w	r2, r3, #2
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d006      	beq.n	80071de <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7fe fcb7 	bl	8005b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f040 80a4 	bne.w	8007334 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80071fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007200:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800720e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007212:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007216:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007220:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e2      	bne.n	80071ec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3308      	adds	r3, #8
 800722c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007230:	e853 3f00 	ldrex	r3, [r3]
 8007234:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800723c:	f023 0301 	bic.w	r3, r3, #1
 8007240:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3308      	adds	r3, #8
 800724a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800724e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007250:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007252:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007254:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800725c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1e1      	bne.n	8007226 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a5f      	ldr	r2, [pc, #380]	@ (80073f8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d021      	beq.n	80072c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d01a      	beq.n	80072c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007296:	e853 3f00 	ldrex	r3, [r3]
 800729a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800729c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800729e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80072a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80072b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e4      	bne.n	800728e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d130      	bne.n	800732e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e2:	f023 0310 	bic.w	r3, r3, #16
 80072e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80072f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80072f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e4      	bne.n	80072d2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f003 0310 	and.w	r3, r3, #16
 8007312:	2b10      	cmp	r3, #16
 8007314:	d103      	bne.n	800731e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2210      	movs	r2, #16
 800731c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7fe fc16 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
 800732c:	e002      	b.n	8007334 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7f9 fdda 	bl	8000ee8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007334:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007338:	2b00      	cmp	r3, #0
 800733a:	d006      	beq.n	800734a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800733c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	f47f aecb 	bne.w	80070e0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007350:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007354:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007358:	2b00      	cmp	r3, #0
 800735a:	d049      	beq.n	80073f0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007362:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007366:	429a      	cmp	r2, r3
 8007368:	d242      	bcs.n	80073f0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	623b      	str	r3, [r7, #32]
   return(result);
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3308      	adds	r3, #8
 800738a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800738e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007390:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800739c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e3      	bne.n	800736a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a15      	ldr	r2, [pc, #84]	@ (80073fc <UART_RxISR_16BIT_FIFOEN+0x364>)
 80073a6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f043 0320 	orr.w	r3, r3, #32
 80073bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073ca:	61fb      	str	r3, [r7, #28]
 80073cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	69b9      	ldr	r1, [r7, #24]
 80073d0:	69fa      	ldr	r2, [r7, #28]
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	617b      	str	r3, [r7, #20]
   return(result);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e4      	bne.n	80073a8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073de:	e007      	b.n	80073f0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699a      	ldr	r2, [r3, #24]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 0208 	orr.w	r2, r2, #8
 80073ee:	619a      	str	r2, [r3, #24]
}
 80073f0:	bf00      	nop
 80073f2:	37b8      	adds	r7, #184	@ 0xb8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	40008000 	.word	0x40008000
 80073fc:	08006b81 	.word	0x08006b81

08007400 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800744a:	2b01      	cmp	r3, #1
 800744c:	d101      	bne.n	8007452 <HAL_UARTEx_DisableFifoMode+0x16>
 800744e:	2302      	movs	r3, #2
 8007450:	e027      	b.n	80074a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2224      	movs	r2, #36	@ 0x24
 800745e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 0201 	bic.w	r2, r2, #1
 8007478:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007480:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2220      	movs	r2, #32
 8007494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d101      	bne.n	80074c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074c2:	2302      	movs	r3, #2
 80074c4:	e02d      	b.n	8007522 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2224      	movs	r2, #36	@ 0x24
 80074d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0201 	bic.w	r2, r2, #1
 80074ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f850 	bl	80075a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2220      	movs	r2, #32
 8007514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800753a:	2b01      	cmp	r3, #1
 800753c:	d101      	bne.n	8007542 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800753e:	2302      	movs	r3, #2
 8007540:	e02d      	b.n	800759e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2224      	movs	r2, #36	@ 0x24
 800754e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0201 	bic.w	r2, r2, #1
 8007568:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f812 	bl	80075a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d108      	bne.n	80075ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075c8:	e031      	b.n	800762e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075ca:	2308      	movs	r3, #8
 80075cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075ce:	2308      	movs	r3, #8
 80075d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	0e5b      	lsrs	r3, r3, #25
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	0f5b      	lsrs	r3, r3, #29
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	f003 0307 	and.w	r3, r3, #7
 80075f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	7b3a      	ldrb	r2, [r7, #12]
 80075f6:	4911      	ldr	r1, [pc, #68]	@ (800763c <UARTEx_SetNbDataToProcess+0x94>)
 80075f8:	5c8a      	ldrb	r2, [r1, r2]
 80075fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075fe:	7b3a      	ldrb	r2, [r7, #12]
 8007600:	490f      	ldr	r1, [pc, #60]	@ (8007640 <UARTEx_SetNbDataToProcess+0x98>)
 8007602:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007604:	fb93 f3f2 	sdiv	r3, r3, r2
 8007608:	b29a      	uxth	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	7b7a      	ldrb	r2, [r7, #13]
 8007614:	4909      	ldr	r1, [pc, #36]	@ (800763c <UARTEx_SetNbDataToProcess+0x94>)
 8007616:	5c8a      	ldrb	r2, [r1, r2]
 8007618:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800761c:	7b7a      	ldrb	r2, [r7, #13]
 800761e:	4908      	ldr	r1, [pc, #32]	@ (8007640 <UARTEx_SetNbDataToProcess+0x98>)
 8007620:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007622:	fb93 f3f2 	sdiv	r3, r3, r2
 8007626:	b29a      	uxth	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800762e:	bf00      	nop
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	0800c410 	.word	0x0800c410
 8007640:	0800c418 	.word	0x0800c418

08007644 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	4603      	mov	r3, r0
 800764c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800764e:	2300      	movs	r3, #0
 8007650:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007656:	2b84      	cmp	r3, #132	@ 0x84
 8007658:	d005      	beq.n	8007666 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800765a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4413      	add	r3, r2
 8007662:	3303      	adds	r3, #3
 8007664:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007666:	68fb      	ldr	r3, [r7, #12]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007678:	f000 ff64 	bl	8008544 <vTaskStartScheduler>
  
  return osOK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	bd80      	pop	{r7, pc}

08007682 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007684:	b087      	sub	sp, #28
 8007686:	af02      	add	r7, sp, #8
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685c      	ldr	r4, [r3, #4]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007698:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff ffcf 	bl	8007644 <makeFreeRtosPriority>
 80076a6:	4602      	mov	r2, r0
 80076a8:	f107 030c 	add.w	r3, r7, #12
 80076ac:	9301      	str	r3, [sp, #4]
 80076ae:	9200      	str	r2, [sp, #0]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	4632      	mov	r2, r6
 80076b4:	4629      	mov	r1, r5
 80076b6:	4620      	mov	r0, r4
 80076b8:	f000 fdc2 	bl	8008240 <xTaskCreate>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d001      	beq.n	80076c6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	e000      	b.n	80076c8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80076c6:	68fb      	ldr	r3, [r7, #12]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076d0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <osDelay+0x16>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	e000      	b.n	80076e8 <osDelay+0x18>
 80076e6:	2301      	movs	r3, #1
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 fef5 	bl	80084d8 <vTaskDelay>
  
  return osOK;
 80076ee:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f103 0208 	add.w	r2, r3, #8
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f04f 32ff 	mov.w	r2, #4294967295
 8007710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f103 0208 	add.w	r2, r3, #8
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f103 0208 	add.w	r2, r3, #8
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	689a      	ldr	r2, [r3, #8]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	601a      	str	r2, [r3, #0]
}
 800778e:	bf00      	nop
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b0:	d103      	bne.n	80077ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	e00c      	b.n	80077d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3308      	adds	r3, #8
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	e002      	b.n	80077c8 <vListInsert+0x2e>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d2f6      	bcs.n	80077c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	601a      	str	r2, [r3, #0]
}
 8007800:	bf00      	nop
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6892      	ldr	r2, [r2, #8]
 8007822:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	6852      	ldr	r2, [r2, #4]
 800782c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	429a      	cmp	r2, r3
 8007836:	d103      	bne.n	8007840 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	1e5a      	subs	r2, r3, #1
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10b      	bne.n	800788c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007886:	bf00      	nop
 8007888:	bf00      	nop
 800788a:	e7fd      	b.n	8007888 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800788c:	f001 fd9c 	bl	80093c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007898:	68f9      	ldr	r1, [r7, #12]
 800789a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800789c:	fb01 f303 	mul.w	r3, r1, r3
 80078a0:	441a      	add	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078bc:	3b01      	subs	r3, #1
 80078be:	68f9      	ldr	r1, [r7, #12]
 80078c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80078c2:	fb01 f303 	mul.w	r3, r1, r3
 80078c6:	441a      	add	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	22ff      	movs	r2, #255	@ 0xff
 80078d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	22ff      	movs	r2, #255	@ 0xff
 80078d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d114      	bne.n	800790c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d01a      	beq.n	8007920 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3310      	adds	r3, #16
 80078ee:	4618      	mov	r0, r3
 80078f0:	f001 f86a 	bl	80089c8 <xTaskRemoveFromEventList>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d012      	beq.n	8007920 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007930 <xQueueGenericReset+0xd0>)
 80078fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	e009      	b.n	8007920 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	3310      	adds	r3, #16
 8007910:	4618      	mov	r0, r3
 8007912:	f7ff fef1 	bl	80076f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3324      	adds	r3, #36	@ 0x24
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff feec 	bl	80076f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007920:	f001 fd84 	bl	800942c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007924:	2301      	movs	r3, #1
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	e000ed04 	.word	0xe000ed04

08007934 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007934:	b580      	push	{r7, lr}
 8007936:	b08a      	sub	sp, #40	@ 0x28
 8007938:	af02      	add	r7, sp, #8
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	4613      	mov	r3, r2
 8007940:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10b      	bne.n	8007960 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	613b      	str	r3, [r7, #16]
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	e7fd      	b.n	800795c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	fb02 f303 	mul.w	r3, r2, r3
 8007968:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	3348      	adds	r3, #72	@ 0x48
 800796e:	4618      	mov	r0, r3
 8007970:	f001 fe4c 	bl	800960c <pvPortMalloc>
 8007974:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00d      	beq.n	8007998 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	3348      	adds	r3, #72	@ 0x48
 8007984:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007986:	79fa      	ldrb	r2, [r7, #7]
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	4613      	mov	r3, r2
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	68b9      	ldr	r1, [r7, #8]
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 f805 	bl	80079a2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007998:	69bb      	ldr	r3, [r7, #24]
	}
 800799a:	4618      	mov	r0, r3
 800799c:	3720      	adds	r7, #32
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	60f8      	str	r0, [r7, #12]
 80079aa:	60b9      	str	r1, [r7, #8]
 80079ac:	607a      	str	r2, [r7, #4]
 80079ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d103      	bne.n	80079be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	e002      	b.n	80079c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079d0:	2101      	movs	r1, #1
 80079d2:	69b8      	ldr	r0, [r7, #24]
 80079d4:	f7ff ff44 	bl	8007860 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079d8:	bf00      	nop
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b090      	sub	sp, #64	@ 0x40
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80079f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10b      	bne.n	8007a10 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a0a:	bf00      	nop
 8007a0c:	bf00      	nop
 8007a0e:	e7fd      	b.n	8007a0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d103      	bne.n	8007a1e <xQueueGenericSendFromISR+0x3e>
 8007a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <xQueueGenericSendFromISR+0x42>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e000      	b.n	8007a24 <xQueueGenericSendFromISR+0x44>
 8007a22:	2300      	movs	r3, #0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10b      	bne.n	8007a40 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a3a:	bf00      	nop
 8007a3c:	bf00      	nop
 8007a3e:	e7fd      	b.n	8007a3c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d103      	bne.n	8007a4e <xQueueGenericSendFromISR+0x6e>
 8007a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d101      	bne.n	8007a52 <xQueueGenericSendFromISR+0x72>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <xQueueGenericSendFromISR+0x74>
 8007a52:	2300      	movs	r3, #0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10b      	bne.n	8007a70 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	623b      	str	r3, [r7, #32]
}
 8007a6a:	bf00      	nop
 8007a6c:	bf00      	nop
 8007a6e:	e7fd      	b.n	8007a6c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a70:	f001 fd8a 	bl	8009588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a74:	f3ef 8211 	mrs	r2, BASEPRI
 8007a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	61fa      	str	r2, [r7, #28]
 8007a8a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a8e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d302      	bcc.n	8007aa2 <xQueueGenericSendFromISR+0xc2>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d12f      	bne.n	8007b02 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007aa8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ab8:	f000 faca 	bl	8008050 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007abc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d112      	bne.n	8007aec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d016      	beq.n	8007afc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad0:	3324      	adds	r3, #36	@ 0x24
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 ff78 	bl	80089c8 <xTaskRemoveFromEventList>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00e      	beq.n	8007afc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00b      	beq.n	8007afc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	e007      	b.n	8007afc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007aec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007af0:	3301      	adds	r3, #1
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	b25a      	sxtb	r2, r3
 8007af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007afc:	2301      	movs	r3, #1
 8007afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007b00:	e001      	b.n	8007b06 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b08:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3740      	adds	r7, #64	@ 0x40
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08e      	sub	sp, #56	@ 0x38
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10b      	bne.n	8007b48 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	623b      	str	r3, [r7, #32]
}
 8007b42:	bf00      	nop
 8007b44:	bf00      	nop
 8007b46:	e7fd      	b.n	8007b44 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	61fb      	str	r3, [r7, #28]
}
 8007b62:	bf00      	nop
 8007b64:	bf00      	nop
 8007b66:	e7fd      	b.n	8007b64 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <xQueueGiveFromISR+0x5c>
 8007b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <xQueueGiveFromISR+0x60>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e000      	b.n	8007b7e <xQueueGiveFromISR+0x62>
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10b      	bne.n	8007b9a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	61bb      	str	r3, [r7, #24]
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop
 8007b98:	e7fd      	b.n	8007b96 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b9a:	f001 fcf5 	bl	8009588 <vPortValidateInterruptPriority>
	__asm volatile
 8007b9e:	f3ef 8211 	mrs	r2, BASEPRI
 8007ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	617a      	str	r2, [r7, #20]
 8007bb4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007bb6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bbe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d22b      	bcs.n	8007c22 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bda:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be4:	d112      	bne.n	8007c0c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d016      	beq.n	8007c1c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf0:	3324      	adds	r3, #36	@ 0x24
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 fee8 	bl	80089c8 <xTaskRemoveFromEventList>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00e      	beq.n	8007c1c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00b      	beq.n	8007c1c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2201      	movs	r2, #1
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	e007      	b.n	8007c1c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c10:	3301      	adds	r3, #1
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	b25a      	sxtb	r2, r3
 8007c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c20:	e001      	b.n	8007c26 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c22:	2300      	movs	r3, #0
 8007c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c28:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f383 8811 	msr	BASEPRI, r3
}
 8007c30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3738      	adds	r7, #56	@ 0x38
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08c      	sub	sp, #48	@ 0x30
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10b      	bne.n	8007c6e <xQueueReceive+0x32>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	623b      	str	r3, [r7, #32]
}
 8007c68:	bf00      	nop
 8007c6a:	bf00      	nop
 8007c6c:	e7fd      	b.n	8007c6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d103      	bne.n	8007c7c <xQueueReceive+0x40>
 8007c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <xQueueReceive+0x44>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e000      	b.n	8007c82 <xQueueReceive+0x46>
 8007c80:	2300      	movs	r3, #0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10b      	bne.n	8007c9e <xQueueReceive+0x62>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	61fb      	str	r3, [r7, #28]
}
 8007c98:	bf00      	nop
 8007c9a:	bf00      	nop
 8007c9c:	e7fd      	b.n	8007c9a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c9e:	f001 f839 	bl	8008d14 <xTaskGetSchedulerState>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d102      	bne.n	8007cae <xQueueReceive+0x72>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <xQueueReceive+0x76>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e000      	b.n	8007cb4 <xQueueReceive+0x78>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10b      	bne.n	8007cd0 <xQueueReceive+0x94>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	61bb      	str	r3, [r7, #24]
}
 8007cca:	bf00      	nop
 8007ccc:	bf00      	nop
 8007cce:	e7fd      	b.n	8007ccc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cd0:	f001 fb7a 	bl	80093c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01f      	beq.n	8007d20 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ce0:	68b9      	ldr	r1, [r7, #8]
 8007ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ce4:	f000 fa1e 	bl	8008124 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	1e5a      	subs	r2, r3, #1
 8007cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00f      	beq.n	8007d18 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfa:	3310      	adds	r3, #16
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 fe63 	bl	80089c8 <xTaskRemoveFromEventList>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d007      	beq.n	8007d18 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d08:	4b3c      	ldr	r3, [pc, #240]	@ (8007dfc <xQueueReceive+0x1c0>)
 8007d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d18:	f001 fb88 	bl	800942c <vPortExitCritical>
				return pdPASS;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e069      	b.n	8007df4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d103      	bne.n	8007d2e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d26:	f001 fb81 	bl	800942c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	e062      	b.n	8007df4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d106      	bne.n	8007d42 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d34:	f107 0310 	add.w	r3, r7, #16
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fea9 	bl	8008a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d42:	f001 fb73 	bl	800942c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d46:	f000 fc4f 	bl	80085e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d4a:	f001 fb3d 	bl	80093c8 <vPortEnterCritical>
 8007d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d54:	b25b      	sxtb	r3, r3
 8007d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5a:	d103      	bne.n	8007d64 <xQueueReceive+0x128>
 8007d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d6a:	b25b      	sxtb	r3, r3
 8007d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d70:	d103      	bne.n	8007d7a <xQueueReceive+0x13e>
 8007d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d7a:	f001 fb57 	bl	800942c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d7e:	1d3a      	adds	r2, r7, #4
 8007d80:	f107 0310 	add.w	r3, r7, #16
 8007d84:	4611      	mov	r1, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fe98 	bl	8008abc <xTaskCheckForTimeOut>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d123      	bne.n	8007dda <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d94:	f000 fa3e 	bl	8008214 <prvIsQueueEmpty>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d017      	beq.n	8007dce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da0:	3324      	adds	r3, #36	@ 0x24
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	4611      	mov	r1, r2
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 fde8 	bl	800897c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007dac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dae:	f000 f9df 	bl	8008170 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007db2:	f000 fc27 	bl	8008604 <xTaskResumeAll>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d189      	bne.n	8007cd0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8007dfc <xQueueReceive+0x1c0>)
 8007dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	e780      	b.n	8007cd0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007dce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dd0:	f000 f9ce 	bl	8008170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dd4:	f000 fc16 	bl	8008604 <xTaskResumeAll>
 8007dd8:	e77a      	b.n	8007cd0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ddc:	f000 f9c8 	bl	8008170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007de0:	f000 fc10 	bl	8008604 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007de4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007de6:	f000 fa15 	bl	8008214 <prvIsQueueEmpty>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f43f af6f 	beq.w	8007cd0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007df2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3730      	adds	r7, #48	@ 0x30
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	e000ed04 	.word	0xe000ed04

08007e00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08e      	sub	sp, #56	@ 0x38
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007e12:	2300      	movs	r3, #0
 8007e14:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10b      	bne.n	8007e34 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	623b      	str	r3, [r7, #32]
}
 8007e2e:	bf00      	nop
 8007e30:	bf00      	nop
 8007e32:	e7fd      	b.n	8007e30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00b      	beq.n	8007e54 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	61fb      	str	r3, [r7, #28]
}
 8007e4e:	bf00      	nop
 8007e50:	bf00      	nop
 8007e52:	e7fd      	b.n	8007e50 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e54:	f000 ff5e 	bl	8008d14 <xTaskGetSchedulerState>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d102      	bne.n	8007e64 <xQueueSemaphoreTake+0x64>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <xQueueSemaphoreTake+0x68>
 8007e64:	2301      	movs	r3, #1
 8007e66:	e000      	b.n	8007e6a <xQueueSemaphoreTake+0x6a>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10b      	bne.n	8007e86 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	61bb      	str	r3, [r7, #24]
}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	e7fd      	b.n	8007e82 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e86:	f001 fa9f 	bl	80093c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d024      	beq.n	8007ee0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e98:	1e5a      	subs	r2, r3, #1
 8007e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e9c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d104      	bne.n	8007eb0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007ea6:	f001 f8e1 	bl	800906c <pvTaskIncrementMutexHeldCount>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00f      	beq.n	8007ed8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eba:	3310      	adds	r3, #16
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 fd83 	bl	80089c8 <xTaskRemoveFromEventList>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ec8:	4b54      	ldr	r3, [pc, #336]	@ (800801c <xQueueSemaphoreTake+0x21c>)
 8007eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ed8:	f001 faa8 	bl	800942c <vPortExitCritical>
				return pdPASS;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e098      	b.n	8008012 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d112      	bne.n	8007f0c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00b      	beq.n	8007f04 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	617b      	str	r3, [r7, #20]
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007f04:	f001 fa92 	bl	800942c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e082      	b.n	8008012 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d106      	bne.n	8007f20 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f12:	f107 030c 	add.w	r3, r7, #12
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fdba 	bl	8008a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f20:	f001 fa84 	bl	800942c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f24:	f000 fb60 	bl	80085e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f28:	f001 fa4e 	bl	80093c8 <vPortEnterCritical>
 8007f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f32:	b25b      	sxtb	r3, r3
 8007f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f38:	d103      	bne.n	8007f42 <xQueueSemaphoreTake+0x142>
 8007f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f48:	b25b      	sxtb	r3, r3
 8007f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4e:	d103      	bne.n	8007f58 <xQueueSemaphoreTake+0x158>
 8007f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f58:	f001 fa68 	bl	800942c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f5c:	463a      	mov	r2, r7
 8007f5e:	f107 030c 	add.w	r3, r7, #12
 8007f62:	4611      	mov	r1, r2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fda9 	bl	8008abc <xTaskCheckForTimeOut>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d132      	bne.n	8007fd6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f72:	f000 f94f 	bl	8008214 <prvIsQueueEmpty>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d026      	beq.n	8007fca <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d109      	bne.n	8007f98 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007f84:	f001 fa20 	bl	80093c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fedf 	bl	8008d50 <xTaskPriorityInherit>
 8007f92:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007f94:	f001 fa4a 	bl	800942c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9a:	3324      	adds	r3, #36	@ 0x24
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fceb 	bl	800897c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fa6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007fa8:	f000 f8e2 	bl	8008170 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fac:	f000 fb2a 	bl	8008604 <xTaskResumeAll>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f47f af67 	bne.w	8007e86 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007fb8:	4b18      	ldr	r3, [pc, #96]	@ (800801c <xQueueSemaphoreTake+0x21c>)
 8007fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	e75d      	b.n	8007e86 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007fca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007fcc:	f000 f8d0 	bl	8008170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fd0:	f000 fb18 	bl	8008604 <xTaskResumeAll>
 8007fd4:	e757      	b.n	8007e86 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007fd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007fd8:	f000 f8ca 	bl	8008170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fdc:	f000 fb12 	bl	8008604 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fe0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007fe2:	f000 f917 	bl	8008214 <prvIsQueueEmpty>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f43f af4c 	beq.w	8007e86 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00d      	beq.n	8008010 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007ff4:	f001 f9e8 	bl	80093c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007ff8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ffa:	f000 f811 	bl	8008020 <prvGetDisinheritPriorityAfterTimeout>
 8007ffe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008006:	4618      	mov	r0, r3
 8008008:	f000 ffa0 	bl	8008f4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800800c:	f001 fa0e 	bl	800942c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008010:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008012:	4618      	mov	r0, r3
 8008014:	3738      	adds	r7, #56	@ 0x38
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	e000ed04 	.word	0xe000ed04

08008020 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800802c:	2b00      	cmp	r3, #0
 800802e:	d006      	beq.n	800803e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f1c3 0307 	rsb	r3, r3, #7
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	e001      	b.n	8008042 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800803e:	2300      	movs	r3, #0
 8008040:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008042:	68fb      	ldr	r3, [r7, #12]
	}
 8008044:	4618      	mov	r0, r3
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800805c:	2300      	movs	r3, #0
 800805e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008064:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10d      	bne.n	800808a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d14d      	bne.n	8008112 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fede 	bl	8008e3c <xTaskPriorityDisinherit>
 8008080:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	609a      	str	r2, [r3, #8]
 8008088:	e043      	b.n	8008112 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d119      	bne.n	80080c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6858      	ldr	r0, [r3, #4]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008098:	461a      	mov	r2, r3
 800809a:	68b9      	ldr	r1, [r7, #8]
 800809c:	f002 fad7 	bl	800a64e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a8:	441a      	add	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d32b      	bcc.n	8008112 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	605a      	str	r2, [r3, #4]
 80080c2:	e026      	b.n	8008112 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	68d8      	ldr	r0, [r3, #12]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080cc:	461a      	mov	r2, r3
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	f002 fabd 	bl	800a64e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	68da      	ldr	r2, [r3, #12]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080dc:	425b      	negs	r3, r3
 80080de:	441a      	add	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	68da      	ldr	r2, [r3, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d207      	bcs.n	8008100 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f8:	425b      	negs	r3, r3
 80080fa:	441a      	add	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b02      	cmp	r3, #2
 8008104:	d105      	bne.n	8008112 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	3b01      	subs	r3, #1
 8008110:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	1c5a      	adds	r2, r3, #1
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800811a:	697b      	ldr	r3, [r7, #20]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3718      	adds	r7, #24
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	d018      	beq.n	8008168 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800813e:	441a      	add	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	429a      	cmp	r2, r3
 800814e:	d303      	bcc.n	8008158 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68d9      	ldr	r1, [r3, #12]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008160:	461a      	mov	r2, r3
 8008162:	6838      	ldr	r0, [r7, #0]
 8008164:	f002 fa73 	bl	800a64e <memcpy>
	}
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008178:	f001 f926 	bl	80093c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008182:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008184:	e011      	b.n	80081aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800818a:	2b00      	cmp	r3, #0
 800818c:	d012      	beq.n	80081b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	3324      	adds	r3, #36	@ 0x24
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fc18 	bl	80089c8 <xTaskRemoveFromEventList>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800819e:	f000 fcf1 	bl	8008b84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
 80081a4:	3b01      	subs	r3, #1
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	dce9      	bgt.n	8008186 <prvUnlockQueue+0x16>
 80081b2:	e000      	b.n	80081b6 <prvUnlockQueue+0x46>
					break;
 80081b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	22ff      	movs	r2, #255	@ 0xff
 80081ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80081be:	f001 f935 	bl	800942c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081c2:	f001 f901 	bl	80093c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081ce:	e011      	b.n	80081f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d012      	beq.n	80081fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	3310      	adds	r3, #16
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 fbf3 	bl	80089c8 <xTaskRemoveFromEventList>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081e8:	f000 fccc 	bl	8008b84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	dce9      	bgt.n	80081d0 <prvUnlockQueue+0x60>
 80081fc:	e000      	b.n	8008200 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	22ff      	movs	r2, #255	@ 0xff
 8008204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008208:	f001 f910 	bl	800942c <vPortExitCritical>
}
 800820c:	bf00      	nop
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800821c:	f001 f8d4 	bl	80093c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008224:	2b00      	cmp	r3, #0
 8008226:	d102      	bne.n	800822e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008228:	2301      	movs	r3, #1
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	e001      	b.n	8008232 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800822e:	2300      	movs	r3, #0
 8008230:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008232:	f001 f8fb 	bl	800942c <vPortExitCritical>

	return xReturn;
 8008236:	68fb      	ldr	r3, [r7, #12]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08c      	sub	sp, #48	@ 0x30
 8008244:	af04      	add	r7, sp, #16
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	4613      	mov	r3, r2
 800824e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008250:	88fb      	ldrh	r3, [r7, #6]
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4618      	mov	r0, r3
 8008256:	f001 f9d9 	bl	800960c <pvPortMalloc>
 800825a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00e      	beq.n	8008280 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008262:	20b0      	movs	r0, #176	@ 0xb0
 8008264:	f001 f9d2 	bl	800960c <pvPortMalloc>
 8008268:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	631a      	str	r2, [r3, #48]	@ 0x30
 8008276:	e005      	b.n	8008284 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008278:	6978      	ldr	r0, [r7, #20]
 800827a:	f001 fa95 	bl	80097a8 <vPortFree>
 800827e:	e001      	b.n	8008284 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008280:	2300      	movs	r3, #0
 8008282:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d013      	beq.n	80082b2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800828a:	88fa      	ldrh	r2, [r7, #6]
 800828c:	2300      	movs	r3, #0
 800828e:	9303      	str	r3, [sp, #12]
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	9302      	str	r3, [sp, #8]
 8008294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	68b9      	ldr	r1, [r7, #8]
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 f80f 	bl	80082c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082a6:	69f8      	ldr	r0, [r7, #28]
 80082a8:	f000 f8ac 	bl	8008404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082ac:	2301      	movs	r3, #1
 80082ae:	61bb      	str	r3, [r7, #24]
 80082b0:	e002      	b.n	80082b8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082b2:	f04f 33ff 	mov.w	r3, #4294967295
 80082b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082b8:	69bb      	ldr	r3, [r7, #24]
	}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3720      	adds	r7, #32
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80082d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80082dc:	3b01      	subs	r3, #1
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f023 0307 	bic.w	r3, r3, #7
 80082ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	f003 0307 	and.w	r3, r3, #7
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00b      	beq.n	800830e <prvInitialiseNewTask+0x4a>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	617b      	str	r3, [r7, #20]
}
 8008308:	bf00      	nop
 800830a:	bf00      	nop
 800830c:	e7fd      	b.n	800830a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d01f      	beq.n	8008354 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008314:	2300      	movs	r3, #0
 8008316:	61fb      	str	r3, [r7, #28]
 8008318:	e012      	b.n	8008340 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	4413      	add	r3, r2
 8008320:	7819      	ldrb	r1, [r3, #0]
 8008322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	4413      	add	r3, r2
 8008328:	3334      	adds	r3, #52	@ 0x34
 800832a:	460a      	mov	r2, r1
 800832c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	4413      	add	r3, r2
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d006      	beq.n	8008348 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	3301      	adds	r3, #1
 800833e:	61fb      	str	r3, [r7, #28]
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	2b1f      	cmp	r3, #31
 8008344:	d9e9      	bls.n	800831a <prvInitialiseNewTask+0x56>
 8008346:	e000      	b.n	800834a <prvInitialiseNewTask+0x86>
			{
				break;
 8008348:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800834a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8008352:	e003      	b.n	800835c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008356:	2200      	movs	r2, #0
 8008358:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800835c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835e:	2b06      	cmp	r3, #6
 8008360:	d901      	bls.n	8008366 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008362:	2306      	movs	r3, #6
 8008364:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008368:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800836a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800836c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008370:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8008372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008374:	2200      	movs	r2, #0
 8008376:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837a:	3304      	adds	r3, #4
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff f9db 	bl	8007738 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008384:	3318      	adds	r3, #24
 8008386:	4618      	mov	r0, r3
 8008388:	f7ff f9d6 	bl	8007738 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800838c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008390:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008394:	f1c3 0207 	rsb	r2, r3, #7
 8008398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800839c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a4:	2200      	movs	r2, #0
 80083a6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b4:	335c      	adds	r3, #92	@ 0x5c
 80083b6:	224c      	movs	r2, #76	@ 0x4c
 80083b8:	2100      	movs	r1, #0
 80083ba:	4618      	mov	r0, r3
 80083bc:	f002 f871 	bl	800a4a2 <memset>
 80083c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c2:	4a0d      	ldr	r2, [pc, #52]	@ (80083f8 <prvInitialiseNewTask+0x134>)
 80083c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80083c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c8:	4a0c      	ldr	r2, [pc, #48]	@ (80083fc <prvInitialiseNewTask+0x138>)
 80083ca:	665a      	str	r2, [r3, #100]	@ 0x64
 80083cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008400 <prvInitialiseNewTask+0x13c>)
 80083d0:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	68f9      	ldr	r1, [r7, #12]
 80083d6:	69b8      	ldr	r0, [r7, #24]
 80083d8:	f000 fec2 	bl	8009160 <pxPortInitialiseStack>
 80083dc:	4602      	mov	r2, r0
 80083de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80083e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083ee:	bf00      	nop
 80083f0:	3720      	adds	r7, #32
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	2000463c 	.word	0x2000463c
 80083fc:	200046a4 	.word	0x200046a4
 8008400:	2000470c 	.word	0x2000470c

08008404 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800840c:	f000 ffdc 	bl	80093c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008410:	4b2a      	ldr	r3, [pc, #168]	@ (80084bc <prvAddNewTaskToReadyList+0xb8>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3301      	adds	r3, #1
 8008416:	4a29      	ldr	r2, [pc, #164]	@ (80084bc <prvAddNewTaskToReadyList+0xb8>)
 8008418:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800841a:	4b29      	ldr	r3, [pc, #164]	@ (80084c0 <prvAddNewTaskToReadyList+0xbc>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d109      	bne.n	8008436 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008422:	4a27      	ldr	r2, [pc, #156]	@ (80084c0 <prvAddNewTaskToReadyList+0xbc>)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008428:	4b24      	ldr	r3, [pc, #144]	@ (80084bc <prvAddNewTaskToReadyList+0xb8>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d110      	bne.n	8008452 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008430:	f000 fbcc 	bl	8008bcc <prvInitialiseTaskLists>
 8008434:	e00d      	b.n	8008452 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008436:	4b23      	ldr	r3, [pc, #140]	@ (80084c4 <prvAddNewTaskToReadyList+0xc0>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d109      	bne.n	8008452 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800843e:	4b20      	ldr	r3, [pc, #128]	@ (80084c0 <prvAddNewTaskToReadyList+0xbc>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008448:	429a      	cmp	r2, r3
 800844a:	d802      	bhi.n	8008452 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800844c:	4a1c      	ldr	r2, [pc, #112]	@ (80084c0 <prvAddNewTaskToReadyList+0xbc>)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008452:	4b1d      	ldr	r3, [pc, #116]	@ (80084c8 <prvAddNewTaskToReadyList+0xc4>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3301      	adds	r3, #1
 8008458:	4a1b      	ldr	r2, [pc, #108]	@ (80084c8 <prvAddNewTaskToReadyList+0xc4>)
 800845a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008460:	2201      	movs	r2, #1
 8008462:	409a      	lsls	r2, r3
 8008464:	4b19      	ldr	r3, [pc, #100]	@ (80084cc <prvAddNewTaskToReadyList+0xc8>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4313      	orrs	r3, r2
 800846a:	4a18      	ldr	r2, [pc, #96]	@ (80084cc <prvAddNewTaskToReadyList+0xc8>)
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008472:	4613      	mov	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4a15      	ldr	r2, [pc, #84]	@ (80084d0 <prvAddNewTaskToReadyList+0xcc>)
 800847c:	441a      	add	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	3304      	adds	r3, #4
 8008482:	4619      	mov	r1, r3
 8008484:	4610      	mov	r0, r2
 8008486:	f7ff f964 	bl	8007752 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800848a:	f000 ffcf 	bl	800942c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800848e:	4b0d      	ldr	r3, [pc, #52]	@ (80084c4 <prvAddNewTaskToReadyList+0xc0>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00e      	beq.n	80084b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008496:	4b0a      	ldr	r3, [pc, #40]	@ (80084c0 <prvAddNewTaskToReadyList+0xbc>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d207      	bcs.n	80084b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084a4:	4b0b      	ldr	r3, [pc, #44]	@ (80084d4 <prvAddNewTaskToReadyList+0xd0>)
 80084a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	200005e8 	.word	0x200005e8
 80084c0:	200004e8 	.word	0x200004e8
 80084c4:	200005f4 	.word	0x200005f4
 80084c8:	20000604 	.word	0x20000604
 80084cc:	200005f0 	.word	0x200005f0
 80084d0:	200004ec 	.word	0x200004ec
 80084d4:	e000ed04 	.word	0xe000ed04

080084d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084e0:	2300      	movs	r3, #0
 80084e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d018      	beq.n	800851c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80084ea:	4b14      	ldr	r3, [pc, #80]	@ (800853c <vTaskDelay+0x64>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00b      	beq.n	800850a <vTaskDelay+0x32>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	60bb      	str	r3, [r7, #8]
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop
 8008508:	e7fd      	b.n	8008506 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800850a:	f000 f86d 	bl	80085e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800850e:	2100      	movs	r1, #0
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fdbf 	bl	8009094 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008516:	f000 f875 	bl	8008604 <xTaskResumeAll>
 800851a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d107      	bne.n	8008532 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008522:	4b07      	ldr	r3, [pc, #28]	@ (8008540 <vTaskDelay+0x68>)
 8008524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20000610 	.word	0x20000610
 8008540:	e000ed04 	.word	0xe000ed04

08008544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800854a:	4b1f      	ldr	r3, [pc, #124]	@ (80085c8 <vTaskStartScheduler+0x84>)
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	2300      	movs	r3, #0
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	2300      	movs	r3, #0
 8008554:	2280      	movs	r2, #128	@ 0x80
 8008556:	491d      	ldr	r1, [pc, #116]	@ (80085cc <vTaskStartScheduler+0x88>)
 8008558:	481d      	ldr	r0, [pc, #116]	@ (80085d0 <vTaskStartScheduler+0x8c>)
 800855a:	f7ff fe71 	bl	8008240 <xTaskCreate>
 800855e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d11b      	bne.n	800859e <vTaskStartScheduler+0x5a>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	60bb      	str	r3, [r7, #8]
}
 8008578:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800857a:	4b16      	ldr	r3, [pc, #88]	@ (80085d4 <vTaskStartScheduler+0x90>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	335c      	adds	r3, #92	@ 0x5c
 8008580:	4a15      	ldr	r2, [pc, #84]	@ (80085d8 <vTaskStartScheduler+0x94>)
 8008582:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008584:	4b15      	ldr	r3, [pc, #84]	@ (80085dc <vTaskStartScheduler+0x98>)
 8008586:	f04f 32ff 	mov.w	r2, #4294967295
 800858a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800858c:	4b14      	ldr	r3, [pc, #80]	@ (80085e0 <vTaskStartScheduler+0x9c>)
 800858e:	2201      	movs	r2, #1
 8008590:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008592:	4b14      	ldr	r3, [pc, #80]	@ (80085e4 <vTaskStartScheduler+0xa0>)
 8008594:	2200      	movs	r2, #0
 8008596:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008598:	f000 fe72 	bl	8009280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800859c:	e00f      	b.n	80085be <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a4:	d10b      	bne.n	80085be <vTaskStartScheduler+0x7a>
	__asm volatile
 80085a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	607b      	str	r3, [r7, #4]
}
 80085b8:	bf00      	nop
 80085ba:	bf00      	nop
 80085bc:	e7fd      	b.n	80085ba <vTaskStartScheduler+0x76>
}
 80085be:	bf00      	nop
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	2000060c 	.word	0x2000060c
 80085cc:	0800c3d8 	.word	0x0800c3d8
 80085d0:	08008b9d 	.word	0x08008b9d
 80085d4:	200004e8 	.word	0x200004e8
 80085d8:	2000001c 	.word	0x2000001c
 80085dc:	20000608 	.word	0x20000608
 80085e0:	200005f4 	.word	0x200005f4
 80085e4:	200005ec 	.word	0x200005ec

080085e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80085ec:	4b04      	ldr	r3, [pc, #16]	@ (8008600 <vTaskSuspendAll+0x18>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3301      	adds	r3, #1
 80085f2:	4a03      	ldr	r2, [pc, #12]	@ (8008600 <vTaskSuspendAll+0x18>)
 80085f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80085f6:	bf00      	nop
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	20000610 	.word	0x20000610

08008604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800860e:	2300      	movs	r3, #0
 8008610:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008612:	4b42      	ldr	r3, [pc, #264]	@ (800871c <xTaskResumeAll+0x118>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10b      	bne.n	8008632 <xTaskResumeAll+0x2e>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	603b      	str	r3, [r7, #0]
}
 800862c:	bf00      	nop
 800862e:	bf00      	nop
 8008630:	e7fd      	b.n	800862e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008632:	f000 fec9 	bl	80093c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008636:	4b39      	ldr	r3, [pc, #228]	@ (800871c <xTaskResumeAll+0x118>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	3b01      	subs	r3, #1
 800863c:	4a37      	ldr	r2, [pc, #220]	@ (800871c <xTaskResumeAll+0x118>)
 800863e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008640:	4b36      	ldr	r3, [pc, #216]	@ (800871c <xTaskResumeAll+0x118>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d161      	bne.n	800870c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008648:	4b35      	ldr	r3, [pc, #212]	@ (8008720 <xTaskResumeAll+0x11c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d05d      	beq.n	800870c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008650:	e02e      	b.n	80086b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008652:	4b34      	ldr	r3, [pc, #208]	@ (8008724 <xTaskResumeAll+0x120>)
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3318      	adds	r3, #24
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff f8d4 	bl	800780c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	3304      	adds	r3, #4
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff f8cf 	bl	800780c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008672:	2201      	movs	r2, #1
 8008674:	409a      	lsls	r2, r3
 8008676:	4b2c      	ldr	r3, [pc, #176]	@ (8008728 <xTaskResumeAll+0x124>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4313      	orrs	r3, r2
 800867c:	4a2a      	ldr	r2, [pc, #168]	@ (8008728 <xTaskResumeAll+0x124>)
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008684:	4613      	mov	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4a27      	ldr	r2, [pc, #156]	@ (800872c <xTaskResumeAll+0x128>)
 800868e:	441a      	add	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3304      	adds	r3, #4
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	f7ff f85b 	bl	8007752 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086a0:	4b23      	ldr	r3, [pc, #140]	@ (8008730 <xTaskResumeAll+0x12c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d302      	bcc.n	80086b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80086aa:	4b22      	ldr	r3, [pc, #136]	@ (8008734 <xTaskResumeAll+0x130>)
 80086ac:	2201      	movs	r2, #1
 80086ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008724 <xTaskResumeAll+0x120>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1cc      	bne.n	8008652 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80086be:	f000 fb09 	bl	8008cd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80086c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008738 <xTaskResumeAll+0x134>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d010      	beq.n	80086f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80086ce:	f000 f837 	bl	8008740 <xTaskIncrementTick>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80086d8:	4b16      	ldr	r3, [pc, #88]	@ (8008734 <xTaskResumeAll+0x130>)
 80086da:	2201      	movs	r2, #1
 80086dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1f1      	bne.n	80086ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80086ea:	4b13      	ldr	r3, [pc, #76]	@ (8008738 <xTaskResumeAll+0x134>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086f0:	4b10      	ldr	r3, [pc, #64]	@ (8008734 <xTaskResumeAll+0x130>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d009      	beq.n	800870c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086f8:	2301      	movs	r3, #1
 80086fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086fc:	4b0f      	ldr	r3, [pc, #60]	@ (800873c <xTaskResumeAll+0x138>)
 80086fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800870c:	f000 fe8e 	bl	800942c <vPortExitCritical>

	return xAlreadyYielded;
 8008710:	68bb      	ldr	r3, [r7, #8]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	20000610 	.word	0x20000610
 8008720:	200005e8 	.word	0x200005e8
 8008724:	200005a8 	.word	0x200005a8
 8008728:	200005f0 	.word	0x200005f0
 800872c:	200004ec 	.word	0x200004ec
 8008730:	200004e8 	.word	0x200004e8
 8008734:	200005fc 	.word	0x200005fc
 8008738:	200005f8 	.word	0x200005f8
 800873c:	e000ed04 	.word	0xe000ed04

08008740 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008746:	2300      	movs	r3, #0
 8008748:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800874a:	4b4f      	ldr	r3, [pc, #316]	@ (8008888 <xTaskIncrementTick+0x148>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	f040 808f 	bne.w	8008872 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008754:	4b4d      	ldr	r3, [pc, #308]	@ (800888c <xTaskIncrementTick+0x14c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3301      	adds	r3, #1
 800875a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800875c:	4a4b      	ldr	r2, [pc, #300]	@ (800888c <xTaskIncrementTick+0x14c>)
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d121      	bne.n	80087ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008768:	4b49      	ldr	r3, [pc, #292]	@ (8008890 <xTaskIncrementTick+0x150>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00b      	beq.n	800878a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	603b      	str	r3, [r7, #0]
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop
 8008788:	e7fd      	b.n	8008786 <xTaskIncrementTick+0x46>
 800878a:	4b41      	ldr	r3, [pc, #260]	@ (8008890 <xTaskIncrementTick+0x150>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	4b40      	ldr	r3, [pc, #256]	@ (8008894 <xTaskIncrementTick+0x154>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a3e      	ldr	r2, [pc, #248]	@ (8008890 <xTaskIncrementTick+0x150>)
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	4a3e      	ldr	r2, [pc, #248]	@ (8008894 <xTaskIncrementTick+0x154>)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	4b3e      	ldr	r3, [pc, #248]	@ (8008898 <xTaskIncrementTick+0x158>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3301      	adds	r3, #1
 80087a4:	4a3c      	ldr	r2, [pc, #240]	@ (8008898 <xTaskIncrementTick+0x158>)
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	f000 fa94 	bl	8008cd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087ac:	4b3b      	ldr	r3, [pc, #236]	@ (800889c <xTaskIncrementTick+0x15c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d348      	bcc.n	8008848 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087b6:	4b36      	ldr	r3, [pc, #216]	@ (8008890 <xTaskIncrementTick+0x150>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d104      	bne.n	80087ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087c0:	4b36      	ldr	r3, [pc, #216]	@ (800889c <xTaskIncrementTick+0x15c>)
 80087c2:	f04f 32ff 	mov.w	r2, #4294967295
 80087c6:	601a      	str	r2, [r3, #0]
					break;
 80087c8:	e03e      	b.n	8008848 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ca:	4b31      	ldr	r3, [pc, #196]	@ (8008890 <xTaskIncrementTick+0x150>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d203      	bcs.n	80087ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087e2:	4a2e      	ldr	r2, [pc, #184]	@ (800889c <xTaskIncrementTick+0x15c>)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087e8:	e02e      	b.n	8008848 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	3304      	adds	r3, #4
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff f80c 	bl	800780c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d004      	beq.n	8008806 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	3318      	adds	r3, #24
 8008800:	4618      	mov	r0, r3
 8008802:	f7ff f803 	bl	800780c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880a:	2201      	movs	r2, #1
 800880c:	409a      	lsls	r2, r3
 800880e:	4b24      	ldr	r3, [pc, #144]	@ (80088a0 <xTaskIncrementTick+0x160>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4313      	orrs	r3, r2
 8008814:	4a22      	ldr	r2, [pc, #136]	@ (80088a0 <xTaskIncrementTick+0x160>)
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800881c:	4613      	mov	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4a1f      	ldr	r2, [pc, #124]	@ (80088a4 <xTaskIncrementTick+0x164>)
 8008826:	441a      	add	r2, r3
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	3304      	adds	r3, #4
 800882c:	4619      	mov	r1, r3
 800882e:	4610      	mov	r0, r2
 8008830:	f7fe ff8f 	bl	8007752 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008838:	4b1b      	ldr	r3, [pc, #108]	@ (80088a8 <xTaskIncrementTick+0x168>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883e:	429a      	cmp	r2, r3
 8008840:	d3b9      	bcc.n	80087b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008842:	2301      	movs	r3, #1
 8008844:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008846:	e7b6      	b.n	80087b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008848:	4b17      	ldr	r3, [pc, #92]	@ (80088a8 <xTaskIncrementTick+0x168>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800884e:	4915      	ldr	r1, [pc, #84]	@ (80088a4 <xTaskIncrementTick+0x164>)
 8008850:	4613      	mov	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	440b      	add	r3, r1
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d901      	bls.n	8008864 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008860:	2301      	movs	r3, #1
 8008862:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008864:	4b11      	ldr	r3, [pc, #68]	@ (80088ac <xTaskIncrementTick+0x16c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d007      	beq.n	800887c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800886c:	2301      	movs	r3, #1
 800886e:	617b      	str	r3, [r7, #20]
 8008870:	e004      	b.n	800887c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008872:	4b0f      	ldr	r3, [pc, #60]	@ (80088b0 <xTaskIncrementTick+0x170>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3301      	adds	r3, #1
 8008878:	4a0d      	ldr	r2, [pc, #52]	@ (80088b0 <xTaskIncrementTick+0x170>)
 800887a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800887c:	697b      	ldr	r3, [r7, #20]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20000610 	.word	0x20000610
 800888c:	200005ec 	.word	0x200005ec
 8008890:	200005a0 	.word	0x200005a0
 8008894:	200005a4 	.word	0x200005a4
 8008898:	20000600 	.word	0x20000600
 800889c:	20000608 	.word	0x20000608
 80088a0:	200005f0 	.word	0x200005f0
 80088a4:	200004ec 	.word	0x200004ec
 80088a8:	200004e8 	.word	0x200004e8
 80088ac:	200005fc 	.word	0x200005fc
 80088b0:	200005f8 	.word	0x200005f8

080088b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088ba:	4b2a      	ldr	r3, [pc, #168]	@ (8008964 <vTaskSwitchContext+0xb0>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088c2:	4b29      	ldr	r3, [pc, #164]	@ (8008968 <vTaskSwitchContext+0xb4>)
 80088c4:	2201      	movs	r2, #1
 80088c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088c8:	e045      	b.n	8008956 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80088ca:	4b27      	ldr	r3, [pc, #156]	@ (8008968 <vTaskSwitchContext+0xb4>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d0:	4b26      	ldr	r3, [pc, #152]	@ (800896c <vTaskSwitchContext+0xb8>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	fab3 f383 	clz	r3, r3
 80088dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80088de:	7afb      	ldrb	r3, [r7, #11]
 80088e0:	f1c3 031f 	rsb	r3, r3, #31
 80088e4:	617b      	str	r3, [r7, #20]
 80088e6:	4922      	ldr	r1, [pc, #136]	@ (8008970 <vTaskSwitchContext+0xbc>)
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	4613      	mov	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	440b      	add	r3, r1
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10b      	bne.n	8008912 <vTaskSwitchContext+0x5e>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	607b      	str	r3, [r7, #4]
}
 800890c:	bf00      	nop
 800890e:	bf00      	nop
 8008910:	e7fd      	b.n	800890e <vTaskSwitchContext+0x5a>
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	4613      	mov	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4a14      	ldr	r2, [pc, #80]	@ (8008970 <vTaskSwitchContext+0xbc>)
 800891e:	4413      	add	r3, r2
 8008920:	613b      	str	r3, [r7, #16]
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	685a      	ldr	r2, [r3, #4]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	605a      	str	r2, [r3, #4]
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	3308      	adds	r3, #8
 8008934:	429a      	cmp	r2, r3
 8008936:	d104      	bne.n	8008942 <vTaskSwitchContext+0x8e>
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	605a      	str	r2, [r3, #4]
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	4a0a      	ldr	r2, [pc, #40]	@ (8008974 <vTaskSwitchContext+0xc0>)
 800894a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800894c:	4b09      	ldr	r3, [pc, #36]	@ (8008974 <vTaskSwitchContext+0xc0>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	335c      	adds	r3, #92	@ 0x5c
 8008952:	4a09      	ldr	r2, [pc, #36]	@ (8008978 <vTaskSwitchContext+0xc4>)
 8008954:	6013      	str	r3, [r2, #0]
}
 8008956:	bf00      	nop
 8008958:	371c      	adds	r7, #28
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	20000610 	.word	0x20000610
 8008968:	200005fc 	.word	0x200005fc
 800896c:	200005f0 	.word	0x200005f0
 8008970:	200004ec 	.word	0x200004ec
 8008974:	200004e8 	.word	0x200004e8
 8008978:	2000001c 	.word	0x2000001c

0800897c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10b      	bne.n	80089a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	60fb      	str	r3, [r7, #12]
}
 800899e:	bf00      	nop
 80089a0:	bf00      	nop
 80089a2:	e7fd      	b.n	80089a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089a4:	4b07      	ldr	r3, [pc, #28]	@ (80089c4 <vTaskPlaceOnEventList+0x48>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3318      	adds	r3, #24
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7fe fef4 	bl	800779a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089b2:	2101      	movs	r1, #1
 80089b4:	6838      	ldr	r0, [r7, #0]
 80089b6:	f000 fb6d 	bl	8009094 <prvAddCurrentTaskToDelayedList>
}
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	200004e8 	.word	0x200004e8

080089c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10b      	bne.n	80089f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	60fb      	str	r3, [r7, #12]
}
 80089f0:	bf00      	nop
 80089f2:	bf00      	nop
 80089f4:	e7fd      	b.n	80089f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	3318      	adds	r3, #24
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fe ff06 	bl	800780c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a00:	4b1d      	ldr	r3, [pc, #116]	@ (8008a78 <xTaskRemoveFromEventList+0xb0>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d11c      	bne.n	8008a42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe fefd 	bl	800780c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a16:	2201      	movs	r2, #1
 8008a18:	409a      	lsls	r2, r3
 8008a1a:	4b18      	ldr	r3, [pc, #96]	@ (8008a7c <xTaskRemoveFromEventList+0xb4>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	4a16      	ldr	r2, [pc, #88]	@ (8008a7c <xTaskRemoveFromEventList+0xb4>)
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4a13      	ldr	r2, [pc, #76]	@ (8008a80 <xTaskRemoveFromEventList+0xb8>)
 8008a32:	441a      	add	r2, r3
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	3304      	adds	r3, #4
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	f7fe fe89 	bl	8007752 <vListInsertEnd>
 8008a40:	e005      	b.n	8008a4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	3318      	adds	r3, #24
 8008a46:	4619      	mov	r1, r3
 8008a48:	480e      	ldr	r0, [pc, #56]	@ (8008a84 <xTaskRemoveFromEventList+0xbc>)
 8008a4a:	f7fe fe82 	bl	8007752 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a52:	4b0d      	ldr	r3, [pc, #52]	@ (8008a88 <xTaskRemoveFromEventList+0xc0>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d905      	bls.n	8008a68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a60:	4b0a      	ldr	r3, [pc, #40]	@ (8008a8c <xTaskRemoveFromEventList+0xc4>)
 8008a62:	2201      	movs	r2, #1
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	e001      	b.n	8008a6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a6c:	697b      	ldr	r3, [r7, #20]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20000610 	.word	0x20000610
 8008a7c:	200005f0 	.word	0x200005f0
 8008a80:	200004ec 	.word	0x200004ec
 8008a84:	200005a8 	.word	0x200005a8
 8008a88:	200004e8 	.word	0x200004e8
 8008a8c:	200005fc 	.word	0x200005fc

08008a90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a98:	4b06      	ldr	r3, [pc, #24]	@ (8008ab4 <vTaskInternalSetTimeOutState+0x24>)
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008aa0:	4b05      	ldr	r3, [pc, #20]	@ (8008ab8 <vTaskInternalSetTimeOutState+0x28>)
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	605a      	str	r2, [r3, #4]
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	20000600 	.word	0x20000600
 8008ab8:	200005ec 	.word	0x200005ec

08008abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b088      	sub	sp, #32
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10b      	bne.n	8008ae4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	613b      	str	r3, [r7, #16]
}
 8008ade:	bf00      	nop
 8008ae0:	bf00      	nop
 8008ae2:	e7fd      	b.n	8008ae0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10b      	bne.n	8008b02 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	60fb      	str	r3, [r7, #12]
}
 8008afc:	bf00      	nop
 8008afe:	bf00      	nop
 8008b00:	e7fd      	b.n	8008afe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008b02:	f000 fc61 	bl	80093c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b06:	4b1d      	ldr	r3, [pc, #116]	@ (8008b7c <xTaskCheckForTimeOut+0xc0>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	69ba      	ldr	r2, [r7, #24]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1e:	d102      	bne.n	8008b26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b20:	2300      	movs	r3, #0
 8008b22:	61fb      	str	r3, [r7, #28]
 8008b24:	e023      	b.n	8008b6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	4b15      	ldr	r3, [pc, #84]	@ (8008b80 <xTaskCheckForTimeOut+0xc4>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d007      	beq.n	8008b42 <xTaskCheckForTimeOut+0x86>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d302      	bcc.n	8008b42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	61fb      	str	r3, [r7, #28]
 8008b40:	e015      	b.n	8008b6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d20b      	bcs.n	8008b64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	1ad2      	subs	r2, r2, r3
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff ff99 	bl	8008a90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	61fb      	str	r3, [r7, #28]
 8008b62:	e004      	b.n	8008b6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	2200      	movs	r2, #0
 8008b68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b6e:	f000 fc5d 	bl	800942c <vPortExitCritical>

	return xReturn;
 8008b72:	69fb      	ldr	r3, [r7, #28]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3720      	adds	r7, #32
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	200005ec 	.word	0x200005ec
 8008b80:	20000600 	.word	0x20000600

08008b84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b84:	b480      	push	{r7}
 8008b86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b88:	4b03      	ldr	r3, [pc, #12]	@ (8008b98 <vTaskMissedYield+0x14>)
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	601a      	str	r2, [r3, #0]
}
 8008b8e:	bf00      	nop
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	200005fc 	.word	0x200005fc

08008b9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ba4:	f000 f852 	bl	8008c4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ba8:	4b06      	ldr	r3, [pc, #24]	@ (8008bc4 <prvIdleTask+0x28>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d9f9      	bls.n	8008ba4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bb0:	4b05      	ldr	r3, [pc, #20]	@ (8008bc8 <prvIdleTask+0x2c>)
 8008bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bc0:	e7f0      	b.n	8008ba4 <prvIdleTask+0x8>
 8008bc2:	bf00      	nop
 8008bc4:	200004ec 	.word	0x200004ec
 8008bc8:	e000ed04 	.word	0xe000ed04

08008bcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	607b      	str	r3, [r7, #4]
 8008bd6:	e00c      	b.n	8008bf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	4413      	add	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4a12      	ldr	r2, [pc, #72]	@ (8008c2c <prvInitialiseTaskLists+0x60>)
 8008be4:	4413      	add	r3, r2
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe fd86 	bl	80076f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	607b      	str	r3, [r7, #4]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b06      	cmp	r3, #6
 8008bf6:	d9ef      	bls.n	8008bd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008bf8:	480d      	ldr	r0, [pc, #52]	@ (8008c30 <prvInitialiseTaskLists+0x64>)
 8008bfa:	f7fe fd7d 	bl	80076f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008bfe:	480d      	ldr	r0, [pc, #52]	@ (8008c34 <prvInitialiseTaskLists+0x68>)
 8008c00:	f7fe fd7a 	bl	80076f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c04:	480c      	ldr	r0, [pc, #48]	@ (8008c38 <prvInitialiseTaskLists+0x6c>)
 8008c06:	f7fe fd77 	bl	80076f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c0a:	480c      	ldr	r0, [pc, #48]	@ (8008c3c <prvInitialiseTaskLists+0x70>)
 8008c0c:	f7fe fd74 	bl	80076f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c10:	480b      	ldr	r0, [pc, #44]	@ (8008c40 <prvInitialiseTaskLists+0x74>)
 8008c12:	f7fe fd71 	bl	80076f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c16:	4b0b      	ldr	r3, [pc, #44]	@ (8008c44 <prvInitialiseTaskLists+0x78>)
 8008c18:	4a05      	ldr	r2, [pc, #20]	@ (8008c30 <prvInitialiseTaskLists+0x64>)
 8008c1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c48 <prvInitialiseTaskLists+0x7c>)
 8008c1e:	4a05      	ldr	r2, [pc, #20]	@ (8008c34 <prvInitialiseTaskLists+0x68>)
 8008c20:	601a      	str	r2, [r3, #0]
}
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	200004ec 	.word	0x200004ec
 8008c30:	20000578 	.word	0x20000578
 8008c34:	2000058c 	.word	0x2000058c
 8008c38:	200005a8 	.word	0x200005a8
 8008c3c:	200005bc 	.word	0x200005bc
 8008c40:	200005d4 	.word	0x200005d4
 8008c44:	200005a0 	.word	0x200005a0
 8008c48:	200005a4 	.word	0x200005a4

08008c4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c52:	e019      	b.n	8008c88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c54:	f000 fbb8 	bl	80093c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c58:	4b10      	ldr	r3, [pc, #64]	@ (8008c9c <prvCheckTasksWaitingTermination+0x50>)
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3304      	adds	r3, #4
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fe fdd1 	bl	800780c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca0 <prvCheckTasksWaitingTermination+0x54>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	4a0b      	ldr	r2, [pc, #44]	@ (8008ca0 <prvCheckTasksWaitingTermination+0x54>)
 8008c72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c74:	4b0b      	ldr	r3, [pc, #44]	@ (8008ca4 <prvCheckTasksWaitingTermination+0x58>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8008ca4 <prvCheckTasksWaitingTermination+0x58>)
 8008c7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c7e:	f000 fbd5 	bl	800942c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f810 	bl	8008ca8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c88:	4b06      	ldr	r3, [pc, #24]	@ (8008ca4 <prvCheckTasksWaitingTermination+0x58>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1e1      	bne.n	8008c54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c90:	bf00      	nop
 8008c92:	bf00      	nop
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	200005bc 	.word	0x200005bc
 8008ca0:	200005e8 	.word	0x200005e8
 8008ca4:	200005d0 	.word	0x200005d0

08008ca8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	335c      	adds	r3, #92	@ 0x5c
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f001 fc11 	bl	800a4dc <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 fd72 	bl	80097a8 <vPortFree>
			vPortFree( pxTCB );
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fd6f 	bl	80097a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
	...

08008cd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cda:	4b0c      	ldr	r3, [pc, #48]	@ (8008d0c <prvResetNextTaskUnblockTime+0x38>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d104      	bne.n	8008cee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8008d10 <prvResetNextTaskUnblockTime+0x3c>)
 8008ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008cec:	e008      	b.n	8008d00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cee:	4b07      	ldr	r3, [pc, #28]	@ (8008d0c <prvResetNextTaskUnblockTime+0x38>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	4a04      	ldr	r2, [pc, #16]	@ (8008d10 <prvResetNextTaskUnblockTime+0x3c>)
 8008cfe:	6013      	str	r3, [r2, #0]
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	200005a0 	.word	0x200005a0
 8008d10:	20000608 	.word	0x20000608

08008d14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008d48 <xTaskGetSchedulerState+0x34>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d102      	bne.n	8008d28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d22:	2301      	movs	r3, #1
 8008d24:	607b      	str	r3, [r7, #4]
 8008d26:	e008      	b.n	8008d3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d28:	4b08      	ldr	r3, [pc, #32]	@ (8008d4c <xTaskGetSchedulerState+0x38>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d102      	bne.n	8008d36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d30:	2302      	movs	r3, #2
 8008d32:	607b      	str	r3, [r7, #4]
 8008d34:	e001      	b.n	8008d3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d36:	2300      	movs	r3, #0
 8008d38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d3a:	687b      	ldr	r3, [r7, #4]
	}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	200005f4 	.word	0x200005f4
 8008d4c:	20000610 	.word	0x20000610

08008d50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d05e      	beq.n	8008e24 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d6a:	4b31      	ldr	r3, [pc, #196]	@ (8008e30 <xTaskPriorityInherit+0xe0>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d24e      	bcs.n	8008e12 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	db06      	blt.n	8008d8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8008e30 <xTaskPriorityInherit+0xe0>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d82:	f1c3 0207 	rsb	r2, r3, #7
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	6959      	ldr	r1, [r3, #20]
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d92:	4613      	mov	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4a26      	ldr	r2, [pc, #152]	@ (8008e34 <xTaskPriorityInherit+0xe4>)
 8008d9c:	4413      	add	r3, r2
 8008d9e:	4299      	cmp	r1, r3
 8008da0:	d12f      	bne.n	8008e02 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	3304      	adds	r3, #4
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe fd30 	bl	800780c <uxListRemove>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10a      	bne.n	8008dc8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db6:	2201      	movs	r2, #1
 8008db8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbc:	43da      	mvns	r2, r3
 8008dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8008e38 <xTaskPriorityInherit+0xe8>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8008e38 <xTaskPriorityInherit+0xe8>)
 8008dc6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008dc8:	4b19      	ldr	r3, [pc, #100]	@ (8008e30 <xTaskPriorityInherit+0xe0>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	409a      	lsls	r2, r3
 8008dda:	4b17      	ldr	r3, [pc, #92]	@ (8008e38 <xTaskPriorityInherit+0xe8>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	4a15      	ldr	r2, [pc, #84]	@ (8008e38 <xTaskPriorityInherit+0xe8>)
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de8:	4613      	mov	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4a10      	ldr	r2, [pc, #64]	@ (8008e34 <xTaskPriorityInherit+0xe4>)
 8008df2:	441a      	add	r2, r3
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	3304      	adds	r3, #4
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	f7fe fca9 	bl	8007752 <vListInsertEnd>
 8008e00:	e004      	b.n	8008e0c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e02:	4b0b      	ldr	r3, [pc, #44]	@ (8008e30 <xTaskPriorityInherit+0xe0>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	e008      	b.n	8008e24 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e16:	4b06      	ldr	r3, [pc, #24]	@ (8008e30 <xTaskPriorityInherit+0xe0>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d201      	bcs.n	8008e24 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008e20:	2301      	movs	r3, #1
 8008e22:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e24:	68fb      	ldr	r3, [r7, #12]
	}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	200004e8 	.word	0x200004e8
 8008e34:	200004ec 	.word	0x200004ec
 8008e38:	200005f0 	.word	0x200005f0

08008e3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d070      	beq.n	8008f34 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e52:	4b3b      	ldr	r3, [pc, #236]	@ (8008f40 <xTaskPriorityDisinherit+0x104>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d00b      	beq.n	8008e74 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	60fb      	str	r3, [r7, #12]
}
 8008e6e:	bf00      	nop
 8008e70:	bf00      	nop
 8008e72:	e7fd      	b.n	8008e70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10b      	bne.n	8008e94 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	60bb      	str	r3, [r7, #8]
}
 8008e8e:	bf00      	nop
 8008e90:	bf00      	nop
 8008e92:	e7fd      	b.n	8008e90 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e98:	1e5a      	subs	r2, r3, #1
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	659a      	str	r2, [r3, #88]	@ 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d044      	beq.n	8008f34 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d140      	bne.n	8008f34 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe fca8 	bl	800780c <uxListRemove>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d115      	bne.n	8008eee <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ec6:	491f      	ldr	r1, [pc, #124]	@ (8008f44 <xTaskPriorityDisinherit+0x108>)
 8008ec8:	4613      	mov	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	440b      	add	r3, r1
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10a      	bne.n	8008eee <xTaskPriorityDisinherit+0xb2>
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008edc:	2201      	movs	r2, #1
 8008ede:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee2:	43da      	mvns	r2, r3
 8008ee4:	4b18      	ldr	r3, [pc, #96]	@ (8008f48 <xTaskPriorityDisinherit+0x10c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4013      	ands	r3, r2
 8008eea:	4a17      	ldr	r2, [pc, #92]	@ (8008f48 <xTaskPriorityDisinherit+0x10c>)
 8008eec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efa:	f1c3 0207 	rsb	r2, r3, #7
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f06:	2201      	movs	r2, #1
 8008f08:	409a      	lsls	r2, r3
 8008f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008f48 <xTaskPriorityDisinherit+0x10c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	4a0d      	ldr	r2, [pc, #52]	@ (8008f48 <xTaskPriorityDisinherit+0x10c>)
 8008f12:	6013      	str	r3, [r2, #0]
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f18:	4613      	mov	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4413      	add	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4a08      	ldr	r2, [pc, #32]	@ (8008f44 <xTaskPriorityDisinherit+0x108>)
 8008f22:	441a      	add	r2, r3
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	3304      	adds	r3, #4
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f7fe fc11 	bl	8007752 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f30:	2301      	movs	r3, #1
 8008f32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f34:	697b      	ldr	r3, [r7, #20]
	}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	200004e8 	.word	0x200004e8
 8008f44:	200004ec 	.word	0x200004ec
 8008f48:	200005f0 	.word	0x200005f0

08008f4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b088      	sub	sp, #32
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d079      	beq.n	8009058 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10b      	bne.n	8008f84 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	60fb      	str	r3, [r7, #12]
}
 8008f7e:	bf00      	nop
 8008f80:	bf00      	nop
 8008f82:	e7fd      	b.n	8008f80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d902      	bls.n	8008f94 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	61fb      	str	r3, [r7, #28]
 8008f92:	e002      	b.n	8008f9a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f98:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9e:	69fa      	ldr	r2, [r7, #28]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d059      	beq.n	8009058 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d154      	bne.n	8009058 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008fae:	4b2c      	ldr	r3, [pc, #176]	@ (8009060 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d10b      	bne.n	8008fd0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	60bb      	str	r3, [r7, #8]
}
 8008fca:	bf00      	nop
 8008fcc:	bf00      	nop
 8008fce:	e7fd      	b.n	8008fcc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	69fa      	ldr	r2, [r7, #28]
 8008fda:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	db04      	blt.n	8008fee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	f1c3 0207 	rsb	r2, r3, #7
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	6959      	ldr	r1, [r3, #20]
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4a19      	ldr	r2, [pc, #100]	@ (8009064 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008ffe:	4413      	add	r3, r2
 8009000:	4299      	cmp	r1, r3
 8009002:	d129      	bne.n	8009058 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	3304      	adds	r3, #4
 8009008:	4618      	mov	r0, r3
 800900a:	f7fe fbff 	bl	800780c <uxListRemove>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009018:	2201      	movs	r2, #1
 800901a:	fa02 f303 	lsl.w	r3, r2, r3
 800901e:	43da      	mvns	r2, r3
 8009020:	4b11      	ldr	r3, [pc, #68]	@ (8009068 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4013      	ands	r3, r2
 8009026:	4a10      	ldr	r2, [pc, #64]	@ (8009068 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009028:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902e:	2201      	movs	r2, #1
 8009030:	409a      	lsls	r2, r3
 8009032:	4b0d      	ldr	r3, [pc, #52]	@ (8009068 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4313      	orrs	r3, r2
 8009038:	4a0b      	ldr	r2, [pc, #44]	@ (8009068 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009040:	4613      	mov	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4413      	add	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4a06      	ldr	r2, [pc, #24]	@ (8009064 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800904a:	441a      	add	r2, r3
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	3304      	adds	r3, #4
 8009050:	4619      	mov	r1, r3
 8009052:	4610      	mov	r0, r2
 8009054:	f7fe fb7d 	bl	8007752 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009058:	bf00      	nop
 800905a:	3720      	adds	r7, #32
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	200004e8 	.word	0x200004e8
 8009064:	200004ec 	.word	0x200004ec
 8009068:	200005f0 	.word	0x200005f0

0800906c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800906c:	b480      	push	{r7}
 800906e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009070:	4b07      	ldr	r3, [pc, #28]	@ (8009090 <pvTaskIncrementMutexHeldCount+0x24>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d004      	beq.n	8009082 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009078:	4b05      	ldr	r3, [pc, #20]	@ (8009090 <pvTaskIncrementMutexHeldCount+0x24>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800907e:	3201      	adds	r2, #1
 8009080:	659a      	str	r2, [r3, #88]	@ 0x58
		}

		return pxCurrentTCB;
 8009082:	4b03      	ldr	r3, [pc, #12]	@ (8009090 <pvTaskIncrementMutexHeldCount+0x24>)
 8009084:	681b      	ldr	r3, [r3, #0]
	}
 8009086:	4618      	mov	r0, r3
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	200004e8 	.word	0x200004e8

08009094 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800909e:	4b29      	ldr	r3, [pc, #164]	@ (8009144 <prvAddCurrentTaskToDelayedList+0xb0>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090a4:	4b28      	ldr	r3, [pc, #160]	@ (8009148 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3304      	adds	r3, #4
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe fbae 	bl	800780c <uxListRemove>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10b      	bne.n	80090ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80090b6:	4b24      	ldr	r3, [pc, #144]	@ (8009148 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090bc:	2201      	movs	r2, #1
 80090be:	fa02 f303 	lsl.w	r3, r2, r3
 80090c2:	43da      	mvns	r2, r3
 80090c4:	4b21      	ldr	r3, [pc, #132]	@ (800914c <prvAddCurrentTaskToDelayedList+0xb8>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4013      	ands	r3, r2
 80090ca:	4a20      	ldr	r2, [pc, #128]	@ (800914c <prvAddCurrentTaskToDelayedList+0xb8>)
 80090cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d4:	d10a      	bne.n	80090ec <prvAddCurrentTaskToDelayedList+0x58>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d007      	beq.n	80090ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009148 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3304      	adds	r3, #4
 80090e2:	4619      	mov	r1, r3
 80090e4:	481a      	ldr	r0, [pc, #104]	@ (8009150 <prvAddCurrentTaskToDelayedList+0xbc>)
 80090e6:	f7fe fb34 	bl	8007752 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090ea:	e026      	b.n	800913a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4413      	add	r3, r2
 80090f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090f4:	4b14      	ldr	r3, [pc, #80]	@ (8009148 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	429a      	cmp	r2, r3
 8009102:	d209      	bcs.n	8009118 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009104:	4b13      	ldr	r3, [pc, #76]	@ (8009154 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	4b0f      	ldr	r3, [pc, #60]	@ (8009148 <prvAddCurrentTaskToDelayedList+0xb4>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3304      	adds	r3, #4
 800910e:	4619      	mov	r1, r3
 8009110:	4610      	mov	r0, r2
 8009112:	f7fe fb42 	bl	800779a <vListInsert>
}
 8009116:	e010      	b.n	800913a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009118:	4b0f      	ldr	r3, [pc, #60]	@ (8009158 <prvAddCurrentTaskToDelayedList+0xc4>)
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	4b0a      	ldr	r3, [pc, #40]	@ (8009148 <prvAddCurrentTaskToDelayedList+0xb4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3304      	adds	r3, #4
 8009122:	4619      	mov	r1, r3
 8009124:	4610      	mov	r0, r2
 8009126:	f7fe fb38 	bl	800779a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800912a:	4b0c      	ldr	r3, [pc, #48]	@ (800915c <prvAddCurrentTaskToDelayedList+0xc8>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	429a      	cmp	r2, r3
 8009132:	d202      	bcs.n	800913a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009134:	4a09      	ldr	r2, [pc, #36]	@ (800915c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	6013      	str	r3, [r2, #0]
}
 800913a:	bf00      	nop
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	200005ec 	.word	0x200005ec
 8009148:	200004e8 	.word	0x200004e8
 800914c:	200005f0 	.word	0x200005f0
 8009150:	200005d4 	.word	0x200005d4
 8009154:	200005a4 	.word	0x200005a4
 8009158:	200005a0 	.word	0x200005a0
 800915c:	20000608 	.word	0x20000608

08009160 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3b04      	subs	r3, #4
 8009170:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3b04      	subs	r3, #4
 800917e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	f023 0201 	bic.w	r2, r3, #1
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3b04      	subs	r3, #4
 800918e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009190:	4a0c      	ldr	r2, [pc, #48]	@ (80091c4 <pxPortInitialiseStack+0x64>)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3b14      	subs	r3, #20
 800919a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3b04      	subs	r3, #4
 80091a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f06f 0202 	mvn.w	r2, #2
 80091ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3b20      	subs	r3, #32
 80091b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091b6:	68fb      	ldr	r3, [r7, #12]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	080091c9 	.word	0x080091c9

080091c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091d2:	4b13      	ldr	r3, [pc, #76]	@ (8009220 <prvTaskExitError+0x58>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091da:	d00b      	beq.n	80091f4 <prvTaskExitError+0x2c>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e0:	f383 8811 	msr	BASEPRI, r3
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	60fb      	str	r3, [r7, #12]
}
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	e7fd      	b.n	80091f0 <prvTaskExitError+0x28>
	__asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	60bb      	str	r3, [r7, #8]
}
 8009206:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009208:	bf00      	nop
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d0fc      	beq.n	800920a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009210:	bf00      	nop
 8009212:	bf00      	nop
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	2000000c 	.word	0x2000000c
	...

08009230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009230:	4b07      	ldr	r3, [pc, #28]	@ (8009250 <pxCurrentTCBConst2>)
 8009232:	6819      	ldr	r1, [r3, #0]
 8009234:	6808      	ldr	r0, [r1, #0]
 8009236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923a:	f380 8809 	msr	PSP, r0
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f04f 0000 	mov.w	r0, #0
 8009246:	f380 8811 	msr	BASEPRI, r0
 800924a:	4770      	bx	lr
 800924c:	f3af 8000 	nop.w

08009250 <pxCurrentTCBConst2>:
 8009250:	200004e8 	.word	0x200004e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009254:	bf00      	nop
 8009256:	bf00      	nop

08009258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009258:	4808      	ldr	r0, [pc, #32]	@ (800927c <prvPortStartFirstTask+0x24>)
 800925a:	6800      	ldr	r0, [r0, #0]
 800925c:	6800      	ldr	r0, [r0, #0]
 800925e:	f380 8808 	msr	MSP, r0
 8009262:	f04f 0000 	mov.w	r0, #0
 8009266:	f380 8814 	msr	CONTROL, r0
 800926a:	b662      	cpsie	i
 800926c:	b661      	cpsie	f
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	df00      	svc	0
 8009278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800927a:	bf00      	nop
 800927c:	e000ed08 	.word	0xe000ed08

08009280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009286:	4b47      	ldr	r3, [pc, #284]	@ (80093a4 <xPortStartScheduler+0x124>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a47      	ldr	r2, [pc, #284]	@ (80093a8 <xPortStartScheduler+0x128>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d10b      	bne.n	80092a8 <xPortStartScheduler+0x28>
	__asm volatile
 8009290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	613b      	str	r3, [r7, #16]
}
 80092a2:	bf00      	nop
 80092a4:	bf00      	nop
 80092a6:	e7fd      	b.n	80092a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80092a8:	4b3e      	ldr	r3, [pc, #248]	@ (80093a4 <xPortStartScheduler+0x124>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a3f      	ldr	r2, [pc, #252]	@ (80093ac <xPortStartScheduler+0x12c>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d10b      	bne.n	80092ca <xPortStartScheduler+0x4a>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	60fb      	str	r3, [r7, #12]
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop
 80092c8:	e7fd      	b.n	80092c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092ca:	4b39      	ldr	r3, [pc, #228]	@ (80093b0 <xPortStartScheduler+0x130>)
 80092cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	22ff      	movs	r2, #255	@ 0xff
 80092da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	4b31      	ldr	r3, [pc, #196]	@ (80093b4 <xPortStartScheduler+0x134>)
 80092f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092f2:	4b31      	ldr	r3, [pc, #196]	@ (80093b8 <xPortStartScheduler+0x138>)
 80092f4:	2207      	movs	r2, #7
 80092f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092f8:	e009      	b.n	800930e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80092fa:	4b2f      	ldr	r3, [pc, #188]	@ (80093b8 <xPortStartScheduler+0x138>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3b01      	subs	r3, #1
 8009300:	4a2d      	ldr	r2, [pc, #180]	@ (80093b8 <xPortStartScheduler+0x138>)
 8009302:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009304:	78fb      	ldrb	r3, [r7, #3]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	b2db      	uxtb	r3, r3
 800930c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800930e:	78fb      	ldrb	r3, [r7, #3]
 8009310:	b2db      	uxtb	r3, r3
 8009312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009316:	2b80      	cmp	r3, #128	@ 0x80
 8009318:	d0ef      	beq.n	80092fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800931a:	4b27      	ldr	r3, [pc, #156]	@ (80093b8 <xPortStartScheduler+0x138>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f1c3 0307 	rsb	r3, r3, #7
 8009322:	2b04      	cmp	r3, #4
 8009324:	d00b      	beq.n	800933e <xPortStartScheduler+0xbe>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	60bb      	str	r3, [r7, #8]
}
 8009338:	bf00      	nop
 800933a:	bf00      	nop
 800933c:	e7fd      	b.n	800933a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800933e:	4b1e      	ldr	r3, [pc, #120]	@ (80093b8 <xPortStartScheduler+0x138>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	021b      	lsls	r3, r3, #8
 8009344:	4a1c      	ldr	r2, [pc, #112]	@ (80093b8 <xPortStartScheduler+0x138>)
 8009346:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009348:	4b1b      	ldr	r3, [pc, #108]	@ (80093b8 <xPortStartScheduler+0x138>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009350:	4a19      	ldr	r2, [pc, #100]	@ (80093b8 <xPortStartScheduler+0x138>)
 8009352:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	b2da      	uxtb	r2, r3
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800935c:	4b17      	ldr	r3, [pc, #92]	@ (80093bc <xPortStartScheduler+0x13c>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a16      	ldr	r2, [pc, #88]	@ (80093bc <xPortStartScheduler+0x13c>)
 8009362:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009366:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009368:	4b14      	ldr	r3, [pc, #80]	@ (80093bc <xPortStartScheduler+0x13c>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a13      	ldr	r2, [pc, #76]	@ (80093bc <xPortStartScheduler+0x13c>)
 800936e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009372:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009374:	f000 f8da 	bl	800952c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009378:	4b11      	ldr	r3, [pc, #68]	@ (80093c0 <xPortStartScheduler+0x140>)
 800937a:	2200      	movs	r2, #0
 800937c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800937e:	f000 f8f9 	bl	8009574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009382:	4b10      	ldr	r3, [pc, #64]	@ (80093c4 <xPortStartScheduler+0x144>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a0f      	ldr	r2, [pc, #60]	@ (80093c4 <xPortStartScheduler+0x144>)
 8009388:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800938c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800938e:	f7ff ff63 	bl	8009258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009392:	f7ff fa8f 	bl	80088b4 <vTaskSwitchContext>
	prvTaskExitError();
 8009396:	f7ff ff17 	bl	80091c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	e000ed00 	.word	0xe000ed00
 80093a8:	410fc271 	.word	0x410fc271
 80093ac:	410fc270 	.word	0x410fc270
 80093b0:	e000e400 	.word	0xe000e400
 80093b4:	20000614 	.word	0x20000614
 80093b8:	20000618 	.word	0x20000618
 80093bc:	e000ed20 	.word	0xe000ed20
 80093c0:	2000000c 	.word	0x2000000c
 80093c4:	e000ef34 	.word	0xe000ef34

080093c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	607b      	str	r3, [r7, #4]
}
 80093e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093e2:	4b10      	ldr	r3, [pc, #64]	@ (8009424 <vPortEnterCritical+0x5c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3301      	adds	r3, #1
 80093e8:	4a0e      	ldr	r2, [pc, #56]	@ (8009424 <vPortEnterCritical+0x5c>)
 80093ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009424 <vPortEnterCritical+0x5c>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d110      	bne.n	8009416 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009428 <vPortEnterCritical+0x60>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00b      	beq.n	8009416 <vPortEnterCritical+0x4e>
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	603b      	str	r3, [r7, #0]
}
 8009410:	bf00      	nop
 8009412:	bf00      	nop
 8009414:	e7fd      	b.n	8009412 <vPortEnterCritical+0x4a>
	}
}
 8009416:	bf00      	nop
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	2000000c 	.word	0x2000000c
 8009428:	e000ed04 	.word	0xe000ed04

0800942c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009432:	4b12      	ldr	r3, [pc, #72]	@ (800947c <vPortExitCritical+0x50>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10b      	bne.n	8009452 <vPortExitCritical+0x26>
	__asm volatile
 800943a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	607b      	str	r3, [r7, #4]
}
 800944c:	bf00      	nop
 800944e:	bf00      	nop
 8009450:	e7fd      	b.n	800944e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009452:	4b0a      	ldr	r3, [pc, #40]	@ (800947c <vPortExitCritical+0x50>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3b01      	subs	r3, #1
 8009458:	4a08      	ldr	r2, [pc, #32]	@ (800947c <vPortExitCritical+0x50>)
 800945a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800945c:	4b07      	ldr	r3, [pc, #28]	@ (800947c <vPortExitCritical+0x50>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d105      	bne.n	8009470 <vPortExitCritical+0x44>
 8009464:	2300      	movs	r3, #0
 8009466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	f383 8811 	msr	BASEPRI, r3
}
 800946e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr
 800947c:	2000000c 	.word	0x2000000c

08009480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009480:	f3ef 8009 	mrs	r0, PSP
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	4b15      	ldr	r3, [pc, #84]	@ (80094e0 <pxCurrentTCBConst>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	f01e 0f10 	tst.w	lr, #16
 8009490:	bf08      	it	eq
 8009492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949a:	6010      	str	r0, [r2, #0]
 800949c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80094a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80094a4:	f380 8811 	msr	BASEPRI, r0
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f7ff fa00 	bl	80088b4 <vTaskSwitchContext>
 80094b4:	f04f 0000 	mov.w	r0, #0
 80094b8:	f380 8811 	msr	BASEPRI, r0
 80094bc:	bc09      	pop	{r0, r3}
 80094be:	6819      	ldr	r1, [r3, #0]
 80094c0:	6808      	ldr	r0, [r1, #0]
 80094c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c6:	f01e 0f10 	tst.w	lr, #16
 80094ca:	bf08      	it	eq
 80094cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80094d0:	f380 8809 	msr	PSP, r0
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	f3af 8000 	nop.w

080094e0 <pxCurrentTCBConst>:
 80094e0:	200004e8 	.word	0x200004e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094e4:	bf00      	nop
 80094e6:	bf00      	nop

080094e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	607b      	str	r3, [r7, #4]
}
 8009500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009502:	f7ff f91d 	bl	8008740 <xTaskIncrementTick>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d003      	beq.n	8009514 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800950c:	4b06      	ldr	r3, [pc, #24]	@ (8009528 <xPortSysTickHandler+0x40>)
 800950e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	2300      	movs	r3, #0
 8009516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	f383 8811 	msr	BASEPRI, r3
}
 800951e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009520:	bf00      	nop
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	e000ed04 	.word	0xe000ed04

0800952c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800952c:	b480      	push	{r7}
 800952e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009530:	4b0b      	ldr	r3, [pc, #44]	@ (8009560 <vPortSetupTimerInterrupt+0x34>)
 8009532:	2200      	movs	r2, #0
 8009534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009536:	4b0b      	ldr	r3, [pc, #44]	@ (8009564 <vPortSetupTimerInterrupt+0x38>)
 8009538:	2200      	movs	r2, #0
 800953a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800953c:	4b0a      	ldr	r3, [pc, #40]	@ (8009568 <vPortSetupTimerInterrupt+0x3c>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a0a      	ldr	r2, [pc, #40]	@ (800956c <vPortSetupTimerInterrupt+0x40>)
 8009542:	fba2 2303 	umull	r2, r3, r2, r3
 8009546:	099b      	lsrs	r3, r3, #6
 8009548:	4a09      	ldr	r2, [pc, #36]	@ (8009570 <vPortSetupTimerInterrupt+0x44>)
 800954a:	3b01      	subs	r3, #1
 800954c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800954e:	4b04      	ldr	r3, [pc, #16]	@ (8009560 <vPortSetupTimerInterrupt+0x34>)
 8009550:	2207      	movs	r2, #7
 8009552:	601a      	str	r2, [r3, #0]
}
 8009554:	bf00      	nop
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	e000e010 	.word	0xe000e010
 8009564:	e000e018 	.word	0xe000e018
 8009568:	20000000 	.word	0x20000000
 800956c:	10624dd3 	.word	0x10624dd3
 8009570:	e000e014 	.word	0xe000e014

08009574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009574:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009584 <vPortEnableVFP+0x10>
 8009578:	6801      	ldr	r1, [r0, #0]
 800957a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800957e:	6001      	str	r1, [r0, #0]
 8009580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009582:	bf00      	nop
 8009584:	e000ed88 	.word	0xe000ed88

08009588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800958e:	f3ef 8305 	mrs	r3, IPSR
 8009592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2b0f      	cmp	r3, #15
 8009598:	d915      	bls.n	80095c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800959a:	4a18      	ldr	r2, [pc, #96]	@ (80095fc <vPortValidateInterruptPriority+0x74>)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4413      	add	r3, r2
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80095a4:	4b16      	ldr	r3, [pc, #88]	@ (8009600 <vPortValidateInterruptPriority+0x78>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	7afa      	ldrb	r2, [r7, #11]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d20b      	bcs.n	80095c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	607b      	str	r3, [r7, #4]
}
 80095c0:	bf00      	nop
 80095c2:	bf00      	nop
 80095c4:	e7fd      	b.n	80095c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80095c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009604 <vPortValidateInterruptPriority+0x7c>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80095ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009608 <vPortValidateInterruptPriority+0x80>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d90b      	bls.n	80095ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80095d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095da:	f383 8811 	msr	BASEPRI, r3
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	f3bf 8f4f 	dsb	sy
 80095e6:	603b      	str	r3, [r7, #0]
}
 80095e8:	bf00      	nop
 80095ea:	bf00      	nop
 80095ec:	e7fd      	b.n	80095ea <vPortValidateInterruptPriority+0x62>
	}
 80095ee:	bf00      	nop
 80095f0:	3714      	adds	r7, #20
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	e000e3f0 	.word	0xe000e3f0
 8009600:	20000614 	.word	0x20000614
 8009604:	e000ed0c 	.word	0xe000ed0c
 8009608:	20000618 	.word	0x20000618

0800960c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b08a      	sub	sp, #40	@ 0x28
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009614:	2300      	movs	r3, #0
 8009616:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009618:	f7fe ffe6 	bl	80085e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800961c:	4b5c      	ldr	r3, [pc, #368]	@ (8009790 <pvPortMalloc+0x184>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009624:	f000 f924 	bl	8009870 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009628:	4b5a      	ldr	r3, [pc, #360]	@ (8009794 <pvPortMalloc+0x188>)
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4013      	ands	r3, r2
 8009630:	2b00      	cmp	r3, #0
 8009632:	f040 8095 	bne.w	8009760 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d01e      	beq.n	800967a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800963c:	2208      	movs	r2, #8
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4413      	add	r3, r2
 8009642:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	2b00      	cmp	r3, #0
 800964c:	d015      	beq.n	800967a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f023 0307 	bic.w	r3, r3, #7
 8009654:	3308      	adds	r3, #8
 8009656:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f003 0307 	and.w	r3, r3, #7
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00b      	beq.n	800967a <pvPortMalloc+0x6e>
	__asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	617b      	str	r3, [r7, #20]
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop
 8009678:	e7fd      	b.n	8009676 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d06f      	beq.n	8009760 <pvPortMalloc+0x154>
 8009680:	4b45      	ldr	r3, [pc, #276]	@ (8009798 <pvPortMalloc+0x18c>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	429a      	cmp	r2, r3
 8009688:	d86a      	bhi.n	8009760 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800968a:	4b44      	ldr	r3, [pc, #272]	@ (800979c <pvPortMalloc+0x190>)
 800968c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800968e:	4b43      	ldr	r3, [pc, #268]	@ (800979c <pvPortMalloc+0x190>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009694:	e004      	b.n	80096a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009698:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800969a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d903      	bls.n	80096b2 <pvPortMalloc+0xa6>
 80096aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1f1      	bne.n	8009696 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096b2:	4b37      	ldr	r3, [pc, #220]	@ (8009790 <pvPortMalloc+0x184>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d051      	beq.n	8009760 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2208      	movs	r2, #8
 80096c2:	4413      	add	r3, r2
 80096c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	6a3b      	ldr	r3, [r7, #32]
 80096cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	1ad2      	subs	r2, r2, r3
 80096d6:	2308      	movs	r3, #8
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	429a      	cmp	r2, r3
 80096dc:	d920      	bls.n	8009720 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4413      	add	r3, r2
 80096e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	f003 0307 	and.w	r3, r3, #7
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00b      	beq.n	8009708 <pvPortMalloc+0xfc>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	613b      	str	r3, [r7, #16]
}
 8009702:	bf00      	nop
 8009704:	bf00      	nop
 8009706:	e7fd      	b.n	8009704 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	1ad2      	subs	r2, r2, r3
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800971a:	69b8      	ldr	r0, [r7, #24]
 800971c:	f000 f90a 	bl	8009934 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009720:	4b1d      	ldr	r3, [pc, #116]	@ (8009798 <pvPortMalloc+0x18c>)
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	4a1b      	ldr	r2, [pc, #108]	@ (8009798 <pvPortMalloc+0x18c>)
 800972c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800972e:	4b1a      	ldr	r3, [pc, #104]	@ (8009798 <pvPortMalloc+0x18c>)
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	4b1b      	ldr	r3, [pc, #108]	@ (80097a0 <pvPortMalloc+0x194>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	429a      	cmp	r2, r3
 8009738:	d203      	bcs.n	8009742 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800973a:	4b17      	ldr	r3, [pc, #92]	@ (8009798 <pvPortMalloc+0x18c>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a18      	ldr	r2, [pc, #96]	@ (80097a0 <pvPortMalloc+0x194>)
 8009740:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	4b13      	ldr	r3, [pc, #76]	@ (8009794 <pvPortMalloc+0x188>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	431a      	orrs	r2, r3
 800974c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009756:	4b13      	ldr	r3, [pc, #76]	@ (80097a4 <pvPortMalloc+0x198>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	3301      	adds	r3, #1
 800975c:	4a11      	ldr	r2, [pc, #68]	@ (80097a4 <pvPortMalloc+0x198>)
 800975e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009760:	f7fe ff50 	bl	8008604 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	f003 0307 	and.w	r3, r3, #7
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00b      	beq.n	8009786 <pvPortMalloc+0x17a>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	60fb      	str	r3, [r7, #12]
}
 8009780:	bf00      	nop
 8009782:	bf00      	nop
 8009784:	e7fd      	b.n	8009782 <pvPortMalloc+0x176>
	return pvReturn;
 8009786:	69fb      	ldr	r3, [r7, #28]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3728      	adds	r7, #40	@ 0x28
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	20004624 	.word	0x20004624
 8009794:	20004638 	.word	0x20004638
 8009798:	20004628 	.word	0x20004628
 800979c:	2000461c 	.word	0x2000461c
 80097a0:	2000462c 	.word	0x2000462c
 80097a4:	20004630 	.word	0x20004630

080097a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d04f      	beq.n	800985a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097ba:	2308      	movs	r3, #8
 80097bc:	425b      	negs	r3, r3
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	4413      	add	r3, r2
 80097c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	4b25      	ldr	r3, [pc, #148]	@ (8009864 <vPortFree+0xbc>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4013      	ands	r3, r2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10b      	bne.n	80097ee <vPortFree+0x46>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	60fb      	str	r3, [r7, #12]
}
 80097e8:	bf00      	nop
 80097ea:	bf00      	nop
 80097ec:	e7fd      	b.n	80097ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00b      	beq.n	800980e <vPortFree+0x66>
	__asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	60bb      	str	r3, [r7, #8]
}
 8009808:	bf00      	nop
 800980a:	bf00      	nop
 800980c:	e7fd      	b.n	800980a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	685a      	ldr	r2, [r3, #4]
 8009812:	4b14      	ldr	r3, [pc, #80]	@ (8009864 <vPortFree+0xbc>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4013      	ands	r3, r2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d01e      	beq.n	800985a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d11a      	bne.n	800985a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	4b0e      	ldr	r3, [pc, #56]	@ (8009864 <vPortFree+0xbc>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	43db      	mvns	r3, r3
 800982e:	401a      	ands	r2, r3
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009834:	f7fe fed8 	bl	80085e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	4b0a      	ldr	r3, [pc, #40]	@ (8009868 <vPortFree+0xc0>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4413      	add	r3, r2
 8009842:	4a09      	ldr	r2, [pc, #36]	@ (8009868 <vPortFree+0xc0>)
 8009844:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009846:	6938      	ldr	r0, [r7, #16]
 8009848:	f000 f874 	bl	8009934 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800984c:	4b07      	ldr	r3, [pc, #28]	@ (800986c <vPortFree+0xc4>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	3301      	adds	r3, #1
 8009852:	4a06      	ldr	r2, [pc, #24]	@ (800986c <vPortFree+0xc4>)
 8009854:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009856:	f7fe fed5 	bl	8008604 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800985a:	bf00      	nop
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	20004638 	.word	0x20004638
 8009868:	20004628 	.word	0x20004628
 800986c:	20004634 	.word	0x20004634

08009870 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009876:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800987a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800987c:	4b27      	ldr	r3, [pc, #156]	@ (800991c <prvHeapInit+0xac>)
 800987e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f003 0307 	and.w	r3, r3, #7
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00c      	beq.n	80098a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3307      	adds	r3, #7
 800988e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f023 0307 	bic.w	r3, r3, #7
 8009896:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	4a1f      	ldr	r2, [pc, #124]	@ (800991c <prvHeapInit+0xac>)
 80098a0:	4413      	add	r3, r2
 80098a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009920 <prvHeapInit+0xb0>)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098ae:	4b1c      	ldr	r3, [pc, #112]	@ (8009920 <prvHeapInit+0xb0>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	4413      	add	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098bc:	2208      	movs	r2, #8
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	1a9b      	subs	r3, r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f023 0307 	bic.w	r3, r3, #7
 80098ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4a15      	ldr	r2, [pc, #84]	@ (8009924 <prvHeapInit+0xb4>)
 80098d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80098d2:	4b14      	ldr	r3, [pc, #80]	@ (8009924 <prvHeapInit+0xb4>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2200      	movs	r2, #0
 80098d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098da:	4b12      	ldr	r3, [pc, #72]	@ (8009924 <prvHeapInit+0xb4>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2200      	movs	r2, #0
 80098e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	1ad2      	subs	r2, r2, r3
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009924 <prvHeapInit+0xb4>)
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	4a0a      	ldr	r2, [pc, #40]	@ (8009928 <prvHeapInit+0xb8>)
 80098fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	4a09      	ldr	r2, [pc, #36]	@ (800992c <prvHeapInit+0xbc>)
 8009906:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009908:	4b09      	ldr	r3, [pc, #36]	@ (8009930 <prvHeapInit+0xc0>)
 800990a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800990e:	601a      	str	r2, [r3, #0]
}
 8009910:	bf00      	nop
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	2000061c 	.word	0x2000061c
 8009920:	2000461c 	.word	0x2000461c
 8009924:	20004624 	.word	0x20004624
 8009928:	2000462c 	.word	0x2000462c
 800992c:	20004628 	.word	0x20004628
 8009930:	20004638 	.word	0x20004638

08009934 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800993c:	4b28      	ldr	r3, [pc, #160]	@ (80099e0 <prvInsertBlockIntoFreeList+0xac>)
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	e002      	b.n	8009948 <prvInsertBlockIntoFreeList+0x14>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	60fb      	str	r3, [r7, #12]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	429a      	cmp	r2, r3
 8009950:	d8f7      	bhi.n	8009942 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	4413      	add	r3, r2
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	429a      	cmp	r2, r3
 8009962:	d108      	bne.n	8009976 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	441a      	add	r2, r3
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	441a      	add	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	429a      	cmp	r2, r3
 8009988:	d118      	bne.n	80099bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	4b15      	ldr	r3, [pc, #84]	@ (80099e4 <prvInsertBlockIntoFreeList+0xb0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	429a      	cmp	r2, r3
 8009994:	d00d      	beq.n	80099b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	441a      	add	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	e008      	b.n	80099c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099b2:	4b0c      	ldr	r3, [pc, #48]	@ (80099e4 <prvInsertBlockIntoFreeList+0xb0>)
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	e003      	b.n	80099c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d002      	beq.n	80099d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099d2:	bf00      	nop
 80099d4:	3714      	adds	r7, #20
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	2000461c 	.word	0x2000461c
 80099e4:	20004624 	.word	0x20004624

080099e8 <__cvt>:
 80099e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099ec:	ec57 6b10 	vmov	r6, r7, d0
 80099f0:	2f00      	cmp	r7, #0
 80099f2:	460c      	mov	r4, r1
 80099f4:	4619      	mov	r1, r3
 80099f6:	463b      	mov	r3, r7
 80099f8:	bfbb      	ittet	lt
 80099fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80099fe:	461f      	movlt	r7, r3
 8009a00:	2300      	movge	r3, #0
 8009a02:	232d      	movlt	r3, #45	@ 0x2d
 8009a04:	700b      	strb	r3, [r1, #0]
 8009a06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009a0c:	4691      	mov	r9, r2
 8009a0e:	f023 0820 	bic.w	r8, r3, #32
 8009a12:	bfbc      	itt	lt
 8009a14:	4632      	movlt	r2, r6
 8009a16:	4616      	movlt	r6, r2
 8009a18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a1c:	d005      	beq.n	8009a2a <__cvt+0x42>
 8009a1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009a22:	d100      	bne.n	8009a26 <__cvt+0x3e>
 8009a24:	3401      	adds	r4, #1
 8009a26:	2102      	movs	r1, #2
 8009a28:	e000      	b.n	8009a2c <__cvt+0x44>
 8009a2a:	2103      	movs	r1, #3
 8009a2c:	ab03      	add	r3, sp, #12
 8009a2e:	9301      	str	r3, [sp, #4]
 8009a30:	ab02      	add	r3, sp, #8
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	ec47 6b10 	vmov	d0, r6, r7
 8009a38:	4653      	mov	r3, sl
 8009a3a:	4622      	mov	r2, r4
 8009a3c:	f000 fea0 	bl	800a780 <_dtoa_r>
 8009a40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a44:	4605      	mov	r5, r0
 8009a46:	d119      	bne.n	8009a7c <__cvt+0x94>
 8009a48:	f019 0f01 	tst.w	r9, #1
 8009a4c:	d00e      	beq.n	8009a6c <__cvt+0x84>
 8009a4e:	eb00 0904 	add.w	r9, r0, r4
 8009a52:	2200      	movs	r2, #0
 8009a54:	2300      	movs	r3, #0
 8009a56:	4630      	mov	r0, r6
 8009a58:	4639      	mov	r1, r7
 8009a5a:	f7f7 f85d 	bl	8000b18 <__aeabi_dcmpeq>
 8009a5e:	b108      	cbz	r0, 8009a64 <__cvt+0x7c>
 8009a60:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a64:	2230      	movs	r2, #48	@ 0x30
 8009a66:	9b03      	ldr	r3, [sp, #12]
 8009a68:	454b      	cmp	r3, r9
 8009a6a:	d31e      	bcc.n	8009aaa <__cvt+0xc2>
 8009a6c:	9b03      	ldr	r3, [sp, #12]
 8009a6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a70:	1b5b      	subs	r3, r3, r5
 8009a72:	4628      	mov	r0, r5
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	b004      	add	sp, #16
 8009a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a80:	eb00 0904 	add.w	r9, r0, r4
 8009a84:	d1e5      	bne.n	8009a52 <__cvt+0x6a>
 8009a86:	7803      	ldrb	r3, [r0, #0]
 8009a88:	2b30      	cmp	r3, #48	@ 0x30
 8009a8a:	d10a      	bne.n	8009aa2 <__cvt+0xba>
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	2300      	movs	r3, #0
 8009a90:	4630      	mov	r0, r6
 8009a92:	4639      	mov	r1, r7
 8009a94:	f7f7 f840 	bl	8000b18 <__aeabi_dcmpeq>
 8009a98:	b918      	cbnz	r0, 8009aa2 <__cvt+0xba>
 8009a9a:	f1c4 0401 	rsb	r4, r4, #1
 8009a9e:	f8ca 4000 	str.w	r4, [sl]
 8009aa2:	f8da 3000 	ldr.w	r3, [sl]
 8009aa6:	4499      	add	r9, r3
 8009aa8:	e7d3      	b.n	8009a52 <__cvt+0x6a>
 8009aaa:	1c59      	adds	r1, r3, #1
 8009aac:	9103      	str	r1, [sp, #12]
 8009aae:	701a      	strb	r2, [r3, #0]
 8009ab0:	e7d9      	b.n	8009a66 <__cvt+0x7e>

08009ab2 <__exponent>:
 8009ab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ab4:	2900      	cmp	r1, #0
 8009ab6:	bfba      	itte	lt
 8009ab8:	4249      	neglt	r1, r1
 8009aba:	232d      	movlt	r3, #45	@ 0x2d
 8009abc:	232b      	movge	r3, #43	@ 0x2b
 8009abe:	2909      	cmp	r1, #9
 8009ac0:	7002      	strb	r2, [r0, #0]
 8009ac2:	7043      	strb	r3, [r0, #1]
 8009ac4:	dd29      	ble.n	8009b1a <__exponent+0x68>
 8009ac6:	f10d 0307 	add.w	r3, sp, #7
 8009aca:	461d      	mov	r5, r3
 8009acc:	270a      	movs	r7, #10
 8009ace:	461a      	mov	r2, r3
 8009ad0:	fbb1 f6f7 	udiv	r6, r1, r7
 8009ad4:	fb07 1416 	mls	r4, r7, r6, r1
 8009ad8:	3430      	adds	r4, #48	@ 0x30
 8009ada:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009ade:	460c      	mov	r4, r1
 8009ae0:	2c63      	cmp	r4, #99	@ 0x63
 8009ae2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ae6:	4631      	mov	r1, r6
 8009ae8:	dcf1      	bgt.n	8009ace <__exponent+0x1c>
 8009aea:	3130      	adds	r1, #48	@ 0x30
 8009aec:	1e94      	subs	r4, r2, #2
 8009aee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009af2:	1c41      	adds	r1, r0, #1
 8009af4:	4623      	mov	r3, r4
 8009af6:	42ab      	cmp	r3, r5
 8009af8:	d30a      	bcc.n	8009b10 <__exponent+0x5e>
 8009afa:	f10d 0309 	add.w	r3, sp, #9
 8009afe:	1a9b      	subs	r3, r3, r2
 8009b00:	42ac      	cmp	r4, r5
 8009b02:	bf88      	it	hi
 8009b04:	2300      	movhi	r3, #0
 8009b06:	3302      	adds	r3, #2
 8009b08:	4403      	add	r3, r0
 8009b0a:	1a18      	subs	r0, r3, r0
 8009b0c:	b003      	add	sp, #12
 8009b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b10:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b14:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b18:	e7ed      	b.n	8009af6 <__exponent+0x44>
 8009b1a:	2330      	movs	r3, #48	@ 0x30
 8009b1c:	3130      	adds	r1, #48	@ 0x30
 8009b1e:	7083      	strb	r3, [r0, #2]
 8009b20:	70c1      	strb	r1, [r0, #3]
 8009b22:	1d03      	adds	r3, r0, #4
 8009b24:	e7f1      	b.n	8009b0a <__exponent+0x58>
	...

08009b28 <_printf_float>:
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	b08d      	sub	sp, #52	@ 0x34
 8009b2e:	460c      	mov	r4, r1
 8009b30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009b34:	4616      	mov	r6, r2
 8009b36:	461f      	mov	r7, r3
 8009b38:	4605      	mov	r5, r0
 8009b3a:	f000 fcbb 	bl	800a4b4 <_localeconv_r>
 8009b3e:	6803      	ldr	r3, [r0, #0]
 8009b40:	9304      	str	r3, [sp, #16]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7f6 fbbc 	bl	80002c0 <strlen>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b50:	9005      	str	r0, [sp, #20]
 8009b52:	3307      	adds	r3, #7
 8009b54:	f023 0307 	bic.w	r3, r3, #7
 8009b58:	f103 0208 	add.w	r2, r3, #8
 8009b5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b60:	f8d4 b000 	ldr.w	fp, [r4]
 8009b64:	f8c8 2000 	str.w	r2, [r8]
 8009b68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b70:	9307      	str	r3, [sp, #28]
 8009b72:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b7e:	4b9c      	ldr	r3, [pc, #624]	@ (8009df0 <_printf_float+0x2c8>)
 8009b80:	f04f 32ff 	mov.w	r2, #4294967295
 8009b84:	f7f6 fffa 	bl	8000b7c <__aeabi_dcmpun>
 8009b88:	bb70      	cbnz	r0, 8009be8 <_printf_float+0xc0>
 8009b8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b8e:	4b98      	ldr	r3, [pc, #608]	@ (8009df0 <_printf_float+0x2c8>)
 8009b90:	f04f 32ff 	mov.w	r2, #4294967295
 8009b94:	f7f6 ffd4 	bl	8000b40 <__aeabi_dcmple>
 8009b98:	bb30      	cbnz	r0, 8009be8 <_printf_float+0xc0>
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	4640      	mov	r0, r8
 8009ba0:	4649      	mov	r1, r9
 8009ba2:	f7f6 ffc3 	bl	8000b2c <__aeabi_dcmplt>
 8009ba6:	b110      	cbz	r0, 8009bae <_printf_float+0x86>
 8009ba8:	232d      	movs	r3, #45	@ 0x2d
 8009baa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bae:	4a91      	ldr	r2, [pc, #580]	@ (8009df4 <_printf_float+0x2cc>)
 8009bb0:	4b91      	ldr	r3, [pc, #580]	@ (8009df8 <_printf_float+0x2d0>)
 8009bb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009bb6:	bf94      	ite	ls
 8009bb8:	4690      	movls	r8, r2
 8009bba:	4698      	movhi	r8, r3
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	6123      	str	r3, [r4, #16]
 8009bc0:	f02b 0304 	bic.w	r3, fp, #4
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	f04f 0900 	mov.w	r9, #0
 8009bca:	9700      	str	r7, [sp, #0]
 8009bcc:	4633      	mov	r3, r6
 8009bce:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	f000 f9d2 	bl	8009f7c <_printf_common>
 8009bd8:	3001      	adds	r0, #1
 8009bda:	f040 808d 	bne.w	8009cf8 <_printf_float+0x1d0>
 8009bde:	f04f 30ff 	mov.w	r0, #4294967295
 8009be2:	b00d      	add	sp, #52	@ 0x34
 8009be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be8:	4642      	mov	r2, r8
 8009bea:	464b      	mov	r3, r9
 8009bec:	4640      	mov	r0, r8
 8009bee:	4649      	mov	r1, r9
 8009bf0:	f7f6 ffc4 	bl	8000b7c <__aeabi_dcmpun>
 8009bf4:	b140      	cbz	r0, 8009c08 <_printf_float+0xe0>
 8009bf6:	464b      	mov	r3, r9
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	bfbc      	itt	lt
 8009bfc:	232d      	movlt	r3, #45	@ 0x2d
 8009bfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009c02:	4a7e      	ldr	r2, [pc, #504]	@ (8009dfc <_printf_float+0x2d4>)
 8009c04:	4b7e      	ldr	r3, [pc, #504]	@ (8009e00 <_printf_float+0x2d8>)
 8009c06:	e7d4      	b.n	8009bb2 <_printf_float+0x8a>
 8009c08:	6863      	ldr	r3, [r4, #4]
 8009c0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009c0e:	9206      	str	r2, [sp, #24]
 8009c10:	1c5a      	adds	r2, r3, #1
 8009c12:	d13b      	bne.n	8009c8c <_printf_float+0x164>
 8009c14:	2306      	movs	r3, #6
 8009c16:	6063      	str	r3, [r4, #4]
 8009c18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	6022      	str	r2, [r4, #0]
 8009c20:	9303      	str	r3, [sp, #12]
 8009c22:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c24:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009c28:	ab09      	add	r3, sp, #36	@ 0x24
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	6861      	ldr	r1, [r4, #4]
 8009c2e:	ec49 8b10 	vmov	d0, r8, r9
 8009c32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009c36:	4628      	mov	r0, r5
 8009c38:	f7ff fed6 	bl	80099e8 <__cvt>
 8009c3c:	9b06      	ldr	r3, [sp, #24]
 8009c3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c40:	2b47      	cmp	r3, #71	@ 0x47
 8009c42:	4680      	mov	r8, r0
 8009c44:	d129      	bne.n	8009c9a <_printf_float+0x172>
 8009c46:	1cc8      	adds	r0, r1, #3
 8009c48:	db02      	blt.n	8009c50 <_printf_float+0x128>
 8009c4a:	6863      	ldr	r3, [r4, #4]
 8009c4c:	4299      	cmp	r1, r3
 8009c4e:	dd41      	ble.n	8009cd4 <_printf_float+0x1ac>
 8009c50:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c54:	fa5f fa8a 	uxtb.w	sl, sl
 8009c58:	3901      	subs	r1, #1
 8009c5a:	4652      	mov	r2, sl
 8009c5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c60:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c62:	f7ff ff26 	bl	8009ab2 <__exponent>
 8009c66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c68:	1813      	adds	r3, r2, r0
 8009c6a:	2a01      	cmp	r2, #1
 8009c6c:	4681      	mov	r9, r0
 8009c6e:	6123      	str	r3, [r4, #16]
 8009c70:	dc02      	bgt.n	8009c78 <_printf_float+0x150>
 8009c72:	6822      	ldr	r2, [r4, #0]
 8009c74:	07d2      	lsls	r2, r2, #31
 8009c76:	d501      	bpl.n	8009c7c <_printf_float+0x154>
 8009c78:	3301      	adds	r3, #1
 8009c7a:	6123      	str	r3, [r4, #16]
 8009c7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d0a2      	beq.n	8009bca <_printf_float+0xa2>
 8009c84:	232d      	movs	r3, #45	@ 0x2d
 8009c86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c8a:	e79e      	b.n	8009bca <_printf_float+0xa2>
 8009c8c:	9a06      	ldr	r2, [sp, #24]
 8009c8e:	2a47      	cmp	r2, #71	@ 0x47
 8009c90:	d1c2      	bne.n	8009c18 <_printf_float+0xf0>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1c0      	bne.n	8009c18 <_printf_float+0xf0>
 8009c96:	2301      	movs	r3, #1
 8009c98:	e7bd      	b.n	8009c16 <_printf_float+0xee>
 8009c9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c9e:	d9db      	bls.n	8009c58 <_printf_float+0x130>
 8009ca0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009ca4:	d118      	bne.n	8009cd8 <_printf_float+0x1b0>
 8009ca6:	2900      	cmp	r1, #0
 8009ca8:	6863      	ldr	r3, [r4, #4]
 8009caa:	dd0b      	ble.n	8009cc4 <_printf_float+0x19c>
 8009cac:	6121      	str	r1, [r4, #16]
 8009cae:	b913      	cbnz	r3, 8009cb6 <_printf_float+0x18e>
 8009cb0:	6822      	ldr	r2, [r4, #0]
 8009cb2:	07d0      	lsls	r0, r2, #31
 8009cb4:	d502      	bpl.n	8009cbc <_printf_float+0x194>
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	440b      	add	r3, r1
 8009cba:	6123      	str	r3, [r4, #16]
 8009cbc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009cbe:	f04f 0900 	mov.w	r9, #0
 8009cc2:	e7db      	b.n	8009c7c <_printf_float+0x154>
 8009cc4:	b913      	cbnz	r3, 8009ccc <_printf_float+0x1a4>
 8009cc6:	6822      	ldr	r2, [r4, #0]
 8009cc8:	07d2      	lsls	r2, r2, #31
 8009cca:	d501      	bpl.n	8009cd0 <_printf_float+0x1a8>
 8009ccc:	3302      	adds	r3, #2
 8009cce:	e7f4      	b.n	8009cba <_printf_float+0x192>
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e7f2      	b.n	8009cba <_printf_float+0x192>
 8009cd4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009cd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cda:	4299      	cmp	r1, r3
 8009cdc:	db05      	blt.n	8009cea <_printf_float+0x1c2>
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	6121      	str	r1, [r4, #16]
 8009ce2:	07d8      	lsls	r0, r3, #31
 8009ce4:	d5ea      	bpl.n	8009cbc <_printf_float+0x194>
 8009ce6:	1c4b      	adds	r3, r1, #1
 8009ce8:	e7e7      	b.n	8009cba <_printf_float+0x192>
 8009cea:	2900      	cmp	r1, #0
 8009cec:	bfd4      	ite	le
 8009cee:	f1c1 0202 	rsble	r2, r1, #2
 8009cf2:	2201      	movgt	r2, #1
 8009cf4:	4413      	add	r3, r2
 8009cf6:	e7e0      	b.n	8009cba <_printf_float+0x192>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	055a      	lsls	r2, r3, #21
 8009cfc:	d407      	bmi.n	8009d0e <_printf_float+0x1e6>
 8009cfe:	6923      	ldr	r3, [r4, #16]
 8009d00:	4642      	mov	r2, r8
 8009d02:	4631      	mov	r1, r6
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b8      	blx	r7
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d12b      	bne.n	8009d64 <_printf_float+0x23c>
 8009d0c:	e767      	b.n	8009bde <_printf_float+0xb6>
 8009d0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d12:	f240 80dd 	bls.w	8009ed0 <_printf_float+0x3a8>
 8009d16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f7f6 fefb 	bl	8000b18 <__aeabi_dcmpeq>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d033      	beq.n	8009d8e <_printf_float+0x266>
 8009d26:	4a37      	ldr	r2, [pc, #220]	@ (8009e04 <_printf_float+0x2dc>)
 8009d28:	2301      	movs	r3, #1
 8009d2a:	4631      	mov	r1, r6
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	47b8      	blx	r7
 8009d30:	3001      	adds	r0, #1
 8009d32:	f43f af54 	beq.w	8009bde <_printf_float+0xb6>
 8009d36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009d3a:	4543      	cmp	r3, r8
 8009d3c:	db02      	blt.n	8009d44 <_printf_float+0x21c>
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	07d8      	lsls	r0, r3, #31
 8009d42:	d50f      	bpl.n	8009d64 <_printf_float+0x23c>
 8009d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	47b8      	blx	r7
 8009d4e:	3001      	adds	r0, #1
 8009d50:	f43f af45 	beq.w	8009bde <_printf_float+0xb6>
 8009d54:	f04f 0900 	mov.w	r9, #0
 8009d58:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d5c:	f104 0a1a 	add.w	sl, r4, #26
 8009d60:	45c8      	cmp	r8, r9
 8009d62:	dc09      	bgt.n	8009d78 <_printf_float+0x250>
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	079b      	lsls	r3, r3, #30
 8009d68:	f100 8103 	bmi.w	8009f72 <_printf_float+0x44a>
 8009d6c:	68e0      	ldr	r0, [r4, #12]
 8009d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d70:	4298      	cmp	r0, r3
 8009d72:	bfb8      	it	lt
 8009d74:	4618      	movlt	r0, r3
 8009d76:	e734      	b.n	8009be2 <_printf_float+0xba>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	4652      	mov	r2, sl
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	4628      	mov	r0, r5
 8009d80:	47b8      	blx	r7
 8009d82:	3001      	adds	r0, #1
 8009d84:	f43f af2b 	beq.w	8009bde <_printf_float+0xb6>
 8009d88:	f109 0901 	add.w	r9, r9, #1
 8009d8c:	e7e8      	b.n	8009d60 <_printf_float+0x238>
 8009d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	dc39      	bgt.n	8009e08 <_printf_float+0x2e0>
 8009d94:	4a1b      	ldr	r2, [pc, #108]	@ (8009e04 <_printf_float+0x2dc>)
 8009d96:	2301      	movs	r3, #1
 8009d98:	4631      	mov	r1, r6
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	47b8      	blx	r7
 8009d9e:	3001      	adds	r0, #1
 8009da0:	f43f af1d 	beq.w	8009bde <_printf_float+0xb6>
 8009da4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009da8:	ea59 0303 	orrs.w	r3, r9, r3
 8009dac:	d102      	bne.n	8009db4 <_printf_float+0x28c>
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	07d9      	lsls	r1, r3, #31
 8009db2:	d5d7      	bpl.n	8009d64 <_printf_float+0x23c>
 8009db4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009db8:	4631      	mov	r1, r6
 8009dba:	4628      	mov	r0, r5
 8009dbc:	47b8      	blx	r7
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	f43f af0d 	beq.w	8009bde <_printf_float+0xb6>
 8009dc4:	f04f 0a00 	mov.w	sl, #0
 8009dc8:	f104 0b1a 	add.w	fp, r4, #26
 8009dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dce:	425b      	negs	r3, r3
 8009dd0:	4553      	cmp	r3, sl
 8009dd2:	dc01      	bgt.n	8009dd8 <_printf_float+0x2b0>
 8009dd4:	464b      	mov	r3, r9
 8009dd6:	e793      	b.n	8009d00 <_printf_float+0x1d8>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	465a      	mov	r2, fp
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4628      	mov	r0, r5
 8009de0:	47b8      	blx	r7
 8009de2:	3001      	adds	r0, #1
 8009de4:	f43f aefb 	beq.w	8009bde <_printf_float+0xb6>
 8009de8:	f10a 0a01 	add.w	sl, sl, #1
 8009dec:	e7ee      	b.n	8009dcc <_printf_float+0x2a4>
 8009dee:	bf00      	nop
 8009df0:	7fefffff 	.word	0x7fefffff
 8009df4:	0800c420 	.word	0x0800c420
 8009df8:	0800c424 	.word	0x0800c424
 8009dfc:	0800c428 	.word	0x0800c428
 8009e00:	0800c42c 	.word	0x0800c42c
 8009e04:	0800c430 	.word	0x0800c430
 8009e08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e0e:	4553      	cmp	r3, sl
 8009e10:	bfa8      	it	ge
 8009e12:	4653      	movge	r3, sl
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	4699      	mov	r9, r3
 8009e18:	dc36      	bgt.n	8009e88 <_printf_float+0x360>
 8009e1a:	f04f 0b00 	mov.w	fp, #0
 8009e1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e22:	f104 021a 	add.w	r2, r4, #26
 8009e26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e28:	9306      	str	r3, [sp, #24]
 8009e2a:	eba3 0309 	sub.w	r3, r3, r9
 8009e2e:	455b      	cmp	r3, fp
 8009e30:	dc31      	bgt.n	8009e96 <_printf_float+0x36e>
 8009e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e34:	459a      	cmp	sl, r3
 8009e36:	dc3a      	bgt.n	8009eae <_printf_float+0x386>
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	07da      	lsls	r2, r3, #31
 8009e3c:	d437      	bmi.n	8009eae <_printf_float+0x386>
 8009e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e40:	ebaa 0903 	sub.w	r9, sl, r3
 8009e44:	9b06      	ldr	r3, [sp, #24]
 8009e46:	ebaa 0303 	sub.w	r3, sl, r3
 8009e4a:	4599      	cmp	r9, r3
 8009e4c:	bfa8      	it	ge
 8009e4e:	4699      	movge	r9, r3
 8009e50:	f1b9 0f00 	cmp.w	r9, #0
 8009e54:	dc33      	bgt.n	8009ebe <_printf_float+0x396>
 8009e56:	f04f 0800 	mov.w	r8, #0
 8009e5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e5e:	f104 0b1a 	add.w	fp, r4, #26
 8009e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e64:	ebaa 0303 	sub.w	r3, sl, r3
 8009e68:	eba3 0309 	sub.w	r3, r3, r9
 8009e6c:	4543      	cmp	r3, r8
 8009e6e:	f77f af79 	ble.w	8009d64 <_printf_float+0x23c>
 8009e72:	2301      	movs	r3, #1
 8009e74:	465a      	mov	r2, fp
 8009e76:	4631      	mov	r1, r6
 8009e78:	4628      	mov	r0, r5
 8009e7a:	47b8      	blx	r7
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	f43f aeae 	beq.w	8009bde <_printf_float+0xb6>
 8009e82:	f108 0801 	add.w	r8, r8, #1
 8009e86:	e7ec      	b.n	8009e62 <_printf_float+0x33a>
 8009e88:	4642      	mov	r2, r8
 8009e8a:	4631      	mov	r1, r6
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	47b8      	blx	r7
 8009e90:	3001      	adds	r0, #1
 8009e92:	d1c2      	bne.n	8009e1a <_printf_float+0x2f2>
 8009e94:	e6a3      	b.n	8009bde <_printf_float+0xb6>
 8009e96:	2301      	movs	r3, #1
 8009e98:	4631      	mov	r1, r6
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	9206      	str	r2, [sp, #24]
 8009e9e:	47b8      	blx	r7
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	f43f ae9c 	beq.w	8009bde <_printf_float+0xb6>
 8009ea6:	9a06      	ldr	r2, [sp, #24]
 8009ea8:	f10b 0b01 	add.w	fp, fp, #1
 8009eac:	e7bb      	b.n	8009e26 <_printf_float+0x2fe>
 8009eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	47b8      	blx	r7
 8009eb8:	3001      	adds	r0, #1
 8009eba:	d1c0      	bne.n	8009e3e <_printf_float+0x316>
 8009ebc:	e68f      	b.n	8009bde <_printf_float+0xb6>
 8009ebe:	9a06      	ldr	r2, [sp, #24]
 8009ec0:	464b      	mov	r3, r9
 8009ec2:	4442      	add	r2, r8
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	47b8      	blx	r7
 8009eca:	3001      	adds	r0, #1
 8009ecc:	d1c3      	bne.n	8009e56 <_printf_float+0x32e>
 8009ece:	e686      	b.n	8009bde <_printf_float+0xb6>
 8009ed0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ed4:	f1ba 0f01 	cmp.w	sl, #1
 8009ed8:	dc01      	bgt.n	8009ede <_printf_float+0x3b6>
 8009eda:	07db      	lsls	r3, r3, #31
 8009edc:	d536      	bpl.n	8009f4c <_printf_float+0x424>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	4642      	mov	r2, r8
 8009ee2:	4631      	mov	r1, r6
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	47b8      	blx	r7
 8009ee8:	3001      	adds	r0, #1
 8009eea:	f43f ae78 	beq.w	8009bde <_printf_float+0xb6>
 8009eee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	47b8      	blx	r7
 8009ef8:	3001      	adds	r0, #1
 8009efa:	f43f ae70 	beq.w	8009bde <_printf_float+0xb6>
 8009efe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f02:	2200      	movs	r2, #0
 8009f04:	2300      	movs	r3, #0
 8009f06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f0a:	f7f6 fe05 	bl	8000b18 <__aeabi_dcmpeq>
 8009f0e:	b9c0      	cbnz	r0, 8009f42 <_printf_float+0x41a>
 8009f10:	4653      	mov	r3, sl
 8009f12:	f108 0201 	add.w	r2, r8, #1
 8009f16:	4631      	mov	r1, r6
 8009f18:	4628      	mov	r0, r5
 8009f1a:	47b8      	blx	r7
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d10c      	bne.n	8009f3a <_printf_float+0x412>
 8009f20:	e65d      	b.n	8009bde <_printf_float+0xb6>
 8009f22:	2301      	movs	r3, #1
 8009f24:	465a      	mov	r2, fp
 8009f26:	4631      	mov	r1, r6
 8009f28:	4628      	mov	r0, r5
 8009f2a:	47b8      	blx	r7
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	f43f ae56 	beq.w	8009bde <_printf_float+0xb6>
 8009f32:	f108 0801 	add.w	r8, r8, #1
 8009f36:	45d0      	cmp	r8, sl
 8009f38:	dbf3      	blt.n	8009f22 <_printf_float+0x3fa>
 8009f3a:	464b      	mov	r3, r9
 8009f3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f40:	e6df      	b.n	8009d02 <_printf_float+0x1da>
 8009f42:	f04f 0800 	mov.w	r8, #0
 8009f46:	f104 0b1a 	add.w	fp, r4, #26
 8009f4a:	e7f4      	b.n	8009f36 <_printf_float+0x40e>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	4642      	mov	r2, r8
 8009f50:	e7e1      	b.n	8009f16 <_printf_float+0x3ee>
 8009f52:	2301      	movs	r3, #1
 8009f54:	464a      	mov	r2, r9
 8009f56:	4631      	mov	r1, r6
 8009f58:	4628      	mov	r0, r5
 8009f5a:	47b8      	blx	r7
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	f43f ae3e 	beq.w	8009bde <_printf_float+0xb6>
 8009f62:	f108 0801 	add.w	r8, r8, #1
 8009f66:	68e3      	ldr	r3, [r4, #12]
 8009f68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f6a:	1a5b      	subs	r3, r3, r1
 8009f6c:	4543      	cmp	r3, r8
 8009f6e:	dcf0      	bgt.n	8009f52 <_printf_float+0x42a>
 8009f70:	e6fc      	b.n	8009d6c <_printf_float+0x244>
 8009f72:	f04f 0800 	mov.w	r8, #0
 8009f76:	f104 0919 	add.w	r9, r4, #25
 8009f7a:	e7f4      	b.n	8009f66 <_printf_float+0x43e>

08009f7c <_printf_common>:
 8009f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f80:	4616      	mov	r6, r2
 8009f82:	4698      	mov	r8, r3
 8009f84:	688a      	ldr	r2, [r1, #8]
 8009f86:	690b      	ldr	r3, [r1, #16]
 8009f88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	bfb8      	it	lt
 8009f90:	4613      	movlt	r3, r2
 8009f92:	6033      	str	r3, [r6, #0]
 8009f94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f98:	4607      	mov	r7, r0
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	b10a      	cbz	r2, 8009fa2 <_printf_common+0x26>
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	6033      	str	r3, [r6, #0]
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	0699      	lsls	r1, r3, #26
 8009fa6:	bf42      	ittt	mi
 8009fa8:	6833      	ldrmi	r3, [r6, #0]
 8009faa:	3302      	addmi	r3, #2
 8009fac:	6033      	strmi	r3, [r6, #0]
 8009fae:	6825      	ldr	r5, [r4, #0]
 8009fb0:	f015 0506 	ands.w	r5, r5, #6
 8009fb4:	d106      	bne.n	8009fc4 <_printf_common+0x48>
 8009fb6:	f104 0a19 	add.w	sl, r4, #25
 8009fba:	68e3      	ldr	r3, [r4, #12]
 8009fbc:	6832      	ldr	r2, [r6, #0]
 8009fbe:	1a9b      	subs	r3, r3, r2
 8009fc0:	42ab      	cmp	r3, r5
 8009fc2:	dc26      	bgt.n	800a012 <_printf_common+0x96>
 8009fc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009fc8:	6822      	ldr	r2, [r4, #0]
 8009fca:	3b00      	subs	r3, #0
 8009fcc:	bf18      	it	ne
 8009fce:	2301      	movne	r3, #1
 8009fd0:	0692      	lsls	r2, r2, #26
 8009fd2:	d42b      	bmi.n	800a02c <_printf_common+0xb0>
 8009fd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009fd8:	4641      	mov	r1, r8
 8009fda:	4638      	mov	r0, r7
 8009fdc:	47c8      	blx	r9
 8009fde:	3001      	adds	r0, #1
 8009fe0:	d01e      	beq.n	800a020 <_printf_common+0xa4>
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	6922      	ldr	r2, [r4, #16]
 8009fe6:	f003 0306 	and.w	r3, r3, #6
 8009fea:	2b04      	cmp	r3, #4
 8009fec:	bf02      	ittt	eq
 8009fee:	68e5      	ldreq	r5, [r4, #12]
 8009ff0:	6833      	ldreq	r3, [r6, #0]
 8009ff2:	1aed      	subeq	r5, r5, r3
 8009ff4:	68a3      	ldr	r3, [r4, #8]
 8009ff6:	bf0c      	ite	eq
 8009ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ffc:	2500      	movne	r5, #0
 8009ffe:	4293      	cmp	r3, r2
 800a000:	bfc4      	itt	gt
 800a002:	1a9b      	subgt	r3, r3, r2
 800a004:	18ed      	addgt	r5, r5, r3
 800a006:	2600      	movs	r6, #0
 800a008:	341a      	adds	r4, #26
 800a00a:	42b5      	cmp	r5, r6
 800a00c:	d11a      	bne.n	800a044 <_printf_common+0xc8>
 800a00e:	2000      	movs	r0, #0
 800a010:	e008      	b.n	800a024 <_printf_common+0xa8>
 800a012:	2301      	movs	r3, #1
 800a014:	4652      	mov	r2, sl
 800a016:	4641      	mov	r1, r8
 800a018:	4638      	mov	r0, r7
 800a01a:	47c8      	blx	r9
 800a01c:	3001      	adds	r0, #1
 800a01e:	d103      	bne.n	800a028 <_printf_common+0xac>
 800a020:	f04f 30ff 	mov.w	r0, #4294967295
 800a024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a028:	3501      	adds	r5, #1
 800a02a:	e7c6      	b.n	8009fba <_printf_common+0x3e>
 800a02c:	18e1      	adds	r1, r4, r3
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	2030      	movs	r0, #48	@ 0x30
 800a032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a036:	4422      	add	r2, r4
 800a038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a03c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a040:	3302      	adds	r3, #2
 800a042:	e7c7      	b.n	8009fd4 <_printf_common+0x58>
 800a044:	2301      	movs	r3, #1
 800a046:	4622      	mov	r2, r4
 800a048:	4641      	mov	r1, r8
 800a04a:	4638      	mov	r0, r7
 800a04c:	47c8      	blx	r9
 800a04e:	3001      	adds	r0, #1
 800a050:	d0e6      	beq.n	800a020 <_printf_common+0xa4>
 800a052:	3601      	adds	r6, #1
 800a054:	e7d9      	b.n	800a00a <_printf_common+0x8e>
	...

0800a058 <_printf_i>:
 800a058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a05c:	7e0f      	ldrb	r7, [r1, #24]
 800a05e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a060:	2f78      	cmp	r7, #120	@ 0x78
 800a062:	4691      	mov	r9, r2
 800a064:	4680      	mov	r8, r0
 800a066:	460c      	mov	r4, r1
 800a068:	469a      	mov	sl, r3
 800a06a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a06e:	d807      	bhi.n	800a080 <_printf_i+0x28>
 800a070:	2f62      	cmp	r7, #98	@ 0x62
 800a072:	d80a      	bhi.n	800a08a <_printf_i+0x32>
 800a074:	2f00      	cmp	r7, #0
 800a076:	f000 80d2 	beq.w	800a21e <_printf_i+0x1c6>
 800a07a:	2f58      	cmp	r7, #88	@ 0x58
 800a07c:	f000 80b9 	beq.w	800a1f2 <_printf_i+0x19a>
 800a080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a088:	e03a      	b.n	800a100 <_printf_i+0xa8>
 800a08a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a08e:	2b15      	cmp	r3, #21
 800a090:	d8f6      	bhi.n	800a080 <_printf_i+0x28>
 800a092:	a101      	add	r1, pc, #4	@ (adr r1, 800a098 <_printf_i+0x40>)
 800a094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a098:	0800a0f1 	.word	0x0800a0f1
 800a09c:	0800a105 	.word	0x0800a105
 800a0a0:	0800a081 	.word	0x0800a081
 800a0a4:	0800a081 	.word	0x0800a081
 800a0a8:	0800a081 	.word	0x0800a081
 800a0ac:	0800a081 	.word	0x0800a081
 800a0b0:	0800a105 	.word	0x0800a105
 800a0b4:	0800a081 	.word	0x0800a081
 800a0b8:	0800a081 	.word	0x0800a081
 800a0bc:	0800a081 	.word	0x0800a081
 800a0c0:	0800a081 	.word	0x0800a081
 800a0c4:	0800a205 	.word	0x0800a205
 800a0c8:	0800a12f 	.word	0x0800a12f
 800a0cc:	0800a1bf 	.word	0x0800a1bf
 800a0d0:	0800a081 	.word	0x0800a081
 800a0d4:	0800a081 	.word	0x0800a081
 800a0d8:	0800a227 	.word	0x0800a227
 800a0dc:	0800a081 	.word	0x0800a081
 800a0e0:	0800a12f 	.word	0x0800a12f
 800a0e4:	0800a081 	.word	0x0800a081
 800a0e8:	0800a081 	.word	0x0800a081
 800a0ec:	0800a1c7 	.word	0x0800a1c7
 800a0f0:	6833      	ldr	r3, [r6, #0]
 800a0f2:	1d1a      	adds	r2, r3, #4
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	6032      	str	r2, [r6, #0]
 800a0f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a100:	2301      	movs	r3, #1
 800a102:	e09d      	b.n	800a240 <_printf_i+0x1e8>
 800a104:	6833      	ldr	r3, [r6, #0]
 800a106:	6820      	ldr	r0, [r4, #0]
 800a108:	1d19      	adds	r1, r3, #4
 800a10a:	6031      	str	r1, [r6, #0]
 800a10c:	0606      	lsls	r6, r0, #24
 800a10e:	d501      	bpl.n	800a114 <_printf_i+0xbc>
 800a110:	681d      	ldr	r5, [r3, #0]
 800a112:	e003      	b.n	800a11c <_printf_i+0xc4>
 800a114:	0645      	lsls	r5, r0, #25
 800a116:	d5fb      	bpl.n	800a110 <_printf_i+0xb8>
 800a118:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a11c:	2d00      	cmp	r5, #0
 800a11e:	da03      	bge.n	800a128 <_printf_i+0xd0>
 800a120:	232d      	movs	r3, #45	@ 0x2d
 800a122:	426d      	negs	r5, r5
 800a124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a128:	4859      	ldr	r0, [pc, #356]	@ (800a290 <_printf_i+0x238>)
 800a12a:	230a      	movs	r3, #10
 800a12c:	e011      	b.n	800a152 <_printf_i+0xfa>
 800a12e:	6821      	ldr	r1, [r4, #0]
 800a130:	6833      	ldr	r3, [r6, #0]
 800a132:	0608      	lsls	r0, r1, #24
 800a134:	f853 5b04 	ldr.w	r5, [r3], #4
 800a138:	d402      	bmi.n	800a140 <_printf_i+0xe8>
 800a13a:	0649      	lsls	r1, r1, #25
 800a13c:	bf48      	it	mi
 800a13e:	b2ad      	uxthmi	r5, r5
 800a140:	2f6f      	cmp	r7, #111	@ 0x6f
 800a142:	4853      	ldr	r0, [pc, #332]	@ (800a290 <_printf_i+0x238>)
 800a144:	6033      	str	r3, [r6, #0]
 800a146:	bf14      	ite	ne
 800a148:	230a      	movne	r3, #10
 800a14a:	2308      	moveq	r3, #8
 800a14c:	2100      	movs	r1, #0
 800a14e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a152:	6866      	ldr	r6, [r4, #4]
 800a154:	60a6      	str	r6, [r4, #8]
 800a156:	2e00      	cmp	r6, #0
 800a158:	bfa2      	ittt	ge
 800a15a:	6821      	ldrge	r1, [r4, #0]
 800a15c:	f021 0104 	bicge.w	r1, r1, #4
 800a160:	6021      	strge	r1, [r4, #0]
 800a162:	b90d      	cbnz	r5, 800a168 <_printf_i+0x110>
 800a164:	2e00      	cmp	r6, #0
 800a166:	d04b      	beq.n	800a200 <_printf_i+0x1a8>
 800a168:	4616      	mov	r6, r2
 800a16a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a16e:	fb03 5711 	mls	r7, r3, r1, r5
 800a172:	5dc7      	ldrb	r7, [r0, r7]
 800a174:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a178:	462f      	mov	r7, r5
 800a17a:	42bb      	cmp	r3, r7
 800a17c:	460d      	mov	r5, r1
 800a17e:	d9f4      	bls.n	800a16a <_printf_i+0x112>
 800a180:	2b08      	cmp	r3, #8
 800a182:	d10b      	bne.n	800a19c <_printf_i+0x144>
 800a184:	6823      	ldr	r3, [r4, #0]
 800a186:	07df      	lsls	r7, r3, #31
 800a188:	d508      	bpl.n	800a19c <_printf_i+0x144>
 800a18a:	6923      	ldr	r3, [r4, #16]
 800a18c:	6861      	ldr	r1, [r4, #4]
 800a18e:	4299      	cmp	r1, r3
 800a190:	bfde      	ittt	le
 800a192:	2330      	movle	r3, #48	@ 0x30
 800a194:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a198:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a19c:	1b92      	subs	r2, r2, r6
 800a19e:	6122      	str	r2, [r4, #16]
 800a1a0:	f8cd a000 	str.w	sl, [sp]
 800a1a4:	464b      	mov	r3, r9
 800a1a6:	aa03      	add	r2, sp, #12
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	f7ff fee6 	bl	8009f7c <_printf_common>
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	d14a      	bne.n	800a24a <_printf_i+0x1f2>
 800a1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b8:	b004      	add	sp, #16
 800a1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	f043 0320 	orr.w	r3, r3, #32
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	4833      	ldr	r0, [pc, #204]	@ (800a294 <_printf_i+0x23c>)
 800a1c8:	2778      	movs	r7, #120	@ 0x78
 800a1ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	6831      	ldr	r1, [r6, #0]
 800a1d2:	061f      	lsls	r7, r3, #24
 800a1d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1d8:	d402      	bmi.n	800a1e0 <_printf_i+0x188>
 800a1da:	065f      	lsls	r7, r3, #25
 800a1dc:	bf48      	it	mi
 800a1de:	b2ad      	uxthmi	r5, r5
 800a1e0:	6031      	str	r1, [r6, #0]
 800a1e2:	07d9      	lsls	r1, r3, #31
 800a1e4:	bf44      	itt	mi
 800a1e6:	f043 0320 	orrmi.w	r3, r3, #32
 800a1ea:	6023      	strmi	r3, [r4, #0]
 800a1ec:	b11d      	cbz	r5, 800a1f6 <_printf_i+0x19e>
 800a1ee:	2310      	movs	r3, #16
 800a1f0:	e7ac      	b.n	800a14c <_printf_i+0xf4>
 800a1f2:	4827      	ldr	r0, [pc, #156]	@ (800a290 <_printf_i+0x238>)
 800a1f4:	e7e9      	b.n	800a1ca <_printf_i+0x172>
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	f023 0320 	bic.w	r3, r3, #32
 800a1fc:	6023      	str	r3, [r4, #0]
 800a1fe:	e7f6      	b.n	800a1ee <_printf_i+0x196>
 800a200:	4616      	mov	r6, r2
 800a202:	e7bd      	b.n	800a180 <_printf_i+0x128>
 800a204:	6833      	ldr	r3, [r6, #0]
 800a206:	6825      	ldr	r5, [r4, #0]
 800a208:	6961      	ldr	r1, [r4, #20]
 800a20a:	1d18      	adds	r0, r3, #4
 800a20c:	6030      	str	r0, [r6, #0]
 800a20e:	062e      	lsls	r6, r5, #24
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	d501      	bpl.n	800a218 <_printf_i+0x1c0>
 800a214:	6019      	str	r1, [r3, #0]
 800a216:	e002      	b.n	800a21e <_printf_i+0x1c6>
 800a218:	0668      	lsls	r0, r5, #25
 800a21a:	d5fb      	bpl.n	800a214 <_printf_i+0x1bc>
 800a21c:	8019      	strh	r1, [r3, #0]
 800a21e:	2300      	movs	r3, #0
 800a220:	6123      	str	r3, [r4, #16]
 800a222:	4616      	mov	r6, r2
 800a224:	e7bc      	b.n	800a1a0 <_printf_i+0x148>
 800a226:	6833      	ldr	r3, [r6, #0]
 800a228:	1d1a      	adds	r2, r3, #4
 800a22a:	6032      	str	r2, [r6, #0]
 800a22c:	681e      	ldr	r6, [r3, #0]
 800a22e:	6862      	ldr	r2, [r4, #4]
 800a230:	2100      	movs	r1, #0
 800a232:	4630      	mov	r0, r6
 800a234:	f7f5 fff4 	bl	8000220 <memchr>
 800a238:	b108      	cbz	r0, 800a23e <_printf_i+0x1e6>
 800a23a:	1b80      	subs	r0, r0, r6
 800a23c:	6060      	str	r0, [r4, #4]
 800a23e:	6863      	ldr	r3, [r4, #4]
 800a240:	6123      	str	r3, [r4, #16]
 800a242:	2300      	movs	r3, #0
 800a244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a248:	e7aa      	b.n	800a1a0 <_printf_i+0x148>
 800a24a:	6923      	ldr	r3, [r4, #16]
 800a24c:	4632      	mov	r2, r6
 800a24e:	4649      	mov	r1, r9
 800a250:	4640      	mov	r0, r8
 800a252:	47d0      	blx	sl
 800a254:	3001      	adds	r0, #1
 800a256:	d0ad      	beq.n	800a1b4 <_printf_i+0x15c>
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	079b      	lsls	r3, r3, #30
 800a25c:	d413      	bmi.n	800a286 <_printf_i+0x22e>
 800a25e:	68e0      	ldr	r0, [r4, #12]
 800a260:	9b03      	ldr	r3, [sp, #12]
 800a262:	4298      	cmp	r0, r3
 800a264:	bfb8      	it	lt
 800a266:	4618      	movlt	r0, r3
 800a268:	e7a6      	b.n	800a1b8 <_printf_i+0x160>
 800a26a:	2301      	movs	r3, #1
 800a26c:	4632      	mov	r2, r6
 800a26e:	4649      	mov	r1, r9
 800a270:	4640      	mov	r0, r8
 800a272:	47d0      	blx	sl
 800a274:	3001      	adds	r0, #1
 800a276:	d09d      	beq.n	800a1b4 <_printf_i+0x15c>
 800a278:	3501      	adds	r5, #1
 800a27a:	68e3      	ldr	r3, [r4, #12]
 800a27c:	9903      	ldr	r1, [sp, #12]
 800a27e:	1a5b      	subs	r3, r3, r1
 800a280:	42ab      	cmp	r3, r5
 800a282:	dcf2      	bgt.n	800a26a <_printf_i+0x212>
 800a284:	e7eb      	b.n	800a25e <_printf_i+0x206>
 800a286:	2500      	movs	r5, #0
 800a288:	f104 0619 	add.w	r6, r4, #25
 800a28c:	e7f5      	b.n	800a27a <_printf_i+0x222>
 800a28e:	bf00      	nop
 800a290:	0800c432 	.word	0x0800c432
 800a294:	0800c443 	.word	0x0800c443

0800a298 <std>:
 800a298:	2300      	movs	r3, #0
 800a29a:	b510      	push	{r4, lr}
 800a29c:	4604      	mov	r4, r0
 800a29e:	e9c0 3300 	strd	r3, r3, [r0]
 800a2a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2a6:	6083      	str	r3, [r0, #8]
 800a2a8:	8181      	strh	r1, [r0, #12]
 800a2aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2ac:	81c2      	strh	r2, [r0, #14]
 800a2ae:	6183      	str	r3, [r0, #24]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	2208      	movs	r2, #8
 800a2b4:	305c      	adds	r0, #92	@ 0x5c
 800a2b6:	f000 f8f4 	bl	800a4a2 <memset>
 800a2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f0 <std+0x58>)
 800a2bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2be:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f4 <std+0x5c>)
 800a2c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f8 <std+0x60>)
 800a2c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2fc <std+0x64>)
 800a2c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a300 <std+0x68>)
 800a2cc:	6224      	str	r4, [r4, #32]
 800a2ce:	429c      	cmp	r4, r3
 800a2d0:	d006      	beq.n	800a2e0 <std+0x48>
 800a2d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2d6:	4294      	cmp	r4, r2
 800a2d8:	d002      	beq.n	800a2e0 <std+0x48>
 800a2da:	33d0      	adds	r3, #208	@ 0xd0
 800a2dc:	429c      	cmp	r4, r3
 800a2de:	d105      	bne.n	800a2ec <std+0x54>
 800a2e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2e8:	f000 b9ae 	b.w	800a648 <__retarget_lock_init_recursive>
 800a2ec:	bd10      	pop	{r4, pc}
 800a2ee:	bf00      	nop
 800a2f0:	0800a41d 	.word	0x0800a41d
 800a2f4:	0800a43f 	.word	0x0800a43f
 800a2f8:	0800a477 	.word	0x0800a477
 800a2fc:	0800a49b 	.word	0x0800a49b
 800a300:	2000463c 	.word	0x2000463c

0800a304 <stdio_exit_handler>:
 800a304:	4a02      	ldr	r2, [pc, #8]	@ (800a310 <stdio_exit_handler+0xc>)
 800a306:	4903      	ldr	r1, [pc, #12]	@ (800a314 <stdio_exit_handler+0x10>)
 800a308:	4803      	ldr	r0, [pc, #12]	@ (800a318 <stdio_exit_handler+0x14>)
 800a30a:	f000 b869 	b.w	800a3e0 <_fwalk_sglue>
 800a30e:	bf00      	nop
 800a310:	20000010 	.word	0x20000010
 800a314:	0800bd15 	.word	0x0800bd15
 800a318:	20000020 	.word	0x20000020

0800a31c <cleanup_stdio>:
 800a31c:	6841      	ldr	r1, [r0, #4]
 800a31e:	4b0c      	ldr	r3, [pc, #48]	@ (800a350 <cleanup_stdio+0x34>)
 800a320:	4299      	cmp	r1, r3
 800a322:	b510      	push	{r4, lr}
 800a324:	4604      	mov	r4, r0
 800a326:	d001      	beq.n	800a32c <cleanup_stdio+0x10>
 800a328:	f001 fcf4 	bl	800bd14 <_fflush_r>
 800a32c:	68a1      	ldr	r1, [r4, #8]
 800a32e:	4b09      	ldr	r3, [pc, #36]	@ (800a354 <cleanup_stdio+0x38>)
 800a330:	4299      	cmp	r1, r3
 800a332:	d002      	beq.n	800a33a <cleanup_stdio+0x1e>
 800a334:	4620      	mov	r0, r4
 800a336:	f001 fced 	bl	800bd14 <_fflush_r>
 800a33a:	68e1      	ldr	r1, [r4, #12]
 800a33c:	4b06      	ldr	r3, [pc, #24]	@ (800a358 <cleanup_stdio+0x3c>)
 800a33e:	4299      	cmp	r1, r3
 800a340:	d004      	beq.n	800a34c <cleanup_stdio+0x30>
 800a342:	4620      	mov	r0, r4
 800a344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a348:	f001 bce4 	b.w	800bd14 <_fflush_r>
 800a34c:	bd10      	pop	{r4, pc}
 800a34e:	bf00      	nop
 800a350:	2000463c 	.word	0x2000463c
 800a354:	200046a4 	.word	0x200046a4
 800a358:	2000470c 	.word	0x2000470c

0800a35c <global_stdio_init.part.0>:
 800a35c:	b510      	push	{r4, lr}
 800a35e:	4b0b      	ldr	r3, [pc, #44]	@ (800a38c <global_stdio_init.part.0+0x30>)
 800a360:	4c0b      	ldr	r4, [pc, #44]	@ (800a390 <global_stdio_init.part.0+0x34>)
 800a362:	4a0c      	ldr	r2, [pc, #48]	@ (800a394 <global_stdio_init.part.0+0x38>)
 800a364:	601a      	str	r2, [r3, #0]
 800a366:	4620      	mov	r0, r4
 800a368:	2200      	movs	r2, #0
 800a36a:	2104      	movs	r1, #4
 800a36c:	f7ff ff94 	bl	800a298 <std>
 800a370:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a374:	2201      	movs	r2, #1
 800a376:	2109      	movs	r1, #9
 800a378:	f7ff ff8e 	bl	800a298 <std>
 800a37c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a380:	2202      	movs	r2, #2
 800a382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a386:	2112      	movs	r1, #18
 800a388:	f7ff bf86 	b.w	800a298 <std>
 800a38c:	20004774 	.word	0x20004774
 800a390:	2000463c 	.word	0x2000463c
 800a394:	0800a305 	.word	0x0800a305

0800a398 <__sfp_lock_acquire>:
 800a398:	4801      	ldr	r0, [pc, #4]	@ (800a3a0 <__sfp_lock_acquire+0x8>)
 800a39a:	f000 b956 	b.w	800a64a <__retarget_lock_acquire_recursive>
 800a39e:	bf00      	nop
 800a3a0:	2000477d 	.word	0x2000477d

0800a3a4 <__sfp_lock_release>:
 800a3a4:	4801      	ldr	r0, [pc, #4]	@ (800a3ac <__sfp_lock_release+0x8>)
 800a3a6:	f000 b951 	b.w	800a64c <__retarget_lock_release_recursive>
 800a3aa:	bf00      	nop
 800a3ac:	2000477d 	.word	0x2000477d

0800a3b0 <__sinit>:
 800a3b0:	b510      	push	{r4, lr}
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	f7ff fff0 	bl	800a398 <__sfp_lock_acquire>
 800a3b8:	6a23      	ldr	r3, [r4, #32]
 800a3ba:	b11b      	cbz	r3, 800a3c4 <__sinit+0x14>
 800a3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3c0:	f7ff bff0 	b.w	800a3a4 <__sfp_lock_release>
 800a3c4:	4b04      	ldr	r3, [pc, #16]	@ (800a3d8 <__sinit+0x28>)
 800a3c6:	6223      	str	r3, [r4, #32]
 800a3c8:	4b04      	ldr	r3, [pc, #16]	@ (800a3dc <__sinit+0x2c>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1f5      	bne.n	800a3bc <__sinit+0xc>
 800a3d0:	f7ff ffc4 	bl	800a35c <global_stdio_init.part.0>
 800a3d4:	e7f2      	b.n	800a3bc <__sinit+0xc>
 800a3d6:	bf00      	nop
 800a3d8:	0800a31d 	.word	0x0800a31d
 800a3dc:	20004774 	.word	0x20004774

0800a3e0 <_fwalk_sglue>:
 800a3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e4:	4607      	mov	r7, r0
 800a3e6:	4688      	mov	r8, r1
 800a3e8:	4614      	mov	r4, r2
 800a3ea:	2600      	movs	r6, #0
 800a3ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3f0:	f1b9 0901 	subs.w	r9, r9, #1
 800a3f4:	d505      	bpl.n	800a402 <_fwalk_sglue+0x22>
 800a3f6:	6824      	ldr	r4, [r4, #0]
 800a3f8:	2c00      	cmp	r4, #0
 800a3fa:	d1f7      	bne.n	800a3ec <_fwalk_sglue+0xc>
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d907      	bls.n	800a418 <_fwalk_sglue+0x38>
 800a408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a40c:	3301      	adds	r3, #1
 800a40e:	d003      	beq.n	800a418 <_fwalk_sglue+0x38>
 800a410:	4629      	mov	r1, r5
 800a412:	4638      	mov	r0, r7
 800a414:	47c0      	blx	r8
 800a416:	4306      	orrs	r6, r0
 800a418:	3568      	adds	r5, #104	@ 0x68
 800a41a:	e7e9      	b.n	800a3f0 <_fwalk_sglue+0x10>

0800a41c <__sread>:
 800a41c:	b510      	push	{r4, lr}
 800a41e:	460c      	mov	r4, r1
 800a420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a424:	f000 f8c2 	bl	800a5ac <_read_r>
 800a428:	2800      	cmp	r0, #0
 800a42a:	bfab      	itete	ge
 800a42c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a42e:	89a3      	ldrhlt	r3, [r4, #12]
 800a430:	181b      	addge	r3, r3, r0
 800a432:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a436:	bfac      	ite	ge
 800a438:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a43a:	81a3      	strhlt	r3, [r4, #12]
 800a43c:	bd10      	pop	{r4, pc}

0800a43e <__swrite>:
 800a43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a442:	461f      	mov	r7, r3
 800a444:	898b      	ldrh	r3, [r1, #12]
 800a446:	05db      	lsls	r3, r3, #23
 800a448:	4605      	mov	r5, r0
 800a44a:	460c      	mov	r4, r1
 800a44c:	4616      	mov	r6, r2
 800a44e:	d505      	bpl.n	800a45c <__swrite+0x1e>
 800a450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a454:	2302      	movs	r3, #2
 800a456:	2200      	movs	r2, #0
 800a458:	f000 f896 	bl	800a588 <_lseek_r>
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a462:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a466:	81a3      	strh	r3, [r4, #12]
 800a468:	4632      	mov	r2, r6
 800a46a:	463b      	mov	r3, r7
 800a46c:	4628      	mov	r0, r5
 800a46e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a472:	f000 b8ad 	b.w	800a5d0 <_write_r>

0800a476 <__sseek>:
 800a476:	b510      	push	{r4, lr}
 800a478:	460c      	mov	r4, r1
 800a47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a47e:	f000 f883 	bl	800a588 <_lseek_r>
 800a482:	1c43      	adds	r3, r0, #1
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	bf15      	itete	ne
 800a488:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a48a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a48e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a492:	81a3      	strheq	r3, [r4, #12]
 800a494:	bf18      	it	ne
 800a496:	81a3      	strhne	r3, [r4, #12]
 800a498:	bd10      	pop	{r4, pc}

0800a49a <__sclose>:
 800a49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a49e:	f000 b80d 	b.w	800a4bc <_close_r>

0800a4a2 <memset>:
 800a4a2:	4402      	add	r2, r0
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d100      	bne.n	800a4ac <memset+0xa>
 800a4aa:	4770      	bx	lr
 800a4ac:	f803 1b01 	strb.w	r1, [r3], #1
 800a4b0:	e7f9      	b.n	800a4a6 <memset+0x4>
	...

0800a4b4 <_localeconv_r>:
 800a4b4:	4800      	ldr	r0, [pc, #0]	@ (800a4b8 <_localeconv_r+0x4>)
 800a4b6:	4770      	bx	lr
 800a4b8:	2000015c 	.word	0x2000015c

0800a4bc <_close_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	4d06      	ldr	r5, [pc, #24]	@ (800a4d8 <_close_r+0x1c>)
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	4608      	mov	r0, r1
 800a4c6:	602b      	str	r3, [r5, #0]
 800a4c8:	f7f7 fafc 	bl	8001ac4 <_close>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d102      	bne.n	800a4d6 <_close_r+0x1a>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	b103      	cbz	r3, 800a4d6 <_close_r+0x1a>
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	20004778 	.word	0x20004778

0800a4dc <_reclaim_reent>:
 800a4dc:	4b29      	ldr	r3, [pc, #164]	@ (800a584 <_reclaim_reent+0xa8>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4283      	cmp	r3, r0
 800a4e2:	b570      	push	{r4, r5, r6, lr}
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	d04b      	beq.n	800a580 <_reclaim_reent+0xa4>
 800a4e8:	69c3      	ldr	r3, [r0, #28]
 800a4ea:	b1ab      	cbz	r3, 800a518 <_reclaim_reent+0x3c>
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	b16b      	cbz	r3, 800a50c <_reclaim_reent+0x30>
 800a4f0:	2500      	movs	r5, #0
 800a4f2:	69e3      	ldr	r3, [r4, #28]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	5959      	ldr	r1, [r3, r5]
 800a4f8:	2900      	cmp	r1, #0
 800a4fa:	d13b      	bne.n	800a574 <_reclaim_reent+0x98>
 800a4fc:	3504      	adds	r5, #4
 800a4fe:	2d80      	cmp	r5, #128	@ 0x80
 800a500:	d1f7      	bne.n	800a4f2 <_reclaim_reent+0x16>
 800a502:	69e3      	ldr	r3, [r4, #28]
 800a504:	4620      	mov	r0, r4
 800a506:	68d9      	ldr	r1, [r3, #12]
 800a508:	f000 fefe 	bl	800b308 <_free_r>
 800a50c:	69e3      	ldr	r3, [r4, #28]
 800a50e:	6819      	ldr	r1, [r3, #0]
 800a510:	b111      	cbz	r1, 800a518 <_reclaim_reent+0x3c>
 800a512:	4620      	mov	r0, r4
 800a514:	f000 fef8 	bl	800b308 <_free_r>
 800a518:	6961      	ldr	r1, [r4, #20]
 800a51a:	b111      	cbz	r1, 800a522 <_reclaim_reent+0x46>
 800a51c:	4620      	mov	r0, r4
 800a51e:	f000 fef3 	bl	800b308 <_free_r>
 800a522:	69e1      	ldr	r1, [r4, #28]
 800a524:	b111      	cbz	r1, 800a52c <_reclaim_reent+0x50>
 800a526:	4620      	mov	r0, r4
 800a528:	f000 feee 	bl	800b308 <_free_r>
 800a52c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a52e:	b111      	cbz	r1, 800a536 <_reclaim_reent+0x5a>
 800a530:	4620      	mov	r0, r4
 800a532:	f000 fee9 	bl	800b308 <_free_r>
 800a536:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a538:	b111      	cbz	r1, 800a540 <_reclaim_reent+0x64>
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 fee4 	bl	800b308 <_free_r>
 800a540:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a542:	b111      	cbz	r1, 800a54a <_reclaim_reent+0x6e>
 800a544:	4620      	mov	r0, r4
 800a546:	f000 fedf 	bl	800b308 <_free_r>
 800a54a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a54c:	b111      	cbz	r1, 800a554 <_reclaim_reent+0x78>
 800a54e:	4620      	mov	r0, r4
 800a550:	f000 feda 	bl	800b308 <_free_r>
 800a554:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a556:	b111      	cbz	r1, 800a55e <_reclaim_reent+0x82>
 800a558:	4620      	mov	r0, r4
 800a55a:	f000 fed5 	bl	800b308 <_free_r>
 800a55e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a560:	b111      	cbz	r1, 800a568 <_reclaim_reent+0x8c>
 800a562:	4620      	mov	r0, r4
 800a564:	f000 fed0 	bl	800b308 <_free_r>
 800a568:	6a23      	ldr	r3, [r4, #32]
 800a56a:	b14b      	cbz	r3, 800a580 <_reclaim_reent+0xa4>
 800a56c:	4620      	mov	r0, r4
 800a56e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a572:	4718      	bx	r3
 800a574:	680e      	ldr	r6, [r1, #0]
 800a576:	4620      	mov	r0, r4
 800a578:	f000 fec6 	bl	800b308 <_free_r>
 800a57c:	4631      	mov	r1, r6
 800a57e:	e7bb      	b.n	800a4f8 <_reclaim_reent+0x1c>
 800a580:	bd70      	pop	{r4, r5, r6, pc}
 800a582:	bf00      	nop
 800a584:	2000001c 	.word	0x2000001c

0800a588 <_lseek_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4d07      	ldr	r5, [pc, #28]	@ (800a5a8 <_lseek_r+0x20>)
 800a58c:	4604      	mov	r4, r0
 800a58e:	4608      	mov	r0, r1
 800a590:	4611      	mov	r1, r2
 800a592:	2200      	movs	r2, #0
 800a594:	602a      	str	r2, [r5, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	f7f7 fabb 	bl	8001b12 <_lseek>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_lseek_r+0x1e>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_lseek_r+0x1e>
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	20004778 	.word	0x20004778

0800a5ac <_read_r>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	4d07      	ldr	r5, [pc, #28]	@ (800a5cc <_read_r+0x20>)
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	4608      	mov	r0, r1
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	602a      	str	r2, [r5, #0]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	f7f7 fa49 	bl	8001a52 <_read>
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	d102      	bne.n	800a5ca <_read_r+0x1e>
 800a5c4:	682b      	ldr	r3, [r5, #0]
 800a5c6:	b103      	cbz	r3, 800a5ca <_read_r+0x1e>
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	bd38      	pop	{r3, r4, r5, pc}
 800a5cc:	20004778 	.word	0x20004778

0800a5d0 <_write_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	4d07      	ldr	r5, [pc, #28]	@ (800a5f0 <_write_r+0x20>)
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	4608      	mov	r0, r1
 800a5d8:	4611      	mov	r1, r2
 800a5da:	2200      	movs	r2, #0
 800a5dc:	602a      	str	r2, [r5, #0]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	f7f7 fa54 	bl	8001a8c <_write>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	d102      	bne.n	800a5ee <_write_r+0x1e>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	b103      	cbz	r3, 800a5ee <_write_r+0x1e>
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	20004778 	.word	0x20004778

0800a5f4 <__errno>:
 800a5f4:	4b01      	ldr	r3, [pc, #4]	@ (800a5fc <__errno+0x8>)
 800a5f6:	6818      	ldr	r0, [r3, #0]
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	2000001c 	.word	0x2000001c

0800a600 <__libc_init_array>:
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	4d0d      	ldr	r5, [pc, #52]	@ (800a638 <__libc_init_array+0x38>)
 800a604:	4c0d      	ldr	r4, [pc, #52]	@ (800a63c <__libc_init_array+0x3c>)
 800a606:	1b64      	subs	r4, r4, r5
 800a608:	10a4      	asrs	r4, r4, #2
 800a60a:	2600      	movs	r6, #0
 800a60c:	42a6      	cmp	r6, r4
 800a60e:	d109      	bne.n	800a624 <__libc_init_array+0x24>
 800a610:	4d0b      	ldr	r5, [pc, #44]	@ (800a640 <__libc_init_array+0x40>)
 800a612:	4c0c      	ldr	r4, [pc, #48]	@ (800a644 <__libc_init_array+0x44>)
 800a614:	f001 febe 	bl	800c394 <_init>
 800a618:	1b64      	subs	r4, r4, r5
 800a61a:	10a4      	asrs	r4, r4, #2
 800a61c:	2600      	movs	r6, #0
 800a61e:	42a6      	cmp	r6, r4
 800a620:	d105      	bne.n	800a62e <__libc_init_array+0x2e>
 800a622:	bd70      	pop	{r4, r5, r6, pc}
 800a624:	f855 3b04 	ldr.w	r3, [r5], #4
 800a628:	4798      	blx	r3
 800a62a:	3601      	adds	r6, #1
 800a62c:	e7ee      	b.n	800a60c <__libc_init_array+0xc>
 800a62e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a632:	4798      	blx	r3
 800a634:	3601      	adds	r6, #1
 800a636:	e7f2      	b.n	800a61e <__libc_init_array+0x1e>
 800a638:	0800c798 	.word	0x0800c798
 800a63c:	0800c798 	.word	0x0800c798
 800a640:	0800c798 	.word	0x0800c798
 800a644:	0800c79c 	.word	0x0800c79c

0800a648 <__retarget_lock_init_recursive>:
 800a648:	4770      	bx	lr

0800a64a <__retarget_lock_acquire_recursive>:
 800a64a:	4770      	bx	lr

0800a64c <__retarget_lock_release_recursive>:
 800a64c:	4770      	bx	lr

0800a64e <memcpy>:
 800a64e:	440a      	add	r2, r1
 800a650:	4291      	cmp	r1, r2
 800a652:	f100 33ff 	add.w	r3, r0, #4294967295
 800a656:	d100      	bne.n	800a65a <memcpy+0xc>
 800a658:	4770      	bx	lr
 800a65a:	b510      	push	{r4, lr}
 800a65c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a660:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a664:	4291      	cmp	r1, r2
 800a666:	d1f9      	bne.n	800a65c <memcpy+0xe>
 800a668:	bd10      	pop	{r4, pc}

0800a66a <quorem>:
 800a66a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66e:	6903      	ldr	r3, [r0, #16]
 800a670:	690c      	ldr	r4, [r1, #16]
 800a672:	42a3      	cmp	r3, r4
 800a674:	4607      	mov	r7, r0
 800a676:	db7e      	blt.n	800a776 <quorem+0x10c>
 800a678:	3c01      	subs	r4, #1
 800a67a:	f101 0814 	add.w	r8, r1, #20
 800a67e:	00a3      	lsls	r3, r4, #2
 800a680:	f100 0514 	add.w	r5, r0, #20
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a68a:	9301      	str	r3, [sp, #4]
 800a68c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a690:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a694:	3301      	adds	r3, #1
 800a696:	429a      	cmp	r2, r3
 800a698:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a69c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6a0:	d32e      	bcc.n	800a700 <quorem+0x96>
 800a6a2:	f04f 0a00 	mov.w	sl, #0
 800a6a6:	46c4      	mov	ip, r8
 800a6a8:	46ae      	mov	lr, r5
 800a6aa:	46d3      	mov	fp, sl
 800a6ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a6b0:	b298      	uxth	r0, r3
 800a6b2:	fb06 a000 	mla	r0, r6, r0, sl
 800a6b6:	0c02      	lsrs	r2, r0, #16
 800a6b8:	0c1b      	lsrs	r3, r3, #16
 800a6ba:	fb06 2303 	mla	r3, r6, r3, r2
 800a6be:	f8de 2000 	ldr.w	r2, [lr]
 800a6c2:	b280      	uxth	r0, r0
 800a6c4:	b292      	uxth	r2, r2
 800a6c6:	1a12      	subs	r2, r2, r0
 800a6c8:	445a      	add	r2, fp
 800a6ca:	f8de 0000 	ldr.w	r0, [lr]
 800a6ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a6d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a6dc:	b292      	uxth	r2, r2
 800a6de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a6e2:	45e1      	cmp	r9, ip
 800a6e4:	f84e 2b04 	str.w	r2, [lr], #4
 800a6e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a6ec:	d2de      	bcs.n	800a6ac <quorem+0x42>
 800a6ee:	9b00      	ldr	r3, [sp, #0]
 800a6f0:	58eb      	ldr	r3, [r5, r3]
 800a6f2:	b92b      	cbnz	r3, 800a700 <quorem+0x96>
 800a6f4:	9b01      	ldr	r3, [sp, #4]
 800a6f6:	3b04      	subs	r3, #4
 800a6f8:	429d      	cmp	r5, r3
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	d32f      	bcc.n	800a75e <quorem+0xf4>
 800a6fe:	613c      	str	r4, [r7, #16]
 800a700:	4638      	mov	r0, r7
 800a702:	f001 f97b 	bl	800b9fc <__mcmp>
 800a706:	2800      	cmp	r0, #0
 800a708:	db25      	blt.n	800a756 <quorem+0xec>
 800a70a:	4629      	mov	r1, r5
 800a70c:	2000      	movs	r0, #0
 800a70e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a712:	f8d1 c000 	ldr.w	ip, [r1]
 800a716:	fa1f fe82 	uxth.w	lr, r2
 800a71a:	fa1f f38c 	uxth.w	r3, ip
 800a71e:	eba3 030e 	sub.w	r3, r3, lr
 800a722:	4403      	add	r3, r0
 800a724:	0c12      	lsrs	r2, r2, #16
 800a726:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a72a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a72e:	b29b      	uxth	r3, r3
 800a730:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a734:	45c1      	cmp	r9, r8
 800a736:	f841 3b04 	str.w	r3, [r1], #4
 800a73a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a73e:	d2e6      	bcs.n	800a70e <quorem+0xa4>
 800a740:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a744:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a748:	b922      	cbnz	r2, 800a754 <quorem+0xea>
 800a74a:	3b04      	subs	r3, #4
 800a74c:	429d      	cmp	r5, r3
 800a74e:	461a      	mov	r2, r3
 800a750:	d30b      	bcc.n	800a76a <quorem+0x100>
 800a752:	613c      	str	r4, [r7, #16]
 800a754:	3601      	adds	r6, #1
 800a756:	4630      	mov	r0, r6
 800a758:	b003      	add	sp, #12
 800a75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75e:	6812      	ldr	r2, [r2, #0]
 800a760:	3b04      	subs	r3, #4
 800a762:	2a00      	cmp	r2, #0
 800a764:	d1cb      	bne.n	800a6fe <quorem+0x94>
 800a766:	3c01      	subs	r4, #1
 800a768:	e7c6      	b.n	800a6f8 <quorem+0x8e>
 800a76a:	6812      	ldr	r2, [r2, #0]
 800a76c:	3b04      	subs	r3, #4
 800a76e:	2a00      	cmp	r2, #0
 800a770:	d1ef      	bne.n	800a752 <quorem+0xe8>
 800a772:	3c01      	subs	r4, #1
 800a774:	e7ea      	b.n	800a74c <quorem+0xe2>
 800a776:	2000      	movs	r0, #0
 800a778:	e7ee      	b.n	800a758 <quorem+0xee>
 800a77a:	0000      	movs	r0, r0
 800a77c:	0000      	movs	r0, r0
	...

0800a780 <_dtoa_r>:
 800a780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a784:	69c7      	ldr	r7, [r0, #28]
 800a786:	b099      	sub	sp, #100	@ 0x64
 800a788:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a78c:	ec55 4b10 	vmov	r4, r5, d0
 800a790:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a792:	9109      	str	r1, [sp, #36]	@ 0x24
 800a794:	4683      	mov	fp, r0
 800a796:	920e      	str	r2, [sp, #56]	@ 0x38
 800a798:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a79a:	b97f      	cbnz	r7, 800a7bc <_dtoa_r+0x3c>
 800a79c:	2010      	movs	r0, #16
 800a79e:	f000 fdfd 	bl	800b39c <malloc>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a7a8:	b920      	cbnz	r0, 800a7b4 <_dtoa_r+0x34>
 800a7aa:	4ba7      	ldr	r3, [pc, #668]	@ (800aa48 <_dtoa_r+0x2c8>)
 800a7ac:	21ef      	movs	r1, #239	@ 0xef
 800a7ae:	48a7      	ldr	r0, [pc, #668]	@ (800aa4c <_dtoa_r+0x2cc>)
 800a7b0:	f001 fae8 	bl	800bd84 <__assert_func>
 800a7b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a7b8:	6007      	str	r7, [r0, #0]
 800a7ba:	60c7      	str	r7, [r0, #12]
 800a7bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a7c0:	6819      	ldr	r1, [r3, #0]
 800a7c2:	b159      	cbz	r1, 800a7dc <_dtoa_r+0x5c>
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	604a      	str	r2, [r1, #4]
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	4093      	lsls	r3, r2
 800a7cc:	608b      	str	r3, [r1, #8]
 800a7ce:	4658      	mov	r0, fp
 800a7d0:	f000 feda 	bl	800b588 <_Bfree>
 800a7d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	601a      	str	r2, [r3, #0]
 800a7dc:	1e2b      	subs	r3, r5, #0
 800a7de:	bfb9      	ittee	lt
 800a7e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a7e4:	9303      	strlt	r3, [sp, #12]
 800a7e6:	2300      	movge	r3, #0
 800a7e8:	6033      	strge	r3, [r6, #0]
 800a7ea:	9f03      	ldr	r7, [sp, #12]
 800a7ec:	4b98      	ldr	r3, [pc, #608]	@ (800aa50 <_dtoa_r+0x2d0>)
 800a7ee:	bfbc      	itt	lt
 800a7f0:	2201      	movlt	r2, #1
 800a7f2:	6032      	strlt	r2, [r6, #0]
 800a7f4:	43bb      	bics	r3, r7
 800a7f6:	d112      	bne.n	800a81e <_dtoa_r+0x9e>
 800a7f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a7fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a7fe:	6013      	str	r3, [r2, #0]
 800a800:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a804:	4323      	orrs	r3, r4
 800a806:	f000 854d 	beq.w	800b2a4 <_dtoa_r+0xb24>
 800a80a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a80c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800aa64 <_dtoa_r+0x2e4>
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 854f 	beq.w	800b2b4 <_dtoa_r+0xb34>
 800a816:	f10a 0303 	add.w	r3, sl, #3
 800a81a:	f000 bd49 	b.w	800b2b0 <_dtoa_r+0xb30>
 800a81e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a822:	2200      	movs	r2, #0
 800a824:	ec51 0b17 	vmov	r0, r1, d7
 800a828:	2300      	movs	r3, #0
 800a82a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a82e:	f7f6 f973 	bl	8000b18 <__aeabi_dcmpeq>
 800a832:	4680      	mov	r8, r0
 800a834:	b158      	cbz	r0, 800a84e <_dtoa_r+0xce>
 800a836:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a838:	2301      	movs	r3, #1
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a83e:	b113      	cbz	r3, 800a846 <_dtoa_r+0xc6>
 800a840:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a842:	4b84      	ldr	r3, [pc, #528]	@ (800aa54 <_dtoa_r+0x2d4>)
 800a844:	6013      	str	r3, [r2, #0]
 800a846:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800aa68 <_dtoa_r+0x2e8>
 800a84a:	f000 bd33 	b.w	800b2b4 <_dtoa_r+0xb34>
 800a84e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a852:	aa16      	add	r2, sp, #88	@ 0x58
 800a854:	a917      	add	r1, sp, #92	@ 0x5c
 800a856:	4658      	mov	r0, fp
 800a858:	f001 f980 	bl	800bb5c <__d2b>
 800a85c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a860:	4681      	mov	r9, r0
 800a862:	2e00      	cmp	r6, #0
 800a864:	d077      	beq.n	800a956 <_dtoa_r+0x1d6>
 800a866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a868:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a86c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a874:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a878:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a87c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a880:	4619      	mov	r1, r3
 800a882:	2200      	movs	r2, #0
 800a884:	4b74      	ldr	r3, [pc, #464]	@ (800aa58 <_dtoa_r+0x2d8>)
 800a886:	f7f5 fd27 	bl	80002d8 <__aeabi_dsub>
 800a88a:	a369      	add	r3, pc, #420	@ (adr r3, 800aa30 <_dtoa_r+0x2b0>)
 800a88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a890:	f7f5 feda 	bl	8000648 <__aeabi_dmul>
 800a894:	a368      	add	r3, pc, #416	@ (adr r3, 800aa38 <_dtoa_r+0x2b8>)
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	f7f5 fd1f 	bl	80002dc <__adddf3>
 800a89e:	4604      	mov	r4, r0
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	460d      	mov	r5, r1
 800a8a4:	f7f5 fe66 	bl	8000574 <__aeabi_i2d>
 800a8a8:	a365      	add	r3, pc, #404	@ (adr r3, 800aa40 <_dtoa_r+0x2c0>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	f7f5 fecb 	bl	8000648 <__aeabi_dmul>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7f5 fd0f 	bl	80002dc <__adddf3>
 800a8be:	4604      	mov	r4, r0
 800a8c0:	460d      	mov	r5, r1
 800a8c2:	f7f6 f971 	bl	8000ba8 <__aeabi_d2iz>
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	4607      	mov	r7, r0
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	f7f6 f92c 	bl	8000b2c <__aeabi_dcmplt>
 800a8d4:	b140      	cbz	r0, 800a8e8 <_dtoa_r+0x168>
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	f7f5 fe4c 	bl	8000574 <__aeabi_i2d>
 800a8dc:	4622      	mov	r2, r4
 800a8de:	462b      	mov	r3, r5
 800a8e0:	f7f6 f91a 	bl	8000b18 <__aeabi_dcmpeq>
 800a8e4:	b900      	cbnz	r0, 800a8e8 <_dtoa_r+0x168>
 800a8e6:	3f01      	subs	r7, #1
 800a8e8:	2f16      	cmp	r7, #22
 800a8ea:	d851      	bhi.n	800a990 <_dtoa_r+0x210>
 800a8ec:	4b5b      	ldr	r3, [pc, #364]	@ (800aa5c <_dtoa_r+0x2dc>)
 800a8ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8fa:	f7f6 f917 	bl	8000b2c <__aeabi_dcmplt>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d048      	beq.n	800a994 <_dtoa_r+0x214>
 800a902:	3f01      	subs	r7, #1
 800a904:	2300      	movs	r3, #0
 800a906:	9312      	str	r3, [sp, #72]	@ 0x48
 800a908:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a90a:	1b9b      	subs	r3, r3, r6
 800a90c:	1e5a      	subs	r2, r3, #1
 800a90e:	bf44      	itt	mi
 800a910:	f1c3 0801 	rsbmi	r8, r3, #1
 800a914:	2300      	movmi	r3, #0
 800a916:	9208      	str	r2, [sp, #32]
 800a918:	bf54      	ite	pl
 800a91a:	f04f 0800 	movpl.w	r8, #0
 800a91e:	9308      	strmi	r3, [sp, #32]
 800a920:	2f00      	cmp	r7, #0
 800a922:	db39      	blt.n	800a998 <_dtoa_r+0x218>
 800a924:	9b08      	ldr	r3, [sp, #32]
 800a926:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a928:	443b      	add	r3, r7
 800a92a:	9308      	str	r3, [sp, #32]
 800a92c:	2300      	movs	r3, #0
 800a92e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a932:	2b09      	cmp	r3, #9
 800a934:	d864      	bhi.n	800aa00 <_dtoa_r+0x280>
 800a936:	2b05      	cmp	r3, #5
 800a938:	bfc4      	itt	gt
 800a93a:	3b04      	subgt	r3, #4
 800a93c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a940:	f1a3 0302 	sub.w	r3, r3, #2
 800a944:	bfcc      	ite	gt
 800a946:	2400      	movgt	r4, #0
 800a948:	2401      	movle	r4, #1
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	d863      	bhi.n	800aa16 <_dtoa_r+0x296>
 800a94e:	e8df f003 	tbb	[pc, r3]
 800a952:	372a      	.short	0x372a
 800a954:	5535      	.short	0x5535
 800a956:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a95a:	441e      	add	r6, r3
 800a95c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a960:	2b20      	cmp	r3, #32
 800a962:	bfc1      	itttt	gt
 800a964:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a968:	409f      	lslgt	r7, r3
 800a96a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a96e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a972:	bfd6      	itet	le
 800a974:	f1c3 0320 	rsble	r3, r3, #32
 800a978:	ea47 0003 	orrgt.w	r0, r7, r3
 800a97c:	fa04 f003 	lslle.w	r0, r4, r3
 800a980:	f7f5 fde8 	bl	8000554 <__aeabi_ui2d>
 800a984:	2201      	movs	r2, #1
 800a986:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a98a:	3e01      	subs	r6, #1
 800a98c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a98e:	e777      	b.n	800a880 <_dtoa_r+0x100>
 800a990:	2301      	movs	r3, #1
 800a992:	e7b8      	b.n	800a906 <_dtoa_r+0x186>
 800a994:	9012      	str	r0, [sp, #72]	@ 0x48
 800a996:	e7b7      	b.n	800a908 <_dtoa_r+0x188>
 800a998:	427b      	negs	r3, r7
 800a99a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a99c:	2300      	movs	r3, #0
 800a99e:	eba8 0807 	sub.w	r8, r8, r7
 800a9a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a9a4:	e7c4      	b.n	800a930 <_dtoa_r+0x1b0>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	dc35      	bgt.n	800aa1c <_dtoa_r+0x29c>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	9307      	str	r3, [sp, #28]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9ba:	e00b      	b.n	800a9d4 <_dtoa_r+0x254>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e7f3      	b.n	800a9a8 <_dtoa_r+0x228>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9c6:	18fb      	adds	r3, r7, r3
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	9307      	str	r3, [sp, #28]
 800a9d0:	bfb8      	it	lt
 800a9d2:	2301      	movlt	r3, #1
 800a9d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a9d8:	2100      	movs	r1, #0
 800a9da:	2204      	movs	r2, #4
 800a9dc:	f102 0514 	add.w	r5, r2, #20
 800a9e0:	429d      	cmp	r5, r3
 800a9e2:	d91f      	bls.n	800aa24 <_dtoa_r+0x2a4>
 800a9e4:	6041      	str	r1, [r0, #4]
 800a9e6:	4658      	mov	r0, fp
 800a9e8:	f000 fd8e 	bl	800b508 <_Balloc>
 800a9ec:	4682      	mov	sl, r0
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d13c      	bne.n	800aa6c <_dtoa_r+0x2ec>
 800a9f2:	4b1b      	ldr	r3, [pc, #108]	@ (800aa60 <_dtoa_r+0x2e0>)
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a9fa:	e6d8      	b.n	800a7ae <_dtoa_r+0x2e>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e7e0      	b.n	800a9c2 <_dtoa_r+0x242>
 800aa00:	2401      	movs	r4, #1
 800aa02:	2300      	movs	r3, #0
 800aa04:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa06:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aa08:	f04f 33ff 	mov.w	r3, #4294967295
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	9307      	str	r3, [sp, #28]
 800aa10:	2200      	movs	r2, #0
 800aa12:	2312      	movs	r3, #18
 800aa14:	e7d0      	b.n	800a9b8 <_dtoa_r+0x238>
 800aa16:	2301      	movs	r3, #1
 800aa18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa1a:	e7f5      	b.n	800aa08 <_dtoa_r+0x288>
 800aa1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	9307      	str	r3, [sp, #28]
 800aa22:	e7d7      	b.n	800a9d4 <_dtoa_r+0x254>
 800aa24:	3101      	adds	r1, #1
 800aa26:	0052      	lsls	r2, r2, #1
 800aa28:	e7d8      	b.n	800a9dc <_dtoa_r+0x25c>
 800aa2a:	bf00      	nop
 800aa2c:	f3af 8000 	nop.w
 800aa30:	636f4361 	.word	0x636f4361
 800aa34:	3fd287a7 	.word	0x3fd287a7
 800aa38:	8b60c8b3 	.word	0x8b60c8b3
 800aa3c:	3fc68a28 	.word	0x3fc68a28
 800aa40:	509f79fb 	.word	0x509f79fb
 800aa44:	3fd34413 	.word	0x3fd34413
 800aa48:	0800c461 	.word	0x0800c461
 800aa4c:	0800c478 	.word	0x0800c478
 800aa50:	7ff00000 	.word	0x7ff00000
 800aa54:	0800c431 	.word	0x0800c431
 800aa58:	3ff80000 	.word	0x3ff80000
 800aa5c:	0800c570 	.word	0x0800c570
 800aa60:	0800c4d0 	.word	0x0800c4d0
 800aa64:	0800c45d 	.word	0x0800c45d
 800aa68:	0800c430 	.word	0x0800c430
 800aa6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa70:	6018      	str	r0, [r3, #0]
 800aa72:	9b07      	ldr	r3, [sp, #28]
 800aa74:	2b0e      	cmp	r3, #14
 800aa76:	f200 80a4 	bhi.w	800abc2 <_dtoa_r+0x442>
 800aa7a:	2c00      	cmp	r4, #0
 800aa7c:	f000 80a1 	beq.w	800abc2 <_dtoa_r+0x442>
 800aa80:	2f00      	cmp	r7, #0
 800aa82:	dd33      	ble.n	800aaec <_dtoa_r+0x36c>
 800aa84:	4bad      	ldr	r3, [pc, #692]	@ (800ad3c <_dtoa_r+0x5bc>)
 800aa86:	f007 020f 	and.w	r2, r7, #15
 800aa8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa8e:	ed93 7b00 	vldr	d7, [r3]
 800aa92:	05f8      	lsls	r0, r7, #23
 800aa94:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aa98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aa9c:	d516      	bpl.n	800aacc <_dtoa_r+0x34c>
 800aa9e:	4ba8      	ldr	r3, [pc, #672]	@ (800ad40 <_dtoa_r+0x5c0>)
 800aaa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aaa8:	f7f5 fef8 	bl	800089c <__aeabi_ddiv>
 800aaac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aab0:	f004 040f 	and.w	r4, r4, #15
 800aab4:	2603      	movs	r6, #3
 800aab6:	4da2      	ldr	r5, [pc, #648]	@ (800ad40 <_dtoa_r+0x5c0>)
 800aab8:	b954      	cbnz	r4, 800aad0 <_dtoa_r+0x350>
 800aaba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aabe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aac2:	f7f5 feeb 	bl	800089c <__aeabi_ddiv>
 800aac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaca:	e028      	b.n	800ab1e <_dtoa_r+0x39e>
 800aacc:	2602      	movs	r6, #2
 800aace:	e7f2      	b.n	800aab6 <_dtoa_r+0x336>
 800aad0:	07e1      	lsls	r1, r4, #31
 800aad2:	d508      	bpl.n	800aae6 <_dtoa_r+0x366>
 800aad4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aad8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aadc:	f7f5 fdb4 	bl	8000648 <__aeabi_dmul>
 800aae0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aae4:	3601      	adds	r6, #1
 800aae6:	1064      	asrs	r4, r4, #1
 800aae8:	3508      	adds	r5, #8
 800aaea:	e7e5      	b.n	800aab8 <_dtoa_r+0x338>
 800aaec:	f000 80d2 	beq.w	800ac94 <_dtoa_r+0x514>
 800aaf0:	427c      	negs	r4, r7
 800aaf2:	4b92      	ldr	r3, [pc, #584]	@ (800ad3c <_dtoa_r+0x5bc>)
 800aaf4:	4d92      	ldr	r5, [pc, #584]	@ (800ad40 <_dtoa_r+0x5c0>)
 800aaf6:	f004 020f 	and.w	r2, r4, #15
 800aafa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab06:	f7f5 fd9f 	bl	8000648 <__aeabi_dmul>
 800ab0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab0e:	1124      	asrs	r4, r4, #4
 800ab10:	2300      	movs	r3, #0
 800ab12:	2602      	movs	r6, #2
 800ab14:	2c00      	cmp	r4, #0
 800ab16:	f040 80b2 	bne.w	800ac7e <_dtoa_r+0x4fe>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1d3      	bne.n	800aac6 <_dtoa_r+0x346>
 800ab1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 80b7 	beq.w	800ac98 <_dtoa_r+0x518>
 800ab2a:	4b86      	ldr	r3, [pc, #536]	@ (800ad44 <_dtoa_r+0x5c4>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	4620      	mov	r0, r4
 800ab30:	4629      	mov	r1, r5
 800ab32:	f7f5 fffb 	bl	8000b2c <__aeabi_dcmplt>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	f000 80ae 	beq.w	800ac98 <_dtoa_r+0x518>
 800ab3c:	9b07      	ldr	r3, [sp, #28]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 80aa 	beq.w	800ac98 <_dtoa_r+0x518>
 800ab44:	9b00      	ldr	r3, [sp, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	dd37      	ble.n	800abba <_dtoa_r+0x43a>
 800ab4a:	1e7b      	subs	r3, r7, #1
 800ab4c:	9304      	str	r3, [sp, #16]
 800ab4e:	4620      	mov	r0, r4
 800ab50:	4b7d      	ldr	r3, [pc, #500]	@ (800ad48 <_dtoa_r+0x5c8>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	4629      	mov	r1, r5
 800ab56:	f7f5 fd77 	bl	8000648 <__aeabi_dmul>
 800ab5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab5e:	9c00      	ldr	r4, [sp, #0]
 800ab60:	3601      	adds	r6, #1
 800ab62:	4630      	mov	r0, r6
 800ab64:	f7f5 fd06 	bl	8000574 <__aeabi_i2d>
 800ab68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab6c:	f7f5 fd6c 	bl	8000648 <__aeabi_dmul>
 800ab70:	4b76      	ldr	r3, [pc, #472]	@ (800ad4c <_dtoa_r+0x5cc>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	f7f5 fbb2 	bl	80002dc <__adddf3>
 800ab78:	4605      	mov	r5, r0
 800ab7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ab7e:	2c00      	cmp	r4, #0
 800ab80:	f040 808d 	bne.w	800ac9e <_dtoa_r+0x51e>
 800ab84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab88:	4b71      	ldr	r3, [pc, #452]	@ (800ad50 <_dtoa_r+0x5d0>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f7f5 fba4 	bl	80002d8 <__aeabi_dsub>
 800ab90:	4602      	mov	r2, r0
 800ab92:	460b      	mov	r3, r1
 800ab94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab98:	462a      	mov	r2, r5
 800ab9a:	4633      	mov	r3, r6
 800ab9c:	f7f5 ffe4 	bl	8000b68 <__aeabi_dcmpgt>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	f040 828b 	bne.w	800b0bc <_dtoa_r+0x93c>
 800aba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abaa:	462a      	mov	r2, r5
 800abac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800abb0:	f7f5 ffbc 	bl	8000b2c <__aeabi_dcmplt>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	f040 8128 	bne.w	800ae0a <_dtoa_r+0x68a>
 800abba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800abbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800abc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f2c0 815a 	blt.w	800ae7e <_dtoa_r+0x6fe>
 800abca:	2f0e      	cmp	r7, #14
 800abcc:	f300 8157 	bgt.w	800ae7e <_dtoa_r+0x6fe>
 800abd0:	4b5a      	ldr	r3, [pc, #360]	@ (800ad3c <_dtoa_r+0x5bc>)
 800abd2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800abd6:	ed93 7b00 	vldr	d7, [r3]
 800abda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abdc:	2b00      	cmp	r3, #0
 800abde:	ed8d 7b00 	vstr	d7, [sp]
 800abe2:	da03      	bge.n	800abec <_dtoa_r+0x46c>
 800abe4:	9b07      	ldr	r3, [sp, #28]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f340 8101 	ble.w	800adee <_dtoa_r+0x66e>
 800abec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800abf0:	4656      	mov	r6, sl
 800abf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abf6:	4620      	mov	r0, r4
 800abf8:	4629      	mov	r1, r5
 800abfa:	f7f5 fe4f 	bl	800089c <__aeabi_ddiv>
 800abfe:	f7f5 ffd3 	bl	8000ba8 <__aeabi_d2iz>
 800ac02:	4680      	mov	r8, r0
 800ac04:	f7f5 fcb6 	bl	8000574 <__aeabi_i2d>
 800ac08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac0c:	f7f5 fd1c 	bl	8000648 <__aeabi_dmul>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	4620      	mov	r0, r4
 800ac16:	4629      	mov	r1, r5
 800ac18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ac1c:	f7f5 fb5c 	bl	80002d8 <__aeabi_dsub>
 800ac20:	f806 4b01 	strb.w	r4, [r6], #1
 800ac24:	9d07      	ldr	r5, [sp, #28]
 800ac26:	eba6 040a 	sub.w	r4, r6, sl
 800ac2a:	42a5      	cmp	r5, r4
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	f040 8117 	bne.w	800ae62 <_dtoa_r+0x6e2>
 800ac34:	f7f5 fb52 	bl	80002dc <__adddf3>
 800ac38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	460d      	mov	r5, r1
 800ac40:	f7f5 ff92 	bl	8000b68 <__aeabi_dcmpgt>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	f040 80f9 	bne.w	800ae3c <_dtoa_r+0x6bc>
 800ac4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	4629      	mov	r1, r5
 800ac52:	f7f5 ff61 	bl	8000b18 <__aeabi_dcmpeq>
 800ac56:	b118      	cbz	r0, 800ac60 <_dtoa_r+0x4e0>
 800ac58:	f018 0f01 	tst.w	r8, #1
 800ac5c:	f040 80ee 	bne.w	800ae3c <_dtoa_r+0x6bc>
 800ac60:	4649      	mov	r1, r9
 800ac62:	4658      	mov	r0, fp
 800ac64:	f000 fc90 	bl	800b588 <_Bfree>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	7033      	strb	r3, [r6, #0]
 800ac6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac6e:	3701      	adds	r7, #1
 800ac70:	601f      	str	r7, [r3, #0]
 800ac72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f000 831d 	beq.w	800b2b4 <_dtoa_r+0xb34>
 800ac7a:	601e      	str	r6, [r3, #0]
 800ac7c:	e31a      	b.n	800b2b4 <_dtoa_r+0xb34>
 800ac7e:	07e2      	lsls	r2, r4, #31
 800ac80:	d505      	bpl.n	800ac8e <_dtoa_r+0x50e>
 800ac82:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac86:	f7f5 fcdf 	bl	8000648 <__aeabi_dmul>
 800ac8a:	3601      	adds	r6, #1
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	1064      	asrs	r4, r4, #1
 800ac90:	3508      	adds	r5, #8
 800ac92:	e73f      	b.n	800ab14 <_dtoa_r+0x394>
 800ac94:	2602      	movs	r6, #2
 800ac96:	e742      	b.n	800ab1e <_dtoa_r+0x39e>
 800ac98:	9c07      	ldr	r4, [sp, #28]
 800ac9a:	9704      	str	r7, [sp, #16]
 800ac9c:	e761      	b.n	800ab62 <_dtoa_r+0x3e2>
 800ac9e:	4b27      	ldr	r3, [pc, #156]	@ (800ad3c <_dtoa_r+0x5bc>)
 800aca0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aca2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aca6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800acaa:	4454      	add	r4, sl
 800acac:	2900      	cmp	r1, #0
 800acae:	d053      	beq.n	800ad58 <_dtoa_r+0x5d8>
 800acb0:	4928      	ldr	r1, [pc, #160]	@ (800ad54 <_dtoa_r+0x5d4>)
 800acb2:	2000      	movs	r0, #0
 800acb4:	f7f5 fdf2 	bl	800089c <__aeabi_ddiv>
 800acb8:	4633      	mov	r3, r6
 800acba:	462a      	mov	r2, r5
 800acbc:	f7f5 fb0c 	bl	80002d8 <__aeabi_dsub>
 800acc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800acc4:	4656      	mov	r6, sl
 800acc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acca:	f7f5 ff6d 	bl	8000ba8 <__aeabi_d2iz>
 800acce:	4605      	mov	r5, r0
 800acd0:	f7f5 fc50 	bl	8000574 <__aeabi_i2d>
 800acd4:	4602      	mov	r2, r0
 800acd6:	460b      	mov	r3, r1
 800acd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acdc:	f7f5 fafc 	bl	80002d8 <__aeabi_dsub>
 800ace0:	3530      	adds	r5, #48	@ 0x30
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800acea:	f806 5b01 	strb.w	r5, [r6], #1
 800acee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800acf2:	f7f5 ff1b 	bl	8000b2c <__aeabi_dcmplt>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d171      	bne.n	800adde <_dtoa_r+0x65e>
 800acfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acfe:	4911      	ldr	r1, [pc, #68]	@ (800ad44 <_dtoa_r+0x5c4>)
 800ad00:	2000      	movs	r0, #0
 800ad02:	f7f5 fae9 	bl	80002d8 <__aeabi_dsub>
 800ad06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad0a:	f7f5 ff0f 	bl	8000b2c <__aeabi_dcmplt>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f040 8095 	bne.w	800ae3e <_dtoa_r+0x6be>
 800ad14:	42a6      	cmp	r6, r4
 800ad16:	f43f af50 	beq.w	800abba <_dtoa_r+0x43a>
 800ad1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ad1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ad48 <_dtoa_r+0x5c8>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	f7f5 fc91 	bl	8000648 <__aeabi_dmul>
 800ad26:	4b08      	ldr	r3, [pc, #32]	@ (800ad48 <_dtoa_r+0x5c8>)
 800ad28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad32:	f7f5 fc89 	bl	8000648 <__aeabi_dmul>
 800ad36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad3a:	e7c4      	b.n	800acc6 <_dtoa_r+0x546>
 800ad3c:	0800c570 	.word	0x0800c570
 800ad40:	0800c548 	.word	0x0800c548
 800ad44:	3ff00000 	.word	0x3ff00000
 800ad48:	40240000 	.word	0x40240000
 800ad4c:	401c0000 	.word	0x401c0000
 800ad50:	40140000 	.word	0x40140000
 800ad54:	3fe00000 	.word	0x3fe00000
 800ad58:	4631      	mov	r1, r6
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	f7f5 fc74 	bl	8000648 <__aeabi_dmul>
 800ad60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad64:	9415      	str	r4, [sp, #84]	@ 0x54
 800ad66:	4656      	mov	r6, sl
 800ad68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad6c:	f7f5 ff1c 	bl	8000ba8 <__aeabi_d2iz>
 800ad70:	4605      	mov	r5, r0
 800ad72:	f7f5 fbff 	bl	8000574 <__aeabi_i2d>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad7e:	f7f5 faab 	bl	80002d8 <__aeabi_dsub>
 800ad82:	3530      	adds	r5, #48	@ 0x30
 800ad84:	f806 5b01 	strb.w	r5, [r6], #1
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	42a6      	cmp	r6, r4
 800ad8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad92:	f04f 0200 	mov.w	r2, #0
 800ad96:	d124      	bne.n	800ade2 <_dtoa_r+0x662>
 800ad98:	4bac      	ldr	r3, [pc, #688]	@ (800b04c <_dtoa_r+0x8cc>)
 800ad9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ad9e:	f7f5 fa9d 	bl	80002dc <__adddf3>
 800ada2:	4602      	mov	r2, r0
 800ada4:	460b      	mov	r3, r1
 800ada6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adaa:	f7f5 fedd 	bl	8000b68 <__aeabi_dcmpgt>
 800adae:	2800      	cmp	r0, #0
 800adb0:	d145      	bne.n	800ae3e <_dtoa_r+0x6be>
 800adb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800adb6:	49a5      	ldr	r1, [pc, #660]	@ (800b04c <_dtoa_r+0x8cc>)
 800adb8:	2000      	movs	r0, #0
 800adba:	f7f5 fa8d 	bl	80002d8 <__aeabi_dsub>
 800adbe:	4602      	mov	r2, r0
 800adc0:	460b      	mov	r3, r1
 800adc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adc6:	f7f5 feb1 	bl	8000b2c <__aeabi_dcmplt>
 800adca:	2800      	cmp	r0, #0
 800adcc:	f43f aef5 	beq.w	800abba <_dtoa_r+0x43a>
 800add0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800add2:	1e73      	subs	r3, r6, #1
 800add4:	9315      	str	r3, [sp, #84]	@ 0x54
 800add6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800adda:	2b30      	cmp	r3, #48	@ 0x30
 800addc:	d0f8      	beq.n	800add0 <_dtoa_r+0x650>
 800adde:	9f04      	ldr	r7, [sp, #16]
 800ade0:	e73e      	b.n	800ac60 <_dtoa_r+0x4e0>
 800ade2:	4b9b      	ldr	r3, [pc, #620]	@ (800b050 <_dtoa_r+0x8d0>)
 800ade4:	f7f5 fc30 	bl	8000648 <__aeabi_dmul>
 800ade8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adec:	e7bc      	b.n	800ad68 <_dtoa_r+0x5e8>
 800adee:	d10c      	bne.n	800ae0a <_dtoa_r+0x68a>
 800adf0:	4b98      	ldr	r3, [pc, #608]	@ (800b054 <_dtoa_r+0x8d4>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adf8:	f7f5 fc26 	bl	8000648 <__aeabi_dmul>
 800adfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae00:	f7f5 fea8 	bl	8000b54 <__aeabi_dcmpge>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	f000 8157 	beq.w	800b0b8 <_dtoa_r+0x938>
 800ae0a:	2400      	movs	r4, #0
 800ae0c:	4625      	mov	r5, r4
 800ae0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae10:	43db      	mvns	r3, r3
 800ae12:	9304      	str	r3, [sp, #16]
 800ae14:	4656      	mov	r6, sl
 800ae16:	2700      	movs	r7, #0
 800ae18:	4621      	mov	r1, r4
 800ae1a:	4658      	mov	r0, fp
 800ae1c:	f000 fbb4 	bl	800b588 <_Bfree>
 800ae20:	2d00      	cmp	r5, #0
 800ae22:	d0dc      	beq.n	800adde <_dtoa_r+0x65e>
 800ae24:	b12f      	cbz	r7, 800ae32 <_dtoa_r+0x6b2>
 800ae26:	42af      	cmp	r7, r5
 800ae28:	d003      	beq.n	800ae32 <_dtoa_r+0x6b2>
 800ae2a:	4639      	mov	r1, r7
 800ae2c:	4658      	mov	r0, fp
 800ae2e:	f000 fbab 	bl	800b588 <_Bfree>
 800ae32:	4629      	mov	r1, r5
 800ae34:	4658      	mov	r0, fp
 800ae36:	f000 fba7 	bl	800b588 <_Bfree>
 800ae3a:	e7d0      	b.n	800adde <_dtoa_r+0x65e>
 800ae3c:	9704      	str	r7, [sp, #16]
 800ae3e:	4633      	mov	r3, r6
 800ae40:	461e      	mov	r6, r3
 800ae42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae46:	2a39      	cmp	r2, #57	@ 0x39
 800ae48:	d107      	bne.n	800ae5a <_dtoa_r+0x6da>
 800ae4a:	459a      	cmp	sl, r3
 800ae4c:	d1f8      	bne.n	800ae40 <_dtoa_r+0x6c0>
 800ae4e:	9a04      	ldr	r2, [sp, #16]
 800ae50:	3201      	adds	r2, #1
 800ae52:	9204      	str	r2, [sp, #16]
 800ae54:	2230      	movs	r2, #48	@ 0x30
 800ae56:	f88a 2000 	strb.w	r2, [sl]
 800ae5a:	781a      	ldrb	r2, [r3, #0]
 800ae5c:	3201      	adds	r2, #1
 800ae5e:	701a      	strb	r2, [r3, #0]
 800ae60:	e7bd      	b.n	800adde <_dtoa_r+0x65e>
 800ae62:	4b7b      	ldr	r3, [pc, #492]	@ (800b050 <_dtoa_r+0x8d0>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	f7f5 fbef 	bl	8000648 <__aeabi_dmul>
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4604      	mov	r4, r0
 800ae70:	460d      	mov	r5, r1
 800ae72:	f7f5 fe51 	bl	8000b18 <__aeabi_dcmpeq>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	f43f aebb 	beq.w	800abf2 <_dtoa_r+0x472>
 800ae7c:	e6f0      	b.n	800ac60 <_dtoa_r+0x4e0>
 800ae7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ae80:	2a00      	cmp	r2, #0
 800ae82:	f000 80db 	beq.w	800b03c <_dtoa_r+0x8bc>
 800ae86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae88:	2a01      	cmp	r2, #1
 800ae8a:	f300 80bf 	bgt.w	800b00c <_dtoa_r+0x88c>
 800ae8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ae90:	2a00      	cmp	r2, #0
 800ae92:	f000 80b7 	beq.w	800b004 <_dtoa_r+0x884>
 800ae96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ae9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ae9c:	4646      	mov	r6, r8
 800ae9e:	9a08      	ldr	r2, [sp, #32]
 800aea0:	2101      	movs	r1, #1
 800aea2:	441a      	add	r2, r3
 800aea4:	4658      	mov	r0, fp
 800aea6:	4498      	add	r8, r3
 800aea8:	9208      	str	r2, [sp, #32]
 800aeaa:	f000 fc21 	bl	800b6f0 <__i2b>
 800aeae:	4605      	mov	r5, r0
 800aeb0:	b15e      	cbz	r6, 800aeca <_dtoa_r+0x74a>
 800aeb2:	9b08      	ldr	r3, [sp, #32]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	dd08      	ble.n	800aeca <_dtoa_r+0x74a>
 800aeb8:	42b3      	cmp	r3, r6
 800aeba:	9a08      	ldr	r2, [sp, #32]
 800aebc:	bfa8      	it	ge
 800aebe:	4633      	movge	r3, r6
 800aec0:	eba8 0803 	sub.w	r8, r8, r3
 800aec4:	1af6      	subs	r6, r6, r3
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	9308      	str	r3, [sp, #32]
 800aeca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aecc:	b1f3      	cbz	r3, 800af0c <_dtoa_r+0x78c>
 800aece:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 80b7 	beq.w	800b044 <_dtoa_r+0x8c4>
 800aed6:	b18c      	cbz	r4, 800aefc <_dtoa_r+0x77c>
 800aed8:	4629      	mov	r1, r5
 800aeda:	4622      	mov	r2, r4
 800aedc:	4658      	mov	r0, fp
 800aede:	f000 fcc7 	bl	800b870 <__pow5mult>
 800aee2:	464a      	mov	r2, r9
 800aee4:	4601      	mov	r1, r0
 800aee6:	4605      	mov	r5, r0
 800aee8:	4658      	mov	r0, fp
 800aeea:	f000 fc17 	bl	800b71c <__multiply>
 800aeee:	4649      	mov	r1, r9
 800aef0:	9004      	str	r0, [sp, #16]
 800aef2:	4658      	mov	r0, fp
 800aef4:	f000 fb48 	bl	800b588 <_Bfree>
 800aef8:	9b04      	ldr	r3, [sp, #16]
 800aefa:	4699      	mov	r9, r3
 800aefc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aefe:	1b1a      	subs	r2, r3, r4
 800af00:	d004      	beq.n	800af0c <_dtoa_r+0x78c>
 800af02:	4649      	mov	r1, r9
 800af04:	4658      	mov	r0, fp
 800af06:	f000 fcb3 	bl	800b870 <__pow5mult>
 800af0a:	4681      	mov	r9, r0
 800af0c:	2101      	movs	r1, #1
 800af0e:	4658      	mov	r0, fp
 800af10:	f000 fbee 	bl	800b6f0 <__i2b>
 800af14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af16:	4604      	mov	r4, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 81cf 	beq.w	800b2bc <_dtoa_r+0xb3c>
 800af1e:	461a      	mov	r2, r3
 800af20:	4601      	mov	r1, r0
 800af22:	4658      	mov	r0, fp
 800af24:	f000 fca4 	bl	800b870 <__pow5mult>
 800af28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	4604      	mov	r4, r0
 800af2e:	f300 8095 	bgt.w	800b05c <_dtoa_r+0x8dc>
 800af32:	9b02      	ldr	r3, [sp, #8]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f040 8087 	bne.w	800b048 <_dtoa_r+0x8c8>
 800af3a:	9b03      	ldr	r3, [sp, #12]
 800af3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af40:	2b00      	cmp	r3, #0
 800af42:	f040 8089 	bne.w	800b058 <_dtoa_r+0x8d8>
 800af46:	9b03      	ldr	r3, [sp, #12]
 800af48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af4c:	0d1b      	lsrs	r3, r3, #20
 800af4e:	051b      	lsls	r3, r3, #20
 800af50:	b12b      	cbz	r3, 800af5e <_dtoa_r+0x7de>
 800af52:	9b08      	ldr	r3, [sp, #32]
 800af54:	3301      	adds	r3, #1
 800af56:	9308      	str	r3, [sp, #32]
 800af58:	f108 0801 	add.w	r8, r8, #1
 800af5c:	2301      	movs	r3, #1
 800af5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800af60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 81b0 	beq.w	800b2c8 <_dtoa_r+0xb48>
 800af68:	6923      	ldr	r3, [r4, #16]
 800af6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af6e:	6918      	ldr	r0, [r3, #16]
 800af70:	f000 fb72 	bl	800b658 <__hi0bits>
 800af74:	f1c0 0020 	rsb	r0, r0, #32
 800af78:	9b08      	ldr	r3, [sp, #32]
 800af7a:	4418      	add	r0, r3
 800af7c:	f010 001f 	ands.w	r0, r0, #31
 800af80:	d077      	beq.n	800b072 <_dtoa_r+0x8f2>
 800af82:	f1c0 0320 	rsb	r3, r0, #32
 800af86:	2b04      	cmp	r3, #4
 800af88:	dd6b      	ble.n	800b062 <_dtoa_r+0x8e2>
 800af8a:	9b08      	ldr	r3, [sp, #32]
 800af8c:	f1c0 001c 	rsb	r0, r0, #28
 800af90:	4403      	add	r3, r0
 800af92:	4480      	add	r8, r0
 800af94:	4406      	add	r6, r0
 800af96:	9308      	str	r3, [sp, #32]
 800af98:	f1b8 0f00 	cmp.w	r8, #0
 800af9c:	dd05      	ble.n	800afaa <_dtoa_r+0x82a>
 800af9e:	4649      	mov	r1, r9
 800afa0:	4642      	mov	r2, r8
 800afa2:	4658      	mov	r0, fp
 800afa4:	f000 fcbe 	bl	800b924 <__lshift>
 800afa8:	4681      	mov	r9, r0
 800afaa:	9b08      	ldr	r3, [sp, #32]
 800afac:	2b00      	cmp	r3, #0
 800afae:	dd05      	ble.n	800afbc <_dtoa_r+0x83c>
 800afb0:	4621      	mov	r1, r4
 800afb2:	461a      	mov	r2, r3
 800afb4:	4658      	mov	r0, fp
 800afb6:	f000 fcb5 	bl	800b924 <__lshift>
 800afba:	4604      	mov	r4, r0
 800afbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d059      	beq.n	800b076 <_dtoa_r+0x8f6>
 800afc2:	4621      	mov	r1, r4
 800afc4:	4648      	mov	r0, r9
 800afc6:	f000 fd19 	bl	800b9fc <__mcmp>
 800afca:	2800      	cmp	r0, #0
 800afcc:	da53      	bge.n	800b076 <_dtoa_r+0x8f6>
 800afce:	1e7b      	subs	r3, r7, #1
 800afd0:	9304      	str	r3, [sp, #16]
 800afd2:	4649      	mov	r1, r9
 800afd4:	2300      	movs	r3, #0
 800afd6:	220a      	movs	r2, #10
 800afd8:	4658      	mov	r0, fp
 800afda:	f000 faf7 	bl	800b5cc <__multadd>
 800afde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afe0:	4681      	mov	r9, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f000 8172 	beq.w	800b2cc <_dtoa_r+0xb4c>
 800afe8:	2300      	movs	r3, #0
 800afea:	4629      	mov	r1, r5
 800afec:	220a      	movs	r2, #10
 800afee:	4658      	mov	r0, fp
 800aff0:	f000 faec 	bl	800b5cc <__multadd>
 800aff4:	9b00      	ldr	r3, [sp, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	4605      	mov	r5, r0
 800affa:	dc67      	bgt.n	800b0cc <_dtoa_r+0x94c>
 800affc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800affe:	2b02      	cmp	r3, #2
 800b000:	dc41      	bgt.n	800b086 <_dtoa_r+0x906>
 800b002:	e063      	b.n	800b0cc <_dtoa_r+0x94c>
 800b004:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b006:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b00a:	e746      	b.n	800ae9a <_dtoa_r+0x71a>
 800b00c:	9b07      	ldr	r3, [sp, #28]
 800b00e:	1e5c      	subs	r4, r3, #1
 800b010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b012:	42a3      	cmp	r3, r4
 800b014:	bfbf      	itttt	lt
 800b016:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b018:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b01a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b01c:	1ae3      	sublt	r3, r4, r3
 800b01e:	bfb4      	ite	lt
 800b020:	18d2      	addlt	r2, r2, r3
 800b022:	1b1c      	subge	r4, r3, r4
 800b024:	9b07      	ldr	r3, [sp, #28]
 800b026:	bfbc      	itt	lt
 800b028:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b02a:	2400      	movlt	r4, #0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	bfb5      	itete	lt
 800b030:	eba8 0603 	sublt.w	r6, r8, r3
 800b034:	9b07      	ldrge	r3, [sp, #28]
 800b036:	2300      	movlt	r3, #0
 800b038:	4646      	movge	r6, r8
 800b03a:	e730      	b.n	800ae9e <_dtoa_r+0x71e>
 800b03c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b03e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b040:	4646      	mov	r6, r8
 800b042:	e735      	b.n	800aeb0 <_dtoa_r+0x730>
 800b044:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b046:	e75c      	b.n	800af02 <_dtoa_r+0x782>
 800b048:	2300      	movs	r3, #0
 800b04a:	e788      	b.n	800af5e <_dtoa_r+0x7de>
 800b04c:	3fe00000 	.word	0x3fe00000
 800b050:	40240000 	.word	0x40240000
 800b054:	40140000 	.word	0x40140000
 800b058:	9b02      	ldr	r3, [sp, #8]
 800b05a:	e780      	b.n	800af5e <_dtoa_r+0x7de>
 800b05c:	2300      	movs	r3, #0
 800b05e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b060:	e782      	b.n	800af68 <_dtoa_r+0x7e8>
 800b062:	d099      	beq.n	800af98 <_dtoa_r+0x818>
 800b064:	9a08      	ldr	r2, [sp, #32]
 800b066:	331c      	adds	r3, #28
 800b068:	441a      	add	r2, r3
 800b06a:	4498      	add	r8, r3
 800b06c:	441e      	add	r6, r3
 800b06e:	9208      	str	r2, [sp, #32]
 800b070:	e792      	b.n	800af98 <_dtoa_r+0x818>
 800b072:	4603      	mov	r3, r0
 800b074:	e7f6      	b.n	800b064 <_dtoa_r+0x8e4>
 800b076:	9b07      	ldr	r3, [sp, #28]
 800b078:	9704      	str	r7, [sp, #16]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	dc20      	bgt.n	800b0c0 <_dtoa_r+0x940>
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b082:	2b02      	cmp	r3, #2
 800b084:	dd1e      	ble.n	800b0c4 <_dtoa_r+0x944>
 800b086:	9b00      	ldr	r3, [sp, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f47f aec0 	bne.w	800ae0e <_dtoa_r+0x68e>
 800b08e:	4621      	mov	r1, r4
 800b090:	2205      	movs	r2, #5
 800b092:	4658      	mov	r0, fp
 800b094:	f000 fa9a 	bl	800b5cc <__multadd>
 800b098:	4601      	mov	r1, r0
 800b09a:	4604      	mov	r4, r0
 800b09c:	4648      	mov	r0, r9
 800b09e:	f000 fcad 	bl	800b9fc <__mcmp>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	f77f aeb3 	ble.w	800ae0e <_dtoa_r+0x68e>
 800b0a8:	4656      	mov	r6, sl
 800b0aa:	2331      	movs	r3, #49	@ 0x31
 800b0ac:	f806 3b01 	strb.w	r3, [r6], #1
 800b0b0:	9b04      	ldr	r3, [sp, #16]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	9304      	str	r3, [sp, #16]
 800b0b6:	e6ae      	b.n	800ae16 <_dtoa_r+0x696>
 800b0b8:	9c07      	ldr	r4, [sp, #28]
 800b0ba:	9704      	str	r7, [sp, #16]
 800b0bc:	4625      	mov	r5, r4
 800b0be:	e7f3      	b.n	800b0a8 <_dtoa_r+0x928>
 800b0c0:	9b07      	ldr	r3, [sp, #28]
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f000 8104 	beq.w	800b2d4 <_dtoa_r+0xb54>
 800b0cc:	2e00      	cmp	r6, #0
 800b0ce:	dd05      	ble.n	800b0dc <_dtoa_r+0x95c>
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	4632      	mov	r2, r6
 800b0d4:	4658      	mov	r0, fp
 800b0d6:	f000 fc25 	bl	800b924 <__lshift>
 800b0da:	4605      	mov	r5, r0
 800b0dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d05a      	beq.n	800b198 <_dtoa_r+0xa18>
 800b0e2:	6869      	ldr	r1, [r5, #4]
 800b0e4:	4658      	mov	r0, fp
 800b0e6:	f000 fa0f 	bl	800b508 <_Balloc>
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	b928      	cbnz	r0, 800b0fa <_dtoa_r+0x97a>
 800b0ee:	4b84      	ldr	r3, [pc, #528]	@ (800b300 <_dtoa_r+0xb80>)
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b0f6:	f7ff bb5a 	b.w	800a7ae <_dtoa_r+0x2e>
 800b0fa:	692a      	ldr	r2, [r5, #16]
 800b0fc:	3202      	adds	r2, #2
 800b0fe:	0092      	lsls	r2, r2, #2
 800b100:	f105 010c 	add.w	r1, r5, #12
 800b104:	300c      	adds	r0, #12
 800b106:	f7ff faa2 	bl	800a64e <memcpy>
 800b10a:	2201      	movs	r2, #1
 800b10c:	4631      	mov	r1, r6
 800b10e:	4658      	mov	r0, fp
 800b110:	f000 fc08 	bl	800b924 <__lshift>
 800b114:	f10a 0301 	add.w	r3, sl, #1
 800b118:	9307      	str	r3, [sp, #28]
 800b11a:	9b00      	ldr	r3, [sp, #0]
 800b11c:	4453      	add	r3, sl
 800b11e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b120:	9b02      	ldr	r3, [sp, #8]
 800b122:	f003 0301 	and.w	r3, r3, #1
 800b126:	462f      	mov	r7, r5
 800b128:	930a      	str	r3, [sp, #40]	@ 0x28
 800b12a:	4605      	mov	r5, r0
 800b12c:	9b07      	ldr	r3, [sp, #28]
 800b12e:	4621      	mov	r1, r4
 800b130:	3b01      	subs	r3, #1
 800b132:	4648      	mov	r0, r9
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	f7ff fa98 	bl	800a66a <quorem>
 800b13a:	4639      	mov	r1, r7
 800b13c:	9002      	str	r0, [sp, #8]
 800b13e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b142:	4648      	mov	r0, r9
 800b144:	f000 fc5a 	bl	800b9fc <__mcmp>
 800b148:	462a      	mov	r2, r5
 800b14a:	9008      	str	r0, [sp, #32]
 800b14c:	4621      	mov	r1, r4
 800b14e:	4658      	mov	r0, fp
 800b150:	f000 fc70 	bl	800ba34 <__mdiff>
 800b154:	68c2      	ldr	r2, [r0, #12]
 800b156:	4606      	mov	r6, r0
 800b158:	bb02      	cbnz	r2, 800b19c <_dtoa_r+0xa1c>
 800b15a:	4601      	mov	r1, r0
 800b15c:	4648      	mov	r0, r9
 800b15e:	f000 fc4d 	bl	800b9fc <__mcmp>
 800b162:	4602      	mov	r2, r0
 800b164:	4631      	mov	r1, r6
 800b166:	4658      	mov	r0, fp
 800b168:	920e      	str	r2, [sp, #56]	@ 0x38
 800b16a:	f000 fa0d 	bl	800b588 <_Bfree>
 800b16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b170:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b172:	9e07      	ldr	r6, [sp, #28]
 800b174:	ea43 0102 	orr.w	r1, r3, r2
 800b178:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b17a:	4319      	orrs	r1, r3
 800b17c:	d110      	bne.n	800b1a0 <_dtoa_r+0xa20>
 800b17e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b182:	d029      	beq.n	800b1d8 <_dtoa_r+0xa58>
 800b184:	9b08      	ldr	r3, [sp, #32]
 800b186:	2b00      	cmp	r3, #0
 800b188:	dd02      	ble.n	800b190 <_dtoa_r+0xa10>
 800b18a:	9b02      	ldr	r3, [sp, #8]
 800b18c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b190:	9b00      	ldr	r3, [sp, #0]
 800b192:	f883 8000 	strb.w	r8, [r3]
 800b196:	e63f      	b.n	800ae18 <_dtoa_r+0x698>
 800b198:	4628      	mov	r0, r5
 800b19a:	e7bb      	b.n	800b114 <_dtoa_r+0x994>
 800b19c:	2201      	movs	r2, #1
 800b19e:	e7e1      	b.n	800b164 <_dtoa_r+0x9e4>
 800b1a0:	9b08      	ldr	r3, [sp, #32]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	db04      	blt.n	800b1b0 <_dtoa_r+0xa30>
 800b1a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b1a8:	430b      	orrs	r3, r1
 800b1aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b1ac:	430b      	orrs	r3, r1
 800b1ae:	d120      	bne.n	800b1f2 <_dtoa_r+0xa72>
 800b1b0:	2a00      	cmp	r2, #0
 800b1b2:	dded      	ble.n	800b190 <_dtoa_r+0xa10>
 800b1b4:	4649      	mov	r1, r9
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	4658      	mov	r0, fp
 800b1ba:	f000 fbb3 	bl	800b924 <__lshift>
 800b1be:	4621      	mov	r1, r4
 800b1c0:	4681      	mov	r9, r0
 800b1c2:	f000 fc1b 	bl	800b9fc <__mcmp>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	dc03      	bgt.n	800b1d2 <_dtoa_r+0xa52>
 800b1ca:	d1e1      	bne.n	800b190 <_dtoa_r+0xa10>
 800b1cc:	f018 0f01 	tst.w	r8, #1
 800b1d0:	d0de      	beq.n	800b190 <_dtoa_r+0xa10>
 800b1d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b1d6:	d1d8      	bne.n	800b18a <_dtoa_r+0xa0a>
 800b1d8:	9a00      	ldr	r2, [sp, #0]
 800b1da:	2339      	movs	r3, #57	@ 0x39
 800b1dc:	7013      	strb	r3, [r2, #0]
 800b1de:	4633      	mov	r3, r6
 800b1e0:	461e      	mov	r6, r3
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b1e8:	2a39      	cmp	r2, #57	@ 0x39
 800b1ea:	d052      	beq.n	800b292 <_dtoa_r+0xb12>
 800b1ec:	3201      	adds	r2, #1
 800b1ee:	701a      	strb	r2, [r3, #0]
 800b1f0:	e612      	b.n	800ae18 <_dtoa_r+0x698>
 800b1f2:	2a00      	cmp	r2, #0
 800b1f4:	dd07      	ble.n	800b206 <_dtoa_r+0xa86>
 800b1f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b1fa:	d0ed      	beq.n	800b1d8 <_dtoa_r+0xa58>
 800b1fc:	9a00      	ldr	r2, [sp, #0]
 800b1fe:	f108 0301 	add.w	r3, r8, #1
 800b202:	7013      	strb	r3, [r2, #0]
 800b204:	e608      	b.n	800ae18 <_dtoa_r+0x698>
 800b206:	9b07      	ldr	r3, [sp, #28]
 800b208:	9a07      	ldr	r2, [sp, #28]
 800b20a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b20e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b210:	4293      	cmp	r3, r2
 800b212:	d028      	beq.n	800b266 <_dtoa_r+0xae6>
 800b214:	4649      	mov	r1, r9
 800b216:	2300      	movs	r3, #0
 800b218:	220a      	movs	r2, #10
 800b21a:	4658      	mov	r0, fp
 800b21c:	f000 f9d6 	bl	800b5cc <__multadd>
 800b220:	42af      	cmp	r7, r5
 800b222:	4681      	mov	r9, r0
 800b224:	f04f 0300 	mov.w	r3, #0
 800b228:	f04f 020a 	mov.w	r2, #10
 800b22c:	4639      	mov	r1, r7
 800b22e:	4658      	mov	r0, fp
 800b230:	d107      	bne.n	800b242 <_dtoa_r+0xac2>
 800b232:	f000 f9cb 	bl	800b5cc <__multadd>
 800b236:	4607      	mov	r7, r0
 800b238:	4605      	mov	r5, r0
 800b23a:	9b07      	ldr	r3, [sp, #28]
 800b23c:	3301      	adds	r3, #1
 800b23e:	9307      	str	r3, [sp, #28]
 800b240:	e774      	b.n	800b12c <_dtoa_r+0x9ac>
 800b242:	f000 f9c3 	bl	800b5cc <__multadd>
 800b246:	4629      	mov	r1, r5
 800b248:	4607      	mov	r7, r0
 800b24a:	2300      	movs	r3, #0
 800b24c:	220a      	movs	r2, #10
 800b24e:	4658      	mov	r0, fp
 800b250:	f000 f9bc 	bl	800b5cc <__multadd>
 800b254:	4605      	mov	r5, r0
 800b256:	e7f0      	b.n	800b23a <_dtoa_r+0xaba>
 800b258:	9b00      	ldr	r3, [sp, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	bfcc      	ite	gt
 800b25e:	461e      	movgt	r6, r3
 800b260:	2601      	movle	r6, #1
 800b262:	4456      	add	r6, sl
 800b264:	2700      	movs	r7, #0
 800b266:	4649      	mov	r1, r9
 800b268:	2201      	movs	r2, #1
 800b26a:	4658      	mov	r0, fp
 800b26c:	f000 fb5a 	bl	800b924 <__lshift>
 800b270:	4621      	mov	r1, r4
 800b272:	4681      	mov	r9, r0
 800b274:	f000 fbc2 	bl	800b9fc <__mcmp>
 800b278:	2800      	cmp	r0, #0
 800b27a:	dcb0      	bgt.n	800b1de <_dtoa_r+0xa5e>
 800b27c:	d102      	bne.n	800b284 <_dtoa_r+0xb04>
 800b27e:	f018 0f01 	tst.w	r8, #1
 800b282:	d1ac      	bne.n	800b1de <_dtoa_r+0xa5e>
 800b284:	4633      	mov	r3, r6
 800b286:	461e      	mov	r6, r3
 800b288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b28c:	2a30      	cmp	r2, #48	@ 0x30
 800b28e:	d0fa      	beq.n	800b286 <_dtoa_r+0xb06>
 800b290:	e5c2      	b.n	800ae18 <_dtoa_r+0x698>
 800b292:	459a      	cmp	sl, r3
 800b294:	d1a4      	bne.n	800b1e0 <_dtoa_r+0xa60>
 800b296:	9b04      	ldr	r3, [sp, #16]
 800b298:	3301      	adds	r3, #1
 800b29a:	9304      	str	r3, [sp, #16]
 800b29c:	2331      	movs	r3, #49	@ 0x31
 800b29e:	f88a 3000 	strb.w	r3, [sl]
 800b2a2:	e5b9      	b.n	800ae18 <_dtoa_r+0x698>
 800b2a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b2a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b304 <_dtoa_r+0xb84>
 800b2aa:	b11b      	cbz	r3, 800b2b4 <_dtoa_r+0xb34>
 800b2ac:	f10a 0308 	add.w	r3, sl, #8
 800b2b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b2b2:	6013      	str	r3, [r2, #0]
 800b2b4:	4650      	mov	r0, sl
 800b2b6:	b019      	add	sp, #100	@ 0x64
 800b2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	f77f ae37 	ble.w	800af32 <_dtoa_r+0x7b2>
 800b2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2c8:	2001      	movs	r0, #1
 800b2ca:	e655      	b.n	800af78 <_dtoa_r+0x7f8>
 800b2cc:	9b00      	ldr	r3, [sp, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f77f aed6 	ble.w	800b080 <_dtoa_r+0x900>
 800b2d4:	4656      	mov	r6, sl
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	4648      	mov	r0, r9
 800b2da:	f7ff f9c6 	bl	800a66a <quorem>
 800b2de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b2e2:	f806 8b01 	strb.w	r8, [r6], #1
 800b2e6:	9b00      	ldr	r3, [sp, #0]
 800b2e8:	eba6 020a 	sub.w	r2, r6, sl
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	ddb3      	ble.n	800b258 <_dtoa_r+0xad8>
 800b2f0:	4649      	mov	r1, r9
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	220a      	movs	r2, #10
 800b2f6:	4658      	mov	r0, fp
 800b2f8:	f000 f968 	bl	800b5cc <__multadd>
 800b2fc:	4681      	mov	r9, r0
 800b2fe:	e7ea      	b.n	800b2d6 <_dtoa_r+0xb56>
 800b300:	0800c4d0 	.word	0x0800c4d0
 800b304:	0800c454 	.word	0x0800c454

0800b308 <_free_r>:
 800b308:	b538      	push	{r3, r4, r5, lr}
 800b30a:	4605      	mov	r5, r0
 800b30c:	2900      	cmp	r1, #0
 800b30e:	d041      	beq.n	800b394 <_free_r+0x8c>
 800b310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b314:	1f0c      	subs	r4, r1, #4
 800b316:	2b00      	cmp	r3, #0
 800b318:	bfb8      	it	lt
 800b31a:	18e4      	addlt	r4, r4, r3
 800b31c:	f000 f8e8 	bl	800b4f0 <__malloc_lock>
 800b320:	4a1d      	ldr	r2, [pc, #116]	@ (800b398 <_free_r+0x90>)
 800b322:	6813      	ldr	r3, [r2, #0]
 800b324:	b933      	cbnz	r3, 800b334 <_free_r+0x2c>
 800b326:	6063      	str	r3, [r4, #4]
 800b328:	6014      	str	r4, [r2, #0]
 800b32a:	4628      	mov	r0, r5
 800b32c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b330:	f000 b8e4 	b.w	800b4fc <__malloc_unlock>
 800b334:	42a3      	cmp	r3, r4
 800b336:	d908      	bls.n	800b34a <_free_r+0x42>
 800b338:	6820      	ldr	r0, [r4, #0]
 800b33a:	1821      	adds	r1, r4, r0
 800b33c:	428b      	cmp	r3, r1
 800b33e:	bf01      	itttt	eq
 800b340:	6819      	ldreq	r1, [r3, #0]
 800b342:	685b      	ldreq	r3, [r3, #4]
 800b344:	1809      	addeq	r1, r1, r0
 800b346:	6021      	streq	r1, [r4, #0]
 800b348:	e7ed      	b.n	800b326 <_free_r+0x1e>
 800b34a:	461a      	mov	r2, r3
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	b10b      	cbz	r3, 800b354 <_free_r+0x4c>
 800b350:	42a3      	cmp	r3, r4
 800b352:	d9fa      	bls.n	800b34a <_free_r+0x42>
 800b354:	6811      	ldr	r1, [r2, #0]
 800b356:	1850      	adds	r0, r2, r1
 800b358:	42a0      	cmp	r0, r4
 800b35a:	d10b      	bne.n	800b374 <_free_r+0x6c>
 800b35c:	6820      	ldr	r0, [r4, #0]
 800b35e:	4401      	add	r1, r0
 800b360:	1850      	adds	r0, r2, r1
 800b362:	4283      	cmp	r3, r0
 800b364:	6011      	str	r1, [r2, #0]
 800b366:	d1e0      	bne.n	800b32a <_free_r+0x22>
 800b368:	6818      	ldr	r0, [r3, #0]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	6053      	str	r3, [r2, #4]
 800b36e:	4408      	add	r0, r1
 800b370:	6010      	str	r0, [r2, #0]
 800b372:	e7da      	b.n	800b32a <_free_r+0x22>
 800b374:	d902      	bls.n	800b37c <_free_r+0x74>
 800b376:	230c      	movs	r3, #12
 800b378:	602b      	str	r3, [r5, #0]
 800b37a:	e7d6      	b.n	800b32a <_free_r+0x22>
 800b37c:	6820      	ldr	r0, [r4, #0]
 800b37e:	1821      	adds	r1, r4, r0
 800b380:	428b      	cmp	r3, r1
 800b382:	bf04      	itt	eq
 800b384:	6819      	ldreq	r1, [r3, #0]
 800b386:	685b      	ldreq	r3, [r3, #4]
 800b388:	6063      	str	r3, [r4, #4]
 800b38a:	bf04      	itt	eq
 800b38c:	1809      	addeq	r1, r1, r0
 800b38e:	6021      	streq	r1, [r4, #0]
 800b390:	6054      	str	r4, [r2, #4]
 800b392:	e7ca      	b.n	800b32a <_free_r+0x22>
 800b394:	bd38      	pop	{r3, r4, r5, pc}
 800b396:	bf00      	nop
 800b398:	20004784 	.word	0x20004784

0800b39c <malloc>:
 800b39c:	4b02      	ldr	r3, [pc, #8]	@ (800b3a8 <malloc+0xc>)
 800b39e:	4601      	mov	r1, r0
 800b3a0:	6818      	ldr	r0, [r3, #0]
 800b3a2:	f000 b825 	b.w	800b3f0 <_malloc_r>
 800b3a6:	bf00      	nop
 800b3a8:	2000001c 	.word	0x2000001c

0800b3ac <sbrk_aligned>:
 800b3ac:	b570      	push	{r4, r5, r6, lr}
 800b3ae:	4e0f      	ldr	r6, [pc, #60]	@ (800b3ec <sbrk_aligned+0x40>)
 800b3b0:	460c      	mov	r4, r1
 800b3b2:	6831      	ldr	r1, [r6, #0]
 800b3b4:	4605      	mov	r5, r0
 800b3b6:	b911      	cbnz	r1, 800b3be <sbrk_aligned+0x12>
 800b3b8:	f000 fcd4 	bl	800bd64 <_sbrk_r>
 800b3bc:	6030      	str	r0, [r6, #0]
 800b3be:	4621      	mov	r1, r4
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	f000 fccf 	bl	800bd64 <_sbrk_r>
 800b3c6:	1c43      	adds	r3, r0, #1
 800b3c8:	d103      	bne.n	800b3d2 <sbrk_aligned+0x26>
 800b3ca:	f04f 34ff 	mov.w	r4, #4294967295
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	bd70      	pop	{r4, r5, r6, pc}
 800b3d2:	1cc4      	adds	r4, r0, #3
 800b3d4:	f024 0403 	bic.w	r4, r4, #3
 800b3d8:	42a0      	cmp	r0, r4
 800b3da:	d0f8      	beq.n	800b3ce <sbrk_aligned+0x22>
 800b3dc:	1a21      	subs	r1, r4, r0
 800b3de:	4628      	mov	r0, r5
 800b3e0:	f000 fcc0 	bl	800bd64 <_sbrk_r>
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	d1f2      	bne.n	800b3ce <sbrk_aligned+0x22>
 800b3e8:	e7ef      	b.n	800b3ca <sbrk_aligned+0x1e>
 800b3ea:	bf00      	nop
 800b3ec:	20004780 	.word	0x20004780

0800b3f0 <_malloc_r>:
 800b3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f4:	1ccd      	adds	r5, r1, #3
 800b3f6:	f025 0503 	bic.w	r5, r5, #3
 800b3fa:	3508      	adds	r5, #8
 800b3fc:	2d0c      	cmp	r5, #12
 800b3fe:	bf38      	it	cc
 800b400:	250c      	movcc	r5, #12
 800b402:	2d00      	cmp	r5, #0
 800b404:	4606      	mov	r6, r0
 800b406:	db01      	blt.n	800b40c <_malloc_r+0x1c>
 800b408:	42a9      	cmp	r1, r5
 800b40a:	d904      	bls.n	800b416 <_malloc_r+0x26>
 800b40c:	230c      	movs	r3, #12
 800b40e:	6033      	str	r3, [r6, #0]
 800b410:	2000      	movs	r0, #0
 800b412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b416:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b4ec <_malloc_r+0xfc>
 800b41a:	f000 f869 	bl	800b4f0 <__malloc_lock>
 800b41e:	f8d8 3000 	ldr.w	r3, [r8]
 800b422:	461c      	mov	r4, r3
 800b424:	bb44      	cbnz	r4, 800b478 <_malloc_r+0x88>
 800b426:	4629      	mov	r1, r5
 800b428:	4630      	mov	r0, r6
 800b42a:	f7ff ffbf 	bl	800b3ac <sbrk_aligned>
 800b42e:	1c43      	adds	r3, r0, #1
 800b430:	4604      	mov	r4, r0
 800b432:	d158      	bne.n	800b4e6 <_malloc_r+0xf6>
 800b434:	f8d8 4000 	ldr.w	r4, [r8]
 800b438:	4627      	mov	r7, r4
 800b43a:	2f00      	cmp	r7, #0
 800b43c:	d143      	bne.n	800b4c6 <_malloc_r+0xd6>
 800b43e:	2c00      	cmp	r4, #0
 800b440:	d04b      	beq.n	800b4da <_malloc_r+0xea>
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	4639      	mov	r1, r7
 800b446:	4630      	mov	r0, r6
 800b448:	eb04 0903 	add.w	r9, r4, r3
 800b44c:	f000 fc8a 	bl	800bd64 <_sbrk_r>
 800b450:	4581      	cmp	r9, r0
 800b452:	d142      	bne.n	800b4da <_malloc_r+0xea>
 800b454:	6821      	ldr	r1, [r4, #0]
 800b456:	1a6d      	subs	r5, r5, r1
 800b458:	4629      	mov	r1, r5
 800b45a:	4630      	mov	r0, r6
 800b45c:	f7ff ffa6 	bl	800b3ac <sbrk_aligned>
 800b460:	3001      	adds	r0, #1
 800b462:	d03a      	beq.n	800b4da <_malloc_r+0xea>
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	442b      	add	r3, r5
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	f8d8 3000 	ldr.w	r3, [r8]
 800b46e:	685a      	ldr	r2, [r3, #4]
 800b470:	bb62      	cbnz	r2, 800b4cc <_malloc_r+0xdc>
 800b472:	f8c8 7000 	str.w	r7, [r8]
 800b476:	e00f      	b.n	800b498 <_malloc_r+0xa8>
 800b478:	6822      	ldr	r2, [r4, #0]
 800b47a:	1b52      	subs	r2, r2, r5
 800b47c:	d420      	bmi.n	800b4c0 <_malloc_r+0xd0>
 800b47e:	2a0b      	cmp	r2, #11
 800b480:	d917      	bls.n	800b4b2 <_malloc_r+0xc2>
 800b482:	1961      	adds	r1, r4, r5
 800b484:	42a3      	cmp	r3, r4
 800b486:	6025      	str	r5, [r4, #0]
 800b488:	bf18      	it	ne
 800b48a:	6059      	strne	r1, [r3, #4]
 800b48c:	6863      	ldr	r3, [r4, #4]
 800b48e:	bf08      	it	eq
 800b490:	f8c8 1000 	streq.w	r1, [r8]
 800b494:	5162      	str	r2, [r4, r5]
 800b496:	604b      	str	r3, [r1, #4]
 800b498:	4630      	mov	r0, r6
 800b49a:	f000 f82f 	bl	800b4fc <__malloc_unlock>
 800b49e:	f104 000b 	add.w	r0, r4, #11
 800b4a2:	1d23      	adds	r3, r4, #4
 800b4a4:	f020 0007 	bic.w	r0, r0, #7
 800b4a8:	1ac2      	subs	r2, r0, r3
 800b4aa:	bf1c      	itt	ne
 800b4ac:	1a1b      	subne	r3, r3, r0
 800b4ae:	50a3      	strne	r3, [r4, r2]
 800b4b0:	e7af      	b.n	800b412 <_malloc_r+0x22>
 800b4b2:	6862      	ldr	r2, [r4, #4]
 800b4b4:	42a3      	cmp	r3, r4
 800b4b6:	bf0c      	ite	eq
 800b4b8:	f8c8 2000 	streq.w	r2, [r8]
 800b4bc:	605a      	strne	r2, [r3, #4]
 800b4be:	e7eb      	b.n	800b498 <_malloc_r+0xa8>
 800b4c0:	4623      	mov	r3, r4
 800b4c2:	6864      	ldr	r4, [r4, #4]
 800b4c4:	e7ae      	b.n	800b424 <_malloc_r+0x34>
 800b4c6:	463c      	mov	r4, r7
 800b4c8:	687f      	ldr	r7, [r7, #4]
 800b4ca:	e7b6      	b.n	800b43a <_malloc_r+0x4a>
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	42a3      	cmp	r3, r4
 800b4d2:	d1fb      	bne.n	800b4cc <_malloc_r+0xdc>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	6053      	str	r3, [r2, #4]
 800b4d8:	e7de      	b.n	800b498 <_malloc_r+0xa8>
 800b4da:	230c      	movs	r3, #12
 800b4dc:	6033      	str	r3, [r6, #0]
 800b4de:	4630      	mov	r0, r6
 800b4e0:	f000 f80c 	bl	800b4fc <__malloc_unlock>
 800b4e4:	e794      	b.n	800b410 <_malloc_r+0x20>
 800b4e6:	6005      	str	r5, [r0, #0]
 800b4e8:	e7d6      	b.n	800b498 <_malloc_r+0xa8>
 800b4ea:	bf00      	nop
 800b4ec:	20004784 	.word	0x20004784

0800b4f0 <__malloc_lock>:
 800b4f0:	4801      	ldr	r0, [pc, #4]	@ (800b4f8 <__malloc_lock+0x8>)
 800b4f2:	f7ff b8aa 	b.w	800a64a <__retarget_lock_acquire_recursive>
 800b4f6:	bf00      	nop
 800b4f8:	2000477c 	.word	0x2000477c

0800b4fc <__malloc_unlock>:
 800b4fc:	4801      	ldr	r0, [pc, #4]	@ (800b504 <__malloc_unlock+0x8>)
 800b4fe:	f7ff b8a5 	b.w	800a64c <__retarget_lock_release_recursive>
 800b502:	bf00      	nop
 800b504:	2000477c 	.word	0x2000477c

0800b508 <_Balloc>:
 800b508:	b570      	push	{r4, r5, r6, lr}
 800b50a:	69c6      	ldr	r6, [r0, #28]
 800b50c:	4604      	mov	r4, r0
 800b50e:	460d      	mov	r5, r1
 800b510:	b976      	cbnz	r6, 800b530 <_Balloc+0x28>
 800b512:	2010      	movs	r0, #16
 800b514:	f7ff ff42 	bl	800b39c <malloc>
 800b518:	4602      	mov	r2, r0
 800b51a:	61e0      	str	r0, [r4, #28]
 800b51c:	b920      	cbnz	r0, 800b528 <_Balloc+0x20>
 800b51e:	4b18      	ldr	r3, [pc, #96]	@ (800b580 <_Balloc+0x78>)
 800b520:	4818      	ldr	r0, [pc, #96]	@ (800b584 <_Balloc+0x7c>)
 800b522:	216b      	movs	r1, #107	@ 0x6b
 800b524:	f000 fc2e 	bl	800bd84 <__assert_func>
 800b528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b52c:	6006      	str	r6, [r0, #0]
 800b52e:	60c6      	str	r6, [r0, #12]
 800b530:	69e6      	ldr	r6, [r4, #28]
 800b532:	68f3      	ldr	r3, [r6, #12]
 800b534:	b183      	cbz	r3, 800b558 <_Balloc+0x50>
 800b536:	69e3      	ldr	r3, [r4, #28]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b53e:	b9b8      	cbnz	r0, 800b570 <_Balloc+0x68>
 800b540:	2101      	movs	r1, #1
 800b542:	fa01 f605 	lsl.w	r6, r1, r5
 800b546:	1d72      	adds	r2, r6, #5
 800b548:	0092      	lsls	r2, r2, #2
 800b54a:	4620      	mov	r0, r4
 800b54c:	f000 fc38 	bl	800bdc0 <_calloc_r>
 800b550:	b160      	cbz	r0, 800b56c <_Balloc+0x64>
 800b552:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b556:	e00e      	b.n	800b576 <_Balloc+0x6e>
 800b558:	2221      	movs	r2, #33	@ 0x21
 800b55a:	2104      	movs	r1, #4
 800b55c:	4620      	mov	r0, r4
 800b55e:	f000 fc2f 	bl	800bdc0 <_calloc_r>
 800b562:	69e3      	ldr	r3, [r4, #28]
 800b564:	60f0      	str	r0, [r6, #12]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1e4      	bne.n	800b536 <_Balloc+0x2e>
 800b56c:	2000      	movs	r0, #0
 800b56e:	bd70      	pop	{r4, r5, r6, pc}
 800b570:	6802      	ldr	r2, [r0, #0]
 800b572:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b576:	2300      	movs	r3, #0
 800b578:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b57c:	e7f7      	b.n	800b56e <_Balloc+0x66>
 800b57e:	bf00      	nop
 800b580:	0800c461 	.word	0x0800c461
 800b584:	0800c4e1 	.word	0x0800c4e1

0800b588 <_Bfree>:
 800b588:	b570      	push	{r4, r5, r6, lr}
 800b58a:	69c6      	ldr	r6, [r0, #28]
 800b58c:	4605      	mov	r5, r0
 800b58e:	460c      	mov	r4, r1
 800b590:	b976      	cbnz	r6, 800b5b0 <_Bfree+0x28>
 800b592:	2010      	movs	r0, #16
 800b594:	f7ff ff02 	bl	800b39c <malloc>
 800b598:	4602      	mov	r2, r0
 800b59a:	61e8      	str	r0, [r5, #28]
 800b59c:	b920      	cbnz	r0, 800b5a8 <_Bfree+0x20>
 800b59e:	4b09      	ldr	r3, [pc, #36]	@ (800b5c4 <_Bfree+0x3c>)
 800b5a0:	4809      	ldr	r0, [pc, #36]	@ (800b5c8 <_Bfree+0x40>)
 800b5a2:	218f      	movs	r1, #143	@ 0x8f
 800b5a4:	f000 fbee 	bl	800bd84 <__assert_func>
 800b5a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5ac:	6006      	str	r6, [r0, #0]
 800b5ae:	60c6      	str	r6, [r0, #12]
 800b5b0:	b13c      	cbz	r4, 800b5c2 <_Bfree+0x3a>
 800b5b2:	69eb      	ldr	r3, [r5, #28]
 800b5b4:	6862      	ldr	r2, [r4, #4]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5bc:	6021      	str	r1, [r4, #0]
 800b5be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5c2:	bd70      	pop	{r4, r5, r6, pc}
 800b5c4:	0800c461 	.word	0x0800c461
 800b5c8:	0800c4e1 	.word	0x0800c4e1

0800b5cc <__multadd>:
 800b5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d0:	690d      	ldr	r5, [r1, #16]
 800b5d2:	4607      	mov	r7, r0
 800b5d4:	460c      	mov	r4, r1
 800b5d6:	461e      	mov	r6, r3
 800b5d8:	f101 0c14 	add.w	ip, r1, #20
 800b5dc:	2000      	movs	r0, #0
 800b5de:	f8dc 3000 	ldr.w	r3, [ip]
 800b5e2:	b299      	uxth	r1, r3
 800b5e4:	fb02 6101 	mla	r1, r2, r1, r6
 800b5e8:	0c1e      	lsrs	r6, r3, #16
 800b5ea:	0c0b      	lsrs	r3, r1, #16
 800b5ec:	fb02 3306 	mla	r3, r2, r6, r3
 800b5f0:	b289      	uxth	r1, r1
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5f8:	4285      	cmp	r5, r0
 800b5fa:	f84c 1b04 	str.w	r1, [ip], #4
 800b5fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b602:	dcec      	bgt.n	800b5de <__multadd+0x12>
 800b604:	b30e      	cbz	r6, 800b64a <__multadd+0x7e>
 800b606:	68a3      	ldr	r3, [r4, #8]
 800b608:	42ab      	cmp	r3, r5
 800b60a:	dc19      	bgt.n	800b640 <__multadd+0x74>
 800b60c:	6861      	ldr	r1, [r4, #4]
 800b60e:	4638      	mov	r0, r7
 800b610:	3101      	adds	r1, #1
 800b612:	f7ff ff79 	bl	800b508 <_Balloc>
 800b616:	4680      	mov	r8, r0
 800b618:	b928      	cbnz	r0, 800b626 <__multadd+0x5a>
 800b61a:	4602      	mov	r2, r0
 800b61c:	4b0c      	ldr	r3, [pc, #48]	@ (800b650 <__multadd+0x84>)
 800b61e:	480d      	ldr	r0, [pc, #52]	@ (800b654 <__multadd+0x88>)
 800b620:	21ba      	movs	r1, #186	@ 0xba
 800b622:	f000 fbaf 	bl	800bd84 <__assert_func>
 800b626:	6922      	ldr	r2, [r4, #16]
 800b628:	3202      	adds	r2, #2
 800b62a:	f104 010c 	add.w	r1, r4, #12
 800b62e:	0092      	lsls	r2, r2, #2
 800b630:	300c      	adds	r0, #12
 800b632:	f7ff f80c 	bl	800a64e <memcpy>
 800b636:	4621      	mov	r1, r4
 800b638:	4638      	mov	r0, r7
 800b63a:	f7ff ffa5 	bl	800b588 <_Bfree>
 800b63e:	4644      	mov	r4, r8
 800b640:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b644:	3501      	adds	r5, #1
 800b646:	615e      	str	r6, [r3, #20]
 800b648:	6125      	str	r5, [r4, #16]
 800b64a:	4620      	mov	r0, r4
 800b64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b650:	0800c4d0 	.word	0x0800c4d0
 800b654:	0800c4e1 	.word	0x0800c4e1

0800b658 <__hi0bits>:
 800b658:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b65c:	4603      	mov	r3, r0
 800b65e:	bf36      	itet	cc
 800b660:	0403      	lslcc	r3, r0, #16
 800b662:	2000      	movcs	r0, #0
 800b664:	2010      	movcc	r0, #16
 800b666:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b66a:	bf3c      	itt	cc
 800b66c:	021b      	lslcc	r3, r3, #8
 800b66e:	3008      	addcc	r0, #8
 800b670:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b674:	bf3c      	itt	cc
 800b676:	011b      	lslcc	r3, r3, #4
 800b678:	3004      	addcc	r0, #4
 800b67a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b67e:	bf3c      	itt	cc
 800b680:	009b      	lslcc	r3, r3, #2
 800b682:	3002      	addcc	r0, #2
 800b684:	2b00      	cmp	r3, #0
 800b686:	db05      	blt.n	800b694 <__hi0bits+0x3c>
 800b688:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b68c:	f100 0001 	add.w	r0, r0, #1
 800b690:	bf08      	it	eq
 800b692:	2020      	moveq	r0, #32
 800b694:	4770      	bx	lr

0800b696 <__lo0bits>:
 800b696:	6803      	ldr	r3, [r0, #0]
 800b698:	4602      	mov	r2, r0
 800b69a:	f013 0007 	ands.w	r0, r3, #7
 800b69e:	d00b      	beq.n	800b6b8 <__lo0bits+0x22>
 800b6a0:	07d9      	lsls	r1, r3, #31
 800b6a2:	d421      	bmi.n	800b6e8 <__lo0bits+0x52>
 800b6a4:	0798      	lsls	r0, r3, #30
 800b6a6:	bf49      	itett	mi
 800b6a8:	085b      	lsrmi	r3, r3, #1
 800b6aa:	089b      	lsrpl	r3, r3, #2
 800b6ac:	2001      	movmi	r0, #1
 800b6ae:	6013      	strmi	r3, [r2, #0]
 800b6b0:	bf5c      	itt	pl
 800b6b2:	6013      	strpl	r3, [r2, #0]
 800b6b4:	2002      	movpl	r0, #2
 800b6b6:	4770      	bx	lr
 800b6b8:	b299      	uxth	r1, r3
 800b6ba:	b909      	cbnz	r1, 800b6c0 <__lo0bits+0x2a>
 800b6bc:	0c1b      	lsrs	r3, r3, #16
 800b6be:	2010      	movs	r0, #16
 800b6c0:	b2d9      	uxtb	r1, r3
 800b6c2:	b909      	cbnz	r1, 800b6c8 <__lo0bits+0x32>
 800b6c4:	3008      	adds	r0, #8
 800b6c6:	0a1b      	lsrs	r3, r3, #8
 800b6c8:	0719      	lsls	r1, r3, #28
 800b6ca:	bf04      	itt	eq
 800b6cc:	091b      	lsreq	r3, r3, #4
 800b6ce:	3004      	addeq	r0, #4
 800b6d0:	0799      	lsls	r1, r3, #30
 800b6d2:	bf04      	itt	eq
 800b6d4:	089b      	lsreq	r3, r3, #2
 800b6d6:	3002      	addeq	r0, #2
 800b6d8:	07d9      	lsls	r1, r3, #31
 800b6da:	d403      	bmi.n	800b6e4 <__lo0bits+0x4e>
 800b6dc:	085b      	lsrs	r3, r3, #1
 800b6de:	f100 0001 	add.w	r0, r0, #1
 800b6e2:	d003      	beq.n	800b6ec <__lo0bits+0x56>
 800b6e4:	6013      	str	r3, [r2, #0]
 800b6e6:	4770      	bx	lr
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	4770      	bx	lr
 800b6ec:	2020      	movs	r0, #32
 800b6ee:	4770      	bx	lr

0800b6f0 <__i2b>:
 800b6f0:	b510      	push	{r4, lr}
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	f7ff ff07 	bl	800b508 <_Balloc>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	b928      	cbnz	r0, 800b70a <__i2b+0x1a>
 800b6fe:	4b05      	ldr	r3, [pc, #20]	@ (800b714 <__i2b+0x24>)
 800b700:	4805      	ldr	r0, [pc, #20]	@ (800b718 <__i2b+0x28>)
 800b702:	f240 1145 	movw	r1, #325	@ 0x145
 800b706:	f000 fb3d 	bl	800bd84 <__assert_func>
 800b70a:	2301      	movs	r3, #1
 800b70c:	6144      	str	r4, [r0, #20]
 800b70e:	6103      	str	r3, [r0, #16]
 800b710:	bd10      	pop	{r4, pc}
 800b712:	bf00      	nop
 800b714:	0800c4d0 	.word	0x0800c4d0
 800b718:	0800c4e1 	.word	0x0800c4e1

0800b71c <__multiply>:
 800b71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b720:	4614      	mov	r4, r2
 800b722:	690a      	ldr	r2, [r1, #16]
 800b724:	6923      	ldr	r3, [r4, #16]
 800b726:	429a      	cmp	r2, r3
 800b728:	bfa8      	it	ge
 800b72a:	4623      	movge	r3, r4
 800b72c:	460f      	mov	r7, r1
 800b72e:	bfa4      	itt	ge
 800b730:	460c      	movge	r4, r1
 800b732:	461f      	movge	r7, r3
 800b734:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b738:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b73c:	68a3      	ldr	r3, [r4, #8]
 800b73e:	6861      	ldr	r1, [r4, #4]
 800b740:	eb0a 0609 	add.w	r6, sl, r9
 800b744:	42b3      	cmp	r3, r6
 800b746:	b085      	sub	sp, #20
 800b748:	bfb8      	it	lt
 800b74a:	3101      	addlt	r1, #1
 800b74c:	f7ff fedc 	bl	800b508 <_Balloc>
 800b750:	b930      	cbnz	r0, 800b760 <__multiply+0x44>
 800b752:	4602      	mov	r2, r0
 800b754:	4b44      	ldr	r3, [pc, #272]	@ (800b868 <__multiply+0x14c>)
 800b756:	4845      	ldr	r0, [pc, #276]	@ (800b86c <__multiply+0x150>)
 800b758:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b75c:	f000 fb12 	bl	800bd84 <__assert_func>
 800b760:	f100 0514 	add.w	r5, r0, #20
 800b764:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b768:	462b      	mov	r3, r5
 800b76a:	2200      	movs	r2, #0
 800b76c:	4543      	cmp	r3, r8
 800b76e:	d321      	bcc.n	800b7b4 <__multiply+0x98>
 800b770:	f107 0114 	add.w	r1, r7, #20
 800b774:	f104 0214 	add.w	r2, r4, #20
 800b778:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b77c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b780:	9302      	str	r3, [sp, #8]
 800b782:	1b13      	subs	r3, r2, r4
 800b784:	3b15      	subs	r3, #21
 800b786:	f023 0303 	bic.w	r3, r3, #3
 800b78a:	3304      	adds	r3, #4
 800b78c:	f104 0715 	add.w	r7, r4, #21
 800b790:	42ba      	cmp	r2, r7
 800b792:	bf38      	it	cc
 800b794:	2304      	movcc	r3, #4
 800b796:	9301      	str	r3, [sp, #4]
 800b798:	9b02      	ldr	r3, [sp, #8]
 800b79a:	9103      	str	r1, [sp, #12]
 800b79c:	428b      	cmp	r3, r1
 800b79e:	d80c      	bhi.n	800b7ba <__multiply+0x9e>
 800b7a0:	2e00      	cmp	r6, #0
 800b7a2:	dd03      	ble.n	800b7ac <__multiply+0x90>
 800b7a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d05b      	beq.n	800b864 <__multiply+0x148>
 800b7ac:	6106      	str	r6, [r0, #16]
 800b7ae:	b005      	add	sp, #20
 800b7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b4:	f843 2b04 	str.w	r2, [r3], #4
 800b7b8:	e7d8      	b.n	800b76c <__multiply+0x50>
 800b7ba:	f8b1 a000 	ldrh.w	sl, [r1]
 800b7be:	f1ba 0f00 	cmp.w	sl, #0
 800b7c2:	d024      	beq.n	800b80e <__multiply+0xf2>
 800b7c4:	f104 0e14 	add.w	lr, r4, #20
 800b7c8:	46a9      	mov	r9, r5
 800b7ca:	f04f 0c00 	mov.w	ip, #0
 800b7ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b7d2:	f8d9 3000 	ldr.w	r3, [r9]
 800b7d6:	fa1f fb87 	uxth.w	fp, r7
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	fb0a 330b 	mla	r3, sl, fp, r3
 800b7e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b7e4:	f8d9 7000 	ldr.w	r7, [r9]
 800b7e8:	4463      	add	r3, ip
 800b7ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b7ee:	fb0a c70b 	mla	r7, sl, fp, ip
 800b7f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b7fc:	4572      	cmp	r2, lr
 800b7fe:	f849 3b04 	str.w	r3, [r9], #4
 800b802:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b806:	d8e2      	bhi.n	800b7ce <__multiply+0xb2>
 800b808:	9b01      	ldr	r3, [sp, #4]
 800b80a:	f845 c003 	str.w	ip, [r5, r3]
 800b80e:	9b03      	ldr	r3, [sp, #12]
 800b810:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b814:	3104      	adds	r1, #4
 800b816:	f1b9 0f00 	cmp.w	r9, #0
 800b81a:	d021      	beq.n	800b860 <__multiply+0x144>
 800b81c:	682b      	ldr	r3, [r5, #0]
 800b81e:	f104 0c14 	add.w	ip, r4, #20
 800b822:	46ae      	mov	lr, r5
 800b824:	f04f 0a00 	mov.w	sl, #0
 800b828:	f8bc b000 	ldrh.w	fp, [ip]
 800b82c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b830:	fb09 770b 	mla	r7, r9, fp, r7
 800b834:	4457      	add	r7, sl
 800b836:	b29b      	uxth	r3, r3
 800b838:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b83c:	f84e 3b04 	str.w	r3, [lr], #4
 800b840:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b844:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b848:	f8be 3000 	ldrh.w	r3, [lr]
 800b84c:	fb09 330a 	mla	r3, r9, sl, r3
 800b850:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b854:	4562      	cmp	r2, ip
 800b856:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b85a:	d8e5      	bhi.n	800b828 <__multiply+0x10c>
 800b85c:	9f01      	ldr	r7, [sp, #4]
 800b85e:	51eb      	str	r3, [r5, r7]
 800b860:	3504      	adds	r5, #4
 800b862:	e799      	b.n	800b798 <__multiply+0x7c>
 800b864:	3e01      	subs	r6, #1
 800b866:	e79b      	b.n	800b7a0 <__multiply+0x84>
 800b868:	0800c4d0 	.word	0x0800c4d0
 800b86c:	0800c4e1 	.word	0x0800c4e1

0800b870 <__pow5mult>:
 800b870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b874:	4615      	mov	r5, r2
 800b876:	f012 0203 	ands.w	r2, r2, #3
 800b87a:	4607      	mov	r7, r0
 800b87c:	460e      	mov	r6, r1
 800b87e:	d007      	beq.n	800b890 <__pow5mult+0x20>
 800b880:	4c25      	ldr	r4, [pc, #148]	@ (800b918 <__pow5mult+0xa8>)
 800b882:	3a01      	subs	r2, #1
 800b884:	2300      	movs	r3, #0
 800b886:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b88a:	f7ff fe9f 	bl	800b5cc <__multadd>
 800b88e:	4606      	mov	r6, r0
 800b890:	10ad      	asrs	r5, r5, #2
 800b892:	d03d      	beq.n	800b910 <__pow5mult+0xa0>
 800b894:	69fc      	ldr	r4, [r7, #28]
 800b896:	b97c      	cbnz	r4, 800b8b8 <__pow5mult+0x48>
 800b898:	2010      	movs	r0, #16
 800b89a:	f7ff fd7f 	bl	800b39c <malloc>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	61f8      	str	r0, [r7, #28]
 800b8a2:	b928      	cbnz	r0, 800b8b0 <__pow5mult+0x40>
 800b8a4:	4b1d      	ldr	r3, [pc, #116]	@ (800b91c <__pow5mult+0xac>)
 800b8a6:	481e      	ldr	r0, [pc, #120]	@ (800b920 <__pow5mult+0xb0>)
 800b8a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b8ac:	f000 fa6a 	bl	800bd84 <__assert_func>
 800b8b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8b4:	6004      	str	r4, [r0, #0]
 800b8b6:	60c4      	str	r4, [r0, #12]
 800b8b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b8bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8c0:	b94c      	cbnz	r4, 800b8d6 <__pow5mult+0x66>
 800b8c2:	f240 2171 	movw	r1, #625	@ 0x271
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	f7ff ff12 	bl	800b6f0 <__i2b>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	6003      	str	r3, [r0, #0]
 800b8d6:	f04f 0900 	mov.w	r9, #0
 800b8da:	07eb      	lsls	r3, r5, #31
 800b8dc:	d50a      	bpl.n	800b8f4 <__pow5mult+0x84>
 800b8de:	4631      	mov	r1, r6
 800b8e0:	4622      	mov	r2, r4
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	f7ff ff1a 	bl	800b71c <__multiply>
 800b8e8:	4631      	mov	r1, r6
 800b8ea:	4680      	mov	r8, r0
 800b8ec:	4638      	mov	r0, r7
 800b8ee:	f7ff fe4b 	bl	800b588 <_Bfree>
 800b8f2:	4646      	mov	r6, r8
 800b8f4:	106d      	asrs	r5, r5, #1
 800b8f6:	d00b      	beq.n	800b910 <__pow5mult+0xa0>
 800b8f8:	6820      	ldr	r0, [r4, #0]
 800b8fa:	b938      	cbnz	r0, 800b90c <__pow5mult+0x9c>
 800b8fc:	4622      	mov	r2, r4
 800b8fe:	4621      	mov	r1, r4
 800b900:	4638      	mov	r0, r7
 800b902:	f7ff ff0b 	bl	800b71c <__multiply>
 800b906:	6020      	str	r0, [r4, #0]
 800b908:	f8c0 9000 	str.w	r9, [r0]
 800b90c:	4604      	mov	r4, r0
 800b90e:	e7e4      	b.n	800b8da <__pow5mult+0x6a>
 800b910:	4630      	mov	r0, r6
 800b912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b916:	bf00      	nop
 800b918:	0800c53c 	.word	0x0800c53c
 800b91c:	0800c461 	.word	0x0800c461
 800b920:	0800c4e1 	.word	0x0800c4e1

0800b924 <__lshift>:
 800b924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b928:	460c      	mov	r4, r1
 800b92a:	6849      	ldr	r1, [r1, #4]
 800b92c:	6923      	ldr	r3, [r4, #16]
 800b92e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b932:	68a3      	ldr	r3, [r4, #8]
 800b934:	4607      	mov	r7, r0
 800b936:	4691      	mov	r9, r2
 800b938:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b93c:	f108 0601 	add.w	r6, r8, #1
 800b940:	42b3      	cmp	r3, r6
 800b942:	db0b      	blt.n	800b95c <__lshift+0x38>
 800b944:	4638      	mov	r0, r7
 800b946:	f7ff fddf 	bl	800b508 <_Balloc>
 800b94a:	4605      	mov	r5, r0
 800b94c:	b948      	cbnz	r0, 800b962 <__lshift+0x3e>
 800b94e:	4602      	mov	r2, r0
 800b950:	4b28      	ldr	r3, [pc, #160]	@ (800b9f4 <__lshift+0xd0>)
 800b952:	4829      	ldr	r0, [pc, #164]	@ (800b9f8 <__lshift+0xd4>)
 800b954:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b958:	f000 fa14 	bl	800bd84 <__assert_func>
 800b95c:	3101      	adds	r1, #1
 800b95e:	005b      	lsls	r3, r3, #1
 800b960:	e7ee      	b.n	800b940 <__lshift+0x1c>
 800b962:	2300      	movs	r3, #0
 800b964:	f100 0114 	add.w	r1, r0, #20
 800b968:	f100 0210 	add.w	r2, r0, #16
 800b96c:	4618      	mov	r0, r3
 800b96e:	4553      	cmp	r3, sl
 800b970:	db33      	blt.n	800b9da <__lshift+0xb6>
 800b972:	6920      	ldr	r0, [r4, #16]
 800b974:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b978:	f104 0314 	add.w	r3, r4, #20
 800b97c:	f019 091f 	ands.w	r9, r9, #31
 800b980:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b984:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b988:	d02b      	beq.n	800b9e2 <__lshift+0xbe>
 800b98a:	f1c9 0e20 	rsb	lr, r9, #32
 800b98e:	468a      	mov	sl, r1
 800b990:	2200      	movs	r2, #0
 800b992:	6818      	ldr	r0, [r3, #0]
 800b994:	fa00 f009 	lsl.w	r0, r0, r9
 800b998:	4310      	orrs	r0, r2
 800b99a:	f84a 0b04 	str.w	r0, [sl], #4
 800b99e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9a2:	459c      	cmp	ip, r3
 800b9a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9a8:	d8f3      	bhi.n	800b992 <__lshift+0x6e>
 800b9aa:	ebac 0304 	sub.w	r3, ip, r4
 800b9ae:	3b15      	subs	r3, #21
 800b9b0:	f023 0303 	bic.w	r3, r3, #3
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	f104 0015 	add.w	r0, r4, #21
 800b9ba:	4584      	cmp	ip, r0
 800b9bc:	bf38      	it	cc
 800b9be:	2304      	movcc	r3, #4
 800b9c0:	50ca      	str	r2, [r1, r3]
 800b9c2:	b10a      	cbz	r2, 800b9c8 <__lshift+0xa4>
 800b9c4:	f108 0602 	add.w	r6, r8, #2
 800b9c8:	3e01      	subs	r6, #1
 800b9ca:	4638      	mov	r0, r7
 800b9cc:	612e      	str	r6, [r5, #16]
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	f7ff fdda 	bl	800b588 <_Bfree>
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9da:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9de:	3301      	adds	r3, #1
 800b9e0:	e7c5      	b.n	800b96e <__lshift+0x4a>
 800b9e2:	3904      	subs	r1, #4
 800b9e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9ec:	459c      	cmp	ip, r3
 800b9ee:	d8f9      	bhi.n	800b9e4 <__lshift+0xc0>
 800b9f0:	e7ea      	b.n	800b9c8 <__lshift+0xa4>
 800b9f2:	bf00      	nop
 800b9f4:	0800c4d0 	.word	0x0800c4d0
 800b9f8:	0800c4e1 	.word	0x0800c4e1

0800b9fc <__mcmp>:
 800b9fc:	690a      	ldr	r2, [r1, #16]
 800b9fe:	4603      	mov	r3, r0
 800ba00:	6900      	ldr	r0, [r0, #16]
 800ba02:	1a80      	subs	r0, r0, r2
 800ba04:	b530      	push	{r4, r5, lr}
 800ba06:	d10e      	bne.n	800ba26 <__mcmp+0x2a>
 800ba08:	3314      	adds	r3, #20
 800ba0a:	3114      	adds	r1, #20
 800ba0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba1c:	4295      	cmp	r5, r2
 800ba1e:	d003      	beq.n	800ba28 <__mcmp+0x2c>
 800ba20:	d205      	bcs.n	800ba2e <__mcmp+0x32>
 800ba22:	f04f 30ff 	mov.w	r0, #4294967295
 800ba26:	bd30      	pop	{r4, r5, pc}
 800ba28:	42a3      	cmp	r3, r4
 800ba2a:	d3f3      	bcc.n	800ba14 <__mcmp+0x18>
 800ba2c:	e7fb      	b.n	800ba26 <__mcmp+0x2a>
 800ba2e:	2001      	movs	r0, #1
 800ba30:	e7f9      	b.n	800ba26 <__mcmp+0x2a>
	...

0800ba34 <__mdiff>:
 800ba34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba38:	4689      	mov	r9, r1
 800ba3a:	4606      	mov	r6, r0
 800ba3c:	4611      	mov	r1, r2
 800ba3e:	4648      	mov	r0, r9
 800ba40:	4614      	mov	r4, r2
 800ba42:	f7ff ffdb 	bl	800b9fc <__mcmp>
 800ba46:	1e05      	subs	r5, r0, #0
 800ba48:	d112      	bne.n	800ba70 <__mdiff+0x3c>
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	f7ff fd5b 	bl	800b508 <_Balloc>
 800ba52:	4602      	mov	r2, r0
 800ba54:	b928      	cbnz	r0, 800ba62 <__mdiff+0x2e>
 800ba56:	4b3f      	ldr	r3, [pc, #252]	@ (800bb54 <__mdiff+0x120>)
 800ba58:	f240 2137 	movw	r1, #567	@ 0x237
 800ba5c:	483e      	ldr	r0, [pc, #248]	@ (800bb58 <__mdiff+0x124>)
 800ba5e:	f000 f991 	bl	800bd84 <__assert_func>
 800ba62:	2301      	movs	r3, #1
 800ba64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba68:	4610      	mov	r0, r2
 800ba6a:	b003      	add	sp, #12
 800ba6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba70:	bfbc      	itt	lt
 800ba72:	464b      	movlt	r3, r9
 800ba74:	46a1      	movlt	r9, r4
 800ba76:	4630      	mov	r0, r6
 800ba78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba7c:	bfba      	itte	lt
 800ba7e:	461c      	movlt	r4, r3
 800ba80:	2501      	movlt	r5, #1
 800ba82:	2500      	movge	r5, #0
 800ba84:	f7ff fd40 	bl	800b508 <_Balloc>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	b918      	cbnz	r0, 800ba94 <__mdiff+0x60>
 800ba8c:	4b31      	ldr	r3, [pc, #196]	@ (800bb54 <__mdiff+0x120>)
 800ba8e:	f240 2145 	movw	r1, #581	@ 0x245
 800ba92:	e7e3      	b.n	800ba5c <__mdiff+0x28>
 800ba94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ba98:	6926      	ldr	r6, [r4, #16]
 800ba9a:	60c5      	str	r5, [r0, #12]
 800ba9c:	f109 0310 	add.w	r3, r9, #16
 800baa0:	f109 0514 	add.w	r5, r9, #20
 800baa4:	f104 0e14 	add.w	lr, r4, #20
 800baa8:	f100 0b14 	add.w	fp, r0, #20
 800baac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bab0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bab4:	9301      	str	r3, [sp, #4]
 800bab6:	46d9      	mov	r9, fp
 800bab8:	f04f 0c00 	mov.w	ip, #0
 800babc:	9b01      	ldr	r3, [sp, #4]
 800babe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bac2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	fa1f f38a 	uxth.w	r3, sl
 800bacc:	4619      	mov	r1, r3
 800bace:	b283      	uxth	r3, r0
 800bad0:	1acb      	subs	r3, r1, r3
 800bad2:	0c00      	lsrs	r0, r0, #16
 800bad4:	4463      	add	r3, ip
 800bad6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bada:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bade:	b29b      	uxth	r3, r3
 800bae0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bae4:	4576      	cmp	r6, lr
 800bae6:	f849 3b04 	str.w	r3, [r9], #4
 800baea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800baee:	d8e5      	bhi.n	800babc <__mdiff+0x88>
 800baf0:	1b33      	subs	r3, r6, r4
 800baf2:	3b15      	subs	r3, #21
 800baf4:	f023 0303 	bic.w	r3, r3, #3
 800baf8:	3415      	adds	r4, #21
 800bafa:	3304      	adds	r3, #4
 800bafc:	42a6      	cmp	r6, r4
 800bafe:	bf38      	it	cc
 800bb00:	2304      	movcc	r3, #4
 800bb02:	441d      	add	r5, r3
 800bb04:	445b      	add	r3, fp
 800bb06:	461e      	mov	r6, r3
 800bb08:	462c      	mov	r4, r5
 800bb0a:	4544      	cmp	r4, r8
 800bb0c:	d30e      	bcc.n	800bb2c <__mdiff+0xf8>
 800bb0e:	f108 0103 	add.w	r1, r8, #3
 800bb12:	1b49      	subs	r1, r1, r5
 800bb14:	f021 0103 	bic.w	r1, r1, #3
 800bb18:	3d03      	subs	r5, #3
 800bb1a:	45a8      	cmp	r8, r5
 800bb1c:	bf38      	it	cc
 800bb1e:	2100      	movcc	r1, #0
 800bb20:	440b      	add	r3, r1
 800bb22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb26:	b191      	cbz	r1, 800bb4e <__mdiff+0x11a>
 800bb28:	6117      	str	r7, [r2, #16]
 800bb2a:	e79d      	b.n	800ba68 <__mdiff+0x34>
 800bb2c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bb30:	46e6      	mov	lr, ip
 800bb32:	0c08      	lsrs	r0, r1, #16
 800bb34:	fa1c fc81 	uxtah	ip, ip, r1
 800bb38:	4471      	add	r1, lr
 800bb3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bb3e:	b289      	uxth	r1, r1
 800bb40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bb44:	f846 1b04 	str.w	r1, [r6], #4
 800bb48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb4c:	e7dd      	b.n	800bb0a <__mdiff+0xd6>
 800bb4e:	3f01      	subs	r7, #1
 800bb50:	e7e7      	b.n	800bb22 <__mdiff+0xee>
 800bb52:	bf00      	nop
 800bb54:	0800c4d0 	.word	0x0800c4d0
 800bb58:	0800c4e1 	.word	0x0800c4e1

0800bb5c <__d2b>:
 800bb5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb60:	460f      	mov	r7, r1
 800bb62:	2101      	movs	r1, #1
 800bb64:	ec59 8b10 	vmov	r8, r9, d0
 800bb68:	4616      	mov	r6, r2
 800bb6a:	f7ff fccd 	bl	800b508 <_Balloc>
 800bb6e:	4604      	mov	r4, r0
 800bb70:	b930      	cbnz	r0, 800bb80 <__d2b+0x24>
 800bb72:	4602      	mov	r2, r0
 800bb74:	4b23      	ldr	r3, [pc, #140]	@ (800bc04 <__d2b+0xa8>)
 800bb76:	4824      	ldr	r0, [pc, #144]	@ (800bc08 <__d2b+0xac>)
 800bb78:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb7c:	f000 f902 	bl	800bd84 <__assert_func>
 800bb80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb88:	b10d      	cbz	r5, 800bb8e <__d2b+0x32>
 800bb8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb8e:	9301      	str	r3, [sp, #4]
 800bb90:	f1b8 0300 	subs.w	r3, r8, #0
 800bb94:	d023      	beq.n	800bbde <__d2b+0x82>
 800bb96:	4668      	mov	r0, sp
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	f7ff fd7c 	bl	800b696 <__lo0bits>
 800bb9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bba2:	b1d0      	cbz	r0, 800bbda <__d2b+0x7e>
 800bba4:	f1c0 0320 	rsb	r3, r0, #32
 800bba8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbac:	430b      	orrs	r3, r1
 800bbae:	40c2      	lsrs	r2, r0
 800bbb0:	6163      	str	r3, [r4, #20]
 800bbb2:	9201      	str	r2, [sp, #4]
 800bbb4:	9b01      	ldr	r3, [sp, #4]
 800bbb6:	61a3      	str	r3, [r4, #24]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	bf0c      	ite	eq
 800bbbc:	2201      	moveq	r2, #1
 800bbbe:	2202      	movne	r2, #2
 800bbc0:	6122      	str	r2, [r4, #16]
 800bbc2:	b1a5      	cbz	r5, 800bbee <__d2b+0x92>
 800bbc4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bbc8:	4405      	add	r5, r0
 800bbca:	603d      	str	r5, [r7, #0]
 800bbcc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bbd0:	6030      	str	r0, [r6, #0]
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	b003      	add	sp, #12
 800bbd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbda:	6161      	str	r1, [r4, #20]
 800bbdc:	e7ea      	b.n	800bbb4 <__d2b+0x58>
 800bbde:	a801      	add	r0, sp, #4
 800bbe0:	f7ff fd59 	bl	800b696 <__lo0bits>
 800bbe4:	9b01      	ldr	r3, [sp, #4]
 800bbe6:	6163      	str	r3, [r4, #20]
 800bbe8:	3020      	adds	r0, #32
 800bbea:	2201      	movs	r2, #1
 800bbec:	e7e8      	b.n	800bbc0 <__d2b+0x64>
 800bbee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbf2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bbf6:	6038      	str	r0, [r7, #0]
 800bbf8:	6918      	ldr	r0, [r3, #16]
 800bbfa:	f7ff fd2d 	bl	800b658 <__hi0bits>
 800bbfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc02:	e7e5      	b.n	800bbd0 <__d2b+0x74>
 800bc04:	0800c4d0 	.word	0x0800c4d0
 800bc08:	0800c4e1 	.word	0x0800c4e1

0800bc0c <__sflush_r>:
 800bc0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc14:	0716      	lsls	r6, r2, #28
 800bc16:	4605      	mov	r5, r0
 800bc18:	460c      	mov	r4, r1
 800bc1a:	d454      	bmi.n	800bcc6 <__sflush_r+0xba>
 800bc1c:	684b      	ldr	r3, [r1, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	dc02      	bgt.n	800bc28 <__sflush_r+0x1c>
 800bc22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	dd48      	ble.n	800bcba <__sflush_r+0xae>
 800bc28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc2a:	2e00      	cmp	r6, #0
 800bc2c:	d045      	beq.n	800bcba <__sflush_r+0xae>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc34:	682f      	ldr	r7, [r5, #0]
 800bc36:	6a21      	ldr	r1, [r4, #32]
 800bc38:	602b      	str	r3, [r5, #0]
 800bc3a:	d030      	beq.n	800bc9e <__sflush_r+0x92>
 800bc3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc3e:	89a3      	ldrh	r3, [r4, #12]
 800bc40:	0759      	lsls	r1, r3, #29
 800bc42:	d505      	bpl.n	800bc50 <__sflush_r+0x44>
 800bc44:	6863      	ldr	r3, [r4, #4]
 800bc46:	1ad2      	subs	r2, r2, r3
 800bc48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc4a:	b10b      	cbz	r3, 800bc50 <__sflush_r+0x44>
 800bc4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc4e:	1ad2      	subs	r2, r2, r3
 800bc50:	2300      	movs	r3, #0
 800bc52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc54:	6a21      	ldr	r1, [r4, #32]
 800bc56:	4628      	mov	r0, r5
 800bc58:	47b0      	blx	r6
 800bc5a:	1c43      	adds	r3, r0, #1
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	d106      	bne.n	800bc6e <__sflush_r+0x62>
 800bc60:	6829      	ldr	r1, [r5, #0]
 800bc62:	291d      	cmp	r1, #29
 800bc64:	d82b      	bhi.n	800bcbe <__sflush_r+0xb2>
 800bc66:	4a2a      	ldr	r2, [pc, #168]	@ (800bd10 <__sflush_r+0x104>)
 800bc68:	410a      	asrs	r2, r1
 800bc6a:	07d6      	lsls	r6, r2, #31
 800bc6c:	d427      	bmi.n	800bcbe <__sflush_r+0xb2>
 800bc6e:	2200      	movs	r2, #0
 800bc70:	6062      	str	r2, [r4, #4]
 800bc72:	04d9      	lsls	r1, r3, #19
 800bc74:	6922      	ldr	r2, [r4, #16]
 800bc76:	6022      	str	r2, [r4, #0]
 800bc78:	d504      	bpl.n	800bc84 <__sflush_r+0x78>
 800bc7a:	1c42      	adds	r2, r0, #1
 800bc7c:	d101      	bne.n	800bc82 <__sflush_r+0x76>
 800bc7e:	682b      	ldr	r3, [r5, #0]
 800bc80:	b903      	cbnz	r3, 800bc84 <__sflush_r+0x78>
 800bc82:	6560      	str	r0, [r4, #84]	@ 0x54
 800bc84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc86:	602f      	str	r7, [r5, #0]
 800bc88:	b1b9      	cbz	r1, 800bcba <__sflush_r+0xae>
 800bc8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc8e:	4299      	cmp	r1, r3
 800bc90:	d002      	beq.n	800bc98 <__sflush_r+0x8c>
 800bc92:	4628      	mov	r0, r5
 800bc94:	f7ff fb38 	bl	800b308 <_free_r>
 800bc98:	2300      	movs	r3, #0
 800bc9a:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc9c:	e00d      	b.n	800bcba <__sflush_r+0xae>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	4628      	mov	r0, r5
 800bca2:	47b0      	blx	r6
 800bca4:	4602      	mov	r2, r0
 800bca6:	1c50      	adds	r0, r2, #1
 800bca8:	d1c9      	bne.n	800bc3e <__sflush_r+0x32>
 800bcaa:	682b      	ldr	r3, [r5, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d0c6      	beq.n	800bc3e <__sflush_r+0x32>
 800bcb0:	2b1d      	cmp	r3, #29
 800bcb2:	d001      	beq.n	800bcb8 <__sflush_r+0xac>
 800bcb4:	2b16      	cmp	r3, #22
 800bcb6:	d11e      	bne.n	800bcf6 <__sflush_r+0xea>
 800bcb8:	602f      	str	r7, [r5, #0]
 800bcba:	2000      	movs	r0, #0
 800bcbc:	e022      	b.n	800bd04 <__sflush_r+0xf8>
 800bcbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcc2:	b21b      	sxth	r3, r3
 800bcc4:	e01b      	b.n	800bcfe <__sflush_r+0xf2>
 800bcc6:	690f      	ldr	r7, [r1, #16]
 800bcc8:	2f00      	cmp	r7, #0
 800bcca:	d0f6      	beq.n	800bcba <__sflush_r+0xae>
 800bccc:	0793      	lsls	r3, r2, #30
 800bcce:	680e      	ldr	r6, [r1, #0]
 800bcd0:	bf08      	it	eq
 800bcd2:	694b      	ldreq	r3, [r1, #20]
 800bcd4:	600f      	str	r7, [r1, #0]
 800bcd6:	bf18      	it	ne
 800bcd8:	2300      	movne	r3, #0
 800bcda:	eba6 0807 	sub.w	r8, r6, r7
 800bcde:	608b      	str	r3, [r1, #8]
 800bce0:	f1b8 0f00 	cmp.w	r8, #0
 800bce4:	dde9      	ble.n	800bcba <__sflush_r+0xae>
 800bce6:	6a21      	ldr	r1, [r4, #32]
 800bce8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bcea:	4643      	mov	r3, r8
 800bcec:	463a      	mov	r2, r7
 800bcee:	4628      	mov	r0, r5
 800bcf0:	47b0      	blx	r6
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	dc08      	bgt.n	800bd08 <__sflush_r+0xfc>
 800bcf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcfe:	81a3      	strh	r3, [r4, #12]
 800bd00:	f04f 30ff 	mov.w	r0, #4294967295
 800bd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd08:	4407      	add	r7, r0
 800bd0a:	eba8 0800 	sub.w	r8, r8, r0
 800bd0e:	e7e7      	b.n	800bce0 <__sflush_r+0xd4>
 800bd10:	dfbffffe 	.word	0xdfbffffe

0800bd14 <_fflush_r>:
 800bd14:	b538      	push	{r3, r4, r5, lr}
 800bd16:	690b      	ldr	r3, [r1, #16]
 800bd18:	4605      	mov	r5, r0
 800bd1a:	460c      	mov	r4, r1
 800bd1c:	b913      	cbnz	r3, 800bd24 <_fflush_r+0x10>
 800bd1e:	2500      	movs	r5, #0
 800bd20:	4628      	mov	r0, r5
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	b118      	cbz	r0, 800bd2e <_fflush_r+0x1a>
 800bd26:	6a03      	ldr	r3, [r0, #32]
 800bd28:	b90b      	cbnz	r3, 800bd2e <_fflush_r+0x1a>
 800bd2a:	f7fe fb41 	bl	800a3b0 <__sinit>
 800bd2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0f3      	beq.n	800bd1e <_fflush_r+0xa>
 800bd36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd38:	07d0      	lsls	r0, r2, #31
 800bd3a:	d404      	bmi.n	800bd46 <_fflush_r+0x32>
 800bd3c:	0599      	lsls	r1, r3, #22
 800bd3e:	d402      	bmi.n	800bd46 <_fflush_r+0x32>
 800bd40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd42:	f7fe fc82 	bl	800a64a <__retarget_lock_acquire_recursive>
 800bd46:	4628      	mov	r0, r5
 800bd48:	4621      	mov	r1, r4
 800bd4a:	f7ff ff5f 	bl	800bc0c <__sflush_r>
 800bd4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd50:	07da      	lsls	r2, r3, #31
 800bd52:	4605      	mov	r5, r0
 800bd54:	d4e4      	bmi.n	800bd20 <_fflush_r+0xc>
 800bd56:	89a3      	ldrh	r3, [r4, #12]
 800bd58:	059b      	lsls	r3, r3, #22
 800bd5a:	d4e1      	bmi.n	800bd20 <_fflush_r+0xc>
 800bd5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd5e:	f7fe fc75 	bl	800a64c <__retarget_lock_release_recursive>
 800bd62:	e7dd      	b.n	800bd20 <_fflush_r+0xc>

0800bd64 <_sbrk_r>:
 800bd64:	b538      	push	{r3, r4, r5, lr}
 800bd66:	4d06      	ldr	r5, [pc, #24]	@ (800bd80 <_sbrk_r+0x1c>)
 800bd68:	2300      	movs	r3, #0
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	602b      	str	r3, [r5, #0]
 800bd70:	f7f5 fedc 	bl	8001b2c <_sbrk>
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	d102      	bne.n	800bd7e <_sbrk_r+0x1a>
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	b103      	cbz	r3, 800bd7e <_sbrk_r+0x1a>
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	20004778 	.word	0x20004778

0800bd84 <__assert_func>:
 800bd84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd86:	4614      	mov	r4, r2
 800bd88:	461a      	mov	r2, r3
 800bd8a:	4b09      	ldr	r3, [pc, #36]	@ (800bdb0 <__assert_func+0x2c>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4605      	mov	r5, r0
 800bd90:	68d8      	ldr	r0, [r3, #12]
 800bd92:	b954      	cbnz	r4, 800bdaa <__assert_func+0x26>
 800bd94:	4b07      	ldr	r3, [pc, #28]	@ (800bdb4 <__assert_func+0x30>)
 800bd96:	461c      	mov	r4, r3
 800bd98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd9c:	9100      	str	r1, [sp, #0]
 800bd9e:	462b      	mov	r3, r5
 800bda0:	4905      	ldr	r1, [pc, #20]	@ (800bdb8 <__assert_func+0x34>)
 800bda2:	f000 f841 	bl	800be28 <fiprintf>
 800bda6:	f000 f851 	bl	800be4c <abort>
 800bdaa:	4b04      	ldr	r3, [pc, #16]	@ (800bdbc <__assert_func+0x38>)
 800bdac:	e7f4      	b.n	800bd98 <__assert_func+0x14>
 800bdae:	bf00      	nop
 800bdb0:	2000001c 	.word	0x2000001c
 800bdb4:	0800c67d 	.word	0x0800c67d
 800bdb8:	0800c64f 	.word	0x0800c64f
 800bdbc:	0800c642 	.word	0x0800c642

0800bdc0 <_calloc_r>:
 800bdc0:	b570      	push	{r4, r5, r6, lr}
 800bdc2:	fba1 5402 	umull	r5, r4, r1, r2
 800bdc6:	b93c      	cbnz	r4, 800bdd8 <_calloc_r+0x18>
 800bdc8:	4629      	mov	r1, r5
 800bdca:	f7ff fb11 	bl	800b3f0 <_malloc_r>
 800bdce:	4606      	mov	r6, r0
 800bdd0:	b928      	cbnz	r0, 800bdde <_calloc_r+0x1e>
 800bdd2:	2600      	movs	r6, #0
 800bdd4:	4630      	mov	r0, r6
 800bdd6:	bd70      	pop	{r4, r5, r6, pc}
 800bdd8:	220c      	movs	r2, #12
 800bdda:	6002      	str	r2, [r0, #0]
 800bddc:	e7f9      	b.n	800bdd2 <_calloc_r+0x12>
 800bdde:	462a      	mov	r2, r5
 800bde0:	4621      	mov	r1, r4
 800bde2:	f7fe fb5e 	bl	800a4a2 <memset>
 800bde6:	e7f5      	b.n	800bdd4 <_calloc_r+0x14>

0800bde8 <__ascii_mbtowc>:
 800bde8:	b082      	sub	sp, #8
 800bdea:	b901      	cbnz	r1, 800bdee <__ascii_mbtowc+0x6>
 800bdec:	a901      	add	r1, sp, #4
 800bdee:	b142      	cbz	r2, 800be02 <__ascii_mbtowc+0x1a>
 800bdf0:	b14b      	cbz	r3, 800be06 <__ascii_mbtowc+0x1e>
 800bdf2:	7813      	ldrb	r3, [r2, #0]
 800bdf4:	600b      	str	r3, [r1, #0]
 800bdf6:	7812      	ldrb	r2, [r2, #0]
 800bdf8:	1e10      	subs	r0, r2, #0
 800bdfa:	bf18      	it	ne
 800bdfc:	2001      	movne	r0, #1
 800bdfe:	b002      	add	sp, #8
 800be00:	4770      	bx	lr
 800be02:	4610      	mov	r0, r2
 800be04:	e7fb      	b.n	800bdfe <__ascii_mbtowc+0x16>
 800be06:	f06f 0001 	mvn.w	r0, #1
 800be0a:	e7f8      	b.n	800bdfe <__ascii_mbtowc+0x16>

0800be0c <__ascii_wctomb>:
 800be0c:	4603      	mov	r3, r0
 800be0e:	4608      	mov	r0, r1
 800be10:	b141      	cbz	r1, 800be24 <__ascii_wctomb+0x18>
 800be12:	2aff      	cmp	r2, #255	@ 0xff
 800be14:	d904      	bls.n	800be20 <__ascii_wctomb+0x14>
 800be16:	228a      	movs	r2, #138	@ 0x8a
 800be18:	601a      	str	r2, [r3, #0]
 800be1a:	f04f 30ff 	mov.w	r0, #4294967295
 800be1e:	4770      	bx	lr
 800be20:	700a      	strb	r2, [r1, #0]
 800be22:	2001      	movs	r0, #1
 800be24:	4770      	bx	lr
	...

0800be28 <fiprintf>:
 800be28:	b40e      	push	{r1, r2, r3}
 800be2a:	b503      	push	{r0, r1, lr}
 800be2c:	4601      	mov	r1, r0
 800be2e:	ab03      	add	r3, sp, #12
 800be30:	4805      	ldr	r0, [pc, #20]	@ (800be48 <fiprintf+0x20>)
 800be32:	f853 2b04 	ldr.w	r2, [r3], #4
 800be36:	6800      	ldr	r0, [r0, #0]
 800be38:	9301      	str	r3, [sp, #4]
 800be3a:	f000 f837 	bl	800beac <_vfiprintf_r>
 800be3e:	b002      	add	sp, #8
 800be40:	f85d eb04 	ldr.w	lr, [sp], #4
 800be44:	b003      	add	sp, #12
 800be46:	4770      	bx	lr
 800be48:	2000001c 	.word	0x2000001c

0800be4c <abort>:
 800be4c:	b508      	push	{r3, lr}
 800be4e:	2006      	movs	r0, #6
 800be50:	f000 fa00 	bl	800c254 <raise>
 800be54:	2001      	movs	r0, #1
 800be56:	f7f5 fdf1 	bl	8001a3c <_exit>

0800be5a <__sfputc_r>:
 800be5a:	6893      	ldr	r3, [r2, #8]
 800be5c:	3b01      	subs	r3, #1
 800be5e:	2b00      	cmp	r3, #0
 800be60:	b410      	push	{r4}
 800be62:	6093      	str	r3, [r2, #8]
 800be64:	da08      	bge.n	800be78 <__sfputc_r+0x1e>
 800be66:	6994      	ldr	r4, [r2, #24]
 800be68:	42a3      	cmp	r3, r4
 800be6a:	db01      	blt.n	800be70 <__sfputc_r+0x16>
 800be6c:	290a      	cmp	r1, #10
 800be6e:	d103      	bne.n	800be78 <__sfputc_r+0x1e>
 800be70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be74:	f000 b932 	b.w	800c0dc <__swbuf_r>
 800be78:	6813      	ldr	r3, [r2, #0]
 800be7a:	1c58      	adds	r0, r3, #1
 800be7c:	6010      	str	r0, [r2, #0]
 800be7e:	7019      	strb	r1, [r3, #0]
 800be80:	4608      	mov	r0, r1
 800be82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <__sfputs_r>:
 800be88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be8a:	4606      	mov	r6, r0
 800be8c:	460f      	mov	r7, r1
 800be8e:	4614      	mov	r4, r2
 800be90:	18d5      	adds	r5, r2, r3
 800be92:	42ac      	cmp	r4, r5
 800be94:	d101      	bne.n	800be9a <__sfputs_r+0x12>
 800be96:	2000      	movs	r0, #0
 800be98:	e007      	b.n	800beaa <__sfputs_r+0x22>
 800be9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be9e:	463a      	mov	r2, r7
 800bea0:	4630      	mov	r0, r6
 800bea2:	f7ff ffda 	bl	800be5a <__sfputc_r>
 800bea6:	1c43      	adds	r3, r0, #1
 800bea8:	d1f3      	bne.n	800be92 <__sfputs_r+0xa>
 800beaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800beac <_vfiprintf_r>:
 800beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb0:	460d      	mov	r5, r1
 800beb2:	b09d      	sub	sp, #116	@ 0x74
 800beb4:	4614      	mov	r4, r2
 800beb6:	4698      	mov	r8, r3
 800beb8:	4606      	mov	r6, r0
 800beba:	b118      	cbz	r0, 800bec4 <_vfiprintf_r+0x18>
 800bebc:	6a03      	ldr	r3, [r0, #32]
 800bebe:	b90b      	cbnz	r3, 800bec4 <_vfiprintf_r+0x18>
 800bec0:	f7fe fa76 	bl	800a3b0 <__sinit>
 800bec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bec6:	07d9      	lsls	r1, r3, #31
 800bec8:	d405      	bmi.n	800bed6 <_vfiprintf_r+0x2a>
 800beca:	89ab      	ldrh	r3, [r5, #12]
 800becc:	059a      	lsls	r2, r3, #22
 800bece:	d402      	bmi.n	800bed6 <_vfiprintf_r+0x2a>
 800bed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bed2:	f7fe fbba 	bl	800a64a <__retarget_lock_acquire_recursive>
 800bed6:	89ab      	ldrh	r3, [r5, #12]
 800bed8:	071b      	lsls	r3, r3, #28
 800beda:	d501      	bpl.n	800bee0 <_vfiprintf_r+0x34>
 800bedc:	692b      	ldr	r3, [r5, #16]
 800bede:	b99b      	cbnz	r3, 800bf08 <_vfiprintf_r+0x5c>
 800bee0:	4629      	mov	r1, r5
 800bee2:	4630      	mov	r0, r6
 800bee4:	f000 f938 	bl	800c158 <__swsetup_r>
 800bee8:	b170      	cbz	r0, 800bf08 <_vfiprintf_r+0x5c>
 800beea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800beec:	07dc      	lsls	r4, r3, #31
 800beee:	d504      	bpl.n	800befa <_vfiprintf_r+0x4e>
 800bef0:	f04f 30ff 	mov.w	r0, #4294967295
 800bef4:	b01d      	add	sp, #116	@ 0x74
 800bef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800befa:	89ab      	ldrh	r3, [r5, #12]
 800befc:	0598      	lsls	r0, r3, #22
 800befe:	d4f7      	bmi.n	800bef0 <_vfiprintf_r+0x44>
 800bf00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf02:	f7fe fba3 	bl	800a64c <__retarget_lock_release_recursive>
 800bf06:	e7f3      	b.n	800bef0 <_vfiprintf_r+0x44>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf0c:	2320      	movs	r3, #32
 800bf0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf12:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf16:	2330      	movs	r3, #48	@ 0x30
 800bf18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c0c8 <_vfiprintf_r+0x21c>
 800bf1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf20:	f04f 0901 	mov.w	r9, #1
 800bf24:	4623      	mov	r3, r4
 800bf26:	469a      	mov	sl, r3
 800bf28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf2c:	b10a      	cbz	r2, 800bf32 <_vfiprintf_r+0x86>
 800bf2e:	2a25      	cmp	r2, #37	@ 0x25
 800bf30:	d1f9      	bne.n	800bf26 <_vfiprintf_r+0x7a>
 800bf32:	ebba 0b04 	subs.w	fp, sl, r4
 800bf36:	d00b      	beq.n	800bf50 <_vfiprintf_r+0xa4>
 800bf38:	465b      	mov	r3, fp
 800bf3a:	4622      	mov	r2, r4
 800bf3c:	4629      	mov	r1, r5
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f7ff ffa2 	bl	800be88 <__sfputs_r>
 800bf44:	3001      	adds	r0, #1
 800bf46:	f000 80a7 	beq.w	800c098 <_vfiprintf_r+0x1ec>
 800bf4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf4c:	445a      	add	r2, fp
 800bf4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf50:	f89a 3000 	ldrb.w	r3, [sl]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f000 809f 	beq.w	800c098 <_vfiprintf_r+0x1ec>
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf64:	f10a 0a01 	add.w	sl, sl, #1
 800bf68:	9304      	str	r3, [sp, #16]
 800bf6a:	9307      	str	r3, [sp, #28]
 800bf6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf70:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf72:	4654      	mov	r4, sl
 800bf74:	2205      	movs	r2, #5
 800bf76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf7a:	4853      	ldr	r0, [pc, #332]	@ (800c0c8 <_vfiprintf_r+0x21c>)
 800bf7c:	f7f4 f950 	bl	8000220 <memchr>
 800bf80:	9a04      	ldr	r2, [sp, #16]
 800bf82:	b9d8      	cbnz	r0, 800bfbc <_vfiprintf_r+0x110>
 800bf84:	06d1      	lsls	r1, r2, #27
 800bf86:	bf44      	itt	mi
 800bf88:	2320      	movmi	r3, #32
 800bf8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf8e:	0713      	lsls	r3, r2, #28
 800bf90:	bf44      	itt	mi
 800bf92:	232b      	movmi	r3, #43	@ 0x2b
 800bf94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf98:	f89a 3000 	ldrb.w	r3, [sl]
 800bf9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf9e:	d015      	beq.n	800bfcc <_vfiprintf_r+0x120>
 800bfa0:	9a07      	ldr	r2, [sp, #28]
 800bfa2:	4654      	mov	r4, sl
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	f04f 0c0a 	mov.w	ip, #10
 800bfaa:	4621      	mov	r1, r4
 800bfac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfb0:	3b30      	subs	r3, #48	@ 0x30
 800bfb2:	2b09      	cmp	r3, #9
 800bfb4:	d94b      	bls.n	800c04e <_vfiprintf_r+0x1a2>
 800bfb6:	b1b0      	cbz	r0, 800bfe6 <_vfiprintf_r+0x13a>
 800bfb8:	9207      	str	r2, [sp, #28]
 800bfba:	e014      	b.n	800bfe6 <_vfiprintf_r+0x13a>
 800bfbc:	eba0 0308 	sub.w	r3, r0, r8
 800bfc0:	fa09 f303 	lsl.w	r3, r9, r3
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	9304      	str	r3, [sp, #16]
 800bfc8:	46a2      	mov	sl, r4
 800bfca:	e7d2      	b.n	800bf72 <_vfiprintf_r+0xc6>
 800bfcc:	9b03      	ldr	r3, [sp, #12]
 800bfce:	1d19      	adds	r1, r3, #4
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	9103      	str	r1, [sp, #12]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	bfbb      	ittet	lt
 800bfd8:	425b      	neglt	r3, r3
 800bfda:	f042 0202 	orrlt.w	r2, r2, #2
 800bfde:	9307      	strge	r3, [sp, #28]
 800bfe0:	9307      	strlt	r3, [sp, #28]
 800bfe2:	bfb8      	it	lt
 800bfe4:	9204      	strlt	r2, [sp, #16]
 800bfe6:	7823      	ldrb	r3, [r4, #0]
 800bfe8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfea:	d10a      	bne.n	800c002 <_vfiprintf_r+0x156>
 800bfec:	7863      	ldrb	r3, [r4, #1]
 800bfee:	2b2a      	cmp	r3, #42	@ 0x2a
 800bff0:	d132      	bne.n	800c058 <_vfiprintf_r+0x1ac>
 800bff2:	9b03      	ldr	r3, [sp, #12]
 800bff4:	1d1a      	adds	r2, r3, #4
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	9203      	str	r2, [sp, #12]
 800bffa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bffe:	3402      	adds	r4, #2
 800c000:	9305      	str	r3, [sp, #20]
 800c002:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c0d8 <_vfiprintf_r+0x22c>
 800c006:	7821      	ldrb	r1, [r4, #0]
 800c008:	2203      	movs	r2, #3
 800c00a:	4650      	mov	r0, sl
 800c00c:	f7f4 f908 	bl	8000220 <memchr>
 800c010:	b138      	cbz	r0, 800c022 <_vfiprintf_r+0x176>
 800c012:	9b04      	ldr	r3, [sp, #16]
 800c014:	eba0 000a 	sub.w	r0, r0, sl
 800c018:	2240      	movs	r2, #64	@ 0x40
 800c01a:	4082      	lsls	r2, r0
 800c01c:	4313      	orrs	r3, r2
 800c01e:	3401      	adds	r4, #1
 800c020:	9304      	str	r3, [sp, #16]
 800c022:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c026:	4829      	ldr	r0, [pc, #164]	@ (800c0cc <_vfiprintf_r+0x220>)
 800c028:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c02c:	2206      	movs	r2, #6
 800c02e:	f7f4 f8f7 	bl	8000220 <memchr>
 800c032:	2800      	cmp	r0, #0
 800c034:	d03f      	beq.n	800c0b6 <_vfiprintf_r+0x20a>
 800c036:	4b26      	ldr	r3, [pc, #152]	@ (800c0d0 <_vfiprintf_r+0x224>)
 800c038:	bb1b      	cbnz	r3, 800c082 <_vfiprintf_r+0x1d6>
 800c03a:	9b03      	ldr	r3, [sp, #12]
 800c03c:	3307      	adds	r3, #7
 800c03e:	f023 0307 	bic.w	r3, r3, #7
 800c042:	3308      	adds	r3, #8
 800c044:	9303      	str	r3, [sp, #12]
 800c046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c048:	443b      	add	r3, r7
 800c04a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c04c:	e76a      	b.n	800bf24 <_vfiprintf_r+0x78>
 800c04e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c052:	460c      	mov	r4, r1
 800c054:	2001      	movs	r0, #1
 800c056:	e7a8      	b.n	800bfaa <_vfiprintf_r+0xfe>
 800c058:	2300      	movs	r3, #0
 800c05a:	3401      	adds	r4, #1
 800c05c:	9305      	str	r3, [sp, #20]
 800c05e:	4619      	mov	r1, r3
 800c060:	f04f 0c0a 	mov.w	ip, #10
 800c064:	4620      	mov	r0, r4
 800c066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c06a:	3a30      	subs	r2, #48	@ 0x30
 800c06c:	2a09      	cmp	r2, #9
 800c06e:	d903      	bls.n	800c078 <_vfiprintf_r+0x1cc>
 800c070:	2b00      	cmp	r3, #0
 800c072:	d0c6      	beq.n	800c002 <_vfiprintf_r+0x156>
 800c074:	9105      	str	r1, [sp, #20]
 800c076:	e7c4      	b.n	800c002 <_vfiprintf_r+0x156>
 800c078:	fb0c 2101 	mla	r1, ip, r1, r2
 800c07c:	4604      	mov	r4, r0
 800c07e:	2301      	movs	r3, #1
 800c080:	e7f0      	b.n	800c064 <_vfiprintf_r+0x1b8>
 800c082:	ab03      	add	r3, sp, #12
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	462a      	mov	r2, r5
 800c088:	4b12      	ldr	r3, [pc, #72]	@ (800c0d4 <_vfiprintf_r+0x228>)
 800c08a:	a904      	add	r1, sp, #16
 800c08c:	4630      	mov	r0, r6
 800c08e:	f7fd fd4b 	bl	8009b28 <_printf_float>
 800c092:	4607      	mov	r7, r0
 800c094:	1c78      	adds	r0, r7, #1
 800c096:	d1d6      	bne.n	800c046 <_vfiprintf_r+0x19a>
 800c098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c09a:	07d9      	lsls	r1, r3, #31
 800c09c:	d405      	bmi.n	800c0aa <_vfiprintf_r+0x1fe>
 800c09e:	89ab      	ldrh	r3, [r5, #12]
 800c0a0:	059a      	lsls	r2, r3, #22
 800c0a2:	d402      	bmi.n	800c0aa <_vfiprintf_r+0x1fe>
 800c0a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0a6:	f7fe fad1 	bl	800a64c <__retarget_lock_release_recursive>
 800c0aa:	89ab      	ldrh	r3, [r5, #12]
 800c0ac:	065b      	lsls	r3, r3, #25
 800c0ae:	f53f af1f 	bmi.w	800bef0 <_vfiprintf_r+0x44>
 800c0b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0b4:	e71e      	b.n	800bef4 <_vfiprintf_r+0x48>
 800c0b6:	ab03      	add	r3, sp, #12
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	462a      	mov	r2, r5
 800c0bc:	4b05      	ldr	r3, [pc, #20]	@ (800c0d4 <_vfiprintf_r+0x228>)
 800c0be:	a904      	add	r1, sp, #16
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	f7fd ffc9 	bl	800a058 <_printf_i>
 800c0c6:	e7e4      	b.n	800c092 <_vfiprintf_r+0x1e6>
 800c0c8:	0800c77f 	.word	0x0800c77f
 800c0cc:	0800c789 	.word	0x0800c789
 800c0d0:	08009b29 	.word	0x08009b29
 800c0d4:	0800be89 	.word	0x0800be89
 800c0d8:	0800c785 	.word	0x0800c785

0800c0dc <__swbuf_r>:
 800c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0de:	460e      	mov	r6, r1
 800c0e0:	4614      	mov	r4, r2
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	b118      	cbz	r0, 800c0ee <__swbuf_r+0x12>
 800c0e6:	6a03      	ldr	r3, [r0, #32]
 800c0e8:	b90b      	cbnz	r3, 800c0ee <__swbuf_r+0x12>
 800c0ea:	f7fe f961 	bl	800a3b0 <__sinit>
 800c0ee:	69a3      	ldr	r3, [r4, #24]
 800c0f0:	60a3      	str	r3, [r4, #8]
 800c0f2:	89a3      	ldrh	r3, [r4, #12]
 800c0f4:	071a      	lsls	r2, r3, #28
 800c0f6:	d501      	bpl.n	800c0fc <__swbuf_r+0x20>
 800c0f8:	6923      	ldr	r3, [r4, #16]
 800c0fa:	b943      	cbnz	r3, 800c10e <__swbuf_r+0x32>
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	4628      	mov	r0, r5
 800c100:	f000 f82a 	bl	800c158 <__swsetup_r>
 800c104:	b118      	cbz	r0, 800c10e <__swbuf_r+0x32>
 800c106:	f04f 37ff 	mov.w	r7, #4294967295
 800c10a:	4638      	mov	r0, r7
 800c10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c10e:	6823      	ldr	r3, [r4, #0]
 800c110:	6922      	ldr	r2, [r4, #16]
 800c112:	1a98      	subs	r0, r3, r2
 800c114:	6963      	ldr	r3, [r4, #20]
 800c116:	b2f6      	uxtb	r6, r6
 800c118:	4283      	cmp	r3, r0
 800c11a:	4637      	mov	r7, r6
 800c11c:	dc05      	bgt.n	800c12a <__swbuf_r+0x4e>
 800c11e:	4621      	mov	r1, r4
 800c120:	4628      	mov	r0, r5
 800c122:	f7ff fdf7 	bl	800bd14 <_fflush_r>
 800c126:	2800      	cmp	r0, #0
 800c128:	d1ed      	bne.n	800c106 <__swbuf_r+0x2a>
 800c12a:	68a3      	ldr	r3, [r4, #8]
 800c12c:	3b01      	subs	r3, #1
 800c12e:	60a3      	str	r3, [r4, #8]
 800c130:	6823      	ldr	r3, [r4, #0]
 800c132:	1c5a      	adds	r2, r3, #1
 800c134:	6022      	str	r2, [r4, #0]
 800c136:	701e      	strb	r6, [r3, #0]
 800c138:	6962      	ldr	r2, [r4, #20]
 800c13a:	1c43      	adds	r3, r0, #1
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d004      	beq.n	800c14a <__swbuf_r+0x6e>
 800c140:	89a3      	ldrh	r3, [r4, #12]
 800c142:	07db      	lsls	r3, r3, #31
 800c144:	d5e1      	bpl.n	800c10a <__swbuf_r+0x2e>
 800c146:	2e0a      	cmp	r6, #10
 800c148:	d1df      	bne.n	800c10a <__swbuf_r+0x2e>
 800c14a:	4621      	mov	r1, r4
 800c14c:	4628      	mov	r0, r5
 800c14e:	f7ff fde1 	bl	800bd14 <_fflush_r>
 800c152:	2800      	cmp	r0, #0
 800c154:	d0d9      	beq.n	800c10a <__swbuf_r+0x2e>
 800c156:	e7d6      	b.n	800c106 <__swbuf_r+0x2a>

0800c158 <__swsetup_r>:
 800c158:	b538      	push	{r3, r4, r5, lr}
 800c15a:	4b29      	ldr	r3, [pc, #164]	@ (800c200 <__swsetup_r+0xa8>)
 800c15c:	4605      	mov	r5, r0
 800c15e:	6818      	ldr	r0, [r3, #0]
 800c160:	460c      	mov	r4, r1
 800c162:	b118      	cbz	r0, 800c16c <__swsetup_r+0x14>
 800c164:	6a03      	ldr	r3, [r0, #32]
 800c166:	b90b      	cbnz	r3, 800c16c <__swsetup_r+0x14>
 800c168:	f7fe f922 	bl	800a3b0 <__sinit>
 800c16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c170:	0719      	lsls	r1, r3, #28
 800c172:	d422      	bmi.n	800c1ba <__swsetup_r+0x62>
 800c174:	06da      	lsls	r2, r3, #27
 800c176:	d407      	bmi.n	800c188 <__swsetup_r+0x30>
 800c178:	2209      	movs	r2, #9
 800c17a:	602a      	str	r2, [r5, #0]
 800c17c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c180:	81a3      	strh	r3, [r4, #12]
 800c182:	f04f 30ff 	mov.w	r0, #4294967295
 800c186:	e033      	b.n	800c1f0 <__swsetup_r+0x98>
 800c188:	0758      	lsls	r0, r3, #29
 800c18a:	d512      	bpl.n	800c1b2 <__swsetup_r+0x5a>
 800c18c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c18e:	b141      	cbz	r1, 800c1a2 <__swsetup_r+0x4a>
 800c190:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c194:	4299      	cmp	r1, r3
 800c196:	d002      	beq.n	800c19e <__swsetup_r+0x46>
 800c198:	4628      	mov	r0, r5
 800c19a:	f7ff f8b5 	bl	800b308 <_free_r>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1a2:	89a3      	ldrh	r3, [r4, #12]
 800c1a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c1a8:	81a3      	strh	r3, [r4, #12]
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	6063      	str	r3, [r4, #4]
 800c1ae:	6923      	ldr	r3, [r4, #16]
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	89a3      	ldrh	r3, [r4, #12]
 800c1b4:	f043 0308 	orr.w	r3, r3, #8
 800c1b8:	81a3      	strh	r3, [r4, #12]
 800c1ba:	6923      	ldr	r3, [r4, #16]
 800c1bc:	b94b      	cbnz	r3, 800c1d2 <__swsetup_r+0x7a>
 800c1be:	89a3      	ldrh	r3, [r4, #12]
 800c1c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c1c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1c8:	d003      	beq.n	800c1d2 <__swsetup_r+0x7a>
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	f000 f883 	bl	800c2d8 <__smakebuf_r>
 800c1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1d6:	f013 0201 	ands.w	r2, r3, #1
 800c1da:	d00a      	beq.n	800c1f2 <__swsetup_r+0x9a>
 800c1dc:	2200      	movs	r2, #0
 800c1de:	60a2      	str	r2, [r4, #8]
 800c1e0:	6962      	ldr	r2, [r4, #20]
 800c1e2:	4252      	negs	r2, r2
 800c1e4:	61a2      	str	r2, [r4, #24]
 800c1e6:	6922      	ldr	r2, [r4, #16]
 800c1e8:	b942      	cbnz	r2, 800c1fc <__swsetup_r+0xa4>
 800c1ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c1ee:	d1c5      	bne.n	800c17c <__swsetup_r+0x24>
 800c1f0:	bd38      	pop	{r3, r4, r5, pc}
 800c1f2:	0799      	lsls	r1, r3, #30
 800c1f4:	bf58      	it	pl
 800c1f6:	6962      	ldrpl	r2, [r4, #20]
 800c1f8:	60a2      	str	r2, [r4, #8]
 800c1fa:	e7f4      	b.n	800c1e6 <__swsetup_r+0x8e>
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	e7f7      	b.n	800c1f0 <__swsetup_r+0x98>
 800c200:	2000001c 	.word	0x2000001c

0800c204 <_raise_r>:
 800c204:	291f      	cmp	r1, #31
 800c206:	b538      	push	{r3, r4, r5, lr}
 800c208:	4605      	mov	r5, r0
 800c20a:	460c      	mov	r4, r1
 800c20c:	d904      	bls.n	800c218 <_raise_r+0x14>
 800c20e:	2316      	movs	r3, #22
 800c210:	6003      	str	r3, [r0, #0]
 800c212:	f04f 30ff 	mov.w	r0, #4294967295
 800c216:	bd38      	pop	{r3, r4, r5, pc}
 800c218:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c21a:	b112      	cbz	r2, 800c222 <_raise_r+0x1e>
 800c21c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c220:	b94b      	cbnz	r3, 800c236 <_raise_r+0x32>
 800c222:	4628      	mov	r0, r5
 800c224:	f000 f830 	bl	800c288 <_getpid_r>
 800c228:	4622      	mov	r2, r4
 800c22a:	4601      	mov	r1, r0
 800c22c:	4628      	mov	r0, r5
 800c22e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c232:	f000 b817 	b.w	800c264 <_kill_r>
 800c236:	2b01      	cmp	r3, #1
 800c238:	d00a      	beq.n	800c250 <_raise_r+0x4c>
 800c23a:	1c59      	adds	r1, r3, #1
 800c23c:	d103      	bne.n	800c246 <_raise_r+0x42>
 800c23e:	2316      	movs	r3, #22
 800c240:	6003      	str	r3, [r0, #0]
 800c242:	2001      	movs	r0, #1
 800c244:	e7e7      	b.n	800c216 <_raise_r+0x12>
 800c246:	2100      	movs	r1, #0
 800c248:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c24c:	4620      	mov	r0, r4
 800c24e:	4798      	blx	r3
 800c250:	2000      	movs	r0, #0
 800c252:	e7e0      	b.n	800c216 <_raise_r+0x12>

0800c254 <raise>:
 800c254:	4b02      	ldr	r3, [pc, #8]	@ (800c260 <raise+0xc>)
 800c256:	4601      	mov	r1, r0
 800c258:	6818      	ldr	r0, [r3, #0]
 800c25a:	f7ff bfd3 	b.w	800c204 <_raise_r>
 800c25e:	bf00      	nop
 800c260:	2000001c 	.word	0x2000001c

0800c264 <_kill_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4d07      	ldr	r5, [pc, #28]	@ (800c284 <_kill_r+0x20>)
 800c268:	2300      	movs	r3, #0
 800c26a:	4604      	mov	r4, r0
 800c26c:	4608      	mov	r0, r1
 800c26e:	4611      	mov	r1, r2
 800c270:	602b      	str	r3, [r5, #0]
 800c272:	f7f5 fbd3 	bl	8001a1c <_kill>
 800c276:	1c43      	adds	r3, r0, #1
 800c278:	d102      	bne.n	800c280 <_kill_r+0x1c>
 800c27a:	682b      	ldr	r3, [r5, #0]
 800c27c:	b103      	cbz	r3, 800c280 <_kill_r+0x1c>
 800c27e:	6023      	str	r3, [r4, #0]
 800c280:	bd38      	pop	{r3, r4, r5, pc}
 800c282:	bf00      	nop
 800c284:	20004778 	.word	0x20004778

0800c288 <_getpid_r>:
 800c288:	f7f5 bbc0 	b.w	8001a0c <_getpid>

0800c28c <__swhatbuf_r>:
 800c28c:	b570      	push	{r4, r5, r6, lr}
 800c28e:	460c      	mov	r4, r1
 800c290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c294:	2900      	cmp	r1, #0
 800c296:	b096      	sub	sp, #88	@ 0x58
 800c298:	4615      	mov	r5, r2
 800c29a:	461e      	mov	r6, r3
 800c29c:	da0d      	bge.n	800c2ba <__swhatbuf_r+0x2e>
 800c29e:	89a3      	ldrh	r3, [r4, #12]
 800c2a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c2a4:	f04f 0100 	mov.w	r1, #0
 800c2a8:	bf14      	ite	ne
 800c2aa:	2340      	movne	r3, #64	@ 0x40
 800c2ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	6031      	str	r1, [r6, #0]
 800c2b4:	602b      	str	r3, [r5, #0]
 800c2b6:	b016      	add	sp, #88	@ 0x58
 800c2b8:	bd70      	pop	{r4, r5, r6, pc}
 800c2ba:	466a      	mov	r2, sp
 800c2bc:	f000 f848 	bl	800c350 <_fstat_r>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	dbec      	blt.n	800c29e <__swhatbuf_r+0x12>
 800c2c4:	9901      	ldr	r1, [sp, #4]
 800c2c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c2ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c2ce:	4259      	negs	r1, r3
 800c2d0:	4159      	adcs	r1, r3
 800c2d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2d6:	e7eb      	b.n	800c2b0 <__swhatbuf_r+0x24>

0800c2d8 <__smakebuf_r>:
 800c2d8:	898b      	ldrh	r3, [r1, #12]
 800c2da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2dc:	079d      	lsls	r5, r3, #30
 800c2de:	4606      	mov	r6, r0
 800c2e0:	460c      	mov	r4, r1
 800c2e2:	d507      	bpl.n	800c2f4 <__smakebuf_r+0x1c>
 800c2e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	6123      	str	r3, [r4, #16]
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	6163      	str	r3, [r4, #20]
 800c2f0:	b003      	add	sp, #12
 800c2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2f4:	ab01      	add	r3, sp, #4
 800c2f6:	466a      	mov	r2, sp
 800c2f8:	f7ff ffc8 	bl	800c28c <__swhatbuf_r>
 800c2fc:	9f00      	ldr	r7, [sp, #0]
 800c2fe:	4605      	mov	r5, r0
 800c300:	4639      	mov	r1, r7
 800c302:	4630      	mov	r0, r6
 800c304:	f7ff f874 	bl	800b3f0 <_malloc_r>
 800c308:	b948      	cbnz	r0, 800c31e <__smakebuf_r+0x46>
 800c30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c30e:	059a      	lsls	r2, r3, #22
 800c310:	d4ee      	bmi.n	800c2f0 <__smakebuf_r+0x18>
 800c312:	f023 0303 	bic.w	r3, r3, #3
 800c316:	f043 0302 	orr.w	r3, r3, #2
 800c31a:	81a3      	strh	r3, [r4, #12]
 800c31c:	e7e2      	b.n	800c2e4 <__smakebuf_r+0xc>
 800c31e:	89a3      	ldrh	r3, [r4, #12]
 800c320:	6020      	str	r0, [r4, #0]
 800c322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c326:	81a3      	strh	r3, [r4, #12]
 800c328:	9b01      	ldr	r3, [sp, #4]
 800c32a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c32e:	b15b      	cbz	r3, 800c348 <__smakebuf_r+0x70>
 800c330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c334:	4630      	mov	r0, r6
 800c336:	f000 f81d 	bl	800c374 <_isatty_r>
 800c33a:	b128      	cbz	r0, 800c348 <__smakebuf_r+0x70>
 800c33c:	89a3      	ldrh	r3, [r4, #12]
 800c33e:	f023 0303 	bic.w	r3, r3, #3
 800c342:	f043 0301 	orr.w	r3, r3, #1
 800c346:	81a3      	strh	r3, [r4, #12]
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	431d      	orrs	r5, r3
 800c34c:	81a5      	strh	r5, [r4, #12]
 800c34e:	e7cf      	b.n	800c2f0 <__smakebuf_r+0x18>

0800c350 <_fstat_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	4d07      	ldr	r5, [pc, #28]	@ (800c370 <_fstat_r+0x20>)
 800c354:	2300      	movs	r3, #0
 800c356:	4604      	mov	r4, r0
 800c358:	4608      	mov	r0, r1
 800c35a:	4611      	mov	r1, r2
 800c35c:	602b      	str	r3, [r5, #0]
 800c35e:	f7f5 fbbd 	bl	8001adc <_fstat>
 800c362:	1c43      	adds	r3, r0, #1
 800c364:	d102      	bne.n	800c36c <_fstat_r+0x1c>
 800c366:	682b      	ldr	r3, [r5, #0]
 800c368:	b103      	cbz	r3, 800c36c <_fstat_r+0x1c>
 800c36a:	6023      	str	r3, [r4, #0]
 800c36c:	bd38      	pop	{r3, r4, r5, pc}
 800c36e:	bf00      	nop
 800c370:	20004778 	.word	0x20004778

0800c374 <_isatty_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4d06      	ldr	r5, [pc, #24]	@ (800c390 <_isatty_r+0x1c>)
 800c378:	2300      	movs	r3, #0
 800c37a:	4604      	mov	r4, r0
 800c37c:	4608      	mov	r0, r1
 800c37e:	602b      	str	r3, [r5, #0]
 800c380:	f7f5 fbbc 	bl	8001afc <_isatty>
 800c384:	1c43      	adds	r3, r0, #1
 800c386:	d102      	bne.n	800c38e <_isatty_r+0x1a>
 800c388:	682b      	ldr	r3, [r5, #0]
 800c38a:	b103      	cbz	r3, 800c38e <_isatty_r+0x1a>
 800c38c:	6023      	str	r3, [r4, #0]
 800c38e:	bd38      	pop	{r3, r4, r5, pc}
 800c390:	20004778 	.word	0x20004778

0800c394 <_init>:
 800c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c396:	bf00      	nop
 800c398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39a:	bc08      	pop	{r3}
 800c39c:	469e      	mov	lr, r3
 800c39e:	4770      	bx	lr

0800c3a0 <_fini>:
 800c3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3a2:	bf00      	nop
 800c3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3a6:	bc08      	pop	{r3}
 800c3a8:	469e      	mov	lr, r3
 800c3aa:	4770      	bx	lr
