
embarcados_aula_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e2c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001350  08011010  08011010  00012010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012360  08012360  000145ec  2**0
                  CONTENTS
  4 .ARM          00000008  08012360  08012360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012368  08012368  000145ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012368  08012368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801236c  0801236c  0001336c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005ec  20000000  08012370  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c70  200005ec  0801295c  000145ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000725c  0801295c  0001525c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000145ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d409  00000000  00000000  0001461c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e01  00000000  00000000  00041a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020c0  00000000  00000000  00047828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018a2  00000000  00000000  000498e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002496f  00000000  00000000  0004b18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000265ec  00000000  00000000  0006faf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed44c  00000000  00000000  000960e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00183531  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cfc  00000000  00000000  001835ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0018d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a3a  00000000  00000000  0018d35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000138  00000000  00000000  0018fd96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200005ec 	.word	0x200005ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010ff4 	.word	0x08010ff4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200005f0 	.word	0x200005f0
 800021c:	08010ff4 	.word	0x08010ff4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b96a 	b.w	8000fa4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <FreeRTOS_CLIRegisterCommand>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
    {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFAIL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
        CLI_Definition_List_Item_t * pxNewListItem;

        /* Check the parameter is not NULL. */
        configASSERT( pxCommandToRegister != NULL );
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10b      	bne.n	8000fd2 <FreeRTOS_CLIRegisterCommand+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fbe:	f383 8811 	msr	BASEPRI, r3
 8000fc2:	f3bf 8f6f 	isb	sy
 8000fc6:	f3bf 8f4f 	dsb	sy
 8000fca:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	e7fd      	b.n	8000fce <FreeRTOS_CLIRegisterCommand+0x26>

        /* Create a new list item that will reference the command being registered. */
        pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8000fd2:	2008      	movs	r0, #8
 8000fd4:	f00b fdd2 	bl	800cb7c <pvPortMalloc>
 8000fd8:	6138      	str	r0, [r7, #16]
        configASSERT( pxNewListItem != NULL );
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10b      	bne.n	8000ff8 <FreeRTOS_CLIRegisterCommand+0x50>
	__asm volatile
 8000fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fe4:	f383 8811 	msr	BASEPRI, r3
 8000fe8:	f3bf 8f6f 	isb	sy
 8000fec:	f3bf 8f4f 	dsb	sy
 8000ff0:	60bb      	str	r3, [r7, #8]
}
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <FreeRTOS_CLIRegisterCommand+0x4c>

        if( pxNewListItem != NULL )
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d005      	beq.n	800100a <FreeRTOS_CLIRegisterCommand+0x62>
        {
            prvRegisterCommand( pxCommandToRegister, pxNewListItem );
 8000ffe:	6939      	ldr	r1, [r7, #16]
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f8e7 	bl	80011d4 <prvRegisterCommand>
            xReturn = pdPASS;
 8001006:	2301      	movs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800100a:	697b      	ldr	r3, [r7, #20]
    }
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput,
                                       char * pcWriteBuffer,
                                       size_t xWriteBufferLen )
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn = pdTRUE;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
    size_t xCommandStringLength;

    /* Note:  This function is not re-entrant.  It must not be called from more
     * thank one task. */

    if( pxCommand == NULL )
 8001024:	4b3a      	ldr	r3, [pc, #232]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d141      	bne.n	80010b0 <FreeRTOS_CLIProcessCommand+0x9c>
    {
        /* Search for the command string in the list of registered commands. */
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800102c:	4b38      	ldr	r3, [pc, #224]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 800102e:	4a39      	ldr	r2, [pc, #228]	@ (8001114 <FreeRTOS_CLIProcessCommand+0x100>)
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e037      	b.n	80010a4 <FreeRTOS_CLIProcessCommand+0x90>
        {
            pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8001034:	4b36      	ldr	r3, [pc, #216]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61bb      	str	r3, [r7, #24]
            xCommandStringLength = strlen( pcRegisteredCommandString );
 800103e:	69b8      	ldr	r0, [r7, #24]
 8001040:	f7ff f94e 	bl	80002e0 <strlen>
 8001044:	6178      	str	r0, [r7, #20]

            /* To ensure the string lengths match exactly, so as not to pick up
             * a sub-string of a longer command, check the byte after the expected
             * end of the string is either the end of the string or a space before
             * a parameter. */
            if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	69b9      	ldr	r1, [r7, #24]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f00d fcef 	bl	800ea2e <strncmp>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d121      	bne.n	800109a <FreeRTOS_CLIProcessCommand+0x86>
            {
                if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b20      	cmp	r3, #32
 8001060:	d005      	beq.n	800106e <FreeRTOS_CLIProcessCommand+0x5a>
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d115      	bne.n	800109a <FreeRTOS_CLIProcessCommand+0x86>
                {
                    /* The command has been found.  Check it has the expected
                     * number of parameters.  If cExpectedNumberOfParameters is -1,
                     * then there could be a variable number of parameters and no
                     * check is made. */
                    if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800106e:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db18      	blt.n	80010ae <FreeRTOS_CLIProcessCommand+0x9a>
                    {
                        if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f000 f911 	bl	80012a4 <prvGetNumberOfParameters>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d00c      	beq.n	80010ae <FreeRTOS_CLIProcessCommand+0x9a>
                        {
                            xReturn = pdFALSE;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
                        }
                    }

                    break;
 8001098:	e009      	b.n	80010ae <FreeRTOS_CLIProcessCommand+0x9a>
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800109a:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1c3      	bne.n	8001034 <FreeRTOS_CLIProcessCommand+0x20>
 80010ac:	e000      	b.n	80010b0 <FreeRTOS_CLIProcessCommand+0x9c>
                    break;
 80010ae:	bf00      	nop
                }
            }
        }
    }

    if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80010b0:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00b      	beq.n	80010d0 <FreeRTOS_CLIProcessCommand+0xbc>
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d108      	bne.n	80010d0 <FreeRTOS_CLIProcessCommand+0xbc>
    {
        /* The command was found, but the number of parameters with the command
         * was incorrect. */
        strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4915      	ldr	r1, [pc, #84]	@ (8001118 <FreeRTOS_CLIProcessCommand+0x104>)
 80010c2:	68b8      	ldr	r0, [r7, #8]
 80010c4:	f00d fcc5 	bl	800ea52 <strncpy>
        pxCommand = NULL;
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e01a      	b.n	8001106 <FreeRTOS_CLIProcessCommand+0xf2>
    }
    else if( pxCommand != NULL )
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00f      	beq.n	80010f8 <FreeRTOS_CLIProcessCommand+0xe4>
    {
        /* Call the callback function that is registered to this command. */
        xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80010d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	68b8      	ldr	r0, [r7, #8]
 80010e6:	4798      	blx	r3
 80010e8:	61f8      	str	r0, [r7, #28]

        /* If xReturn is pdFALSE, then no further strings will be returned
         * after this one, and	pxCommand can be reset to NULL ready to search
         * for the next entered command. */
        if( xReturn == pdFALSE )
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10a      	bne.n	8001106 <FreeRTOS_CLIProcessCommand+0xf2>
        {
            pxCommand = NULL;
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e006      	b.n	8001106 <FreeRTOS_CLIProcessCommand+0xf2>
        }
    }
    else
    {
        /* pxCommand was NULL, the command was not found. */
        strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4908      	ldr	r1, [pc, #32]	@ (800111c <FreeRTOS_CLIProcessCommand+0x108>)
 80010fc:	68b8      	ldr	r0, [r7, #8]
 80010fe:	f00d fca8 	bl	800ea52 <strncpy>
        xReturn = pdFALSE;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001106:	69fb      	ldr	r3, [r7, #28]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000608 	.word	0x20000608
 8001114:	20000000 	.word	0x20000000
 8001118:	08011048 	.word	0x08011048
 800111c:	080110a0 	.word	0x080110a0

08001120 <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char * FreeRTOS_CLIGetParameter( const char * pcCommandString,
                                       UBaseType_t uxWantedParameter,
                                       BaseType_t * pxParameterStringLength )
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
    UBaseType_t uxParametersFound = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
    const char * pcReturn = NULL;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]

    *pxParameterStringLength = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]

    while( uxParametersFound < uxWantedParameter )
 800113a:	e03b      	b.n	80011b4 <FreeRTOS_CLIGetParameter+0x94>
    {
        /* Index the character pointer past the current word.  If this is the start
         * of the command string then the first word is the command itself. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
        {
            pcCommandString++;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3301      	adds	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d007      	beq.n	800115a <FreeRTOS_CLIGetParameter+0x3a>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b20      	cmp	r3, #32
 8001150:	d1f4      	bne.n	800113c <FreeRTOS_CLIGetParameter+0x1c>
        }

        /* Find the start of the next string. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001152:	e002      	b.n	800115a <FreeRTOS_CLIGetParameter+0x3a>
        {
            pcCommandString++;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <FreeRTOS_CLIGetParameter+0x4a>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b20      	cmp	r3, #32
 8001168:	d0f4      	beq.n	8001154 <FreeRTOS_CLIGetParameter+0x34>
        }

        /* Was a string found? */
        if( *pcCommandString != 0x00 )
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d025      	beq.n	80011be <FreeRTOS_CLIGetParameter+0x9e>
        {
            /* Is this the start of the required parameter? */
            uxParametersFound++;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]

            if( uxParametersFound == uxWantedParameter )
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	429a      	cmp	r2, r3
 800117e:	d119      	bne.n	80011b4 <FreeRTOS_CLIGetParameter+0x94>
            {
                /* How long is the parameter? */
                pcReturn = pcCommandString;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	613b      	str	r3, [r7, #16]

                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8001184:	e007      	b.n	8001196 <FreeRTOS_CLIGetParameter+0x76>
                {
                    ( *pxParameterStringLength )++;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	601a      	str	r2, [r3, #0]
                    pcCommandString++;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <FreeRTOS_CLIGetParameter+0x86>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d1ef      	bne.n	8001186 <FreeRTOS_CLIGetParameter+0x66>
                }

                if( *pxParameterStringLength == 0 )
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d109      	bne.n	80011c2 <FreeRTOS_CLIGetParameter+0xa2>
                {
                    pcReturn = NULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
                }

                break;
 80011b2:	e006      	b.n	80011c2 <FreeRTOS_CLIGetParameter+0xa2>
    while( uxParametersFound < uxWantedParameter )
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d3c2      	bcc.n	8001142 <FreeRTOS_CLIGetParameter+0x22>
 80011bc:	e002      	b.n	80011c4 <FreeRTOS_CLIGetParameter+0xa4>
            }
        }
        else
        {
            break;
 80011be:	bf00      	nop
 80011c0:	e000      	b.n	80011c4 <FreeRTOS_CLIGetParameter+0xa4>
                break;
 80011c2:	bf00      	nop
        }
    }

    return pcReturn;
 80011c4:	693b      	ldr	r3, [r7, #16]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <prvRegisterCommand>:
/*-----------------------------------------------------------*/

static void prvRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister,
                                CLI_Definition_List_Item_t * pxCliDefinitionListItemBuffer )
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
    static CLI_Definition_List_Item_t * pxLastCommandInList = &xRegisteredCommands;

    /* Check the parameters are not NULL. */
    configASSERT( pxCommandToRegister != NULL );
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10b      	bne.n	80011fc <prvRegisterCommand+0x28>
	__asm volatile
 80011e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011e8:	f383 8811 	msr	BASEPRI, r3
 80011ec:	f3bf 8f6f 	isb	sy
 80011f0:	f3bf 8f4f 	dsb	sy
 80011f4:	60fb      	str	r3, [r7, #12]
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <prvRegisterCommand+0x24>
    configASSERT( pxCliDefinitionListItemBuffer != NULL );
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10b      	bne.n	800121a <prvRegisterCommand+0x46>
	__asm volatile
 8001202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001206:	f383 8811 	msr	BASEPRI, r3
 800120a:	f3bf 8f6f 	isb	sy
 800120e:	f3bf 8f4f 	dsb	sy
 8001212:	60bb      	str	r3, [r7, #8]
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	e7fd      	b.n	8001216 <prvRegisterCommand+0x42>

    taskENTER_CRITICAL();
 800121a:	f00b fb8d 	bl	800c938 <vPortEnterCritical>
    {
        /* Reference the command being registered from the newly created
         * list item. */
        pxCliDefinitionListItemBuffer->pxCommandLineDefinition = pxCommandToRegister;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	601a      	str	r2, [r3, #0]

        /* The new list item will get added to the end of the list, so
         * pxNext has nowhere to point. */
        pxCliDefinitionListItemBuffer->pxNext = NULL;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2200      	movs	r2, #0
 8001228:	605a      	str	r2, [r3, #4]

        /* Add the newly created list item to the end of the already existing
         * list. */
        pxLastCommandInList->pxNext = pxCliDefinitionListItemBuffer;
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <prvRegisterCommand+0x70>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	605a      	str	r2, [r3, #4]

        /* Set the end of list marker to the new list item. */
        pxLastCommandInList = pxCliDefinitionListItemBuffer;
 8001232:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <prvRegisterCommand+0x70>)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	6013      	str	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 8001238:	f00b fbb0 	bl	800c99c <vPortExitCritical>
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000008 	.word	0x20000008

08001248 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char * pcWriteBuffer,
                                  size_t xWriteBufferLen,
                                  const char * pcCommandString )
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn;

    ( void ) pcCommandString;

    if( pxCommand == NULL )
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <prvHelpCommand+0x54>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <prvHelpCommand+0x1a>
    {
        /* Reset the pxCommand pointer back to the start of the list. */
        pxCommand = &xRegisteredCommands;
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <prvHelpCommand+0x54>)
 800125e:	4a10      	ldr	r2, [pc, #64]	@ (80012a0 <prvHelpCommand+0x58>)
 8001260:	601a      	str	r2, [r3, #0]
    }

    /* Return the next command help string, before moving the pointer on to
     * the next command in the list. */
    strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <prvHelpCommand+0x54>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	4619      	mov	r1, r3
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f00d fbef 	bl	800ea52 <strncpy>
    pxCommand = pxCommand->pxNext;
 8001274:	4b09      	ldr	r3, [pc, #36]	@ (800129c <prvHelpCommand+0x54>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4a08      	ldr	r2, [pc, #32]	@ (800129c <prvHelpCommand+0x54>)
 800127c:	6013      	str	r3, [r2, #0]

    if( pxCommand == NULL )
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <prvHelpCommand+0x54>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <prvHelpCommand+0x44>
    {
        /* There are no more commands in the list, so there will be no more
         *  strings to return after this one and pdFALSE should be returned. */
        xReturn = pdFALSE;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	e001      	b.n	8001290 <prvHelpCommand+0x48>
    }
    else
    {
        xReturn = pdTRUE;
 800128c:	2301      	movs	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001290:	697b      	ldr	r3, [r7, #20]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000060c 	.word	0x2000060c
 80012a0:	20000000 	.word	0x20000000

080012a4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char * pcCommandString )
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    int8_t cParameters = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
    BaseType_t xLastCharacterWasSpace = pdFALSE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]

    /* Count the number of space delimited words in pcCommandString. */
    while( *pcCommandString != 0x00 )
 80012b4:	e014      	b.n	80012e0 <prvGetNumberOfParameters+0x3c>
    {
        if( ( *pcCommandString ) == ' ' )
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b20      	cmp	r3, #32
 80012bc:	d10b      	bne.n	80012d6 <prvGetNumberOfParameters+0x32>
        {
            if( xLastCharacterWasSpace != pdTRUE )
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d00a      	beq.n	80012da <prvGetNumberOfParameters+0x36>
            {
                cParameters++;
 80012c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	3301      	adds	r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	73fb      	strb	r3, [r7, #15]
                xLastCharacterWasSpace = pdTRUE;
 80012d0:	2301      	movs	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	e001      	b.n	80012da <prvGetNumberOfParameters+0x36>
            }
        }
        else
        {
            xLastCharacterWasSpace = pdFALSE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
        }

        pcCommandString++;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3301      	adds	r3, #1
 80012de:	607b      	str	r3, [r7, #4]
    while( *pcCommandString != 0x00 )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1e6      	bne.n	80012b6 <prvGetNumberOfParameters+0x12>
    }

    /* If the command string ended with spaces, then there will have been too
     * many parameters counted. */
    if( xLastCharacterWasSpace == pdTRUE )
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <prvGetNumberOfParameters+0x56>
    {
        cParameters--;
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3b01      	subs	r3, #1
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	73fb      	strb	r3, [r7, #15]
    }

    /* The value returned is one less than the number of space delimited words,
     * as the first word should be the command itself. */
    return cParameters;
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
extern TIM_HandleTypeDef htim4;
void configureTimerForRunTimeStats(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    /* Inicia a contagem do timer */
    HAL_TIM_Base_Start_IT(&htim4);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <configureTimerForRunTimeStats+0x10>)
 8001312:	f005 f865 	bl	80063e0 <HAL_TIM_Base_Start_IT>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200008e0 	.word	0x200008e0

08001320 <getRunTimeCounterValue>:

unsigned int ulHighFrequencyTimerTicks = 0;
unsigned long getRunTimeCounterValue(void) {
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
    /* Contagem de ticks do timer */
    return ulHighFrequencyTimerTicks;
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <getRunTimeCounterValue+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000610 	.word	0x20000610

08001338 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b087      	sub	sp, #28
 800133c:	af02      	add	r7, sp, #8
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001342:	2028      	movs	r0, #40	@ 0x28
 8001344:	f002 feda 	bl	80040fc <HAL_NVIC_DisableIRQ>
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
	xTimerStartFromISR(button_timer, &pxHigherPriorityTaskWoken);
 800134c:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <HAL_GPIO_EXTI_Callback+0x4c>)
 800134e:	681c      	ldr	r4, [r3, #0]
 8001350:	f009 fcb6 	bl	800acc0 <xTaskGetTickCountFromISR>
 8001354:	4602      	mov	r2, r0
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	2100      	movs	r1, #0
 800135c:	9100      	str	r1, [sp, #0]
 800135e:	2106      	movs	r1, #6
 8001360:	4620      	mov	r0, r4
 8001362:	f00a fecb 	bl	800c0fc <xTimerGenericCommand>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <HAL_GPIO_EXTI_Callback+0x44>
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_GPIO_EXTI_Callback+0x50>)
 800136e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	f3bf 8f4f 	dsb	sy
 8001378:	f3bf 8f6f 	isb	sy
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	bd90      	pop	{r4, r7, pc}
 8001384:	20000944 	.word	0x20000944
 8001388:	e000ed04 	.word	0xe000ed04

0800138c <HAL_UART_RxCpltCallback>:

char uart_data;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
    char data = huart->Instance->RDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	72fb      	strb	r3, [r7, #11]
    xQueueSendFromISR(uart_rx_q, &data, &pxHigherPriorityTaskWoken);
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <HAL_UART_RxCpltCallback+0x48>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	f107 020c 	add.w	r2, r7, #12
 80013aa:	f107 010b 	add.w	r1, r7, #11
 80013ae:	2300      	movs	r3, #0
 80013b0:	f008 f970 	bl	8009694 <xQueueGenericSendFromISR>
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <HAL_UART_RxCpltCallback+0x3e>
 80013ba:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <HAL_UART_RxCpltCallback+0x4c>)
 80013bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	f3bf 8f4f 	dsb	sy
 80013c6:	f3bf 8f6f 	isb	sy
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000093c 	.word	0x2000093c
 80013d8:	e000ed04 	.word	0xe000ed04

080013dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
    xSemaphoreGiveFromISR(sem_tx_uart, &pxHigherPriorityTaskWoken);
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <HAL_UART_TxCpltCallback+0x3c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f107 020c 	add.w	r2, r7, #12
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f008 f9ec 	bl	80097d0 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <HAL_UART_TxCpltCallback+0x32>
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <HAL_UART_TxCpltCallback+0x40>)
 8001400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	f3bf 8f4f 	dsb	sy
 800140a:	f3bf 8f6f 	isb	sy
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000934 	.word	0x20000934
 800141c:	e000ed04 	.word	0xe000ed04

08001420 <get_char_from_uart>:

// Antiga UART_RX_RTOS - Retorna os dados recebidos pela UART
BaseType_t get_char_from_uart(char *pData, TickType_t timeout) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
    return xQueueReceive(uart_rx_q, pData, timeout);
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <get_char_from_uart+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	f008 fa5c 	bl	80098f0 <xQueueReceive>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000093c 	.word	0x2000093c

08001448 <print_string>:

void print_string(char *string, TickType_t timeout) {
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
    if (xSemaphoreTake(mutex_uart, timeout) == pdTRUE) {
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <print_string+0x4c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f008 fb2b 	bl	8009ab4 <xQueueSemaphoreTake>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d112      	bne.n	800148a <print_string+0x42>
        (void)xMessageBufferSend(message_buffer, string, strlen(string),
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <print_string+0x50>)
 8001466:	681c      	ldr	r4, [r3, #0]
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7fe ff39 	bl	80002e0 <strlen>
 800146e:	4602      	mov	r2, r0
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4620      	mov	r0, r4
 8001478:	f008 fe44 	bl	800a104 <xStreamBufferSend>
                                 portMAX_DELAY);
        xSemaphoreGive(mutex_uart);
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <print_string+0x4c>)
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	2300      	movs	r3, #0
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	f008 f803 	bl	8009490 <xQueueGenericSend>
    }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}
 8001492:	bf00      	nop
 8001494:	2000092c 	.word	0x2000092c
 8001498:	20000930 	.word	0x20000930

0800149c <print_char>:

void print_char(char string, TickType_t timeout) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
    if (xSemaphoreTake(mutex_uart, timeout) == pdTRUE) {
 80014a8:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <print_char+0x44>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6839      	ldr	r1, [r7, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f008 fb00 	bl	8009ab4 <xQueueSemaphoreTake>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d10e      	bne.n	80014d8 <print_char+0x3c>
        (void)xMessageBufferSend(message_buffer, &string, 1, portMAX_DELAY);
 80014ba:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <print_char+0x48>)
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	1df9      	adds	r1, r7, #7
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	2201      	movs	r2, #1
 80014c6:	f008 fe1d 	bl	800a104 <xStreamBufferSend>
        xSemaphoreGive(mutex_uart);
 80014ca:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <print_char+0x44>)
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	2300      	movs	r3, #0
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	f007 ffdc 	bl	8009490 <xQueueGenericSend>
    }
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	2000092c 	.word	0x2000092c
 80014e4:	20000930 	.word	0x20000930

080014e8 <print_task>:

#define BUFFER_SIZE 512

static void print_task(void *params) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80014f4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80014f8:	6018      	str	r0, [r3, #0]
    char buffer[BUFFER_SIZE];

    while (1) {
        size_t size = xMessageBufferReceive(message_buffer, buffer, BUFFER_SIZE,
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <print_task+0x54>)
 80014fc:	6818      	ldr	r0, [r3, #0]
 80014fe:	f107 010c 	add.w	r1, r7, #12
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800150a:	f008 fef1 	bl	800a2f0 <xStreamBufferReceive>
 800150e:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
                                            portMAX_DELAY);
        if (size) {
 8001512:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0ef      	beq.n	80014fa <print_task+0x12>
            HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t *)buffer, size);
 800151a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800151e:	b29a      	uxth	r2, r3
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	@ (8001540 <print_task+0x58>)
 8001528:	f005 fcd2 	bl	8006ed0 <HAL_UART_Transmit_DMA>
            xSemaphoreTake(sem_tx_uart, portMAX_DELAY);
 800152c:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <print_task+0x5c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	4618      	mov	r0, r3
 8001536:	f008 fabd 	bl	8009ab4 <xQueueSemaphoreTake>
    while (1) {
 800153a:	e7de      	b.n	80014fa <print_task+0x12>
 800153c:	20000930 	.word	0x20000930
 8001540:	20000754 	.word	0x20000754
 8001544:	20000934 	.word	0x20000934

08001548 <adc_task>:
    }
}

#define ADC_BUFFER_LENGTH 256

void adc_task(void *param) {
 8001548:	b580      	push	{r7, lr}
 800154a:	f5ad 6d62 	sub.w	sp, sp, #3616	@ 0xe20
 800154e:	af02      	add	r7, sp, #8
 8001550:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001554:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 8001558:	6018      	str	r0, [r3, #0]
    uint16_t adcBuffer[ADC_BUFFER_LENGTH];
    float ReIm[ADC_BUFFER_LENGTH * 2];
    float mod[ADC_BUFFER_LENGTH];

    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuffer, ADC_BUFFER_LENGTH);
 800155a:	f507 6341 	add.w	r3, r7, #3088	@ 0xc10
 800155e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001562:	4619      	mov	r1, r3
 8001564:	4858      	ldr	r0, [pc, #352]	@ (80016c8 <adc_task+0x180>)
 8001566:	f001 fe29 	bl	80031bc <HAL_ADC_Start_DMA>
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 800156a:	2300      	movs	r3, #0
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001572:	4a56      	ldr	r2, [pc, #344]	@ (80016cc <adc_task+0x184>)
 8001574:	2100      	movs	r1, #0
 8001576:	4856      	ldr	r0, [pc, #344]	@ (80016d0 <adc_task+0x188>)
 8001578:	f002 fdf0 	bl	800415c <HAL_DAC_Start_DMA>
                      (const uint32_t *)sin_wave_3rd_harmonic,
                      ADC_BUFFER_LENGTH, DAC_ALIGN_12B_R);

    HAL_TIM_Base_Start(&htim2);
 800157c:	4855      	ldr	r0, [pc, #340]	@ (80016d4 <adc_task+0x18c>)
 800157e:	f004 fea5 	bl	80062cc <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim3);
 8001582:	4855      	ldr	r0, [pc, #340]	@ (80016d8 <adc_task+0x190>)
 8001584:	f004 fea2 	bl	80062cc <HAL_TIM_Base_Start>

    while (1) {
        xSemaphoreTake(sem_adc, portMAX_DELAY);
 8001588:	4b54      	ldr	r3, [pc, #336]	@ (80016dc <adc_task+0x194>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	4618      	mov	r0, r3
 8001592:	f008 fa8f 	bl	8009ab4 <xQueueSemaphoreTake>

        int k = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
        for (int i = 0; i < ADC_BUFFER_LENGTH; i++) {
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 3e10 	str.w	r3, [r7, #3600]	@ 0xe10
 80015a2:	e02f      	b.n	8001604 <adc_task+0xbc>
            ReIm[k] = (float)adcBuffer[i] * 0.0008056640625f;
 80015a4:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 80015a8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80015ac:	f8d7 2e10 	ldr.w	r2, [r7, #3600]	@ 0xe10
 80015b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80015b4:	ee07 3a90 	vmov	s15, r3
 80015b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015bc:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80016e0 <adc_task+0x198>
 80015c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c4:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 80015c8:	f6a3 2208 	subw	r2, r3, #2568	@ 0xa08
 80015cc:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	edc3 7a00 	vstr	s15, [r3]
            ReIm[k + 1] = 0.0;
 80015d8:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 80015dc:	3301      	adds	r3, #1
 80015de:	f607 6218 	addw	r2, r7, #3608	@ 0xe18
 80015e2:	f6a2 2208 	subw	r2, r2, #2568	@ 0xa08
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
            k += 2;
 80015f0:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 80015f4:	3302      	adds	r3, #2
 80015f6:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
        for (int i = 0; i < ADC_BUFFER_LENGTH; i++) {
 80015fa:	f8d7 3e10 	ldr.w	r3, [r7, #3600]	@ 0xe10
 80015fe:	3301      	adds	r3, #1
 8001600:	f8c7 3e10 	str.w	r3, [r7, #3600]	@ 0xe10
 8001604:	f8d7 3e10 	ldr.w	r3, [r7, #3600]	@ 0xe10
 8001608:	2bff      	cmp	r3, #255	@ 0xff
 800160a:	ddcb      	ble.n	80015a4 <adc_task+0x5c>
        }

        arm_cfft_f32(&arm_cfft_sR_f32_len256, ReIm, 0, 1);
 800160c:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8001610:	2301      	movs	r3, #1
 8001612:	2200      	movs	r2, #0
 8001614:	4833      	ldr	r0, [pc, #204]	@ (80016e4 <adc_task+0x19c>)
 8001616:	f00b ffc5 	bl	800d5a4 <arm_cfft_f32>
        arm_cmplx_mag_f32(ReIm, mod, ADC_BUFFER_LENGTH);
 800161a:	f107 0110 	add.w	r1, r7, #16
 800161e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001622:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001626:	4618      	mov	r0, r3
 8001628:	f00c f854 	bl	800d6d4 <arm_cmplx_mag_f32>
        arm_scale_f32(mod, 0.0078125, mod, ADC_BUFFER_LENGTH);
 800162c:	f107 0110 	add.w	r1, r7, #16
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001638:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 80016e8 <adc_task+0x1a0>
 800163c:	4618      	mov	r0, r3
 800163e:	f00c f96d 	bl	800d91c <arm_scale_f32>
        mod[0] = mod[0] * 0.5;
 8001642:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001646:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001656:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800165a:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 800165e:	edc3 7a00 	vstr	s15, [r3]

        volatile float fund_phase = atan2f(ReIm[3], ReIm[2]) * 180 /
 8001662:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001666:	f6a3 2308 	subw	r3, r3, #2568	@ 0xa08
 800166a:	edd3 7a03 	vldr	s15, [r3, #12]
 800166e:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001672:	f6a3 2308 	subw	r3, r3, #2568	@ 0xa08
 8001676:	ed93 7a02 	vldr	s14, [r3, #8]
 800167a:	eef0 0a47 	vmov.f32	s1, s14
 800167e:	eeb0 0a67 	vmov.f32	s0, s15
 8001682:	f00f fb17 	bl	8010cb4 <atan2f>
 8001686:	eef0 7a40 	vmov.f32	s15, s0
 800168a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80016ec <adc_task+0x1a4>
 800168e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001692:	ee17 0a90 	vmov	r0, s15
 8001696:	f7fe ff8f 	bl	80005b8 <__aeabi_f2d>
 800169a:	a309      	add	r3, pc, #36	@ (adr r3, 80016c0 <adc_task+0x178>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7ff f90c 	bl	80008bc <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff fab4 	bl	8000c18 <__aeabi_d2f>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 80016b6:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 80016ba:	601a      	str	r2, [r3, #0]
    while (1) {
 80016bc:	e764      	b.n	8001588 <adc_task+0x40>
 80016be:	bf00      	nop
 80016c0:	54442d18 	.word	0x54442d18
 80016c4:	400921fb 	.word	0x400921fb
 80016c8:	20000614 	.word	0x20000614
 80016cc:	2000020c 	.word	0x2000020c
 80016d0:	200006e0 	.word	0x200006e0
 80016d4:	20000848 	.word	0x20000848
 80016d8:	20000894 	.word	0x20000894
 80016dc:	20000938 	.word	0x20000938
 80016e0:	3a533333 	.word	0x3a533333
 80016e4:	08011438 	.word	0x08011438
 80016e8:	3c000000 	.word	0x3c000000
 80016ec:	43340000 	.word	0x43340000

080016f0 <HAL_ADC_ConvCpltCallback>:
                                    M_PI;  // Fase R da harmonica fundamental
    }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
    xSemaphoreGiveFromISR(sem_adc, &pxHigherPriorityTaskWoken);
 80016fc:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <HAL_ADC_ConvCpltCallback+0x3c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f107 020c 	add.w	r2, r7, #12
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f008 f862 	bl	80097d0 <xQueueGiveFromISR>
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <HAL_ADC_ConvCpltCallback+0x32>
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <HAL_ADC_ConvCpltCallback+0x40>)
 8001714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	f3bf 8f4f 	dsb	sy
 800171e:	f3bf 8f6f 	isb	sy
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000938 	.word	0x20000938
 8001730:	e000ed04 	.word	0xe000ed04

08001734 <HAL_DAC_ConvCpltCallbackCh1>:

volatile int dac_counter = 0;
volatile int flag = 0;
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hadc) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af02      	add	r7, sp, #8
 800173a:	6078      	str	r0, [r7, #4]
#if 1
    dac_counter++;
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	4a1a      	ldr	r2, [pc, #104]	@ (80017ac <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 8001744:	6013      	str	r3, [r2, #0]
    if (dac_counter >= 120) {
 8001746:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b77      	cmp	r3, #119	@ 0x77
 800174c:	dd29      	ble.n	80017a2 <HAL_DAC_ConvCpltCallbackCh1+0x6e>
        dac_counter = 0;
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
        HAL_TIM_Base_Stop(&htim2);
 8001754:	4816      	ldr	r0, [pc, #88]	@ (80017b0 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 8001756:	f004 fe1b 	bl	8006390 <HAL_TIM_Base_Stop>
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800175a:	2100      	movs	r1, #0
 800175c:	4815      	ldr	r0, [pc, #84]	@ (80017b4 <HAL_DAC_ConvCpltCallbackCh1+0x80>)
 800175e:	f002 fdd1 	bl	8004304 <HAL_DAC_Stop_DMA>

        if (flag == 0) {
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_DAC_ConvCpltCallbackCh1+0x50>
            HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 800176a:	2300      	movs	r3, #0
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001772:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 8001774:	2100      	movs	r1, #0
 8001776:	480f      	ldr	r0, [pc, #60]	@ (80017b4 <HAL_DAC_ConvCpltCallbackCh1+0x80>)
 8001778:	f002 fcf0 	bl	800415c <HAL_DAC_Start_DMA>
                              (uint32_t *)sin_wave_3rd_harmonic, 256,
                              DAC_ALIGN_12B_R);
            flag = 1;
 800177c:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e00b      	b.n	800179c <HAL_DAC_ConvCpltCallbackCh1+0x68>
        } else {
            HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)sin_wave, 256,
 8001784:	2300      	movs	r3, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800178c:	4a0c      	ldr	r2, [pc, #48]	@ (80017c0 <HAL_DAC_ConvCpltCallbackCh1+0x8c>)
 800178e:	2100      	movs	r1, #0
 8001790:	4808      	ldr	r0, [pc, #32]	@ (80017b4 <HAL_DAC_ConvCpltCallbackCh1+0x80>)
 8001792:	f002 fce3 	bl	800415c <HAL_DAC_Start_DMA>
                              DAC_ALIGN_12B_R);
            flag = 0;
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
        }
        HAL_TIM_Base_Start(&htim2);
 800179c:	4804      	ldr	r0, [pc, #16]	@ (80017b0 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 800179e:	f004 fd95 	bl	80062cc <HAL_TIM_Base_Start>
    }
#endif
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000094c 	.word	0x2000094c
 80017b0:	20000848 	.word	0x20000848
 80017b4:	200006e0 	.word	0x200006e0
 80017b8:	20000950 	.word	0x20000950
 80017bc:	2000020c 	.word	0x2000020c
 80017c0:	2000000c 	.word	0x2000000c

080017c4 <getInstalledTasksFunction>:

/* ---------------- Get Installed Tasks ---------------- */

static BaseType_t getInstalledTasksFunction(char *pcWriteBuffer,
                                            size_t xWriteBufferLen,
                                            const char *pcCommandString) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
    static const char *pcHeader =
        "Task                         State  Priority   Stack  "
        "Number\r\n------------------------------------------------------------"
        "--\r\n ";

    strcpy(pcWriteBuffer, pcHeader);
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <getInstalledTasksFunction+0x38>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f00d fa1b 	bl	800ec12 <strcpy>
    vTaskList(pcWriteBuffer + strlen(pcHeader));
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <getInstalledTasksFunction+0x38>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fd7d 	bl	80002e0 <strlen>
 80017e6:	4602      	mov	r2, r0
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00a f917 	bl	800ba20 <vTaskList>
    return pdFALSE;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2000040c 	.word	0x2000040c

08001800 <getRuntimeStatsFunction>:

/* ---------------- Get Runtime Info ---------------- */

static BaseType_t getRuntimeStatsFunction(char *pcWriteBuffer,
                                          size_t xWriteBufferLen,
                                          const char *pcCommandString) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
    static const char *pcHeader =
        "Task                          Abs Time          % Time "
        "\r\n----------------------------------------------------------"
        "\r\n";
    strcpy(pcWriteBuffer, pcHeader);
 800180c:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <getRuntimeStatsFunction+0x38>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f00d f9fd 	bl	800ec12 <strcpy>
    vTaskGetRunTimeStats(pcWriteBuffer + strlen(pcHeader));
 8001818:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <getRuntimeStatsFunction+0x38>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fd5f 	bl	80002e0 <strlen>
 8001822:	4602      	mov	r2, r0
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f00a f98f 	bl	800bb4c <vTaskGetRunTimeStats>
    return pdFALSE;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000410 	.word	0x20000410

0800183c <changeWaveFunction>:
/* ---------------- Change Sin Wave ---------------- */
uint16_t sin_wave[256];
uint16_t sin_wave_3rd_harmonic[256];
static BaseType_t changeWaveFunction(char *pcWriteBuffer,
                                     size_t xWriteBufferLen,
                                     const char *pcCommandString) {
 800183c:	b5b0      	push	{r4, r5, r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af02      	add	r7, sp, #8
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
    BaseType_t parameter_lenght;
    const char *parameter =
        FreeRTOS_CLIGetParameter(pcCommandString, 1, &parameter_lenght);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	461a      	mov	r2, r3
 800184e:	2101      	movs	r1, #1
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fc65 	bl	8001120 <FreeRTOS_CLIGetParameter>
 8001856:	6178      	str	r0, [r7, #20]

    if (!strcmp(parameter, "sine")) {
 8001858:	4931      	ldr	r1, [pc, #196]	@ (8001920 <changeWaveFunction+0xe4>)
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7fe fce0 	bl	8000220 <strcmp>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d11e      	bne.n	80018a4 <changeWaveFunction+0x68>
        HAL_TIM_Base_Stop(&htim2);
 8001866:	482f      	ldr	r0, [pc, #188]	@ (8001924 <changeWaveFunction+0xe8>)
 8001868:	f004 fd92 	bl	8006390 <HAL_TIM_Base_Stop>
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800186c:	2100      	movs	r1, #0
 800186e:	482e      	ldr	r0, [pc, #184]	@ (8001928 <changeWaveFunction+0xec>)
 8001870:	f002 fd48 	bl	8004304 <HAL_DAC_Stop_DMA>
        HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)sin_wave, 256,
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800187c:	4a2b      	ldr	r2, [pc, #172]	@ (800192c <changeWaveFunction+0xf0>)
 800187e:	2100      	movs	r1, #0
 8001880:	4829      	ldr	r0, [pc, #164]	@ (8001928 <changeWaveFunction+0xec>)
 8001882:	f002 fc6b 	bl	800415c <HAL_DAC_Start_DMA>
                          DAC_ALIGN_12B_R);
        HAL_TIM_Base_Start(&htim2);
 8001886:	4827      	ldr	r0, [pc, #156]	@ (8001924 <changeWaveFunction+0xe8>)
 8001888:	f004 fd20 	bl	80062cc <HAL_TIM_Base_Start>
        strcpy(pcWriteBuffer, "Sine Signal set\n\r");
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4a28      	ldr	r2, [pc, #160]	@ (8001930 <changeWaveFunction+0xf4>)
 8001890:	461d      	mov	r5, r3
 8001892:	4614      	mov	r4, r2
 8001894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001896:	6028      	str	r0, [r5, #0]
 8001898:	6069      	str	r1, [r5, #4]
 800189a:	60aa      	str	r2, [r5, #8]
 800189c:	60eb      	str	r3, [r5, #12]
 800189e:	8823      	ldrh	r3, [r4, #0]
 80018a0:	822b      	strh	r3, [r5, #16]
 80018a2:	e037      	b.n	8001914 <changeWaveFunction+0xd8>
    } else if (!strcmp(parameter, "sine3rd")) {
 80018a4:	4923      	ldr	r1, [pc, #140]	@ (8001934 <changeWaveFunction+0xf8>)
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f7fe fcba 	bl	8000220 <strcmp>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d120      	bne.n	80018f4 <changeWaveFunction+0xb8>
        HAL_TIM_Base_Stop(&htim2);
 80018b2:	481c      	ldr	r0, [pc, #112]	@ (8001924 <changeWaveFunction+0xe8>)
 80018b4:	f004 fd6c 	bl	8006390 <HAL_TIM_Base_Stop>
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80018b8:	2100      	movs	r1, #0
 80018ba:	481b      	ldr	r0, [pc, #108]	@ (8001928 <changeWaveFunction+0xec>)
 80018bc:	f002 fd22 	bl	8004304 <HAL_DAC_Stop_DMA>
        HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 80018c0:	2300      	movs	r3, #0
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001938 <changeWaveFunction+0xfc>)
 80018ca:	2100      	movs	r1, #0
 80018cc:	4816      	ldr	r0, [pc, #88]	@ (8001928 <changeWaveFunction+0xec>)
 80018ce:	f002 fc45 	bl	800415c <HAL_DAC_Start_DMA>
                          (uint32_t *)sin_wave_3rd_harmonic, 256,
                          DAC_ALIGN_12B_R);
        HAL_TIM_Base_Start(&htim2);
 80018d2:	4814      	ldr	r0, [pc, #80]	@ (8001924 <changeWaveFunction+0xe8>)
 80018d4:	f004 fcfa 	bl	80062cc <HAL_TIM_Base_Start>
        strcpy(pcWriteBuffer, "Sine3rd Signal set\n\r");
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4a18      	ldr	r2, [pc, #96]	@ (800193c <changeWaveFunction+0x100>)
 80018dc:	461d      	mov	r5, r3
 80018de:	4614      	mov	r4, r2
 80018e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e2:	6028      	str	r0, [r5, #0]
 80018e4:	6069      	str	r1, [r5, #4]
 80018e6:	60aa      	str	r2, [r5, #8]
 80018e8:	60eb      	str	r3, [r5, #12]
 80018ea:	6820      	ldr	r0, [r4, #0]
 80018ec:	6128      	str	r0, [r5, #16]
 80018ee:	7923      	ldrb	r3, [r4, #4]
 80018f0:	752b      	strb	r3, [r5, #20]
 80018f2:	e00f      	b.n	8001914 <changeWaveFunction+0xd8>
    } else {
        strcpy(pcWriteBuffer, "Invalid wave signal!\n\r");
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <changeWaveFunction+0x104>)
 80018f8:	461c      	mov	r4, r3
 80018fa:	4615      	mov	r5, r2
 80018fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018fe:	6020      	str	r0, [r4, #0]
 8001900:	6061      	str	r1, [r4, #4]
 8001902:	60a2      	str	r2, [r4, #8]
 8001904:	60e3      	str	r3, [r4, #12]
 8001906:	6828      	ldr	r0, [r5, #0]
 8001908:	6120      	str	r0, [r4, #16]
 800190a:	88ab      	ldrh	r3, [r5, #4]
 800190c:	79aa      	ldrb	r2, [r5, #6]
 800190e:	82a3      	strh	r3, [r4, #20]
 8001910:	4613      	mov	r3, r2
 8001912:	75a3      	strb	r3, [r4, #22]
    }
    return pdFALSE;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bdb0      	pop	{r4, r5, r7, pc}
 800191e:	bf00      	nop
 8001920:	08011140 	.word	0x08011140
 8001924:	20000848 	.word	0x20000848
 8001928:	200006e0 	.word	0x200006e0
 800192c:	2000000c 	.word	0x2000000c
 8001930:	08011148 	.word	0x08011148
 8001934:	0801115c 	.word	0x0801115c
 8001938:	2000020c 	.word	0x2000020c
 800193c:	08011164 	.word	0x08011164
 8001940:	0801117c 	.word	0x0801117c

08001944 <clearTerminalFunction>:

/* ---------------- Clear Terminal ---------------- */

static BaseType_t clearTerminalFunction(char *pcWriteBuffer,
                                        size_t xWriteBufferLen,
                                        const char *pcCommandString) {
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
    strcpy(pcWriteBuffer, "\033[H\033[J\n\r");
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4907      	ldr	r1, [pc, #28]	@ (8001970 <clearTerminalFunction+0x2c>)
 8001954:	461a      	mov	r2, r3
 8001956:	460b      	mov	r3, r1
 8001958:	cb03      	ldmia	r3!, {r0, r1}
 800195a:	6010      	str	r0, [r2, #0]
 800195c:	6051      	str	r1, [r2, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	7213      	strb	r3, [r2, #8]
    return pdFALSE;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	080111dc 	.word	0x080111dc

08001974 <terminal_task>:
/* ---------------- Terminal Task ---------------- */

#define MAX_INPUT_LENGTH 50
#define MAX_OUTPUT_LENGTH 512

void terminal_task(void *params) {
 8001974:	b580      	push	{r7, lr}
 8001976:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 800197a:	af00      	add	r7, sp, #0
 800197c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001980:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001984:	6018      	str	r0, [r3, #0]
    int8_t cRxedChar, cInputIndex = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    BaseType_t xMoreDataToFollow;

    /* Buffers de entrada e saída */
    int8_t pcInputString[MAX_INPUT_LENGTH];
    int8_t pcOutputString[MAX_OUTPUT_LENGTH];
    memset(pcInputString, 0x00, MAX_INPUT_LENGTH);
 800198c:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001990:	2232      	movs	r2, #50	@ 0x32
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f00d f842 	bl	800ea1e <memset>

    FreeRTOS_CLIRegisterCommand(&xGetInstalledTasksCommand);
 800199a:	4847      	ldr	r0, [pc, #284]	@ (8001ab8 <terminal_task+0x144>)
 800199c:	f7ff fb04 	bl	8000fa8 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xGetRuntimeCommand);
 80019a0:	4846      	ldr	r0, [pc, #280]	@ (8001abc <terminal_task+0x148>)
 80019a2:	f7ff fb01 	bl	8000fa8 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xChangeWaveCommand);
 80019a6:	4846      	ldr	r0, [pc, #280]	@ (8001ac0 <terminal_task+0x14c>)
 80019a8:	f7ff fafe 	bl	8000fa8 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xClearTerminalCommand);
 80019ac:	4845      	ldr	r0, [pc, #276]	@ (8001ac4 <terminal_task+0x150>)
 80019ae:	f7ff fafb 	bl	8000fa8 <FreeRTOS_CLIRegisterCommand>

    print_string("----- FreeRTOS Terminal -----\r\n\n", portMAX_DELAY);
 80019b2:	f04f 31ff 	mov.w	r1, #4294967295
 80019b6:	4844      	ldr	r0, [pc, #272]	@ (8001ac8 <terminal_task+0x154>)
 80019b8:	f7ff fd46 	bl	8001448 <print_string>

    /* Recepção de 1byte pela uart */
    HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)&uart_data, 1);
 80019bc:	2201      	movs	r2, #1
 80019be:	4943      	ldr	r1, [pc, #268]	@ (8001acc <terminal_task+0x158>)
 80019c0:	4843      	ldr	r0, [pc, #268]	@ (8001ad0 <terminal_task+0x15c>)
 80019c2:	f005 fa39 	bl	8006e38 <HAL_UART_Receive_IT>
    hlpuart1.RxISR = HAL_UART_RxCpltCallback;
 80019c6:	4b42      	ldr	r3, [pc, #264]	@ (8001ad0 <terminal_task+0x15c>)
 80019c8:	4a42      	ldr	r2, [pc, #264]	@ (8001ad4 <terminal_task+0x160>)
 80019ca:	675a      	str	r2, [r3, #116]	@ 0x74

    while (1) {
        // Espera indefinidamente por um caractere
        get_char_from_uart(&cRxedChar, portMAX_DELAY);
 80019cc:	f207 233f 	addw	r3, r7, #575	@ 0x23f
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fd23 	bl	8001420 <get_char_from_uart>

        if (cRxedChar == '\r') {
 80019da:	f997 323f 	ldrsb.w	r3, [r7, #575]	@ 0x23f
 80019de:	2b0d      	cmp	r3, #13
 80019e0:	d125      	bne.n	8001a2e <terminal_task+0xba>
            /* Tecla "Enter" seja pressionada */
            print_string("\r\n", portMAX_DELAY);
 80019e2:	f04f 31ff 	mov.w	r1, #4294967295
 80019e6:	483c      	ldr	r0, [pc, #240]	@ (8001ad8 <terminal_task+0x164>)
 80019e8:	f7ff fd2e 	bl	8001448 <print_string>

            /* Execução do comando inserido ao pressionar enter: */
            do {
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(
 80019ec:	f107 010c 	add.w	r1, r7, #12
 80019f0:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 80019f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fb0b 	bl	8001014 <FreeRTOS_CLIProcessCommand>
 80019fe:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
                    pcInputString,    /* string do comando.*/
                    pcOutputString,   /* buffer de saída. */
                    MAX_OUTPUT_LENGTH /* Tamanho do buffer de saída. */
                );

                print_string(pcOutputString, portMAX_DELAY);
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fd1c 	bl	8001448 <print_string>
            } while (xMoreDataToFollow != pdFALSE);
 8001a10:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1e9      	bne.n	80019ec <terminal_task+0x78>

            /* Limpa a string de entrada */
            cInputIndex = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH);
 8001a1e:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001a22:	2232      	movs	r2, #50	@ 0x32
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f00c fff9 	bl	800ea1e <memset>
 8001a2c:	e7ce      	b.n	80019cc <terminal_task+0x58>

        } else {
            if (cRxedChar == '\n') {
 8001a2e:	f997 323f 	ldrsb.w	r3, [r7, #575]	@ 0x23f
 8001a32:	2b0a      	cmp	r3, #10
 8001a34:	d0ca      	beq.n	80019cc <terminal_task+0x58>
                // Ignora o \n
            } else if (cRxedChar == '\b' || cRxedChar == 127) {
 8001a36:	f997 323f 	ldrsb.w	r3, [r7, #575]	@ 0x23f
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d003      	beq.n	8001a46 <terminal_task+0xd2>
 8001a3e:	f997 323f 	ldrsb.w	r3, [r7, #575]	@ 0x23f
 8001a42:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a44:	d11b      	bne.n	8001a7e <terminal_task+0x10a>
                /* Tratamento do backspace */
                if (cInputIndex > 0) {
 8001a46:	f997 3247 	ldrsb.w	r3, [r7, #583]	@ 0x247
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	dd33      	ble.n	8001ab6 <terminal_task+0x142>
                    cInputIndex--;
 8001a4e:	f997 3247 	ldrsb.w	r3, [r7, #583]	@ 0x247
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	3b01      	subs	r3, #1
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
                    pcInputString[cInputIndex] = '\0';
 8001a5c:	f997 3247 	ldrsb.w	r3, [r7, #583]	@ 0x247
 8001a60:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8001a64:	443b      	add	r3, r7
 8001a66:	2200      	movs	r2, #0
 8001a68:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    print_char(cRxedChar, portMAX_DELAY);
 8001a6c:	f997 323f 	ldrsb.w	r3, [r7, #575]	@ 0x23f
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f04f 31ff 	mov.w	r1, #4294967295
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fd10 	bl	800149c <print_char>
                if (cInputIndex > 0) {
 8001a7c:	e01b      	b.n	8001ab6 <terminal_task+0x142>
                }
            } else {
                // Adiciona o caractere na string de entrada
                if (cInputIndex < MAX_INPUT_LENGTH) {
 8001a7e:	f997 3247 	ldrsb.w	r3, [r7, #583]	@ 0x247
 8001a82:	2b31      	cmp	r3, #49	@ 0x31
 8001a84:	dc0f      	bgt.n	8001aa6 <terminal_task+0x132>
                    pcInputString[cInputIndex] = cRxedChar;
 8001a86:	f997 3247 	ldrsb.w	r3, [r7, #583]	@ 0x247
 8001a8a:	f997 223f 	ldrsb.w	r2, [r7, #575]	@ 0x23f
 8001a8e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8001a92:	443b      	add	r3, r7
 8001a94:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    cInputIndex++;
 8001a98:	f997 3247 	ldrsb.w	r3, [r7, #583]	@ 0x247
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
                }
                print_char(cRxedChar, portMAX_DELAY);
 8001aa6:	f997 323f 	ldrsb.w	r3, [r7, #575]	@ 0x23f
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fcf3 	bl	800149c <print_char>
        get_char_from_uart(&cRxedChar, portMAX_DELAY);
 8001ab6:	e789      	b.n	80019cc <terminal_task+0x58>
 8001ab8:	080113b8 	.word	0x080113b8
 8001abc:	080113c8 	.word	0x080113c8
 8001ac0:	080113d8 	.word	0x080113d8
 8001ac4:	080113e8 	.word	0x080113e8
 8001ac8:	08011210 	.word	0x08011210
 8001acc:	20000948 	.word	0x20000948
 8001ad0:	20000754 	.word	0x20000754
 8001ad4:	0800138d 	.word	0x0800138d
 8001ad8:	08011234 	.word	0x08011234

08001adc <get_button>:
    }
}

#define BUTTON_0 GPIO_PIN_13

BaseType_t get_button(uint16_t *button, TickType_t timeout) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
	return xQueueReceive(button_rx_q, button, timeout);
 8001ae6:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <get_button+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f007 fefe 	bl	80098f0 <xQueueReceive>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000940 	.word	0x20000940

08001b04 <keyboard_task>:

static void keyboard_task(void *param) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001b10:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001b14:	6018      	str	r0, [r3, #0]
    uint16_t button;
    char buffer[MAX_OUTPUT_LENGTH];

    while (1) {
        (void)get_button(&button, portMAX_DELAY);
 8001b16:	f207 230e 	addw	r3, r7, #526	@ 0x20e
 8001b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ffdc 	bl	8001adc <get_button>
        if (button == BUTTON_0) {
 8001b24:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 8001b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b2c:	d1f3      	bne.n	8001b16 <keyboard_task+0x12>
            clearTerminalFunction(buffer, MAX_OUTPUT_LENGTH, "clear");
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	4a07      	ldr	r2, [pc, #28]	@ (8001b50 <keyboard_task+0x4c>)
 8001b34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff03 	bl	8001944 <clearTerminalFunction>
            print_string(buffer, portMAX_DELAY);
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	f04f 31ff 	mov.w	r1, #4294967295
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fc7e 	bl	8001448 <print_string>
        (void)get_button(&button, portMAX_DELAY);
 8001b4c:	e7e3      	b.n	8001b16 <keyboard_task+0x12>
 8001b4e:	bf00      	nop
 8001b50:	080111e8 	.word	0x080111e8

08001b54 <button_callback>:
        }
    }
}

void button_callback(TimerHandle_t xTimer) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
    (void)xTimer;
    uint16_t button_id = BUTTON_0;
 8001b5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b60:	81fb      	strh	r3, [r7, #14]
    if (HAL_GPIO_ReadPin(GPIOC, BUTTON_0) == GPIO_PIN_SET) {
 8001b62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b66:	480a      	ldr	r0, [pc, #40]	@ (8001b90 <button_callback+0x3c>)
 8001b68:	f003 fb24 	bl	80051b4 <HAL_GPIO_ReadPin>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d107      	bne.n	8001b82 <button_callback+0x2e>
        xQueueSend(button_rx_q, &button_id, 0);
 8001b72:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <button_callback+0x40>)
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	f107 010e 	add.w	r1, r7, #14
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f007 fc87 	bl	8009490 <xQueueGenericSend>
    }
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b82:	2028      	movs	r0, #40	@ 0x28
 8001b84:	f002 faac 	bl	80040e0 <HAL_NVIC_EnableIRQ>
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	48000800 	.word	0x48000800
 8001b94:	20000940 	.word	0x20000940

08001b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b9e:	f000 ff34 	bl	8002a0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba2:	f000 f89d 	bl	8001ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba6:	f000 fb09 	bl	80021bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001baa:	f000 fac1 	bl	8002130 <MX_DMA_Init>
  MX_ADC1_Init();
 8001bae:	f000 f8d7 	bl	8001d60 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001bb2:	f000 fa21 	bl	8001ff8 <MX_TIM3_Init>
  MX_DAC1_Init();
 8001bb6:	f000 f94d 	bl	8001e54 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001bba:	f000 f9cf 	bl	8001f5c <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8001bbe:	f000 f983 	bl	8001ec8 <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 8001bc2:	f000 fa67 	bl	8002094 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
    mutex_uart = xSemaphoreCreateMutex();
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f007 fc4a 	bl	8009460 <xQueueCreateMutex>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4a33      	ldr	r2, [pc, #204]	@ (8001c9c <main+0x104>)
 8001bd0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
    /* add semaphores, ... */

    sem_tx_uart = xSemaphoreCreateBinary();
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f007 fbce 	bl	8009378 <xQueueGenericCreate>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4a30      	ldr	r2, [pc, #192]	@ (8001ca0 <main+0x108>)
 8001be0:	6013      	str	r3, [r2, #0]
    sem_adc = xSemaphoreCreateBinary();
 8001be2:	2203      	movs	r2, #3
 8001be4:	2100      	movs	r1, #0
 8001be6:	2001      	movs	r0, #1
 8001be8:	f007 fbc6 	bl	8009378 <xQueueGenericCreate>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4a2d      	ldr	r2, [pc, #180]	@ (8001ca4 <main+0x10c>)
 8001bf0:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */

    button_timer = xTimerCreate("Button Timer", pdMS_TO_TICKS(50), pdFALSE,
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <main+0x110>)
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2132      	movs	r1, #50	@ 0x32
 8001bfc:	482b      	ldr	r0, [pc, #172]	@ (8001cac <main+0x114>)
 8001bfe:	f00a fa1f 	bl	800c040 <xTimerCreate>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4a2a      	ldr	r2, [pc, #168]	@ (8001cb0 <main+0x118>)
 8001c06:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
    /* add queues, ... */

    message_buffer = xMessageBufferCreate(BUFFER_SIZE);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c10:	f008 f9e6 	bl	8009fe0 <xStreamBufferGenericCreate>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4a27      	ldr	r2, [pc, #156]	@ (8001cb4 <main+0x11c>)
 8001c18:	6013      	str	r3, [r2, #0]
    uart_rx_q = xQueueCreate(32, sizeof(char));
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2020      	movs	r0, #32
 8001c20:	f007 fbaa 	bl	8009378 <xQueueGenericCreate>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4a24      	ldr	r2, [pc, #144]	@ (8001cb8 <main+0x120>)
 8001c28:	6013      	str	r3, [r2, #0]
    button_rx_q = xQueueCreate(128, sizeof(uint16_t));
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	2080      	movs	r0, #128	@ 0x80
 8001c30:	f007 fba2 	bl	8009378 <xQueueGenericCreate>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <main+0x124>)
 8001c38:	6013      	str	r3, [r2, #0]
  //osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
  //defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */

    (void)xTaskCreate(terminal_task, "Console", 512, NULL, 3, NULL);
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	2303      	movs	r3, #3
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2300      	movs	r3, #0
 8001c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c48:	491d      	ldr	r1, [pc, #116]	@ (8001cc0 <main+0x128>)
 8001c4a:	481e      	ldr	r0, [pc, #120]	@ (8001cc4 <main+0x12c>)
 8001c4c:	f008 fd60 	bl	800a710 <xTaskCreate>
    (void)xTaskCreate(print_task, "Print Task", 512, NULL, 2, NULL);
 8001c50:	2300      	movs	r3, #0
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	2302      	movs	r3, #2
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c5e:	491a      	ldr	r1, [pc, #104]	@ (8001cc8 <main+0x130>)
 8001c60:	481a      	ldr	r0, [pc, #104]	@ (8001ccc <main+0x134>)
 8001c62:	f008 fd55 	bl	800a710 <xTaskCreate>
    (void)xTaskCreate(keyboard_task, "Keyboard Task", 256, NULL, 2, NULL);
 8001c66:	2300      	movs	r3, #0
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c74:	4916      	ldr	r1, [pc, #88]	@ (8001cd0 <main+0x138>)
 8001c76:	4817      	ldr	r0, [pc, #92]	@ (8001cd4 <main+0x13c>)
 8001c78:	f008 fd4a 	bl	800a710 <xTaskCreate>
    (void)xTaskCreate(adc_task, "ADC", 1024+256, NULL, 6, NULL);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	2306      	movs	r3, #6
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2300      	movs	r3, #0
 8001c86:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001c8a:	4913      	ldr	r1, [pc, #76]	@ (8001cd8 <main+0x140>)
 8001c8c:	4813      	ldr	r0, [pc, #76]	@ (8001cdc <main+0x144>)
 8001c8e:	f008 fd3f 	bl	800a710 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001c92:	f007 fa4b 	bl	800912c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8001c96:	bf00      	nop
 8001c98:	e7fd      	b.n	8001c96 <main+0xfe>
 8001c9a:	bf00      	nop
 8001c9c:	2000092c 	.word	0x2000092c
 8001ca0:	20000934 	.word	0x20000934
 8001ca4:	20000938 	.word	0x20000938
 8001ca8:	08001b55 	.word	0x08001b55
 8001cac:	08011238 	.word	0x08011238
 8001cb0:	20000944 	.word	0x20000944
 8001cb4:	20000930 	.word	0x20000930
 8001cb8:	2000093c 	.word	0x2000093c
 8001cbc:	20000940 	.word	0x20000940
 8001cc0:	08011248 	.word	0x08011248
 8001cc4:	08001975 	.word	0x08001975
 8001cc8:	08011250 	.word	0x08011250
 8001ccc:	080014e9 	.word	0x080014e9
 8001cd0:	0801125c 	.word	0x0801125c
 8001cd4:	08001b05 	.word	0x08001b05
 8001cd8:	0801126c 	.word	0x0801126c
 8001cdc:	08001549 	.word	0x08001549

08001ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b094      	sub	sp, #80	@ 0x50
 8001ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ce6:	f107 0318 	add.w	r3, r7, #24
 8001cea:	2238      	movs	r2, #56	@ 0x38
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f00c fe95 	bl	800ea1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
 8001d00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d02:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d06:	f003 fa85 	bl	8005214 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d14:	2340      	movs	r3, #64	@ 0x40
 8001d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1c:	f107 0318 	add.w	r3, r7, #24
 8001d20:	4618      	mov	r0, r3
 8001d22:	f003 fb2b 	bl	800537c <HAL_RCC_OscConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001d2c:	f000 faa8 	bl	8002280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d30:	230f      	movs	r3, #15
 8001d32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d34:	2301      	movs	r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fe29 	bl	80059a0 <HAL_RCC_ClockConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001d54:	f000 fa94 	bl	8002280 <Error_Handler>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3750      	adds	r7, #80	@ 0x50
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	@ 0x30
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2220      	movs	r2, #32
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f00c fe50 	bl	800ea1e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d7e:	4b33      	ldr	r3, [pc, #204]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001d80:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001d84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d86:	4b31      	ldr	r3, [pc, #196]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001d88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d94:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001da0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001da6:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001da8:	2204      	movs	r2, #4
 8001daa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001dac:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001db2:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001db8:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dbe:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8001dc6:	4b21      	ldr	r3, [pc, #132]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001dc8:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8001dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001dce:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001dd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001dde:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dec:	4817      	ldr	r0, [pc, #92]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001dee:	f001 f861 	bl	8002eb4 <HAL_ADC_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001df8:	f000 fa42 	bl	8002280 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e04:	4619      	mov	r1, r3
 8001e06:	4811      	ldr	r0, [pc, #68]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001e08:	f001 ffd0 	bl	8003dac <HAL_ADCEx_MultiModeConfigChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001e12:	f000 fa35 	bl	8002280 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <MX_ADC1_Init+0xf0>)
 8001e18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e22:	237f      	movs	r3, #127	@ 0x7f
 8001e24:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e26:	2304      	movs	r3, #4
 8001e28:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4806      	ldr	r0, [pc, #24]	@ (8001e4c <MX_ADC1_Init+0xec>)
 8001e34:	f001 fa8a 	bl	800334c <HAL_ADC_ConfigChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001e3e:	f000 fa1f 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	3730      	adds	r7, #48	@ 0x30
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000614 	.word	0x20000614
 8001e50:	04300002 	.word	0x04300002

08001e54 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	@ 0x30
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	2230      	movs	r2, #48	@ 0x30
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f00c fddc 	bl	800ea1e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001e66:	4b16      	ldr	r3, [pc, #88]	@ (8001ec0 <MX_DAC1_Init+0x6c>)
 8001e68:	4a16      	ldr	r2, [pc, #88]	@ (8001ec4 <MX_DAC1_Init+0x70>)
 8001e6a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001e6c:	4814      	ldr	r0, [pc, #80]	@ (8001ec0 <MX_DAC1_Init+0x6c>)
 8001e6e:	f002 f953 	bl	8004118 <HAL_DAC_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001e78:	f000 fa02 	bl	8002280 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001e8c:	2312      	movs	r3, #18
 8001e8e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001e98:	2304      	movs	r3, #4
 8001e9a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4806      	ldr	r0, [pc, #24]	@ (8001ec0 <MX_DAC1_Init+0x6c>)
 8001ea8:	f002 fa8e 	bl	80043c8 <HAL_DAC_ConfigChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001eb2:	f000 f9e5 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	3730      	adds	r7, #48	@ 0x30
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200006e0 	.word	0x200006e0
 8001ec4:	50000800 	.word	0x50000800

08001ec8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ecc:	4b21      	ldr	r3, [pc, #132]	@ (8001f54 <MX_LPUART1_UART_Init+0x8c>)
 8001ece:	4a22      	ldr	r2, [pc, #136]	@ (8001f58 <MX_LPUART1_UART_Init+0x90>)
 8001ed0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001ed2:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <MX_LPUART1_UART_Init+0x8c>)
 8001ed4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ed8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001eda:	4b1e      	ldr	r3, [pc, #120]	@ (8001f54 <MX_LPUART1_UART_Init+0x8c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <MX_LPUART1_UART_Init+0x8c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f54 <MX_LPUART1_UART_Init+0x8c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001eec:	4b19      	ldr	r3, [pc, #100]	@ (8001f54 <MX_LPUART1_UART_Init+0x8c>)
 8001eee:	220c      	movs	r2, #12
 8001ef0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef2:	4b18      	ldr	r3, [pc, #96]	@ (8001f54 <MX_LPUART1_UART_Init+0x8c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <MX_LPUART1_UART_Init+0x8c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <MX_LPUART1_UART_Init+0x8c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f04:	4b13      	ldr	r3, [pc, #76]	@ (8001f54 <MX_LPUART1_UART_Init+0x8c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001f0a:	4812      	ldr	r0, [pc, #72]	@ (8001f54 <MX_LPUART1_UART_Init+0x8c>)
 8001f0c:	f004 ff44 	bl	8006d98 <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f16:	f000 f9b3 	bl	8002280 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	480d      	ldr	r0, [pc, #52]	@ (8001f54 <MX_LPUART1_UART_Init+0x8c>)
 8001f1e:	f007 f83a 	bl	8008f96 <HAL_UARTEx_SetTxFifoThreshold>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001f28:	f000 f9aa 	bl	8002280 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4809      	ldr	r0, [pc, #36]	@ (8001f54 <MX_LPUART1_UART_Init+0x8c>)
 8001f30:	f007 f86f 	bl	8009012 <HAL_UARTEx_SetRxFifoThreshold>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001f3a:	f000 f9a1 	bl	8002280 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001f3e:	4805      	ldr	r0, [pc, #20]	@ (8001f54 <MX_LPUART1_UART_Init+0x8c>)
 8001f40:	f006 fff0 	bl	8008f24 <HAL_UARTEx_DisableFifoMode>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001f4a:	f000 f999 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000754 	.word	0x20000754
 8001f58:	40008000 	.word	0x40008000

08001f5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f62:	f107 0310 	add.w	r3, r7, #16
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff4 <MX_TIM2_Init+0x98>)
 8001f7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f82:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff4 <MX_TIM2_Init+0x98>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff4 <MX_TIM2_Init+0x98>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11067;
 8001f8e:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <MX_TIM2_Init+0x98>)
 8001f90:	f642 323b 	movw	r2, #11067	@ 0x2b3b
 8001f94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f96:	4b17      	ldr	r3, [pc, #92]	@ (8001ff4 <MX_TIM2_Init+0x98>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <MX_TIM2_Init+0x98>)
 8001f9e:	2280      	movs	r2, #128	@ 0x80
 8001fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fa2:	4814      	ldr	r0, [pc, #80]	@ (8001ff4 <MX_TIM2_Init+0x98>)
 8001fa4:	f004 f93a 	bl	800621c <HAL_TIM_Base_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001fae:	f000 f967 	bl	8002280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480d      	ldr	r0, [pc, #52]	@ (8001ff4 <MX_TIM2_Init+0x98>)
 8001fc0:	f004 fbc8 	bl	8006754 <HAL_TIM_ConfigClockSource>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001fca:	f000 f959 	bl	8002280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4806      	ldr	r0, [pc, #24]	@ (8001ff4 <MX_TIM2_Init+0x98>)
 8001fdc:	f004 fe14 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fe6:	f000 f94b 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000848 	.word	0x20000848

08001ff8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffe:	f107 0310 	add.w	r3, r7, #16
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002016:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <MX_TIM3_Init+0x94>)
 8002018:	4a1d      	ldr	r2, [pc, #116]	@ (8002090 <MX_TIM3_Init+0x98>)
 800201a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800201c:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <MX_TIM3_Init+0x94>)
 800201e:	2200      	movs	r2, #0
 8002020:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002022:	4b1a      	ldr	r3, [pc, #104]	@ (800208c <MX_TIM3_Init+0x94>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 11067;
 8002028:	4b18      	ldr	r3, [pc, #96]	@ (800208c <MX_TIM3_Init+0x94>)
 800202a:	f642 323b 	movw	r2, #11067	@ 0x2b3b
 800202e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002030:	4b16      	ldr	r3, [pc, #88]	@ (800208c <MX_TIM3_Init+0x94>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002036:	4b15      	ldr	r3, [pc, #84]	@ (800208c <MX_TIM3_Init+0x94>)
 8002038:	2280      	movs	r2, #128	@ 0x80
 800203a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800203c:	4813      	ldr	r0, [pc, #76]	@ (800208c <MX_TIM3_Init+0x94>)
 800203e:	f004 f8ed 	bl	800621c <HAL_TIM_Base_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002048:	f000 f91a 	bl	8002280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800204c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002050:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002052:	f107 0310 	add.w	r3, r7, #16
 8002056:	4619      	mov	r1, r3
 8002058:	480c      	ldr	r0, [pc, #48]	@ (800208c <MX_TIM3_Init+0x94>)
 800205a:	f004 fb7b 	bl	8006754 <HAL_TIM_ConfigClockSource>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002064:	f000 f90c 	bl	8002280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002068:	2320      	movs	r3, #32
 800206a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	4619      	mov	r1, r3
 8002074:	4805      	ldr	r0, [pc, #20]	@ (800208c <MX_TIM3_Init+0x94>)
 8002076:	f004 fdc7 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002080:	f000 f8fe 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002084:	bf00      	nop
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000894 	.word	0x20000894
 8002090:	40000400 	.word	0x40000400

08002094 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <MX_TIM4_Init+0x94>)
 80020b4:	4a1d      	ldr	r2, [pc, #116]	@ (800212c <MX_TIM4_Init+0x98>)
 80020b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <MX_TIM4_Init+0x94>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020be:	4b1a      	ldr	r3, [pc, #104]	@ (8002128 <MX_TIM4_Init+0x94>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16999;
 80020c4:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <MX_TIM4_Init+0x94>)
 80020c6:	f244 2267 	movw	r2, #16999	@ 0x4267
 80020ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020cc:	4b16      	ldr	r3, [pc, #88]	@ (8002128 <MX_TIM4_Init+0x94>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <MX_TIM4_Init+0x94>)
 80020d4:	2280      	movs	r2, #128	@ 0x80
 80020d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020d8:	4813      	ldr	r0, [pc, #76]	@ (8002128 <MX_TIM4_Init+0x94>)
 80020da:	f004 f89f 	bl	800621c <HAL_TIM_Base_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80020e4:	f000 f8cc 	bl	8002280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020ee:	f107 0310 	add.w	r3, r7, #16
 80020f2:	4619      	mov	r1, r3
 80020f4:	480c      	ldr	r0, [pc, #48]	@ (8002128 <MX_TIM4_Init+0x94>)
 80020f6:	f004 fb2d 	bl	8006754 <HAL_TIM_ConfigClockSource>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002100:	f000 f8be 	bl	8002280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002104:	2320      	movs	r3, #32
 8002106:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	4619      	mov	r1, r3
 8002110:	4805      	ldr	r0, [pc, #20]	@ (8002128 <MX_TIM4_Init+0x94>)
 8002112:	f004 fd79 	bl	8006c08 <HAL_TIMEx_MasterConfigSynchronization>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800211c:	f000 f8b0 	bl	8002280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	3720      	adds	r7, #32
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200008e0 	.word	0x200008e0
 800212c:	40000800 	.word	0x40000800

08002130 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002136:	4b20      	ldr	r3, [pc, #128]	@ (80021b8 <MX_DMA_Init+0x88>)
 8002138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800213a:	4a1f      	ldr	r2, [pc, #124]	@ (80021b8 <MX_DMA_Init+0x88>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	6493      	str	r3, [r2, #72]	@ 0x48
 8002142:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <MX_DMA_Init+0x88>)
 8002144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800214e:	4b1a      	ldr	r3, [pc, #104]	@ (80021b8 <MX_DMA_Init+0x88>)
 8002150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002152:	4a19      	ldr	r2, [pc, #100]	@ (80021b8 <MX_DMA_Init+0x88>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6493      	str	r3, [r2, #72]	@ 0x48
 800215a:	4b17      	ldr	r3, [pc, #92]	@ (80021b8 <MX_DMA_Init+0x88>)
 800215c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002166:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <MX_DMA_Init+0x88>)
 8002168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800216a:	4a13      	ldr	r2, [pc, #76]	@ (80021b8 <MX_DMA_Init+0x88>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	6493      	str	r3, [r2, #72]	@ 0x48
 8002172:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <MX_DMA_Init+0x88>)
 8002174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2105      	movs	r1, #5
 8002182:	200b      	movs	r0, #11
 8002184:	f001 ff92 	bl	80040ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002188:	200b      	movs	r0, #11
 800218a:	f001 ffa9 	bl	80040e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	2105      	movs	r1, #5
 8002192:	200c      	movs	r0, #12
 8002194:	f001 ff8a 	bl	80040ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002198:	200c      	movs	r0, #12
 800219a:	f001 ffa1 	bl	80040e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2105      	movs	r1, #5
 80021a2:	2039      	movs	r0, #57	@ 0x39
 80021a4:	f001 ff82 	bl	80040ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80021a8:	2039      	movs	r0, #57	@ 0x39
 80021aa:	f001 ff99 	bl	80040e0 <HAL_NVIC_EnableIRQ>

}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000

080021bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c2:	f107 030c 	add.w	r3, r7, #12
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
 80021d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d2:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <MX_GPIO_Init+0x7c>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	4a18      	ldr	r2, [pc, #96]	@ (8002238 <MX_GPIO_Init+0x7c>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021de:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <MX_GPIO_Init+0x7c>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <MX_GPIO_Init+0x7c>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	4a12      	ldr	r2, [pc, #72]	@ (8002238 <MX_GPIO_Init+0x7c>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021f6:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <MX_GPIO_Init+0x7c>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002202:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002208:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800220c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800220e:	2302      	movs	r3, #2
 8002210:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002212:	f107 030c 	add.w	r3, r7, #12
 8002216:	4619      	mov	r1, r3
 8002218:	4808      	ldr	r0, [pc, #32]	@ (800223c <MX_GPIO_Init+0x80>)
 800221a:	f002 fe49 	bl	8004eb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2105      	movs	r1, #5
 8002222:	2028      	movs	r0, #40	@ 0x28
 8002224:	f001 ff42 	bl	80040ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002228:	2028      	movs	r0, #40	@ 0x28
 800222a:	f001 ff59 	bl	80040e0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800222e:	bf00      	nop
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	48000800 	.word	0x48000800

08002240 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a09      	ldr	r2, [pc, #36]	@ (8002274 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d101      	bne.n	8002256 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002252:	f000 fbf3 	bl	8002a3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
    if (htim->Instance == TIM4) {
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a07      	ldr	r2, [pc, #28]	@ (8002278 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d104      	bne.n	800226a <HAL_TIM_PeriodElapsedCallback+0x2a>
        ulHighFrequencyTimerTicks++;
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	4a05      	ldr	r2, [pc, #20]	@ (800227c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002268:	6013      	str	r3, [r2, #0]
    }

  /* USER CODE END Callback 1 */
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40000800 	.word	0x40000800
 800227c:	20000610 	.word	0x20000610

08002280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
}
 8002286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 8002288:	bf00      	nop
 800228a:	e7fd      	b.n	8002288 <Error_Handler+0x8>

0800228c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002292:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <HAL_MspInit+0x50>)
 8002294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002296:	4a11      	ldr	r2, [pc, #68]	@ (80022dc <HAL_MspInit+0x50>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6613      	str	r3, [r2, #96]	@ 0x60
 800229e:	4b0f      	ldr	r3, [pc, #60]	@ (80022dc <HAL_MspInit+0x50>)
 80022a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <HAL_MspInit+0x50>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	4a0b      	ldr	r2, [pc, #44]	@ (80022dc <HAL_MspInit+0x50>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <HAL_MspInit+0x50>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	210f      	movs	r1, #15
 80022c6:	f06f 0001 	mvn.w	r0, #1
 80022ca:	f001 feef 	bl	80040ac <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80022ce:	f003 f845 	bl	800535c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000

080022e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b09a      	sub	sp, #104	@ 0x68
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	2244      	movs	r2, #68	@ 0x44
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f00c fb8c 	bl	800ea1e <memset>
  if(hadc->Instance==ADC1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800230e:	d15f      	bne.n	80023d0 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002310:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002314:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002316:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800231a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fd8b 	bl	8005e3c <HAL_RCCEx_PeriphCLKConfig>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800232c:	f7ff ffa8 	bl	8002280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002330:	4b29      	ldr	r3, [pc, #164]	@ (80023d8 <HAL_ADC_MspInit+0xf8>)
 8002332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002334:	4a28      	ldr	r2, [pc, #160]	@ (80023d8 <HAL_ADC_MspInit+0xf8>)
 8002336:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800233a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800233c:	4b26      	ldr	r3, [pc, #152]	@ (80023d8 <HAL_ADC_MspInit+0xf8>)
 800233e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002348:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <HAL_ADC_MspInit+0xf8>)
 800234a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234c:	4a22      	ldr	r2, [pc, #136]	@ (80023d8 <HAL_ADC_MspInit+0xf8>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002354:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <HAL_ADC_MspInit+0xf8>)
 8002356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002360:	2301      	movs	r3, #1
 8002362:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002364:	2303      	movs	r3, #3
 8002366:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002370:	4619      	mov	r1, r3
 8002372:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002376:	f002 fd9b 	bl	8004eb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800237a:	4b18      	ldr	r3, [pc, #96]	@ (80023dc <HAL_ADC_MspInit+0xfc>)
 800237c:	4a18      	ldr	r2, [pc, #96]	@ (80023e0 <HAL_ADC_MspInit+0x100>)
 800237e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002380:	4b16      	ldr	r3, [pc, #88]	@ (80023dc <HAL_ADC_MspInit+0xfc>)
 8002382:	2205      	movs	r2, #5
 8002384:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <HAL_ADC_MspInit+0xfc>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800238c:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <HAL_ADC_MspInit+0xfc>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002392:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <HAL_ADC_MspInit+0xfc>)
 8002394:	2280      	movs	r2, #128	@ 0x80
 8002396:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002398:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <HAL_ADC_MspInit+0xfc>)
 800239a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800239e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023a0:	4b0e      	ldr	r3, [pc, #56]	@ (80023dc <HAL_ADC_MspInit+0xfc>)
 80023a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <HAL_ADC_MspInit+0xfc>)
 80023aa:	2220      	movs	r2, #32
 80023ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_ADC_MspInit+0xfc>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023b4:	4809      	ldr	r0, [pc, #36]	@ (80023dc <HAL_ADC_MspInit+0xfc>)
 80023b6:	f002 fa49 	bl	800484c <HAL_DMA_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80023c0:	f7ff ff5e 	bl	8002280 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a05      	ldr	r2, [pc, #20]	@ (80023dc <HAL_ADC_MspInit+0xfc>)
 80023c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80023ca:	4a04      	ldr	r2, [pc, #16]	@ (80023dc <HAL_ADC_MspInit+0xfc>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023d0:	bf00      	nop
 80023d2:	3768      	adds	r7, #104	@ 0x68
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	20000680 	.word	0x20000680
 80023e0:	40020008 	.word	0x40020008

080023e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	@ 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a2b      	ldr	r2, [pc, #172]	@ (80024b0 <HAL_DAC_MspInit+0xcc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d14f      	bne.n	80024a6 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002406:	4b2b      	ldr	r3, [pc, #172]	@ (80024b4 <HAL_DAC_MspInit+0xd0>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240a:	4a2a      	ldr	r2, [pc, #168]	@ (80024b4 <HAL_DAC_MspInit+0xd0>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002412:	4b28      	ldr	r3, [pc, #160]	@ (80024b4 <HAL_DAC_MspInit+0xd0>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	4b25      	ldr	r3, [pc, #148]	@ (80024b4 <HAL_DAC_MspInit+0xd0>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002422:	4a24      	ldr	r2, [pc, #144]	@ (80024b4 <HAL_DAC_MspInit+0xd0>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800242a:	4b22      	ldr	r3, [pc, #136]	@ (80024b4 <HAL_DAC_MspInit+0xd0>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002436:	2310      	movs	r3, #16
 8002438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800243a:	2303      	movs	r3, #3
 800243c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	4619      	mov	r1, r3
 8002448:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800244c:	f002 fd30 	bl	8004eb0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Channel2;
 8002450:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <HAL_DAC_MspInit+0xd4>)
 8002452:	4a1a      	ldr	r2, [pc, #104]	@ (80024bc <HAL_DAC_MspInit+0xd8>)
 8002454:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8002456:	4b18      	ldr	r3, [pc, #96]	@ (80024b8 <HAL_DAC_MspInit+0xd4>)
 8002458:	2206      	movs	r2, #6
 800245a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800245c:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <HAL_DAC_MspInit+0xd4>)
 800245e:	2210      	movs	r2, #16
 8002460:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002462:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <HAL_DAC_MspInit+0xd4>)
 8002464:	2200      	movs	r2, #0
 8002466:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002468:	4b13      	ldr	r3, [pc, #76]	@ (80024b8 <HAL_DAC_MspInit+0xd4>)
 800246a:	2280      	movs	r2, #128	@ 0x80
 800246c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_DAC_MspInit+0xd4>)
 8002470:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002474:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <HAL_DAC_MspInit+0xd4>)
 8002478:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800247c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800247e:	4b0e      	ldr	r3, [pc, #56]	@ (80024b8 <HAL_DAC_MspInit+0xd4>)
 8002480:	2220      	movs	r2, #32
 8002482:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002484:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <HAL_DAC_MspInit+0xd4>)
 8002486:	2200      	movs	r2, #0
 8002488:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800248a:	480b      	ldr	r0, [pc, #44]	@ (80024b8 <HAL_DAC_MspInit+0xd4>)
 800248c:	f002 f9de 	bl	800484c <HAL_DMA_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002496:	f7ff fef3 	bl	8002280 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a06      	ldr	r2, [pc, #24]	@ (80024b8 <HAL_DAC_MspInit+0xd4>)
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	4a05      	ldr	r2, [pc, #20]	@ (80024b8 <HAL_DAC_MspInit+0xd4>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80024a6:	bf00      	nop
 80024a8:	3728      	adds	r7, #40	@ 0x28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	50000800 	.word	0x50000800
 80024b4:	40021000 	.word	0x40021000
 80024b8:	200006f4 	.word	0x200006f4
 80024bc:	4002041c 	.word	0x4002041c

080024c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b09a      	sub	sp, #104	@ 0x68
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d8:	f107 0310 	add.w	r3, r7, #16
 80024dc:	2244      	movs	r2, #68	@ 0x44
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00c fa9c 	bl	800ea1e <memset>
  if(huart->Instance==LPUART1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a37      	ldr	r2, [pc, #220]	@ (80025c8 <HAL_UART_MspInit+0x108>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d167      	bne.n	80025c0 <HAL_UART_MspInit+0x100>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80024f0:	2320      	movs	r3, #32
 80024f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80024f4:	2300      	movs	r3, #0
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 fc9d 	bl	8005e3c <HAL_RCCEx_PeriphCLKConfig>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002508:	f7ff feba 	bl	8002280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800250c:	4b2f      	ldr	r3, [pc, #188]	@ (80025cc <HAL_UART_MspInit+0x10c>)
 800250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002510:	4a2e      	ldr	r2, [pc, #184]	@ (80025cc <HAL_UART_MspInit+0x10c>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002518:	4b2c      	ldr	r3, [pc, #176]	@ (80025cc <HAL_UART_MspInit+0x10c>)
 800251a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002524:	4b29      	ldr	r3, [pc, #164]	@ (80025cc <HAL_UART_MspInit+0x10c>)
 8002526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002528:	4a28      	ldr	r2, [pc, #160]	@ (80025cc <HAL_UART_MspInit+0x10c>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002530:	4b26      	ldr	r3, [pc, #152]	@ (80025cc <HAL_UART_MspInit+0x10c>)
 8002532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800253c:	230c      	movs	r3, #12
 800253e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800254c:	230c      	movs	r3, #12
 800254e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002554:	4619      	mov	r1, r3
 8002556:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800255a:	f002 fca9 	bl	8004eb0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800255e:	4b1c      	ldr	r3, [pc, #112]	@ (80025d0 <HAL_UART_MspInit+0x110>)
 8002560:	4a1c      	ldr	r2, [pc, #112]	@ (80025d4 <HAL_UART_MspInit+0x114>)
 8002562:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002564:	4b1a      	ldr	r3, [pc, #104]	@ (80025d0 <HAL_UART_MspInit+0x110>)
 8002566:	2223      	movs	r2, #35	@ 0x23
 8002568:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800256a:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <HAL_UART_MspInit+0x110>)
 800256c:	2210      	movs	r2, #16
 800256e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002570:	4b17      	ldr	r3, [pc, #92]	@ (80025d0 <HAL_UART_MspInit+0x110>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002576:	4b16      	ldr	r3, [pc, #88]	@ (80025d0 <HAL_UART_MspInit+0x110>)
 8002578:	2280      	movs	r2, #128	@ 0x80
 800257a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800257c:	4b14      	ldr	r3, [pc, #80]	@ (80025d0 <HAL_UART_MspInit+0x110>)
 800257e:	2200      	movs	r2, #0
 8002580:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002582:	4b13      	ldr	r3, [pc, #76]	@ (80025d0 <HAL_UART_MspInit+0x110>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002588:	4b11      	ldr	r3, [pc, #68]	@ (80025d0 <HAL_UART_MspInit+0x110>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800258e:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <HAL_UART_MspInit+0x110>)
 8002590:	2200      	movs	r2, #0
 8002592:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002594:	480e      	ldr	r0, [pc, #56]	@ (80025d0 <HAL_UART_MspInit+0x110>)
 8002596:	f002 f959 	bl	800484c <HAL_DMA_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80025a0:	f7ff fe6e 	bl	8002280 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a0a      	ldr	r2, [pc, #40]	@ (80025d0 <HAL_UART_MspInit+0x110>)
 80025a8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80025aa:	4a09      	ldr	r2, [pc, #36]	@ (80025d0 <HAL_UART_MspInit+0x110>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2105      	movs	r1, #5
 80025b4:	205b      	movs	r0, #91	@ 0x5b
 80025b6:	f001 fd79 	bl	80040ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80025ba:	205b      	movs	r0, #91	@ 0x5b
 80025bc:	f001 fd90 	bl	80040e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80025c0:	bf00      	nop
 80025c2:	3768      	adds	r7, #104	@ 0x68
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40008000 	.word	0x40008000
 80025cc:	40021000 	.word	0x40021000
 80025d0:	200007e8 	.word	0x200007e8
 80025d4:	4002001c 	.word	0x4002001c

080025d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e8:	d10c      	bne.n	8002604 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <HAL_TIM_Base_MspInit+0x8c>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002664 <HAL_TIM_Base_MspInit+0x8c>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_TIM_Base_MspInit+0x8c>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002602:	e02a      	b.n	800265a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a17      	ldr	r2, [pc, #92]	@ (8002668 <HAL_TIM_Base_MspInit+0x90>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10c      	bne.n	8002628 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <HAL_TIM_Base_MspInit+0x8c>)
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	4a14      	ldr	r2, [pc, #80]	@ (8002664 <HAL_TIM_Base_MspInit+0x8c>)
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	6593      	str	r3, [r2, #88]	@ 0x58
 800261a:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <HAL_TIM_Base_MspInit+0x8c>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
}
 8002626:	e018      	b.n	800265a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0f      	ldr	r2, [pc, #60]	@ (800266c <HAL_TIM_Base_MspInit+0x94>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d113      	bne.n	800265a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002632:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <HAL_TIM_Base_MspInit+0x8c>)
 8002634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002636:	4a0b      	ldr	r2, [pc, #44]	@ (8002664 <HAL_TIM_Base_MspInit+0x8c>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	6593      	str	r3, [r2, #88]	@ 0x58
 800263e:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_TIM_Base_MspInit+0x8c>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2105      	movs	r1, #5
 800264e:	201e      	movs	r0, #30
 8002650:	f001 fd2c 	bl	80040ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002654:	201e      	movs	r0, #30
 8002656:	f001 fd43 	bl	80040e0 <HAL_NVIC_EnableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	40000400 	.word	0x40000400
 800266c:	40000800 	.word	0x40000800

08002670 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08c      	sub	sp, #48	@ 0x30
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002680:	4b2c      	ldr	r3, [pc, #176]	@ (8002734 <HAL_InitTick+0xc4>)
 8002682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002684:	4a2b      	ldr	r2, [pc, #172]	@ (8002734 <HAL_InitTick+0xc4>)
 8002686:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800268a:	6613      	str	r3, [r2, #96]	@ 0x60
 800268c:	4b29      	ldr	r3, [pc, #164]	@ (8002734 <HAL_InitTick+0xc4>)
 800268e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002690:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002698:	f107 020c 	add.w	r2, r7, #12
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 fb52 	bl	8005d4c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80026a8:	f003 fb3a 	bl	8005d20 <HAL_RCC_GetPCLK2Freq>
 80026ac:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b0:	4a21      	ldr	r2, [pc, #132]	@ (8002738 <HAL_InitTick+0xc8>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	0c9b      	lsrs	r3, r3, #18
 80026b8:	3b01      	subs	r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80026bc:	4b1f      	ldr	r3, [pc, #124]	@ (800273c <HAL_InitTick+0xcc>)
 80026be:	4a20      	ldr	r2, [pc, #128]	@ (8002740 <HAL_InitTick+0xd0>)
 80026c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80026c2:	4b1e      	ldr	r3, [pc, #120]	@ (800273c <HAL_InitTick+0xcc>)
 80026c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80026ca:	4a1c      	ldr	r2, [pc, #112]	@ (800273c <HAL_InitTick+0xcc>)
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80026d0:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <HAL_InitTick+0xcc>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d6:	4b19      	ldr	r3, [pc, #100]	@ (800273c <HAL_InitTick+0xcc>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80026dc:	4817      	ldr	r0, [pc, #92]	@ (800273c <HAL_InitTick+0xcc>)
 80026de:	f003 fd9d 	bl	800621c <HAL_TIM_Base_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80026e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d11b      	bne.n	8002728 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80026f0:	4812      	ldr	r0, [pc, #72]	@ (800273c <HAL_InitTick+0xcc>)
 80026f2:	f003 fe75 	bl	80063e0 <HAL_TIM_Base_Start_IT>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80026fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002700:	2b00      	cmp	r3, #0
 8002702:	d111      	bne.n	8002728 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002704:	2019      	movs	r0, #25
 8002706:	f001 fceb 	bl	80040e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b0f      	cmp	r3, #15
 800270e:	d808      	bhi.n	8002722 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002710:	2200      	movs	r2, #0
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	2019      	movs	r0, #25
 8002716:	f001 fcc9 	bl	80040ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800271a:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <HAL_InitTick+0xd4>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	e002      	b.n	8002728 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002728:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800272c:	4618      	mov	r0, r3
 800272e:	3730      	adds	r7, #48	@ 0x30
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	431bde83 	.word	0x431bde83
 800273c:	20000954 	.word	0x20000954
 8002740:	40012c00 	.word	0x40012c00
 8002744:	20000418 	.word	0x20000418

08002748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <NMI_Handler+0x4>

08002750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <HardFault_Handler+0x4>

08002758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <MemManage_Handler+0x4>

08002760 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002764:	bf00      	nop
 8002766:	e7fd      	b.n	8002764 <BusFault_Handler+0x4>

08002768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800276c:	bf00      	nop
 800276e:	e7fd      	b.n	800276c <UsageFault_Handler+0x4>

08002770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002784:	4802      	ldr	r0, [pc, #8]	@ (8002790 <DMA1_Channel1_IRQHandler+0x10>)
 8002786:	f002 fa44 	bl	8004c12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000680 	.word	0x20000680

08002794 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002798:	4802      	ldr	r0, [pc, #8]	@ (80027a4 <DMA1_Channel2_IRQHandler+0x10>)
 800279a:	f002 fa3a 	bl	8004c12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200007e8 	.word	0x200007e8

080027a8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027ac:	4802      	ldr	r0, [pc, #8]	@ (80027b8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80027ae:	f003 fe81 	bl	80064b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000954 	.word	0x20000954

080027bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027c0:	4802      	ldr	r0, [pc, #8]	@ (80027cc <TIM4_IRQHandler+0x10>)
 80027c2:	f003 fe77 	bl	80064b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200008e0 	.word	0x200008e0

080027d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80027d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80027d8:	f002 fd04 	bl	80051e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}

080027e0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80027e4:	4802      	ldr	r0, [pc, #8]	@ (80027f0 <DMA2_Channel2_IRQHandler+0x10>)
 80027e6:	f002 fa14 	bl	8004c12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200006f4 	.word	0x200006f4

080027f4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80027f8:	4802      	ldr	r0, [pc, #8]	@ (8002804 <LPUART1_IRQHandler+0x10>)
 80027fa:	f004 fbe9 	bl	8006fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000754 	.word	0x20000754

08002808 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return 1;
 800280c:	2301      	movs	r3, #1
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <_kill>:

int _kill(int pid, int sig)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002822:	f00c f9c9 	bl	800ebb8 <__errno>
 8002826:	4603      	mov	r3, r0
 8002828:	2216      	movs	r2, #22
 800282a:	601a      	str	r2, [r3, #0]
  return -1;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_exit>:

void _exit (int status)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ffe7 	bl	8002818 <_kill>
  while (1) {}    /* Make sure we hang here */
 800284a:	bf00      	nop
 800284c:	e7fd      	b.n	800284a <_exit+0x12>

0800284e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e00a      	b.n	8002876 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002860:	f3af 8000 	nop.w
 8002864:	4601      	mov	r1, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	60ba      	str	r2, [r7, #8]
 800286c:	b2ca      	uxtb	r2, r1
 800286e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3301      	adds	r3, #1
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	429a      	cmp	r2, r3
 800287c:	dbf0      	blt.n	8002860 <_read+0x12>
  }

  return len;
 800287e:	687b      	ldr	r3, [r7, #4]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	e009      	b.n	80028ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	60ba      	str	r2, [r7, #8]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3301      	adds	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	dbf1      	blt.n	800289a <_write+0x12>
  }
  return len;
 80028b6:	687b      	ldr	r3, [r7, #4]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <_close>:

int _close(int file)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028e8:	605a      	str	r2, [r3, #4]
  return 0;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_isatty>:

int _isatty(int file)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002900:	2301      	movs	r3, #1
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800290e:	b480      	push	{r7}
 8002910:	b085      	sub	sp, #20
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002930:	4a14      	ldr	r2, [pc, #80]	@ (8002984 <_sbrk+0x5c>)
 8002932:	4b15      	ldr	r3, [pc, #84]	@ (8002988 <_sbrk+0x60>)
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800293c:	4b13      	ldr	r3, [pc, #76]	@ (800298c <_sbrk+0x64>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d102      	bne.n	800294a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002944:	4b11      	ldr	r3, [pc, #68]	@ (800298c <_sbrk+0x64>)
 8002946:	4a12      	ldr	r2, [pc, #72]	@ (8002990 <_sbrk+0x68>)
 8002948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800294a:	4b10      	ldr	r3, [pc, #64]	@ (800298c <_sbrk+0x64>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	429a      	cmp	r2, r3
 8002956:	d207      	bcs.n	8002968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002958:	f00c f92e 	bl	800ebb8 <__errno>
 800295c:	4603      	mov	r3, r0
 800295e:	220c      	movs	r2, #12
 8002960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295
 8002966:	e009      	b.n	800297c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002968:	4b08      	ldr	r3, [pc, #32]	@ (800298c <_sbrk+0x64>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800296e:	4b07      	ldr	r3, [pc, #28]	@ (800298c <_sbrk+0x64>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	4a05      	ldr	r2, [pc, #20]	@ (800298c <_sbrk+0x64>)
 8002978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20008000 	.word	0x20008000
 8002988:	00000400 	.word	0x00000400
 800298c:	200009a0 	.word	0x200009a0
 8002990:	20007260 	.word	0x20007260

08002994 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <SystemInit+0x20>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299e:	4a05      	ldr	r2, [pc, #20]	@ (80029b4 <SystemInit+0x20>)
 80029a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029b8:	480d      	ldr	r0, [pc, #52]	@ (80029f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029ba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80029bc:	f7ff ffea 	bl	8002994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029c0:	480c      	ldr	r0, [pc, #48]	@ (80029f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80029c2:	490d      	ldr	r1, [pc, #52]	@ (80029f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029c4:	4a0d      	ldr	r2, [pc, #52]	@ (80029fc <LoopForever+0xe>)
  movs r3, #0
 80029c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029c8:	e002      	b.n	80029d0 <LoopCopyDataInit>

080029ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ce:	3304      	adds	r3, #4

080029d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d4:	d3f9      	bcc.n	80029ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002a04 <LoopForever+0x16>)
  movs r3, #0
 80029da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029dc:	e001      	b.n	80029e2 <LoopFillZerobss>

080029de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e0:	3204      	adds	r2, #4

080029e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e4:	d3fb      	bcc.n	80029de <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80029e6:	f00c f8ed 	bl	800ebc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029ea:	f7ff f8d5 	bl	8001b98 <main>

080029ee <LoopForever>:

LoopForever:
    b LoopForever
 80029ee:	e7fe      	b.n	80029ee <LoopForever>
  ldr   r0, =_estack
 80029f0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80029f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f8:	200005ec 	.word	0x200005ec
  ldr r2, =_sidata
 80029fc:	08012370 	.word	0x08012370
  ldr r2, =_sbss
 8002a00:	200005ec 	.word	0x200005ec
  ldr r4, =_ebss
 8002a04:	2000725c 	.word	0x2000725c

08002a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a08:	e7fe      	b.n	8002a08 <ADC1_2_IRQHandler>

08002a0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a14:	2003      	movs	r0, #3
 8002a16:	f001 fb3e 	bl	8004096 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a1a:	200f      	movs	r0, #15
 8002a1c:	f7ff fe28 	bl	8002670 <HAL_InitTick>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	71fb      	strb	r3, [r7, #7]
 8002a2a:	e001      	b.n	8002a30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a2c:	f7ff fc2e 	bl	800228c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a30:	79fb      	ldrb	r3, [r7, #7]

}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a40:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <HAL_IncTick+0x1c>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_IncTick+0x20>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4413      	add	r3, r2
 8002a4a:	4a03      	ldr	r2, [pc, #12]	@ (8002a58 <HAL_IncTick+0x1c>)
 8002a4c:	6013      	str	r3, [r2, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	200009a4 	.word	0x200009a4
 8002a5c:	2000041c 	.word	0x2000041c

08002a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return uwTick;
 8002a64:	4b03      	ldr	r3, [pc, #12]	@ (8002a74 <HAL_GetTick+0x14>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	200009a4 	.word	0x200009a4

08002a78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	609a      	str	r2, [r3, #8]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3360      	adds	r3, #96	@ 0x60
 8002af2:	461a      	mov	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <LL_ADC_SetOffset+0x44>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b18:	bf00      	nop
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	03fff000 	.word	0x03fff000

08002b28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3360      	adds	r3, #96	@ 0x60
 8002b36:	461a      	mov	r2, r3
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3360      	adds	r3, #96	@ 0x60
 8002b64:	461a      	mov	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3360      	adds	r3, #96	@ 0x60
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002bb4:	bf00      	nop
 8002bb6:	371c      	adds	r7, #28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3360      	adds	r3, #96	@ 0x60
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	615a      	str	r2, [r3, #20]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b087      	sub	sp, #28
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3330      	adds	r3, #48	@ 0x30
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	0a1b      	lsrs	r3, r3, #8
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	4413      	add	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	211f      	movs	r1, #31
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	401a      	ands	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	f003 011f 	and.w	r1, r3, #31
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c8e:	bf00      	nop
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b087      	sub	sp, #28
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	3314      	adds	r3, #20
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	0e5b      	lsrs	r3, r3, #25
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	4413      	add	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	0d1b      	lsrs	r3, r3, #20
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2107      	movs	r1, #7
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	401a      	ands	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	0d1b      	lsrs	r3, r3, #20
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0318 	and.w	r3, r3, #24
 8002d12:	4908      	ldr	r1, [pc, #32]	@ (8002d34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d14:	40d9      	lsrs	r1, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	400b      	ands	r3, r1
 8002d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	0007ffff 	.word	0x0007ffff

08002d38 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 031f 	and.w	r3, r3, #31
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6093      	str	r3, [r2, #8]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d8c:	d101      	bne.n	8002d92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002db0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002db4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ddc:	d101      	bne.n	8002de2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <LL_ADC_IsEnabled+0x18>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_ADC_IsEnabled+0x1a>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e4e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e52:	f043 0204 	orr.w	r2, r3, #4
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d101      	bne.n	8002e7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d101      	bne.n	8002ea4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b089      	sub	sp, #36	@ 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e167      	b.n	800319e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff f9ff 	bl	80022e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff3f 	bl	8002d78 <LL_ADC_IsDeepPowerDownEnabled>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff25 	bl	8002d54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ff5a 	bl	8002dc8 <LL_ADC_IsInternalRegulatorEnabled>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d115      	bne.n	8002f46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff3e 	bl	8002da0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f24:	4ba0      	ldr	r3, [pc, #640]	@ (80031a8 <HAL_ADC_Init+0x2f4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	4aa0      	ldr	r2, [pc, #640]	@ (80031ac <HAL_ADC_Init+0x2f8>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	099b      	lsrs	r3, r3, #6
 8002f32:	3301      	adds	r3, #1
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f38:	e002      	b.n	8002f40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f9      	bne.n	8002f3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ff3c 	bl	8002dc8 <LL_ADC_IsInternalRegulatorEnabled>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10d      	bne.n	8002f72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5a:	f043 0210 	orr.w	r2, r3, #16
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f66:	f043 0201 	orr.w	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff ff75 	bl	8002e66 <LL_ADC_REG_IsConversionOngoing>
 8002f7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 8100 	bne.w	800318c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 80fc 	bne.w	800318c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f9c:	f043 0202 	orr.w	r2, r3, #2
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff35 	bl	8002e18 <LL_ADC_IsEnabled>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d111      	bne.n	8002fd8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fb4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002fb8:	f7ff ff2e 	bl	8002e18 <LL_ADC_IsEnabled>
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	487c      	ldr	r0, [pc, #496]	@ (80031b0 <HAL_ADC_Init+0x2fc>)
 8002fc0:	f7ff ff2a 	bl	8002e18 <LL_ADC_IsEnabled>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4323      	orrs	r3, r4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d105      	bne.n	8002fd8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4878      	ldr	r0, [pc, #480]	@ (80031b4 <HAL_ADC_Init+0x300>)
 8002fd4:	f7ff fd50 	bl	8002a78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7f5b      	ldrb	r3, [r3, #29]
 8002fdc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fe2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002fe8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002fee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ff6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003002:	2b01      	cmp	r3, #1
 8003004:	d106      	bne.n	8003014 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	3b01      	subs	r3, #1
 800300c:	045b      	lsls	r3, r3, #17
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003028:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	4b60      	ldr	r3, [pc, #384]	@ (80031b8 <HAL_ADC_Init+0x304>)
 8003038:	4013      	ands	r3, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	69b9      	ldr	r1, [r7, #24]
 8003040:	430b      	orrs	r3, r1
 8003042:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff ff14 	bl	8002e8c <LL_ADC_INJ_IsConversionOngoing>
 8003064:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d16d      	bne.n	8003148 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d16a      	bne.n	8003148 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003076:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800307e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800308e:	f023 0302 	bic.w	r3, r3, #2
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	69b9      	ldr	r1, [r7, #24]
 8003098:	430b      	orrs	r3, r1
 800309a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d017      	beq.n	80030d4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6911      	ldr	r1, [r2, #16]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	430b      	orrs	r3, r1
 80030ce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80030d2:	e013      	b.n	80030fc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030f8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003102:	2b01      	cmp	r3, #1
 8003104:	d118      	bne.n	8003138 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003110:	f023 0304 	bic.w	r3, r3, #4
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800311c:	4311      	orrs	r1, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003122:	4311      	orrs	r1, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003128:	430a      	orrs	r2, r1
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0201 	orr.w	r2, r2, #1
 8003134:	611a      	str	r2, [r3, #16]
 8003136:	e007      	b.n	8003148 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d10c      	bne.n	800316a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	f023 010f 	bic.w	r1, r3, #15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	1e5a      	subs	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	631a      	str	r2, [r3, #48]	@ 0x30
 8003168:	e007      	b.n	800317a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 020f 	bic.w	r2, r2, #15
 8003178:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317e:	f023 0303 	bic.w	r3, r3, #3
 8003182:	f043 0201 	orr.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	65da      	str	r2, [r3, #92]	@ 0x5c
 800318a:	e007      	b.n	800319c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003190:	f043 0210 	orr.w	r2, r3, #16
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800319c:	7ffb      	ldrb	r3, [r7, #31]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3724      	adds	r7, #36	@ 0x24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd90      	pop	{r4, r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000414 	.word	0x20000414
 80031ac:	053e2d63 	.word	0x053e2d63
 80031b0:	50000100 	.word	0x50000100
 80031b4:	50000300 	.word	0x50000300
 80031b8:	fff04007 	.word	0xfff04007

080031bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031c8:	4851      	ldr	r0, [pc, #324]	@ (8003310 <HAL_ADC_Start_DMA+0x154>)
 80031ca:	f7ff fdb5 	bl	8002d38 <LL_ADC_GetMultimode>
 80031ce:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fe46 	bl	8002e66 <LL_ADC_REG_IsConversionOngoing>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f040 808f 	bne.w	8003300 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_Start_DMA+0x34>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e08a      	b.n	8003306 <HAL_ADC_Start_DMA+0x14a>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2b05      	cmp	r3, #5
 8003202:	d002      	beq.n	800320a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	2b09      	cmp	r3, #9
 8003208:	d173      	bne.n	80032f2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fc8e 	bl	8003b2c <ADC_Enable>
 8003210:	4603      	mov	r3, r0
 8003212:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003214:	7dfb      	ldrb	r3, [r7, #23]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d166      	bne.n	80032e8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a38      	ldr	r2, [pc, #224]	@ (8003314 <HAL_ADC_Start_DMA+0x158>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d002      	beq.n	800323e <HAL_ADC_Start_DMA+0x82>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	e001      	b.n	8003242 <HAL_ADC_Start_DMA+0x86>
 800323e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	4293      	cmp	r3, r2
 8003248:	d002      	beq.n	8003250 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003254:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d006      	beq.n	8003276 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326c:	f023 0206 	bic.w	r2, r3, #6
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	661a      	str	r2, [r3, #96]	@ 0x60
 8003274:	e002      	b.n	800327c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003280:	4a25      	ldr	r2, [pc, #148]	@ (8003318 <HAL_ADC_Start_DMA+0x15c>)
 8003282:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003288:	4a24      	ldr	r2, [pc, #144]	@ (800331c <HAL_ADC_Start_DMA+0x160>)
 800328a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003290:	4a23      	ldr	r2, [pc, #140]	@ (8003320 <HAL_ADC_Start_DMA+0x164>)
 8003292:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	221c      	movs	r2, #28
 800329a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0210 	orr.w	r2, r2, #16
 80032b2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3340      	adds	r3, #64	@ 0x40
 80032ce:	4619      	mov	r1, r3
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f001 fb62 	bl	800499c <HAL_DMA_Start_IT>
 80032d8:	4603      	mov	r3, r0
 80032da:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fdac 	bl	8002e3e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80032e6:	e00d      	b.n	8003304 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80032f0:	e008      	b.n	8003304 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80032fe:	e001      	b.n	8003304 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003300:	2302      	movs	r3, #2
 8003302:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003304:	7dfb      	ldrb	r3, [r7, #23]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	50000300 	.word	0x50000300
 8003314:	50000100 	.word	0x50000100
 8003318:	08003c39 	.word	0x08003c39
 800331c:	08003d11 	.word	0x08003d11
 8003320:	08003d2d 	.word	0x08003d2d

08003324 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b0b6      	sub	sp, #216	@ 0xd8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_ADC_ConfigChannel+0x22>
 800336a:	2302      	movs	r3, #2
 800336c:	e3c8      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x7b4>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fd73 	bl	8002e66 <LL_ADC_REG_IsConversionOngoing>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	f040 83ad 	bne.w	8003ae2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	f7ff fc54 	bl	8002c42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fd61 	bl	8002e66 <LL_ADC_REG_IsConversionOngoing>
 80033a4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fd6d 	bl	8002e8c <LL_ADC_INJ_IsConversionOngoing>
 80033b2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f040 81d9 	bne.w	8003772 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f040 81d4 	bne.w	8003772 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033d2:	d10f      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2200      	movs	r2, #0
 80033de:	4619      	mov	r1, r3
 80033e0:	f7ff fc5b 	bl	8002c9a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fc02 	bl	8002bf6 <LL_ADC_SetSamplingTimeCommonConfig>
 80033f2:	e00e      	b.n	8003412 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	461a      	mov	r2, r3
 8003402:	f7ff fc4a 	bl	8002c9a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fbf2 	bl	8002bf6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	08db      	lsrs	r3, r3, #3
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b04      	cmp	r3, #4
 8003432:	d022      	beq.n	800347a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	6919      	ldr	r1, [r3, #16]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003444:	f7ff fb4c 	bl	8002ae0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6919      	ldr	r1, [r3, #16]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	461a      	mov	r2, r3
 8003456:	f7ff fb98 	bl	8002b8a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003466:	2b01      	cmp	r3, #1
 8003468:	d102      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x124>
 800346a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800346e:	e000      	b.n	8003472 <HAL_ADC_ConfigChannel+0x126>
 8003470:	2300      	movs	r3, #0
 8003472:	461a      	mov	r2, r3
 8003474:	f7ff fba4 	bl	8002bc0 <LL_ADC_SetOffsetSaturation>
 8003478:	e17b      	b.n	8003772 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fb51 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 8003486:	4603      	mov	r3, r0
 8003488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x15a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fb46 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 800349c:	4603      	mov	r3, r0
 800349e:	0e9b      	lsrs	r3, r3, #26
 80034a0:	f003 021f 	and.w	r2, r3, #31
 80034a4:	e01e      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x198>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fb3b 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80034d4:	2320      	movs	r3, #32
 80034d6:	e004      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80034d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d105      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x1b0>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	0e9b      	lsrs	r3, r3, #26
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	e018      	b.n	800352e <HAL_ADC_ConfigChannel+0x1e2>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003518:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003520:	2320      	movs	r3, #32
 8003522:	e004      	b.n	800352e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003524:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800352e:	429a      	cmp	r2, r3
 8003530:	d106      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2200      	movs	r2, #0
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fb0a 	bl	8002b54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff faee 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 800354c:	4603      	mov	r3, r0
 800354e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <HAL_ADC_ConfigChannel+0x220>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2101      	movs	r1, #1
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fae3 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 8003562:	4603      	mov	r3, r0
 8003564:	0e9b      	lsrs	r3, r3, #26
 8003566:	f003 021f 	and.w	r2, r3, #31
 800356a:	e01e      	b.n	80035aa <HAL_ADC_ConfigChannel+0x25e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2101      	movs	r1, #1
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff fad8 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 8003578:	4603      	mov	r3, r0
 800357a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800358a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800358e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800359a:	2320      	movs	r3, #32
 800359c:	e004      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800359e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d105      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x276>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	0e9b      	lsrs	r3, r3, #26
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	e018      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x2a8>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80035d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80035de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80035e6:	2320      	movs	r3, #32
 80035e8:	e004      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80035ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d106      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2101      	movs	r1, #1
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff faa7 	bl	8002b54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2102      	movs	r1, #2
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fa8b 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 8003612:	4603      	mov	r3, r0
 8003614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x2e6>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2102      	movs	r1, #2
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fa80 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 8003628:	4603      	mov	r3, r0
 800362a:	0e9b      	lsrs	r3, r3, #26
 800362c:	f003 021f 	and.w	r2, r3, #31
 8003630:	e01e      	b.n	8003670 <HAL_ADC_ConfigChannel+0x324>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2102      	movs	r1, #2
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff fa75 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 800363e:	4603      	mov	r3, r0
 8003640:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003648:	fa93 f3a3 	rbit	r3, r3
 800364c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003650:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003654:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003658:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003660:	2320      	movs	r3, #32
 8003662:	e004      	b.n	800366e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003664:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003668:	fab3 f383 	clz	r3, r3
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003678:	2b00      	cmp	r3, #0
 800367a:	d105      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x33c>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	0e9b      	lsrs	r3, r3, #26
 8003682:	f003 031f 	and.w	r3, r3, #31
 8003686:	e016      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x36a>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003694:	fa93 f3a3 	rbit	r3, r3
 8003698:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800369a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800369c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80036a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80036a8:	2320      	movs	r3, #32
 80036aa:	e004      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80036ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036b0:	fab3 f383 	clz	r3, r3
 80036b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d106      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	2102      	movs	r1, #2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fa46 	bl	8002b54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2103      	movs	r1, #3
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fa2a 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x3a8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2103      	movs	r1, #3
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fa1f 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 80036ea:	4603      	mov	r3, r0
 80036ec:	0e9b      	lsrs	r3, r3, #26
 80036ee:	f003 021f 	and.w	r2, r3, #31
 80036f2:	e017      	b.n	8003724 <HAL_ADC_ConfigChannel+0x3d8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2103      	movs	r1, #3
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fa14 	bl	8002b28 <LL_ADC_GetOffsetChannel>
 8003700:	4603      	mov	r3, r0
 8003702:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800370c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800370e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003710:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003716:	2320      	movs	r3, #32
 8003718:	e003      	b.n	8003722 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800371a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800371c:	fab3 f383 	clz	r3, r3
 8003720:	b2db      	uxtb	r3, r3
 8003722:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372c:	2b00      	cmp	r3, #0
 800372e:	d105      	bne.n	800373c <HAL_ADC_ConfigChannel+0x3f0>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	0e9b      	lsrs	r3, r3, #26
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	e011      	b.n	8003760 <HAL_ADC_ConfigChannel+0x414>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800374a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800374c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800374e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003754:	2320      	movs	r3, #32
 8003756:	e003      	b.n	8003760 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003760:	429a      	cmp	r2, r3
 8003762:	d106      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2200      	movs	r2, #0
 800376a:	2103      	movs	r1, #3
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff f9f1 	bl	8002b54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fb4e 	bl	8002e18 <LL_ADC_IsEnabled>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	f040 8140 	bne.w	8003a04 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	461a      	mov	r2, r3
 8003792:	f7ff faad 	bl	8002cf0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	4a8f      	ldr	r2, [pc, #572]	@ (80039d8 <HAL_ADC_ConfigChannel+0x68c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	f040 8131 	bne.w	8003a04 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10b      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x47e>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	0e9b      	lsrs	r3, r3, #26
 80037b8:	3301      	adds	r3, #1
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	2b09      	cmp	r3, #9
 80037c0:	bf94      	ite	ls
 80037c2:	2301      	movls	r3, #1
 80037c4:	2300      	movhi	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	e019      	b.n	80037fe <HAL_ADC_ConfigChannel+0x4b2>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80037d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037da:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80037dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80037e2:	2320      	movs	r3, #32
 80037e4:	e003      	b.n	80037ee <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80037e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037e8:	fab3 f383 	clz	r3, r3
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	2b09      	cmp	r3, #9
 80037f6:	bf94      	ite	ls
 80037f8:	2301      	movls	r3, #1
 80037fa:	2300      	movhi	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d079      	beq.n	80038f6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800380a:	2b00      	cmp	r3, #0
 800380c:	d107      	bne.n	800381e <HAL_ADC_ConfigChannel+0x4d2>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	0e9b      	lsrs	r3, r3, #26
 8003814:	3301      	adds	r3, #1
 8003816:	069b      	lsls	r3, r3, #26
 8003818:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800381c:	e015      	b.n	800384a <HAL_ADC_ConfigChannel+0x4fe>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800382c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800382e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003836:	2320      	movs	r3, #32
 8003838:	e003      	b.n	8003842 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800383a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383c:	fab3 f383 	clz	r3, r3
 8003840:	b2db      	uxtb	r3, r3
 8003842:	3301      	adds	r3, #1
 8003844:	069b      	lsls	r3, r3, #26
 8003846:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_ADC_ConfigChannel+0x51e>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	0e9b      	lsrs	r3, r3, #26
 800385c:	3301      	adds	r3, #1
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	2101      	movs	r1, #1
 8003864:	fa01 f303 	lsl.w	r3, r1, r3
 8003868:	e017      	b.n	800389a <HAL_ADC_ConfigChannel+0x54e>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800387a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800387c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003882:	2320      	movs	r3, #32
 8003884:	e003      	b.n	800388e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003888:	fab3 f383 	clz	r3, r3
 800388c:	b2db      	uxtb	r3, r3
 800388e:	3301      	adds	r3, #1
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	ea42 0103 	orr.w	r1, r2, r3
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x574>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	0e9b      	lsrs	r3, r3, #26
 80038b0:	3301      	adds	r3, #1
 80038b2:	f003 021f 	and.w	r2, r3, #31
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	051b      	lsls	r3, r3, #20
 80038be:	e018      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x5a6>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80038ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80038d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80038d8:	2320      	movs	r3, #32
 80038da:	e003      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80038dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	f003 021f 	and.w	r2, r3, #31
 80038ea:	4613      	mov	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4413      	add	r3, r2
 80038f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f2:	430b      	orrs	r3, r1
 80038f4:	e081      	b.n	80039fa <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d107      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x5c6>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	0e9b      	lsrs	r3, r3, #26
 8003908:	3301      	adds	r3, #1
 800390a:	069b      	lsls	r3, r3, #26
 800390c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003910:	e015      	b.n	800393e <HAL_ADC_ConfigChannel+0x5f2>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003922:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800392a:	2320      	movs	r3, #32
 800392c:	e003      	b.n	8003936 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800392e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	3301      	adds	r3, #1
 8003938:	069b      	lsls	r3, r3, #26
 800393a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <HAL_ADC_ConfigChannel+0x612>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	0e9b      	lsrs	r3, r3, #26
 8003950:	3301      	adds	r3, #1
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f303 	lsl.w	r3, r1, r3
 800395c:	e017      	b.n	800398e <HAL_ADC_ConfigChannel+0x642>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	61fb      	str	r3, [r7, #28]
  return result;
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003976:	2320      	movs	r3, #32
 8003978:	e003      	b.n	8003982 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	fab3 f383 	clz	r3, r3
 8003980:	b2db      	uxtb	r3, r3
 8003982:	3301      	adds	r3, #1
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	2101      	movs	r1, #1
 800398a:	fa01 f303 	lsl.w	r3, r1, r3
 800398e:	ea42 0103 	orr.w	r1, r2, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10d      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x66e>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	0e9b      	lsrs	r3, r3, #26
 80039a4:	3301      	adds	r3, #1
 80039a6:	f003 021f 	and.w	r2, r3, #31
 80039aa:	4613      	mov	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	4413      	add	r3, r2
 80039b0:	3b1e      	subs	r3, #30
 80039b2:	051b      	lsls	r3, r3, #20
 80039b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039b8:	e01e      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x6ac>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	613b      	str	r3, [r7, #16]
  return result;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d104      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80039d2:	2320      	movs	r3, #32
 80039d4:	e006      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x698>
 80039d6:	bf00      	nop
 80039d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	3301      	adds	r3, #1
 80039e6:	f003 021f 	and.w	r2, r3, #31
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	3b1e      	subs	r3, #30
 80039f2:	051b      	lsls	r3, r3, #20
 80039f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039fe:	4619      	mov	r1, r3
 8003a00:	f7ff f94b 	bl	8002c9a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b3f      	ldr	r3, [pc, #252]	@ (8003b08 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d071      	beq.n	8003af4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a10:	483e      	ldr	r0, [pc, #248]	@ (8003b0c <HAL_ADC_ConfigChannel+0x7c0>)
 8003a12:	f7ff f857 	bl	8002ac4 <LL_ADC_GetCommonPathInternalCh>
 8003a16:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a3c      	ldr	r2, [pc, #240]	@ (8003b10 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x6e2>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a3a      	ldr	r2, [pc, #232]	@ (8003b14 <HAL_ADC_ConfigChannel+0x7c8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d127      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d121      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a42:	d157      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	482f      	ldr	r0, [pc, #188]	@ (8003b0c <HAL_ADC_ConfigChannel+0x7c0>)
 8003a50:	f7ff f825 	bl	8002a9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a54:	4b30      	ldr	r3, [pc, #192]	@ (8003b18 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	099b      	lsrs	r3, r3, #6
 8003a5a:	4a30      	ldr	r2, [pc, #192]	@ (8003b1c <HAL_ADC_ConfigChannel+0x7d0>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	099b      	lsrs	r3, r3, #6
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	4613      	mov	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a6e:	e002      	b.n	8003a76 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f9      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a7c:	e03a      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a27      	ldr	r2, [pc, #156]	@ (8003b20 <HAL_ADC_ConfigChannel+0x7d4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d113      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10d      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a22      	ldr	r2, [pc, #136]	@ (8003b24 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d02a      	beq.n	8003af4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4818      	ldr	r0, [pc, #96]	@ (8003b0c <HAL_ADC_ConfigChannel+0x7c0>)
 8003aaa:	f7fe fff8 	bl	8002a9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aae:	e021      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b28 <HAL_ADC_ConfigChannel+0x7dc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d11c      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003aba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d116      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a16      	ldr	r2, [pc, #88]	@ (8003b24 <HAL_ADC_ConfigChannel+0x7d8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d011      	beq.n	8003af4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ad0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ad4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ad8:	4619      	mov	r1, r3
 8003ada:	480c      	ldr	r0, [pc, #48]	@ (8003b0c <HAL_ADC_ConfigChannel+0x7c0>)
 8003adc:	f7fe ffdf 	bl	8002a9e <LL_ADC_SetCommonPathInternalCh>
 8003ae0:	e008      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae6:	f043 0220 	orr.w	r2, r3, #32
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003afc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	37d8      	adds	r7, #216	@ 0xd8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	80080000 	.word	0x80080000
 8003b0c:	50000300 	.word	0x50000300
 8003b10:	c3210000 	.word	0xc3210000
 8003b14:	90c00010 	.word	0x90c00010
 8003b18:	20000414 	.word	0x20000414
 8003b1c:	053e2d63 	.word	0x053e2d63
 8003b20:	c7520000 	.word	0xc7520000
 8003b24:	50000100 	.word	0x50000100
 8003b28:	cb840000 	.word	0xcb840000

08003b2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff f96b 	bl	8002e18 <LL_ADC_IsEnabled>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d169      	bne.n	8003c1c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	4b36      	ldr	r3, [pc, #216]	@ (8003c28 <ADC_Enable+0xfc>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00d      	beq.n	8003b72 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5a:	f043 0210 	orr.w	r2, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b66:	f043 0201 	orr.w	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e055      	b.n	8003c1e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff f93a 	bl	8002df0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b7c:	482b      	ldr	r0, [pc, #172]	@ (8003c2c <ADC_Enable+0x100>)
 8003b7e:	f7fe ffa1 	bl	8002ac4 <LL_ADC_GetCommonPathInternalCh>
 8003b82:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d013      	beq.n	8003bb4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b8c:	4b28      	ldr	r3, [pc, #160]	@ (8003c30 <ADC_Enable+0x104>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	099b      	lsrs	r3, r3, #6
 8003b92:	4a28      	ldr	r2, [pc, #160]	@ (8003c34 <ADC_Enable+0x108>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	099b      	lsrs	r3, r3, #6
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ba6:	e002      	b.n	8003bae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f9      	bne.n	8003ba8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bb4:	f7fe ff54 	bl	8002a60 <HAL_GetTick>
 8003bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bba:	e028      	b.n	8003c0e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff f929 	bl	8002e18 <LL_ADC_IsEnabled>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff f90d 	bl	8002df0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bd6:	f7fe ff43 	bl	8002a60 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d914      	bls.n	8003c0e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d00d      	beq.n	8003c0e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf6:	f043 0210 	orr.w	r2, r3, #16
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c02:	f043 0201 	orr.w	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e007      	b.n	8003c1e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d1cf      	bne.n	8003bbc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	8000003f 	.word	0x8000003f
 8003c2c:	50000300 	.word	0x50000300
 8003c30:	20000414 	.word	0x20000414
 8003c34:	053e2d63 	.word	0x053e2d63

08003c38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d14b      	bne.n	8003cea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d021      	beq.n	8003cb0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe ffd3 	bl	8002c1c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d032      	beq.n	8003ce2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d12b      	bne.n	8003ce2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d11f      	bne.n	8003ce2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca6:	f043 0201 	orr.w	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cae:	e018      	b.n	8003ce2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d111      	bne.n	8003ce2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d105      	bne.n	8003ce2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7fd fd04 	bl	80016f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ce8:	e00e      	b.n	8003d08 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f7ff fb1e 	bl	8003338 <HAL_ADC_ErrorCallback>
}
 8003cfc:	e004      	b.n	8003d08 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	4798      	blx	r3
}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7ff fb00 	bl	8003324 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d4a:	f043 0204 	orr.w	r2, r3, #4
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff faf0 	bl	8003338 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <LL_ADC_IsEnabled>:
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <LL_ADC_IsEnabled+0x18>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <LL_ADC_IsEnabled+0x1a>
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d101      	bne.n	8003d9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b0a1      	sub	sp, #132	@ 0x84
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e08b      	b.n	8003ee2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003de2:	d102      	bne.n	8003dea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003de4:	4b41      	ldr	r3, [pc, #260]	@ (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	e001      	b.n	8003dee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10b      	bne.n	8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df8:	f043 0220 	orr.w	r2, r3, #32
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e06a      	b.n	8003ee2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff ffb9 	bl	8003d86 <LL_ADC_REG_IsConversionOngoing>
 8003e14:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff ffb3 	bl	8003d86 <LL_ADC_REG_IsConversionOngoing>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d14c      	bne.n	8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003e26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d149      	bne.n	8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e2c:	4b30      	ldr	r3, [pc, #192]	@ (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003e2e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d028      	beq.n	8003e8a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e4a:	035b      	lsls	r3, r3, #13
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e54:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e58:	f7ff ff82 	bl	8003d60 <LL_ADC_IsEnabled>
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	4823      	ldr	r0, [pc, #140]	@ (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003e60:	f7ff ff7e 	bl	8003d60 <LL_ADC_IsEnabled>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4323      	orrs	r3, r4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d133      	bne.n	8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e74:	f023 030f 	bic.w	r3, r3, #15
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	6811      	ldr	r1, [r2, #0]
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	6892      	ldr	r2, [r2, #8]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	431a      	orrs	r2, r3
 8003e84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e86:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e88:	e024      	b.n	8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e94:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e96:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003e9a:	f7ff ff61 	bl	8003d60 <LL_ADC_IsEnabled>
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	4812      	ldr	r0, [pc, #72]	@ (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ea2:	f7ff ff5d 	bl	8003d60 <LL_ADC_IsEnabled>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4323      	orrs	r3, r4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d112      	bne.n	8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003eb6:	f023 030f 	bic.w	r3, r3, #15
 8003eba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003ebc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ebe:	e009      	b.n	8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003ed2:	e000      	b.n	8003ed6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ed4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ede:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3784      	adds	r7, #132	@ 0x84
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd90      	pop	{r4, r7, pc}
 8003eea:	bf00      	nop
 8003eec:	50000100 	.word	0x50000100
 8003ef0:	50000300 	.word	0x50000300

08003ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f04:	4b0c      	ldr	r3, [pc, #48]	@ (8003f38 <__NVIC_SetPriorityGrouping+0x44>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f10:	4013      	ands	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f26:	4a04      	ldr	r2, [pc, #16]	@ (8003f38 <__NVIC_SetPriorityGrouping+0x44>)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	60d3      	str	r3, [r2, #12]
}
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f40:	4b04      	ldr	r3, [pc, #16]	@ (8003f54 <__NVIC_GetPriorityGrouping+0x18>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	0a1b      	lsrs	r3, r3, #8
 8003f46:	f003 0307 	and.w	r3, r3, #7
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	e000ed00 	.word	0xe000ed00

08003f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	db0b      	blt.n	8003f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	f003 021f 	and.w	r2, r3, #31
 8003f70:	4907      	ldr	r1, [pc, #28]	@ (8003f90 <__NVIC_EnableIRQ+0x38>)
 8003f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	2001      	movs	r0, #1
 8003f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	e000e100 	.word	0xe000e100

08003f94 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	db12      	blt.n	8003fcc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	f003 021f 	and.w	r2, r3, #31
 8003fac:	490a      	ldr	r1, [pc, #40]	@ (8003fd8 <__NVIC_DisableIRQ+0x44>)
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fba:	3320      	adds	r3, #32
 8003fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fc0:	f3bf 8f4f 	dsb	sy
}
 8003fc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fc6:	f3bf 8f6f 	isb	sy
}
 8003fca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	e000e100 	.word	0xe000e100

08003fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	6039      	str	r1, [r7, #0]
 8003fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	db0a      	blt.n	8004006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	490c      	ldr	r1, [pc, #48]	@ (8004028 <__NVIC_SetPriority+0x4c>)
 8003ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffa:	0112      	lsls	r2, r2, #4
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	440b      	add	r3, r1
 8004000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004004:	e00a      	b.n	800401c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	b2da      	uxtb	r2, r3
 800400a:	4908      	ldr	r1, [pc, #32]	@ (800402c <__NVIC_SetPriority+0x50>)
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	3b04      	subs	r3, #4
 8004014:	0112      	lsls	r2, r2, #4
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	440b      	add	r3, r1
 800401a:	761a      	strb	r2, [r3, #24]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	e000e100 	.word	0xe000e100
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004030:	b480      	push	{r7}
 8004032:	b089      	sub	sp, #36	@ 0x24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f1c3 0307 	rsb	r3, r3, #7
 800404a:	2b04      	cmp	r3, #4
 800404c:	bf28      	it	cs
 800404e:	2304      	movcs	r3, #4
 8004050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3304      	adds	r3, #4
 8004056:	2b06      	cmp	r3, #6
 8004058:	d902      	bls.n	8004060 <NVIC_EncodePriority+0x30>
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3b03      	subs	r3, #3
 800405e:	e000      	b.n	8004062 <NVIC_EncodePriority+0x32>
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004064:	f04f 32ff 	mov.w	r2, #4294967295
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43da      	mvns	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	401a      	ands	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004078:	f04f 31ff 	mov.w	r1, #4294967295
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	43d9      	mvns	r1, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004088:	4313      	orrs	r3, r2
         );
}
 800408a:	4618      	mov	r0, r3
 800408c:	3724      	adds	r7, #36	@ 0x24
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff ff28 	bl	8003ef4 <__NVIC_SetPriorityGrouping>
}
 80040a4:	bf00      	nop
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040ba:	f7ff ff3f 	bl	8003f3c <__NVIC_GetPriorityGrouping>
 80040be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	6978      	ldr	r0, [r7, #20]
 80040c6:	f7ff ffb3 	bl	8004030 <NVIC_EncodePriority>
 80040ca:	4602      	mov	r2, r0
 80040cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff ff82 	bl	8003fdc <__NVIC_SetPriority>
}
 80040d8:	bf00      	nop
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff ff32 	bl	8003f58 <__NVIC_EnableIRQ>
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff ff42 	bl	8003f94 <__NVIC_DisableIRQ>
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e014      	b.n	8004154 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	791b      	ldrb	r3, [r3, #4]
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fe f952 	bl	80023e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e0b2      	b.n	80042da <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	795b      	ldrb	r3, [r3, #5]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_DAC_Start_DMA+0x24>
 800417c:	2302      	movs	r3, #2
 800417e:	e0ac      	b.n	80042da <HAL_DAC_Start_DMA+0x17e>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2202      	movs	r2, #2
 800418a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d129      	bne.n	80041e6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	4a53      	ldr	r2, [pc, #332]	@ (80042e4 <HAL_DAC_Start_DMA+0x188>)
 8004198:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	4a52      	ldr	r2, [pc, #328]	@ (80042e8 <HAL_DAC_Start_DMA+0x18c>)
 80041a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	4a51      	ldr	r2, [pc, #324]	@ (80042ec <HAL_DAC_Start_DMA+0x190>)
 80041a8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041b8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80041ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_DAC_Start_DMA+0x6c>
 80041c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d005      	beq.n	80041d2 <HAL_DAC_Start_DMA+0x76>
 80041c6:	e009      	b.n	80041dc <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3308      	adds	r3, #8
 80041ce:	61bb      	str	r3, [r7, #24]
        break;
 80041d0:	e033      	b.n	800423a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	330c      	adds	r3, #12
 80041d8:	61bb      	str	r3, [r7, #24]
        break;
 80041da:	e02e      	b.n	800423a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3310      	adds	r3, #16
 80041e2:	61bb      	str	r3, [r7, #24]
        break;
 80041e4:	e029      	b.n	800423a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	4a41      	ldr	r2, [pc, #260]	@ (80042f0 <HAL_DAC_Start_DMA+0x194>)
 80041ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	4a40      	ldr	r2, [pc, #256]	@ (80042f4 <HAL_DAC_Start_DMA+0x198>)
 80041f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	4a3f      	ldr	r2, [pc, #252]	@ (80042f8 <HAL_DAC_Start_DMA+0x19c>)
 80041fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800420c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800420e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_DAC_Start_DMA+0xc0>
 8004214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004216:	2b04      	cmp	r3, #4
 8004218:	d005      	beq.n	8004226 <HAL_DAC_Start_DMA+0xca>
 800421a:	e009      	b.n	8004230 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3314      	adds	r3, #20
 8004222:	61bb      	str	r3, [r7, #24]
        break;
 8004224:	e009      	b.n	800423a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3318      	adds	r3, #24
 800422c:	61bb      	str	r3, [r7, #24]
        break;
 800422e:	e004      	b.n	800423a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	331c      	adds	r3, #28
 8004236:	61bb      	str	r3, [r7, #24]
        break;
 8004238:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d111      	bne.n	8004264 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800424e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6898      	ldr	r0, [r3, #8]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	f000 fb9f 	bl	800499c <HAL_DMA_Start_IT>
 800425e:	4603      	mov	r3, r0
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e010      	b.n	8004286 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004272:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	68d8      	ldr	r0, [r3, #12]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	f000 fb8d 	bl	800499c <HAL_DMA_Start_IT>
 8004282:	4603      	mov	r3, r0
 8004284:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800428c:	7ffb      	ldrb	r3, [r7, #31]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d11c      	bne.n	80042cc <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6819      	ldr	r1, [r3, #0]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2201      	movs	r2, #1
 80042a0:	409a      	lsls	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042aa:	4b14      	ldr	r3, [pc, #80]	@ (80042fc <HAL_DAC_Start_DMA+0x1a0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	4a13      	ldr	r2, [pc, #76]	@ (8004300 <HAL_DAC_Start_DMA+0x1a4>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	3301      	adds	r3, #1
 80042ba:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80042bc:	e002      	b.n	80042c4 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f9      	bne.n	80042be <HAL_DAC_Start_DMA+0x162>
 80042ca:	e005      	b.n	80042d8 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f043 0204 	orr.w	r2, r3, #4
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80042d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	08004739 	.word	0x08004739
 80042e8:	0800475b 	.word	0x0800475b
 80042ec:	08004777 	.word	0x08004777
 80042f0:	080047e1 	.word	0x080047e1
 80042f4:	08004803 	.word	0x08004803
 80042f8:	0800481f 	.word	0x0800481f
 80042fc:	20000414 	.word	0x20000414
 8004300:	053e2d63 	.word	0x053e2d63

08004304 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e03e      	b.n	8004396 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6819      	ldr	r1, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43da      	mvns	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	400a      	ands	r2, r1
 8004334:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6819      	ldr	r1, [r3, #0]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2201      	movs	r2, #1
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43da      	mvns	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	400a      	ands	r2, r1
 8004350:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10d      	bne.n	8004374 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fb98 	bl	8004a92 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	e00c      	b.n	800438e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fb8a 	bl	8004a92 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800438c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	@ 0x28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_DAC_ConfigChannel+0x1c>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e19e      	b.n	8004726 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	795b      	ldrb	r3, [r3, #5]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_DAC_ConfigChannel+0x2c>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e198      	b.n	8004726 <HAL_DAC_ConfigChannel+0x35e>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2201      	movs	r2, #1
 80043f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2202      	movs	r2, #2
 80043fe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b04      	cmp	r3, #4
 8004406:	d17a      	bne.n	80044fe <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004408:	f7fe fb2a 	bl	8002a60 <HAL_GetTick>
 800440c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d13d      	bne.n	8004490 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004414:	e018      	b.n	8004448 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004416:	f7fe fb23 	bl	8002a60 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	d911      	bls.n	8004448 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800442a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f043 0208 	orr.w	r2, r3, #8
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2203      	movs	r2, #3
 8004442:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e16e      	b.n	8004726 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1df      	bne.n	8004416 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800445e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004460:	e020      	b.n	80044a4 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004462:	f7fe fafd 	bl	8002a60 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b01      	cmp	r3, #1
 800446e:	d90f      	bls.n	8004490 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004476:	2b00      	cmp	r3, #0
 8004478:	da0a      	bge.n	8004490 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f043 0208 	orr.w	r2, r3, #8
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2203      	movs	r2, #3
 800448a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e14a      	b.n	8004726 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004496:	2b00      	cmp	r3, #0
 8004498:	dbe3      	blt.n	8004462 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	ea02 0103 	and.w	r1, r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	409a      	lsls	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	21ff      	movs	r1, #255	@ 0xff
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	ea02 0103 	and.w	r1, r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	409a      	lsls	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d11d      	bne.n	8004542 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	221f      	movs	r2, #31
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800451e:	4013      	ands	r3, r2
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004536:	4313      	orrs	r3, r2
 8004538:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004540:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004548:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2207      	movs	r2, #7
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43db      	mvns	r3, r3
 8004558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800455a:	4013      	ands	r3, r2
 800455c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d102      	bne.n	800456c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8004566:	2300      	movs	r3, #0
 8004568:	623b      	str	r3, [r7, #32]
 800456a:	e00f      	b.n	800458c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d102      	bne.n	800457a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004574:	2301      	movs	r3, #1
 8004576:	623b      	str	r3, [r7, #32]
 8004578:	e008      	b.n	800458c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004582:	2301      	movs	r3, #1
 8004584:	623b      	str	r3, [r7, #32]
 8004586:	e001      	b.n	800458c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004588:	2300      	movs	r3, #0
 800458a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	6a3a      	ldr	r2, [r7, #32]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ae:	4013      	ands	r3, r2
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	791b      	ldrb	r3, [r3, #4]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d102      	bne.n	80045c0 <HAL_DAC_ConfigChannel+0x1f8>
 80045ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045be:	e000      	b.n	80045c2 <HAL_DAC_ConfigChannel+0x1fa>
 80045c0:	2300      	movs	r3, #0
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045da:	4013      	ands	r3, r2
 80045dc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	795b      	ldrb	r3, [r3, #5]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d102      	bne.n	80045ec <HAL_DAC_ConfigChannel+0x224>
 80045e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045ea:	e000      	b.n	80045ee <HAL_DAC_ConfigChannel+0x226>
 80045ec:	2300      	movs	r3, #0
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d114      	bne.n	800462e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004604:	f001 fb6a 	bl	8005cdc <HAL_RCC_GetHCLKFreq>
 8004608:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4a48      	ldr	r2, [pc, #288]	@ (8004730 <HAL_DAC_ConfigChannel+0x368>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d904      	bls.n	800461c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004618:	627b      	str	r3, [r7, #36]	@ 0x24
 800461a:	e00f      	b.n	800463c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4a45      	ldr	r2, [pc, #276]	@ (8004734 <HAL_DAC_ConfigChannel+0x36c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d90a      	bls.n	800463a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800462a:	627b      	str	r3, [r7, #36]	@ 0x24
 800462c:	e006      	b.n	800463c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004634:	4313      	orrs	r3, r2
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
 8004638:	e000      	b.n	800463c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800463a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464a:	4313      	orrs	r3, r2
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004654:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6819      	ldr	r1, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43da      	mvns	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	400a      	ands	r2, r1
 8004672:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800468e:	4013      	ands	r3, r2
 8004690:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a6:	4313      	orrs	r3, r2
 80046a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6819      	ldr	r1, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	22c0      	movs	r2, #192	@ 0xc0
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43da      	mvns	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	400a      	ands	r2, r1
 80046cc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	089b      	lsrs	r3, r3, #2
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80046fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	ea02 0103 	and.w	r1, r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	409a      	lsls	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004724:	7ffb      	ldrb	r3, [r7, #31]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3728      	adds	r7, #40	@ 0x28
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	09896800 	.word	0x09896800
 8004734:	04c4b400 	.word	0x04c4b400

08004738 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004744:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7fc fff4 	bl	8001734 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	711a      	strb	r2, [r3, #4]
}
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004766:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff fe18 	bl	800439e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f043 0204 	orr.w	r2, r3, #4
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7ff fe0e 	bl	80043b2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	711a      	strb	r2, [r3, #4]
}
 800479c:	bf00      	nop
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f7ff ffd8 	bl	80047a4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	711a      	strb	r2, [r3, #4]
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f7ff ffd1 	bl	80047b8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004816:	bf00      	nop
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b084      	sub	sp, #16
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f043 0204 	orr.w	r2, r3, #4
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff ffc7 	bl	80047cc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	711a      	strb	r2, [r3, #4]
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e08d      	b.n	800497a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	4b47      	ldr	r3, [pc, #284]	@ (8004984 <HAL_DMA_Init+0x138>)
 8004866:	429a      	cmp	r2, r3
 8004868:	d80f      	bhi.n	800488a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	4b45      	ldr	r3, [pc, #276]	@ (8004988 <HAL_DMA_Init+0x13c>)
 8004872:	4413      	add	r3, r2
 8004874:	4a45      	ldr	r2, [pc, #276]	@ (800498c <HAL_DMA_Init+0x140>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	091b      	lsrs	r3, r3, #4
 800487c:	009a      	lsls	r2, r3, #2
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a42      	ldr	r2, [pc, #264]	@ (8004990 <HAL_DMA_Init+0x144>)
 8004886:	641a      	str	r2, [r3, #64]	@ 0x40
 8004888:	e00e      	b.n	80048a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	4b40      	ldr	r3, [pc, #256]	@ (8004994 <HAL_DMA_Init+0x148>)
 8004892:	4413      	add	r3, r2
 8004894:	4a3d      	ldr	r2, [pc, #244]	@ (800498c <HAL_DMA_Init+0x140>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	009a      	lsls	r2, r3, #2
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004998 <HAL_DMA_Init+0x14c>)
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80048be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80048cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa76 	bl	8004dec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004908:	d102      	bne.n	8004910 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004924:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d010      	beq.n	8004950 <HAL_DMA_Init+0x104>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b04      	cmp	r3, #4
 8004934:	d80c      	bhi.n	8004950 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa96 	bl	8004e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	e008      	b.n	8004962 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40020407 	.word	0x40020407
 8004988:	bffdfff8 	.word	0xbffdfff8
 800498c:	cccccccd 	.word	0xcccccccd
 8004990:	40020000 	.word	0x40020000
 8004994:	bffdfbf8 	.word	0xbffdfbf8
 8004998:	40020400 	.word	0x40020400

0800499c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_DMA_Start_IT+0x20>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e066      	b.n	8004a8a <HAL_DMA_Start_IT+0xee>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d155      	bne.n	8004a7c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0201 	bic.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f9bb 	bl	8004d70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d008      	beq.n	8004a14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 020e 	orr.w	r2, r2, #14
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e00f      	b.n	8004a34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0204 	bic.w	r2, r2, #4
 8004a22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 020a 	orr.w	r2, r2, #10
 8004a32:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a50:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a68:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0201 	orr.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	e005      	b.n	8004a88 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a84:	2302      	movs	r3, #2
 8004a86:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d005      	beq.n	8004ab6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2204      	movs	r2, #4
 8004aae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
 8004ab4:	e037      	b.n	8004b26 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 020e 	bic.w	r2, r2, #14
 8004ac4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ad4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0201 	bic.w	r2, r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aea:	f003 021f 	and.w	r2, r3, #31
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	2101      	movs	r1, #1
 8004af4:	fa01 f202 	lsl.w	r2, r1, r2
 8004af8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b02:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00c      	beq.n	8004b26 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b1a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b24:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d00d      	beq.n	8004b78 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2204      	movs	r2, #4
 8004b60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
 8004b76:	e047      	b.n	8004c08 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 020e 	bic.w	r2, r2, #14
 8004b86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0201 	bic.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ba2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ba6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bac:	f003 021f 	and.w	r2, r3, #31
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bc4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00c      	beq.n	8004be8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bdc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004be6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4798      	blx	r3
    }
  }
  return status;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	2204      	movs	r2, #4
 8004c34:	409a      	lsls	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d026      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x7a>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d021      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d107      	bne.n	8004c66 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0204 	bic.w	r2, r2, #4
 8004c64:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6a:	f003 021f 	and.w	r2, r3, #31
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c72:	2104      	movs	r1, #4
 8004c74:	fa01 f202 	lsl.w	r2, r1, r2
 8004c78:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d071      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004c8a:	e06c      	b.n	8004d66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c90:	f003 031f 	and.w	r3, r3, #31
 8004c94:	2202      	movs	r2, #2
 8004c96:	409a      	lsls	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d02e      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d029      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 020a 	bic.w	r2, r2, #10
 8004cc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd4:	f003 021f 	and.w	r2, r3, #31
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cdc:	2102      	movs	r1, #2
 8004cde:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d038      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004cfc:	e033      	b.n	8004d66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d02:	f003 031f 	and.w	r3, r3, #31
 8004d06:	2208      	movs	r2, #8
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d02a      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d025      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 020e 	bic.w	r2, r2, #14
 8004d2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d30:	f003 021f 	and.w	r2, r3, #31
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d38:	2101      	movs	r1, #1
 8004d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d004      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
}
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d86:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d004      	beq.n	8004d9a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d98:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9e:	f003 021f 	and.w	r2, r3, #31
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	2101      	movs	r1, #1
 8004da8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d108      	bne.n	8004dd0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004dce:	e007      	b.n	8004de0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	60da      	str	r2, [r3, #12]
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4b16      	ldr	r3, [pc, #88]	@ (8004e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d802      	bhi.n	8004e06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004e00:	4b15      	ldr	r3, [pc, #84]	@ (8004e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	e001      	b.n	8004e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004e06:	4b15      	ldr	r3, [pc, #84]	@ (8004e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004e08:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	3b08      	subs	r3, #8
 8004e16:	4a12      	ldr	r2, [pc, #72]	@ (8004e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004e18:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e24:	089b      	lsrs	r3, r3, #2
 8004e26:	009a      	lsls	r2, r3, #2
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a0b      	ldr	r2, [pc, #44]	@ (8004e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004e36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f003 031f 	and.w	r3, r3, #31
 8004e3e:	2201      	movs	r2, #1
 8004e40:	409a      	lsls	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40020407 	.word	0x40020407
 8004e58:	40020800 	.word	0x40020800
 8004e5c:	40020820 	.word	0x40020820
 8004e60:	cccccccd 	.word	0xcccccccd
 8004e64:	40020880 	.word	0x40020880

08004e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	461a      	mov	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a08      	ldr	r2, [pc, #32]	@ (8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004e8a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	2201      	movs	r2, #1
 8004e96:	409a      	lsls	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004e9c:	bf00      	nop
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	1000823f 	.word	0x1000823f
 8004eac:	40020940 	.word	0x40020940

08004eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ebe:	e15a      	b.n	8005176 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 814c 	beq.w	8005170 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d005      	beq.n	8004ef0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d130      	bne.n	8004f52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	2203      	movs	r2, #3
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	43db      	mvns	r3, r3
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4013      	ands	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f26:	2201      	movs	r2, #1
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4013      	ands	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	091b      	lsrs	r3, r3, #4
 8004f3c:	f003 0201 	and.w	r2, r3, #1
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	fa02 f303 	lsl.w	r3, r2, r3
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d017      	beq.n	8004f8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	2203      	movs	r2, #3
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4013      	ands	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d123      	bne.n	8004fe2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	08da      	lsrs	r2, r3, #3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3208      	adds	r2, #8
 8004fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	220f      	movs	r2, #15
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	08da      	lsrs	r2, r3, #3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3208      	adds	r2, #8
 8004fdc:	6939      	ldr	r1, [r7, #16]
 8004fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	2203      	movs	r2, #3
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f003 0203 	and.w	r2, r3, #3
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 80a6 	beq.w	8005170 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005024:	4b5b      	ldr	r3, [pc, #364]	@ (8005194 <HAL_GPIO_Init+0x2e4>)
 8005026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005028:	4a5a      	ldr	r2, [pc, #360]	@ (8005194 <HAL_GPIO_Init+0x2e4>)
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005030:	4b58      	ldr	r3, [pc, #352]	@ (8005194 <HAL_GPIO_Init+0x2e4>)
 8005032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800503c:	4a56      	ldr	r2, [pc, #344]	@ (8005198 <HAL_GPIO_Init+0x2e8>)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	089b      	lsrs	r3, r3, #2
 8005042:	3302      	adds	r3, #2
 8005044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005048:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	220f      	movs	r2, #15
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	43db      	mvns	r3, r3
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4013      	ands	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005066:	d01f      	beq.n	80050a8 <HAL_GPIO_Init+0x1f8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a4c      	ldr	r2, [pc, #304]	@ (800519c <HAL_GPIO_Init+0x2ec>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d019      	beq.n	80050a4 <HAL_GPIO_Init+0x1f4>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a4b      	ldr	r2, [pc, #300]	@ (80051a0 <HAL_GPIO_Init+0x2f0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <HAL_GPIO_Init+0x1f0>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a4a      	ldr	r2, [pc, #296]	@ (80051a4 <HAL_GPIO_Init+0x2f4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00d      	beq.n	800509c <HAL_GPIO_Init+0x1ec>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a49      	ldr	r2, [pc, #292]	@ (80051a8 <HAL_GPIO_Init+0x2f8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d007      	beq.n	8005098 <HAL_GPIO_Init+0x1e8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a48      	ldr	r2, [pc, #288]	@ (80051ac <HAL_GPIO_Init+0x2fc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d101      	bne.n	8005094 <HAL_GPIO_Init+0x1e4>
 8005090:	2305      	movs	r3, #5
 8005092:	e00a      	b.n	80050aa <HAL_GPIO_Init+0x1fa>
 8005094:	2306      	movs	r3, #6
 8005096:	e008      	b.n	80050aa <HAL_GPIO_Init+0x1fa>
 8005098:	2304      	movs	r3, #4
 800509a:	e006      	b.n	80050aa <HAL_GPIO_Init+0x1fa>
 800509c:	2303      	movs	r3, #3
 800509e:	e004      	b.n	80050aa <HAL_GPIO_Init+0x1fa>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e002      	b.n	80050aa <HAL_GPIO_Init+0x1fa>
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <HAL_GPIO_Init+0x1fa>
 80050a8:	2300      	movs	r3, #0
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	f002 0203 	and.w	r2, r2, #3
 80050b0:	0092      	lsls	r2, r2, #2
 80050b2:	4093      	lsls	r3, r2
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050ba:	4937      	ldr	r1, [pc, #220]	@ (8005198 <HAL_GPIO_Init+0x2e8>)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	089b      	lsrs	r3, r3, #2
 80050c0:	3302      	adds	r3, #2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050c8:	4b39      	ldr	r3, [pc, #228]	@ (80051b0 <HAL_GPIO_Init+0x300>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	43db      	mvns	r3, r3
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4013      	ands	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050ec:	4a30      	ldr	r2, [pc, #192]	@ (80051b0 <HAL_GPIO_Init+0x300>)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80050f2:	4b2f      	ldr	r3, [pc, #188]	@ (80051b0 <HAL_GPIO_Init+0x300>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	43db      	mvns	r3, r3
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4013      	ands	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005116:	4a26      	ldr	r2, [pc, #152]	@ (80051b0 <HAL_GPIO_Init+0x300>)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800511c:	4b24      	ldr	r3, [pc, #144]	@ (80051b0 <HAL_GPIO_Init+0x300>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	43db      	mvns	r3, r3
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4013      	ands	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005140:	4a1b      	ldr	r2, [pc, #108]	@ (80051b0 <HAL_GPIO_Init+0x300>)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005146:	4b1a      	ldr	r3, [pc, #104]	@ (80051b0 <HAL_GPIO_Init+0x300>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	43db      	mvns	r3, r3
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4013      	ands	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800516a:	4a11      	ldr	r2, [pc, #68]	@ (80051b0 <HAL_GPIO_Init+0x300>)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	3301      	adds	r3, #1
 8005174:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	fa22 f303 	lsr.w	r3, r2, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	f47f ae9d 	bne.w	8004ec0 <HAL_GPIO_Init+0x10>
  }
}
 8005186:	bf00      	nop
 8005188:	bf00      	nop
 800518a:	371c      	adds	r7, #28
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	40021000 	.word	0x40021000
 8005198:	40010000 	.word	0x40010000
 800519c:	48000400 	.word	0x48000400
 80051a0:	48000800 	.word	0x48000800
 80051a4:	48000c00 	.word	0x48000c00
 80051a8:	48001000 	.word	0x48001000
 80051ac:	48001400 	.word	0x48001400
 80051b0:	40010400 	.word	0x40010400

080051b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	887b      	ldrh	r3, [r7, #2]
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
 80051d0:	e001      	b.n	80051d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051d2:	2300      	movs	r3, #0
 80051d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051ee:	4b08      	ldr	r3, [pc, #32]	@ (8005210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d006      	beq.n	8005208 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051fa:	4a05      	ldr	r2, [pc, #20]	@ (8005210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	4618      	mov	r0, r3
 8005204:	f7fc f898 	bl	8001338 <HAL_GPIO_EXTI_Callback>
  }
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40010400 	.word	0x40010400

08005214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d141      	bne.n	80052a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005222:	4b4b      	ldr	r3, [pc, #300]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800522a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800522e:	d131      	bne.n	8005294 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005230:	4b47      	ldr	r3, [pc, #284]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005236:	4a46      	ldr	r2, [pc, #280]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800523c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005240:	4b43      	ldr	r3, [pc, #268]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005248:	4a41      	ldr	r2, [pc, #260]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800524e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005250:	4b40      	ldr	r3, [pc, #256]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2232      	movs	r2, #50	@ 0x32
 8005256:	fb02 f303 	mul.w	r3, r2, r3
 800525a:	4a3f      	ldr	r2, [pc, #252]	@ (8005358 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800525c:	fba2 2303 	umull	r2, r3, r2, r3
 8005260:	0c9b      	lsrs	r3, r3, #18
 8005262:	3301      	adds	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005266:	e002      	b.n	800526e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3b01      	subs	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800526e:	4b38      	ldr	r3, [pc, #224]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800527a:	d102      	bne.n	8005282 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f2      	bne.n	8005268 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005282:	4b33      	ldr	r3, [pc, #204]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800528a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800528e:	d158      	bne.n	8005342 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e057      	b.n	8005344 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005294:	4b2e      	ldr	r3, [pc, #184]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005296:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800529a:	4a2d      	ldr	r2, [pc, #180]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052a4:	e04d      	b.n	8005342 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052ac:	d141      	bne.n	8005332 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052ae:	4b28      	ldr	r3, [pc, #160]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ba:	d131      	bne.n	8005320 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052bc:	4b24      	ldr	r3, [pc, #144]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052c2:	4a23      	ldr	r2, [pc, #140]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052cc:	4b20      	ldr	r3, [pc, #128]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005354 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2232      	movs	r2, #50	@ 0x32
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005358 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	0c9b      	lsrs	r3, r3, #18
 80052ee:	3301      	adds	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052f2:	e002      	b.n	80052fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052fa:	4b15      	ldr	r3, [pc, #84]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005306:	d102      	bne.n	800530e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f2      	bne.n	80052f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800530e:	4b10      	ldr	r3, [pc, #64]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800531a:	d112      	bne.n	8005342 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e011      	b.n	8005344 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005320:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005326:	4a0a      	ldr	r2, [pc, #40]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800532c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005330:	e007      	b.n	8005342 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005332:	4b07      	ldr	r3, [pc, #28]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800533a:	4a05      	ldr	r2, [pc, #20]	@ (8005350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800533c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005340:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	40007000 	.word	0x40007000
 8005354:	20000414 	.word	0x20000414
 8005358:	431bde83 	.word	0x431bde83

0800535c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005360:	4b05      	ldr	r3, [pc, #20]	@ (8005378 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	4a04      	ldr	r2, [pc, #16]	@ (8005378 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800536a:	6093      	str	r3, [r2, #8]
}
 800536c:	bf00      	nop
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40007000 	.word	0x40007000

0800537c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e2fe      	b.n	800598c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d075      	beq.n	8005486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800539a:	4b97      	ldr	r3, [pc, #604]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
 80053a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053a4:	4b94      	ldr	r3, [pc, #592]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0303 	and.w	r3, r3, #3
 80053ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b0c      	cmp	r3, #12
 80053b2:	d102      	bne.n	80053ba <HAL_RCC_OscConfig+0x3e>
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d002      	beq.n	80053c0 <HAL_RCC_OscConfig+0x44>
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d10b      	bne.n	80053d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c0:	4b8d      	ldr	r3, [pc, #564]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d05b      	beq.n	8005484 <HAL_RCC_OscConfig+0x108>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d157      	bne.n	8005484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e2d9      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053e0:	d106      	bne.n	80053f0 <HAL_RCC_OscConfig+0x74>
 80053e2:	4b85      	ldr	r3, [pc, #532]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a84      	ldr	r2, [pc, #528]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80053e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	e01d      	b.n	800542c <HAL_RCC_OscConfig+0xb0>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053f8:	d10c      	bne.n	8005414 <HAL_RCC_OscConfig+0x98>
 80053fa:	4b7f      	ldr	r3, [pc, #508]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a7e      	ldr	r2, [pc, #504]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	4b7c      	ldr	r3, [pc, #496]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a7b      	ldr	r2, [pc, #492]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 800540c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	e00b      	b.n	800542c <HAL_RCC_OscConfig+0xb0>
 8005414:	4b78      	ldr	r3, [pc, #480]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a77      	ldr	r2, [pc, #476]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 800541a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	4b75      	ldr	r3, [pc, #468]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a74      	ldr	r2, [pc, #464]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800542a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d013      	beq.n	800545c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005434:	f7fd fb14 	bl	8002a60 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800543c:	f7fd fb10 	bl	8002a60 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b64      	cmp	r3, #100	@ 0x64
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e29e      	b.n	800598c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800544e:	4b6a      	ldr	r3, [pc, #424]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0f0      	beq.n	800543c <HAL_RCC_OscConfig+0xc0>
 800545a:	e014      	b.n	8005486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fd fb00 	bl	8002a60 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005464:	f7fd fafc 	bl	8002a60 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b64      	cmp	r3, #100	@ 0x64
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e28a      	b.n	800598c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005476:	4b60      	ldr	r3, [pc, #384]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f0      	bne.n	8005464 <HAL_RCC_OscConfig+0xe8>
 8005482:	e000      	b.n	8005486 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d075      	beq.n	800557e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005492:	4b59      	ldr	r3, [pc, #356]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
 800549a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800549c:	4b56      	ldr	r3, [pc, #344]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	2b0c      	cmp	r3, #12
 80054aa:	d102      	bne.n	80054b2 <HAL_RCC_OscConfig+0x136>
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d002      	beq.n	80054b8 <HAL_RCC_OscConfig+0x13c>
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d11f      	bne.n	80054f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054b8:	4b4f      	ldr	r3, [pc, #316]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_RCC_OscConfig+0x154>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e25d      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d0:	4b49      	ldr	r3, [pc, #292]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	061b      	lsls	r3, r3, #24
 80054de:	4946      	ldr	r1, [pc, #280]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054e4:	4b45      	ldr	r3, [pc, #276]	@ (80055fc <HAL_RCC_OscConfig+0x280>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fd f8c1 	bl	8002670 <HAL_InitTick>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d043      	beq.n	800557c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e249      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d023      	beq.n	8005548 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005500:	4b3d      	ldr	r3, [pc, #244]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a3c      	ldr	r2, [pc, #240]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800550a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fd faa8 	bl	8002a60 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005514:	f7fd faa4 	bl	8002a60 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e232      	b.n	800598c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005526:	4b34      	ldr	r3, [pc, #208]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0f0      	beq.n	8005514 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005532:	4b31      	ldr	r3, [pc, #196]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	061b      	lsls	r3, r3, #24
 8005540:	492d      	ldr	r1, [pc, #180]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005542:	4313      	orrs	r3, r2
 8005544:	604b      	str	r3, [r1, #4]
 8005546:	e01a      	b.n	800557e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005548:	4b2b      	ldr	r3, [pc, #172]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a2a      	ldr	r2, [pc, #168]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 800554e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fd fa84 	bl	8002a60 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800555c:	f7fd fa80 	bl	8002a60 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e20e      	b.n	800598c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800556e:	4b22      	ldr	r3, [pc, #136]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0x1e0>
 800557a:	e000      	b.n	800557e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800557c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d041      	beq.n	800560e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01c      	beq.n	80055cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005592:	4b19      	ldr	r3, [pc, #100]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 8005594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005598:	4a17      	ldr	r2, [pc, #92]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a2:	f7fd fa5d 	bl	8002a60 <HAL_GetTick>
 80055a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055aa:	f7fd fa59 	bl	8002a60 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e1e7      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055bc:	4b0e      	ldr	r3, [pc, #56]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80055be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0ef      	beq.n	80055aa <HAL_RCC_OscConfig+0x22e>
 80055ca:	e020      	b.n	800560e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055cc:	4b0a      	ldr	r3, [pc, #40]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80055ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055d2:	4a09      	ldr	r2, [pc, #36]	@ (80055f8 <HAL_RCC_OscConfig+0x27c>)
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055dc:	f7fd fa40 	bl	8002a60 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055e2:	e00d      	b.n	8005600 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055e4:	f7fd fa3c 	bl	8002a60 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d906      	bls.n	8005600 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e1ca      	b.n	800598c <HAL_RCC_OscConfig+0x610>
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000
 80055fc:	20000418 	.word	0x20000418
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005600:	4b8c      	ldr	r3, [pc, #560]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1ea      	bne.n	80055e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 80a6 	beq.w	8005768 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800561c:	2300      	movs	r3, #0
 800561e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005620:	4b84      	ldr	r3, [pc, #528]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_OscConfig+0x2b4>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <HAL_RCC_OscConfig+0x2b6>
 8005630:	2300      	movs	r3, #0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00d      	beq.n	8005652 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005636:	4b7f      	ldr	r3, [pc, #508]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800563a:	4a7e      	ldr	r2, [pc, #504]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005640:	6593      	str	r3, [r2, #88]	@ 0x58
 8005642:	4b7c      	ldr	r3, [pc, #496]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800564e:	2301      	movs	r3, #1
 8005650:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005652:	4b79      	ldr	r3, [pc, #484]	@ (8005838 <HAL_RCC_OscConfig+0x4bc>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d118      	bne.n	8005690 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800565e:	4b76      	ldr	r3, [pc, #472]	@ (8005838 <HAL_RCC_OscConfig+0x4bc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a75      	ldr	r2, [pc, #468]	@ (8005838 <HAL_RCC_OscConfig+0x4bc>)
 8005664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800566a:	f7fd f9f9 	bl	8002a60 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005672:	f7fd f9f5 	bl	8002a60 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e183      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005684:	4b6c      	ldr	r3, [pc, #432]	@ (8005838 <HAL_RCC_OscConfig+0x4bc>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d108      	bne.n	80056aa <HAL_RCC_OscConfig+0x32e>
 8005698:	4b66      	ldr	r3, [pc, #408]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569e:	4a65      	ldr	r2, [pc, #404]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056a0:	f043 0301 	orr.w	r3, r3, #1
 80056a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056a8:	e024      	b.n	80056f4 <HAL_RCC_OscConfig+0x378>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b05      	cmp	r3, #5
 80056b0:	d110      	bne.n	80056d4 <HAL_RCC_OscConfig+0x358>
 80056b2:	4b60      	ldr	r3, [pc, #384]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b8:	4a5e      	ldr	r2, [pc, #376]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056ba:	f043 0304 	orr.w	r3, r3, #4
 80056be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c8:	4a5a      	ldr	r2, [pc, #360]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056ca:	f043 0301 	orr.w	r3, r3, #1
 80056ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056d2:	e00f      	b.n	80056f4 <HAL_RCC_OscConfig+0x378>
 80056d4:	4b57      	ldr	r3, [pc, #348]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056da:	4a56      	ldr	r2, [pc, #344]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056dc:	f023 0301 	bic.w	r3, r3, #1
 80056e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056e4:	4b53      	ldr	r3, [pc, #332]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ea:	4a52      	ldr	r2, [pc, #328]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80056ec:	f023 0304 	bic.w	r3, r3, #4
 80056f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d016      	beq.n	800572a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fc:	f7fd f9b0 	bl	8002a60 <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005702:	e00a      	b.n	800571a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005704:	f7fd f9ac 	bl	8002a60 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e138      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800571a:	4b46      	ldr	r3, [pc, #280]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 800571c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0ed      	beq.n	8005704 <HAL_RCC_OscConfig+0x388>
 8005728:	e015      	b.n	8005756 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572a:	f7fd f999 	bl	8002a60 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005730:	e00a      	b.n	8005748 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005732:	f7fd f995 	bl	8002a60 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005740:	4293      	cmp	r3, r2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e121      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005748:	4b3a      	ldr	r3, [pc, #232]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 800574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1ed      	bne.n	8005732 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005756:	7ffb      	ldrb	r3, [r7, #31]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d105      	bne.n	8005768 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800575c:	4b35      	ldr	r3, [pc, #212]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 800575e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005760:	4a34      	ldr	r2, [pc, #208]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005766:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b00      	cmp	r3, #0
 8005772:	d03c      	beq.n	80057ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01c      	beq.n	80057b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800577c:	4b2d      	ldr	r3, [pc, #180]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 800577e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005782:	4a2c      	ldr	r2, [pc, #176]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005784:	f043 0301 	orr.w	r3, r3, #1
 8005788:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578c:	f7fd f968 	bl	8002a60 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005794:	f7fd f964 	bl	8002a60 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e0f2      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057a6:	4b23      	ldr	r3, [pc, #140]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80057a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0ef      	beq.n	8005794 <HAL_RCC_OscConfig+0x418>
 80057b4:	e01b      	b.n	80057ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80057b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80057be:	f023 0301 	bic.w	r3, r3, #1
 80057c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c6:	f7fd f94b 	bl	8002a60 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057ce:	f7fd f947 	bl	8002a60 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e0d5      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057e0:	4b14      	ldr	r3, [pc, #80]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80057e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1ef      	bne.n	80057ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 80c9 	beq.w	800598a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 030c 	and.w	r3, r3, #12
 8005800:	2b0c      	cmp	r3, #12
 8005802:	f000 8083 	beq.w	800590c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d15e      	bne.n	80058cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580e:	4b09      	ldr	r3, [pc, #36]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a08      	ldr	r2, [pc, #32]	@ (8005834 <HAL_RCC_OscConfig+0x4b8>)
 8005814:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581a:	f7fd f921 	bl	8002a60 <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005820:	e00c      	b.n	800583c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005822:	f7fd f91d 	bl	8002a60 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d905      	bls.n	800583c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e0ab      	b.n	800598c <HAL_RCC_OscConfig+0x610>
 8005834:	40021000 	.word	0x40021000
 8005838:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800583c:	4b55      	ldr	r3, [pc, #340]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1ec      	bne.n	8005822 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005848:	4b52      	ldr	r3, [pc, #328]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	4b52      	ldr	r3, [pc, #328]	@ (8005998 <HAL_RCC_OscConfig+0x61c>)
 800584e:	4013      	ands	r3, r2
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6a11      	ldr	r1, [r2, #32]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005858:	3a01      	subs	r2, #1
 800585a:	0112      	lsls	r2, r2, #4
 800585c:	4311      	orrs	r1, r2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005862:	0212      	lsls	r2, r2, #8
 8005864:	4311      	orrs	r1, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800586a:	0852      	lsrs	r2, r2, #1
 800586c:	3a01      	subs	r2, #1
 800586e:	0552      	lsls	r2, r2, #21
 8005870:	4311      	orrs	r1, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005876:	0852      	lsrs	r2, r2, #1
 8005878:	3a01      	subs	r2, #1
 800587a:	0652      	lsls	r2, r2, #25
 800587c:	4311      	orrs	r1, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005882:	06d2      	lsls	r2, r2, #27
 8005884:	430a      	orrs	r2, r1
 8005886:	4943      	ldr	r1, [pc, #268]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 8005888:	4313      	orrs	r3, r2
 800588a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800588c:	4b41      	ldr	r3, [pc, #260]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a40      	ldr	r2, [pc, #256]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 8005892:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005896:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005898:	4b3e      	ldr	r3, [pc, #248]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4a3d      	ldr	r2, [pc, #244]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 800589e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fd f8dc 	bl	8002a60 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ac:	f7fd f8d8 	bl	8002a60 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e066      	b.n	800598c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058be:	4b35      	ldr	r3, [pc, #212]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCC_OscConfig+0x530>
 80058ca:	e05e      	b.n	800598a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058cc:	4b31      	ldr	r3, [pc, #196]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a30      	ldr	r2, [pc, #192]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 80058d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d8:	f7fd f8c2 	bl	8002a60 <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e0:	f7fd f8be 	bl	8002a60 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e04c      	b.n	800598c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f2:	4b28      	ldr	r3, [pc, #160]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1f0      	bne.n	80058e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80058fe:	4b25      	ldr	r3, [pc, #148]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	4924      	ldr	r1, [pc, #144]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 8005904:	4b25      	ldr	r3, [pc, #148]	@ (800599c <HAL_RCC_OscConfig+0x620>)
 8005906:	4013      	ands	r3, r2
 8005908:	60cb      	str	r3, [r1, #12]
 800590a:	e03e      	b.n	800598a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e039      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005918:	4b1e      	ldr	r3, [pc, #120]	@ (8005994 <HAL_RCC_OscConfig+0x618>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f003 0203 	and.w	r2, r3, #3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	429a      	cmp	r2, r3
 800592a:	d12c      	bne.n	8005986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005936:	3b01      	subs	r3, #1
 8005938:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800593a:	429a      	cmp	r2, r3
 800593c:	d123      	bne.n	8005986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005948:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800594a:	429a      	cmp	r2, r3
 800594c:	d11b      	bne.n	8005986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005958:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800595a:	429a      	cmp	r2, r3
 800595c:	d113      	bne.n	8005986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	3b01      	subs	r3, #1
 800596c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d109      	bne.n	8005986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800597c:	085b      	lsrs	r3, r3, #1
 800597e:	3b01      	subs	r3, #1
 8005980:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005982:	429a      	cmp	r2, r3
 8005984:	d001      	beq.n	800598a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3720      	adds	r7, #32
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40021000 	.word	0x40021000
 8005998:	019f800c 	.word	0x019f800c
 800599c:	feeefffc 	.word	0xfeeefffc

080059a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e11e      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059b8:	4b91      	ldr	r3, [pc, #580]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d910      	bls.n	80059e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c6:	4b8e      	ldr	r3, [pc, #568]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f023 020f 	bic.w	r2, r3, #15
 80059ce:	498c      	ldr	r1, [pc, #560]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d6:	4b8a      	ldr	r3, [pc, #552]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d001      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e106      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d073      	beq.n	8005adc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d129      	bne.n	8005a50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059fc:	4b81      	ldr	r3, [pc, #516]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e0f4      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a0c:	f000 f9d0 	bl	8005db0 <RCC_GetSysClockFreqFromPLLSource>
 8005a10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4a7c      	ldr	r2, [pc, #496]	@ (8005c08 <HAL_RCC_ClockConfig+0x268>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d93f      	bls.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a1a:	4b7a      	ldr	r3, [pc, #488]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d033      	beq.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d12f      	bne.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a3a:	4b72      	ldr	r3, [pc, #456]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a42:	4a70      	ldr	r2, [pc, #448]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a4a:	2380      	movs	r3, #128	@ 0x80
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	e024      	b.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d107      	bne.n	8005a68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a58:	4b6a      	ldr	r3, [pc, #424]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d109      	bne.n	8005a78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0c6      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a68:	4b66      	ldr	r3, [pc, #408]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e0be      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005a78:	f000 f8ce 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8005a7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4a61      	ldr	r2, [pc, #388]	@ (8005c08 <HAL_RCC_ClockConfig+0x268>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d909      	bls.n	8005a9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a86:	4b5f      	ldr	r3, [pc, #380]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a8e:	4a5d      	ldr	r2, [pc, #372]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a96:	2380      	movs	r3, #128	@ 0x80
 8005a98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f023 0203 	bic.w	r2, r3, #3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	4957      	ldr	r1, [pc, #348]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aac:	f7fc ffd8 	bl	8002a60 <HAL_GetTick>
 8005ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab2:	e00a      	b.n	8005aca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab4:	f7fc ffd4 	bl	8002a60 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e095      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aca:	4b4e      	ldr	r3, [pc, #312]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 020c 	and.w	r2, r3, #12
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d1eb      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d023      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005af4:	4b43      	ldr	r3, [pc, #268]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4a42      	ldr	r2, [pc, #264]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005afa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005afe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d007      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b0c:	4b3d      	ldr	r3, [pc, #244]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b14:	4a3b      	ldr	r2, [pc, #236]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b1c:	4b39      	ldr	r3, [pc, #228]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	4936      	ldr	r1, [pc, #216]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	608b      	str	r3, [r1, #8]
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b80      	cmp	r3, #128	@ 0x80
 8005b34:	d105      	bne.n	8005b42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b36:	4b33      	ldr	r3, [pc, #204]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	4a32      	ldr	r2, [pc, #200]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b42:	4b2f      	ldr	r3, [pc, #188]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d21d      	bcs.n	8005b8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b50:	4b2b      	ldr	r3, [pc, #172]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f023 020f 	bic.w	r2, r3, #15
 8005b58:	4929      	ldr	r1, [pc, #164]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b60:	f7fc ff7e 	bl	8002a60 <HAL_GetTick>
 8005b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b66:	e00a      	b.n	8005b7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b68:	f7fc ff7a 	bl	8002a60 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e03b      	b.n	8005bf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7e:	4b20      	ldr	r3, [pc, #128]	@ (8005c00 <HAL_RCC_ClockConfig+0x260>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d1ed      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b98:	4b1a      	ldr	r3, [pc, #104]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4917      	ldr	r1, [pc, #92]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bb6:	4b13      	ldr	r3, [pc, #76]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	490f      	ldr	r1, [pc, #60]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bca:	f000 f825 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c04 <HAL_RCC_ClockConfig+0x264>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	490c      	ldr	r1, [pc, #48]	@ (8005c0c <HAL_RCC_ClockConfig+0x26c>)
 8005bdc:	5ccb      	ldrb	r3, [r1, r3]
 8005bde:	f003 031f 	and.w	r3, r3, #31
 8005be2:	fa22 f303 	lsr.w	r3, r2, r3
 8005be6:	4a0a      	ldr	r2, [pc, #40]	@ (8005c10 <HAL_RCC_ClockConfig+0x270>)
 8005be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005bea:	4b0a      	ldr	r3, [pc, #40]	@ (8005c14 <HAL_RCC_ClockConfig+0x274>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fc fd3e 	bl	8002670 <HAL_InitTick>
 8005bf4:	4603      	mov	r3, r0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40022000 	.word	0x40022000
 8005c04:	40021000 	.word	0x40021000
 8005c08:	04c4b400 	.word	0x04c4b400
 8005c0c:	080113f8 	.word	0x080113f8
 8005c10:	20000414 	.word	0x20000414
 8005c14:	20000418 	.word	0x20000418

08005c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 030c 	and.w	r3, r3, #12
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d102      	bne.n	8005c30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8005cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	e047      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c30:	4b27      	ldr	r3, [pc, #156]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 030c 	and.w	r3, r3, #12
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d102      	bne.n	8005c42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c3c:	4b26      	ldr	r3, [pc, #152]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	e03e      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c42:	4b23      	ldr	r3, [pc, #140]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 030c 	and.w	r3, r3, #12
 8005c4a:	2b0c      	cmp	r3, #12
 8005c4c:	d136      	bne.n	8005cbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c4e:	4b20      	ldr	r3, [pc, #128]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c58:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	091b      	lsrs	r3, r3, #4
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	3301      	adds	r3, #1
 8005c64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d10c      	bne.n	8005c86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8005cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c74:	4a16      	ldr	r2, [pc, #88]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c76:	68d2      	ldr	r2, [r2, #12]
 8005c78:	0a12      	lsrs	r2, r2, #8
 8005c7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	617b      	str	r3, [r7, #20]
      break;
 8005c84:	e00c      	b.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c86:	4a13      	ldr	r2, [pc, #76]	@ (8005cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	4a10      	ldr	r2, [pc, #64]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c90:	68d2      	ldr	r2, [r2, #12]
 8005c92:	0a12      	lsrs	r2, r2, #8
 8005c94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c98:	fb02 f303 	mul.w	r3, r2, r3
 8005c9c:	617b      	str	r3, [r7, #20]
      break;
 8005c9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	0e5b      	lsrs	r3, r3, #25
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	3301      	adds	r3, #1
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	e001      	b.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005cc0:	693b      	ldr	r3, [r7, #16]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	00f42400 	.word	0x00f42400
 8005cd8:	007a1200 	.word	0x007a1200

08005cdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ce0:	4b03      	ldr	r3, [pc, #12]	@ (8005cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	20000414 	.word	0x20000414

08005cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005cf8:	f7ff fff0 	bl	8005cdc <HAL_RCC_GetHCLKFreq>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	4b06      	ldr	r3, [pc, #24]	@ (8005d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	0a1b      	lsrs	r3, r3, #8
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	4904      	ldr	r1, [pc, #16]	@ (8005d1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d0a:	5ccb      	ldrb	r3, [r1, r3]
 8005d0c:	f003 031f 	and.w	r3, r3, #31
 8005d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	08011408 	.word	0x08011408

08005d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d24:	f7ff ffda 	bl	8005cdc <HAL_RCC_GetHCLKFreq>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	4b06      	ldr	r3, [pc, #24]	@ (8005d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	0adb      	lsrs	r3, r3, #11
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	4904      	ldr	r1, [pc, #16]	@ (8005d48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d36:	5ccb      	ldrb	r3, [r1, r3]
 8005d38:	f003 031f 	and.w	r3, r3, #31
 8005d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40021000 	.word	0x40021000
 8005d48:	08011408 	.word	0x08011408

08005d4c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	220f      	movs	r2, #15
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005d5c:	4b12      	ldr	r3, [pc, #72]	@ (8005da8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 0203 	and.w	r2, r3, #3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005d68:	4b0f      	ldr	r3, [pc, #60]	@ (8005da8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005d74:	4b0c      	ldr	r3, [pc, #48]	@ (8005da8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005d80:	4b09      	ldr	r3, [pc, #36]	@ (8005da8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	08db      	lsrs	r3, r3, #3
 8005d86:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005d8e:	4b07      	ldr	r3, [pc, #28]	@ (8005dac <HAL_RCC_GetClockConfig+0x60>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 020f 	and.w	r2, r3, #15
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	601a      	str	r2, [r3, #0]
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	40021000 	.word	0x40021000
 8005dac:	40022000 	.word	0x40022000

08005db0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005db6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	3301      	adds	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d10c      	bne.n	8005dee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dd4:	4a17      	ldr	r2, [pc, #92]	@ (8005e34 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ddc:	4a14      	ldr	r2, [pc, #80]	@ (8005e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dde:	68d2      	ldr	r2, [r2, #12]
 8005de0:	0a12      	lsrs	r2, r2, #8
 8005de2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	617b      	str	r3, [r7, #20]
    break;
 8005dec:	e00c      	b.n	8005e08 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dee:	4a12      	ldr	r2, [pc, #72]	@ (8005e38 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df6:	4a0e      	ldr	r2, [pc, #56]	@ (8005e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005df8:	68d2      	ldr	r2, [r2, #12]
 8005dfa:	0a12      	lsrs	r2, r2, #8
 8005dfc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e00:	fb02 f303 	mul.w	r3, r2, r3
 8005e04:	617b      	str	r3, [r7, #20]
    break;
 8005e06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e08:	4b09      	ldr	r3, [pc, #36]	@ (8005e30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	0e5b      	lsrs	r3, r3, #25
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	3301      	adds	r3, #1
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e20:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e22:	687b      	ldr	r3, [r7, #4]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	40021000 	.word	0x40021000
 8005e34:	007a1200 	.word	0x007a1200
 8005e38:	00f42400 	.word	0x00f42400

08005e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e44:	2300      	movs	r3, #0
 8005e46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e48:	2300      	movs	r3, #0
 8005e4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8098 	beq.w	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e5e:	4b43      	ldr	r3, [pc, #268]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10d      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e6a:	4b40      	ldr	r3, [pc, #256]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e74:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e76:	4b3d      	ldr	r3, [pc, #244]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e7e:	60bb      	str	r3, [r7, #8]
 8005e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e82:	2301      	movs	r3, #1
 8005e84:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e86:	4b3a      	ldr	r3, [pc, #232]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a39      	ldr	r2, [pc, #228]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e92:	f7fc fde5 	bl	8002a60 <HAL_GetTick>
 8005e96:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e98:	e009      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e9a:	f7fc fde1 	bl	8002a60 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d902      	bls.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	74fb      	strb	r3, [r7, #19]
        break;
 8005eac:	e005      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eae:	4b30      	ldr	r3, [pc, #192]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0ef      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005eba:	7cfb      	ldrb	r3, [r7, #19]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d159      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01e      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d019      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005edc:	4b23      	ldr	r3, [pc, #140]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ee6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ee8:	4b20      	ldr	r3, [pc, #128]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eee:	4a1f      	ldr	r2, [pc, #124]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005efe:	4a1b      	ldr	r2, [pc, #108]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f08:	4a18      	ldr	r2, [pc, #96]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d016      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1a:	f7fc fda1 	bl	8002a60 <HAL_GetTick>
 8005f1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f20:	e00b      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f22:	f7fc fd9d 	bl	8002a60 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d902      	bls.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	74fb      	strb	r3, [r7, #19]
            break;
 8005f38:	e006      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0ec      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005f48:	7cfb      	ldrb	r3, [r7, #19]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10b      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f4e:	4b07      	ldr	r3, [pc, #28]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	4903      	ldr	r1, [pc, #12]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005f64:	e008      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f66:	7cfb      	ldrb	r3, [r7, #19]
 8005f68:	74bb      	strb	r3, [r7, #18]
 8005f6a:	e005      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f74:	7cfb      	ldrb	r3, [r7, #19]
 8005f76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f78:	7c7b      	ldrb	r3, [r7, #17]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d105      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f7e:	4ba6      	ldr	r3, [pc, #664]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f82:	4aa5      	ldr	r2, [pc, #660]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f88:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f96:	4ba0      	ldr	r3, [pc, #640]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9c:	f023 0203 	bic.w	r2, r3, #3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	499c      	ldr	r1, [pc, #624]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00a      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fb8:	4b97      	ldr	r3, [pc, #604]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fbe:	f023 020c 	bic.w	r2, r3, #12
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	4994      	ldr	r1, [pc, #592]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fda:	4b8f      	ldr	r3, [pc, #572]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	498b      	ldr	r1, [pc, #556]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0308 	and.w	r3, r3, #8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ffc:	4b86      	ldr	r3, [pc, #536]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006002:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	4983      	ldr	r1, [pc, #524]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800601e:	4b7e      	ldr	r3, [pc, #504]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006024:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	497a      	ldr	r1, [pc, #488]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006040:	4b75      	ldr	r3, [pc, #468]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006046:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	4972      	ldr	r1, [pc, #456]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006062:	4b6d      	ldr	r3, [pc, #436]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006068:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	4969      	ldr	r1, [pc, #420]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006084:	4b64      	ldr	r3, [pc, #400]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	4961      	ldr	r1, [pc, #388]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060a6:	4b5c      	ldr	r3, [pc, #368]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b4:	4958      	ldr	r1, [pc, #352]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d015      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060c8:	4b53      	ldr	r3, [pc, #332]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d6:	4950      	ldr	r1, [pc, #320]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060e6:	d105      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060e8:	4b4b      	ldr	r3, [pc, #300]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	4a4a      	ldr	r2, [pc, #296]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d015      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006100:	4b45      	ldr	r3, [pc, #276]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006106:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610e:	4942      	ldr	r1, [pc, #264]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006110:	4313      	orrs	r3, r2
 8006112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800611e:	d105      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006120:	4b3d      	ldr	r3, [pc, #244]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	4a3c      	ldr	r2, [pc, #240]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800612a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d015      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006138:	4b37      	ldr	r3, [pc, #220]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800613e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006146:	4934      	ldr	r1, [pc, #208]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006152:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006156:	d105      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006158:	4b2f      	ldr	r3, [pc, #188]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4a2e      	ldr	r2, [pc, #184]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800615e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006162:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d015      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006170:	4b29      	ldr	r3, [pc, #164]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006176:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800617e:	4926      	ldr	r1, [pc, #152]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800618a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800618e:	d105      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006190:	4b21      	ldr	r3, [pc, #132]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	4a20      	ldr	r2, [pc, #128]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800619a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d015      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b6:	4918      	ldr	r1, [pc, #96]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061c6:	d105      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061c8:	4b13      	ldr	r3, [pc, #76]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	4a12      	ldr	r2, [pc, #72]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d015      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80061e0:	4b0d      	ldr	r3, [pc, #52]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ee:	490a      	ldr	r1, [pc, #40]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061fe:	d105      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006200:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	4a04      	ldr	r2, [pc, #16]	@ (8006218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800620a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800620c:	7cbb      	ldrb	r3, [r7, #18]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40021000 	.word	0x40021000

0800621c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e049      	b.n	80062c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fc f9c8 	bl	80025d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f000 fb9c 	bl	8006998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d001      	beq.n	80062e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e042      	b.n	800636a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a21      	ldr	r2, [pc, #132]	@ (8006378 <HAL_TIM_Base_Start+0xac>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d018      	beq.n	8006328 <HAL_TIM_Base_Start+0x5c>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fe:	d013      	beq.n	8006328 <HAL_TIM_Base_Start+0x5c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a1d      	ldr	r2, [pc, #116]	@ (800637c <HAL_TIM_Base_Start+0xb0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00e      	beq.n	8006328 <HAL_TIM_Base_Start+0x5c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a1c      	ldr	r2, [pc, #112]	@ (8006380 <HAL_TIM_Base_Start+0xb4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d009      	beq.n	8006328 <HAL_TIM_Base_Start+0x5c>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1a      	ldr	r2, [pc, #104]	@ (8006384 <HAL_TIM_Base_Start+0xb8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d004      	beq.n	8006328 <HAL_TIM_Base_Start+0x5c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a19      	ldr	r2, [pc, #100]	@ (8006388 <HAL_TIM_Base_Start+0xbc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d115      	bne.n	8006354 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689a      	ldr	r2, [r3, #8]
 800632e:	4b17      	ldr	r3, [pc, #92]	@ (800638c <HAL_TIM_Base_Start+0xc0>)
 8006330:	4013      	ands	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b06      	cmp	r3, #6
 8006338:	d015      	beq.n	8006366 <HAL_TIM_Base_Start+0x9a>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006340:	d011      	beq.n	8006366 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006352:	e008      	b.n	8006366 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	e000      	b.n	8006368 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006366:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40012c00 	.word	0x40012c00
 800637c:	40000400 	.word	0x40000400
 8006380:	40000800 	.word	0x40000800
 8006384:	40013400 	.word	0x40013400
 8006388:	40014000 	.word	0x40014000
 800638c:	00010007 	.word	0x00010007

08006390 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6a1a      	ldr	r2, [r3, #32]
 800639e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80063a2:	4013      	ands	r3, r2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10f      	bne.n	80063c8 <HAL_TIM_Base_Stop+0x38>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6a1a      	ldr	r2, [r3, #32]
 80063ae:	f244 4344 	movw	r3, #17476	@ 0x4444
 80063b2:	4013      	ands	r3, r2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d107      	bne.n	80063c8 <HAL_TIM_Base_Stop+0x38>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0201 	bic.w	r2, r2, #1
 80063c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
	...

080063e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d001      	beq.n	80063f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e04a      	b.n	800648e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a21      	ldr	r2, [pc, #132]	@ (800649c <HAL_TIM_Base_Start_IT+0xbc>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d018      	beq.n	800644c <HAL_TIM_Base_Start_IT+0x6c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006422:	d013      	beq.n	800644c <HAL_TIM_Base_Start_IT+0x6c>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1d      	ldr	r2, [pc, #116]	@ (80064a0 <HAL_TIM_Base_Start_IT+0xc0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00e      	beq.n	800644c <HAL_TIM_Base_Start_IT+0x6c>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1c      	ldr	r2, [pc, #112]	@ (80064a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d009      	beq.n	800644c <HAL_TIM_Base_Start_IT+0x6c>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1a      	ldr	r2, [pc, #104]	@ (80064a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d004      	beq.n	800644c <HAL_TIM_Base_Start_IT+0x6c>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a19      	ldr	r2, [pc, #100]	@ (80064ac <HAL_TIM_Base_Start_IT+0xcc>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d115      	bne.n	8006478 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	4b17      	ldr	r3, [pc, #92]	@ (80064b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006454:	4013      	ands	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b06      	cmp	r3, #6
 800645c:	d015      	beq.n	800648a <HAL_TIM_Base_Start_IT+0xaa>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006464:	d011      	beq.n	800648a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0201 	orr.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006476:	e008      	b.n	800648a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	e000      	b.n	800648c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800648a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40012c00 	.word	0x40012c00
 80064a0:	40000400 	.word	0x40000400
 80064a4:	40000800 	.word	0x40000800
 80064a8:	40013400 	.word	0x40013400
 80064ac:	40014000 	.word	0x40014000
 80064b0:	00010007 	.word	0x00010007

080064b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d020      	beq.n	8006518 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01b      	beq.n	8006518 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0202 	mvn.w	r2, #2
 80064e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa2c 	bl	800695c <HAL_TIM_IC_CaptureCallback>
 8006504:	e005      	b.n	8006512 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fa1e 	bl	8006948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fa2f 	bl	8006970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	2b00      	cmp	r3, #0
 8006520:	d020      	beq.n	8006564 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01b      	beq.n	8006564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0204 	mvn.w	r2, #4
 8006534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2202      	movs	r2, #2
 800653a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fa06 	bl	800695c <HAL_TIM_IC_CaptureCallback>
 8006550:	e005      	b.n	800655e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f9f8 	bl	8006948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fa09 	bl	8006970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	2b00      	cmp	r3, #0
 800656c:	d020      	beq.n	80065b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01b      	beq.n	80065b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0208 	mvn.w	r2, #8
 8006580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2204      	movs	r2, #4
 8006586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f9e0 	bl	800695c <HAL_TIM_IC_CaptureCallback>
 800659c:	e005      	b.n	80065aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f9d2 	bl	8006948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f9e3 	bl	8006970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f003 0310 	and.w	r3, r3, #16
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d020      	beq.n	80065fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f003 0310 	and.w	r3, r3, #16
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01b      	beq.n	80065fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f06f 0210 	mvn.w	r2, #16
 80065cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2208      	movs	r2, #8
 80065d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f9ba 	bl	800695c <HAL_TIM_IC_CaptureCallback>
 80065e8:	e005      	b.n	80065f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f9ac 	bl	8006948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f9bd 	bl	8006970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00c      	beq.n	8006620 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d007      	beq.n	8006620 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0201 	mvn.w	r2, #1
 8006618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fb fe10 	bl	8002240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006626:	2b00      	cmp	r3, #0
 8006628:	d104      	bne.n	8006634 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00c      	beq.n	800664e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800663a:	2b00      	cmp	r3, #0
 800663c:	d007      	beq.n	800664e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fb69 	bl	8006d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00c      	beq.n	8006672 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665e:	2b00      	cmp	r3, #0
 8006660:	d007      	beq.n	8006672 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800666a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fb61 	bl	8006d34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00c      	beq.n	8006696 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006682:	2b00      	cmp	r3, #0
 8006684:	d007      	beq.n	8006696 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800668e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f977 	bl	8006984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00c      	beq.n	80066ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d007      	beq.n	80066ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f06f 0220 	mvn.w	r2, #32
 80066b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fb29 	bl	8006d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00c      	beq.n	80066de <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d007      	beq.n	80066de <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80066d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fb35 	bl	8006d48 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00c      	beq.n	8006702 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d007      	beq.n	8006702 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80066fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fb2d 	bl	8006d5c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00c      	beq.n	8006726 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d007      	beq.n	8006726 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800671e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fb25 	bl	8006d70 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00c      	beq.n	800674a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d007      	beq.n	800674a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fb1d 	bl	8006d84 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_TIM_ConfigClockSource+0x1c>
 800676c:	2302      	movs	r3, #2
 800676e:	e0de      	b.n	800692e <HAL_TIM_ConfigClockSource+0x1da>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800678e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800679a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a63      	ldr	r2, [pc, #396]	@ (8006938 <HAL_TIM_ConfigClockSource+0x1e4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	f000 80a9 	beq.w	8006902 <HAL_TIM_ConfigClockSource+0x1ae>
 80067b0:	4a61      	ldr	r2, [pc, #388]	@ (8006938 <HAL_TIM_ConfigClockSource+0x1e4>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	f200 80ae 	bhi.w	8006914 <HAL_TIM_ConfigClockSource+0x1c0>
 80067b8:	4a60      	ldr	r2, [pc, #384]	@ (800693c <HAL_TIM_ConfigClockSource+0x1e8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	f000 80a1 	beq.w	8006902 <HAL_TIM_ConfigClockSource+0x1ae>
 80067c0:	4a5e      	ldr	r2, [pc, #376]	@ (800693c <HAL_TIM_ConfigClockSource+0x1e8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	f200 80a6 	bhi.w	8006914 <HAL_TIM_ConfigClockSource+0x1c0>
 80067c8:	4a5d      	ldr	r2, [pc, #372]	@ (8006940 <HAL_TIM_ConfigClockSource+0x1ec>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	f000 8099 	beq.w	8006902 <HAL_TIM_ConfigClockSource+0x1ae>
 80067d0:	4a5b      	ldr	r2, [pc, #364]	@ (8006940 <HAL_TIM_ConfigClockSource+0x1ec>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	f200 809e 	bhi.w	8006914 <HAL_TIM_ConfigClockSource+0x1c0>
 80067d8:	4a5a      	ldr	r2, [pc, #360]	@ (8006944 <HAL_TIM_ConfigClockSource+0x1f0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	f000 8091 	beq.w	8006902 <HAL_TIM_ConfigClockSource+0x1ae>
 80067e0:	4a58      	ldr	r2, [pc, #352]	@ (8006944 <HAL_TIM_ConfigClockSource+0x1f0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	f200 8096 	bhi.w	8006914 <HAL_TIM_ConfigClockSource+0x1c0>
 80067e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80067ec:	f000 8089 	beq.w	8006902 <HAL_TIM_ConfigClockSource+0x1ae>
 80067f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80067f4:	f200 808e 	bhi.w	8006914 <HAL_TIM_ConfigClockSource+0x1c0>
 80067f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067fc:	d03e      	beq.n	800687c <HAL_TIM_ConfigClockSource+0x128>
 80067fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006802:	f200 8087 	bhi.w	8006914 <HAL_TIM_ConfigClockSource+0x1c0>
 8006806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800680a:	f000 8086 	beq.w	800691a <HAL_TIM_ConfigClockSource+0x1c6>
 800680e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006812:	d87f      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x1c0>
 8006814:	2b70      	cmp	r3, #112	@ 0x70
 8006816:	d01a      	beq.n	800684e <HAL_TIM_ConfigClockSource+0xfa>
 8006818:	2b70      	cmp	r3, #112	@ 0x70
 800681a:	d87b      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x1c0>
 800681c:	2b60      	cmp	r3, #96	@ 0x60
 800681e:	d050      	beq.n	80068c2 <HAL_TIM_ConfigClockSource+0x16e>
 8006820:	2b60      	cmp	r3, #96	@ 0x60
 8006822:	d877      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x1c0>
 8006824:	2b50      	cmp	r3, #80	@ 0x50
 8006826:	d03c      	beq.n	80068a2 <HAL_TIM_ConfigClockSource+0x14e>
 8006828:	2b50      	cmp	r3, #80	@ 0x50
 800682a:	d873      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x1c0>
 800682c:	2b40      	cmp	r3, #64	@ 0x40
 800682e:	d058      	beq.n	80068e2 <HAL_TIM_ConfigClockSource+0x18e>
 8006830:	2b40      	cmp	r3, #64	@ 0x40
 8006832:	d86f      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x1c0>
 8006834:	2b30      	cmp	r3, #48	@ 0x30
 8006836:	d064      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x1ae>
 8006838:	2b30      	cmp	r3, #48	@ 0x30
 800683a:	d86b      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x1c0>
 800683c:	2b20      	cmp	r3, #32
 800683e:	d060      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x1ae>
 8006840:	2b20      	cmp	r3, #32
 8006842:	d867      	bhi.n	8006914 <HAL_TIM_ConfigClockSource+0x1c0>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d05c      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x1ae>
 8006848:	2b10      	cmp	r3, #16
 800684a:	d05a      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0x1ae>
 800684c:	e062      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800685e:	f000 f9b3 	bl	8006bc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	609a      	str	r2, [r3, #8]
      break;
 800687a:	e04f      	b.n	800691c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800688c:	f000 f99c 	bl	8006bc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800689e:	609a      	str	r2, [r3, #8]
      break;
 80068a0:	e03c      	b.n	800691c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ae:	461a      	mov	r2, r3
 80068b0:	f000 f90e 	bl	8006ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2150      	movs	r1, #80	@ 0x50
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 f967 	bl	8006b8e <TIM_ITRx_SetConfig>
      break;
 80068c0:	e02c      	b.n	800691c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068ce:	461a      	mov	r2, r3
 80068d0:	f000 f92d 	bl	8006b2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2160      	movs	r1, #96	@ 0x60
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 f957 	bl	8006b8e <TIM_ITRx_SetConfig>
      break;
 80068e0:	e01c      	b.n	800691c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ee:	461a      	mov	r2, r3
 80068f0:	f000 f8ee 	bl	8006ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2140      	movs	r1, #64	@ 0x40
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 f947 	bl	8006b8e <TIM_ITRx_SetConfig>
      break;
 8006900:	e00c      	b.n	800691c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f000 f93e 	bl	8006b8e <TIM_ITRx_SetConfig>
      break;
 8006912:	e003      	b.n	800691c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
      break;
 8006918:	e000      	b.n	800691c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800691a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800692c:	7bfb      	ldrb	r3, [r7, #15]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	00100070 	.word	0x00100070
 800693c:	00100040 	.word	0x00100040
 8006940:	00100030 	.word	0x00100030
 8006944:	00100020 	.word	0x00100020

08006948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a42      	ldr	r2, [pc, #264]	@ (8006ab4 <TIM_Base_SetConfig+0x11c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00f      	beq.n	80069d0 <TIM_Base_SetConfig+0x38>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069b6:	d00b      	beq.n	80069d0 <TIM_Base_SetConfig+0x38>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a3f      	ldr	r2, [pc, #252]	@ (8006ab8 <TIM_Base_SetConfig+0x120>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d007      	beq.n	80069d0 <TIM_Base_SetConfig+0x38>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a3e      	ldr	r2, [pc, #248]	@ (8006abc <TIM_Base_SetConfig+0x124>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d003      	beq.n	80069d0 <TIM_Base_SetConfig+0x38>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a3d      	ldr	r2, [pc, #244]	@ (8006ac0 <TIM_Base_SetConfig+0x128>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d108      	bne.n	80069e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a33      	ldr	r2, [pc, #204]	@ (8006ab4 <TIM_Base_SetConfig+0x11c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d01b      	beq.n	8006a22 <TIM_Base_SetConfig+0x8a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069f0:	d017      	beq.n	8006a22 <TIM_Base_SetConfig+0x8a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a30      	ldr	r2, [pc, #192]	@ (8006ab8 <TIM_Base_SetConfig+0x120>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d013      	beq.n	8006a22 <TIM_Base_SetConfig+0x8a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a2f      	ldr	r2, [pc, #188]	@ (8006abc <TIM_Base_SetConfig+0x124>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d00f      	beq.n	8006a22 <TIM_Base_SetConfig+0x8a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a2e      	ldr	r2, [pc, #184]	@ (8006ac0 <TIM_Base_SetConfig+0x128>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d00b      	beq.n	8006a22 <TIM_Base_SetConfig+0x8a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a2d      	ldr	r2, [pc, #180]	@ (8006ac4 <TIM_Base_SetConfig+0x12c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d007      	beq.n	8006a22 <TIM_Base_SetConfig+0x8a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a2c      	ldr	r2, [pc, #176]	@ (8006ac8 <TIM_Base_SetConfig+0x130>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d003      	beq.n	8006a22 <TIM_Base_SetConfig+0x8a>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8006acc <TIM_Base_SetConfig+0x134>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d108      	bne.n	8006a34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a16      	ldr	r2, [pc, #88]	@ (8006ab4 <TIM_Base_SetConfig+0x11c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00f      	beq.n	8006a80 <TIM_Base_SetConfig+0xe8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a17      	ldr	r2, [pc, #92]	@ (8006ac0 <TIM_Base_SetConfig+0x128>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d00b      	beq.n	8006a80 <TIM_Base_SetConfig+0xe8>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a16      	ldr	r2, [pc, #88]	@ (8006ac4 <TIM_Base_SetConfig+0x12c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d007      	beq.n	8006a80 <TIM_Base_SetConfig+0xe8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a15      	ldr	r2, [pc, #84]	@ (8006ac8 <TIM_Base_SetConfig+0x130>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d003      	beq.n	8006a80 <TIM_Base_SetConfig+0xe8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a14      	ldr	r2, [pc, #80]	@ (8006acc <TIM_Base_SetConfig+0x134>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d103      	bne.n	8006a88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	691a      	ldr	r2, [r3, #16]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d105      	bne.n	8006aa6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f023 0201 	bic.w	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	611a      	str	r2, [r3, #16]
  }
}
 8006aa6:	bf00      	nop
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	40012c00 	.word	0x40012c00
 8006ab8:	40000400 	.word	0x40000400
 8006abc:	40000800 	.word	0x40000800
 8006ac0:	40013400 	.word	0x40013400
 8006ac4:	40014000 	.word	0x40014000
 8006ac8:	40014400 	.word	0x40014400
 8006acc:	40014800 	.word	0x40014800

08006ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f023 0201 	bic.w	r2, r3, #1
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f023 030a 	bic.w	r3, r3, #10
 8006b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	621a      	str	r2, [r3, #32]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b087      	sub	sp, #28
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	60f8      	str	r0, [r7, #12]
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	f023 0210 	bic.w	r2, r3, #16
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	031b      	lsls	r3, r3, #12
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b6a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	621a      	str	r2, [r3, #32]
}
 8006b82:	bf00      	nop
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b085      	sub	sp, #20
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	f043 0307 	orr.w	r3, r3, #7
 8006bb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	609a      	str	r2, [r3, #8]
}
 8006bbc:	bf00      	nop
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
 8006bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	021a      	lsls	r2, r3, #8
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	431a      	orrs	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	609a      	str	r2, [r3, #8]
}
 8006bfc:	bf00      	nop
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e065      	b.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a2c      	ldr	r2, [pc, #176]	@ (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d004      	beq.n	8006c54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d108      	bne.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006c6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d018      	beq.n	8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c96:	d013      	beq.n	8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a18      	ldr	r2, [pc, #96]	@ (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00e      	beq.n	8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a17      	ldr	r2, [pc, #92]	@ (8006d04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d009      	beq.n	8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a12      	ldr	r2, [pc, #72]	@ (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d004      	beq.n	8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a13      	ldr	r2, [pc, #76]	@ (8006d08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d10c      	bne.n	8006cda <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	40012c00 	.word	0x40012c00
 8006cfc:	40013400 	.word	0x40013400
 8006d00:	40000400 	.word	0x40000400
 8006d04:	40000800 	.word	0x40000800
 8006d08:	40014000 	.word	0x40014000

08006d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e042      	b.n	8006e30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d106      	bne.n	8006dc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7fb fb7f 	bl	80024c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2224      	movs	r2, #36	@ 0x24
 8006dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0201 	bic.w	r2, r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 ff04 	bl	8007bf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fc35 	bl	8007658 <UART_SetConfig>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e01b      	b.n	8006e30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 ff83 	bl	8007d34 <UART_CheckIdleState>
 8006e2e:	4603      	mov	r3, r0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08a      	sub	sp, #40	@ 0x28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	4613      	mov	r3, r2
 8006e44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e4c:	2b20      	cmp	r3, #32
 8006e4e:	d137      	bne.n	8006ec0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <HAL_UART_Receive_IT+0x24>
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e030      	b.n	8006ec2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a18      	ldr	r2, [pc, #96]	@ (8006ecc <HAL_UART_Receive_IT+0x94>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d01f      	beq.n	8006eb0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d018      	beq.n	8006eb0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	e853 3f00 	ldrex	r3, [r3]
 8006e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	623b      	str	r3, [r7, #32]
 8006e9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea0:	69f9      	ldr	r1, [r7, #28]
 8006ea2:	6a3a      	ldr	r2, [r7, #32]
 8006ea4:	e841 2300 	strex	r3, r2, [r1]
 8006ea8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1e6      	bne.n	8006e7e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006eb0:	88fb      	ldrh	r3, [r7, #6]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	68b9      	ldr	r1, [r7, #8]
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f001 f854 	bl	8007f64 <UART_Start_Receive_IT>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	e000      	b.n	8006ec2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ec0:	2302      	movs	r3, #2
  }
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3728      	adds	r7, #40	@ 0x28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	40008000 	.word	0x40008000

08006ed0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08a      	sub	sp, #40	@ 0x28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	4613      	mov	r3, r2
 8006edc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	d167      	bne.n	8006fb8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <HAL_UART_Transmit_DMA+0x24>
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e060      	b.n	8006fba <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	88fa      	ldrh	r2, [r7, #6]
 8006f02:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	88fa      	ldrh	r2, [r7, #6]
 8006f0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2221      	movs	r2, #33	@ 0x21
 8006f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d028      	beq.n	8006f78 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f2a:	4a26      	ldr	r2, [pc, #152]	@ (8006fc4 <HAL_UART_Transmit_DMA+0xf4>)
 8006f2c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f32:	4a25      	ldr	r2, [pc, #148]	@ (8006fc8 <HAL_UART_Transmit_DMA+0xf8>)
 8006f34:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f3a:	4a24      	ldr	r2, [pc, #144]	@ (8006fcc <HAL_UART_Transmit_DMA+0xfc>)
 8006f3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f42:	2200      	movs	r2, #0
 8006f44:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f4e:	4619      	mov	r1, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3328      	adds	r3, #40	@ 0x28
 8006f56:	461a      	mov	r2, r3
 8006f58:	88fb      	ldrh	r3, [r7, #6]
 8006f5a:	f7fd fd1f 	bl	800499c <HAL_DMA_Start_IT>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d009      	beq.n	8006f78 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2210      	movs	r2, #16
 8006f68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e020      	b.n	8006fba <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2240      	movs	r2, #64	@ 0x40
 8006f7e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3308      	adds	r3, #8
 8006f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fa0:	623a      	str	r2, [r7, #32]
 8006fa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	69f9      	ldr	r1, [r7, #28]
 8006fa6:	6a3a      	ldr	r2, [r7, #32]
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e5      	bne.n	8006f80 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e000      	b.n	8006fba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006fb8:	2302      	movs	r3, #2
  }
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3728      	adds	r7, #40	@ 0x28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	080082f7 	.word	0x080082f7
 8006fc8:	08008391 	.word	0x08008391
 8006fcc:	080083ad 	.word	0x080083ad

08006fd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b0ba      	sub	sp, #232	@ 0xe8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ff6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006ffa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006ffe:	4013      	ands	r3, r2
 8007000:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007004:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007008:	2b00      	cmp	r3, #0
 800700a:	d11b      	bne.n	8007044 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800700c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007010:	f003 0320 	and.w	r3, r3, #32
 8007014:	2b00      	cmp	r3, #0
 8007016:	d015      	beq.n	8007044 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800701c:	f003 0320 	and.w	r3, r3, #32
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d009      	beq.n	8007044 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 82e3 	beq.w	8007600 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	4798      	blx	r3
      }
      return;
 8007042:	e2dd      	b.n	8007600 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 8123 	beq.w	8007294 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800704e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007052:	4b8d      	ldr	r3, [pc, #564]	@ (8007288 <HAL_UART_IRQHandler+0x2b8>)
 8007054:	4013      	ands	r3, r2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d106      	bne.n	8007068 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800705a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800705e:	4b8b      	ldr	r3, [pc, #556]	@ (800728c <HAL_UART_IRQHandler+0x2bc>)
 8007060:	4013      	ands	r3, r2
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 8116 	beq.w	8007294 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	2b00      	cmp	r3, #0
 8007072:	d011      	beq.n	8007098 <HAL_UART_IRQHandler+0xc8>
 8007074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00b      	beq.n	8007098 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2201      	movs	r2, #1
 8007086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800708e:	f043 0201 	orr.w	r2, r3, #1
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d011      	beq.n	80070c8 <HAL_UART_IRQHandler+0xf8>
 80070a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00b      	beq.n	80070c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2202      	movs	r2, #2
 80070b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070be:	f043 0204 	orr.w	r2, r3, #4
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d011      	beq.n	80070f8 <HAL_UART_IRQHandler+0x128>
 80070d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00b      	beq.n	80070f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2204      	movs	r2, #4
 80070e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ee:	f043 0202 	orr.w	r2, r3, #2
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d017      	beq.n	8007134 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b00      	cmp	r3, #0
 800710e:	d105      	bne.n	800711c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007110:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007114:	4b5c      	ldr	r3, [pc, #368]	@ (8007288 <HAL_UART_IRQHandler+0x2b8>)
 8007116:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00b      	beq.n	8007134 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2208      	movs	r2, #8
 8007122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800712a:	f043 0208 	orr.w	r2, r3, #8
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800713c:	2b00      	cmp	r3, #0
 800713e:	d012      	beq.n	8007166 <HAL_UART_IRQHandler+0x196>
 8007140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007144:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00c      	beq.n	8007166 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800715c:	f043 0220 	orr.w	r2, r3, #32
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8249 	beq.w	8007604 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d013      	beq.n	80071a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800717e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b00      	cmp	r3, #0
 8007188:	d105      	bne.n	8007196 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800718a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800718e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d007      	beq.n	80071a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ba:	2b40      	cmp	r3, #64	@ 0x40
 80071bc:	d005      	beq.n	80071ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d054      	beq.n	8007274 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 f82d 	bl	800822a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071da:	2b40      	cmp	r3, #64	@ 0x40
 80071dc:	d146      	bne.n	800726c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3308      	adds	r3, #8
 80071e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80071f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3308      	adds	r3, #8
 8007206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800720a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800720e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1d9      	bne.n	80071de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007230:	2b00      	cmp	r3, #0
 8007232:	d017      	beq.n	8007264 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800723a:	4a15      	ldr	r2, [pc, #84]	@ (8007290 <HAL_UART_IRQHandler+0x2c0>)
 800723c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007244:	4618      	mov	r0, r3
 8007246:	f7fd fc7d 	bl	8004b44 <HAL_DMA_Abort_IT>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d019      	beq.n	8007284 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800725e:	4610      	mov	r0, r2
 8007260:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007262:	e00f      	b.n	8007284 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f9e1 	bl	800762c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726a:	e00b      	b.n	8007284 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f9dd 	bl	800762c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007272:	e007      	b.n	8007284 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f9d9 	bl	800762c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007282:	e1bf      	b.n	8007604 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	bf00      	nop
    return;
 8007286:	e1bd      	b.n	8007604 <HAL_UART_IRQHandler+0x634>
 8007288:	10000001 	.word	0x10000001
 800728c:	04000120 	.word	0x04000120
 8007290:	0800842d 	.word	0x0800842d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007298:	2b01      	cmp	r3, #1
 800729a:	f040 8153 	bne.w	8007544 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800729e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072a2:	f003 0310 	and.w	r3, r3, #16
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 814c 	beq.w	8007544 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072b0:	f003 0310 	and.w	r3, r3, #16
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 8145 	beq.w	8007544 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2210      	movs	r2, #16
 80072c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072cc:	2b40      	cmp	r3, #64	@ 0x40
 80072ce:	f040 80bb 	bne.w	8007448 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 818f 	beq.w	8007608 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072f4:	429a      	cmp	r2, r3
 80072f6:	f080 8187 	bcs.w	8007608 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007300:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0320 	and.w	r3, r3, #32
 8007312:	2b00      	cmp	r3, #0
 8007314:	f040 8087 	bne.w	8007426 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800732c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007342:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007346:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800734e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800735a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1da      	bne.n	8007318 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3308      	adds	r3, #8
 8007368:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007372:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007374:	f023 0301 	bic.w	r3, r3, #1
 8007378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3308      	adds	r3, #8
 8007382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007386:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800738a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800738e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e1      	bne.n	8007362 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3308      	adds	r3, #8
 80073a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80073ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3308      	adds	r3, #8
 80073be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80073c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80073c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80073d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e3      	bne.n	800739e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2220      	movs	r2, #32
 80073da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073f4:	f023 0310 	bic.w	r3, r3, #16
 80073f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007406:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007408:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800740c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e4      	bne.n	80073e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007420:	4618      	mov	r0, r3
 8007422:	f7fd fb36 	bl	8004a92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2202      	movs	r2, #2
 800742a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007438:	b29b      	uxth	r3, r3
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	b29b      	uxth	r3, r3
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f8fd 	bl	8007640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007446:	e0df      	b.n	8007608 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007454:	b29b      	uxth	r3, r3
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 80d1 	beq.w	800760c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800746a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 80cc 	beq.w	800760c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007488:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	461a      	mov	r2, r3
 8007492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007496:	647b      	str	r3, [r7, #68]	@ 0x44
 8007498:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800749c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e4      	bne.n	8007474 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3308      	adds	r3, #8
 80074b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	623b      	str	r3, [r7, #32]
   return(result);
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074c0:	f023 0301 	bic.w	r3, r3, #1
 80074c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3308      	adds	r3, #8
 80074ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80074d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80074d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e1      	bne.n	80074aa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	60fb      	str	r3, [r7, #12]
   return(result);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0310 	bic.w	r3, r3, #16
 800750e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800751c:	61fb      	str	r3, [r7, #28]
 800751e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	69b9      	ldr	r1, [r7, #24]
 8007522:	69fa      	ldr	r2, [r7, #28]
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	617b      	str	r3, [r7, #20]
   return(result);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e4      	bne.n	80074fa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007536:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f87f 	bl	8007640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007542:	e063      	b.n	800760c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007548:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00e      	beq.n	800756e <HAL_UART_IRQHandler+0x59e>
 8007550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007554:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d008      	beq.n	800756e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007564:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f001 fcbe 	bl	8008ee8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800756c:	e051      	b.n	8007612 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800756e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007576:	2b00      	cmp	r3, #0
 8007578:	d014      	beq.n	80075a4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800757a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800757e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007582:	2b00      	cmp	r3, #0
 8007584:	d105      	bne.n	8007592 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800758a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d008      	beq.n	80075a4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007596:	2b00      	cmp	r3, #0
 8007598:	d03a      	beq.n	8007610 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	4798      	blx	r3
    }
    return;
 80075a2:	e035      	b.n	8007610 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d009      	beq.n	80075c4 <HAL_UART_IRQHandler+0x5f4>
 80075b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 ff4b 	bl	8008458 <UART_EndTransmit_IT>
    return;
 80075c2:	e026      	b.n	8007612 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80075c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d009      	beq.n	80075e4 <HAL_UART_IRQHandler+0x614>
 80075d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 fc97 	bl	8008f10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075e2:	e016      	b.n	8007612 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80075e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d010      	beq.n	8007612 <HAL_UART_IRQHandler+0x642>
 80075f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	da0c      	bge.n	8007612 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 fc7f 	bl	8008efc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075fe:	e008      	b.n	8007612 <HAL_UART_IRQHandler+0x642>
      return;
 8007600:	bf00      	nop
 8007602:	e006      	b.n	8007612 <HAL_UART_IRQHandler+0x642>
    return;
 8007604:	bf00      	nop
 8007606:	e004      	b.n	8007612 <HAL_UART_IRQHandler+0x642>
      return;
 8007608:	bf00      	nop
 800760a:	e002      	b.n	8007612 <HAL_UART_IRQHandler+0x642>
      return;
 800760c:	bf00      	nop
 800760e:	e000      	b.n	8007612 <HAL_UART_IRQHandler+0x642>
    return;
 8007610:	bf00      	nop
  }
}
 8007612:	37e8      	adds	r7, #232	@ 0xe8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800765c:	b08c      	sub	sp, #48	@ 0x30
 800765e:	af00      	add	r7, sp, #0
 8007660:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	431a      	orrs	r2, r3
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	431a      	orrs	r2, r3
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	4313      	orrs	r3, r2
 800767e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	4bab      	ldr	r3, [pc, #684]	@ (8007934 <UART_SetConfig+0x2dc>)
 8007688:	4013      	ands	r3, r2
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007690:	430b      	orrs	r3, r1
 8007692:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	68da      	ldr	r2, [r3, #12]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4aa0      	ldr	r2, [pc, #640]	@ (8007938 <UART_SetConfig+0x2e0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d004      	beq.n	80076c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076c0:	4313      	orrs	r3, r2
 80076c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80076ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	6812      	ldr	r2, [r2, #0]
 80076d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076d8:	430b      	orrs	r3, r1
 80076da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e2:	f023 010f 	bic.w	r1, r3, #15
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a91      	ldr	r2, [pc, #580]	@ (800793c <UART_SetConfig+0x2e4>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d125      	bne.n	8007748 <UART_SetConfig+0xf0>
 80076fc:	4b90      	ldr	r3, [pc, #576]	@ (8007940 <UART_SetConfig+0x2e8>)
 80076fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007702:	f003 0303 	and.w	r3, r3, #3
 8007706:	2b03      	cmp	r3, #3
 8007708:	d81a      	bhi.n	8007740 <UART_SetConfig+0xe8>
 800770a:	a201      	add	r2, pc, #4	@ (adr r2, 8007710 <UART_SetConfig+0xb8>)
 800770c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007710:	08007721 	.word	0x08007721
 8007714:	08007731 	.word	0x08007731
 8007718:	08007729 	.word	0x08007729
 800771c:	08007739 	.word	0x08007739
 8007720:	2301      	movs	r3, #1
 8007722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007726:	e0d6      	b.n	80078d6 <UART_SetConfig+0x27e>
 8007728:	2302      	movs	r3, #2
 800772a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800772e:	e0d2      	b.n	80078d6 <UART_SetConfig+0x27e>
 8007730:	2304      	movs	r3, #4
 8007732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007736:	e0ce      	b.n	80078d6 <UART_SetConfig+0x27e>
 8007738:	2308      	movs	r3, #8
 800773a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800773e:	e0ca      	b.n	80078d6 <UART_SetConfig+0x27e>
 8007740:	2310      	movs	r3, #16
 8007742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007746:	e0c6      	b.n	80078d6 <UART_SetConfig+0x27e>
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a7d      	ldr	r2, [pc, #500]	@ (8007944 <UART_SetConfig+0x2ec>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d138      	bne.n	80077c4 <UART_SetConfig+0x16c>
 8007752:	4b7b      	ldr	r3, [pc, #492]	@ (8007940 <UART_SetConfig+0x2e8>)
 8007754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007758:	f003 030c 	and.w	r3, r3, #12
 800775c:	2b0c      	cmp	r3, #12
 800775e:	d82d      	bhi.n	80077bc <UART_SetConfig+0x164>
 8007760:	a201      	add	r2, pc, #4	@ (adr r2, 8007768 <UART_SetConfig+0x110>)
 8007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007766:	bf00      	nop
 8007768:	0800779d 	.word	0x0800779d
 800776c:	080077bd 	.word	0x080077bd
 8007770:	080077bd 	.word	0x080077bd
 8007774:	080077bd 	.word	0x080077bd
 8007778:	080077ad 	.word	0x080077ad
 800777c:	080077bd 	.word	0x080077bd
 8007780:	080077bd 	.word	0x080077bd
 8007784:	080077bd 	.word	0x080077bd
 8007788:	080077a5 	.word	0x080077a5
 800778c:	080077bd 	.word	0x080077bd
 8007790:	080077bd 	.word	0x080077bd
 8007794:	080077bd 	.word	0x080077bd
 8007798:	080077b5 	.word	0x080077b5
 800779c:	2300      	movs	r3, #0
 800779e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077a2:	e098      	b.n	80078d6 <UART_SetConfig+0x27e>
 80077a4:	2302      	movs	r3, #2
 80077a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077aa:	e094      	b.n	80078d6 <UART_SetConfig+0x27e>
 80077ac:	2304      	movs	r3, #4
 80077ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077b2:	e090      	b.n	80078d6 <UART_SetConfig+0x27e>
 80077b4:	2308      	movs	r3, #8
 80077b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ba:	e08c      	b.n	80078d6 <UART_SetConfig+0x27e>
 80077bc:	2310      	movs	r3, #16
 80077be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077c2:	e088      	b.n	80078d6 <UART_SetConfig+0x27e>
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a5f      	ldr	r2, [pc, #380]	@ (8007948 <UART_SetConfig+0x2f0>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d125      	bne.n	800781a <UART_SetConfig+0x1c2>
 80077ce:	4b5c      	ldr	r3, [pc, #368]	@ (8007940 <UART_SetConfig+0x2e8>)
 80077d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80077d8:	2b30      	cmp	r3, #48	@ 0x30
 80077da:	d016      	beq.n	800780a <UART_SetConfig+0x1b2>
 80077dc:	2b30      	cmp	r3, #48	@ 0x30
 80077de:	d818      	bhi.n	8007812 <UART_SetConfig+0x1ba>
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	d00a      	beq.n	80077fa <UART_SetConfig+0x1a2>
 80077e4:	2b20      	cmp	r3, #32
 80077e6:	d814      	bhi.n	8007812 <UART_SetConfig+0x1ba>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <UART_SetConfig+0x19a>
 80077ec:	2b10      	cmp	r3, #16
 80077ee:	d008      	beq.n	8007802 <UART_SetConfig+0x1aa>
 80077f0:	e00f      	b.n	8007812 <UART_SetConfig+0x1ba>
 80077f2:	2300      	movs	r3, #0
 80077f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077f8:	e06d      	b.n	80078d6 <UART_SetConfig+0x27e>
 80077fa:	2302      	movs	r3, #2
 80077fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007800:	e069      	b.n	80078d6 <UART_SetConfig+0x27e>
 8007802:	2304      	movs	r3, #4
 8007804:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007808:	e065      	b.n	80078d6 <UART_SetConfig+0x27e>
 800780a:	2308      	movs	r3, #8
 800780c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007810:	e061      	b.n	80078d6 <UART_SetConfig+0x27e>
 8007812:	2310      	movs	r3, #16
 8007814:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007818:	e05d      	b.n	80078d6 <UART_SetConfig+0x27e>
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a4b      	ldr	r2, [pc, #300]	@ (800794c <UART_SetConfig+0x2f4>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d125      	bne.n	8007870 <UART_SetConfig+0x218>
 8007824:	4b46      	ldr	r3, [pc, #280]	@ (8007940 <UART_SetConfig+0x2e8>)
 8007826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800782a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800782e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007830:	d016      	beq.n	8007860 <UART_SetConfig+0x208>
 8007832:	2bc0      	cmp	r3, #192	@ 0xc0
 8007834:	d818      	bhi.n	8007868 <UART_SetConfig+0x210>
 8007836:	2b80      	cmp	r3, #128	@ 0x80
 8007838:	d00a      	beq.n	8007850 <UART_SetConfig+0x1f8>
 800783a:	2b80      	cmp	r3, #128	@ 0x80
 800783c:	d814      	bhi.n	8007868 <UART_SetConfig+0x210>
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <UART_SetConfig+0x1f0>
 8007842:	2b40      	cmp	r3, #64	@ 0x40
 8007844:	d008      	beq.n	8007858 <UART_SetConfig+0x200>
 8007846:	e00f      	b.n	8007868 <UART_SetConfig+0x210>
 8007848:	2300      	movs	r3, #0
 800784a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800784e:	e042      	b.n	80078d6 <UART_SetConfig+0x27e>
 8007850:	2302      	movs	r3, #2
 8007852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007856:	e03e      	b.n	80078d6 <UART_SetConfig+0x27e>
 8007858:	2304      	movs	r3, #4
 800785a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800785e:	e03a      	b.n	80078d6 <UART_SetConfig+0x27e>
 8007860:	2308      	movs	r3, #8
 8007862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007866:	e036      	b.n	80078d6 <UART_SetConfig+0x27e>
 8007868:	2310      	movs	r3, #16
 800786a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800786e:	e032      	b.n	80078d6 <UART_SetConfig+0x27e>
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a30      	ldr	r2, [pc, #192]	@ (8007938 <UART_SetConfig+0x2e0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d12a      	bne.n	80078d0 <UART_SetConfig+0x278>
 800787a:	4b31      	ldr	r3, [pc, #196]	@ (8007940 <UART_SetConfig+0x2e8>)
 800787c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007880:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007884:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007888:	d01a      	beq.n	80078c0 <UART_SetConfig+0x268>
 800788a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800788e:	d81b      	bhi.n	80078c8 <UART_SetConfig+0x270>
 8007890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007894:	d00c      	beq.n	80078b0 <UART_SetConfig+0x258>
 8007896:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800789a:	d815      	bhi.n	80078c8 <UART_SetConfig+0x270>
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <UART_SetConfig+0x250>
 80078a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078a4:	d008      	beq.n	80078b8 <UART_SetConfig+0x260>
 80078a6:	e00f      	b.n	80078c8 <UART_SetConfig+0x270>
 80078a8:	2300      	movs	r3, #0
 80078aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ae:	e012      	b.n	80078d6 <UART_SetConfig+0x27e>
 80078b0:	2302      	movs	r3, #2
 80078b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078b6:	e00e      	b.n	80078d6 <UART_SetConfig+0x27e>
 80078b8:	2304      	movs	r3, #4
 80078ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078be:	e00a      	b.n	80078d6 <UART_SetConfig+0x27e>
 80078c0:	2308      	movs	r3, #8
 80078c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078c6:	e006      	b.n	80078d6 <UART_SetConfig+0x27e>
 80078c8:	2310      	movs	r3, #16
 80078ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ce:	e002      	b.n	80078d6 <UART_SetConfig+0x27e>
 80078d0:	2310      	movs	r3, #16
 80078d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a17      	ldr	r2, [pc, #92]	@ (8007938 <UART_SetConfig+0x2e0>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	f040 80a8 	bne.w	8007a32 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078e6:	2b08      	cmp	r3, #8
 80078e8:	d834      	bhi.n	8007954 <UART_SetConfig+0x2fc>
 80078ea:	a201      	add	r2, pc, #4	@ (adr r2, 80078f0 <UART_SetConfig+0x298>)
 80078ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f0:	08007915 	.word	0x08007915
 80078f4:	08007955 	.word	0x08007955
 80078f8:	0800791d 	.word	0x0800791d
 80078fc:	08007955 	.word	0x08007955
 8007900:	08007923 	.word	0x08007923
 8007904:	08007955 	.word	0x08007955
 8007908:	08007955 	.word	0x08007955
 800790c:	08007955 	.word	0x08007955
 8007910:	0800792b 	.word	0x0800792b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007914:	f7fe f9ee 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 8007918:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800791a:	e021      	b.n	8007960 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800791c:	4b0c      	ldr	r3, [pc, #48]	@ (8007950 <UART_SetConfig+0x2f8>)
 800791e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007920:	e01e      	b.n	8007960 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007922:	f7fe f979 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8007926:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007928:	e01a      	b.n	8007960 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800792a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800792e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007930:	e016      	b.n	8007960 <UART_SetConfig+0x308>
 8007932:	bf00      	nop
 8007934:	cfff69f3 	.word	0xcfff69f3
 8007938:	40008000 	.word	0x40008000
 800793c:	40013800 	.word	0x40013800
 8007940:	40021000 	.word	0x40021000
 8007944:	40004400 	.word	0x40004400
 8007948:	40004800 	.word	0x40004800
 800794c:	40004c00 	.word	0x40004c00
 8007950:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800795e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 812a 	beq.w	8007bbc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796c:	4a9e      	ldr	r2, [pc, #632]	@ (8007be8 <UART_SetConfig+0x590>)
 800796e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007972:	461a      	mov	r2, r3
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	fbb3 f3f2 	udiv	r3, r3, r2
 800797a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	4613      	mov	r3, r2
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	4413      	add	r3, r2
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	429a      	cmp	r2, r3
 800798a:	d305      	bcc.n	8007998 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	429a      	cmp	r2, r3
 8007996:	d903      	bls.n	80079a0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800799e:	e10d      	b.n	8007bbc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a2:	2200      	movs	r2, #0
 80079a4:	60bb      	str	r3, [r7, #8]
 80079a6:	60fa      	str	r2, [r7, #12]
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ac:	4a8e      	ldr	r2, [pc, #568]	@ (8007be8 <UART_SetConfig+0x590>)
 80079ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2200      	movs	r2, #0
 80079b6:	603b      	str	r3, [r7, #0]
 80079b8:	607a      	str	r2, [r7, #4]
 80079ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079c2:	f7f9 f979 	bl	8000cb8 <__aeabi_uldivmod>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4610      	mov	r0, r2
 80079cc:	4619      	mov	r1, r3
 80079ce:	f04f 0200 	mov.w	r2, #0
 80079d2:	f04f 0300 	mov.w	r3, #0
 80079d6:	020b      	lsls	r3, r1, #8
 80079d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079dc:	0202      	lsls	r2, r0, #8
 80079de:	6979      	ldr	r1, [r7, #20]
 80079e0:	6849      	ldr	r1, [r1, #4]
 80079e2:	0849      	lsrs	r1, r1, #1
 80079e4:	2000      	movs	r0, #0
 80079e6:	460c      	mov	r4, r1
 80079e8:	4605      	mov	r5, r0
 80079ea:	eb12 0804 	adds.w	r8, r2, r4
 80079ee:	eb43 0905 	adc.w	r9, r3, r5
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	469a      	mov	sl, r3
 80079fa:	4693      	mov	fp, r2
 80079fc:	4652      	mov	r2, sl
 80079fe:	465b      	mov	r3, fp
 8007a00:	4640      	mov	r0, r8
 8007a02:	4649      	mov	r1, r9
 8007a04:	f7f9 f958 	bl	8000cb8 <__aeabi_uldivmod>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a16:	d308      	bcc.n	8007a2a <UART_SetConfig+0x3d2>
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a1e:	d204      	bcs.n	8007a2a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6a3a      	ldr	r2, [r7, #32]
 8007a26:	60da      	str	r2, [r3, #12]
 8007a28:	e0c8      	b.n	8007bbc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a30:	e0c4      	b.n	8007bbc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a3a:	d167      	bne.n	8007b0c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007a3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a40:	2b08      	cmp	r3, #8
 8007a42:	d828      	bhi.n	8007a96 <UART_SetConfig+0x43e>
 8007a44:	a201      	add	r2, pc, #4	@ (adr r2, 8007a4c <UART_SetConfig+0x3f4>)
 8007a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4a:	bf00      	nop
 8007a4c:	08007a71 	.word	0x08007a71
 8007a50:	08007a79 	.word	0x08007a79
 8007a54:	08007a81 	.word	0x08007a81
 8007a58:	08007a97 	.word	0x08007a97
 8007a5c:	08007a87 	.word	0x08007a87
 8007a60:	08007a97 	.word	0x08007a97
 8007a64:	08007a97 	.word	0x08007a97
 8007a68:	08007a97 	.word	0x08007a97
 8007a6c:	08007a8f 	.word	0x08007a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a70:	f7fe f940 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 8007a74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a76:	e014      	b.n	8007aa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a78:	f7fe f952 	bl	8005d20 <HAL_RCC_GetPCLK2Freq>
 8007a7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a7e:	e010      	b.n	8007aa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a80:	4b5a      	ldr	r3, [pc, #360]	@ (8007bec <UART_SetConfig+0x594>)
 8007a82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a84:	e00d      	b.n	8007aa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a86:	f7fe f8c7 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8007a8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a8c:	e009      	b.n	8007aa2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a94:	e005      	b.n	8007aa2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007aa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 8089 	beq.w	8007bbc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aae:	4a4e      	ldr	r2, [pc, #312]	@ (8007be8 <UART_SetConfig+0x590>)
 8007ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007abc:	005a      	lsls	r2, r3, #1
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	085b      	lsrs	r3, r3, #1
 8007ac4:	441a      	add	r2, r3
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ace:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	2b0f      	cmp	r3, #15
 8007ad4:	d916      	bls.n	8007b04 <UART_SetConfig+0x4ac>
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007adc:	d212      	bcs.n	8007b04 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	f023 030f 	bic.w	r3, r3, #15
 8007ae6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	f003 0307 	and.w	r3, r3, #7
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	8bfb      	ldrh	r3, [r7, #30]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	8bfa      	ldrh	r2, [r7, #30]
 8007b00:	60da      	str	r2, [r3, #12]
 8007b02:	e05b      	b.n	8007bbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b0a:	e057      	b.n	8007bbc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	d828      	bhi.n	8007b66 <UART_SetConfig+0x50e>
 8007b14:	a201      	add	r2, pc, #4	@ (adr r2, 8007b1c <UART_SetConfig+0x4c4>)
 8007b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1a:	bf00      	nop
 8007b1c:	08007b41 	.word	0x08007b41
 8007b20:	08007b49 	.word	0x08007b49
 8007b24:	08007b51 	.word	0x08007b51
 8007b28:	08007b67 	.word	0x08007b67
 8007b2c:	08007b57 	.word	0x08007b57
 8007b30:	08007b67 	.word	0x08007b67
 8007b34:	08007b67 	.word	0x08007b67
 8007b38:	08007b67 	.word	0x08007b67
 8007b3c:	08007b5f 	.word	0x08007b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b40:	f7fe f8d8 	bl	8005cf4 <HAL_RCC_GetPCLK1Freq>
 8007b44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b46:	e014      	b.n	8007b72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b48:	f7fe f8ea 	bl	8005d20 <HAL_RCC_GetPCLK2Freq>
 8007b4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b4e:	e010      	b.n	8007b72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b50:	4b26      	ldr	r3, [pc, #152]	@ (8007bec <UART_SetConfig+0x594>)
 8007b52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b54:	e00d      	b.n	8007b72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b56:	f7fe f85f 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8007b5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b5c:	e009      	b.n	8007b72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b64:	e005      	b.n	8007b72 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b70:	bf00      	nop
    }

    if (pclk != 0U)
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d021      	beq.n	8007bbc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8007be8 <UART_SetConfig+0x590>)
 8007b7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b82:	461a      	mov	r2, r3
 8007b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b86:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	085b      	lsrs	r3, r3, #1
 8007b90:	441a      	add	r2, r3
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	2b0f      	cmp	r3, #15
 8007ba0:	d909      	bls.n	8007bb6 <UART_SetConfig+0x55e>
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ba8:	d205      	bcs.n	8007bb6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60da      	str	r2, [r3, #12]
 8007bb4:	e002      	b.n	8007bbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007bd8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3730      	adds	r7, #48	@ 0x30
 8007be0:	46bd      	mov	sp, r7
 8007be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007be6:	bf00      	nop
 8007be8:	08011410 	.word	0x08011410
 8007bec:	00f42400 	.word	0x00f42400

08007bf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c40:	f003 0302 	and.w	r3, r3, #2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c62:	f003 0304 	and.w	r3, r3, #4
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c84:	f003 0310 	and.w	r3, r3, #16
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca6:	f003 0320 	and.w	r3, r3, #32
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d01a      	beq.n	8007d06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cee:	d10a      	bne.n	8007d06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	605a      	str	r2, [r3, #4]
  }
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b098      	sub	sp, #96	@ 0x60
 8007d38:	af02      	add	r7, sp, #8
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d44:	f7fa fe8c 	bl	8002a60 <HAL_GetTick>
 8007d48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d12f      	bne.n	8007db8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d60:	2200      	movs	r2, #0
 8007d62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f88e 	bl	8007e88 <UART_WaitOnFlagUntilTimeout>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d022      	beq.n	8007db8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d86:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d90:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e6      	bne.n	8007d72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e063      	b.n	8007e80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0304 	and.w	r3, r3, #4
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d149      	bne.n	8007e5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f857 	bl	8007e88 <UART_WaitOnFlagUntilTimeout>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d03c      	beq.n	8007e5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	623b      	str	r3, [r7, #32]
   return(result);
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e6      	bne.n	8007de0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3308      	adds	r3, #8
 8007e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f023 0301 	bic.w	r3, r3, #1
 8007e28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3308      	adds	r3, #8
 8007e30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e32:	61fa      	str	r2, [r7, #28]
 8007e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	69b9      	ldr	r1, [r7, #24]
 8007e38:	69fa      	ldr	r2, [r7, #28]
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e5      	bne.n	8007e12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e012      	b.n	8007e80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3758      	adds	r7, #88	@ 0x58
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	603b      	str	r3, [r7, #0]
 8007e94:	4613      	mov	r3, r2
 8007e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e98:	e04f      	b.n	8007f3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea0:	d04b      	beq.n	8007f3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ea2:	f7fa fddd 	bl	8002a60 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d302      	bcc.n	8007eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e04e      	b.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0304 	and.w	r3, r3, #4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d037      	beq.n	8007f3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b80      	cmp	r3, #128	@ 0x80
 8007ece:	d034      	beq.n	8007f3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2b40      	cmp	r3, #64	@ 0x40
 8007ed4:	d031      	beq.n	8007f3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	f003 0308 	and.w	r3, r3, #8
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d110      	bne.n	8007f06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2208      	movs	r2, #8
 8007eea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 f99c 	bl	800822a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2208      	movs	r2, #8
 8007ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e029      	b.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f14:	d111      	bne.n	8007f3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f982 	bl	800822a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e00f      	b.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4013      	ands	r3, r2
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	bf0c      	ite	eq
 8007f4a:	2301      	moveq	r3, #1
 8007f4c:	2300      	movne	r3, #0
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	461a      	mov	r2, r3
 8007f52:	79fb      	ldrb	r3, [r7, #7]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d0a0      	beq.n	8007e9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b0a3      	sub	sp, #140	@ 0x8c
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	88fa      	ldrh	r2, [r7, #6]
 8007f7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	88fa      	ldrh	r2, [r7, #6]
 8007f84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f96:	d10e      	bne.n	8007fb6 <UART_Start_Receive_IT+0x52>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d105      	bne.n	8007fac <UART_Start_Receive_IT+0x48>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007fa6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007faa:	e02d      	b.n	8008008 <UART_Start_Receive_IT+0xa4>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	22ff      	movs	r2, #255	@ 0xff
 8007fb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007fb4:	e028      	b.n	8008008 <UART_Start_Receive_IT+0xa4>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10d      	bne.n	8007fda <UART_Start_Receive_IT+0x76>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d104      	bne.n	8007fd0 <UART_Start_Receive_IT+0x6c>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	22ff      	movs	r2, #255	@ 0xff
 8007fca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007fce:	e01b      	b.n	8008008 <UART_Start_Receive_IT+0xa4>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	227f      	movs	r2, #127	@ 0x7f
 8007fd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007fd8:	e016      	b.n	8008008 <UART_Start_Receive_IT+0xa4>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fe2:	d10d      	bne.n	8008000 <UART_Start_Receive_IT+0x9c>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d104      	bne.n	8007ff6 <UART_Start_Receive_IT+0x92>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	227f      	movs	r2, #127	@ 0x7f
 8007ff0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ff4:	e008      	b.n	8008008 <UART_Start_Receive_IT+0xa4>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	223f      	movs	r2, #63	@ 0x3f
 8007ffa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ffe:	e003      	b.n	8008008 <UART_Start_Receive_IT+0xa4>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2222      	movs	r2, #34	@ 0x22
 8008014:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3308      	adds	r3, #8
 800801e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008028:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800802a:	f043 0301 	orr.w	r3, r3, #1
 800802e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3308      	adds	r3, #8
 8008038:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800803c:	673a      	str	r2, [r7, #112]	@ 0x70
 800803e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008042:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800804a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e3      	bne.n	8008018 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008058:	d14f      	bne.n	80080fa <UART_Start_Receive_IT+0x196>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008060:	88fa      	ldrh	r2, [r7, #6]
 8008062:	429a      	cmp	r2, r3
 8008064:	d349      	bcc.n	80080fa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800806e:	d107      	bne.n	8008080 <UART_Start_Receive_IT+0x11c>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d103      	bne.n	8008080 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4a47      	ldr	r2, [pc, #284]	@ (8008198 <UART_Start_Receive_IT+0x234>)
 800807c:	675a      	str	r2, [r3, #116]	@ 0x74
 800807e:	e002      	b.n	8008086 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4a46      	ldr	r2, [pc, #280]	@ (800819c <UART_Start_Receive_IT+0x238>)
 8008084:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d01a      	beq.n	80080c4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008096:	e853 3f00 	ldrex	r3, [r3]
 800809a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800809c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800809e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80080b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080b2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80080b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80080b8:	e841 2300 	strex	r3, r2, [r1]
 80080bc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80080be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e4      	bne.n	800808e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3308      	adds	r3, #8
 80080ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3308      	adds	r3, #8
 80080e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80080e4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80080e6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80080ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80080f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e5      	bne.n	80080c4 <UART_Start_Receive_IT+0x160>
 80080f8:	e046      	b.n	8008188 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008102:	d107      	bne.n	8008114 <UART_Start_Receive_IT+0x1b0>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d103      	bne.n	8008114 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4a24      	ldr	r2, [pc, #144]	@ (80081a0 <UART_Start_Receive_IT+0x23c>)
 8008110:	675a      	str	r2, [r3, #116]	@ 0x74
 8008112:	e002      	b.n	800811a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4a23      	ldr	r2, [pc, #140]	@ (80081a4 <UART_Start_Receive_IT+0x240>)
 8008118:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d019      	beq.n	8008156 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812a:	e853 3f00 	ldrex	r3, [r3]
 800812e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008132:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008136:	677b      	str	r3, [r7, #116]	@ 0x74
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	461a      	mov	r2, r3
 800813e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008140:	637b      	str	r3, [r7, #52]	@ 0x34
 8008142:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008144:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008146:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008148:	e841 2300 	strex	r3, r2, [r1]
 800814c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800814e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1e6      	bne.n	8008122 <UART_Start_Receive_IT+0x1be>
 8008154:	e018      	b.n	8008188 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	613b      	str	r3, [r7, #16]
   return(result);
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f043 0320 	orr.w	r3, r3, #32
 800816a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008174:	623b      	str	r3, [r7, #32]
 8008176:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	69f9      	ldr	r1, [r7, #28]
 800817a:	6a3a      	ldr	r2, [r7, #32]
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	61bb      	str	r3, [r7, #24]
   return(result);
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e6      	bne.n	8008156 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	378c      	adds	r7, #140	@ 0x8c
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	08008b81 	.word	0x08008b81
 800819c:	08008821 	.word	0x08008821
 80081a0:	08008669 	.word	0x08008669
 80081a4:	080084b1 	.word	0x080084b1

080081a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b08f      	sub	sp, #60	@ 0x3c
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	e853 3f00 	ldrex	r3, [r3]
 80081bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80081c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081d0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e6      	bne.n	80081b0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80081f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3308      	adds	r3, #8
 8008200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008202:	61ba      	str	r2, [r7, #24]
 8008204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008206:	6979      	ldr	r1, [r7, #20]
 8008208:	69ba      	ldr	r2, [r7, #24]
 800820a:	e841 2300 	strex	r3, r2, [r1]
 800820e:	613b      	str	r3, [r7, #16]
   return(result);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e5      	bne.n	80081e2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2220      	movs	r2, #32
 800821a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800821e:	bf00      	nop
 8008220:	373c      	adds	r7, #60	@ 0x3c
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800822a:	b480      	push	{r7}
 800822c:	b095      	sub	sp, #84	@ 0x54
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800823a:	e853 3f00 	ldrex	r3, [r3]
 800823e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008242:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	461a      	mov	r2, r3
 800824e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008250:	643b      	str	r3, [r7, #64]	@ 0x40
 8008252:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008254:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008256:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008258:	e841 2300 	strex	r3, r2, [r1]
 800825c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800825e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1e6      	bne.n	8008232 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3308      	adds	r3, #8
 800826a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	e853 3f00 	ldrex	r3, [r3]
 8008272:	61fb      	str	r3, [r7, #28]
   return(result);
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800827a:	f023 0301 	bic.w	r3, r3, #1
 800827e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3308      	adds	r3, #8
 8008286:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008288:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800828a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800828e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008290:	e841 2300 	strex	r3, r2, [r1]
 8008294:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1e3      	bne.n	8008264 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d118      	bne.n	80082d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	e853 3f00 	ldrex	r3, [r3]
 80082b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f023 0310 	bic.w	r3, r3, #16
 80082b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082c2:	61bb      	str	r3, [r7, #24]
 80082c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c6:	6979      	ldr	r1, [r7, #20]
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	613b      	str	r3, [r7, #16]
   return(result);
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e6      	bne.n	80082a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2220      	movs	r2, #32
 80082da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082ea:	bf00      	nop
 80082ec:	3754      	adds	r7, #84	@ 0x54
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b090      	sub	sp, #64	@ 0x40
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008302:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0320 	and.w	r3, r3, #32
 800830e:	2b00      	cmp	r3, #0
 8008310:	d137      	bne.n	8008382 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008314:	2200      	movs	r2, #0
 8008316:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800831a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3308      	adds	r3, #8
 8008320:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008324:	e853 3f00 	ldrex	r3, [r3]
 8008328:	623b      	str	r3, [r7, #32]
   return(result);
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008330:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3308      	adds	r3, #8
 8008338:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800833a:	633a      	str	r2, [r7, #48]	@ 0x30
 800833c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008342:	e841 2300 	strex	r3, r2, [r1]
 8008346:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1e5      	bne.n	800831a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800834e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	e853 3f00 	ldrex	r3, [r3]
 800835a:	60fb      	str	r3, [r7, #12]
   return(result);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008362:	637b      	str	r3, [r7, #52]	@ 0x34
 8008364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	461a      	mov	r2, r3
 800836a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800836c:	61fb      	str	r3, [r7, #28]
 800836e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	69b9      	ldr	r1, [r7, #24]
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	e841 2300 	strex	r3, r2, [r1]
 8008378:	617b      	str	r3, [r7, #20]
   return(result);
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1e6      	bne.n	800834e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008380:	e002      	b.n	8008388 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008382:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008384:	f7f9 f82a 	bl	80013dc <HAL_UART_TxCpltCallback>
}
 8008388:	bf00      	nop
 800838a:	3740      	adds	r7, #64	@ 0x40
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800839c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f7ff f93a 	bl	8007618 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083a4:	bf00      	nop
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083c0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083c8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083d4:	2b80      	cmp	r3, #128	@ 0x80
 80083d6:	d109      	bne.n	80083ec <UART_DMAError+0x40>
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	2b21      	cmp	r3, #33	@ 0x21
 80083dc:	d106      	bne.n	80083ec <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80083e6:	6978      	ldr	r0, [r7, #20]
 80083e8:	f7ff fede 	bl	80081a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f6:	2b40      	cmp	r3, #64	@ 0x40
 80083f8:	d109      	bne.n	800840e <UART_DMAError+0x62>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b22      	cmp	r3, #34	@ 0x22
 80083fe:	d106      	bne.n	800840e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2200      	movs	r2, #0
 8008404:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008408:	6978      	ldr	r0, [r7, #20]
 800840a:	f7ff ff0e 	bl	800822a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008414:	f043 0210 	orr.w	r2, r3, #16
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800841e:	6978      	ldr	r0, [r7, #20]
 8008420:	f7ff f904 	bl	800762c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008424:	bf00      	nop
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008438:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f7ff f8ee 	bl	800762c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008450:	bf00      	nop
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b088      	sub	sp, #32
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	60bb      	str	r3, [r7, #8]
   return(result);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008474:	61fb      	str	r3, [r7, #28]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	61bb      	str	r3, [r7, #24]
 8008480:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	6979      	ldr	r1, [r7, #20]
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	613b      	str	r3, [r7, #16]
   return(result);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1e6      	bne.n	8008460 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2220      	movs	r2, #32
 8008496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f7f8 ff9b 	bl	80013dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084a6:	bf00      	nop
 80084a8:	3720      	adds	r7, #32
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b09c      	sub	sp, #112	@ 0x70
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80084be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084c8:	2b22      	cmp	r3, #34	@ 0x22
 80084ca:	f040 80be 	bne.w	800864a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80084dc:	b2d9      	uxtb	r1, r3
 80084de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084e8:	400a      	ands	r2, r1
 80084ea:	b2d2      	uxtb	r2, r2
 80084ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084fe:	b29b      	uxth	r3, r3
 8008500:	3b01      	subs	r3, #1
 8008502:	b29a      	uxth	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008510:	b29b      	uxth	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	f040 80a1 	bne.w	800865a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008520:	e853 3f00 	ldrex	r3, [r3]
 8008524:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800852c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008536:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008538:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800853c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e6      	bne.n	8008518 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3308      	adds	r3, #8
 8008550:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800855a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800855c:	f023 0301 	bic.w	r3, r3, #1
 8008560:	667b      	str	r3, [r7, #100]	@ 0x64
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3308      	adds	r3, #8
 8008568:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800856a:	647a      	str	r2, [r7, #68]	@ 0x44
 800856c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008570:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008572:	e841 2300 	strex	r3, r2, [r1]
 8008576:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e5      	bne.n	800854a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2220      	movs	r2, #32
 8008582:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a33      	ldr	r2, [pc, #204]	@ (8008664 <UART_RxISR_8BIT+0x1b4>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d01f      	beq.n	80085dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d018      	beq.n	80085dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	623b      	str	r3, [r7, #32]
   return(result);
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80085be:	663b      	str	r3, [r7, #96]	@ 0x60
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80085ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e6      	bne.n	80085aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d12e      	bne.n	8008642 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0310 	bic.w	r3, r3, #16
 80085fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008608:	61fb      	str	r3, [r7, #28]
 800860a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	69b9      	ldr	r1, [r7, #24]
 800860e:	69fa      	ldr	r2, [r7, #28]
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	617b      	str	r3, [r7, #20]
   return(result);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e6      	bne.n	80085ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	f003 0310 	and.w	r3, r3, #16
 8008626:	2b10      	cmp	r3, #16
 8008628:	d103      	bne.n	8008632 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2210      	movs	r2, #16
 8008630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7ff f800 	bl	8007640 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008640:	e00b      	b.n	800865a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7f8 fea2 	bl	800138c <HAL_UART_RxCpltCallback>
}
 8008648:	e007      	b.n	800865a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	699a      	ldr	r2, [r3, #24]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f042 0208 	orr.w	r2, r2, #8
 8008658:	619a      	str	r2, [r3, #24]
}
 800865a:	bf00      	nop
 800865c:	3770      	adds	r7, #112	@ 0x70
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	40008000 	.word	0x40008000

08008668 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b09c      	sub	sp, #112	@ 0x70
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008676:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008680:	2b22      	cmp	r3, #34	@ 0x22
 8008682:	f040 80be 	bne.w	8008802 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008694:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008696:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800869a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800869e:	4013      	ands	r3, r2
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086aa:	1c9a      	adds	r2, r3, #2
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f040 80a1 	bne.w	8008812 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80086de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80086f0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80086f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80086f6:	e841 2300 	strex	r3, r2, [r1]
 80086fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80086fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1e6      	bne.n	80086d0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3308      	adds	r3, #8
 8008708:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800870c:	e853 3f00 	ldrex	r3, [r3]
 8008710:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008714:	f023 0301 	bic.w	r3, r3, #1
 8008718:	663b      	str	r3, [r7, #96]	@ 0x60
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3308      	adds	r3, #8
 8008720:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008722:	643a      	str	r2, [r7, #64]	@ 0x40
 8008724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008726:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008728:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800872a:	e841 2300 	strex	r3, r2, [r1]
 800872e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1e5      	bne.n	8008702 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2220      	movs	r2, #32
 800873a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a33      	ldr	r2, [pc, #204]	@ (800881c <UART_RxISR_16BIT+0x1b4>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d01f      	beq.n	8008794 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d018      	beq.n	8008794 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	e853 3f00 	ldrex	r3, [r3]
 800876e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008776:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	461a      	mov	r2, r3
 800877e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008782:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008784:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008788:	e841 2300 	strex	r3, r2, [r1]
 800878c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1e6      	bne.n	8008762 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008798:	2b01      	cmp	r3, #1
 800879a:	d12e      	bne.n	80087fa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f023 0310 	bic.w	r3, r3, #16
 80087b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6979      	ldr	r1, [r7, #20]
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	613b      	str	r3, [r7, #16]
   return(result);
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e6      	bne.n	80087a2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	69db      	ldr	r3, [r3, #28]
 80087da:	f003 0310 	and.w	r3, r3, #16
 80087de:	2b10      	cmp	r3, #16
 80087e0:	d103      	bne.n	80087ea <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2210      	movs	r2, #16
 80087e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087f0:	4619      	mov	r1, r3
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7fe ff24 	bl	8007640 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087f8:	e00b      	b.n	8008812 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7f8 fdc6 	bl	800138c <HAL_UART_RxCpltCallback>
}
 8008800:	e007      	b.n	8008812 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	699a      	ldr	r2, [r3, #24]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f042 0208 	orr.w	r2, r2, #8
 8008810:	619a      	str	r2, [r3, #24]
}
 8008812:	bf00      	nop
 8008814:	3770      	adds	r7, #112	@ 0x70
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	40008000 	.word	0x40008000

08008820 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b0ac      	sub	sp, #176	@ 0xb0
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800882e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	69db      	ldr	r3, [r3, #28]
 8008838:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008856:	2b22      	cmp	r3, #34	@ 0x22
 8008858:	f040 8182 	bne.w	8008b60 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008862:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008866:	e125      	b.n	8008ab4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008872:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008876:	b2d9      	uxtb	r1, r3
 8008878:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800887c:	b2da      	uxtb	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008882:	400a      	ands	r2, r1
 8008884:	b2d2      	uxtb	r2, r2
 8008886:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800888c:	1c5a      	adds	r2, r3, #1
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008898:	b29b      	uxth	r3, r3
 800889a:	3b01      	subs	r3, #1
 800889c:	b29a      	uxth	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80088ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088b2:	f003 0307 	and.w	r3, r3, #7
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d053      	beq.n	8008962 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d011      	beq.n	80088ea <UART_RxISR_8BIT_FIFOEN+0xca>
 80088c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80088ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00b      	beq.n	80088ea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2201      	movs	r2, #1
 80088d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088e0:	f043 0201 	orr.w	r2, r3, #1
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d011      	beq.n	800891a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80088f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00b      	beq.n	800891a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2202      	movs	r2, #2
 8008908:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008910:	f043 0204 	orr.w	r2, r3, #4
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800891a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800891e:	f003 0304 	and.w	r3, r3, #4
 8008922:	2b00      	cmp	r3, #0
 8008924:	d011      	beq.n	800894a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00b      	beq.n	800894a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2204      	movs	r2, #4
 8008938:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008940:	f043 0202 	orr.w	r2, r3, #2
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008950:	2b00      	cmp	r3, #0
 8008952:	d006      	beq.n	8008962 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f7fe fe69 	bl	800762c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008968:	b29b      	uxth	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	f040 80a2 	bne.w	8008ab4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008976:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008978:	e853 3f00 	ldrex	r3, [r3]
 800897c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800897e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008984:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	461a      	mov	r2, r3
 800898e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008992:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008994:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008998:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80089a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e4      	bne.n	8008970 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3308      	adds	r3, #8
 80089ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089b0:	e853 3f00 	ldrex	r3, [r3]
 80089b4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80089b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80089b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089bc:	f023 0301 	bic.w	r3, r3, #1
 80089c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	3308      	adds	r3, #8
 80089ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80089ce:	66ba      	str	r2, [r7, #104]	@ 0x68
 80089d0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80089d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80089d6:	e841 2300 	strex	r3, r2, [r1]
 80089da:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80089dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1e1      	bne.n	80089a6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a5f      	ldr	r2, [pc, #380]	@ (8008b78 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d021      	beq.n	8008a44 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d01a      	beq.n	8008a44 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a16:	e853 3f00 	ldrex	r3, [r3]
 8008a1a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008a30:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a32:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a38:	e841 2300 	strex	r3, r2, [r1]
 8008a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e4      	bne.n	8008a0e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d130      	bne.n	8008aae <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5a:	e853 3f00 	ldrex	r3, [r3]
 8008a5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a62:	f023 0310 	bic.w	r3, r3, #16
 8008a66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a7c:	e841 2300 	strex	r3, r2, [r1]
 8008a80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1e4      	bne.n	8008a52 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	f003 0310 	and.w	r3, r3, #16
 8008a92:	2b10      	cmp	r3, #16
 8008a94:	d103      	bne.n	8008a9e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2210      	movs	r2, #16
 8008a9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7fe fdca 	bl	8007640 <HAL_UARTEx_RxEventCallback>
 8008aac:	e002      	b.n	8008ab4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7f8 fc6c 	bl	800138c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ab4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d006      	beq.n	8008aca <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008abc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ac0:	f003 0320 	and.w	r3, r3, #32
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f47f aecf 	bne.w	8008868 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ad0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ad4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d049      	beq.n	8008b70 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ae2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d242      	bcs.n	8008b70 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3308      	adds	r3, #8
 8008af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3308      	adds	r3, #8
 8008b0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e3      	bne.n	8008aea <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a15      	ldr	r2, [pc, #84]	@ (8008b7c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008b26:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	e853 3f00 	ldrex	r3, [r3]
 8008b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f043 0320 	orr.w	r3, r3, #32
 8008b3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	461a      	mov	r2, r3
 8008b46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b4a:	61bb      	str	r3, [r7, #24]
 8008b4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	6979      	ldr	r1, [r7, #20]
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	e841 2300 	strex	r3, r2, [r1]
 8008b56:	613b      	str	r3, [r7, #16]
   return(result);
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1e4      	bne.n	8008b28 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b5e:	e007      	b.n	8008b70 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699a      	ldr	r2, [r3, #24]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f042 0208 	orr.w	r2, r2, #8
 8008b6e:	619a      	str	r2, [r3, #24]
}
 8008b70:	bf00      	nop
 8008b72:	37b0      	adds	r7, #176	@ 0xb0
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	40008000 	.word	0x40008000
 8008b7c:	080084b1 	.word	0x080084b1

08008b80 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b0ae      	sub	sp, #184	@ 0xb8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b8e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bb6:	2b22      	cmp	r3, #34	@ 0x22
 8008bb8:	f040 8186 	bne.w	8008ec8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008bc2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bc6:	e129      	b.n	8008e1c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bce:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008bda:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008bde:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008be2:	4013      	ands	r3, r2
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008bea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bf0:	1c9a      	adds	r2, r3, #2
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c16:	f003 0307 	and.w	r3, r3, #7
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d053      	beq.n	8008cc6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d011      	beq.n	8008c4e <UART_RxISR_16BIT_FIFOEN+0xce>
 8008c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c44:	f043 0201 	orr.w	r2, r3, #1
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d011      	beq.n	8008c7e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008c5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00b      	beq.n	8008c7e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c74:	f043 0204 	orr.w	r2, r3, #4
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c82:	f003 0304 	and.w	r3, r3, #4
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d011      	beq.n	8008cae <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008c8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00b      	beq.n	8008cae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2204      	movs	r2, #4
 8008c9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ca4:	f043 0202 	orr.w	r2, r3, #2
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d006      	beq.n	8008cc6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7fe fcb7 	bl	800762c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f040 80a4 	bne.w	8008e1c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008cdc:	e853 3f00 	ldrex	r3, [r3]
 8008ce0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ce2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ce8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008cf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008cfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008cfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d02:	e841 2300 	strex	r3, r2, [r1]
 8008d06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e2      	bne.n	8008cd4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3308      	adds	r3, #8
 8008d14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d24:	f023 0301 	bic.w	r3, r3, #1
 8008d28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3308      	adds	r3, #8
 8008d32:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008d36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d3e:	e841 2300 	strex	r3, r2, [r1]
 8008d42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1e1      	bne.n	8008d0e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a5f      	ldr	r2, [pc, #380]	@ (8008ee0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d021      	beq.n	8008dac <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d01a      	beq.n	8008dac <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d7e:	e853 3f00 	ldrex	r3, [r3]
 8008d82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	461a      	mov	r2, r3
 8008d94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008d98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d9a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008da0:	e841 2300 	strex	r3, r2, [r1]
 8008da4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e4      	bne.n	8008d76 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d130      	bne.n	8008e16 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc2:	e853 3f00 	ldrex	r3, [r3]
 8008dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dca:	f023 0310 	bic.w	r3, r3, #16
 8008dce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008de4:	e841 2300 	strex	r3, r2, [r1]
 8008de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e4      	bne.n	8008dba <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	f003 0310 	and.w	r3, r3, #16
 8008dfa:	2b10      	cmp	r3, #16
 8008dfc:	d103      	bne.n	8008e06 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2210      	movs	r2, #16
 8008e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7fe fc16 	bl	8007640 <HAL_UARTEx_RxEventCallback>
 8008e14:	e002      	b.n	8008e1c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7f8 fab8 	bl	800138c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e1c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d006      	beq.n	8008e32 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008e24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e28:	f003 0320 	and.w	r3, r3, #32
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f47f aecb 	bne.w	8008bc8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e38:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e3c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d049      	beq.n	8008ed8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e4a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d242      	bcs.n	8008ed8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3308      	adds	r3, #8
 8008e58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5c:	e853 3f00 	ldrex	r3, [r3]
 8008e60:	623b      	str	r3, [r7, #32]
   return(result);
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3308      	adds	r3, #8
 8008e72:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008e76:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e3      	bne.n	8008e52 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a15      	ldr	r2, [pc, #84]	@ (8008ee4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008e8e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f043 0320 	orr.w	r3, r3, #32
 8008ea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	461a      	mov	r2, r3
 8008eae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008eb2:	61fb      	str	r3, [r7, #28]
 8008eb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb6:	69b9      	ldr	r1, [r7, #24]
 8008eb8:	69fa      	ldr	r2, [r7, #28]
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	617b      	str	r3, [r7, #20]
   return(result);
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e4      	bne.n	8008e90 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ec6:	e007      	b.n	8008ed8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	699a      	ldr	r2, [r3, #24]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0208 	orr.w	r2, r2, #8
 8008ed6:	619a      	str	r2, [r3, #24]
}
 8008ed8:	bf00      	nop
 8008eda:	37b8      	adds	r7, #184	@ 0xb8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	40008000 	.word	0x40008000
 8008ee4:	08008669 	.word	0x08008669

08008ee8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d101      	bne.n	8008f3a <HAL_UARTEx_DisableFifoMode+0x16>
 8008f36:	2302      	movs	r3, #2
 8008f38:	e027      	b.n	8008f8a <HAL_UARTEx_DisableFifoMode+0x66>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2224      	movs	r2, #36	@ 0x24
 8008f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 0201 	bic.w	r2, r2, #1
 8008f60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008f68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b084      	sub	sp, #16
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
 8008f9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d101      	bne.n	8008fae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008faa:	2302      	movs	r3, #2
 8008fac:	e02d      	b.n	800900a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2224      	movs	r2, #36	@ 0x24
 8008fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f022 0201 	bic.w	r2, r2, #1
 8008fd4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f850 	bl	8009090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2220      	movs	r2, #32
 8008ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009022:	2b01      	cmp	r3, #1
 8009024:	d101      	bne.n	800902a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009026:	2302      	movs	r3, #2
 8009028:	e02d      	b.n	8009086 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2224      	movs	r2, #36	@ 0x24
 8009036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f022 0201 	bic.w	r2, r2, #1
 8009050:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	683a      	ldr	r2, [r7, #0]
 8009062:	430a      	orrs	r2, r1
 8009064:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f812 	bl	8009090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2220      	movs	r2, #32
 8009078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
	...

08009090 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800909c:	2b00      	cmp	r3, #0
 800909e:	d108      	bne.n	80090b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090b0:	e031      	b.n	8009116 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090b2:	2308      	movs	r3, #8
 80090b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090b6:	2308      	movs	r3, #8
 80090b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	0e5b      	lsrs	r3, r3, #25
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	f003 0307 	and.w	r3, r3, #7
 80090c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	0f5b      	lsrs	r3, r3, #29
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	f003 0307 	and.w	r3, r3, #7
 80090d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090da:	7bbb      	ldrb	r3, [r7, #14]
 80090dc:	7b3a      	ldrb	r2, [r7, #12]
 80090de:	4911      	ldr	r1, [pc, #68]	@ (8009124 <UARTEx_SetNbDataToProcess+0x94>)
 80090e0:	5c8a      	ldrb	r2, [r1, r2]
 80090e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090e6:	7b3a      	ldrb	r2, [r7, #12]
 80090e8:	490f      	ldr	r1, [pc, #60]	@ (8009128 <UARTEx_SetNbDataToProcess+0x98>)
 80090ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	7b7a      	ldrb	r2, [r7, #13]
 80090fc:	4909      	ldr	r1, [pc, #36]	@ (8009124 <UARTEx_SetNbDataToProcess+0x94>)
 80090fe:	5c8a      	ldrb	r2, [r1, r2]
 8009100:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009104:	7b7a      	ldrb	r2, [r7, #13]
 8009106:	4908      	ldr	r1, [pc, #32]	@ (8009128 <UARTEx_SetNbDataToProcess+0x98>)
 8009108:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800910a:	fb93 f3f2 	sdiv	r3, r3, r2
 800910e:	b29a      	uxth	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009116:	bf00      	nop
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	08011428 	.word	0x08011428
 8009128:	08011430 	.word	0x08011430

0800912c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009130:	f001 fcb0 	bl	800aa94 <vTaskStartScheduler>
  
  return osOK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	bd80      	pop	{r7, pc}

0800913a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f103 0208 	add.w	r2, r3, #8
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f04f 32ff 	mov.w	r2, #4294967295
 8009152:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f103 0208 	add.w	r2, r3, #8
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f103 0208 	add.w	r2, r3, #8
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800916e:	bf00      	nop
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	689a      	ldr	r2, [r3, #8]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	1c5a      	adds	r2, r3, #1
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	601a      	str	r2, [r3, #0]
}
 80091d0:	bf00      	nop
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f2:	d103      	bne.n	80091fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	e00c      	b.n	8009216 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	3308      	adds	r3, #8
 8009200:	60fb      	str	r3, [r7, #12]
 8009202:	e002      	b.n	800920a <vListInsert+0x2e>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	60fb      	str	r3, [r7, #12]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	429a      	cmp	r2, r3
 8009214:	d2f6      	bcs.n	8009204 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	601a      	str	r2, [r3, #0]
}
 8009242:	bf00      	nop
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800924e:	b480      	push	{r7}
 8009250:	b085      	sub	sp, #20
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	6892      	ldr	r2, [r2, #8]
 8009264:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	6852      	ldr	r2, [r2, #4]
 800926e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	429a      	cmp	r2, r3
 8009278:	d103      	bne.n	8009282 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	689a      	ldr	r2, [r3, #8]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	1e5a      	subs	r2, r3, #1
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
	...

080092a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10b      	bne.n	80092d0 <xQueueGenericReset+0x2c>
	__asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	60bb      	str	r3, [r7, #8]
}
 80092ca:	bf00      	nop
 80092cc:	bf00      	nop
 80092ce:	e7fd      	b.n	80092cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80092d0:	f003 fb32 	bl	800c938 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092dc:	68f9      	ldr	r1, [r7, #12]
 80092de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80092e0:	fb01 f303 	mul.w	r3, r1, r3
 80092e4:	441a      	add	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009300:	3b01      	subs	r3, #1
 8009302:	68f9      	ldr	r1, [r7, #12]
 8009304:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009306:	fb01 f303 	mul.w	r3, r1, r3
 800930a:	441a      	add	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	22ff      	movs	r2, #255	@ 0xff
 8009314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	22ff      	movs	r2, #255	@ 0xff
 800931c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d114      	bne.n	8009350 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d01a      	beq.n	8009364 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3310      	adds	r3, #16
 8009332:	4618      	mov	r0, r3
 8009334:	f001 fef0 	bl	800b118 <xTaskRemoveFromEventList>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d012      	beq.n	8009364 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800933e:	4b0d      	ldr	r3, [pc, #52]	@ (8009374 <xQueueGenericReset+0xd0>)
 8009340:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	e009      	b.n	8009364 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3310      	adds	r3, #16
 8009354:	4618      	mov	r0, r3
 8009356:	f7ff fef0 	bl	800913a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3324      	adds	r3, #36	@ 0x24
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff feeb 	bl	800913a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009364:	f003 fb1a 	bl	800c99c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009368:	2301      	movs	r3, #1
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	e000ed04 	.word	0xe000ed04

08009378 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009378:	b580      	push	{r7, lr}
 800937a:	b08a      	sub	sp, #40	@ 0x28
 800937c:	af02      	add	r7, sp, #8
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d10b      	bne.n	80093a4 <xQueueGenericCreate+0x2c>
	__asm volatile
 800938c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009390:	f383 8811 	msr	BASEPRI, r3
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	613b      	str	r3, [r7, #16]
}
 800939e:	bf00      	nop
 80093a0:	bf00      	nop
 80093a2:	e7fd      	b.n	80093a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	fb02 f303 	mul.w	r3, r2, r3
 80093ac:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	3350      	adds	r3, #80	@ 0x50
 80093b2:	4618      	mov	r0, r3
 80093b4:	f003 fbe2 	bl	800cb7c <pvPortMalloc>
 80093b8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00d      	beq.n	80093dc <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	3350      	adds	r3, #80	@ 0x50
 80093c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093ca:	79fa      	ldrb	r2, [r7, #7]
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	4613      	mov	r3, r2
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	68b9      	ldr	r1, [r7, #8]
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f000 f805 	bl	80093e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80093dc:	69bb      	ldr	r3, [r7, #24]
	}
 80093de:	4618      	mov	r0, r3
 80093e0:	3720      	adds	r7, #32
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	60f8      	str	r0, [r7, #12]
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	607a      	str	r2, [r7, #4]
 80093f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d103      	bne.n	8009402 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	e002      	b.n	8009408 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009414:	2101      	movs	r1, #1
 8009416:	69b8      	ldr	r0, [r7, #24]
 8009418:	f7ff ff44 	bl	80092a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	78fa      	ldrb	r2, [r7, #3]
 8009420:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009424:	bf00      	nop
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00e      	beq.n	8009458 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800944c:	2300      	movs	r3, #0
 800944e:	2200      	movs	r2, #0
 8009450:	2100      	movs	r1, #0
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f81c 	bl	8009490 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800946a:	2301      	movs	r3, #1
 800946c:	617b      	str	r3, [r7, #20]
 800946e:	2300      	movs	r3, #0
 8009470:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009472:	79fb      	ldrb	r3, [r7, #7]
 8009474:	461a      	mov	r2, r3
 8009476:	6939      	ldr	r1, [r7, #16]
 8009478:	6978      	ldr	r0, [r7, #20]
 800947a:	f7ff ff7d 	bl	8009378 <xQueueGenericCreate>
 800947e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f7ff ffd3 	bl	800942c <prvInitialiseMutex>

		return xNewQueue;
 8009486:	68fb      	ldr	r3, [r7, #12]
	}
 8009488:	4618      	mov	r0, r3
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b08e      	sub	sp, #56	@ 0x38
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800949e:	2300      	movs	r3, #0
 80094a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80094a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10b      	bne.n	80094c4 <xQueueGenericSend+0x34>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80094be:	bf00      	nop
 80094c0:	bf00      	nop
 80094c2:	e7fd      	b.n	80094c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d103      	bne.n	80094d2 <xQueueGenericSend+0x42>
 80094ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <xQueueGenericSend+0x46>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e000      	b.n	80094d8 <xQueueGenericSend+0x48>
 80094d6:	2300      	movs	r3, #0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10b      	bne.n	80094f4 <xQueueGenericSend+0x64>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80094ee:	bf00      	nop
 80094f0:	bf00      	nop
 80094f2:	e7fd      	b.n	80094f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d103      	bne.n	8009502 <xQueueGenericSend+0x72>
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d101      	bne.n	8009506 <xQueueGenericSend+0x76>
 8009502:	2301      	movs	r3, #1
 8009504:	e000      	b.n	8009508 <xQueueGenericSend+0x78>
 8009506:	2300      	movs	r3, #0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10b      	bne.n	8009524 <xQueueGenericSend+0x94>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	623b      	str	r3, [r7, #32]
}
 800951e:	bf00      	nop
 8009520:	bf00      	nop
 8009522:	e7fd      	b.n	8009520 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009524:	f002 f8aa 	bl	800b67c <xTaskGetSchedulerState>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d102      	bne.n	8009534 <xQueueGenericSend+0xa4>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <xQueueGenericSend+0xa8>
 8009534:	2301      	movs	r3, #1
 8009536:	e000      	b.n	800953a <xQueueGenericSend+0xaa>
 8009538:	2300      	movs	r3, #0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10b      	bne.n	8009556 <xQueueGenericSend+0xc6>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	61fb      	str	r3, [r7, #28]
}
 8009550:	bf00      	nop
 8009552:	bf00      	nop
 8009554:	e7fd      	b.n	8009552 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009556:	f003 f9ef 	bl	800c938 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800955a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800955e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009562:	429a      	cmp	r2, r3
 8009564:	d302      	bcc.n	800956c <xQueueGenericSend+0xdc>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b02      	cmp	r3, #2
 800956a:	d129      	bne.n	80095c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	68b9      	ldr	r1, [r7, #8]
 8009570:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009572:	f000 fbc7 	bl	8009d04 <prvCopyDataToQueue>
 8009576:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800957c:	2b00      	cmp	r3, #0
 800957e:	d010      	beq.n	80095a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009582:	3324      	adds	r3, #36	@ 0x24
 8009584:	4618      	mov	r0, r3
 8009586:	f001 fdc7 	bl	800b118 <xTaskRemoveFromEventList>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d013      	beq.n	80095b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009590:	4b3f      	ldr	r3, [pc, #252]	@ (8009690 <xQueueGenericSend+0x200>)
 8009592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	e00a      	b.n	80095b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d007      	beq.n	80095b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095a8:	4b39      	ldr	r3, [pc, #228]	@ (8009690 <xQueueGenericSend+0x200>)
 80095aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095ae:	601a      	str	r2, [r3, #0]
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095b8:	f003 f9f0 	bl	800c99c <vPortExitCritical>
				return pdPASS;
 80095bc:	2301      	movs	r3, #1
 80095be:	e063      	b.n	8009688 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d103      	bne.n	80095ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095c6:	f003 f9e9 	bl	800c99c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095ca:	2300      	movs	r3, #0
 80095cc:	e05c      	b.n	8009688 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d106      	bne.n	80095e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095d4:	f107 0314 	add.w	r3, r7, #20
 80095d8:	4618      	mov	r0, r3
 80095da:	f001 fe29 	bl	800b230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095de:	2301      	movs	r3, #1
 80095e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095e2:	f003 f9db 	bl	800c99c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095e6:	f001 faaf 	bl	800ab48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095ea:	f003 f9a5 	bl	800c938 <vPortEnterCritical>
 80095ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095f4:	b25b      	sxtb	r3, r3
 80095f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fa:	d103      	bne.n	8009604 <xQueueGenericSend+0x174>
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009606:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800960a:	b25b      	sxtb	r3, r3
 800960c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009610:	d103      	bne.n	800961a <xQueueGenericSend+0x18a>
 8009612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800961a:	f003 f9bf 	bl	800c99c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800961e:	1d3a      	adds	r2, r7, #4
 8009620:	f107 0314 	add.w	r3, r7, #20
 8009624:	4611      	mov	r1, r2
 8009626:	4618      	mov	r0, r3
 8009628:	f001 fe18 	bl	800b25c <xTaskCheckForTimeOut>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d124      	bne.n	800967c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009632:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009634:	f000 fc5e 	bl	8009ef4 <prvIsQueueFull>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d018      	beq.n	8009670 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800963e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009640:	3310      	adds	r3, #16
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	4611      	mov	r1, r2
 8009646:	4618      	mov	r0, r3
 8009648:	f001 fd14 	bl	800b074 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800964c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800964e:	f000 fbe9 	bl	8009e24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009652:	f001 fa87 	bl	800ab64 <xTaskResumeAll>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	f47f af7c 	bne.w	8009556 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800965e:	4b0c      	ldr	r3, [pc, #48]	@ (8009690 <xQueueGenericSend+0x200>)
 8009660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009664:	601a      	str	r2, [r3, #0]
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	e772      	b.n	8009556 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009672:	f000 fbd7 	bl	8009e24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009676:	f001 fa75 	bl	800ab64 <xTaskResumeAll>
 800967a:	e76c      	b.n	8009556 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800967c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800967e:	f000 fbd1 	bl	8009e24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009682:	f001 fa6f 	bl	800ab64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009686:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009688:	4618      	mov	r0, r3
 800968a:	3738      	adds	r7, #56	@ 0x38
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	e000ed04 	.word	0xe000ed04

08009694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b090      	sub	sp, #64	@ 0x40
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80096a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10b      	bne.n	80096c4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80096be:	bf00      	nop
 80096c0:	bf00      	nop
 80096c2:	e7fd      	b.n	80096c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <xQueueGenericSendFromISR+0x3e>
 80096ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <xQueueGenericSendFromISR+0x42>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e000      	b.n	80096d8 <xQueueGenericSendFromISR+0x44>
 80096d6:	2300      	movs	r3, #0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10b      	bne.n	80096f4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096ee:	bf00      	nop
 80096f0:	bf00      	nop
 80096f2:	e7fd      	b.n	80096f0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d103      	bne.n	8009702 <xQueueGenericSendFromISR+0x6e>
 80096fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d101      	bne.n	8009706 <xQueueGenericSendFromISR+0x72>
 8009702:	2301      	movs	r3, #1
 8009704:	e000      	b.n	8009708 <xQueueGenericSendFromISR+0x74>
 8009706:	2300      	movs	r3, #0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10b      	bne.n	8009724 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800970c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	623b      	str	r3, [r7, #32]
}
 800971e:	bf00      	nop
 8009720:	bf00      	nop
 8009722:	e7fd      	b.n	8009720 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009724:	f003 f9e8 	bl	800caf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009728:	f3ef 8211 	mrs	r2, BASEPRI
 800972c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009730:	f383 8811 	msr	BASEPRI, r3
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	61fa      	str	r2, [r7, #28]
 800973e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009740:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009742:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009746:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800974c:	429a      	cmp	r2, r3
 800974e:	d302      	bcc.n	8009756 <xQueueGenericSendFromISR+0xc2>
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2b02      	cmp	r3, #2
 8009754:	d12f      	bne.n	80097b6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009758:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800975c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009764:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	68b9      	ldr	r1, [r7, #8]
 800976a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800976c:	f000 faca 	bl	8009d04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009770:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009778:	d112      	bne.n	80097a0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800977a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800977e:	2b00      	cmp	r3, #0
 8009780:	d016      	beq.n	80097b0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009784:	3324      	adds	r3, #36	@ 0x24
 8009786:	4618      	mov	r0, r3
 8009788:	f001 fcc6 	bl	800b118 <xTaskRemoveFromEventList>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00e      	beq.n	80097b0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00b      	beq.n	80097b0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	e007      	b.n	80097b0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80097a4:	3301      	adds	r3, #1
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	b25a      	sxtb	r2, r3
 80097aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80097b0:	2301      	movs	r3, #1
 80097b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80097b4:	e001      	b.n	80097ba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097bc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3740      	adds	r7, #64	@ 0x40
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08e      	sub	sp, #56	@ 0x38
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80097de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10b      	bne.n	80097fc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	623b      	str	r3, [r7, #32]
}
 80097f6:	bf00      	nop
 80097f8:	bf00      	nop
 80097fa:	e7fd      	b.n	80097f8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80097fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00b      	beq.n	800981c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009808:	f383 8811 	msr	BASEPRI, r3
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	61fb      	str	r3, [r7, #28]
}
 8009816:	bf00      	nop
 8009818:	bf00      	nop
 800981a:	e7fd      	b.n	8009818 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800981c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d103      	bne.n	800982c <xQueueGiveFromISR+0x5c>
 8009824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d101      	bne.n	8009830 <xQueueGiveFromISR+0x60>
 800982c:	2301      	movs	r3, #1
 800982e:	e000      	b.n	8009832 <xQueueGiveFromISR+0x62>
 8009830:	2300      	movs	r3, #0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10b      	bne.n	800984e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	61bb      	str	r3, [r7, #24]
}
 8009848:	bf00      	nop
 800984a:	bf00      	nop
 800984c:	e7fd      	b.n	800984a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800984e:	f003 f953 	bl	800caf8 <vPortValidateInterruptPriority>
	__asm volatile
 8009852:	f3ef 8211 	mrs	r2, BASEPRI
 8009856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	617a      	str	r2, [r7, #20]
 8009868:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800986a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800986c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009872:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800987a:	429a      	cmp	r2, r3
 800987c:	d22b      	bcs.n	80098d6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800987e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009880:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988a:	1c5a      	adds	r2, r3, #1
 800988c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009890:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009898:	d112      	bne.n	80098c0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800989a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d016      	beq.n	80098d0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a4:	3324      	adds	r3, #36	@ 0x24
 80098a6:	4618      	mov	r0, r3
 80098a8:	f001 fc36 	bl	800b118 <xTaskRemoveFromEventList>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00e      	beq.n	80098d0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00b      	beq.n	80098d0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	2201      	movs	r2, #1
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	e007      	b.n	80098d0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80098c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098c4:	3301      	adds	r3, #1
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	b25a      	sxtb	r2, r3
 80098ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80098d0:	2301      	movs	r3, #1
 80098d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098d4:	e001      	b.n	80098da <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098dc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f383 8811 	msr	BASEPRI, r3
}
 80098e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3738      	adds	r7, #56	@ 0x38
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08c      	sub	sp, #48	@ 0x30
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80098fc:	2300      	movs	r3, #0
 80098fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10b      	bne.n	8009922 <xQueueReceive+0x32>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	623b      	str	r3, [r7, #32]
}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	e7fd      	b.n	800991e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d103      	bne.n	8009930 <xQueueReceive+0x40>
 8009928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800992c:	2b00      	cmp	r3, #0
 800992e:	d101      	bne.n	8009934 <xQueueReceive+0x44>
 8009930:	2301      	movs	r3, #1
 8009932:	e000      	b.n	8009936 <xQueueReceive+0x46>
 8009934:	2300      	movs	r3, #0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10b      	bne.n	8009952 <xQueueReceive+0x62>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	61fb      	str	r3, [r7, #28]
}
 800994c:	bf00      	nop
 800994e:	bf00      	nop
 8009950:	e7fd      	b.n	800994e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009952:	f001 fe93 	bl	800b67c <xTaskGetSchedulerState>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d102      	bne.n	8009962 <xQueueReceive+0x72>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <xQueueReceive+0x76>
 8009962:	2301      	movs	r3, #1
 8009964:	e000      	b.n	8009968 <xQueueReceive+0x78>
 8009966:	2300      	movs	r3, #0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10b      	bne.n	8009984 <xQueueReceive+0x94>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	61bb      	str	r3, [r7, #24]
}
 800997e:	bf00      	nop
 8009980:	bf00      	nop
 8009982:	e7fd      	b.n	8009980 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009984:	f002 ffd8 	bl	800c938 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800998c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800998e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009990:	2b00      	cmp	r3, #0
 8009992:	d01f      	beq.n	80099d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009994:	68b9      	ldr	r1, [r7, #8]
 8009996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009998:	f000 fa1e 	bl	8009dd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800999c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999e:	1e5a      	subs	r2, r3, #1
 80099a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00f      	beq.n	80099cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ae:	3310      	adds	r3, #16
 80099b0:	4618      	mov	r0, r3
 80099b2:	f001 fbb1 	bl	800b118 <xTaskRemoveFromEventList>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d007      	beq.n	80099cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80099bc:	4b3c      	ldr	r3, [pc, #240]	@ (8009ab0 <xQueueReceive+0x1c0>)
 80099be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80099cc:	f002 ffe6 	bl	800c99c <vPortExitCritical>
				return pdPASS;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e069      	b.n	8009aa8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d103      	bne.n	80099e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80099da:	f002 ffdf 	bl	800c99c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099de:	2300      	movs	r3, #0
 80099e0:	e062      	b.n	8009aa8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d106      	bne.n	80099f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099e8:	f107 0310 	add.w	r3, r7, #16
 80099ec:	4618      	mov	r0, r3
 80099ee:	f001 fc1f 	bl	800b230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099f2:	2301      	movs	r3, #1
 80099f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099f6:	f002 ffd1 	bl	800c99c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099fa:	f001 f8a5 	bl	800ab48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099fe:	f002 ff9b 	bl	800c938 <vPortEnterCritical>
 8009a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a08:	b25b      	sxtb	r3, r3
 8009a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a0e:	d103      	bne.n	8009a18 <xQueueReceive+0x128>
 8009a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a1e:	b25b      	sxtb	r3, r3
 8009a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a24:	d103      	bne.n	8009a2e <xQueueReceive+0x13e>
 8009a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a2e:	f002 ffb5 	bl	800c99c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a32:	1d3a      	adds	r2, r7, #4
 8009a34:	f107 0310 	add.w	r3, r7, #16
 8009a38:	4611      	mov	r1, r2
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f001 fc0e 	bl	800b25c <xTaskCheckForTimeOut>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d123      	bne.n	8009a8e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a48:	f000 fa3e 	bl	8009ec8 <prvIsQueueEmpty>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d017      	beq.n	8009a82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a54:	3324      	adds	r3, #36	@ 0x24
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	4611      	mov	r1, r2
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f001 fb0a 	bl	800b074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a62:	f000 f9df 	bl	8009e24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a66:	f001 f87d 	bl	800ab64 <xTaskResumeAll>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d189      	bne.n	8009984 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009a70:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab0 <xQueueReceive+0x1c0>)
 8009a72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a76:	601a      	str	r2, [r3, #0]
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	e780      	b.n	8009984 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a84:	f000 f9ce 	bl	8009e24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a88:	f001 f86c 	bl	800ab64 <xTaskResumeAll>
 8009a8c:	e77a      	b.n	8009984 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a90:	f000 f9c8 	bl	8009e24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a94:	f001 f866 	bl	800ab64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a9a:	f000 fa15 	bl	8009ec8 <prvIsQueueEmpty>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f43f af6f 	beq.w	8009984 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009aa6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3730      	adds	r7, #48	@ 0x30
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	e000ed04 	.word	0xe000ed04

08009ab4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b08e      	sub	sp, #56	@ 0x38
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10b      	bne.n	8009ae8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	623b      	str	r3, [r7, #32]
}
 8009ae2:	bf00      	nop
 8009ae4:	bf00      	nop
 8009ae6:	e7fd      	b.n	8009ae4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00b      	beq.n	8009b08 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	61fb      	str	r3, [r7, #28]
}
 8009b02:	bf00      	nop
 8009b04:	bf00      	nop
 8009b06:	e7fd      	b.n	8009b04 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b08:	f001 fdb8 	bl	800b67c <xTaskGetSchedulerState>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d102      	bne.n	8009b18 <xQueueSemaphoreTake+0x64>
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d101      	bne.n	8009b1c <xQueueSemaphoreTake+0x68>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e000      	b.n	8009b1e <xQueueSemaphoreTake+0x6a>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10b      	bne.n	8009b3a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	61bb      	str	r3, [r7, #24]
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
 8009b38:	e7fd      	b.n	8009b36 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b3a:	f002 fefd 	bl	800c938 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b42:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d024      	beq.n	8009b94 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4c:	1e5a      	subs	r2, r3, #1
 8009b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b50:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d104      	bne.n	8009b64 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009b5a:	f002 f87b 	bl	800bc54 <pvTaskIncrementMutexHeldCount>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b62:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00f      	beq.n	8009b8c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b6e:	3310      	adds	r3, #16
 8009b70:	4618      	mov	r0, r3
 8009b72:	f001 fad1 	bl	800b118 <xTaskRemoveFromEventList>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d007      	beq.n	8009b8c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b7c:	4b54      	ldr	r3, [pc, #336]	@ (8009cd0 <xQueueSemaphoreTake+0x21c>)
 8009b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b8c:	f002 ff06 	bl	800c99c <vPortExitCritical>
				return pdPASS;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e098      	b.n	8009cc6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d112      	bne.n	8009bc0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00b      	beq.n	8009bb8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	617b      	str	r3, [r7, #20]
}
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	e7fd      	b.n	8009bb4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009bb8:	f002 fef0 	bl	800c99c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	e082      	b.n	8009cc6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d106      	bne.n	8009bd4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bc6:	f107 030c 	add.w	r3, r7, #12
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f001 fb30 	bl	800b230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bd4:	f002 fee2 	bl	800c99c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bd8:	f000 ffb6 	bl	800ab48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bdc:	f002 feac 	bl	800c938 <vPortEnterCritical>
 8009be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009be6:	b25b      	sxtb	r3, r3
 8009be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bec:	d103      	bne.n	8009bf6 <xQueueSemaphoreTake+0x142>
 8009bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009bfc:	b25b      	sxtb	r3, r3
 8009bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c02:	d103      	bne.n	8009c0c <xQueueSemaphoreTake+0x158>
 8009c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c0c:	f002 fec6 	bl	800c99c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c10:	463a      	mov	r2, r7
 8009c12:	f107 030c 	add.w	r3, r7, #12
 8009c16:	4611      	mov	r1, r2
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f001 fb1f 	bl	800b25c <xTaskCheckForTimeOut>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d132      	bne.n	8009c8a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c26:	f000 f94f 	bl	8009ec8 <prvIsQueueEmpty>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d026      	beq.n	8009c7e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d109      	bne.n	8009c4c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009c38:	f002 fe7e 	bl	800c938 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f001 fd39 	bl	800b6b8 <xTaskPriorityInherit>
 8009c46:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009c48:	f002 fea8 	bl	800c99c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c4e:	3324      	adds	r3, #36	@ 0x24
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	4611      	mov	r1, r2
 8009c54:	4618      	mov	r0, r3
 8009c56:	f001 fa0d 	bl	800b074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c5c:	f000 f8e2 	bl	8009e24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c60:	f000 ff80 	bl	800ab64 <xTaskResumeAll>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f47f af67 	bne.w	8009b3a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009c6c:	4b18      	ldr	r3, [pc, #96]	@ (8009cd0 <xQueueSemaphoreTake+0x21c>)
 8009c6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	e75d      	b.n	8009b3a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009c7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c80:	f000 f8d0 	bl	8009e24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c84:	f000 ff6e 	bl	800ab64 <xTaskResumeAll>
 8009c88:	e757      	b.n	8009b3a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009c8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c8c:	f000 f8ca 	bl	8009e24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c90:	f000 ff68 	bl	800ab64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009c96:	f000 f917 	bl	8009ec8 <prvIsQueueEmpty>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f43f af4c 	beq.w	8009b3a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00d      	beq.n	8009cc4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009ca8:	f002 fe46 	bl	800c938 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009cac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009cae:	f000 f811 	bl	8009cd4 <prvGetDisinheritPriorityAfterTimeout>
 8009cb2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f001 fdfa 	bl	800b8b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009cc0:	f002 fe6c 	bl	800c99c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009cc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3738      	adds	r7, #56	@ 0x38
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	e000ed04 	.word	0xe000ed04

08009cd4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d006      	beq.n	8009cf2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f1c3 0307 	rsb	r3, r3, #7
 8009cee:	60fb      	str	r3, [r7, #12]
 8009cf0:	e001      	b.n	8009cf6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
	}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009d10:	2300      	movs	r3, #0
 8009d12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10d      	bne.n	8009d3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d14d      	bne.n	8009dc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f001 fd38 	bl	800b7a4 <xTaskPriorityDisinherit>
 8009d34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	609a      	str	r2, [r3, #8]
 8009d3c:	e043      	b.n	8009dc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d119      	bne.n	8009d78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6858      	ldr	r0, [r3, #4]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	68b9      	ldr	r1, [r7, #8]
 8009d50:	f004 ff67 	bl	800ec22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d5c:	441a      	add	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d32b      	bcc.n	8009dc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	605a      	str	r2, [r3, #4]
 8009d76:	e026      	b.n	8009dc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	68d8      	ldr	r0, [r3, #12]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d80:	461a      	mov	r2, r3
 8009d82:	68b9      	ldr	r1, [r7, #8]
 8009d84:	f004 ff4d 	bl	800ec22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	68da      	ldr	r2, [r3, #12]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d90:	425b      	negs	r3, r3
 8009d92:	441a      	add	r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d207      	bcs.n	8009db4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	689a      	ldr	r2, [r3, #8]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dac:	425b      	negs	r3, r3
 8009dae:	441a      	add	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d105      	bne.n	8009dc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	1c5a      	adds	r2, r3, #1
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009dce:	697b      	ldr	r3, [r7, #20]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3718      	adds	r7, #24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d018      	beq.n	8009e1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68da      	ldr	r2, [r3, #12]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009df2:	441a      	add	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68da      	ldr	r2, [r3, #12]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d303      	bcc.n	8009e0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68d9      	ldr	r1, [r3, #12]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e14:	461a      	mov	r2, r3
 8009e16:	6838      	ldr	r0, [r7, #0]
 8009e18:	f004 ff03 	bl	800ec22 <memcpy>
	}
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009e2c:	f002 fd84 	bl	800c938 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e38:	e011      	b.n	8009e5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d012      	beq.n	8009e68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	3324      	adds	r3, #36	@ 0x24
 8009e46:	4618      	mov	r0, r3
 8009e48:	f001 f966 	bl	800b118 <xTaskRemoveFromEventList>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e52:	f001 fa67 	bl	800b324 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	dce9      	bgt.n	8009e3a <prvUnlockQueue+0x16>
 8009e66:	e000      	b.n	8009e6a <prvUnlockQueue+0x46>
					break;
 8009e68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	22ff      	movs	r2, #255	@ 0xff
 8009e6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009e72:	f002 fd93 	bl	800c99c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e76:	f002 fd5f 	bl	800c938 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e82:	e011      	b.n	8009ea8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d012      	beq.n	8009eb2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	3310      	adds	r3, #16
 8009e90:	4618      	mov	r0, r3
 8009e92:	f001 f941 	bl	800b118 <xTaskRemoveFromEventList>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e9c:	f001 fa42 	bl	800b324 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ea8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	dce9      	bgt.n	8009e84 <prvUnlockQueue+0x60>
 8009eb0:	e000      	b.n	8009eb4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009eb2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	22ff      	movs	r2, #255	@ 0xff
 8009eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009ebc:	f002 fd6e 	bl	800c99c <vPortExitCritical>
}
 8009ec0:	bf00      	nop
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ed0:	f002 fd32 	bl	800c938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009edc:	2301      	movs	r3, #1
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	e001      	b.n	8009ee6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ee6:	f002 fd59 	bl	800c99c <vPortExitCritical>

	return xReturn;
 8009eea:	68fb      	ldr	r3, [r7, #12]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009efc:	f002 fd1c 	bl	800c938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d102      	bne.n	8009f12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	60fb      	str	r3, [r7, #12]
 8009f10:	e001      	b.n	8009f16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009f12:	2300      	movs	r3, #0
 8009f14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f16:	f002 fd41 	bl	800c99c <vPortExitCritical>

	return xReturn;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f2e:	2300      	movs	r3, #0
 8009f30:	60fb      	str	r3, [r7, #12]
 8009f32:	e014      	b.n	8009f5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009f34:	4a0f      	ldr	r2, [pc, #60]	@ (8009f74 <vQueueAddToRegistry+0x50>)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10b      	bne.n	8009f58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009f40:	490c      	ldr	r1, [pc, #48]	@ (8009f74 <vQueueAddToRegistry+0x50>)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8009f74 <vQueueAddToRegistry+0x50>)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	4413      	add	r3, r2
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f56:	e006      	b.n	8009f66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	60fb      	str	r3, [r7, #12]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2b07      	cmp	r3, #7
 8009f62:	d9e7      	bls.n	8009f34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	200009a8 	.word	0x200009a8

08009f78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f88:	f002 fcd6 	bl	800c938 <vPortEnterCritical>
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f92:	b25b      	sxtb	r3, r3
 8009f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f98:	d103      	bne.n	8009fa2 <vQueueWaitForMessageRestricted+0x2a>
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fa8:	b25b      	sxtb	r3, r3
 8009faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fae:	d103      	bne.n	8009fb8 <vQueueWaitForMessageRestricted+0x40>
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009fb8:	f002 fcf0 	bl	800c99c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d106      	bne.n	8009fd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	3324      	adds	r3, #36	@ 0x24
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	68b9      	ldr	r1, [r7, #8]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f001 f877 	bl	800b0c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009fd2:	6978      	ldr	r0, [r7, #20]
 8009fd4:	f7ff ff26 	bl	8009e24 <prvUnlockQueue>
	}
 8009fd8:	bf00      	nop
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b08c      	sub	sp, #48	@ 0x30
 8009fe4:	af02      	add	r7, sp, #8
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d111      	bne.n	800a016 <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b04      	cmp	r3, #4
 8009ffc:	d81d      	bhi.n	800a03a <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	61fb      	str	r3, [r7, #28]
}
 800a010:	bf00      	nop
 800a012:	bf00      	nop
 800a014:	e7fd      	b.n	800a012 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10b      	bne.n	800a03a <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	61bb      	str	r3, [r7, #24]
}
 800a034:	bf00      	nop
 800a036:	bf00      	nop
 800a038:	e7fd      	b.n	800a036 <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d90b      	bls.n	800a05a <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	617b      	str	r3, [r7, #20]
}
 800a054:	bf00      	nop
 800a056:	bf00      	nop
 800a058:	e7fd      	b.n	800a056 <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800a060:	2301      	movs	r3, #1
 800a062:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3301      	adds	r3, #1
 800a068:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	3324      	adds	r3, #36	@ 0x24
 800a06e:	4618      	mov	r0, r3
 800a070:	f002 fd84 	bl	800cb7c <pvPortMalloc>
 800a074:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800a076:	6a3b      	ldr	r3, [r7, #32]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00a      	beq.n	800a092 <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800a07c:	6a3b      	ldr	r3, [r7, #32]
 800a07e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800a082:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	6a38      	ldr	r0, [r7, #32]
 800a08e:	f000 fb0b 	bl	800a6a8 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800a092:	6a3b      	ldr	r3, [r7, #32]
	}
 800a094:	4618      	mov	r0, r3
 800a096:	3728      	adds	r7, #40	@ 0x28
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800a09c:	b480      	push	{r7}
 800a09e:	b087      	sub	sp, #28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10b      	bne.n	800a0c6 <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	60fb      	str	r3, [r7, #12]
}
 800a0c0:	bf00      	nop
 800a0c2:	bf00      	nop
 800a0c4:	e7fd      	b.n	800a0c2 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	689a      	ldr	r2, [r3, #8]
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d304      	bcc.n	800a0f6 <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800a0f6:	697b      	ldr	r3, [r7, #20]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	371c      	adds	r7, #28
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b090      	sub	sp, #64	@ 0x40
 800a108:	af02      	add	r7, sp, #8
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 800a116:	2300      	movs	r3, #0
 800a118:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10b      	bne.n	800a13c <xStreamBufferSend+0x38>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a136:	bf00      	nop
 800a138:	bf00      	nop
 800a13a:	e7fd      	b.n	800a138 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800a13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10b      	bne.n	800a15a <xStreamBufferSend+0x56>
	__asm volatile
 800a142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a146:	f383 8811 	msr	BASEPRI, r3
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	623b      	str	r3, [r7, #32]
}
 800a154:	bf00      	nop
 800a156:	bf00      	nop
 800a158:	e7fd      	b.n	800a156 <xStreamBufferSend+0x52>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800a15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a15c:	7f1b      	ldrb	r3, [r3, #28]
 800a15e:	f003 0301 	and.w	r3, r3, #1
 800a162:	2b00      	cmp	r3, #0
 800a164:	d012      	beq.n	800a18c <xStreamBufferSend+0x88>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800a166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a168:	3304      	adds	r3, #4
 800a16a:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 800a16c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	429a      	cmp	r2, r3
 800a172:	d80b      	bhi.n	800a18c <xStreamBufferSend+0x88>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	61fb      	str	r3, [r7, #28]
}
 800a186:	bf00      	nop
 800a188:	bf00      	nop
 800a18a:	e7fd      	b.n	800a188 <xStreamBufferSend+0x84>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d03f      	beq.n	800a212 <xStreamBufferSend+0x10e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800a192:	f107 0310 	add.w	r3, r7, #16
 800a196:	4618      	mov	r0, r3
 800a198:	f001 f822 	bl	800b1e0 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800a19c:	f002 fbcc 	bl	800c938 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800a1a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a1a2:	f7ff ff7b 	bl	800a09c <xStreamBufferSpacesAvailable>
 800a1a6:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 800a1a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d218      	bcs.n	800a1e2 <xStreamBufferSend+0xde>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	f001 fe85 	bl	800bec0 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800a1b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b8:	695b      	ldr	r3, [r3, #20]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00b      	beq.n	800a1d6 <xStreamBufferSend+0xd2>
	__asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	61bb      	str	r3, [r7, #24]
}
 800a1d0:	bf00      	nop
 800a1d2:	bf00      	nop
 800a1d4:	e7fd      	b.n	800a1d2 <xStreamBufferSend+0xce>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800a1d6:	f001 fa41 	bl	800b65c <xTaskGetCurrentTaskHandle>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1de:	615a      	str	r2, [r3, #20]
 800a1e0:	e002      	b.n	800a1e8 <xStreamBufferSend+0xe4>
				}
				else
				{
					taskEXIT_CRITICAL();
 800a1e2:	f002 fbdb 	bl	800c99c <vPortExitCritical>
					break;
 800a1e6:	e014      	b.n	800a212 <xStreamBufferSend+0x10e>
				}
			}
			taskEXIT_CRITICAL();
 800a1e8:	f002 fbd8 	bl	800c99c <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	f001 fd42 	bl	800bc7c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800a1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800a1fe:	463a      	mov	r2, r7
 800a200:	f107 0310 	add.w	r3, r7, #16
 800a204:	4611      	mov	r1, r2
 800a206:	4618      	mov	r0, r3
 800a208:	f001 f828 	bl	800b25c <xTaskCheckForTimeOut>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d0c4      	beq.n	800a19c <xStreamBufferSend+0x98>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800a212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a214:	2b00      	cmp	r3, #0
 800a216:	d103      	bne.n	800a220 <xStreamBufferSend+0x11c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800a218:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a21a:	f7ff ff3f 	bl	800a09c <xStreamBufferSpacesAvailable>
 800a21e:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800a220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	68b9      	ldr	r1, [r7, #8]
 800a22a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a22c:	f000 f823 	bl	800a276 <prvWriteMessageToBuffer>
 800a230:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 800a232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a234:	2b00      	cmp	r3, #0
 800a236:	d019      	beq.n	800a26c <xStreamBufferSend+0x168>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800a238:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a23a:	f000 fa15 	bl	800a668 <prvBytesInBuffer>
 800a23e:	4602      	mov	r2, r0
 800a240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	429a      	cmp	r2, r3
 800a246:	d311      	bcc.n	800a26c <xStreamBufferSend+0x168>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800a248:	f000 fc7e 	bl	800ab48 <vTaskSuspendAll>
 800a24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d009      	beq.n	800a268 <xStreamBufferSend+0x164>
 800a254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a256:	6918      	ldr	r0, [r3, #16]
 800a258:	2300      	movs	r3, #0
 800a25a:	2200      	movs	r2, #0
 800a25c:	2100      	movs	r1, #0
 800a25e:	f001 fd6d 	bl	800bd3c <xTaskGenericNotify>
 800a262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a264:	2200      	movs	r2, #0
 800a266:	611a      	str	r2, [r3, #16]
 800a268:	f000 fc7c 	bl	800ab64 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800a26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3738      	adds	r7, #56	@ 0x38
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b086      	sub	sp, #24
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	60f8      	str	r0, [r7, #12]
 800a27e:	60b9      	str	r1, [r7, #8]
 800a280:	607a      	str	r2, [r7, #4]
 800a282:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d102      	bne.n	800a290 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800a28a:	2300      	movs	r3, #0
 800a28c:	617b      	str	r3, [r7, #20]
 800a28e:	e01d      	b.n	800a2cc <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	7f1b      	ldrb	r3, [r3, #28]
 800a294:	f003 0301 	and.w	r3, r3, #1
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d108      	bne.n	800a2ae <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800a29c:	2301      	movs	r3, #1
 800a29e:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	bf28      	it	cs
 800a2a8:	4613      	movcs	r3, r2
 800a2aa:	607b      	str	r3, [r7, #4]
 800a2ac:	e00e      	b.n	800a2cc <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d308      	bcc.n	800a2c8 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800a2ba:	1d3b      	adds	r3, r7, #4
 800a2bc:	2204      	movs	r2, #4
 800a2be:	4619      	mov	r1, r3
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f000 f8df 	bl	800a484 <prvWriteBytesToBuffer>
 800a2c6:	e001      	b.n	800a2cc <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d007      	beq.n	800a2e2 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	68b9      	ldr	r1, [r7, #8]
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 f8d3 	bl	800a484 <prvWriteBytesToBuffer>
 800a2de:	6138      	str	r0, [r7, #16]
 800a2e0:	e001      	b.n	800a2e6 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800a2e6:	693b      	ldr	r3, [r7, #16]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3718      	adds	r7, #24
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b08e      	sub	sp, #56	@ 0x38
 800a2f4:	af02      	add	r7, sp, #8
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
 800a2fc:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800a302:	2300      	movs	r3, #0
 800a304:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10b      	bne.n	800a324 <xStreamBufferReceive+0x34>
	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	61fb      	str	r3, [r7, #28]
}
 800a31e:	bf00      	nop
 800a320:	bf00      	nop
 800a322:	e7fd      	b.n	800a320 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10b      	bne.n	800a342 <xStreamBufferReceive+0x52>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	61bb      	str	r3, [r7, #24]
}
 800a33c:	bf00      	nop
 800a33e:	bf00      	nop
 800a340:	e7fd      	b.n	800a33e <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	7f1b      	ldrb	r3, [r3, #28]
 800a346:	f003 0301 	and.w	r3, r3, #1
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d002      	beq.n	800a354 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800a34e:	2304      	movs	r3, #4
 800a350:	627b      	str	r3, [r7, #36]	@ 0x24
 800a352:	e001      	b.n	800a358 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d035      	beq.n	800a3ca <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800a35e:	f002 faeb 	bl	800c938 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800a362:	6a38      	ldr	r0, [r7, #32]
 800a364:	f000 f980 	bl	800a668 <prvBytesInBuffer>
 800a368:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800a36a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36e:	429a      	cmp	r2, r3
 800a370:	d817      	bhi.n	800a3a2 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800a372:	2000      	movs	r0, #0
 800a374:	f001 fda4 	bl	800bec0 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00b      	beq.n	800a398 <xStreamBufferReceive+0xa8>
	__asm volatile
 800a380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	617b      	str	r3, [r7, #20]
}
 800a392:	bf00      	nop
 800a394:	bf00      	nop
 800a396:	e7fd      	b.n	800a394 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800a398:	f001 f960 	bl	800b65c <xTaskGetCurrentTaskHandle>
 800a39c:	4602      	mov	r2, r0
 800a39e:	6a3b      	ldr	r3, [r7, #32]
 800a3a0:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a3a2:	f002 fafb 	bl	800c99c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800a3a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d811      	bhi.n	800a3d2 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	f001 fc61 	bl	800bc7c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800a3c0:	6a38      	ldr	r0, [r7, #32]
 800a3c2:	f000 f951 	bl	800a668 <prvBytesInBuffer>
 800a3c6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a3c8:	e003      	b.n	800a3d2 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800a3ca:	6a38      	ldr	r0, [r7, #32]
 800a3cc:	f000 f94c 	bl	800a668 <prvBytesInBuffer>
 800a3d0:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800a3d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d91d      	bls.n	800a416 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800a3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	68b9      	ldr	r1, [r7, #8]
 800a3e4:	6a38      	ldr	r0, [r7, #32]
 800a3e6:	f000 f81b 	bl	800a420 <prvReadMessageFromBuffer>
 800a3ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800a3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d011      	beq.n	800a416 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800a3f2:	f000 fba9 	bl	800ab48 <vTaskSuspendAll>
 800a3f6:	6a3b      	ldr	r3, [r7, #32]
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d009      	beq.n	800a412 <xStreamBufferReceive+0x122>
 800a3fe:	6a3b      	ldr	r3, [r7, #32]
 800a400:	6958      	ldr	r0, [r3, #20]
 800a402:	2300      	movs	r3, #0
 800a404:	2200      	movs	r2, #0
 800a406:	2100      	movs	r1, #0
 800a408:	f001 fc98 	bl	800bd3c <xTaskGenericNotify>
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	2200      	movs	r2, #0
 800a410:	615a      	str	r2, [r3, #20]
 800a412:	f000 fba7 	bl	800ab64 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800a416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3730      	adds	r7, #48	@ 0x30
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b088      	sub	sp, #32
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800a42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a430:	2b00      	cmp	r3, #0
 800a432:	d019      	beq.n	800a468 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800a43a:	f107 0110 	add.w	r1, r7, #16
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f000 f893 	bl	800a56e <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800a454:	69fa      	ldr	r2, [r7, #28]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d907      	bls.n	800a46c <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	69ba      	ldr	r2, [r7, #24]
 800a460:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	61fb      	str	r3, [r7, #28]
 800a466:	e001      	b.n	800a46c <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	69fa      	ldr	r2, [r7, #28]
 800a470:	68b9      	ldr	r1, [r7, #8]
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f000 f87b 	bl	800a56e <prvReadBytesFromBuffer>
 800a478:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800a47a:	697b      	ldr	r3, [r7, #20]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3720      	adds	r7, #32
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b08a      	sub	sp, #40	@ 0x28
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10b      	bne.n	800a4ae <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	61fb      	str	r3, [r7, #28]
}
 800a4a8:	bf00      	nop
 800a4aa:	bf00      	nop
 800a4ac:	e7fd      	b.n	800a4aa <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	689a      	ldr	r2, [r3, #8]
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	bf28      	it	cs
 800a4c2:	4613      	movcs	r3, r2
 800a4c4:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800a4c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	441a      	add	r2, r3
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d90b      	bls.n	800a4ec <prvWriteBytesToBuffer+0x68>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	61bb      	str	r3, [r7, #24]
}
 800a4e6:	bf00      	nop
 800a4e8:	bf00      	nop
 800a4ea:	e7fd      	b.n	800a4e8 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	699a      	ldr	r2, [r3, #24]
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f2:	4413      	add	r3, r2
 800a4f4:	6a3a      	ldr	r2, [r7, #32]
 800a4f6:	68b9      	ldr	r1, [r7, #8]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f004 fb92 	bl	800ec22 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	429a      	cmp	r2, r3
 800a504:	d91d      	bls.n	800a542 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	6a3b      	ldr	r3, [r7, #32]
 800a50a:	1ad2      	subs	r2, r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	429a      	cmp	r2, r3
 800a512:	d90b      	bls.n	800a52c <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 800a514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	617b      	str	r3, [r7, #20]
}
 800a526:	bf00      	nop
 800a528:	bf00      	nop
 800a52a:	e7fd      	b.n	800a528 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6998      	ldr	r0, [r3, #24]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	18d1      	adds	r1, r2, r3
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	6a3b      	ldr	r3, [r7, #32]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	461a      	mov	r2, r3
 800a53e:	f004 fb70 	bl	800ec22 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800a542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4413      	add	r3, r2
 800a548:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a550:	429a      	cmp	r2, r3
 800a552:	d304      	bcc.n	800a55e <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a562:	605a      	str	r2, [r3, #4]

	return xCount;
 800a564:	687b      	ldr	r3, [r7, #4]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3728      	adds	r7, #40	@ 0x28
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b08a      	sub	sp, #40	@ 0x28
 800a572:	af00      	add	r7, sp, #0
 800a574:	60f8      	str	r0, [r7, #12]
 800a576:	60b9      	str	r1, [r7, #8]
 800a578:	607a      	str	r2, [r7, #4]
 800a57a:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	4293      	cmp	r3, r2
 800a582:	bf28      	it	cs
 800a584:	4613      	movcs	r3, r2
 800a586:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d067      	beq.n	800a65e <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	689a      	ldr	r2, [r3, #8]
 800a598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	6a3a      	ldr	r2, [r7, #32]
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	bf28      	it	cs
 800a5a2:	4613      	movcs	r3, r2
 800a5a4:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800a5a6:	69fa      	ldr	r2, [r7, #28]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d90b      	bls.n	800a5c6 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	61bb      	str	r3, [r7, #24]
}
 800a5c0:	bf00      	nop
 800a5c2:	bf00      	nop
 800a5c4:	e7fd      	b.n	800a5c2 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800a5c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	441a      	add	r2, r3
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d90b      	bls.n	800a5ec <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 800a5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d8:	f383 8811 	msr	BASEPRI, r3
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	617b      	str	r3, [r7, #20]
}
 800a5e6:	bf00      	nop
 800a5e8:	bf00      	nop
 800a5ea:	e7fd      	b.n	800a5e8 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	699a      	ldr	r2, [r3, #24]
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f2:	4413      	add	r3, r2
 800a5f4:	69fa      	ldr	r2, [r7, #28]
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	68b8      	ldr	r0, [r7, #8]
 800a5fa:	f004 fb12 	bl	800ec22 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800a5fe:	6a3a      	ldr	r2, [r7, #32]
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	429a      	cmp	r2, r3
 800a604:	d91a      	bls.n	800a63c <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800a606:	6a3a      	ldr	r2, [r7, #32]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d90b      	bls.n	800a626 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 800a60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a612:	f383 8811 	msr	BASEPRI, r3
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	613b      	str	r3, [r7, #16]
}
 800a620:	bf00      	nop
 800a622:	bf00      	nop
 800a624:	e7fd      	b.n	800a622 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	18d0      	adds	r0, r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6999      	ldr	r1, [r3, #24]
 800a630:	6a3a      	ldr	r2, [r7, #32]
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	461a      	mov	r2, r3
 800a638:	f004 faf3 	bl	800ec22 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800a63c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a63e:	6a3b      	ldr	r3, [r7, #32]
 800a640:	4413      	add	r3, r2
 800a642:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d304      	bcc.n	800a658 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a65c:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800a65e:	6a3b      	ldr	r3, [r7, #32]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3728      	adds	r7, #40	@ 0x28
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689a      	ldr	r2, [r3, #8]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	4413      	add	r3, r2
 800a67a:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d304      	bcc.n	800a69a <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800a69a:	68fb      	ldr	r3, [r7, #12]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800a6b6:	2355      	movs	r3, #85	@ 0x55
 800a6b8:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	6979      	ldr	r1, [r7, #20]
 800a6be:	68b8      	ldr	r0, [r7, #8]
 800a6c0:	f004 f9ad 	bl	800ea1e <memset>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d00b      	beq.n	800a6e4 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	613b      	str	r3, [r7, #16]
}
 800a6de:	bf00      	nop
 800a6e0:	bf00      	nop
 800a6e2:	e7fd      	b.n	800a6e0 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800a6e4:	2224      	movs	r2, #36	@ 0x24
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f004 f998 	bl	800ea1e <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a706:	771a      	strb	r2, [r3, #28]
}
 800a708:	bf00      	nop
 800a70a:	3718      	adds	r7, #24
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08c      	sub	sp, #48	@ 0x30
 800a714:	af04      	add	r7, sp, #16
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	603b      	str	r3, [r7, #0]
 800a71c:	4613      	mov	r3, r2
 800a71e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a720:	88fb      	ldrh	r3, [r7, #6]
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4618      	mov	r0, r3
 800a726:	f002 fa29 	bl	800cb7c <pvPortMalloc>
 800a72a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00e      	beq.n	800a750 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a732:	20bc      	movs	r0, #188	@ 0xbc
 800a734:	f002 fa22 	bl	800cb7c <pvPortMalloc>
 800a738:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d003      	beq.n	800a748 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	631a      	str	r2, [r3, #48]	@ 0x30
 800a746:	e005      	b.n	800a754 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a748:	6978      	ldr	r0, [r7, #20]
 800a74a:	f002 fae5 	bl	800cd18 <vPortFree>
 800a74e:	e001      	b.n	800a754 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a750:	2300      	movs	r3, #0
 800a752:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d013      	beq.n	800a782 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a75a:	88fa      	ldrh	r2, [r7, #6]
 800a75c:	2300      	movs	r3, #0
 800a75e:	9303      	str	r3, [sp, #12]
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	9302      	str	r3, [sp, #8]
 800a764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a766:	9301      	str	r3, [sp, #4]
 800a768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	68b9      	ldr	r1, [r7, #8]
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 f80f 	bl	800a794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a776:	69f8      	ldr	r0, [r7, #28]
 800a778:	f000 f8b6 	bl	800a8e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a77c:	2301      	movs	r3, #1
 800a77e:	61bb      	str	r3, [r7, #24]
 800a780:	e002      	b.n	800a788 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a782:	f04f 33ff 	mov.w	r3, #4294967295
 800a786:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a788:	69bb      	ldr	r3, [r7, #24]
	}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3720      	adds	r7, #32
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
	...

0800a794 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
 800a7a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	21a5      	movs	r1, #165	@ 0xa5
 800a7ae:	f004 f936 	bl	800ea1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	f023 0307 	bic.w	r3, r3, #7
 800a7ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	f003 0307 	and.w	r3, r3, #7
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00b      	beq.n	800a7ee <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	617b      	str	r3, [r7, #20]
}
 800a7e8:	bf00      	nop
 800a7ea:	bf00      	nop
 800a7ec:	e7fd      	b.n	800a7ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d01f      	beq.n	800a834 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	61fb      	str	r3, [r7, #28]
 800a7f8:	e012      	b.n	800a820 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	4413      	add	r3, r2
 800a800:	7819      	ldrb	r1, [r3, #0]
 800a802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	4413      	add	r3, r2
 800a808:	3334      	adds	r3, #52	@ 0x34
 800a80a:	460a      	mov	r2, r1
 800a80c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	4413      	add	r3, r2
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d006      	beq.n	800a828 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	3301      	adds	r3, #1
 800a81e:	61fb      	str	r3, [r7, #28]
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	2b1f      	cmp	r3, #31
 800a824:	d9e9      	bls.n	800a7fa <prvInitialiseNewTask+0x66>
 800a826:	e000      	b.n	800a82a <prvInitialiseNewTask+0x96>
			{
				break;
 800a828:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800a832:	e003      	b.n	800a83c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a836:	2200      	movs	r2, #0
 800a838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83e:	2b06      	cmp	r3, #6
 800a840:	d901      	bls.n	800a846 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a842:	2306      	movs	r3, #6
 800a844:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a84a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a850:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800a852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a854:	2200      	movs	r2, #0
 800a856:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85a:	3304      	adds	r3, #4
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fe fc8c 	bl	800917a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a864:	3318      	adds	r3, #24
 800a866:	4618      	mov	r0, r3
 800a868:	f7fe fc87 	bl	800917a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a870:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a874:	f1c3 0207 	rsb	r2, r3, #7
 800a878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a880:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a884:	2200      	movs	r2, #0
 800a886:	665a      	str	r2, [r3, #100]	@ 0x64
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a892:	2200      	movs	r2, #0
 800a894:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89a:	3368      	adds	r3, #104	@ 0x68
 800a89c:	224c      	movs	r2, #76	@ 0x4c
 800a89e:	2100      	movs	r1, #0
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f004 f8bc 	bl	800ea1e <memset>
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a8:	4a0c      	ldr	r2, [pc, #48]	@ (800a8dc <prvInitialiseNewTask+0x148>)
 800a8aa:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ae:	4a0c      	ldr	r2, [pc, #48]	@ (800a8e0 <prvInitialiseNewTask+0x14c>)
 800a8b0:	671a      	str	r2, [r3, #112]	@ 0x70
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b4:	4a0b      	ldr	r2, [pc, #44]	@ (800a8e4 <prvInitialiseNewTask+0x150>)
 800a8b6:	675a      	str	r2, [r3, #116]	@ 0x74
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	68f9      	ldr	r1, [r7, #12]
 800a8bc:	69b8      	ldr	r0, [r7, #24]
 800a8be:	f001 ff07 	bl	800c6d0 <pxPortInitialiseStack>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d002      	beq.n	800a8d4 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8d4:	bf00      	nop
 800a8d6:	3720      	adds	r7, #32
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	20007110 	.word	0x20007110
 800a8e0:	20007178 	.word	0x20007178
 800a8e4:	200071e0 	.word	0x200071e0

0800a8e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a8f0:	f002 f822 	bl	800c938 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a8f4:	4b2c      	ldr	r3, [pc, #176]	@ (800a9a8 <prvAddNewTaskToReadyList+0xc0>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	4a2b      	ldr	r2, [pc, #172]	@ (800a9a8 <prvAddNewTaskToReadyList+0xc0>)
 800a8fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a8fe:	4b2b      	ldr	r3, [pc, #172]	@ (800a9ac <prvAddNewTaskToReadyList+0xc4>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d109      	bne.n	800a91a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a906:	4a29      	ldr	r2, [pc, #164]	@ (800a9ac <prvAddNewTaskToReadyList+0xc4>)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a90c:	4b26      	ldr	r3, [pc, #152]	@ (800a9a8 <prvAddNewTaskToReadyList+0xc0>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d110      	bne.n	800a936 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a914:	f000 fd2a 	bl	800b36c <prvInitialiseTaskLists>
 800a918:	e00d      	b.n	800a936 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a91a:	4b25      	ldr	r3, [pc, #148]	@ (800a9b0 <prvAddNewTaskToReadyList+0xc8>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d109      	bne.n	800a936 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a922:	4b22      	ldr	r3, [pc, #136]	@ (800a9ac <prvAddNewTaskToReadyList+0xc4>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d802      	bhi.n	800a936 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a930:	4a1e      	ldr	r2, [pc, #120]	@ (800a9ac <prvAddNewTaskToReadyList+0xc4>)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a936:	4b1f      	ldr	r3, [pc, #124]	@ (800a9b4 <prvAddNewTaskToReadyList+0xcc>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	3301      	adds	r3, #1
 800a93c:	4a1d      	ldr	r2, [pc, #116]	@ (800a9b4 <prvAddNewTaskToReadyList+0xcc>)
 800a93e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a940:	4b1c      	ldr	r3, [pc, #112]	@ (800a9b4 <prvAddNewTaskToReadyList+0xcc>)
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a94c:	2201      	movs	r2, #1
 800a94e:	409a      	lsls	r2, r3
 800a950:	4b19      	ldr	r3, [pc, #100]	@ (800a9b8 <prvAddNewTaskToReadyList+0xd0>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4313      	orrs	r3, r2
 800a956:	4a18      	ldr	r2, [pc, #96]	@ (800a9b8 <prvAddNewTaskToReadyList+0xd0>)
 800a958:	6013      	str	r3, [r2, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a95e:	4613      	mov	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4a15      	ldr	r2, [pc, #84]	@ (800a9bc <prvAddNewTaskToReadyList+0xd4>)
 800a968:	441a      	add	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	3304      	adds	r3, #4
 800a96e:	4619      	mov	r1, r3
 800a970:	4610      	mov	r0, r2
 800a972:	f7fe fc0f 	bl	8009194 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a976:	f002 f811 	bl	800c99c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a97a:	4b0d      	ldr	r3, [pc, #52]	@ (800a9b0 <prvAddNewTaskToReadyList+0xc8>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00e      	beq.n	800a9a0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a982:	4b0a      	ldr	r3, [pc, #40]	@ (800a9ac <prvAddNewTaskToReadyList+0xc4>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d207      	bcs.n	800a9a0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a990:	4b0b      	ldr	r3, [pc, #44]	@ (800a9c0 <prvAddNewTaskToReadyList+0xd8>)
 800a992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a996:	601a      	str	r2, [r3, #0]
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9a0:	bf00      	nop
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	20000ae8 	.word	0x20000ae8
 800a9ac:	200009e8 	.word	0x200009e8
 800a9b0:	20000af4 	.word	0x20000af4
 800a9b4:	20000b04 	.word	0x20000b04
 800a9b8:	20000af0 	.word	0x20000af0
 800a9bc:	200009ec 	.word	0x200009ec
 800a9c0:	e000ed04 	.word	0xe000ed04

0800a9c4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b088      	sub	sp, #32
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10b      	bne.n	800a9ee <eTaskGetState+0x2a>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	60bb      	str	r3, [r7, #8]
}
 800a9e8:	bf00      	nop
 800a9ea:	bf00      	nop
 800a9ec:	e7fd      	b.n	800a9ea <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800a9ee:	4b24      	ldr	r3, [pc, #144]	@ (800aa80 <eTaskGetState+0xbc>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d102      	bne.n	800a9fe <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	77fb      	strb	r3, [r7, #31]
 800a9fc:	e03a      	b.n	800aa74 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800a9fe:	f001 ff9b 	bl	800c938 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800aa08:	4b1e      	ldr	r3, [pc, #120]	@ (800aa84 <eTaskGetState+0xc0>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800aa0e:	4b1e      	ldr	r3, [pc, #120]	@ (800aa88 <eTaskGetState+0xc4>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800aa14:	f001 ffc2 	bl	800c99c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800aa18:	697a      	ldr	r2, [r7, #20]
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d003      	beq.n	800aa28 <eTaskGetState+0x64>
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d102      	bne.n	800aa2e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800aa28:	2302      	movs	r3, #2
 800aa2a:	77fb      	strb	r3, [r7, #31]
 800aa2c:	e022      	b.n	800aa74 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	4a16      	ldr	r2, [pc, #88]	@ (800aa8c <eTaskGetState+0xc8>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d112      	bne.n	800aa5c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10b      	bne.n	800aa56 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d102      	bne.n	800aa50 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	77fb      	strb	r3, [r7, #31]
 800aa4e:	e011      	b.n	800aa74 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800aa50:	2303      	movs	r3, #3
 800aa52:	77fb      	strb	r3, [r7, #31]
 800aa54:	e00e      	b.n	800aa74 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800aa56:	2302      	movs	r3, #2
 800aa58:	77fb      	strb	r3, [r7, #31]
 800aa5a:	e00b      	b.n	800aa74 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	4a0c      	ldr	r2, [pc, #48]	@ (800aa90 <eTaskGetState+0xcc>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d002      	beq.n	800aa6a <eTaskGetState+0xa6>
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d102      	bne.n	800aa70 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800aa6a:	2304      	movs	r3, #4
 800aa6c:	77fb      	strb	r3, [r7, #31]
 800aa6e:	e001      	b.n	800aa74 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800aa70:	2301      	movs	r3, #1
 800aa72:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800aa74:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800aa76:	4618      	mov	r0, r3
 800aa78:	3720      	adds	r7, #32
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	200009e8 	.word	0x200009e8
 800aa84:	20000aa0 	.word	0x20000aa0
 800aa88:	20000aa4 	.word	0x20000aa4
 800aa8c:	20000ad4 	.word	0x20000ad4
 800aa90:	20000abc 	.word	0x20000abc

0800aa94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800aa9a:	4b23      	ldr	r3, [pc, #140]	@ (800ab28 <vTaskStartScheduler+0x94>)
 800aa9c:	9301      	str	r3, [sp, #4]
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aaa8:	4920      	ldr	r1, [pc, #128]	@ (800ab2c <vTaskStartScheduler+0x98>)
 800aaaa:	4821      	ldr	r0, [pc, #132]	@ (800ab30 <vTaskStartScheduler+0x9c>)
 800aaac:	f7ff fe30 	bl	800a710 <xTaskCreate>
 800aab0:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d102      	bne.n	800aabe <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800aab8:	f001 fa8e 	bl	800bfd8 <xTimerCreateTimerTask>
 800aabc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d11d      	bne.n	800ab00 <vTaskStartScheduler+0x6c>
	__asm volatile
 800aac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	60bb      	str	r3, [r7, #8]
}
 800aad6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aad8:	4b16      	ldr	r3, [pc, #88]	@ (800ab34 <vTaskStartScheduler+0xa0>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	3368      	adds	r3, #104	@ 0x68
 800aade:	4a16      	ldr	r2, [pc, #88]	@ (800ab38 <vTaskStartScheduler+0xa4>)
 800aae0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aae2:	4b16      	ldr	r3, [pc, #88]	@ (800ab3c <vTaskStartScheduler+0xa8>)
 800aae4:	f04f 32ff 	mov.w	r2, #4294967295
 800aae8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aaea:	4b15      	ldr	r3, [pc, #84]	@ (800ab40 <vTaskStartScheduler+0xac>)
 800aaec:	2201      	movs	r2, #1
 800aaee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aaf0:	4b14      	ldr	r3, [pc, #80]	@ (800ab44 <vTaskStartScheduler+0xb0>)
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800aaf6:	f7f6 fc09 	bl	800130c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aafa:	f001 fe79 	bl	800c7f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aafe:	e00f      	b.n	800ab20 <vTaskStartScheduler+0x8c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab06:	d10b      	bne.n	800ab20 <vTaskStartScheduler+0x8c>
	__asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab0c:	f383 8811 	msr	BASEPRI, r3
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	607b      	str	r3, [r7, #4]
}
 800ab1a:	bf00      	nop
 800ab1c:	bf00      	nop
 800ab1e:	e7fd      	b.n	800ab1c <vTaskStartScheduler+0x88>
}
 800ab20:	bf00      	nop
 800ab22:	3710      	adds	r7, #16
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	20000b0c 	.word	0x20000b0c
 800ab2c:	08011368 	.word	0x08011368
 800ab30:	0800b33d 	.word	0x0800b33d
 800ab34:	200009e8 	.word	0x200009e8
 800ab38:	20000430 	.word	0x20000430
 800ab3c:	20000b08 	.word	0x20000b08
 800ab40:	20000af4 	.word	0x20000af4
 800ab44:	20000aec 	.word	0x20000aec

0800ab48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ab4c:	4b04      	ldr	r3, [pc, #16]	@ (800ab60 <vTaskSuspendAll+0x18>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3301      	adds	r3, #1
 800ab52:	4a03      	ldr	r2, [pc, #12]	@ (800ab60 <vTaskSuspendAll+0x18>)
 800ab54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ab56:	bf00      	nop
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	20000b10 	.word	0x20000b10

0800ab64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ab72:	4b42      	ldr	r3, [pc, #264]	@ (800ac7c <xTaskResumeAll+0x118>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10b      	bne.n	800ab92 <xTaskResumeAll+0x2e>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	603b      	str	r3, [r7, #0]
}
 800ab8c:	bf00      	nop
 800ab8e:	bf00      	nop
 800ab90:	e7fd      	b.n	800ab8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ab92:	f001 fed1 	bl	800c938 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab96:	4b39      	ldr	r3, [pc, #228]	@ (800ac7c <xTaskResumeAll+0x118>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	4a37      	ldr	r2, [pc, #220]	@ (800ac7c <xTaskResumeAll+0x118>)
 800ab9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aba0:	4b36      	ldr	r3, [pc, #216]	@ (800ac7c <xTaskResumeAll+0x118>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d161      	bne.n	800ac6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aba8:	4b35      	ldr	r3, [pc, #212]	@ (800ac80 <xTaskResumeAll+0x11c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d05d      	beq.n	800ac6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abb0:	e02e      	b.n	800ac10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abb2:	4b34      	ldr	r3, [pc, #208]	@ (800ac84 <xTaskResumeAll+0x120>)
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	3318      	adds	r3, #24
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe fb45 	bl	800924e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	3304      	adds	r3, #4
 800abc8:	4618      	mov	r0, r3
 800abca:	f7fe fb40 	bl	800924e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd2:	2201      	movs	r2, #1
 800abd4:	409a      	lsls	r2, r3
 800abd6:	4b2c      	ldr	r3, [pc, #176]	@ (800ac88 <xTaskResumeAll+0x124>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4313      	orrs	r3, r2
 800abdc:	4a2a      	ldr	r2, [pc, #168]	@ (800ac88 <xTaskResumeAll+0x124>)
 800abde:	6013      	str	r3, [r2, #0]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abe4:	4613      	mov	r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4a27      	ldr	r2, [pc, #156]	@ (800ac8c <xTaskResumeAll+0x128>)
 800abee:	441a      	add	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	3304      	adds	r3, #4
 800abf4:	4619      	mov	r1, r3
 800abf6:	4610      	mov	r0, r2
 800abf8:	f7fe facc 	bl	8009194 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac00:	4b23      	ldr	r3, [pc, #140]	@ (800ac90 <xTaskResumeAll+0x12c>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d302      	bcc.n	800ac10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ac0a:	4b22      	ldr	r3, [pc, #136]	@ (800ac94 <xTaskResumeAll+0x130>)
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac10:	4b1c      	ldr	r3, [pc, #112]	@ (800ac84 <xTaskResumeAll+0x120>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1cc      	bne.n	800abb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac1e:	f000 fcfd 	bl	800b61c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ac22:	4b1d      	ldr	r3, [pc, #116]	@ (800ac98 <xTaskResumeAll+0x134>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d010      	beq.n	800ac50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ac2e:	f000 f8e9 	bl	800ae04 <xTaskIncrementTick>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d002      	beq.n	800ac3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ac38:	4b16      	ldr	r3, [pc, #88]	@ (800ac94 <xTaskResumeAll+0x130>)
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	3b01      	subs	r3, #1
 800ac42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1f1      	bne.n	800ac2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ac4a:	4b13      	ldr	r3, [pc, #76]	@ (800ac98 <xTaskResumeAll+0x134>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ac50:	4b10      	ldr	r3, [pc, #64]	@ (800ac94 <xTaskResumeAll+0x130>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d009      	beq.n	800ac6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ac5c:	4b0f      	ldr	r3, [pc, #60]	@ (800ac9c <xTaskResumeAll+0x138>)
 800ac5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac6c:	f001 fe96 	bl	800c99c <vPortExitCritical>

	return xAlreadyYielded;
 800ac70:	68bb      	ldr	r3, [r7, #8]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	20000b10 	.word	0x20000b10
 800ac80:	20000ae8 	.word	0x20000ae8
 800ac84:	20000aa8 	.word	0x20000aa8
 800ac88:	20000af0 	.word	0x20000af0
 800ac8c:	200009ec 	.word	0x200009ec
 800ac90:	200009e8 	.word	0x200009e8
 800ac94:	20000afc 	.word	0x20000afc
 800ac98:	20000af8 	.word	0x20000af8
 800ac9c:	e000ed04 	.word	0xe000ed04

0800aca0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aca6:	4b05      	ldr	r3, [pc, #20]	@ (800acbc <xTaskGetTickCount+0x1c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800acac:	687b      	ldr	r3, [r7, #4]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	20000aec 	.word	0x20000aec

0800acc0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acc6:	f001 ff17 	bl	800caf8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800acca:	2300      	movs	r3, #0
 800accc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800acce:	4b04      	ldr	r3, [pc, #16]	@ (800ace0 <xTaskGetTickCountFromISR+0x20>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800acd4:	683b      	ldr	r3, [r7, #0]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	20000aec 	.word	0x20000aec

0800ace4 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800acf0:	2300      	movs	r3, #0
 800acf2:	617b      	str	r3, [r7, #20]
 800acf4:	2307      	movs	r3, #7
 800acf6:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800acf8:	f7ff ff26 	bl	800ab48 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800acfc:	4b3b      	ldr	r3, [pc, #236]	@ (800adec <uxTaskGetSystemState+0x108>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d36a      	bcc.n	800addc <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800ad0c:	697a      	ldr	r2, [r7, #20]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	00db      	lsls	r3, r3, #3
 800ad12:	4413      	add	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	461a      	mov	r2, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	1898      	adds	r0, r3, r2
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4a32      	ldr	r2, [pc, #200]	@ (800adf0 <uxTaskGetSystemState+0x10c>)
 800ad28:	4413      	add	r3, r2
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	f000 fbf1 	bl	800b514 <prvListTasksWithinSingleList>
 800ad32:	4602      	mov	r2, r0
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	4413      	add	r3, r2
 800ad38:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1e2      	bne.n	800ad06 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	4613      	mov	r3, r2
 800ad44:	00db      	lsls	r3, r3, #3
 800ad46:	4413      	add	r3, r2
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	4413      	add	r3, r2
 800ad50:	4a28      	ldr	r2, [pc, #160]	@ (800adf4 <uxTaskGetSystemState+0x110>)
 800ad52:	6811      	ldr	r1, [r2, #0]
 800ad54:	2202      	movs	r2, #2
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 fbdc 	bl	800b514 <prvListTasksWithinSingleList>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	4413      	add	r3, r2
 800ad62:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	4613      	mov	r3, r2
 800ad68:	00db      	lsls	r3, r3, #3
 800ad6a:	4413      	add	r3, r2
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	461a      	mov	r2, r3
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	4413      	add	r3, r2
 800ad74:	4a20      	ldr	r2, [pc, #128]	@ (800adf8 <uxTaskGetSystemState+0x114>)
 800ad76:	6811      	ldr	r1, [r2, #0]
 800ad78:	2202      	movs	r2, #2
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 fbca 	bl	800b514 <prvListTasksWithinSingleList>
 800ad80:	4602      	mov	r2, r0
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	4413      	add	r3, r2
 800ad86:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	00db      	lsls	r3, r3, #3
 800ad8e:	4413      	add	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	461a      	mov	r2, r3
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	4413      	add	r3, r2
 800ad98:	2204      	movs	r2, #4
 800ad9a:	4918      	ldr	r1, [pc, #96]	@ (800adfc <uxTaskGetSystemState+0x118>)
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 fbb9 	bl	800b514 <prvListTasksWithinSingleList>
 800ada2:	4602      	mov	r2, r0
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	4413      	add	r3, r2
 800ada8:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	4613      	mov	r3, r2
 800adae:	00db      	lsls	r3, r3, #3
 800adb0:	4413      	add	r3, r2
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	461a      	mov	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	2203      	movs	r2, #3
 800adbc:	4910      	ldr	r1, [pc, #64]	@ (800ae00 <uxTaskGetSystemState+0x11c>)
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 fba8 	bl	800b514 <prvListTasksWithinSingleList>
 800adc4:	4602      	mov	r2, r0
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	4413      	add	r3, r2
 800adca:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d004      	beq.n	800addc <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800add2:	f7f6 faa5 	bl	8001320 <getRunTimeCounterValue>
 800add6:	4602      	mov	r2, r0
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800addc:	f7ff fec2 	bl	800ab64 <xTaskResumeAll>

		return uxTask;
 800ade0:	697b      	ldr	r3, [r7, #20]
	}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20000ae8 	.word	0x20000ae8
 800adf0:	200009ec 	.word	0x200009ec
 800adf4:	20000aa0 	.word	0x20000aa0
 800adf8:	20000aa4 	.word	0x20000aa4
 800adfc:	20000abc 	.word	0x20000abc
 800ae00:	20000ad4 	.word	0x20000ad4

0800ae04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae0e:	4b4f      	ldr	r3, [pc, #316]	@ (800af4c <xTaskIncrementTick+0x148>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f040 808f 	bne.w	800af36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae18:	4b4d      	ldr	r3, [pc, #308]	@ (800af50 <xTaskIncrementTick+0x14c>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae20:	4a4b      	ldr	r2, [pc, #300]	@ (800af50 <xTaskIncrementTick+0x14c>)
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d121      	bne.n	800ae70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae2c:	4b49      	ldr	r3, [pc, #292]	@ (800af54 <xTaskIncrementTick+0x150>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00b      	beq.n	800ae4e <xTaskIncrementTick+0x4a>
	__asm volatile
 800ae36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	603b      	str	r3, [r7, #0]
}
 800ae48:	bf00      	nop
 800ae4a:	bf00      	nop
 800ae4c:	e7fd      	b.n	800ae4a <xTaskIncrementTick+0x46>
 800ae4e:	4b41      	ldr	r3, [pc, #260]	@ (800af54 <xTaskIncrementTick+0x150>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	60fb      	str	r3, [r7, #12]
 800ae54:	4b40      	ldr	r3, [pc, #256]	@ (800af58 <xTaskIncrementTick+0x154>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a3e      	ldr	r2, [pc, #248]	@ (800af54 <xTaskIncrementTick+0x150>)
 800ae5a:	6013      	str	r3, [r2, #0]
 800ae5c:	4a3e      	ldr	r2, [pc, #248]	@ (800af58 <xTaskIncrementTick+0x154>)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6013      	str	r3, [r2, #0]
 800ae62:	4b3e      	ldr	r3, [pc, #248]	@ (800af5c <xTaskIncrementTick+0x158>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3301      	adds	r3, #1
 800ae68:	4a3c      	ldr	r2, [pc, #240]	@ (800af5c <xTaskIncrementTick+0x158>)
 800ae6a:	6013      	str	r3, [r2, #0]
 800ae6c:	f000 fbd6 	bl	800b61c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae70:	4b3b      	ldr	r3, [pc, #236]	@ (800af60 <xTaskIncrementTick+0x15c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d348      	bcc.n	800af0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae7a:	4b36      	ldr	r3, [pc, #216]	@ (800af54 <xTaskIncrementTick+0x150>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d104      	bne.n	800ae8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae84:	4b36      	ldr	r3, [pc, #216]	@ (800af60 <xTaskIncrementTick+0x15c>)
 800ae86:	f04f 32ff 	mov.w	r2, #4294967295
 800ae8a:	601a      	str	r2, [r3, #0]
					break;
 800ae8c:	e03e      	b.n	800af0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae8e:	4b31      	ldr	r3, [pc, #196]	@ (800af54 <xTaskIncrementTick+0x150>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae9e:	693a      	ldr	r2, [r7, #16]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d203      	bcs.n	800aeae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aea6:	4a2e      	ldr	r2, [pc, #184]	@ (800af60 <xTaskIncrementTick+0x15c>)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aeac:	e02e      	b.n	800af0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fe f9cb 	bl	800924e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d004      	beq.n	800aeca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	3318      	adds	r3, #24
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fe f9c2 	bl	800924e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aece:	2201      	movs	r2, #1
 800aed0:	409a      	lsls	r2, r3
 800aed2:	4b24      	ldr	r3, [pc, #144]	@ (800af64 <xTaskIncrementTick+0x160>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	4a22      	ldr	r2, [pc, #136]	@ (800af64 <xTaskIncrementTick+0x160>)
 800aeda:	6013      	str	r3, [r2, #0]
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aee0:	4613      	mov	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4a1f      	ldr	r2, [pc, #124]	@ (800af68 <xTaskIncrementTick+0x164>)
 800aeea:	441a      	add	r2, r3
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	3304      	adds	r3, #4
 800aef0:	4619      	mov	r1, r3
 800aef2:	4610      	mov	r0, r2
 800aef4:	f7fe f94e 	bl	8009194 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aefc:	4b1b      	ldr	r3, [pc, #108]	@ (800af6c <xTaskIncrementTick+0x168>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af02:	429a      	cmp	r2, r3
 800af04:	d3b9      	bcc.n	800ae7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800af06:	2301      	movs	r3, #1
 800af08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af0a:	e7b6      	b.n	800ae7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af0c:	4b17      	ldr	r3, [pc, #92]	@ (800af6c <xTaskIncrementTick+0x168>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af12:	4915      	ldr	r1, [pc, #84]	@ (800af68 <xTaskIncrementTick+0x164>)
 800af14:	4613      	mov	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	440b      	add	r3, r1
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d901      	bls.n	800af28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800af24:	2301      	movs	r3, #1
 800af26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af28:	4b11      	ldr	r3, [pc, #68]	@ (800af70 <xTaskIncrementTick+0x16c>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d007      	beq.n	800af40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800af30:	2301      	movs	r3, #1
 800af32:	617b      	str	r3, [r7, #20]
 800af34:	e004      	b.n	800af40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af36:	4b0f      	ldr	r3, [pc, #60]	@ (800af74 <xTaskIncrementTick+0x170>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	3301      	adds	r3, #1
 800af3c:	4a0d      	ldr	r2, [pc, #52]	@ (800af74 <xTaskIncrementTick+0x170>)
 800af3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800af40:	697b      	ldr	r3, [r7, #20]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20000b10 	.word	0x20000b10
 800af50:	20000aec 	.word	0x20000aec
 800af54:	20000aa0 	.word	0x20000aa0
 800af58:	20000aa4 	.word	0x20000aa4
 800af5c:	20000b00 	.word	0x20000b00
 800af60:	20000b08 	.word	0x20000b08
 800af64:	20000af0 	.word	0x20000af0
 800af68:	200009ec 	.word	0x200009ec
 800af6c:	200009e8 	.word	0x200009e8
 800af70:	20000afc 	.word	0x20000afc
 800af74:	20000af8 	.word	0x20000af8

0800af78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b086      	sub	sp, #24
 800af7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af7e:	4b35      	ldr	r3, [pc, #212]	@ (800b054 <vTaskSwitchContext+0xdc>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d003      	beq.n	800af8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af86:	4b34      	ldr	r3, [pc, #208]	@ (800b058 <vTaskSwitchContext+0xe0>)
 800af88:	2201      	movs	r2, #1
 800af8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af8c:	e05e      	b.n	800b04c <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800af8e:	4b32      	ldr	r3, [pc, #200]	@ (800b058 <vTaskSwitchContext+0xe0>)
 800af90:	2200      	movs	r2, #0
 800af92:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800af94:	f7f6 f9c4 	bl	8001320 <getRunTimeCounterValue>
 800af98:	4603      	mov	r3, r0
 800af9a:	4a30      	ldr	r2, [pc, #192]	@ (800b05c <vTaskSwitchContext+0xe4>)
 800af9c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800af9e:	4b2f      	ldr	r3, [pc, #188]	@ (800b05c <vTaskSwitchContext+0xe4>)
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	4b2f      	ldr	r3, [pc, #188]	@ (800b060 <vTaskSwitchContext+0xe8>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d909      	bls.n	800afbe <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800afaa:	4b2e      	ldr	r3, [pc, #184]	@ (800b064 <vTaskSwitchContext+0xec>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800afb0:	4a2a      	ldr	r2, [pc, #168]	@ (800b05c <vTaskSwitchContext+0xe4>)
 800afb2:	6810      	ldr	r0, [r2, #0]
 800afb4:	4a2a      	ldr	r2, [pc, #168]	@ (800b060 <vTaskSwitchContext+0xe8>)
 800afb6:	6812      	ldr	r2, [r2, #0]
 800afb8:	1a82      	subs	r2, r0, r2
 800afba:	440a      	add	r2, r1
 800afbc:	665a      	str	r2, [r3, #100]	@ 0x64
			ulTaskSwitchedInTime = ulTotalRunTime;
 800afbe:	4b27      	ldr	r3, [pc, #156]	@ (800b05c <vTaskSwitchContext+0xe4>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a27      	ldr	r2, [pc, #156]	@ (800b060 <vTaskSwitchContext+0xe8>)
 800afc4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afc6:	4b28      	ldr	r3, [pc, #160]	@ (800b068 <vTaskSwitchContext+0xf0>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	fab3 f383 	clz	r3, r3
 800afd2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800afd4:	7afb      	ldrb	r3, [r7, #11]
 800afd6:	f1c3 031f 	rsb	r3, r3, #31
 800afda:	617b      	str	r3, [r7, #20]
 800afdc:	4923      	ldr	r1, [pc, #140]	@ (800b06c <vTaskSwitchContext+0xf4>)
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	4613      	mov	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4413      	add	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	440b      	add	r3, r1
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10b      	bne.n	800b008 <vTaskSwitchContext+0x90>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	607b      	str	r3, [r7, #4]
}
 800b002:	bf00      	nop
 800b004:	bf00      	nop
 800b006:	e7fd      	b.n	800b004 <vTaskSwitchContext+0x8c>
 800b008:	697a      	ldr	r2, [r7, #20]
 800b00a:	4613      	mov	r3, r2
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	4a16      	ldr	r2, [pc, #88]	@ (800b06c <vTaskSwitchContext+0xf4>)
 800b014:	4413      	add	r3, r2
 800b016:	613b      	str	r3, [r7, #16]
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	685a      	ldr	r2, [r3, #4]
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	605a      	str	r2, [r3, #4]
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	685a      	ldr	r2, [r3, #4]
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	3308      	adds	r3, #8
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d104      	bne.n	800b038 <vTaskSwitchContext+0xc0>
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	685a      	ldr	r2, [r3, #4]
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	605a      	str	r2, [r3, #4]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	4a09      	ldr	r2, [pc, #36]	@ (800b064 <vTaskSwitchContext+0xec>)
 800b040:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b042:	4b08      	ldr	r3, [pc, #32]	@ (800b064 <vTaskSwitchContext+0xec>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	3368      	adds	r3, #104	@ 0x68
 800b048:	4a09      	ldr	r2, [pc, #36]	@ (800b070 <vTaskSwitchContext+0xf8>)
 800b04a:	6013      	str	r3, [r2, #0]
}
 800b04c:	bf00      	nop
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20000b10 	.word	0x20000b10
 800b058:	20000afc 	.word	0x20000afc
 800b05c:	20000b18 	.word	0x20000b18
 800b060:	20000b14 	.word	0x20000b14
 800b064:	200009e8 	.word	0x200009e8
 800b068:	20000af0 	.word	0x20000af0
 800b06c:	200009ec 	.word	0x200009ec
 800b070:	20000430 	.word	0x20000430

0800b074 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10b      	bne.n	800b09c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b088:	f383 8811 	msr	BASEPRI, r3
 800b08c:	f3bf 8f6f 	isb	sy
 800b090:	f3bf 8f4f 	dsb	sy
 800b094:	60fb      	str	r3, [r7, #12]
}
 800b096:	bf00      	nop
 800b098:	bf00      	nop
 800b09a:	e7fd      	b.n	800b098 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b09c:	4b07      	ldr	r3, [pc, #28]	@ (800b0bc <vTaskPlaceOnEventList+0x48>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	3318      	adds	r3, #24
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7fe f899 	bl	80091dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0aa:	2101      	movs	r1, #1
 800b0ac:	6838      	ldr	r0, [r7, #0]
 800b0ae:	f000 ff2d 	bl	800bf0c <prvAddCurrentTaskToDelayedList>
}
 800b0b2:	bf00      	nop
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	200009e8 	.word	0x200009e8

0800b0c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d10b      	bne.n	800b0ea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d6:	f383 8811 	msr	BASEPRI, r3
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	617b      	str	r3, [r7, #20]
}
 800b0e4:	bf00      	nop
 800b0e6:	bf00      	nop
 800b0e8:	e7fd      	b.n	800b0e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0ea:	4b0a      	ldr	r3, [pc, #40]	@ (800b114 <vTaskPlaceOnEventListRestricted+0x54>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	3318      	adds	r3, #24
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f7fe f84e 	bl	8009194 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b102:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b104:	6879      	ldr	r1, [r7, #4]
 800b106:	68b8      	ldr	r0, [r7, #8]
 800b108:	f000 ff00 	bl	800bf0c <prvAddCurrentTaskToDelayedList>
	}
 800b10c:	bf00      	nop
 800b10e:	3718      	adds	r7, #24
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	200009e8 	.word	0x200009e8

0800b118 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b086      	sub	sp, #24
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10b      	bne.n	800b146 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	60fb      	str	r3, [r7, #12]
}
 800b140:	bf00      	nop
 800b142:	bf00      	nop
 800b144:	e7fd      	b.n	800b142 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	3318      	adds	r3, #24
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fe f87f 	bl	800924e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b150:	4b1d      	ldr	r3, [pc, #116]	@ (800b1c8 <xTaskRemoveFromEventList+0xb0>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d11c      	bne.n	800b192 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	3304      	adds	r3, #4
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fe f876 	bl	800924e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b166:	2201      	movs	r2, #1
 800b168:	409a      	lsls	r2, r3
 800b16a:	4b18      	ldr	r3, [pc, #96]	@ (800b1cc <xTaskRemoveFromEventList+0xb4>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4313      	orrs	r3, r2
 800b170:	4a16      	ldr	r2, [pc, #88]	@ (800b1cc <xTaskRemoveFromEventList+0xb4>)
 800b172:	6013      	str	r3, [r2, #0]
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b178:	4613      	mov	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	4a13      	ldr	r2, [pc, #76]	@ (800b1d0 <xTaskRemoveFromEventList+0xb8>)
 800b182:	441a      	add	r2, r3
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	3304      	adds	r3, #4
 800b188:	4619      	mov	r1, r3
 800b18a:	4610      	mov	r0, r2
 800b18c:	f7fe f802 	bl	8009194 <vListInsertEnd>
 800b190:	e005      	b.n	800b19e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	3318      	adds	r3, #24
 800b196:	4619      	mov	r1, r3
 800b198:	480e      	ldr	r0, [pc, #56]	@ (800b1d4 <xTaskRemoveFromEventList+0xbc>)
 800b19a:	f7fd fffb 	bl	8009194 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b1d8 <xTaskRemoveFromEventList+0xc0>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d905      	bls.n	800b1b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b1b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b1dc <xTaskRemoveFromEventList+0xc4>)
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	601a      	str	r2, [r3, #0]
 800b1b6:	e001      	b.n	800b1bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b1bc:	697b      	ldr	r3, [r7, #20]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3718      	adds	r7, #24
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	20000b10 	.word	0x20000b10
 800b1cc:	20000af0 	.word	0x20000af0
 800b1d0:	200009ec 	.word	0x200009ec
 800b1d4:	20000aa8 	.word	0x20000aa8
 800b1d8:	200009e8 	.word	0x200009e8
 800b1dc:	20000afc 	.word	0x20000afc

0800b1e0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10b      	bne.n	800b206 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	60fb      	str	r3, [r7, #12]
}
 800b200:	bf00      	nop
 800b202:	bf00      	nop
 800b204:	e7fd      	b.n	800b202 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b206:	f001 fb97 	bl	800c938 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b20a:	4b07      	ldr	r3, [pc, #28]	@ (800b228 <vTaskSetTimeOutState+0x48>)
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b212:	4b06      	ldr	r3, [pc, #24]	@ (800b22c <vTaskSetTimeOutState+0x4c>)
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b21a:	f001 fbbf 	bl	800c99c <vPortExitCritical>
}
 800b21e:	bf00      	nop
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	20000b00 	.word	0x20000b00
 800b22c:	20000aec 	.word	0x20000aec

0800b230 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b238:	4b06      	ldr	r3, [pc, #24]	@ (800b254 <vTaskInternalSetTimeOutState+0x24>)
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b240:	4b05      	ldr	r3, [pc, #20]	@ (800b258 <vTaskInternalSetTimeOutState+0x28>)
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	605a      	str	r2, [r3, #4]
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr
 800b254:	20000b00 	.word	0x20000b00
 800b258:	20000aec 	.word	0x20000aec

0800b25c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b088      	sub	sp, #32
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10b      	bne.n	800b284 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b270:	f383 8811 	msr	BASEPRI, r3
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	613b      	str	r3, [r7, #16]
}
 800b27e:	bf00      	nop
 800b280:	bf00      	nop
 800b282:	e7fd      	b.n	800b280 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10b      	bne.n	800b2a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b28a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b28e:	f383 8811 	msr	BASEPRI, r3
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	60fb      	str	r3, [r7, #12]
}
 800b29c:	bf00      	nop
 800b29e:	bf00      	nop
 800b2a0:	e7fd      	b.n	800b29e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b2a2:	f001 fb49 	bl	800c938 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b2a6:	4b1d      	ldr	r3, [pc, #116]	@ (800b31c <xTaskCheckForTimeOut+0xc0>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	69ba      	ldr	r2, [r7, #24]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2be:	d102      	bne.n	800b2c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	61fb      	str	r3, [r7, #28]
 800b2c4:	e023      	b.n	800b30e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	4b15      	ldr	r3, [pc, #84]	@ (800b320 <xTaskCheckForTimeOut+0xc4>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d007      	beq.n	800b2e2 <xTaskCheckForTimeOut+0x86>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	69ba      	ldr	r2, [r7, #24]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d302      	bcc.n	800b2e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	61fb      	str	r3, [r7, #28]
 800b2e0:	e015      	b.n	800b30e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d20b      	bcs.n	800b304 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	1ad2      	subs	r2, r2, r3
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f7ff ff99 	bl	800b230 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b2fe:	2300      	movs	r3, #0
 800b300:	61fb      	str	r3, [r7, #28]
 800b302:	e004      	b.n	800b30e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	2200      	movs	r2, #0
 800b308:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b30a:	2301      	movs	r3, #1
 800b30c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b30e:	f001 fb45 	bl	800c99c <vPortExitCritical>

	return xReturn;
 800b312:	69fb      	ldr	r3, [r7, #28]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3720      	adds	r7, #32
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	20000aec 	.word	0x20000aec
 800b320:	20000b00 	.word	0x20000b00

0800b324 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b324:	b480      	push	{r7}
 800b326:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b328:	4b03      	ldr	r3, [pc, #12]	@ (800b338 <vTaskMissedYield+0x14>)
 800b32a:	2201      	movs	r2, #1
 800b32c:	601a      	str	r2, [r3, #0]
}
 800b32e:	bf00      	nop
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr
 800b338:	20000afc 	.word	0x20000afc

0800b33c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b344:	f000 f852 	bl	800b3ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b348:	4b06      	ldr	r3, [pc, #24]	@ (800b364 <prvIdleTask+0x28>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d9f9      	bls.n	800b344 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b350:	4b05      	ldr	r3, [pc, #20]	@ (800b368 <prvIdleTask+0x2c>)
 800b352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b356:	601a      	str	r2, [r3, #0]
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b360:	e7f0      	b.n	800b344 <prvIdleTask+0x8>
 800b362:	bf00      	nop
 800b364:	200009ec 	.word	0x200009ec
 800b368:	e000ed04 	.word	0xe000ed04

0800b36c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b372:	2300      	movs	r3, #0
 800b374:	607b      	str	r3, [r7, #4]
 800b376:	e00c      	b.n	800b392 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	4613      	mov	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	4413      	add	r3, r2
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4a12      	ldr	r2, [pc, #72]	@ (800b3cc <prvInitialiseTaskLists+0x60>)
 800b384:	4413      	add	r3, r2
 800b386:	4618      	mov	r0, r3
 800b388:	f7fd fed7 	bl	800913a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	3301      	adds	r3, #1
 800b390:	607b      	str	r3, [r7, #4]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b06      	cmp	r3, #6
 800b396:	d9ef      	bls.n	800b378 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b398:	480d      	ldr	r0, [pc, #52]	@ (800b3d0 <prvInitialiseTaskLists+0x64>)
 800b39a:	f7fd fece 	bl	800913a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b39e:	480d      	ldr	r0, [pc, #52]	@ (800b3d4 <prvInitialiseTaskLists+0x68>)
 800b3a0:	f7fd fecb 	bl	800913a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3a4:	480c      	ldr	r0, [pc, #48]	@ (800b3d8 <prvInitialiseTaskLists+0x6c>)
 800b3a6:	f7fd fec8 	bl	800913a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3aa:	480c      	ldr	r0, [pc, #48]	@ (800b3dc <prvInitialiseTaskLists+0x70>)
 800b3ac:	f7fd fec5 	bl	800913a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b3b0:	480b      	ldr	r0, [pc, #44]	@ (800b3e0 <prvInitialiseTaskLists+0x74>)
 800b3b2:	f7fd fec2 	bl	800913a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b3b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b3e4 <prvInitialiseTaskLists+0x78>)
 800b3b8:	4a05      	ldr	r2, [pc, #20]	@ (800b3d0 <prvInitialiseTaskLists+0x64>)
 800b3ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b3bc:	4b0a      	ldr	r3, [pc, #40]	@ (800b3e8 <prvInitialiseTaskLists+0x7c>)
 800b3be:	4a05      	ldr	r2, [pc, #20]	@ (800b3d4 <prvInitialiseTaskLists+0x68>)
 800b3c0:	601a      	str	r2, [r3, #0]
}
 800b3c2:	bf00      	nop
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	200009ec 	.word	0x200009ec
 800b3d0:	20000a78 	.word	0x20000a78
 800b3d4:	20000a8c 	.word	0x20000a8c
 800b3d8:	20000aa8 	.word	0x20000aa8
 800b3dc:	20000abc 	.word	0x20000abc
 800b3e0:	20000ad4 	.word	0x20000ad4
 800b3e4:	20000aa0 	.word	0x20000aa0
 800b3e8:	20000aa4 	.word	0x20000aa4

0800b3ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3f2:	e019      	b.n	800b428 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b3f4:	f001 faa0 	bl	800c938 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3f8:	4b10      	ldr	r3, [pc, #64]	@ (800b43c <prvCheckTasksWaitingTermination+0x50>)
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	3304      	adds	r3, #4
 800b404:	4618      	mov	r0, r3
 800b406:	f7fd ff22 	bl	800924e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b40a:	4b0d      	ldr	r3, [pc, #52]	@ (800b440 <prvCheckTasksWaitingTermination+0x54>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3b01      	subs	r3, #1
 800b410:	4a0b      	ldr	r2, [pc, #44]	@ (800b440 <prvCheckTasksWaitingTermination+0x54>)
 800b412:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b414:	4b0b      	ldr	r3, [pc, #44]	@ (800b444 <prvCheckTasksWaitingTermination+0x58>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3b01      	subs	r3, #1
 800b41a:	4a0a      	ldr	r2, [pc, #40]	@ (800b444 <prvCheckTasksWaitingTermination+0x58>)
 800b41c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b41e:	f001 fabd 	bl	800c99c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 f8e4 	bl	800b5f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b428:	4b06      	ldr	r3, [pc, #24]	@ (800b444 <prvCheckTasksWaitingTermination+0x58>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d1e1      	bne.n	800b3f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b430:	bf00      	nop
 800b432:	bf00      	nop
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	20000abc 	.word	0x20000abc
 800b440:	20000ae8 	.word	0x20000ae8
 800b444:	20000ad0 	.word	0x20000ad0

0800b448 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
 800b454:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d102      	bne.n	800b462 <vTaskGetInfo+0x1a>
 800b45c:	4b2c      	ldr	r3, [pc, #176]	@ (800b510 <vTaskGetInfo+0xc8>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	e000      	b.n	800b464 <vTaskGetInfo+0x1c>
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	697a      	ldr	r2, [r7, #20]
 800b46a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800b49e:	78fb      	ldrb	r3, [r7, #3]
 800b4a0:	2b05      	cmp	r3, #5
 800b4a2:	d01a      	beq.n	800b4da <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800b4a4:	4b1a      	ldr	r3, [pc, #104]	@ (800b510 <vTaskGetInfo+0xc8>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	697a      	ldr	r2, [r7, #20]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d103      	bne.n	800b4b6 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	731a      	strb	r2, [r3, #12]
 800b4b4:	e018      	b.n	800b4e8 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	78fa      	ldrb	r2, [r7, #3]
 800b4ba:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800b4bc:	78fb      	ldrb	r3, [r7, #3]
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	d112      	bne.n	800b4e8 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800b4c2:	f7ff fb41 	bl	800ab48 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d002      	beq.n	800b4d4 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800b4d4:	f7ff fb46 	bl	800ab64 <xTaskResumeAll>
 800b4d8:	e006      	b.n	800b4e8 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800b4da:	6978      	ldr	r0, [r7, #20]
 800b4dc:	f7ff fa72 	bl	800a9c4 <eTaskGetState>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d009      	beq.n	800b502 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f000 f860 	bl	800b5b8 <prvTaskCheckFreeStackSpace>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800b500:	e002      	b.n	800b508 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	2200      	movs	r2, #0
 800b506:	841a      	strh	r2, [r3, #32]
	}
 800b508:	bf00      	nop
 800b50a:	3718      	adds	r7, #24
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	200009e8 	.word	0x200009e8

0800b514 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800b514:	b580      	push	{r7, lr}
 800b516:	b08a      	sub	sp, #40	@ 0x28
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	4613      	mov	r3, r2
 800b520:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800b522:	2300      	movs	r3, #0
 800b524:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d03f      	beq.n	800b5ae <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	623b      	str	r3, [r7, #32]
 800b532:	6a3b      	ldr	r3, [r7, #32]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	685a      	ldr	r2, [r3, #4]
 800b538:	6a3b      	ldr	r3, [r7, #32]
 800b53a:	605a      	str	r2, [r3, #4]
 800b53c:	6a3b      	ldr	r3, [r7, #32]
 800b53e:	685a      	ldr	r2, [r3, #4]
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	3308      	adds	r3, #8
 800b544:	429a      	cmp	r2, r3
 800b546:	d104      	bne.n	800b552 <prvListTasksWithinSingleList+0x3e>
 800b548:	6a3b      	ldr	r3, [r7, #32]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	6a3b      	ldr	r3, [r7, #32]
 800b550:	605a      	str	r2, [r3, #4]
 800b552:	6a3b      	ldr	r3, [r7, #32]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	61bb      	str	r3, [r7, #24]
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	685a      	ldr	r2, [r3, #4]
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	605a      	str	r2, [r3, #4]
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	685a      	ldr	r2, [r3, #4]
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	3308      	adds	r3, #8
 800b570:	429a      	cmp	r2, r3
 800b572:	d104      	bne.n	800b57e <prvListTasksWithinSingleList+0x6a>
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	685a      	ldr	r2, [r3, #4]
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	605a      	str	r2, [r3, #4]
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800b586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b588:	4613      	mov	r3, r2
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	4413      	add	r3, r2
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	461a      	mov	r2, r3
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	1899      	adds	r1, r3, r2
 800b596:	79fb      	ldrb	r3, [r7, #7]
 800b598:	2201      	movs	r2, #1
 800b59a:	6978      	ldr	r0, [r7, #20]
 800b59c:	f7ff ff54 	bl	800b448 <vTaskGetInfo>
				uxTask++;
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d1d5      	bne.n	800b55a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3728      	adds	r7, #40	@ 0x28
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b5c4:	e005      	b.n	800b5d2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	607b      	str	r3, [r7, #4]
			ulCount++;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	2ba5      	cmp	r3, #165	@ 0xa5
 800b5d8:	d0f5      	beq.n	800b5c6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	089b      	lsrs	r3, r3, #2
 800b5de:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	b29b      	uxth	r3, r3
	}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3714      	adds	r7, #20
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	3368      	adds	r3, #104	@ 0x68
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f003 fa4f 	bl	800eaa0 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b606:	4618      	mov	r0, r3
 800b608:	f001 fb86 	bl	800cd18 <vPortFree>
			vPortFree( pxTCB );
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f001 fb83 	bl	800cd18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b612:	bf00      	nop
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
	...

0800b61c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b622:	4b0c      	ldr	r3, [pc, #48]	@ (800b654 <prvResetNextTaskUnblockTime+0x38>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d104      	bne.n	800b636 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b62c:	4b0a      	ldr	r3, [pc, #40]	@ (800b658 <prvResetNextTaskUnblockTime+0x3c>)
 800b62e:	f04f 32ff 	mov.w	r2, #4294967295
 800b632:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b634:	e008      	b.n	800b648 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b636:	4b07      	ldr	r3, [pc, #28]	@ (800b654 <prvResetNextTaskUnblockTime+0x38>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	4a04      	ldr	r2, [pc, #16]	@ (800b658 <prvResetNextTaskUnblockTime+0x3c>)
 800b646:	6013      	str	r3, [r2, #0]
}
 800b648:	bf00      	nop
 800b64a:	370c      	adds	r7, #12
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr
 800b654:	20000aa0 	.word	0x20000aa0
 800b658:	20000b08 	.word	0x20000b08

0800b65c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b662:	4b05      	ldr	r3, [pc, #20]	@ (800b678 <xTaskGetCurrentTaskHandle+0x1c>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b668:	687b      	ldr	r3, [r7, #4]
	}
 800b66a:	4618      	mov	r0, r3
 800b66c:	370c      	adds	r7, #12
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	200009e8 	.word	0x200009e8

0800b67c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b682:	4b0b      	ldr	r3, [pc, #44]	@ (800b6b0 <xTaskGetSchedulerState+0x34>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d102      	bne.n	800b690 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b68a:	2301      	movs	r3, #1
 800b68c:	607b      	str	r3, [r7, #4]
 800b68e:	e008      	b.n	800b6a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b690:	4b08      	ldr	r3, [pc, #32]	@ (800b6b4 <xTaskGetSchedulerState+0x38>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b698:	2302      	movs	r3, #2
 800b69a:	607b      	str	r3, [r7, #4]
 800b69c:	e001      	b.n	800b6a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6a2:	687b      	ldr	r3, [r7, #4]
	}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr
 800b6b0:	20000af4 	.word	0x20000af4
 800b6b4:	20000b10 	.word	0x20000b10

0800b6b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d05e      	beq.n	800b78c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6d2:	4b31      	ldr	r3, [pc, #196]	@ (800b798 <xTaskPriorityInherit+0xe0>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d24e      	bcs.n	800b77a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	db06      	blt.n	800b6f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e4:	4b2c      	ldr	r3, [pc, #176]	@ (800b798 <xTaskPriorityInherit+0xe0>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ea:	f1c3 0207 	rsb	r2, r3, #7
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	6959      	ldr	r1, [r3, #20]
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4413      	add	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	4a26      	ldr	r2, [pc, #152]	@ (800b79c <xTaskPriorityInherit+0xe4>)
 800b704:	4413      	add	r3, r2
 800b706:	4299      	cmp	r1, r3
 800b708:	d12f      	bne.n	800b76a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	3304      	adds	r3, #4
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fd fd9d 	bl	800924e <uxListRemove>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10a      	bne.n	800b730 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b71e:	2201      	movs	r2, #1
 800b720:	fa02 f303 	lsl.w	r3, r2, r3
 800b724:	43da      	mvns	r2, r3
 800b726:	4b1e      	ldr	r3, [pc, #120]	@ (800b7a0 <xTaskPriorityInherit+0xe8>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4013      	ands	r3, r2
 800b72c:	4a1c      	ldr	r2, [pc, #112]	@ (800b7a0 <xTaskPriorityInherit+0xe8>)
 800b72e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b730:	4b19      	ldr	r3, [pc, #100]	@ (800b798 <xTaskPriorityInherit+0xe0>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b73e:	2201      	movs	r2, #1
 800b740:	409a      	lsls	r2, r3
 800b742:	4b17      	ldr	r3, [pc, #92]	@ (800b7a0 <xTaskPriorityInherit+0xe8>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4313      	orrs	r3, r2
 800b748:	4a15      	ldr	r2, [pc, #84]	@ (800b7a0 <xTaskPriorityInherit+0xe8>)
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b750:	4613      	mov	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	4413      	add	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4a10      	ldr	r2, [pc, #64]	@ (800b79c <xTaskPriorityInherit+0xe4>)
 800b75a:	441a      	add	r2, r3
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	3304      	adds	r3, #4
 800b760:	4619      	mov	r1, r3
 800b762:	4610      	mov	r0, r2
 800b764:	f7fd fd16 	bl	8009194 <vListInsertEnd>
 800b768:	e004      	b.n	800b774 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b76a:	4b0b      	ldr	r3, [pc, #44]	@ (800b798 <xTaskPriorityInherit+0xe0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b774:	2301      	movs	r3, #1
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	e008      	b.n	800b78c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b77e:	4b06      	ldr	r3, [pc, #24]	@ (800b798 <xTaskPriorityInherit+0xe0>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b784:	429a      	cmp	r2, r3
 800b786:	d201      	bcs.n	800b78c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b788:	2301      	movs	r3, #1
 800b78a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b78c:	68fb      	ldr	r3, [r7, #12]
	}
 800b78e:	4618      	mov	r0, r3
 800b790:	3710      	adds	r7, #16
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	200009e8 	.word	0x200009e8
 800b79c:	200009ec 	.word	0x200009ec
 800b7a0:	20000af0 	.word	0x20000af0

0800b7a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d070      	beq.n	800b89c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b7ba:	4b3b      	ldr	r3, [pc, #236]	@ (800b8a8 <xTaskPriorityDisinherit+0x104>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d00b      	beq.n	800b7dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	60fb      	str	r3, [r7, #12]
}
 800b7d6:	bf00      	nop
 800b7d8:	bf00      	nop
 800b7da:	e7fd      	b.n	800b7d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10b      	bne.n	800b7fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	60bb      	str	r3, [r7, #8]
}
 800b7f6:	bf00      	nop
 800b7f8:	bf00      	nop
 800b7fa:	e7fd      	b.n	800b7f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b800:	1e5a      	subs	r2, r3, #1
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	661a      	str	r2, [r3, #96]	@ 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b80e:	429a      	cmp	r2, r3
 800b810:	d044      	beq.n	800b89c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b816:	2b00      	cmp	r3, #0
 800b818:	d140      	bne.n	800b89c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	3304      	adds	r3, #4
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fd fd15 	bl	800924e <uxListRemove>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d115      	bne.n	800b856 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b82e:	491f      	ldr	r1, [pc, #124]	@ (800b8ac <xTaskPriorityDisinherit+0x108>)
 800b830:	4613      	mov	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4413      	add	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	440b      	add	r3, r1
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10a      	bne.n	800b856 <xTaskPriorityDisinherit+0xb2>
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b844:	2201      	movs	r2, #1
 800b846:	fa02 f303 	lsl.w	r3, r2, r3
 800b84a:	43da      	mvns	r2, r3
 800b84c:	4b18      	ldr	r3, [pc, #96]	@ (800b8b0 <xTaskPriorityDisinherit+0x10c>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4013      	ands	r3, r2
 800b852:	4a17      	ldr	r2, [pc, #92]	@ (800b8b0 <xTaskPriorityDisinherit+0x10c>)
 800b854:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b862:	f1c3 0207 	rsb	r2, r3, #7
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86e:	2201      	movs	r2, #1
 800b870:	409a      	lsls	r2, r3
 800b872:	4b0f      	ldr	r3, [pc, #60]	@ (800b8b0 <xTaskPriorityDisinherit+0x10c>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4313      	orrs	r3, r2
 800b878:	4a0d      	ldr	r2, [pc, #52]	@ (800b8b0 <xTaskPriorityDisinherit+0x10c>)
 800b87a:	6013      	str	r3, [r2, #0]
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b880:	4613      	mov	r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4413      	add	r3, r2
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	4a08      	ldr	r2, [pc, #32]	@ (800b8ac <xTaskPriorityDisinherit+0x108>)
 800b88a:	441a      	add	r2, r3
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	3304      	adds	r3, #4
 800b890:	4619      	mov	r1, r3
 800b892:	4610      	mov	r0, r2
 800b894:	f7fd fc7e 	bl	8009194 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b898:	2301      	movs	r3, #1
 800b89a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b89c:	697b      	ldr	r3, [r7, #20]
	}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	200009e8 	.word	0x200009e8
 800b8ac:	200009ec 	.word	0x200009ec
 800b8b0:	20000af0 	.word	0x20000af0

0800b8b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b088      	sub	sp, #32
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d079      	beq.n	800b9c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10b      	bne.n	800b8ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d8:	f383 8811 	msr	BASEPRI, r3
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	60fb      	str	r3, [r7, #12]
}
 800b8e6:	bf00      	nop
 800b8e8:	bf00      	nop
 800b8ea:	e7fd      	b.n	800b8e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d902      	bls.n	800b8fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	61fb      	str	r3, [r7, #28]
 800b8fa:	e002      	b.n	800b902 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b900:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b906:	69fa      	ldr	r2, [r7, #28]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d059      	beq.n	800b9c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b910:	697a      	ldr	r2, [r7, #20]
 800b912:	429a      	cmp	r2, r3
 800b914:	d154      	bne.n	800b9c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b916:	4b2c      	ldr	r3, [pc, #176]	@ (800b9c8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	69ba      	ldr	r2, [r7, #24]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d10b      	bne.n	800b938 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b924:	f383 8811 	msr	BASEPRI, r3
 800b928:	f3bf 8f6f 	isb	sy
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	60bb      	str	r3, [r7, #8]
}
 800b932:	bf00      	nop
 800b934:	bf00      	nop
 800b936:	e7fd      	b.n	800b934 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b93c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	69fa      	ldr	r2, [r7, #28]
 800b942:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	699b      	ldr	r3, [r3, #24]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	db04      	blt.n	800b956 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	f1c3 0207 	rsb	r2, r3, #7
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	6959      	ldr	r1, [r3, #20]
 800b95a:	693a      	ldr	r2, [r7, #16]
 800b95c:	4613      	mov	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4413      	add	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4a19      	ldr	r2, [pc, #100]	@ (800b9cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b966:	4413      	add	r3, r2
 800b968:	4299      	cmp	r1, r3
 800b96a:	d129      	bne.n	800b9c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	3304      	adds	r3, #4
 800b970:	4618      	mov	r0, r3
 800b972:	f7fd fc6c 	bl	800924e <uxListRemove>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10a      	bne.n	800b992 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b980:	2201      	movs	r2, #1
 800b982:	fa02 f303 	lsl.w	r3, r2, r3
 800b986:	43da      	mvns	r2, r3
 800b988:	4b11      	ldr	r3, [pc, #68]	@ (800b9d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4013      	ands	r3, r2
 800b98e:	4a10      	ldr	r2, [pc, #64]	@ (800b9d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b990:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b996:	2201      	movs	r2, #1
 800b998:	409a      	lsls	r2, r3
 800b99a:	4b0d      	ldr	r3, [pc, #52]	@ (800b9d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	4a0b      	ldr	r2, [pc, #44]	@ (800b9d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b9a2:	6013      	str	r3, [r2, #0]
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	4413      	add	r3, r2
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4a06      	ldr	r2, [pc, #24]	@ (800b9cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b9b2:	441a      	add	r2, r3
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	3304      	adds	r3, #4
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	4610      	mov	r0, r2
 800b9bc:	f7fd fbea 	bl	8009194 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9c0:	bf00      	nop
 800b9c2:	3720      	adds	r7, #32
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	200009e8 	.word	0x200009e8
 800b9cc:	200009ec 	.word	0x200009ec
 800b9d0:	20000af0 	.word	0x20000af0

0800b9d4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f003 f916 	bl	800ec12 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7f4 fc7a 	bl	80002e0 <strlen>
 800b9ec:	60f8      	str	r0, [r7, #12]
 800b9ee:	e007      	b.n	800ba00 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	2220      	movs	r2, #32
 800b9f8:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2b1e      	cmp	r3, #30
 800ba04:	d9f4      	bls.n	800b9f0 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	4413      	add	r3, r2
	}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
	...

0800ba20 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800ba20:	b590      	push	{r4, r7, lr}
 800ba22:	b089      	sub	sp, #36	@ 0x24
 800ba24:	af02      	add	r7, sp, #8
 800ba26:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ba2e:	4b45      	ldr	r3, [pc, #276]	@ (800bb44 <vTaskList+0x124>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800ba34:	4b43      	ldr	r3, [pc, #268]	@ (800bb44 <vTaskList+0x124>)
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	00db      	lsls	r3, r3, #3
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	4618      	mov	r0, r3
 800ba42:	f001 f89b 	bl	800cb7c <pvPortMalloc>
 800ba46:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d076      	beq.n	800bb3c <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ba4e:	2200      	movs	r2, #0
 800ba50:	68f9      	ldr	r1, [r7, #12]
 800ba52:	68b8      	ldr	r0, [r7, #8]
 800ba54:	f7ff f946 	bl	800ace4 <uxTaskGetSystemState>
 800ba58:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	617b      	str	r3, [r7, #20]
 800ba5e:	e066      	b.n	800bb2e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	4613      	mov	r3, r2
 800ba64:	00db      	lsls	r3, r3, #3
 800ba66:	4413      	add	r3, r2
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	4413      	add	r3, r2
 800ba70:	7b1b      	ldrb	r3, [r3, #12]
 800ba72:	2b04      	cmp	r3, #4
 800ba74:	d81b      	bhi.n	800baae <vTaskList+0x8e>
 800ba76:	a201      	add	r2, pc, #4	@ (adr r2, 800ba7c <vTaskList+0x5c>)
 800ba78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba7c:	0800ba91 	.word	0x0800ba91
 800ba80:	0800ba97 	.word	0x0800ba97
 800ba84:	0800ba9d 	.word	0x0800ba9d
 800ba88:	0800baa3 	.word	0x0800baa3
 800ba8c:	0800baa9 	.word	0x0800baa9
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800ba90:	2358      	movs	r3, #88	@ 0x58
 800ba92:	74fb      	strb	r3, [r7, #19]
										break;
 800ba94:	e00e      	b.n	800bab4 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800ba96:	2352      	movs	r3, #82	@ 0x52
 800ba98:	74fb      	strb	r3, [r7, #19]
										break;
 800ba9a:	e00b      	b.n	800bab4 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ba9c:	2342      	movs	r3, #66	@ 0x42
 800ba9e:	74fb      	strb	r3, [r7, #19]
										break;
 800baa0:	e008      	b.n	800bab4 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800baa2:	2353      	movs	r3, #83	@ 0x53
 800baa4:	74fb      	strb	r3, [r7, #19]
										break;
 800baa6:	e005      	b.n	800bab4 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800baa8:	2344      	movs	r3, #68	@ 0x44
 800baaa:	74fb      	strb	r3, [r7, #19]
										break;
 800baac:	e002      	b.n	800bab4 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800baae:	2300      	movs	r3, #0
 800bab0:	74fb      	strb	r3, [r7, #19]
										break;
 800bab2:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800bab4:	697a      	ldr	r2, [r7, #20]
 800bab6:	4613      	mov	r3, r2
 800bab8:	00db      	lsls	r3, r3, #3
 800baba:	4413      	add	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	461a      	mov	r2, r3
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	4413      	add	r3, r2
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	4619      	mov	r1, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f7ff ff83 	bl	800b9d4 <prvWriteNameToBuffer>
 800bace:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800bad0:	7cf9      	ldrb	r1, [r7, #19]
 800bad2:	697a      	ldr	r2, [r7, #20]
 800bad4:	4613      	mov	r3, r2
 800bad6:	00db      	lsls	r3, r3, #3
 800bad8:	4413      	add	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	461a      	mov	r2, r3
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	4413      	add	r3, r2
 800bae2:	6918      	ldr	r0, [r3, #16]
 800bae4:	697a      	ldr	r2, [r7, #20]
 800bae6:	4613      	mov	r3, r2
 800bae8:	00db      	lsls	r3, r3, #3
 800baea:	4413      	add	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	461a      	mov	r2, r3
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	4413      	add	r3, r2
 800baf4:	8c1b      	ldrh	r3, [r3, #32]
 800baf6:	461c      	mov	r4, r3
 800baf8:	697a      	ldr	r2, [r7, #20]
 800bafa:	4613      	mov	r3, r2
 800bafc:	00db      	lsls	r3, r3, #3
 800bafe:	4413      	add	r3, r2
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	461a      	mov	r2, r3
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	4413      	add	r3, r2
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	9301      	str	r3, [sp, #4]
 800bb0c:	9400      	str	r4, [sp, #0]
 800bb0e:	4603      	mov	r3, r0
 800bb10:	460a      	mov	r2, r1
 800bb12:	490d      	ldr	r1, [pc, #52]	@ (800bb48 <vTaskList+0x128>)
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f002 ff1f 	bl	800e958 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7f4 fbe0 	bl	80002e0 <strlen>
 800bb20:	4602      	mov	r2, r0
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4413      	add	r3, r2
 800bb26:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	617b      	str	r3, [r7, #20]
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d394      	bcc.n	800ba60 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800bb36:	68b8      	ldr	r0, [r7, #8]
 800bb38:	f001 f8ee 	bl	800cd18 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb3c:	bf00      	nop
 800bb3e:	371c      	adds	r7, #28
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd90      	pop	{r4, r7, pc}
 800bb44:	20000ae8 	.word	0x20000ae8
 800bb48:	08011370 	.word	0x08011370

0800bb4c <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b088      	sub	sp, #32
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800bb5a:	4b3a      	ldr	r3, [pc, #232]	@ (800bc44 <vTaskGetRunTimeStats+0xf8>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800bb60:	4b38      	ldr	r3, [pc, #224]	@ (800bc44 <vTaskGetRunTimeStats+0xf8>)
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	4613      	mov	r3, r2
 800bb66:	00db      	lsls	r3, r3, #3
 800bb68:	4413      	add	r3, r2
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f001 f805 	bl	800cb7c <pvPortMalloc>
 800bb72:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d05f      	beq.n	800bc3a <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800bb7a:	f107 030c 	add.w	r3, r7, #12
 800bb7e:	461a      	mov	r2, r3
 800bb80:	69b9      	ldr	r1, [r7, #24]
 800bb82:	6978      	ldr	r0, [r7, #20]
 800bb84:	f7ff f8ae 	bl	800ace4 <uxTaskGetSystemState>
 800bb88:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	4a2e      	ldr	r2, [pc, #184]	@ (800bc48 <vTaskGetRunTimeStats+0xfc>)
 800bb8e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb92:	095b      	lsrs	r3, r3, #5
 800bb94:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d04b      	beq.n	800bc34 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	61fb      	str	r3, [r7, #28]
 800bba0:	e044      	b.n	800bc2c <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800bba2:	69fa      	ldr	r2, [r7, #28]
 800bba4:	4613      	mov	r3, r2
 800bba6:	00db      	lsls	r3, r3, #3
 800bba8:	4413      	add	r3, r2
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	461a      	mov	r2, r3
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	699a      	ldr	r2, [r3, #24]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbba:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800bbbc:	69fa      	ldr	r2, [r7, #28]
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	00db      	lsls	r3, r3, #3
 800bbc2:	4413      	add	r3, r2
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	4413      	add	r3, r2
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7ff feff 	bl	800b9d4 <prvWriteNameToBuffer>
 800bbd6:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00e      	beq.n	800bbfc <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800bbde:	69fa      	ldr	r2, [r7, #28]
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	4413      	add	r3, r2
 800bbe6:	009b      	lsls	r3, r3, #2
 800bbe8:	461a      	mov	r2, r3
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	4413      	add	r3, r2
 800bbee:	699a      	ldr	r2, [r3, #24]
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	4916      	ldr	r1, [pc, #88]	@ (800bc4c <vTaskGetRunTimeStats+0x100>)
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f002 feaf 	bl	800e958 <siprintf>
 800bbfa:	e00d      	b.n	800bc18 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800bbfc:	69fa      	ldr	r2, [r7, #28]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	00db      	lsls	r3, r3, #3
 800bc02:	4413      	add	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	461a      	mov	r2, r3
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	699b      	ldr	r3, [r3, #24]
 800bc0e:	461a      	mov	r2, r3
 800bc10:	490f      	ldr	r1, [pc, #60]	@ (800bc50 <vTaskGetRunTimeStats+0x104>)
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f002 fea0 	bl	800e958 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f7f4 fb61 	bl	80002e0 <strlen>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4413      	add	r3, r2
 800bc24:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	61fb      	str	r3, [r7, #28]
 800bc2c:	69fa      	ldr	r2, [r7, #28]
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d3b6      	bcc.n	800bba2 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800bc34:	6978      	ldr	r0, [r7, #20]
 800bc36:	f001 f86f 	bl	800cd18 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc3a:	bf00      	nop
 800bc3c:	3720      	adds	r7, #32
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20000ae8 	.word	0x20000ae8
 800bc48:	51eb851f 	.word	0x51eb851f
 800bc4c:	08011380 	.word	0x08011380
 800bc50:	0801138c 	.word	0x0801138c

0800bc54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bc54:	b480      	push	{r7}
 800bc56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bc58:	4b07      	ldr	r3, [pc, #28]	@ (800bc78 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d004      	beq.n	800bc6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bc60:	4b05      	ldr	r3, [pc, #20]	@ (800bc78 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800bc66:	3201      	adds	r2, #1
 800bc68:	661a      	str	r2, [r3, #96]	@ 0x60
		}

		return pxCurrentTCB;
 800bc6a:	4b03      	ldr	r3, [pc, #12]	@ (800bc78 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
	}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr
 800bc78:	200009e8 	.word	0x200009e8

0800bc7c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b086      	sub	sp, #24
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
 800bc88:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800bc8a:	f000 fe55 	bl	800c938 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bc8e:	4b29      	ldr	r3, [pc, #164]	@ (800bd34 <xTaskNotifyWait+0xb8>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d01c      	beq.n	800bcd6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800bc9c:	4b25      	ldr	r3, [pc, #148]	@ (800bd34 <xTaskNotifyWait+0xb8>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	43d2      	mvns	r2, r2
 800bca8:	400a      	ands	r2, r1
 800bcaa:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bcae:	4b21      	ldr	r3, [pc, #132]	@ (800bd34 <xTaskNotifyWait+0xb8>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00b      	beq.n	800bcd6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	6838      	ldr	r0, [r7, #0]
 800bcc2:	f000 f923 	bl	800bf0c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bcc6:	4b1c      	ldr	r3, [pc, #112]	@ (800bd38 <xTaskNotifyWait+0xbc>)
 800bcc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bcd6:	f000 fe61 	bl	800c99c <vPortExitCritical>

		taskENTER_CRITICAL();
 800bcda:	f000 fe2d 	bl	800c938 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d005      	beq.n	800bcf0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bce4:	4b13      	ldr	r3, [pc, #76]	@ (800bd34 <xTaskNotifyWait+0xb8>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bcf0:	4b10      	ldr	r3, [pc, #64]	@ (800bd34 <xTaskNotifyWait+0xb8>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b02      	cmp	r3, #2
 800bcfc:	d002      	beq.n	800bd04 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	617b      	str	r3, [r7, #20]
 800bd02:	e00a      	b.n	800bd1a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bd04:	4b0b      	ldr	r3, [pc, #44]	@ (800bd34 <xTaskNotifyWait+0xb8>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 800bd0c:	68ba      	ldr	r2, [r7, #8]
 800bd0e:	43d2      	mvns	r2, r2
 800bd10:	400a      	ands	r2, r1
 800bd12:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				xReturn = pdTRUE;
 800bd16:	2301      	movs	r3, #1
 800bd18:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd1a:	4b06      	ldr	r3, [pc, #24]	@ (800bd34 <xTaskNotifyWait+0xb8>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
		}
		taskEXIT_CRITICAL();
 800bd24:	f000 fe3a 	bl	800c99c <vPortExitCritical>

		return xReturn;
 800bd28:	697b      	ldr	r3, [r7, #20]
	}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3718      	adds	r7, #24
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	200009e8 	.word	0x200009e8
 800bd38:	e000ed04 	.word	0xe000ed04

0800bd3c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b08a      	sub	sp, #40	@ 0x28
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	4613      	mov	r3, r2
 800bd4a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d10b      	bne.n	800bd6e <xTaskGenericNotify+0x32>
	__asm volatile
 800bd56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd5a:	f383 8811 	msr	BASEPRI, r3
 800bd5e:	f3bf 8f6f 	isb	sy
 800bd62:	f3bf 8f4f 	dsb	sy
 800bd66:	61bb      	str	r3, [r7, #24]
}
 800bd68:	bf00      	nop
 800bd6a:	bf00      	nop
 800bd6c:	e7fd      	b.n	800bd6a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bd72:	f000 fde1 	bl	800c938 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d004      	beq.n	800bd86 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bd7c:	6a3b      	ldr	r3, [r7, #32]
 800bd7e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bd86:	6a3b      	ldr	r3, [r7, #32]
 800bd88:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800bd8c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bd8e:	6a3b      	ldr	r3, [r7, #32]
 800bd90:	2202      	movs	r2, #2
 800bd92:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			switch( eAction )
 800bd96:	79fb      	ldrb	r3, [r7, #7]
 800bd98:	2b04      	cmp	r3, #4
 800bd9a:	d82e      	bhi.n	800bdfa <xTaskGenericNotify+0xbe>
 800bd9c:	a201      	add	r2, pc, #4	@ (adr r2, 800bda4 <xTaskGenericNotify+0x68>)
 800bd9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda2:	bf00      	nop
 800bda4:	0800be1f 	.word	0x0800be1f
 800bda8:	0800bdb9 	.word	0x0800bdb9
 800bdac:	0800bdcb 	.word	0x0800bdcb
 800bdb0:	0800bddb 	.word	0x0800bddb
 800bdb4:	0800bde5 	.word	0x0800bde5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bdb8:	6a3b      	ldr	r3, [r7, #32]
 800bdba:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	431a      	orrs	r2, r3
 800bdc2:	6a3b      	ldr	r3, [r7, #32]
 800bdc4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800bdc8:	e02c      	b.n	800be24 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bdca:	6a3b      	ldr	r3, [r7, #32]
 800bdcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bdd0:	1c5a      	adds	r2, r3, #1
 800bdd2:	6a3b      	ldr	r3, [r7, #32]
 800bdd4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800bdd8:	e024      	b.n	800be24 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800bde2:	e01f      	b.n	800be24 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bde4:	7ffb      	ldrb	r3, [r7, #31]
 800bde6:	2b02      	cmp	r3, #2
 800bde8:	d004      	beq.n	800bdf4 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	68ba      	ldr	r2, [r7, #8]
 800bdee:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bdf2:	e017      	b.n	800be24 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800bdf8:	e014      	b.n	800be24 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800bdfa:	6a3b      	ldr	r3, [r7, #32]
 800bdfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800be00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be04:	d00d      	beq.n	800be22 <xTaskGenericNotify+0xe6>
	__asm volatile
 800be06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be0a:	f383 8811 	msr	BASEPRI, r3
 800be0e:	f3bf 8f6f 	isb	sy
 800be12:	f3bf 8f4f 	dsb	sy
 800be16:	617b      	str	r3, [r7, #20]
}
 800be18:	bf00      	nop
 800be1a:	bf00      	nop
 800be1c:	e7fd      	b.n	800be1a <xTaskGenericNotify+0xde>
					break;
 800be1e:	bf00      	nop
 800be20:	e000      	b.n	800be24 <xTaskGenericNotify+0xe8>

					break;
 800be22:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800be24:	7ffb      	ldrb	r3, [r7, #31]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d13a      	bne.n	800bea0 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be2a:	6a3b      	ldr	r3, [r7, #32]
 800be2c:	3304      	adds	r3, #4
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fd fa0d 	bl	800924e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800be34:	6a3b      	ldr	r3, [r7, #32]
 800be36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be38:	2201      	movs	r2, #1
 800be3a:	409a      	lsls	r2, r3
 800be3c:	4b1c      	ldr	r3, [pc, #112]	@ (800beb0 <xTaskGenericNotify+0x174>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4313      	orrs	r3, r2
 800be42:	4a1b      	ldr	r2, [pc, #108]	@ (800beb0 <xTaskGenericNotify+0x174>)
 800be44:	6013      	str	r3, [r2, #0]
 800be46:	6a3b      	ldr	r3, [r7, #32]
 800be48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be4a:	4613      	mov	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4413      	add	r3, r2
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	4a18      	ldr	r2, [pc, #96]	@ (800beb4 <xTaskGenericNotify+0x178>)
 800be54:	441a      	add	r2, r3
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	3304      	adds	r3, #4
 800be5a:	4619      	mov	r1, r3
 800be5c:	4610      	mov	r0, r2
 800be5e:	f7fd f999 	bl	8009194 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800be62:	6a3b      	ldr	r3, [r7, #32]
 800be64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be66:	2b00      	cmp	r3, #0
 800be68:	d00b      	beq.n	800be82 <xTaskGenericNotify+0x146>
	__asm volatile
 800be6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be6e:	f383 8811 	msr	BASEPRI, r3
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	f3bf 8f4f 	dsb	sy
 800be7a:	613b      	str	r3, [r7, #16]
}
 800be7c:	bf00      	nop
 800be7e:	bf00      	nop
 800be80:	e7fd      	b.n	800be7e <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be82:	6a3b      	ldr	r3, [r7, #32]
 800be84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be86:	4b0c      	ldr	r3, [pc, #48]	@ (800beb8 <xTaskGenericNotify+0x17c>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d907      	bls.n	800bea0 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800be90:	4b0a      	ldr	r3, [pc, #40]	@ (800bebc <xTaskGenericNotify+0x180>)
 800be92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be96:	601a      	str	r2, [r3, #0]
 800be98:	f3bf 8f4f 	dsb	sy
 800be9c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bea0:	f000 fd7c 	bl	800c99c <vPortExitCritical>

		return xReturn;
 800bea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3728      	adds	r7, #40	@ 0x28
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	20000af0 	.word	0x20000af0
 800beb4:	200009ec 	.word	0x200009ec
 800beb8:	200009e8 	.word	0x200009e8
 800bebc:	e000ed04 	.word	0xe000ed04

0800bec0 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d102      	bne.n	800bed4 <xTaskNotifyStateClear+0x14>
 800bece:	4b0e      	ldr	r3, [pc, #56]	@ (800bf08 <xTaskNotifyStateClear+0x48>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	e000      	b.n	800bed6 <xTaskNotifyStateClear+0x16>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800bed8:	f000 fd2e 	bl	800c938 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d106      	bne.n	800bef6 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
				xReturn = pdPASS;
 800bef0:	2301      	movs	r3, #1
 800bef2:	60fb      	str	r3, [r7, #12]
 800bef4:	e001      	b.n	800befa <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800bef6:	2300      	movs	r3, #0
 800bef8:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800befa:	f000 fd4f 	bl	800c99c <vPortExitCritical>

		return xReturn;
 800befe:	68fb      	ldr	r3, [r7, #12]
	}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	200009e8 	.word	0x200009e8

0800bf0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf16:	4b29      	ldr	r3, [pc, #164]	@ (800bfbc <prvAddCurrentTaskToDelayedList+0xb0>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf1c:	4b28      	ldr	r3, [pc, #160]	@ (800bfc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	3304      	adds	r3, #4
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fd f993 	bl	800924e <uxListRemove>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10b      	bne.n	800bf46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bf2e:	4b24      	ldr	r3, [pc, #144]	@ (800bfc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf34:	2201      	movs	r2, #1
 800bf36:	fa02 f303 	lsl.w	r3, r2, r3
 800bf3a:	43da      	mvns	r2, r3
 800bf3c:	4b21      	ldr	r3, [pc, #132]	@ (800bfc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4013      	ands	r3, r2
 800bf42:	4a20      	ldr	r2, [pc, #128]	@ (800bfc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4c:	d10a      	bne.n	800bf64 <prvAddCurrentTaskToDelayedList+0x58>
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d007      	beq.n	800bf64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf54:	4b1a      	ldr	r3, [pc, #104]	@ (800bfc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	3304      	adds	r3, #4
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	481a      	ldr	r0, [pc, #104]	@ (800bfc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bf5e:	f7fd f919 	bl	8009194 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf62:	e026      	b.n	800bfb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4413      	add	r3, r2
 800bf6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf6c:	4b14      	ldr	r3, [pc, #80]	@ (800bfc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf74:	68ba      	ldr	r2, [r7, #8]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d209      	bcs.n	800bf90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf7c:	4b13      	ldr	r3, [pc, #76]	@ (800bfcc <prvAddCurrentTaskToDelayedList+0xc0>)
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	4b0f      	ldr	r3, [pc, #60]	@ (800bfc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	3304      	adds	r3, #4
 800bf86:	4619      	mov	r1, r3
 800bf88:	4610      	mov	r0, r2
 800bf8a:	f7fd f927 	bl	80091dc <vListInsert>
}
 800bf8e:	e010      	b.n	800bfb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf90:	4b0f      	ldr	r3, [pc, #60]	@ (800bfd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	4b0a      	ldr	r3, [pc, #40]	@ (800bfc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	3304      	adds	r3, #4
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	f7fd f91d 	bl	80091dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bfa2:	4b0c      	ldr	r3, [pc, #48]	@ (800bfd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d202      	bcs.n	800bfb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bfac:	4a09      	ldr	r2, [pc, #36]	@ (800bfd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	6013      	str	r3, [r2, #0]
}
 800bfb2:	bf00      	nop
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	20000aec 	.word	0x20000aec
 800bfc0:	200009e8 	.word	0x200009e8
 800bfc4:	20000af0 	.word	0x20000af0
 800bfc8:	20000ad4 	.word	0x20000ad4
 800bfcc:	20000aa4 	.word	0x20000aa4
 800bfd0:	20000aa0 	.word	0x20000aa0
 800bfd4:	20000b08 	.word	0x20000b08

0800bfd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bfe2:	f000 fb3f 	bl	800c664 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bfe6:	4b12      	ldr	r3, [pc, #72]	@ (800c030 <xTimerCreateTimerTask+0x58>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00b      	beq.n	800c006 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800bfee:	4b11      	ldr	r3, [pc, #68]	@ (800c034 <xTimerCreateTimerTask+0x5c>)
 800bff0:	9301      	str	r3, [sp, #4]
 800bff2:	2302      	movs	r3, #2
 800bff4:	9300      	str	r3, [sp, #0]
 800bff6:	2300      	movs	r3, #0
 800bff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bffc:	490e      	ldr	r1, [pc, #56]	@ (800c038 <xTimerCreateTimerTask+0x60>)
 800bffe:	480f      	ldr	r0, [pc, #60]	@ (800c03c <xTimerCreateTimerTask+0x64>)
 800c000:	f7fe fb86 	bl	800a710 <xTaskCreate>
 800c004:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d10b      	bne.n	800c024 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 800c00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	603b      	str	r3, [r7, #0]
}
 800c01e:	bf00      	nop
 800c020:	bf00      	nop
 800c022:	e7fd      	b.n	800c020 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800c024:	687b      	ldr	r3, [r7, #4]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	20000b4c 	.word	0x20000b4c
 800c034:	20000b50 	.word	0x20000b50
 800c038:	08011398 	.word	0x08011398
 800c03c:	0800c235 	.word	0x0800c235

0800c040 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c040:	b580      	push	{r7, lr}
 800c042:	b088      	sub	sp, #32
 800c044:	af02      	add	r7, sp, #8
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
 800c04c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c04e:	202c      	movs	r0, #44	@ 0x2c
 800c050:	f000 fd94 	bl	800cb7c <pvPortMalloc>
 800c054:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00d      	beq.n	800c078 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	9301      	str	r3, [sp, #4]
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	68b9      	ldr	r1, [r7, #8]
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	f000 f805 	bl	800c082 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c078:	697b      	ldr	r3, [r7, #20]
	}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3718      	adds	r7, #24
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b086      	sub	sp, #24
 800c086:	af00      	add	r7, sp, #0
 800c088:	60f8      	str	r0, [r7, #12]
 800c08a:	60b9      	str	r1, [r7, #8]
 800c08c:	607a      	str	r2, [r7, #4]
 800c08e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10b      	bne.n	800c0ae <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800c096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c09a:	f383 8811 	msr	BASEPRI, r3
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	617b      	str	r3, [r7, #20]
}
 800c0a8:	bf00      	nop
 800c0aa:	bf00      	nop
 800c0ac:	e7fd      	b.n	800c0aa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d01e      	beq.n	800c0f2 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c0b4:	f000 fad6 	bl	800c664 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c6:	683a      	ldr	r2, [r7, #0]
 800c0c8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0cc:	6a3a      	ldr	r2, [r7, #32]
 800c0ce:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d2:	3304      	adds	r3, #4
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7fd f850 	bl	800917a <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d008      	beq.n	800c0f2 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0e6:	f043 0304 	orr.w	r3, r3, #4
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c0f2:	bf00      	nop
 800c0f4:	3718      	adds	r7, #24
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
	...

0800c0fc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b08a      	sub	sp, #40	@ 0x28
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
 800c108:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c10a:	2300      	movs	r3, #0
 800c10c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d10b      	bne.n	800c12c <xTimerGenericCommand+0x30>
	__asm volatile
 800c114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	623b      	str	r3, [r7, #32]
}
 800c126:	bf00      	nop
 800c128:	bf00      	nop
 800c12a:	e7fd      	b.n	800c128 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c12c:	4b19      	ldr	r3, [pc, #100]	@ (800c194 <xTimerGenericCommand+0x98>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d02a      	beq.n	800c18a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2b05      	cmp	r3, #5
 800c144:	dc18      	bgt.n	800c178 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c146:	f7ff fa99 	bl	800b67c <xTaskGetSchedulerState>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d109      	bne.n	800c164 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c150:	4b10      	ldr	r3, [pc, #64]	@ (800c194 <xTimerGenericCommand+0x98>)
 800c152:	6818      	ldr	r0, [r3, #0]
 800c154:	f107 0114 	add.w	r1, r7, #20
 800c158:	2300      	movs	r3, #0
 800c15a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c15c:	f7fd f998 	bl	8009490 <xQueueGenericSend>
 800c160:	6278      	str	r0, [r7, #36]	@ 0x24
 800c162:	e012      	b.n	800c18a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c164:	4b0b      	ldr	r3, [pc, #44]	@ (800c194 <xTimerGenericCommand+0x98>)
 800c166:	6818      	ldr	r0, [r3, #0]
 800c168:	f107 0114 	add.w	r1, r7, #20
 800c16c:	2300      	movs	r3, #0
 800c16e:	2200      	movs	r2, #0
 800c170:	f7fd f98e 	bl	8009490 <xQueueGenericSend>
 800c174:	6278      	str	r0, [r7, #36]	@ 0x24
 800c176:	e008      	b.n	800c18a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c178:	4b06      	ldr	r3, [pc, #24]	@ (800c194 <xTimerGenericCommand+0x98>)
 800c17a:	6818      	ldr	r0, [r3, #0]
 800c17c:	f107 0114 	add.w	r1, r7, #20
 800c180:	2300      	movs	r3, #0
 800c182:	683a      	ldr	r2, [r7, #0]
 800c184:	f7fd fa86 	bl	8009694 <xQueueGenericSendFromISR>
 800c188:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3728      	adds	r7, #40	@ 0x28
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	20000b4c 	.word	0x20000b4c

0800c198 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b088      	sub	sp, #32
 800c19c:	af02      	add	r7, sp, #8
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1a2:	4b23      	ldr	r3, [pc, #140]	@ (800c230 <prvProcessExpiredTimer+0x98>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7fd f84c 	bl	800924e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1bc:	f003 0304 	and.w	r3, r3, #4
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d023      	beq.n	800c20c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	699a      	ldr	r2, [r3, #24]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	18d1      	adds	r1, r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	6978      	ldr	r0, [r7, #20]
 800c1d2:	f000 f8d5 	bl	800c380 <prvInsertTimerInActiveList>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d020      	beq.n	800c21e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1dc:	2300      	movs	r3, #0
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	6978      	ldr	r0, [r7, #20]
 800c1e8:	f7ff ff88 	bl	800c0fc <xTimerGenericCommand>
 800c1ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d114      	bne.n	800c21e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f8:	f383 8811 	msr	BASEPRI, r3
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	f3bf 8f4f 	dsb	sy
 800c204:	60fb      	str	r3, [r7, #12]
}
 800c206:	bf00      	nop
 800c208:	bf00      	nop
 800c20a:	e7fd      	b.n	800c208 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c212:	f023 0301 	bic.w	r3, r3, #1
 800c216:	b2da      	uxtb	r2, r3
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	6978      	ldr	r0, [r7, #20]
 800c224:	4798      	blx	r3
}
 800c226:	bf00      	nop
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	20000b44 	.word	0x20000b44

0800c234 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c23c:	f107 0308 	add.w	r3, r7, #8
 800c240:	4618      	mov	r0, r3
 800c242:	f000 f859 	bl	800c2f8 <prvGetNextExpireTime>
 800c246:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	4619      	mov	r1, r3
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f000 f805 	bl	800c25c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c252:	f000 f8d7 	bl	800c404 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c256:	bf00      	nop
 800c258:	e7f0      	b.n	800c23c <prvTimerTask+0x8>
	...

0800c25c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c266:	f7fe fc6f 	bl	800ab48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c26a:	f107 0308 	add.w	r3, r7, #8
 800c26e:	4618      	mov	r0, r3
 800c270:	f000 f866 	bl	800c340 <prvSampleTimeNow>
 800c274:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d130      	bne.n	800c2de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d10a      	bne.n	800c298 <prvProcessTimerOrBlockTask+0x3c>
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	429a      	cmp	r2, r3
 800c288:	d806      	bhi.n	800c298 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c28a:	f7fe fc6b 	bl	800ab64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c28e:	68f9      	ldr	r1, [r7, #12]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f7ff ff81 	bl	800c198 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c296:	e024      	b.n	800c2e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d008      	beq.n	800c2b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c29e:	4b13      	ldr	r3, [pc, #76]	@ (800c2ec <prvProcessTimerOrBlockTask+0x90>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d101      	bne.n	800c2ac <prvProcessTimerOrBlockTask+0x50>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e000      	b.n	800c2ae <prvProcessTimerOrBlockTask+0x52>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c2b0:	4b0f      	ldr	r3, [pc, #60]	@ (800c2f0 <prvProcessTimerOrBlockTask+0x94>)
 800c2b2:	6818      	ldr	r0, [r3, #0]
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	1ad3      	subs	r3, r2, r3
 800c2ba:	683a      	ldr	r2, [r7, #0]
 800c2bc:	4619      	mov	r1, r3
 800c2be:	f7fd fe5b 	bl	8009f78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c2c2:	f7fe fc4f 	bl	800ab64 <xTaskResumeAll>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10a      	bne.n	800c2e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c2cc:	4b09      	ldr	r3, [pc, #36]	@ (800c2f4 <prvProcessTimerOrBlockTask+0x98>)
 800c2ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2d2:	601a      	str	r2, [r3, #0]
 800c2d4:	f3bf 8f4f 	dsb	sy
 800c2d8:	f3bf 8f6f 	isb	sy
}
 800c2dc:	e001      	b.n	800c2e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c2de:	f7fe fc41 	bl	800ab64 <xTaskResumeAll>
}
 800c2e2:	bf00      	nop
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	20000b48 	.word	0x20000b48
 800c2f0:	20000b4c 	.word	0x20000b4c
 800c2f4:	e000ed04 	.word	0xe000ed04

0800c2f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c300:	4b0e      	ldr	r3, [pc, #56]	@ (800c33c <prvGetNextExpireTime+0x44>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d101      	bne.n	800c30e <prvGetNextExpireTime+0x16>
 800c30a:	2201      	movs	r2, #1
 800c30c:	e000      	b.n	800c310 <prvGetNextExpireTime+0x18>
 800c30e:	2200      	movs	r2, #0
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d105      	bne.n	800c328 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c31c:	4b07      	ldr	r3, [pc, #28]	@ (800c33c <prvGetNextExpireTime+0x44>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	60fb      	str	r3, [r7, #12]
 800c326:	e001      	b.n	800c32c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c328:	2300      	movs	r3, #0
 800c32a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c32c:	68fb      	ldr	r3, [r7, #12]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3714      	adds	r7, #20
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr
 800c33a:	bf00      	nop
 800c33c:	20000b44 	.word	0x20000b44

0800c340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c348:	f7fe fcaa 	bl	800aca0 <xTaskGetTickCount>
 800c34c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c34e:	4b0b      	ldr	r3, [pc, #44]	@ (800c37c <prvSampleTimeNow+0x3c>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	429a      	cmp	r2, r3
 800c356:	d205      	bcs.n	800c364 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c358:	f000 f91e 	bl	800c598 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	601a      	str	r2, [r3, #0]
 800c362:	e002      	b.n	800c36a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c36a:	4a04      	ldr	r2, [pc, #16]	@ (800c37c <prvSampleTimeNow+0x3c>)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c370:	68fb      	ldr	r3, [r7, #12]
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	20000b54 	.word	0x20000b54

0800c380 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c38e:	2300      	movs	r3, #0
 800c390:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	68ba      	ldr	r2, [r7, #8]
 800c396:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c39e:	68ba      	ldr	r2, [r7, #8]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d812      	bhi.n	800c3cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	1ad2      	subs	r2, r2, r3
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	699b      	ldr	r3, [r3, #24]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d302      	bcc.n	800c3ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	617b      	str	r3, [r7, #20]
 800c3b8:	e01b      	b.n	800c3f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c3ba:	4b10      	ldr	r3, [pc, #64]	@ (800c3fc <prvInsertTimerInActiveList+0x7c>)
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	4610      	mov	r0, r2
 800c3c6:	f7fc ff09 	bl	80091dc <vListInsert>
 800c3ca:	e012      	b.n	800c3f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d206      	bcs.n	800c3e2 <prvInsertTimerInActiveList+0x62>
 800c3d4:	68ba      	ldr	r2, [r7, #8]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d302      	bcc.n	800c3e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	617b      	str	r3, [r7, #20]
 800c3e0:	e007      	b.n	800c3f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3e2:	4b07      	ldr	r3, [pc, #28]	@ (800c400 <prvInsertTimerInActiveList+0x80>)
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3304      	adds	r3, #4
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	f7fc fef5 	bl	80091dc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c3f2:	697b      	ldr	r3, [r7, #20]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3718      	adds	r7, #24
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	20000b48 	.word	0x20000b48
 800c400:	20000b44 	.word	0x20000b44

0800c404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b08c      	sub	sp, #48	@ 0x30
 800c408:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c40a:	e0b2      	b.n	800c572 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f2c0 80af 	blt.w	800c572 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41a:	695b      	ldr	r3, [r3, #20]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d004      	beq.n	800c42a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c422:	3304      	adds	r3, #4
 800c424:	4618      	mov	r0, r3
 800c426:	f7fc ff12 	bl	800924e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c42a:	1d3b      	adds	r3, r7, #4
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7ff ff87 	bl	800c340 <prvSampleTimeNow>
 800c432:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2b09      	cmp	r3, #9
 800c438:	f200 8098 	bhi.w	800c56c <prvProcessReceivedCommands+0x168>
 800c43c:	a201      	add	r2, pc, #4	@ (adr r2, 800c444 <prvProcessReceivedCommands+0x40>)
 800c43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c442:	bf00      	nop
 800c444:	0800c46d 	.word	0x0800c46d
 800c448:	0800c46d 	.word	0x0800c46d
 800c44c:	0800c46d 	.word	0x0800c46d
 800c450:	0800c4e3 	.word	0x0800c4e3
 800c454:	0800c4f7 	.word	0x0800c4f7
 800c458:	0800c543 	.word	0x0800c543
 800c45c:	0800c46d 	.word	0x0800c46d
 800c460:	0800c46d 	.word	0x0800c46d
 800c464:	0800c4e3 	.word	0x0800c4e3
 800c468:	0800c4f7 	.word	0x0800c4f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c46e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c472:	f043 0301 	orr.w	r3, r3, #1
 800c476:	b2da      	uxtb	r2, r3
 800c478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c482:	699b      	ldr	r3, [r3, #24]
 800c484:	18d1      	adds	r1, r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6a3a      	ldr	r2, [r7, #32]
 800c48a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c48c:	f7ff ff78 	bl	800c380 <prvInsertTimerInActiveList>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d06c      	beq.n	800c570 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c498:	6a1b      	ldr	r3, [r3, #32]
 800c49a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c49c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4a4:	f003 0304 	and.w	r3, r3, #4
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d061      	beq.n	800c570 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b0:	699b      	ldr	r3, [r3, #24]
 800c4b2:	441a      	add	r2, r3
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	9300      	str	r3, [sp, #0]
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	2100      	movs	r1, #0
 800c4bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c4be:	f7ff fe1d 	bl	800c0fc <xTimerGenericCommand>
 800c4c2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d152      	bne.n	800c570 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800c4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ce:	f383 8811 	msr	BASEPRI, r3
 800c4d2:	f3bf 8f6f 	isb	sy
 800c4d6:	f3bf 8f4f 	dsb	sy
 800c4da:	61bb      	str	r3, [r7, #24]
}
 800c4dc:	bf00      	nop
 800c4de:	bf00      	nop
 800c4e0:	e7fd      	b.n	800c4de <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4e8:	f023 0301 	bic.w	r3, r3, #1
 800c4ec:	b2da      	uxtb	r2, r3
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c4f4:	e03d      	b.n	800c572 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4fc:	f043 0301 	orr.w	r3, r3, #1
 800c500:	b2da      	uxtb	r2, r3
 800c502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c504:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c50c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c510:	699b      	ldr	r3, [r3, #24]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10b      	bne.n	800c52e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800c516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51a:	f383 8811 	msr	BASEPRI, r3
 800c51e:	f3bf 8f6f 	isb	sy
 800c522:	f3bf 8f4f 	dsb	sy
 800c526:	617b      	str	r3, [r7, #20]
}
 800c528:	bf00      	nop
 800c52a:	bf00      	nop
 800c52c:	e7fd      	b.n	800c52a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c530:	699a      	ldr	r2, [r3, #24]
 800c532:	6a3b      	ldr	r3, [r7, #32]
 800c534:	18d1      	adds	r1, r2, r3
 800c536:	6a3b      	ldr	r3, [r7, #32]
 800c538:	6a3a      	ldr	r2, [r7, #32]
 800c53a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c53c:	f7ff ff20 	bl	800c380 <prvInsertTimerInActiveList>
					break;
 800c540:	e017      	b.n	800c572 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c544:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c548:	f003 0302 	and.w	r3, r3, #2
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d103      	bne.n	800c558 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800c550:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c552:	f000 fbe1 	bl	800cd18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c556:	e00c      	b.n	800c572 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c55e:	f023 0301 	bic.w	r3, r3, #1
 800c562:	b2da      	uxtb	r2, r3
 800c564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c566:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c56a:	e002      	b.n	800c572 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800c56c:	bf00      	nop
 800c56e:	e000      	b.n	800c572 <prvProcessReceivedCommands+0x16e>
					break;
 800c570:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c572:	4b08      	ldr	r3, [pc, #32]	@ (800c594 <prvProcessReceivedCommands+0x190>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f107 0108 	add.w	r1, r7, #8
 800c57a:	2200      	movs	r2, #0
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7fd f9b7 	bl	80098f0 <xQueueReceive>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	f47f af41 	bne.w	800c40c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c58a:	bf00      	nop
 800c58c:	bf00      	nop
 800c58e:	3728      	adds	r7, #40	@ 0x28
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	20000b4c 	.word	0x20000b4c

0800c598 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b088      	sub	sp, #32
 800c59c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c59e:	e049      	b.n	800c634 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5a0:	4b2e      	ldr	r3, [pc, #184]	@ (800c65c <prvSwitchTimerLists+0xc4>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5aa:	4b2c      	ldr	r3, [pc, #176]	@ (800c65c <prvSwitchTimerLists+0xc4>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	3304      	adds	r3, #4
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7fc fe48 	bl	800924e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6a1b      	ldr	r3, [r3, #32]
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5cc:	f003 0304 	and.w	r3, r3, #4
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d02f      	beq.n	800c634 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	699b      	ldr	r3, [r3, #24]
 800c5d8:	693a      	ldr	r2, [r7, #16]
 800c5da:	4413      	add	r3, r2
 800c5dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d90e      	bls.n	800c604 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5f2:	4b1a      	ldr	r3, [pc, #104]	@ (800c65c <prvSwitchTimerLists+0xc4>)
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	4610      	mov	r0, r2
 800c5fe:	f7fc fded 	bl	80091dc <vListInsert>
 800c602:	e017      	b.n	800c634 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c604:	2300      	movs	r3, #0
 800c606:	9300      	str	r3, [sp, #0]
 800c608:	2300      	movs	r3, #0
 800c60a:	693a      	ldr	r2, [r7, #16]
 800c60c:	2100      	movs	r1, #0
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	f7ff fd74 	bl	800c0fc <xTimerGenericCommand>
 800c614:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d10b      	bne.n	800c634 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c620:	f383 8811 	msr	BASEPRI, r3
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	603b      	str	r3, [r7, #0]
}
 800c62e:	bf00      	nop
 800c630:	bf00      	nop
 800c632:	e7fd      	b.n	800c630 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c634:	4b09      	ldr	r3, [pc, #36]	@ (800c65c <prvSwitchTimerLists+0xc4>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1b0      	bne.n	800c5a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c63e:	4b07      	ldr	r3, [pc, #28]	@ (800c65c <prvSwitchTimerLists+0xc4>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c644:	4b06      	ldr	r3, [pc, #24]	@ (800c660 <prvSwitchTimerLists+0xc8>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a04      	ldr	r2, [pc, #16]	@ (800c65c <prvSwitchTimerLists+0xc4>)
 800c64a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c64c:	4a04      	ldr	r2, [pc, #16]	@ (800c660 <prvSwitchTimerLists+0xc8>)
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	6013      	str	r3, [r2, #0]
}
 800c652:	bf00      	nop
 800c654:	3718      	adds	r7, #24
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	20000b44 	.word	0x20000b44
 800c660:	20000b48 	.word	0x20000b48

0800c664 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c668:	f000 f966 	bl	800c938 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c66c:	4b12      	ldr	r3, [pc, #72]	@ (800c6b8 <prvCheckForValidListAndQueue+0x54>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d11d      	bne.n	800c6b0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800c674:	4811      	ldr	r0, [pc, #68]	@ (800c6bc <prvCheckForValidListAndQueue+0x58>)
 800c676:	f7fc fd60 	bl	800913a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c67a:	4811      	ldr	r0, [pc, #68]	@ (800c6c0 <prvCheckForValidListAndQueue+0x5c>)
 800c67c:	f7fc fd5d 	bl	800913a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c680:	4b10      	ldr	r3, [pc, #64]	@ (800c6c4 <prvCheckForValidListAndQueue+0x60>)
 800c682:	4a0e      	ldr	r2, [pc, #56]	@ (800c6bc <prvCheckForValidListAndQueue+0x58>)
 800c684:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c686:	4b10      	ldr	r3, [pc, #64]	@ (800c6c8 <prvCheckForValidListAndQueue+0x64>)
 800c688:	4a0d      	ldr	r2, [pc, #52]	@ (800c6c0 <prvCheckForValidListAndQueue+0x5c>)
 800c68a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800c68c:	2200      	movs	r2, #0
 800c68e:	210c      	movs	r1, #12
 800c690:	200a      	movs	r0, #10
 800c692:	f7fc fe71 	bl	8009378 <xQueueGenericCreate>
 800c696:	4603      	mov	r3, r0
 800c698:	4a07      	ldr	r2, [pc, #28]	@ (800c6b8 <prvCheckForValidListAndQueue+0x54>)
 800c69a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c69c:	4b06      	ldr	r3, [pc, #24]	@ (800c6b8 <prvCheckForValidListAndQueue+0x54>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d005      	beq.n	800c6b0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c6a4:	4b04      	ldr	r3, [pc, #16]	@ (800c6b8 <prvCheckForValidListAndQueue+0x54>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4908      	ldr	r1, [pc, #32]	@ (800c6cc <prvCheckForValidListAndQueue+0x68>)
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7fd fc3a 	bl	8009f24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6b0:	f000 f974 	bl	800c99c <vPortExitCritical>
}
 800c6b4:	bf00      	nop
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	20000b4c 	.word	0x20000b4c
 800c6bc:	20000b1c 	.word	0x20000b1c
 800c6c0:	20000b30 	.word	0x20000b30
 800c6c4:	20000b44 	.word	0x20000b44
 800c6c8:	20000b48 	.word	0x20000b48
 800c6cc:	080113a0 	.word	0x080113a0

0800c6d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b085      	sub	sp, #20
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	3b04      	subs	r3, #4
 800c6e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c6e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	3b04      	subs	r3, #4
 800c6ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	f023 0201 	bic.w	r2, r3, #1
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	3b04      	subs	r3, #4
 800c6fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c700:	4a0c      	ldr	r2, [pc, #48]	@ (800c734 <pxPortInitialiseStack+0x64>)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	3b14      	subs	r3, #20
 800c70a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	3b04      	subs	r3, #4
 800c716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f06f 0202 	mvn.w	r2, #2
 800c71e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	3b20      	subs	r3, #32
 800c724:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c726:	68fb      	ldr	r3, [r7, #12]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr
 800c734:	0800c739 	.word	0x0800c739

0800c738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c738:	b480      	push	{r7}
 800c73a:	b085      	sub	sp, #20
 800c73c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c73e:	2300      	movs	r3, #0
 800c740:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c742:	4b13      	ldr	r3, [pc, #76]	@ (800c790 <prvTaskExitError+0x58>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c74a:	d00b      	beq.n	800c764 <prvTaskExitError+0x2c>
	__asm volatile
 800c74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	60fb      	str	r3, [r7, #12]
}
 800c75e:	bf00      	nop
 800c760:	bf00      	nop
 800c762:	e7fd      	b.n	800c760 <prvTaskExitError+0x28>
	__asm volatile
 800c764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	60bb      	str	r3, [r7, #8]
}
 800c776:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c778:	bf00      	nop
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d0fc      	beq.n	800c77a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c780:	bf00      	nop
 800c782:	bf00      	nop
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	20000420 	.word	0x20000420
	...

0800c7a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c7a0:	4b07      	ldr	r3, [pc, #28]	@ (800c7c0 <pxCurrentTCBConst2>)
 800c7a2:	6819      	ldr	r1, [r3, #0]
 800c7a4:	6808      	ldr	r0, [r1, #0]
 800c7a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7aa:	f380 8809 	msr	PSP, r0
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f04f 0000 	mov.w	r0, #0
 800c7b6:	f380 8811 	msr	BASEPRI, r0
 800c7ba:	4770      	bx	lr
 800c7bc:	f3af 8000 	nop.w

0800c7c0 <pxCurrentTCBConst2>:
 800c7c0:	200009e8 	.word	0x200009e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c7c4:	bf00      	nop
 800c7c6:	bf00      	nop

0800c7c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c7c8:	4808      	ldr	r0, [pc, #32]	@ (800c7ec <prvPortStartFirstTask+0x24>)
 800c7ca:	6800      	ldr	r0, [r0, #0]
 800c7cc:	6800      	ldr	r0, [r0, #0]
 800c7ce:	f380 8808 	msr	MSP, r0
 800c7d2:	f04f 0000 	mov.w	r0, #0
 800c7d6:	f380 8814 	msr	CONTROL, r0
 800c7da:	b662      	cpsie	i
 800c7dc:	b661      	cpsie	f
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	df00      	svc	0
 800c7e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c7ea:	bf00      	nop
 800c7ec:	e000ed08 	.word	0xe000ed08

0800c7f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c7f6:	4b47      	ldr	r3, [pc, #284]	@ (800c914 <xPortStartScheduler+0x124>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a47      	ldr	r2, [pc, #284]	@ (800c918 <xPortStartScheduler+0x128>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d10b      	bne.n	800c818 <xPortStartScheduler+0x28>
	__asm volatile
 800c800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	613b      	str	r3, [r7, #16]
}
 800c812:	bf00      	nop
 800c814:	bf00      	nop
 800c816:	e7fd      	b.n	800c814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c818:	4b3e      	ldr	r3, [pc, #248]	@ (800c914 <xPortStartScheduler+0x124>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a3f      	ldr	r2, [pc, #252]	@ (800c91c <xPortStartScheduler+0x12c>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d10b      	bne.n	800c83a <xPortStartScheduler+0x4a>
	__asm volatile
 800c822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c826:	f383 8811 	msr	BASEPRI, r3
 800c82a:	f3bf 8f6f 	isb	sy
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	60fb      	str	r3, [r7, #12]
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop
 800c838:	e7fd      	b.n	800c836 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c83a:	4b39      	ldr	r3, [pc, #228]	@ (800c920 <xPortStartScheduler+0x130>)
 800c83c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	b2db      	uxtb	r3, r3
 800c844:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	22ff      	movs	r2, #255	@ 0xff
 800c84a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	b2db      	uxtb	r3, r3
 800c852:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c854:	78fb      	ldrb	r3, [r7, #3]
 800c856:	b2db      	uxtb	r3, r3
 800c858:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	4b31      	ldr	r3, [pc, #196]	@ (800c924 <xPortStartScheduler+0x134>)
 800c860:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c862:	4b31      	ldr	r3, [pc, #196]	@ (800c928 <xPortStartScheduler+0x138>)
 800c864:	2207      	movs	r2, #7
 800c866:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c868:	e009      	b.n	800c87e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c86a:	4b2f      	ldr	r3, [pc, #188]	@ (800c928 <xPortStartScheduler+0x138>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	3b01      	subs	r3, #1
 800c870:	4a2d      	ldr	r2, [pc, #180]	@ (800c928 <xPortStartScheduler+0x138>)
 800c872:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c874:	78fb      	ldrb	r3, [r7, #3]
 800c876:	b2db      	uxtb	r3, r3
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c87e:	78fb      	ldrb	r3, [r7, #3]
 800c880:	b2db      	uxtb	r3, r3
 800c882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c886:	2b80      	cmp	r3, #128	@ 0x80
 800c888:	d0ef      	beq.n	800c86a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c88a:	4b27      	ldr	r3, [pc, #156]	@ (800c928 <xPortStartScheduler+0x138>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f1c3 0307 	rsb	r3, r3, #7
 800c892:	2b04      	cmp	r3, #4
 800c894:	d00b      	beq.n	800c8ae <xPortStartScheduler+0xbe>
	__asm volatile
 800c896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c89a:	f383 8811 	msr	BASEPRI, r3
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	60bb      	str	r3, [r7, #8]
}
 800c8a8:	bf00      	nop
 800c8aa:	bf00      	nop
 800c8ac:	e7fd      	b.n	800c8aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c8ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c928 <xPortStartScheduler+0x138>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	021b      	lsls	r3, r3, #8
 800c8b4:	4a1c      	ldr	r2, [pc, #112]	@ (800c928 <xPortStartScheduler+0x138>)
 800c8b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c8b8:	4b1b      	ldr	r3, [pc, #108]	@ (800c928 <xPortStartScheduler+0x138>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c8c0:	4a19      	ldr	r2, [pc, #100]	@ (800c928 <xPortStartScheduler+0x138>)
 800c8c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8cc:	4b17      	ldr	r3, [pc, #92]	@ (800c92c <xPortStartScheduler+0x13c>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a16      	ldr	r2, [pc, #88]	@ (800c92c <xPortStartScheduler+0x13c>)
 800c8d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c8d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8d8:	4b14      	ldr	r3, [pc, #80]	@ (800c92c <xPortStartScheduler+0x13c>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a13      	ldr	r2, [pc, #76]	@ (800c92c <xPortStartScheduler+0x13c>)
 800c8de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c8e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8e4:	f000 f8da 	bl	800ca9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c8e8:	4b11      	ldr	r3, [pc, #68]	@ (800c930 <xPortStartScheduler+0x140>)
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c8ee:	f000 f8f9 	bl	800cae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c8f2:	4b10      	ldr	r3, [pc, #64]	@ (800c934 <xPortStartScheduler+0x144>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a0f      	ldr	r2, [pc, #60]	@ (800c934 <xPortStartScheduler+0x144>)
 800c8f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c8fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c8fe:	f7ff ff63 	bl	800c7c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c902:	f7fe fb39 	bl	800af78 <vTaskSwitchContext>
	prvTaskExitError();
 800c906:	f7ff ff17 	bl	800c738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c90a:	2300      	movs	r3, #0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3718      	adds	r7, #24
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	e000ed00 	.word	0xe000ed00
 800c918:	410fc271 	.word	0x410fc271
 800c91c:	410fc270 	.word	0x410fc270
 800c920:	e000e400 	.word	0xe000e400
 800c924:	20000b58 	.word	0x20000b58
 800c928:	20000b5c 	.word	0x20000b5c
 800c92c:	e000ed20 	.word	0xe000ed20
 800c930:	20000420 	.word	0x20000420
 800c934:	e000ef34 	.word	0xe000ef34

0800c938 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c942:	f383 8811 	msr	BASEPRI, r3
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	607b      	str	r3, [r7, #4]
}
 800c950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c952:	4b10      	ldr	r3, [pc, #64]	@ (800c994 <vPortEnterCritical+0x5c>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	3301      	adds	r3, #1
 800c958:	4a0e      	ldr	r2, [pc, #56]	@ (800c994 <vPortEnterCritical+0x5c>)
 800c95a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c95c:	4b0d      	ldr	r3, [pc, #52]	@ (800c994 <vPortEnterCritical+0x5c>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d110      	bne.n	800c986 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c964:	4b0c      	ldr	r3, [pc, #48]	@ (800c998 <vPortEnterCritical+0x60>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00b      	beq.n	800c986 <vPortEnterCritical+0x4e>
	__asm volatile
 800c96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c972:	f383 8811 	msr	BASEPRI, r3
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	603b      	str	r3, [r7, #0]
}
 800c980:	bf00      	nop
 800c982:	bf00      	nop
 800c984:	e7fd      	b.n	800c982 <vPortEnterCritical+0x4a>
	}
}
 800c986:	bf00      	nop
 800c988:	370c      	adds	r7, #12
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	20000420 	.word	0x20000420
 800c998:	e000ed04 	.word	0xe000ed04

0800c99c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9a2:	4b12      	ldr	r3, [pc, #72]	@ (800c9ec <vPortExitCritical+0x50>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d10b      	bne.n	800c9c2 <vPortExitCritical+0x26>
	__asm volatile
 800c9aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ae:	f383 8811 	msr	BASEPRI, r3
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	f3bf 8f4f 	dsb	sy
 800c9ba:	607b      	str	r3, [r7, #4]
}
 800c9bc:	bf00      	nop
 800c9be:	bf00      	nop
 800c9c0:	e7fd      	b.n	800c9be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c9c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ec <vPortExitCritical+0x50>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	4a08      	ldr	r2, [pc, #32]	@ (800c9ec <vPortExitCritical+0x50>)
 800c9ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c9cc:	4b07      	ldr	r3, [pc, #28]	@ (800c9ec <vPortExitCritical+0x50>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d105      	bne.n	800c9e0 <vPortExitCritical+0x44>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	f383 8811 	msr	BASEPRI, r3
}
 800c9de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr
 800c9ec:	20000420 	.word	0x20000420

0800c9f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c9f0:	f3ef 8009 	mrs	r0, PSP
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	4b15      	ldr	r3, [pc, #84]	@ (800ca50 <pxCurrentTCBConst>)
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	f01e 0f10 	tst.w	lr, #16
 800ca00:	bf08      	it	eq
 800ca02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca0a:	6010      	str	r0, [r2, #0]
 800ca0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ca14:	f380 8811 	msr	BASEPRI, r0
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f7fe faaa 	bl	800af78 <vTaskSwitchContext>
 800ca24:	f04f 0000 	mov.w	r0, #0
 800ca28:	f380 8811 	msr	BASEPRI, r0
 800ca2c:	bc09      	pop	{r0, r3}
 800ca2e:	6819      	ldr	r1, [r3, #0]
 800ca30:	6808      	ldr	r0, [r1, #0]
 800ca32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca36:	f01e 0f10 	tst.w	lr, #16
 800ca3a:	bf08      	it	eq
 800ca3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca40:	f380 8809 	msr	PSP, r0
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	f3af 8000 	nop.w

0800ca50 <pxCurrentTCBConst>:
 800ca50:	200009e8 	.word	0x200009e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca54:	bf00      	nop
 800ca56:	bf00      	nop

0800ca58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	607b      	str	r3, [r7, #4]
}
 800ca70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca72:	f7fe f9c7 	bl	800ae04 <xTaskIncrementTick>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d003      	beq.n	800ca84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca7c:	4b06      	ldr	r3, [pc, #24]	@ (800ca98 <SysTick_Handler+0x40>)
 800ca7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	2300      	movs	r3, #0
 800ca86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	f383 8811 	msr	BASEPRI, r3
}
 800ca8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca90:	bf00      	nop
 800ca92:	3708      	adds	r7, #8
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	e000ed04 	.word	0xe000ed04

0800ca9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800caa0:	4b0b      	ldr	r3, [pc, #44]	@ (800cad0 <vPortSetupTimerInterrupt+0x34>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800caa6:	4b0b      	ldr	r3, [pc, #44]	@ (800cad4 <vPortSetupTimerInterrupt+0x38>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800caac:	4b0a      	ldr	r3, [pc, #40]	@ (800cad8 <vPortSetupTimerInterrupt+0x3c>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a0a      	ldr	r2, [pc, #40]	@ (800cadc <vPortSetupTimerInterrupt+0x40>)
 800cab2:	fba2 2303 	umull	r2, r3, r2, r3
 800cab6:	099b      	lsrs	r3, r3, #6
 800cab8:	4a09      	ldr	r2, [pc, #36]	@ (800cae0 <vPortSetupTimerInterrupt+0x44>)
 800caba:	3b01      	subs	r3, #1
 800cabc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cabe:	4b04      	ldr	r3, [pc, #16]	@ (800cad0 <vPortSetupTimerInterrupt+0x34>)
 800cac0:	2207      	movs	r2, #7
 800cac2:	601a      	str	r2, [r3, #0]
}
 800cac4:	bf00      	nop
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	e000e010 	.word	0xe000e010
 800cad4:	e000e018 	.word	0xe000e018
 800cad8:	20000414 	.word	0x20000414
 800cadc:	10624dd3 	.word	0x10624dd3
 800cae0:	e000e014 	.word	0xe000e014

0800cae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cae4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800caf4 <vPortEnableVFP+0x10>
 800cae8:	6801      	ldr	r1, [r0, #0]
 800caea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800caee:	6001      	str	r1, [r0, #0]
 800caf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800caf2:	bf00      	nop
 800caf4:	e000ed88 	.word	0xe000ed88

0800caf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cafe:	f3ef 8305 	mrs	r3, IPSR
 800cb02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2b0f      	cmp	r3, #15
 800cb08:	d915      	bls.n	800cb36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb0a:	4a18      	ldr	r2, [pc, #96]	@ (800cb6c <vPortValidateInterruptPriority+0x74>)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	4413      	add	r3, r2
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb14:	4b16      	ldr	r3, [pc, #88]	@ (800cb70 <vPortValidateInterruptPriority+0x78>)
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	7afa      	ldrb	r2, [r7, #11]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d20b      	bcs.n	800cb36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb22:	f383 8811 	msr	BASEPRI, r3
 800cb26:	f3bf 8f6f 	isb	sy
 800cb2a:	f3bf 8f4f 	dsb	sy
 800cb2e:	607b      	str	r3, [r7, #4]
}
 800cb30:	bf00      	nop
 800cb32:	bf00      	nop
 800cb34:	e7fd      	b.n	800cb32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb36:	4b0f      	ldr	r3, [pc, #60]	@ (800cb74 <vPortValidateInterruptPriority+0x7c>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cb3e:	4b0e      	ldr	r3, [pc, #56]	@ (800cb78 <vPortValidateInterruptPriority+0x80>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d90b      	bls.n	800cb5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cb46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb4a:	f383 8811 	msr	BASEPRI, r3
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	603b      	str	r3, [r7, #0]
}
 800cb58:	bf00      	nop
 800cb5a:	bf00      	nop
 800cb5c:	e7fd      	b.n	800cb5a <vPortValidateInterruptPriority+0x62>
	}
 800cb5e:	bf00      	nop
 800cb60:	3714      	adds	r7, #20
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop
 800cb6c:	e000e3f0 	.word	0xe000e3f0
 800cb70:	20000b58 	.word	0x20000b58
 800cb74:	e000ed0c 	.word	0xe000ed0c
 800cb78:	20000b5c 	.word	0x20000b5c

0800cb7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b08a      	sub	sp, #40	@ 0x28
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb84:	2300      	movs	r3, #0
 800cb86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb88:	f7fd ffde 	bl	800ab48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb8c:	4b5c      	ldr	r3, [pc, #368]	@ (800cd00 <pvPortMalloc+0x184>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d101      	bne.n	800cb98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb94:	f000 f924 	bl	800cde0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb98:	4b5a      	ldr	r3, [pc, #360]	@ (800cd04 <pvPortMalloc+0x188>)
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4013      	ands	r3, r2
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	f040 8095 	bne.w	800ccd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d01e      	beq.n	800cbea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cbac:	2208      	movs	r2, #8
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f003 0307 	and.w	r3, r3, #7
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d015      	beq.n	800cbea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f023 0307 	bic.w	r3, r3, #7
 800cbc4:	3308      	adds	r3, #8
 800cbc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f003 0307 	and.w	r3, r3, #7
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d00b      	beq.n	800cbea <pvPortMalloc+0x6e>
	__asm volatile
 800cbd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	617b      	str	r3, [r7, #20]
}
 800cbe4:	bf00      	nop
 800cbe6:	bf00      	nop
 800cbe8:	e7fd      	b.n	800cbe6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d06f      	beq.n	800ccd0 <pvPortMalloc+0x154>
 800cbf0:	4b45      	ldr	r3, [pc, #276]	@ (800cd08 <pvPortMalloc+0x18c>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d86a      	bhi.n	800ccd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cbfa:	4b44      	ldr	r3, [pc, #272]	@ (800cd0c <pvPortMalloc+0x190>)
 800cbfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cbfe:	4b43      	ldr	r3, [pc, #268]	@ (800cd0c <pvPortMalloc+0x190>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc04:	e004      	b.n	800cc10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d903      	bls.n	800cc22 <pvPortMalloc+0xa6>
 800cc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1f1      	bne.n	800cc06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc22:	4b37      	ldr	r3, [pc, #220]	@ (800cd00 <pvPortMalloc+0x184>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d051      	beq.n	800ccd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc2c:	6a3b      	ldr	r3, [r7, #32]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2208      	movs	r2, #8
 800cc32:	4413      	add	r3, r2
 800cc34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	6a3b      	ldr	r3, [r7, #32]
 800cc3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc40:	685a      	ldr	r2, [r3, #4]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	1ad2      	subs	r2, r2, r3
 800cc46:	2308      	movs	r3, #8
 800cc48:	005b      	lsls	r3, r3, #1
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d920      	bls.n	800cc90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4413      	add	r3, r2
 800cc54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	f003 0307 	and.w	r3, r3, #7
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00b      	beq.n	800cc78 <pvPortMalloc+0xfc>
	__asm volatile
 800cc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc64:	f383 8811 	msr	BASEPRI, r3
 800cc68:	f3bf 8f6f 	isb	sy
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	613b      	str	r3, [r7, #16]
}
 800cc72:	bf00      	nop
 800cc74:	bf00      	nop
 800cc76:	e7fd      	b.n	800cc74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7a:	685a      	ldr	r2, [r3, #4]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	1ad2      	subs	r2, r2, r3
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc8a:	69b8      	ldr	r0, [r7, #24]
 800cc8c:	f000 f90a 	bl	800cea4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc90:	4b1d      	ldr	r3, [pc, #116]	@ (800cd08 <pvPortMalloc+0x18c>)
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	4a1b      	ldr	r2, [pc, #108]	@ (800cd08 <pvPortMalloc+0x18c>)
 800cc9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc9e:	4b1a      	ldr	r3, [pc, #104]	@ (800cd08 <pvPortMalloc+0x18c>)
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	4b1b      	ldr	r3, [pc, #108]	@ (800cd10 <pvPortMalloc+0x194>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d203      	bcs.n	800ccb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ccaa:	4b17      	ldr	r3, [pc, #92]	@ (800cd08 <pvPortMalloc+0x18c>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4a18      	ldr	r2, [pc, #96]	@ (800cd10 <pvPortMalloc+0x194>)
 800ccb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	4b13      	ldr	r3, [pc, #76]	@ (800cd04 <pvPortMalloc+0x188>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	431a      	orrs	r2, r3
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ccc6:	4b13      	ldr	r3, [pc, #76]	@ (800cd14 <pvPortMalloc+0x198>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	3301      	adds	r3, #1
 800cccc:	4a11      	ldr	r2, [pc, #68]	@ (800cd14 <pvPortMalloc+0x198>)
 800ccce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ccd0:	f7fd ff48 	bl	800ab64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	f003 0307 	and.w	r3, r3, #7
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00b      	beq.n	800ccf6 <pvPortMalloc+0x17a>
	__asm volatile
 800ccde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	60fb      	str	r3, [r7, #12]
}
 800ccf0:	bf00      	nop
 800ccf2:	bf00      	nop
 800ccf4:	e7fd      	b.n	800ccf2 <pvPortMalloc+0x176>
	return pvReturn;
 800ccf6:	69fb      	ldr	r3, [r7, #28]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3728      	adds	r7, #40	@ 0x28
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	200070f8 	.word	0x200070f8
 800cd04:	2000710c 	.word	0x2000710c
 800cd08:	200070fc 	.word	0x200070fc
 800cd0c:	200070f0 	.word	0x200070f0
 800cd10:	20007100 	.word	0x20007100
 800cd14:	20007104 	.word	0x20007104

0800cd18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b086      	sub	sp, #24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d04f      	beq.n	800cdca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd2a:	2308      	movs	r3, #8
 800cd2c:	425b      	negs	r3, r3
 800cd2e:	697a      	ldr	r2, [r7, #20]
 800cd30:	4413      	add	r3, r2
 800cd32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	685a      	ldr	r2, [r3, #4]
 800cd3c:	4b25      	ldr	r3, [pc, #148]	@ (800cdd4 <vPortFree+0xbc>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4013      	ands	r3, r2
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d10b      	bne.n	800cd5e <vPortFree+0x46>
	__asm volatile
 800cd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	60fb      	str	r3, [r7, #12]
}
 800cd58:	bf00      	nop
 800cd5a:	bf00      	nop
 800cd5c:	e7fd      	b.n	800cd5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00b      	beq.n	800cd7e <vPortFree+0x66>
	__asm volatile
 800cd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	60bb      	str	r3, [r7, #8]
}
 800cd78:	bf00      	nop
 800cd7a:	bf00      	nop
 800cd7c:	e7fd      	b.n	800cd7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	685a      	ldr	r2, [r3, #4]
 800cd82:	4b14      	ldr	r3, [pc, #80]	@ (800cdd4 <vPortFree+0xbc>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4013      	ands	r3, r2
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d01e      	beq.n	800cdca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d11a      	bne.n	800cdca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	685a      	ldr	r2, [r3, #4]
 800cd98:	4b0e      	ldr	r3, [pc, #56]	@ (800cdd4 <vPortFree+0xbc>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	43db      	mvns	r3, r3
 800cd9e:	401a      	ands	r2, r3
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cda4:	f7fd fed0 	bl	800ab48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	685a      	ldr	r2, [r3, #4]
 800cdac:	4b0a      	ldr	r3, [pc, #40]	@ (800cdd8 <vPortFree+0xc0>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	4a09      	ldr	r2, [pc, #36]	@ (800cdd8 <vPortFree+0xc0>)
 800cdb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cdb6:	6938      	ldr	r0, [r7, #16]
 800cdb8:	f000 f874 	bl	800cea4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cdbc:	4b07      	ldr	r3, [pc, #28]	@ (800cddc <vPortFree+0xc4>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	4a06      	ldr	r2, [pc, #24]	@ (800cddc <vPortFree+0xc4>)
 800cdc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cdc6:	f7fd fecd 	bl	800ab64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cdca:	bf00      	nop
 800cdcc:	3718      	adds	r7, #24
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	2000710c 	.word	0x2000710c
 800cdd8:	200070fc 	.word	0x200070fc
 800cddc:	20007108 	.word	0x20007108

0800cde0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cde0:	b480      	push	{r7}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cde6:	f246 5390 	movw	r3, #26000	@ 0x6590
 800cdea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cdec:	4b27      	ldr	r3, [pc, #156]	@ (800ce8c <prvHeapInit+0xac>)
 800cdee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f003 0307 	and.w	r3, r3, #7
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00c      	beq.n	800ce14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	3307      	adds	r3, #7
 800cdfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f023 0307 	bic.w	r3, r3, #7
 800ce06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce08:	68ba      	ldr	r2, [r7, #8]
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	1ad3      	subs	r3, r2, r3
 800ce0e:	4a1f      	ldr	r2, [pc, #124]	@ (800ce8c <prvHeapInit+0xac>)
 800ce10:	4413      	add	r3, r2
 800ce12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce18:	4a1d      	ldr	r2, [pc, #116]	@ (800ce90 <prvHeapInit+0xb0>)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce1e:	4b1c      	ldr	r3, [pc, #112]	@ (800ce90 <prvHeapInit+0xb0>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	68ba      	ldr	r2, [r7, #8]
 800ce28:	4413      	add	r3, r2
 800ce2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce2c:	2208      	movs	r2, #8
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	1a9b      	subs	r3, r3, r2
 800ce32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f023 0307 	bic.w	r3, r3, #7
 800ce3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	4a15      	ldr	r2, [pc, #84]	@ (800ce94 <prvHeapInit+0xb4>)
 800ce40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce42:	4b14      	ldr	r3, [pc, #80]	@ (800ce94 <prvHeapInit+0xb4>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2200      	movs	r2, #0
 800ce48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce4a:	4b12      	ldr	r3, [pc, #72]	@ (800ce94 <prvHeapInit+0xb4>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	1ad2      	subs	r2, r2, r3
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce60:	4b0c      	ldr	r3, [pc, #48]	@ (800ce94 <prvHeapInit+0xb4>)
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	4a0a      	ldr	r2, [pc, #40]	@ (800ce98 <prvHeapInit+0xb8>)
 800ce6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	4a09      	ldr	r2, [pc, #36]	@ (800ce9c <prvHeapInit+0xbc>)
 800ce76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce78:	4b09      	ldr	r3, [pc, #36]	@ (800cea0 <prvHeapInit+0xc0>)
 800ce7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ce7e:	601a      	str	r2, [r3, #0]
}
 800ce80:	bf00      	nop
 800ce82:	3714      	adds	r7, #20
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr
 800ce8c:	20000b60 	.word	0x20000b60
 800ce90:	200070f0 	.word	0x200070f0
 800ce94:	200070f8 	.word	0x200070f8
 800ce98:	20007100 	.word	0x20007100
 800ce9c:	200070fc 	.word	0x200070fc
 800cea0:	2000710c 	.word	0x2000710c

0800cea4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cea4:	b480      	push	{r7}
 800cea6:	b085      	sub	sp, #20
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ceac:	4b28      	ldr	r3, [pc, #160]	@ (800cf50 <prvInsertBlockIntoFreeList+0xac>)
 800ceae:	60fb      	str	r3, [r7, #12]
 800ceb0:	e002      	b.n	800ceb8 <prvInsertBlockIntoFreeList+0x14>
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	60fb      	str	r3, [r7, #12]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d8f7      	bhi.n	800ceb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	68ba      	ldr	r2, [r7, #8]
 800cecc:	4413      	add	r3, r2
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d108      	bne.n	800cee6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	441a      	add	r2, r3
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	441a      	add	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d118      	bne.n	800cf2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	4b15      	ldr	r3, [pc, #84]	@ (800cf54 <prvInsertBlockIntoFreeList+0xb0>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d00d      	beq.n	800cf22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	685a      	ldr	r2, [r3, #4]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	441a      	add	r2, r3
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	e008      	b.n	800cf34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf22:	4b0c      	ldr	r3, [pc, #48]	@ (800cf54 <prvInsertBlockIntoFreeList+0xb0>)
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	601a      	str	r2, [r3, #0]
 800cf2a:	e003      	b.n	800cf34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d002      	beq.n	800cf42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf42:	bf00      	nop
 800cf44:	3714      	adds	r7, #20
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	200070f0 	.word	0x200070f0
 800cf54:	200070f8 	.word	0x200070f8

0800cf58 <arm_cfft_radix8by2_f32>:
 800cf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf5c:	ed2d 8b08 	vpush	{d8-d11}
 800cf60:	4607      	mov	r7, r0
 800cf62:	4608      	mov	r0, r1
 800cf64:	f8b7 c000 	ldrh.w	ip, [r7]
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800cf6e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800cf72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800cf76:	f000 80b0 	beq.w	800d0da <arm_cfft_radix8by2_f32+0x182>
 800cf7a:	008c      	lsls	r4, r1, #2
 800cf7c:	3410      	adds	r4, #16
 800cf7e:	f100 0310 	add.w	r3, r0, #16
 800cf82:	1906      	adds	r6, r0, r4
 800cf84:	3210      	adds	r2, #16
 800cf86:	4444      	add	r4, r8
 800cf88:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800cf8c:	f108 0510 	add.w	r5, r8, #16
 800cf90:	ed15 2a04 	vldr	s4, [r5, #-16]
 800cf94:	ed55 2a03 	vldr	s5, [r5, #-12]
 800cf98:	ed54 4a04 	vldr	s9, [r4, #-16]
 800cf9c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800cfa0:	ed14 6a02 	vldr	s12, [r4, #-8]
 800cfa4:	ed54 5a01 	vldr	s11, [r4, #-4]
 800cfa8:	ed53 3a04 	vldr	s7, [r3, #-16]
 800cfac:	ed15 0a02 	vldr	s0, [r5, #-8]
 800cfb0:	ed55 0a01 	vldr	s1, [r5, #-4]
 800cfb4:	ed56 6a04 	vldr	s13, [r6, #-16]
 800cfb8:	ed16 3a03 	vldr	s6, [r6, #-12]
 800cfbc:	ed13 7a03 	vldr	s14, [r3, #-12]
 800cfc0:	ed13 5a02 	vldr	s10, [r3, #-8]
 800cfc4:	ed53 7a01 	vldr	s15, [r3, #-4]
 800cfc8:	ed16 1a02 	vldr	s2, [r6, #-8]
 800cfcc:	ed56 1a01 	vldr	s3, [r6, #-4]
 800cfd0:	ee73 ba82 	vadd.f32	s23, s7, s4
 800cfd4:	ee37 ba22 	vadd.f32	s22, s14, s5
 800cfd8:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800cfdc:	ee33 9a04 	vadd.f32	s18, s6, s8
 800cfe0:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800cfe4:	ee75 aa00 	vadd.f32	s21, s10, s0
 800cfe8:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800cfec:	ee71 8a06 	vadd.f32	s17, s2, s12
 800cff0:	ed43 ba04 	vstr	s23, [r3, #-16]
 800cff4:	ed03 ba03 	vstr	s22, [r3, #-12]
 800cff8:	ed43 aa02 	vstr	s21, [r3, #-8]
 800cffc:	ed03 aa01 	vstr	s20, [r3, #-4]
 800d000:	ed06 8a01 	vstr	s16, [r6, #-4]
 800d004:	ed46 9a04 	vstr	s19, [r6, #-16]
 800d008:	ed06 9a03 	vstr	s18, [r6, #-12]
 800d00c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800d010:	ee37 7a62 	vsub.f32	s14, s14, s5
 800d014:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800d018:	ee34 4a43 	vsub.f32	s8, s8, s6
 800d01c:	ed52 6a03 	vldr	s13, [r2, #-12]
 800d020:	ed12 3a04 	vldr	s6, [r2, #-16]
 800d024:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800d028:	ee27 8a26 	vmul.f32	s16, s14, s13
 800d02c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800d030:	ee23 2a83 	vmul.f32	s4, s7, s6
 800d034:	ee64 4a83 	vmul.f32	s9, s9, s6
 800d038:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800d03c:	ee27 7a03 	vmul.f32	s14, s14, s6
 800d040:	ee64 6a26 	vmul.f32	s13, s8, s13
 800d044:	ee24 4a03 	vmul.f32	s8, s8, s6
 800d048:	ee37 7a63 	vsub.f32	s14, s14, s7
 800d04c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800d050:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800d054:	ee32 3a08 	vadd.f32	s6, s4, s16
 800d058:	ed05 7a03 	vstr	s14, [r5, #-12]
 800d05c:	ed05 3a04 	vstr	s6, [r5, #-16]
 800d060:	ed04 4a04 	vstr	s8, [r4, #-16]
 800d064:	ed44 6a03 	vstr	s13, [r4, #-12]
 800d068:	ed12 7a01 	vldr	s14, [r2, #-4]
 800d06c:	ee76 6a41 	vsub.f32	s13, s12, s2
 800d070:	ee35 5a40 	vsub.f32	s10, s10, s0
 800d074:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800d078:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d07c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800d080:	ee67 3a87 	vmul.f32	s7, s15, s14
 800d084:	ee66 4a87 	vmul.f32	s9, s13, s14
 800d088:	ee25 4a25 	vmul.f32	s8, s10, s11
 800d08c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d090:	ee25 5a07 	vmul.f32	s10, s10, s14
 800d094:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800d098:	ee26 7a07 	vmul.f32	s14, s12, s14
 800d09c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800d0a0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800d0a4:	ee74 5a23 	vadd.f32	s11, s8, s7
 800d0a8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800d0ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d0b0:	3310      	adds	r3, #16
 800d0b2:	4563      	cmp	r3, ip
 800d0b4:	ed45 5a02 	vstr	s11, [r5, #-8]
 800d0b8:	f106 0610 	add.w	r6, r6, #16
 800d0bc:	ed45 7a01 	vstr	s15, [r5, #-4]
 800d0c0:	f102 0210 	add.w	r2, r2, #16
 800d0c4:	ed04 6a02 	vstr	s12, [r4, #-8]
 800d0c8:	ed04 7a01 	vstr	s14, [r4, #-4]
 800d0cc:	f105 0510 	add.w	r5, r5, #16
 800d0d0:	f104 0410 	add.w	r4, r4, #16
 800d0d4:	f47f af5c 	bne.w	800cf90 <arm_cfft_radix8by2_f32+0x38>
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	b28c      	uxth	r4, r1
 800d0dc:	4621      	mov	r1, r4
 800d0de:	2302      	movs	r3, #2
 800d0e0:	f000 fc60 	bl	800d9a4 <arm_radix8_butterfly_f32>
 800d0e4:	ecbd 8b08 	vpop	{d8-d11}
 800d0e8:	4621      	mov	r1, r4
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	4640      	mov	r0, r8
 800d0ee:	2302      	movs	r3, #2
 800d0f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f4:	f000 bc56 	b.w	800d9a4 <arm_radix8_butterfly_f32>

0800d0f8 <arm_cfft_radix8by4_f32>:
 800d0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0fc:	ed2d 8b0a 	vpush	{d8-d12}
 800d100:	b08d      	sub	sp, #52	@ 0x34
 800d102:	460d      	mov	r5, r1
 800d104:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d106:	8801      	ldrh	r1, [r0, #0]
 800d108:	6842      	ldr	r2, [r0, #4]
 800d10a:	900a      	str	r0, [sp, #40]	@ 0x28
 800d10c:	0849      	lsrs	r1, r1, #1
 800d10e:	008b      	lsls	r3, r1, #2
 800d110:	18ee      	adds	r6, r5, r3
 800d112:	18f0      	adds	r0, r6, r3
 800d114:	edd0 5a00 	vldr	s11, [r0]
 800d118:	edd5 7a00 	vldr	s15, [r5]
 800d11c:	ed96 7a00 	vldr	s14, [r6]
 800d120:	edd0 3a01 	vldr	s7, [r0, #4]
 800d124:	ed96 4a01 	vldr	s8, [r6, #4]
 800d128:	ed95 5a01 	vldr	s10, [r5, #4]
 800d12c:	9008      	str	r0, [sp, #32]
 800d12e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800d132:	18c7      	adds	r7, r0, r3
 800d134:	edd7 4a00 	vldr	s9, [r7]
 800d138:	ed97 3a01 	vldr	s6, [r7, #4]
 800d13c:	9701      	str	r7, [sp, #4]
 800d13e:	ee77 6a06 	vadd.f32	s13, s14, s12
 800d142:	462c      	mov	r4, r5
 800d144:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800d148:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d14c:	ee16 ca90 	vmov	ip, s13
 800d150:	f844 cb08 	str.w	ip, [r4], #8
 800d154:	ee75 6a23 	vadd.f32	s13, s10, s7
 800d158:	edd6 5a01 	vldr	s11, [r6, #4]
 800d15c:	edd7 2a01 	vldr	s5, [r7, #4]
 800d160:	9404      	str	r4, [sp, #16]
 800d162:	ee35 5a63 	vsub.f32	s10, s10, s7
 800d166:	ee74 3a27 	vadd.f32	s7, s8, s15
 800d16a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800d16e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800d172:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800d176:	0849      	lsrs	r1, r1, #1
 800d178:	f102 0e08 	add.w	lr, r2, #8
 800d17c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800d180:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800d184:	9109      	str	r1, [sp, #36]	@ 0x24
 800d186:	ee35 4a47 	vsub.f32	s8, s10, s14
 800d18a:	f1a1 0902 	sub.w	r9, r1, #2
 800d18e:	f8cd e00c 	str.w	lr, [sp, #12]
 800d192:	4631      	mov	r1, r6
 800d194:	ee13 ea90 	vmov	lr, s7
 800d198:	ee36 6a64 	vsub.f32	s12, s12, s9
 800d19c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	edc5 5a01 	vstr	s11, [r5, #4]
 800d1a6:	ee37 7a05 	vadd.f32	s14, s14, s10
 800d1aa:	f841 eb08 	str.w	lr, [r1], #8
 800d1ae:	ee34 5a24 	vadd.f32	s10, s8, s9
 800d1b2:	ee16 ea10 	vmov	lr, s12
 800d1b6:	ed86 5a01 	vstr	s10, [r6, #4]
 800d1ba:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800d1be:	f844 eb08 	str.w	lr, [r4], #8
 800d1c2:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d1c6:	edc0 6a01 	vstr	s13, [r0, #4]
 800d1ca:	9405      	str	r4, [sp, #20]
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	ee17 0a90 	vmov	r0, s15
 800d1d2:	9106      	str	r1, [sp, #24]
 800d1d4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d1d8:	f102 0110 	add.w	r1, r2, #16
 800d1dc:	46bc      	mov	ip, r7
 800d1de:	9100      	str	r1, [sp, #0]
 800d1e0:	f847 0b08 	str.w	r0, [r7], #8
 800d1e4:	f102 0118 	add.w	r1, r2, #24
 800d1e8:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800d1ec:	9102      	str	r1, [sp, #8]
 800d1ee:	ed8c 7a01 	vstr	s14, [ip, #4]
 800d1f2:	9007      	str	r0, [sp, #28]
 800d1f4:	f000 8134 	beq.w	800d460 <arm_cfft_radix8by4_f32+0x368>
 800d1f8:	f102 0920 	add.w	r9, r2, #32
 800d1fc:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800d200:	9a01      	ldr	r2, [sp, #4]
 800d202:	f8dd a000 	ldr.w	sl, [sp]
 800d206:	3b0c      	subs	r3, #12
 800d208:	4683      	mov	fp, r0
 800d20a:	4463      	add	r3, ip
 800d20c:	f105 0e10 	add.w	lr, r5, #16
 800d210:	f1a4 010c 	sub.w	r1, r4, #12
 800d214:	f104 0510 	add.w	r5, r4, #16
 800d218:	f1a6 0c0c 	sub.w	ip, r6, #12
 800d21c:	f1a2 040c 	sub.w	r4, r2, #12
 800d220:	f106 0010 	add.w	r0, r6, #16
 800d224:	3210      	adds	r2, #16
 800d226:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800d22a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800d22e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800d232:	ed52 1a02 	vldr	s3, [r2, #-8]
 800d236:	ed55 6a01 	vldr	s13, [r5, #-4]
 800d23a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800d23e:	ed12 1a01 	vldr	s2, [r2, #-4]
 800d242:	ed10 8a01 	vldr	s16, [r0, #-4]
 800d246:	ee35 4a25 	vadd.f32	s8, s10, s11
 800d24a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800d24e:	ee37 7a84 	vadd.f32	s14, s15, s8
 800d252:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d256:	ee37 7a21 	vadd.f32	s14, s14, s3
 800d25a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800d25e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800d262:	ed10 7a01 	vldr	s14, [r0, #-4]
 800d266:	ed52 6a01 	vldr	s13, [r2, #-4]
 800d26a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800d26e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800d272:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d276:	ee70 3a67 	vsub.f32	s7, s0, s15
 800d27a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800d27e:	ed94 7a02 	vldr	s14, [r4, #8]
 800d282:	ed9c 2a02 	vldr	s4, [ip, #8]
 800d286:	ed91 ba02 	vldr	s22, [r1, #8]
 800d28a:	edd3 9a02 	vldr	s19, [r3, #8]
 800d28e:	edd4 2a01 	vldr	s5, [r4, #4]
 800d292:	ed9c 9a01 	vldr	s18, [ip, #4]
 800d296:	ed93 5a01 	vldr	s10, [r3, #4]
 800d29a:	edd1 0a01 	vldr	s1, [r1, #4]
 800d29e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800d2a2:	ee32 2a47 	vsub.f32	s4, s4, s14
 800d2a6:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800d2aa:	ee79 4a22 	vadd.f32	s9, s18, s5
 800d2ae:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800d2b2:	ee79 2a62 	vsub.f32	s5, s18, s5
 800d2b6:	ed8c 7a02 	vstr	s14, [ip, #8]
 800d2ba:	ed91 7a01 	vldr	s14, [r1, #4]
 800d2be:	edd3 8a01 	vldr	s17, [r3, #4]
 800d2c2:	ee34 7a87 	vadd.f32	s14, s9, s14
 800d2c6:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800d2ca:	ee37 7a28 	vadd.f32	s14, s14, s17
 800d2ce:	ee32 9a60 	vsub.f32	s18, s4, s1
 800d2d2:	ed8c 7a01 	vstr	s14, [ip, #4]
 800d2d6:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800d2da:	ed1a aa02 	vldr	s20, [sl, #-8]
 800d2de:	ee73 8a22 	vadd.f32	s17, s6, s5
 800d2e2:	ee39 9a05 	vadd.f32	s18, s18, s10
 800d2e6:	ee7a aac1 	vsub.f32	s21, s21, s2
 800d2ea:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800d2ee:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800d2f2:	ee69 ba07 	vmul.f32	s23, s18, s14
 800d2f6:	ee6a aa87 	vmul.f32	s21, s21, s14
 800d2fa:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800d2fe:	ee63 ca87 	vmul.f32	s25, s7, s14
 800d302:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800d306:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800d30a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800d30e:	ee73 3aea 	vsub.f32	s7, s7, s21
 800d312:	ee78 8a89 	vadd.f32	s17, s17, s18
 800d316:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800d31a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800d31e:	ee34 4a67 	vsub.f32	s8, s8, s15
 800d322:	ee76 6acb 	vsub.f32	s13, s13, s22
 800d326:	ee36 6a48 	vsub.f32	s12, s12, s16
 800d32a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800d32e:	ed00 7a02 	vstr	s14, [r0, #-8]
 800d332:	ed40 3a01 	vstr	s7, [r0, #-4]
 800d336:	edc1 8a01 	vstr	s17, [r1, #4]
 800d33a:	ed81 aa02 	vstr	s20, [r1, #8]
 800d33e:	ed59 3a04 	vldr	s7, [r9, #-16]
 800d342:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800d346:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800d34a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800d34e:	ee34 4a61 	vsub.f32	s8, s8, s3
 800d352:	ee36 6a41 	vsub.f32	s12, s12, s2
 800d356:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800d35a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800d35e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800d362:	ee26 6a23 	vmul.f32	s12, s12, s7
 800d366:	ee24 4a26 	vmul.f32	s8, s8, s13
 800d36a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d36e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800d372:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800d376:	ee36 6a44 	vsub.f32	s12, s12, s8
 800d37a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d37e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800d382:	ee79 3a29 	vadd.f32	s7, s18, s19
 800d386:	ee75 6a60 	vsub.f32	s13, s10, s1
 800d38a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800d38e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d392:	ed45 3a02 	vstr	s7, [r5, #-8]
 800d396:	ed05 6a01 	vstr	s12, [r5, #-4]
 800d39a:	ed84 7a01 	vstr	s14, [r4, #4]
 800d39e:	ed84 4a02 	vstr	s8, [r4, #8]
 800d3a2:	ee35 6a81 	vadd.f32	s12, s11, s2
 800d3a6:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800d3aa:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800d3ae:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800d3b2:	ee33 3a62 	vsub.f32	s6, s6, s5
 800d3b6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800d3ba:	ee67 2a26 	vmul.f32	s5, s14, s13
 800d3be:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800d3c2:	ee26 5a25 	vmul.f32	s10, s12, s11
 800d3c6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d3ca:	ee26 6a26 	vmul.f32	s12, s12, s13
 800d3ce:	ee27 7a25 	vmul.f32	s14, s14, s11
 800d3d2:	ee63 6a26 	vmul.f32	s13, s6, s13
 800d3d6:	ee23 3a25 	vmul.f32	s6, s6, s11
 800d3da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d3de:	ee75 5a24 	vadd.f32	s11, s10, s9
 800d3e2:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800d3e6:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d3ea:	f1bb 0b01 	subs.w	fp, fp, #1
 800d3ee:	ed42 5a02 	vstr	s11, [r2, #-8]
 800d3f2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800d3f6:	f10e 0e08 	add.w	lr, lr, #8
 800d3fa:	ed83 3a02 	vstr	s6, [r3, #8]
 800d3fe:	ed83 7a01 	vstr	s14, [r3, #4]
 800d402:	f1ac 0c08 	sub.w	ip, ip, #8
 800d406:	f10a 0a08 	add.w	sl, sl, #8
 800d40a:	f100 0008 	add.w	r0, r0, #8
 800d40e:	f1a1 0108 	sub.w	r1, r1, #8
 800d412:	f109 0910 	add.w	r9, r9, #16
 800d416:	f105 0508 	add.w	r5, r5, #8
 800d41a:	f1a4 0408 	sub.w	r4, r4, #8
 800d41e:	f108 0818 	add.w	r8, r8, #24
 800d422:	f102 0208 	add.w	r2, r2, #8
 800d426:	f1a3 0308 	sub.w	r3, r3, #8
 800d42a:	f47f aefc 	bne.w	800d226 <arm_cfft_radix8by4_f32+0x12e>
 800d42e:	9907      	ldr	r1, [sp, #28]
 800d430:	9800      	ldr	r0, [sp, #0]
 800d432:	00cb      	lsls	r3, r1, #3
 800d434:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800d438:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800d43c:	9100      	str	r1, [sp, #0]
 800d43e:	9904      	ldr	r1, [sp, #16]
 800d440:	4419      	add	r1, r3
 800d442:	9104      	str	r1, [sp, #16]
 800d444:	9903      	ldr	r1, [sp, #12]
 800d446:	4419      	add	r1, r3
 800d448:	9103      	str	r1, [sp, #12]
 800d44a:	9906      	ldr	r1, [sp, #24]
 800d44c:	4419      	add	r1, r3
 800d44e:	9106      	str	r1, [sp, #24]
 800d450:	9905      	ldr	r1, [sp, #20]
 800d452:	441f      	add	r7, r3
 800d454:	4419      	add	r1, r3
 800d456:	9b02      	ldr	r3, [sp, #8]
 800d458:	9105      	str	r1, [sp, #20]
 800d45a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d45e:	9302      	str	r3, [sp, #8]
 800d460:	9904      	ldr	r1, [sp, #16]
 800d462:	9805      	ldr	r0, [sp, #20]
 800d464:	ed91 4a00 	vldr	s8, [r1]
 800d468:	edd0 6a00 	vldr	s13, [r0]
 800d46c:	9b06      	ldr	r3, [sp, #24]
 800d46e:	ed97 3a00 	vldr	s6, [r7]
 800d472:	edd3 7a00 	vldr	s15, [r3]
 800d476:	edd0 4a01 	vldr	s9, [r0, #4]
 800d47a:	edd1 3a01 	vldr	s7, [r1, #4]
 800d47e:	ed97 2a01 	vldr	s4, [r7, #4]
 800d482:	ed93 7a01 	vldr	s14, [r3, #4]
 800d486:	9a03      	ldr	r2, [sp, #12]
 800d488:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800d48c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800d490:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800d494:	ee37 5a86 	vadd.f32	s10, s15, s12
 800d498:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800d49c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d4a0:	ee74 6a66 	vsub.f32	s13, s8, s13
 800d4a4:	ed81 5a00 	vstr	s10, [r1]
 800d4a8:	ed93 5a01 	vldr	s10, [r3, #4]
 800d4ac:	edd7 4a01 	vldr	s9, [r7, #4]
 800d4b0:	ee35 5a85 	vadd.f32	s10, s11, s10
 800d4b4:	ee37 4a26 	vadd.f32	s8, s14, s13
 800d4b8:	ee35 5a24 	vadd.f32	s10, s10, s9
 800d4bc:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800d4c0:	ed81 5a01 	vstr	s10, [r1, #4]
 800d4c4:	edd2 1a00 	vldr	s3, [r2]
 800d4c8:	edd2 2a01 	vldr	s5, [r2, #4]
 800d4cc:	ee34 5a83 	vadd.f32	s10, s9, s6
 800d4d0:	ee34 4a42 	vsub.f32	s8, s8, s4
 800d4d4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d4d8:	ee64 4a21 	vmul.f32	s9, s8, s3
 800d4dc:	ee24 4a22 	vmul.f32	s8, s8, s5
 800d4e0:	ee65 2a22 	vmul.f32	s5, s10, s5
 800d4e4:	ee25 5a21 	vmul.f32	s10, s10, s3
 800d4e8:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800d4ec:	ee35 5a44 	vsub.f32	s10, s10, s8
 800d4f0:	edc3 2a00 	vstr	s5, [r3]
 800d4f4:	ed83 5a01 	vstr	s10, [r3, #4]
 800d4f8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800d4fc:	9b00      	ldr	r3, [sp, #0]
 800d4fe:	ee36 6a43 	vsub.f32	s12, s12, s6
 800d502:	ed93 4a01 	vldr	s8, [r3, #4]
 800d506:	ed93 5a00 	vldr	s10, [r3]
 800d50a:	9b02      	ldr	r3, [sp, #8]
 800d50c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800d510:	ee66 4a05 	vmul.f32	s9, s12, s10
 800d514:	ee25 5a85 	vmul.f32	s10, s11, s10
 800d518:	ee26 6a04 	vmul.f32	s12, s12, s8
 800d51c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800d520:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d524:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800d528:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800d52c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d530:	ed80 6a01 	vstr	s12, [r0, #4]
 800d534:	edc0 5a00 	vstr	s11, [r0]
 800d538:	edd3 5a01 	vldr	s11, [r3, #4]
 800d53c:	edd3 6a00 	vldr	s13, [r3]
 800d540:	ee37 7a02 	vadd.f32	s14, s14, s4
 800d544:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800d548:	ee27 6a26 	vmul.f32	s12, s14, s13
 800d54c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800d550:	ee27 7a25 	vmul.f32	s14, s14, s11
 800d554:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d558:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d55c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d560:	ed87 7a01 	vstr	s14, [r7, #4]
 800d564:	edc7 7a00 	vstr	s15, [r7]
 800d568:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800d56c:	4621      	mov	r1, r4
 800d56e:	686a      	ldr	r2, [r5, #4]
 800d570:	2304      	movs	r3, #4
 800d572:	f000 fa17 	bl	800d9a4 <arm_radix8_butterfly_f32>
 800d576:	4630      	mov	r0, r6
 800d578:	4621      	mov	r1, r4
 800d57a:	686a      	ldr	r2, [r5, #4]
 800d57c:	2304      	movs	r3, #4
 800d57e:	f000 fa11 	bl	800d9a4 <arm_radix8_butterfly_f32>
 800d582:	9808      	ldr	r0, [sp, #32]
 800d584:	686a      	ldr	r2, [r5, #4]
 800d586:	4621      	mov	r1, r4
 800d588:	2304      	movs	r3, #4
 800d58a:	f000 fa0b 	bl	800d9a4 <arm_radix8_butterfly_f32>
 800d58e:	686a      	ldr	r2, [r5, #4]
 800d590:	9801      	ldr	r0, [sp, #4]
 800d592:	4621      	mov	r1, r4
 800d594:	2304      	movs	r3, #4
 800d596:	b00d      	add	sp, #52	@ 0x34
 800d598:	ecbd 8b0a 	vpop	{d8-d12}
 800d59c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a0:	f000 ba00 	b.w	800d9a4 <arm_radix8_butterfly_f32>

0800d5a4 <arm_cfft_f32>:
 800d5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a8:	2a01      	cmp	r2, #1
 800d5aa:	4606      	mov	r6, r0
 800d5ac:	4617      	mov	r7, r2
 800d5ae:	460c      	mov	r4, r1
 800d5b0:	4698      	mov	r8, r3
 800d5b2:	8805      	ldrh	r5, [r0, #0]
 800d5b4:	d056      	beq.n	800d664 <arm_cfft_f32+0xc0>
 800d5b6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800d5ba:	d063      	beq.n	800d684 <arm_cfft_f32+0xe0>
 800d5bc:	d916      	bls.n	800d5ec <arm_cfft_f32+0x48>
 800d5be:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800d5c2:	d01a      	beq.n	800d5fa <arm_cfft_f32+0x56>
 800d5c4:	d947      	bls.n	800d656 <arm_cfft_f32+0xb2>
 800d5c6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800d5ca:	d05b      	beq.n	800d684 <arm_cfft_f32+0xe0>
 800d5cc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800d5d0:	d105      	bne.n	800d5de <arm_cfft_f32+0x3a>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	6872      	ldr	r2, [r6, #4]
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f000 f9e3 	bl	800d9a4 <arm_radix8_butterfly_f32>
 800d5de:	f1b8 0f00 	cmp.w	r8, #0
 800d5e2:	d111      	bne.n	800d608 <arm_cfft_f32+0x64>
 800d5e4:	2f01      	cmp	r7, #1
 800d5e6:	d016      	beq.n	800d616 <arm_cfft_f32+0x72>
 800d5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ec:	2d20      	cmp	r5, #32
 800d5ee:	d049      	beq.n	800d684 <arm_cfft_f32+0xe0>
 800d5f0:	d935      	bls.n	800d65e <arm_cfft_f32+0xba>
 800d5f2:	2d40      	cmp	r5, #64	@ 0x40
 800d5f4:	d0ed      	beq.n	800d5d2 <arm_cfft_f32+0x2e>
 800d5f6:	2d80      	cmp	r5, #128	@ 0x80
 800d5f8:	d1f1      	bne.n	800d5de <arm_cfft_f32+0x3a>
 800d5fa:	4621      	mov	r1, r4
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	f7ff fcab 	bl	800cf58 <arm_cfft_radix8by2_f32>
 800d602:	f1b8 0f00 	cmp.w	r8, #0
 800d606:	d0ed      	beq.n	800d5e4 <arm_cfft_f32+0x40>
 800d608:	68b2      	ldr	r2, [r6, #8]
 800d60a:	89b1      	ldrh	r1, [r6, #12]
 800d60c:	4620      	mov	r0, r4
 800d60e:	f000 f841 	bl	800d694 <arm_bitreversal_32>
 800d612:	2f01      	cmp	r7, #1
 800d614:	d1e8      	bne.n	800d5e8 <arm_cfft_f32+0x44>
 800d616:	ee07 5a90 	vmov	s15, r5
 800d61a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d61e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d622:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d626:	2d00      	cmp	r5, #0
 800d628:	d0de      	beq.n	800d5e8 <arm_cfft_f32+0x44>
 800d62a:	f104 0108 	add.w	r1, r4, #8
 800d62e:	2300      	movs	r3, #0
 800d630:	3301      	adds	r3, #1
 800d632:	429d      	cmp	r5, r3
 800d634:	f101 0108 	add.w	r1, r1, #8
 800d638:	ed11 7a04 	vldr	s14, [r1, #-16]
 800d63c:	ed51 7a03 	vldr	s15, [r1, #-12]
 800d640:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d644:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d648:	ed01 7a04 	vstr	s14, [r1, #-16]
 800d64c:	ed41 7a03 	vstr	s15, [r1, #-12]
 800d650:	d1ee      	bne.n	800d630 <arm_cfft_f32+0x8c>
 800d652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d656:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800d65a:	d0ba      	beq.n	800d5d2 <arm_cfft_f32+0x2e>
 800d65c:	e7bf      	b.n	800d5de <arm_cfft_f32+0x3a>
 800d65e:	2d10      	cmp	r5, #16
 800d660:	d0cb      	beq.n	800d5fa <arm_cfft_f32+0x56>
 800d662:	e7bc      	b.n	800d5de <arm_cfft_f32+0x3a>
 800d664:	b19d      	cbz	r5, 800d68e <arm_cfft_f32+0xea>
 800d666:	f101 030c 	add.w	r3, r1, #12
 800d66a:	2200      	movs	r2, #0
 800d66c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800d670:	3201      	adds	r2, #1
 800d672:	eef1 7a67 	vneg.f32	s15, s15
 800d676:	4295      	cmp	r5, r2
 800d678:	ed43 7a02 	vstr	s15, [r3, #-8]
 800d67c:	f103 0308 	add.w	r3, r3, #8
 800d680:	d1f4      	bne.n	800d66c <arm_cfft_f32+0xc8>
 800d682:	e798      	b.n	800d5b6 <arm_cfft_f32+0x12>
 800d684:	4621      	mov	r1, r4
 800d686:	4630      	mov	r0, r6
 800d688:	f7ff fd36 	bl	800d0f8 <arm_cfft_radix8by4_f32>
 800d68c:	e7a7      	b.n	800d5de <arm_cfft_f32+0x3a>
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d0aa      	beq.n	800d5e8 <arm_cfft_f32+0x44>
 800d692:	e7b9      	b.n	800d608 <arm_cfft_f32+0x64>

0800d694 <arm_bitreversal_32>:
 800d694:	b1e9      	cbz	r1, 800d6d2 <arm_bitreversal_32+0x3e>
 800d696:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d698:	2500      	movs	r5, #0
 800d69a:	f102 0e02 	add.w	lr, r2, #2
 800d69e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800d6a2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800d6a6:	08a4      	lsrs	r4, r4, #2
 800d6a8:	089b      	lsrs	r3, r3, #2
 800d6aa:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800d6ae:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800d6b2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800d6b6:	00a6      	lsls	r6, r4, #2
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800d6be:	3304      	adds	r3, #4
 800d6c0:	1d34      	adds	r4, r6, #4
 800d6c2:	3502      	adds	r5, #2
 800d6c4:	58c6      	ldr	r6, [r0, r3]
 800d6c6:	5907      	ldr	r7, [r0, r4]
 800d6c8:	50c7      	str	r7, [r0, r3]
 800d6ca:	428d      	cmp	r5, r1
 800d6cc:	5106      	str	r6, [r0, r4]
 800d6ce:	d3e6      	bcc.n	800d69e <arm_bitreversal_32+0xa>
 800d6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6d2:	4770      	bx	lr

0800d6d4 <arm_cmplx_mag_f32>:
 800d6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d8:	ed2d 8b02 	vpush	{d8}
 800d6dc:	0897      	lsrs	r7, r2, #2
 800d6de:	b084      	sub	sp, #16
 800d6e0:	d077      	beq.n	800d7d2 <arm_cmplx_mag_f32+0xfe>
 800d6e2:	f04f 0800 	mov.w	r8, #0
 800d6e6:	f100 0420 	add.w	r4, r0, #32
 800d6ea:	f101 0510 	add.w	r5, r1, #16
 800d6ee:	463e      	mov	r6, r7
 800d6f0:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800d6f4:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800d6f8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d6fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d700:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d704:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d70c:	f2c0 80c5 	blt.w	800d89a <arm_cmplx_mag_f32+0x1c6>
 800d710:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d718:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800d71c:	f100 80cb 	bmi.w	800d8b6 <arm_cmplx_mag_f32+0x1e2>
 800d720:	ed05 8a04 	vstr	s16, [r5, #-16]
 800d724:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800d728:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800d72c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d730:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d734:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d738:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d740:	f2c0 80a8 	blt.w	800d894 <arm_cmplx_mag_f32+0x1c0>
 800d744:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d74c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800d750:	f100 80a8 	bmi.w	800d8a4 <arm_cmplx_mag_f32+0x1d0>
 800d754:	ed05 8a03 	vstr	s16, [r5, #-12]
 800d758:	ed14 0a04 	vldr	s0, [r4, #-16]
 800d75c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800d760:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d764:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d768:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d76c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d774:	f2c0 808b 	blt.w	800d88e <arm_cmplx_mag_f32+0x1ba>
 800d778:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d780:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800d784:	f100 80a9 	bmi.w	800d8da <arm_cmplx_mag_f32+0x206>
 800d788:	ed05 8a02 	vstr	s16, [r5, #-8]
 800d78c:	ed14 0a02 	vldr	s0, [r4, #-8]
 800d790:	ed54 7a01 	vldr	s15, [r4, #-4]
 800d794:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d798:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d79c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d7a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a8:	db6e      	blt.n	800d888 <arm_cmplx_mag_f32+0x1b4>
 800d7aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800d7b6:	f100 8087 	bmi.w	800d8c8 <arm_cmplx_mag_f32+0x1f4>
 800d7ba:	ed05 8a01 	vstr	s16, [r5, #-4]
 800d7be:	3e01      	subs	r6, #1
 800d7c0:	f104 0420 	add.w	r4, r4, #32
 800d7c4:	f105 0510 	add.w	r5, r5, #16
 800d7c8:	d192      	bne.n	800d6f0 <arm_cmplx_mag_f32+0x1c>
 800d7ca:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800d7ce:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800d7d2:	f012 0203 	ands.w	r2, r2, #3
 800d7d6:	d052      	beq.n	800d87e <arm_cmplx_mag_f32+0x1aa>
 800d7d8:	ed90 0a00 	vldr	s0, [r0]
 800d7dc:	edd0 7a01 	vldr	s15, [r0, #4]
 800d7e0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d7e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d7ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f6:	bfb8      	it	lt
 800d7f8:	600b      	strlt	r3, [r1, #0]
 800d7fa:	db08      	blt.n	800d80e <arm_cmplx_mag_f32+0x13a>
 800d7fc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d804:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800d808:	d479      	bmi.n	800d8fe <arm_cmplx_mag_f32+0x22a>
 800d80a:	ed81 8a00 	vstr	s16, [r1]
 800d80e:	3a01      	subs	r2, #1
 800d810:	d035      	beq.n	800d87e <arm_cmplx_mag_f32+0x1aa>
 800d812:	ed90 0a02 	vldr	s0, [r0, #8]
 800d816:	edd0 7a03 	vldr	s15, [r0, #12]
 800d81a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d81e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d822:	2300      	movs	r3, #0
 800d824:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d828:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d830:	bfb8      	it	lt
 800d832:	604b      	strlt	r3, [r1, #4]
 800d834:	db08      	blt.n	800d848 <arm_cmplx_mag_f32+0x174>
 800d836:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d83e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800d842:	d453      	bmi.n	800d8ec <arm_cmplx_mag_f32+0x218>
 800d844:	ed81 8a01 	vstr	s16, [r1, #4]
 800d848:	2a01      	cmp	r2, #1
 800d84a:	d018      	beq.n	800d87e <arm_cmplx_mag_f32+0x1aa>
 800d84c:	ed90 0a04 	vldr	s0, [r0, #16]
 800d850:	edd0 7a05 	vldr	s15, [r0, #20]
 800d854:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d858:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d85c:	2300      	movs	r3, #0
 800d85e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d862:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d86a:	db19      	blt.n	800d8a0 <arm_cmplx_mag_f32+0x1cc>
 800d86c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800d870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d874:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800d878:	d44a      	bmi.n	800d910 <arm_cmplx_mag_f32+0x23c>
 800d87a:	ed81 8a02 	vstr	s16, [r1, #8]
 800d87e:	b004      	add	sp, #16
 800d880:	ecbd 8b02 	vpop	{d8}
 800d884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d888:	f845 8c04 	str.w	r8, [r5, #-4]
 800d88c:	e797      	b.n	800d7be <arm_cmplx_mag_f32+0xea>
 800d88e:	f845 8c08 	str.w	r8, [r5, #-8]
 800d892:	e77b      	b.n	800d78c <arm_cmplx_mag_f32+0xb8>
 800d894:	f845 8c0c 	str.w	r8, [r5, #-12]
 800d898:	e75e      	b.n	800d758 <arm_cmplx_mag_f32+0x84>
 800d89a:	f845 8c10 	str.w	r8, [r5, #-16]
 800d89e:	e741      	b.n	800d724 <arm_cmplx_mag_f32+0x50>
 800d8a0:	608b      	str	r3, [r1, #8]
 800d8a2:	e7ec      	b.n	800d87e <arm_cmplx_mag_f32+0x1aa>
 800d8a4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d8a8:	9001      	str	r0, [sp, #4]
 800d8aa:	f003 fa05 	bl	8010cb8 <sqrtf>
 800d8ae:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d8b2:	9801      	ldr	r0, [sp, #4]
 800d8b4:	e74e      	b.n	800d754 <arm_cmplx_mag_f32+0x80>
 800d8b6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d8ba:	9001      	str	r0, [sp, #4]
 800d8bc:	f003 f9fc 	bl	8010cb8 <sqrtf>
 800d8c0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d8c4:	9801      	ldr	r0, [sp, #4]
 800d8c6:	e72b      	b.n	800d720 <arm_cmplx_mag_f32+0x4c>
 800d8c8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d8cc:	9001      	str	r0, [sp, #4]
 800d8ce:	f003 f9f3 	bl	8010cb8 <sqrtf>
 800d8d2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d8d6:	9801      	ldr	r0, [sp, #4]
 800d8d8:	e76f      	b.n	800d7ba <arm_cmplx_mag_f32+0xe6>
 800d8da:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d8de:	9001      	str	r0, [sp, #4]
 800d8e0:	f003 f9ea 	bl	8010cb8 <sqrtf>
 800d8e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d8e8:	9801      	ldr	r0, [sp, #4]
 800d8ea:	e74d      	b.n	800d788 <arm_cmplx_mag_f32+0xb4>
 800d8ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8f0:	9201      	str	r2, [sp, #4]
 800d8f2:	f003 f9e1 	bl	8010cb8 <sqrtf>
 800d8f6:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800d8fa:	9903      	ldr	r1, [sp, #12]
 800d8fc:	e7a2      	b.n	800d844 <arm_cmplx_mag_f32+0x170>
 800d8fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d902:	9201      	str	r2, [sp, #4]
 800d904:	f003 f9d8 	bl	8010cb8 <sqrtf>
 800d908:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800d90c:	9903      	ldr	r1, [sp, #12]
 800d90e:	e77c      	b.n	800d80a <arm_cmplx_mag_f32+0x136>
 800d910:	9101      	str	r1, [sp, #4]
 800d912:	f003 f9d1 	bl	8010cb8 <sqrtf>
 800d916:	9901      	ldr	r1, [sp, #4]
 800d918:	e7af      	b.n	800d87a <arm_cmplx_mag_f32+0x1a6>
 800d91a:	bf00      	nop

0800d91c <arm_scale_f32>:
 800d91c:	b470      	push	{r4, r5, r6}
 800d91e:	0896      	lsrs	r6, r2, #2
 800d920:	d025      	beq.n	800d96e <arm_scale_f32+0x52>
 800d922:	f100 0410 	add.w	r4, r0, #16
 800d926:	f101 0310 	add.w	r3, r1, #16
 800d92a:	4635      	mov	r5, r6
 800d92c:	ed54 7a04 	vldr	s15, [r4, #-16]
 800d930:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d934:	3d01      	subs	r5, #1
 800d936:	ed43 7a04 	vstr	s15, [r3, #-16]
 800d93a:	ed54 7a03 	vldr	s15, [r4, #-12]
 800d93e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d942:	f104 0410 	add.w	r4, r4, #16
 800d946:	ed43 7a03 	vstr	s15, [r3, #-12]
 800d94a:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800d94e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d952:	f103 0310 	add.w	r3, r3, #16
 800d956:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800d95a:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800d95e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d962:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800d966:	d1e1      	bne.n	800d92c <arm_scale_f32+0x10>
 800d968:	0136      	lsls	r6, r6, #4
 800d96a:	4430      	add	r0, r6
 800d96c:	4431      	add	r1, r6
 800d96e:	f012 0203 	ands.w	r2, r2, #3
 800d972:	d015      	beq.n	800d9a0 <arm_scale_f32+0x84>
 800d974:	edd0 7a00 	vldr	s15, [r0]
 800d978:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d97c:	3a01      	subs	r2, #1
 800d97e:	edc1 7a00 	vstr	s15, [r1]
 800d982:	d00d      	beq.n	800d9a0 <arm_scale_f32+0x84>
 800d984:	edd0 7a01 	vldr	s15, [r0, #4]
 800d988:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d98c:	2a01      	cmp	r2, #1
 800d98e:	edc1 7a01 	vstr	s15, [r1, #4]
 800d992:	d005      	beq.n	800d9a0 <arm_scale_f32+0x84>
 800d994:	edd0 7a02 	vldr	s15, [r0, #8]
 800d998:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d99c:	ed81 0a02 	vstr	s0, [r1, #8]
 800d9a0:	bc70      	pop	{r4, r5, r6}
 800d9a2:	4770      	bx	lr

0800d9a4 <arm_radix8_butterfly_f32>:
 800d9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a8:	ed2d 8b10 	vpush	{d8-d15}
 800d9ac:	b095      	sub	sp, #84	@ 0x54
 800d9ae:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	3304      	adds	r3, #4
 800d9b6:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800dc9c <arm_radix8_butterfly_f32+0x2f8>
 800d9ba:	9012      	str	r0, [sp, #72]	@ 0x48
 800d9bc:	468b      	mov	fp, r1
 800d9be:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d9c0:	4689      	mov	r9, r1
 800d9c2:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800d9c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d9c8:	960f      	str	r6, [sp, #60]	@ 0x3c
 800d9ca:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800d9ce:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800d9d2:	eb03 0508 	add.w	r5, r3, r8
 800d9d6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800d9da:	eb05 040e 	add.w	r4, r5, lr
 800d9de:	0137      	lsls	r7, r6, #4
 800d9e0:	eba6 030a 	sub.w	r3, r6, sl
 800d9e4:	eb04 000e 	add.w	r0, r4, lr
 800d9e8:	44b2      	add	sl, r6
 800d9ea:	1d3a      	adds	r2, r7, #4
 800d9ec:	9702      	str	r7, [sp, #8]
 800d9ee:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d9f2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800d9f6:	ebae 0c06 	sub.w	ip, lr, r6
 800d9fa:	9703      	str	r7, [sp, #12]
 800d9fc:	eb03 0708 	add.w	r7, r3, r8
 800da00:	9701      	str	r7, [sp, #4]
 800da02:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800da06:	9706      	str	r7, [sp, #24]
 800da08:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800da0a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800da0e:	f10e 0104 	add.w	r1, lr, #4
 800da12:	4439      	add	r1, r7
 800da14:	443a      	add	r2, r7
 800da16:	0137      	lsls	r7, r6, #4
 800da18:	00f6      	lsls	r6, r6, #3
 800da1a:	9704      	str	r7, [sp, #16]
 800da1c:	9605      	str	r6, [sp, #20]
 800da1e:	9f01      	ldr	r7, [sp, #4]
 800da20:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800da22:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800da26:	f04f 0c00 	mov.w	ip, #0
 800da2a:	edd4 6a00 	vldr	s13, [r4]
 800da2e:	edd7 1a00 	vldr	s3, [r7]
 800da32:	ed16 aa01 	vldr	s20, [r6, #-4]
 800da36:	edd5 5a00 	vldr	s11, [r5]
 800da3a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800da3e:	ed90 6a00 	vldr	s12, [r0]
 800da42:	ed51 7a01 	vldr	s15, [r1, #-4]
 800da46:	ed93 3a00 	vldr	s6, [r3]
 800da4a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800da4e:	ee33 2a21 	vadd.f32	s4, s6, s3
 800da52:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800da56:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800da5a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800da5e:	ee34 4a80 	vadd.f32	s8, s9, s0
 800da62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800da66:	ee74 6a07 	vadd.f32	s13, s8, s14
 800da6a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800da6e:	ed46 6a01 	vstr	s13, [r6, #-4]
 800da72:	ed85 4a00 	vstr	s8, [r5]
 800da76:	edd1 6a00 	vldr	s13, [r1]
 800da7a:	ed94 9a01 	vldr	s18, [r4, #4]
 800da7e:	edd3 2a01 	vldr	s5, [r3, #4]
 800da82:	edd7 8a01 	vldr	s17, [r7, #4]
 800da86:	edd6 0a00 	vldr	s1, [r6]
 800da8a:	edd5 3a01 	vldr	s7, [r5, #4]
 800da8e:	ed90 8a01 	vldr	s16, [r0, #4]
 800da92:	ed92 7a00 	vldr	s14, [r2]
 800da96:	ee33 3a61 	vsub.f32	s6, s6, s3
 800da9a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800da9e:	ee72 aae8 	vsub.f32	s21, s5, s17
 800daa2:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800daa6:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800daaa:	ee77 7a83 	vadd.f32	s15, s15, s6
 800daae:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800dab2:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800dab6:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800daba:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800dabe:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800dac2:	ee77 0a08 	vadd.f32	s1, s14, s16
 800dac6:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800daca:	ee37 7a48 	vsub.f32	s14, s14, s16
 800dace:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800dad2:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800dad6:	ee76 6a89 	vadd.f32	s13, s13, s18
 800dada:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800dade:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800dae2:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800dae6:	ee35 5a42 	vsub.f32	s10, s10, s4
 800daea:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800daee:	ee33 2a20 	vadd.f32	s4, s6, s1
 800daf2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800daf6:	ee33 3a60 	vsub.f32	s6, s6, s1
 800dafa:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800dafe:	ee77 0a01 	vadd.f32	s1, s14, s2
 800db02:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800db06:	ee37 7a41 	vsub.f32	s14, s14, s2
 800db0a:	ee73 1a84 	vadd.f32	s3, s7, s8
 800db0e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800db12:	ee76 3a27 	vadd.f32	s7, s12, s15
 800db16:	ee76 7a67 	vsub.f32	s15, s12, s15
 800db1a:	ee32 8a00 	vadd.f32	s16, s4, s0
 800db1e:	ee33 1a45 	vsub.f32	s2, s6, s10
 800db22:	ee32 2a40 	vsub.f32	s4, s4, s0
 800db26:	ee35 5a03 	vadd.f32	s10, s10, s6
 800db2a:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800db2e:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800db32:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800db36:	ee34 6a67 	vsub.f32	s12, s8, s15
 800db3a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800db3e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800db42:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800db46:	ee77 7a84 	vadd.f32	s15, s15, s8
 800db4a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800db4e:	44dc      	add	ip, fp
 800db50:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800db54:	45e1      	cmp	r9, ip
 800db56:	ed86 8a00 	vstr	s16, [r6]
 800db5a:	ed85 2a01 	vstr	s4, [r5, #4]
 800db5e:	4456      	add	r6, sl
 800db60:	ed02 0a01 	vstr	s0, [r2, #-4]
 800db64:	4455      	add	r5, sl
 800db66:	edc0 6a00 	vstr	s13, [r0]
 800db6a:	ed82 1a00 	vstr	s2, [r2]
 800db6e:	ed80 5a01 	vstr	s10, [r0, #4]
 800db72:	4452      	add	r2, sl
 800db74:	ed01 3a01 	vstr	s6, [r1, #-4]
 800db78:	4450      	add	r0, sl
 800db7a:	edc7 2a00 	vstr	s5, [r7]
 800db7e:	edc4 4a00 	vstr	s9, [r4]
 800db82:	ed83 7a00 	vstr	s14, [r3]
 800db86:	edc1 5a00 	vstr	s11, [r1]
 800db8a:	edc7 3a01 	vstr	s7, [r7, #4]
 800db8e:	4451      	add	r1, sl
 800db90:	ed84 6a01 	vstr	s12, [r4, #4]
 800db94:	4457      	add	r7, sl
 800db96:	edc3 7a01 	vstr	s15, [r3, #4]
 800db9a:	4454      	add	r4, sl
 800db9c:	4453      	add	r3, sl
 800db9e:	f63f af44 	bhi.w	800da2a <arm_radix8_butterfly_f32+0x86>
 800dba2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dba4:	2b07      	cmp	r3, #7
 800dba6:	f240 81b7 	bls.w	800df18 <arm_radix8_butterfly_f32+0x574>
 800dbaa:	9b06      	ldr	r3, [sp, #24]
 800dbac:	9903      	ldr	r1, [sp, #12]
 800dbae:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dbb0:	9e05      	ldr	r6, [sp, #20]
 800dbb2:	9a04      	ldr	r2, [sp, #16]
 800dbb4:	f103 0c08 	add.w	ip, r3, #8
 800dbb8:	9b02      	ldr	r3, [sp, #8]
 800dbba:	3108      	adds	r1, #8
 800dbbc:	f108 0808 	add.w	r8, r8, #8
 800dbc0:	1841      	adds	r1, r0, r1
 800dbc2:	3608      	adds	r6, #8
 800dbc4:	330c      	adds	r3, #12
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	4444      	add	r4, r8
 800dbca:	18c3      	adds	r3, r0, r3
 800dbcc:	9109      	str	r1, [sp, #36]	@ 0x24
 800dbce:	1981      	adds	r1, r0, r6
 800dbd0:	f10e 0e08 	add.w	lr, lr, #8
 800dbd4:	3208      	adds	r2, #8
 800dbd6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dbd8:	9107      	str	r1, [sp, #28]
 800dbda:	4604      	mov	r4, r0
 800dbdc:	4601      	mov	r1, r0
 800dbde:	9304      	str	r3, [sp, #16]
 800dbe0:	f100 030c 	add.w	r3, r0, #12
 800dbe4:	4474      	add	r4, lr
 800dbe6:	f04f 0801 	mov.w	r8, #1
 800dbea:	1882      	adds	r2, r0, r2
 800dbec:	4461      	add	r1, ip
 800dbee:	9305      	str	r3, [sp, #20]
 800dbf0:	464b      	mov	r3, r9
 800dbf2:	940a      	str	r4, [sp, #40]	@ 0x28
 800dbf4:	46c1      	mov	r9, r8
 800dbf6:	9208      	str	r2, [sp, #32]
 800dbf8:	46d8      	mov	r8, fp
 800dbfa:	9106      	str	r1, [sp, #24]
 800dbfc:	f04f 0e00 	mov.w	lr, #0
 800dc00:	469b      	mov	fp, r3
 800dc02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dc04:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dc06:	449e      	add	lr, r3
 800dc08:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800dc0c:	441a      	add	r2, r3
 800dc0e:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc10:	441a      	add	r2, r3
 800dc12:	18d4      	adds	r4, r2, r3
 800dc14:	18e5      	adds	r5, r4, r3
 800dc16:	18ee      	adds	r6, r5, r3
 800dc18:	18f7      	adds	r7, r6, r3
 800dc1a:	eb07 0c03 	add.w	ip, r7, r3
 800dc1e:	920d      	str	r2, [sp, #52]	@ 0x34
 800dc20:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800dc24:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800dc28:	910c      	str	r1, [sp, #48]	@ 0x30
 800dc2a:	4419      	add	r1, r3
 800dc2c:	9103      	str	r1, [sp, #12]
 800dc2e:	4419      	add	r1, r3
 800dc30:	18ca      	adds	r2, r1, r3
 800dc32:	9202      	str	r2, [sp, #8]
 800dc34:	441a      	add	r2, r3
 800dc36:	18d0      	adds	r0, r2, r3
 800dc38:	ed92 ea01 	vldr	s28, [r2, #4]
 800dc3c:	9a02      	ldr	r2, [sp, #8]
 800dc3e:	edd4 7a00 	vldr	s15, [r4]
 800dc42:	edd2 da01 	vldr	s27, [r2, #4]
 800dc46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dc48:	ed91 da01 	vldr	s26, [r1, #4]
 800dc4c:	ed92 ca01 	vldr	s24, [r2, #4]
 800dc50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dc52:	9903      	ldr	r1, [sp, #12]
 800dc54:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc58:	edd2 7a00 	vldr	s15, [r2]
 800dc5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc5e:	edcd 7a02 	vstr	s15, [sp, #8]
 800dc62:	edd2 7a00 	vldr	s15, [r2]
 800dc66:	edd0 ea01 	vldr	s29, [r0, #4]
 800dc6a:	edd1 ca01 	vldr	s25, [r1, #4]
 800dc6e:	eddc ba00 	vldr	s23, [ip]
 800dc72:	edd7 aa00 	vldr	s21, [r7]
 800dc76:	ed96 aa00 	vldr	s20, [r6]
 800dc7a:	edd5 9a00 	vldr	s19, [r5]
 800dc7e:	edcd 7a01 	vstr	s15, [sp, #4]
 800dc82:	4403      	add	r3, r0
 800dc84:	ed93 fa01 	vldr	s30, [r3, #4]
 800dc88:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800dc8c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800dc90:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dc94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800dc98:	46cc      	mov	ip, r9
 800dc9a:	e001      	b.n	800dca0 <arm_radix8_butterfly_f32+0x2fc>
 800dc9c:	3f3504f3 	.word	0x3f3504f3
 800dca0:	ed91 6a00 	vldr	s12, [r1]
 800dca4:	ed93 5a00 	vldr	s10, [r3]
 800dca8:	edd0 fa00 	vldr	s31, [r0]
 800dcac:	edd4 7a00 	vldr	s15, [r4]
 800dcb0:	ed95 7a00 	vldr	s14, [r5]
 800dcb4:	ed56 3a01 	vldr	s7, [r6, #-4]
 800dcb8:	ed17 3a01 	vldr	s6, [r7, #-4]
 800dcbc:	ed92 2a00 	vldr	s4, [r2]
 800dcc0:	ed96 0a00 	vldr	s0, [r6]
 800dcc4:	ee33 8a85 	vadd.f32	s16, s7, s10
 800dcc8:	ee32 1a06 	vadd.f32	s2, s4, s12
 800dccc:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800dcd0:	ee77 4a87 	vadd.f32	s9, s15, s14
 800dcd4:	ee78 1a04 	vadd.f32	s3, s16, s8
 800dcd8:	ee71 6a24 	vadd.f32	s13, s2, s9
 800dcdc:	ee32 2a46 	vsub.f32	s4, s4, s12
 800dce0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800dce4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dce8:	ed06 6a01 	vstr	s12, [r6, #-4]
 800dcec:	edd4 8a01 	vldr	s17, [r4, #4]
 800dcf0:	ed92 9a01 	vldr	s18, [r2, #4]
 800dcf4:	edd7 0a00 	vldr	s1, [r7]
 800dcf8:	edd1 2a01 	vldr	s5, [r1, #4]
 800dcfc:	ed95 7a01 	vldr	s14, [r5, #4]
 800dd00:	ed93 6a01 	vldr	s12, [r3, #4]
 800dd04:	edd0 5a01 	vldr	s11, [r0, #4]
 800dd08:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800dd0c:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800dd10:	ee39 5a62 	vsub.f32	s10, s18, s5
 800dd14:	ee78 fac7 	vsub.f32	s31, s17, s14
 800dd18:	ee38 4a44 	vsub.f32	s8, s16, s8
 800dd1c:	ee38 7a87 	vadd.f32	s14, s17, s14
 800dd20:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800dd24:	ee79 2a22 	vadd.f32	s5, s18, s5
 800dd28:	ee32 9a27 	vadd.f32	s18, s4, s15
 800dd2c:	ee72 7a67 	vsub.f32	s15, s4, s15
 800dd30:	ee30 2a06 	vadd.f32	s4, s0, s12
 800dd34:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800dd38:	ee71 4a64 	vsub.f32	s9, s2, s9
 800dd3c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800dd40:	ee32 1a08 	vadd.f32	s2, s4, s16
 800dd44:	ee72 fa87 	vadd.f32	s31, s5, s14
 800dd48:	ee32 2a48 	vsub.f32	s4, s4, s16
 800dd4c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800dd50:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800dd54:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800dd58:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800dd5c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800dd60:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800dd64:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800dd68:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800dd6c:	ee30 6a46 	vsub.f32	s12, s0, s12
 800dd70:	ee74 0a22 	vadd.f32	s1, s8, s5
 800dd74:	ee36 0a28 	vadd.f32	s0, s12, s17
 800dd78:	ee74 2a62 	vsub.f32	s5, s8, s5
 800dd7c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800dd80:	ee32 4a64 	vsub.f32	s8, s4, s9
 800dd84:	ee73 8a09 	vadd.f32	s17, s6, s18
 800dd88:	ee74 4a82 	vadd.f32	s9, s9, s4
 800dd8c:	ee33 9a49 	vsub.f32	s18, s6, s18
 800dd90:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800dd94:	ee35 3a85 	vadd.f32	s6, s11, s10
 800dd98:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800dd9c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800dda0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800dda4:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800dda8:	ee30 7a68 	vsub.f32	s14, s0, s17
 800ddac:	ee35 8a03 	vadd.f32	s16, s10, s6
 800ddb0:	ee38 0a80 	vadd.f32	s0, s17, s0
 800ddb4:	ee73 3a82 	vadd.f32	s7, s7, s4
 800ddb8:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800ddbc:	ed9d 2a01 	vldr	s4, [sp, #4]
 800ddc0:	eddd 1a02 	vldr	s3, [sp, #8]
 800ddc4:	ee35 5a43 	vsub.f32	s10, s10, s6
 800ddc8:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800ddcc:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800ddd0:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800ddd4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ddd8:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800dddc:	ee76 5a49 	vsub.f32	s11, s12, s18
 800dde0:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800dde4:	ee39 6a06 	vadd.f32	s12, s18, s12
 800dde8:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800ddec:	ee21 4a84 	vmul.f32	s8, s3, s8
 800ddf0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800ddf4:	ee22 7a07 	vmul.f32	s14, s4, s14
 800ddf8:	ee22 2a08 	vmul.f32	s4, s4, s16
 800ddfc:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800de00:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800de04:	ee31 1a09 	vadd.f32	s2, s2, s18
 800de08:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800de0c:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800de10:	ee74 0a60 	vsub.f32	s1, s8, s1
 800de14:	ee37 7a48 	vsub.f32	s14, s14, s16
 800de18:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800de1c:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800de20:	ee72 1a21 	vadd.f32	s3, s4, s3
 800de24:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800de28:	ee38 2a89 	vadd.f32	s4, s17, s18
 800de2c:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800de30:	ee38 8a04 	vadd.f32	s16, s16, s8
 800de34:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800de38:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800de3c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800de40:	eddd 5a03 	vldr	s11, [sp, #12]
 800de44:	edc6 fa00 	vstr	s31, [r6]
 800de48:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800de4c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800de50:	ee30 0a45 	vsub.f32	s0, s0, s10
 800de54:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800de58:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800de5c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800de60:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800de64:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800de68:	ee25 6a86 	vmul.f32	s12, s11, s12
 800de6c:	ee74 4a89 	vadd.f32	s9, s9, s18
 800de70:	ee34 3a43 	vsub.f32	s6, s8, s6
 800de74:	ee78 8a85 	vadd.f32	s17, s17, s10
 800de78:	ee36 6a67 	vsub.f32	s12, s12, s15
 800de7c:	44c4      	add	ip, r8
 800de7e:	45e3      	cmp	fp, ip
 800de80:	edc3 3a00 	vstr	s7, [r3]
 800de84:	edc3 6a01 	vstr	s13, [r3, #4]
 800de88:	4456      	add	r6, sl
 800de8a:	ed07 1a01 	vstr	s2, [r7, #-4]
 800de8e:	edc7 0a00 	vstr	s1, [r7]
 800de92:	4453      	add	r3, sl
 800de94:	ed80 2a00 	vstr	s4, [r0]
 800de98:	edc0 2a01 	vstr	s5, [r0, #4]
 800de9c:	4457      	add	r7, sl
 800de9e:	edc2 1a00 	vstr	s3, [r2]
 800dea2:	ed82 7a01 	vstr	s14, [r2, #4]
 800dea6:	4450      	add	r0, sl
 800dea8:	ed85 8a00 	vstr	s16, [r5]
 800deac:	ed85 0a01 	vstr	s0, [r5, #4]
 800deb0:	4452      	add	r2, sl
 800deb2:	edc1 4a00 	vstr	s9, [r1]
 800deb6:	4455      	add	r5, sl
 800deb8:	ed81 3a01 	vstr	s6, [r1, #4]
 800debc:	edc4 8a00 	vstr	s17, [r4]
 800dec0:	ed84 6a01 	vstr	s12, [r4, #4]
 800dec4:	4451      	add	r1, sl
 800dec6:	4454      	add	r4, sl
 800dec8:	f63f aeea 	bhi.w	800dca0 <arm_radix8_butterfly_f32+0x2fc>
 800decc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dece:	3308      	adds	r3, #8
 800ded0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ded2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ded4:	3308      	adds	r3, #8
 800ded6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ded8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deda:	3308      	adds	r3, #8
 800dedc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dede:	9b08      	ldr	r3, [sp, #32]
 800dee0:	3308      	adds	r3, #8
 800dee2:	9308      	str	r3, [sp, #32]
 800dee4:	9b07      	ldr	r3, [sp, #28]
 800dee6:	3308      	adds	r3, #8
 800dee8:	9307      	str	r3, [sp, #28]
 800deea:	9b06      	ldr	r3, [sp, #24]
 800deec:	3308      	adds	r3, #8
 800deee:	9306      	str	r3, [sp, #24]
 800def0:	9b05      	ldr	r3, [sp, #20]
 800def2:	3308      	adds	r3, #8
 800def4:	9305      	str	r3, [sp, #20]
 800def6:	9b04      	ldr	r3, [sp, #16]
 800def8:	3308      	adds	r3, #8
 800defa:	9304      	str	r3, [sp, #16]
 800defc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800defe:	f109 0901 	add.w	r9, r9, #1
 800df02:	454b      	cmp	r3, r9
 800df04:	f47f ae7d 	bne.w	800dc02 <arm_radix8_butterfly_f32+0x25e>
 800df08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df0a:	00db      	lsls	r3, r3, #3
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	46d9      	mov	r9, fp
 800df10:	9310      	str	r3, [sp, #64]	@ 0x40
 800df12:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800df16:	e554      	b.n	800d9c2 <arm_radix8_butterfly_f32+0x1e>
 800df18:	b015      	add	sp, #84	@ 0x54
 800df1a:	ecbd 8b10 	vpop	{d8-d15}
 800df1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df22:	bf00      	nop

0800df24 <__cvt>:
 800df24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df28:	ec57 6b10 	vmov	r6, r7, d0
 800df2c:	2f00      	cmp	r7, #0
 800df2e:	460c      	mov	r4, r1
 800df30:	4619      	mov	r1, r3
 800df32:	463b      	mov	r3, r7
 800df34:	bfbb      	ittet	lt
 800df36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800df3a:	461f      	movlt	r7, r3
 800df3c:	2300      	movge	r3, #0
 800df3e:	232d      	movlt	r3, #45	@ 0x2d
 800df40:	700b      	strb	r3, [r1, #0]
 800df42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800df48:	4691      	mov	r9, r2
 800df4a:	f023 0820 	bic.w	r8, r3, #32
 800df4e:	bfbc      	itt	lt
 800df50:	4632      	movlt	r2, r6
 800df52:	4616      	movlt	r6, r2
 800df54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800df58:	d005      	beq.n	800df66 <__cvt+0x42>
 800df5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800df5e:	d100      	bne.n	800df62 <__cvt+0x3e>
 800df60:	3401      	adds	r4, #1
 800df62:	2102      	movs	r1, #2
 800df64:	e000      	b.n	800df68 <__cvt+0x44>
 800df66:	2103      	movs	r1, #3
 800df68:	ab03      	add	r3, sp, #12
 800df6a:	9301      	str	r3, [sp, #4]
 800df6c:	ab02      	add	r3, sp, #8
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	ec47 6b10 	vmov	d0, r6, r7
 800df74:	4653      	mov	r3, sl
 800df76:	4622      	mov	r2, r4
 800df78:	f000 feea 	bl	800ed50 <_dtoa_r>
 800df7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800df80:	4605      	mov	r5, r0
 800df82:	d119      	bne.n	800dfb8 <__cvt+0x94>
 800df84:	f019 0f01 	tst.w	r9, #1
 800df88:	d00e      	beq.n	800dfa8 <__cvt+0x84>
 800df8a:	eb00 0904 	add.w	r9, r0, r4
 800df8e:	2200      	movs	r2, #0
 800df90:	2300      	movs	r3, #0
 800df92:	4630      	mov	r0, r6
 800df94:	4639      	mov	r1, r7
 800df96:	f7f2 fdcf 	bl	8000b38 <__aeabi_dcmpeq>
 800df9a:	b108      	cbz	r0, 800dfa0 <__cvt+0x7c>
 800df9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800dfa0:	2230      	movs	r2, #48	@ 0x30
 800dfa2:	9b03      	ldr	r3, [sp, #12]
 800dfa4:	454b      	cmp	r3, r9
 800dfa6:	d31e      	bcc.n	800dfe6 <__cvt+0xc2>
 800dfa8:	9b03      	ldr	r3, [sp, #12]
 800dfaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfac:	1b5b      	subs	r3, r3, r5
 800dfae:	4628      	mov	r0, r5
 800dfb0:	6013      	str	r3, [r2, #0]
 800dfb2:	b004      	add	sp, #16
 800dfb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dfbc:	eb00 0904 	add.w	r9, r0, r4
 800dfc0:	d1e5      	bne.n	800df8e <__cvt+0x6a>
 800dfc2:	7803      	ldrb	r3, [r0, #0]
 800dfc4:	2b30      	cmp	r3, #48	@ 0x30
 800dfc6:	d10a      	bne.n	800dfde <__cvt+0xba>
 800dfc8:	2200      	movs	r2, #0
 800dfca:	2300      	movs	r3, #0
 800dfcc:	4630      	mov	r0, r6
 800dfce:	4639      	mov	r1, r7
 800dfd0:	f7f2 fdb2 	bl	8000b38 <__aeabi_dcmpeq>
 800dfd4:	b918      	cbnz	r0, 800dfde <__cvt+0xba>
 800dfd6:	f1c4 0401 	rsb	r4, r4, #1
 800dfda:	f8ca 4000 	str.w	r4, [sl]
 800dfde:	f8da 3000 	ldr.w	r3, [sl]
 800dfe2:	4499      	add	r9, r3
 800dfe4:	e7d3      	b.n	800df8e <__cvt+0x6a>
 800dfe6:	1c59      	adds	r1, r3, #1
 800dfe8:	9103      	str	r1, [sp, #12]
 800dfea:	701a      	strb	r2, [r3, #0]
 800dfec:	e7d9      	b.n	800dfa2 <__cvt+0x7e>

0800dfee <__exponent>:
 800dfee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dff0:	2900      	cmp	r1, #0
 800dff2:	bfba      	itte	lt
 800dff4:	4249      	neglt	r1, r1
 800dff6:	232d      	movlt	r3, #45	@ 0x2d
 800dff8:	232b      	movge	r3, #43	@ 0x2b
 800dffa:	2909      	cmp	r1, #9
 800dffc:	7002      	strb	r2, [r0, #0]
 800dffe:	7043      	strb	r3, [r0, #1]
 800e000:	dd29      	ble.n	800e056 <__exponent+0x68>
 800e002:	f10d 0307 	add.w	r3, sp, #7
 800e006:	461d      	mov	r5, r3
 800e008:	270a      	movs	r7, #10
 800e00a:	461a      	mov	r2, r3
 800e00c:	fbb1 f6f7 	udiv	r6, r1, r7
 800e010:	fb07 1416 	mls	r4, r7, r6, r1
 800e014:	3430      	adds	r4, #48	@ 0x30
 800e016:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e01a:	460c      	mov	r4, r1
 800e01c:	2c63      	cmp	r4, #99	@ 0x63
 800e01e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e022:	4631      	mov	r1, r6
 800e024:	dcf1      	bgt.n	800e00a <__exponent+0x1c>
 800e026:	3130      	adds	r1, #48	@ 0x30
 800e028:	1e94      	subs	r4, r2, #2
 800e02a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e02e:	1c41      	adds	r1, r0, #1
 800e030:	4623      	mov	r3, r4
 800e032:	42ab      	cmp	r3, r5
 800e034:	d30a      	bcc.n	800e04c <__exponent+0x5e>
 800e036:	f10d 0309 	add.w	r3, sp, #9
 800e03a:	1a9b      	subs	r3, r3, r2
 800e03c:	42ac      	cmp	r4, r5
 800e03e:	bf88      	it	hi
 800e040:	2300      	movhi	r3, #0
 800e042:	3302      	adds	r3, #2
 800e044:	4403      	add	r3, r0
 800e046:	1a18      	subs	r0, r3, r0
 800e048:	b003      	add	sp, #12
 800e04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e04c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e050:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e054:	e7ed      	b.n	800e032 <__exponent+0x44>
 800e056:	2330      	movs	r3, #48	@ 0x30
 800e058:	3130      	adds	r1, #48	@ 0x30
 800e05a:	7083      	strb	r3, [r0, #2]
 800e05c:	70c1      	strb	r1, [r0, #3]
 800e05e:	1d03      	adds	r3, r0, #4
 800e060:	e7f1      	b.n	800e046 <__exponent+0x58>
	...

0800e064 <_printf_float>:
 800e064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e068:	b08d      	sub	sp, #52	@ 0x34
 800e06a:	460c      	mov	r4, r1
 800e06c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e070:	4616      	mov	r6, r2
 800e072:	461f      	mov	r7, r3
 800e074:	4605      	mov	r5, r0
 800e076:	f000 fcff 	bl	800ea78 <_localeconv_r>
 800e07a:	6803      	ldr	r3, [r0, #0]
 800e07c:	9304      	str	r3, [sp, #16]
 800e07e:	4618      	mov	r0, r3
 800e080:	f7f2 f92e 	bl	80002e0 <strlen>
 800e084:	2300      	movs	r3, #0
 800e086:	930a      	str	r3, [sp, #40]	@ 0x28
 800e088:	f8d8 3000 	ldr.w	r3, [r8]
 800e08c:	9005      	str	r0, [sp, #20]
 800e08e:	3307      	adds	r3, #7
 800e090:	f023 0307 	bic.w	r3, r3, #7
 800e094:	f103 0208 	add.w	r2, r3, #8
 800e098:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e09c:	f8d4 b000 	ldr.w	fp, [r4]
 800e0a0:	f8c8 2000 	str.w	r2, [r8]
 800e0a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e0a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e0ac:	9307      	str	r3, [sp, #28]
 800e0ae:	f8cd 8018 	str.w	r8, [sp, #24]
 800e0b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e0b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0ba:	4b9c      	ldr	r3, [pc, #624]	@ (800e32c <_printf_float+0x2c8>)
 800e0bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e0c0:	f7f2 fd6c 	bl	8000b9c <__aeabi_dcmpun>
 800e0c4:	bb70      	cbnz	r0, 800e124 <_printf_float+0xc0>
 800e0c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0ca:	4b98      	ldr	r3, [pc, #608]	@ (800e32c <_printf_float+0x2c8>)
 800e0cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e0d0:	f7f2 fd46 	bl	8000b60 <__aeabi_dcmple>
 800e0d4:	bb30      	cbnz	r0, 800e124 <_printf_float+0xc0>
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	2300      	movs	r3, #0
 800e0da:	4640      	mov	r0, r8
 800e0dc:	4649      	mov	r1, r9
 800e0de:	f7f2 fd35 	bl	8000b4c <__aeabi_dcmplt>
 800e0e2:	b110      	cbz	r0, 800e0ea <_printf_float+0x86>
 800e0e4:	232d      	movs	r3, #45	@ 0x2d
 800e0e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0ea:	4a91      	ldr	r2, [pc, #580]	@ (800e330 <_printf_float+0x2cc>)
 800e0ec:	4b91      	ldr	r3, [pc, #580]	@ (800e334 <_printf_float+0x2d0>)
 800e0ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e0f2:	bf94      	ite	ls
 800e0f4:	4690      	movls	r8, r2
 800e0f6:	4698      	movhi	r8, r3
 800e0f8:	2303      	movs	r3, #3
 800e0fa:	6123      	str	r3, [r4, #16]
 800e0fc:	f02b 0304 	bic.w	r3, fp, #4
 800e100:	6023      	str	r3, [r4, #0]
 800e102:	f04f 0900 	mov.w	r9, #0
 800e106:	9700      	str	r7, [sp, #0]
 800e108:	4633      	mov	r3, r6
 800e10a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e10c:	4621      	mov	r1, r4
 800e10e:	4628      	mov	r0, r5
 800e110:	f000 f9d2 	bl	800e4b8 <_printf_common>
 800e114:	3001      	adds	r0, #1
 800e116:	f040 808d 	bne.w	800e234 <_printf_float+0x1d0>
 800e11a:	f04f 30ff 	mov.w	r0, #4294967295
 800e11e:	b00d      	add	sp, #52	@ 0x34
 800e120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e124:	4642      	mov	r2, r8
 800e126:	464b      	mov	r3, r9
 800e128:	4640      	mov	r0, r8
 800e12a:	4649      	mov	r1, r9
 800e12c:	f7f2 fd36 	bl	8000b9c <__aeabi_dcmpun>
 800e130:	b140      	cbz	r0, 800e144 <_printf_float+0xe0>
 800e132:	464b      	mov	r3, r9
 800e134:	2b00      	cmp	r3, #0
 800e136:	bfbc      	itt	lt
 800e138:	232d      	movlt	r3, #45	@ 0x2d
 800e13a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e13e:	4a7e      	ldr	r2, [pc, #504]	@ (800e338 <_printf_float+0x2d4>)
 800e140:	4b7e      	ldr	r3, [pc, #504]	@ (800e33c <_printf_float+0x2d8>)
 800e142:	e7d4      	b.n	800e0ee <_printf_float+0x8a>
 800e144:	6863      	ldr	r3, [r4, #4]
 800e146:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e14a:	9206      	str	r2, [sp, #24]
 800e14c:	1c5a      	adds	r2, r3, #1
 800e14e:	d13b      	bne.n	800e1c8 <_printf_float+0x164>
 800e150:	2306      	movs	r3, #6
 800e152:	6063      	str	r3, [r4, #4]
 800e154:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e158:	2300      	movs	r3, #0
 800e15a:	6022      	str	r2, [r4, #0]
 800e15c:	9303      	str	r3, [sp, #12]
 800e15e:	ab0a      	add	r3, sp, #40	@ 0x28
 800e160:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e164:	ab09      	add	r3, sp, #36	@ 0x24
 800e166:	9300      	str	r3, [sp, #0]
 800e168:	6861      	ldr	r1, [r4, #4]
 800e16a:	ec49 8b10 	vmov	d0, r8, r9
 800e16e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e172:	4628      	mov	r0, r5
 800e174:	f7ff fed6 	bl	800df24 <__cvt>
 800e178:	9b06      	ldr	r3, [sp, #24]
 800e17a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e17c:	2b47      	cmp	r3, #71	@ 0x47
 800e17e:	4680      	mov	r8, r0
 800e180:	d129      	bne.n	800e1d6 <_printf_float+0x172>
 800e182:	1cc8      	adds	r0, r1, #3
 800e184:	db02      	blt.n	800e18c <_printf_float+0x128>
 800e186:	6863      	ldr	r3, [r4, #4]
 800e188:	4299      	cmp	r1, r3
 800e18a:	dd41      	ble.n	800e210 <_printf_float+0x1ac>
 800e18c:	f1aa 0a02 	sub.w	sl, sl, #2
 800e190:	fa5f fa8a 	uxtb.w	sl, sl
 800e194:	3901      	subs	r1, #1
 800e196:	4652      	mov	r2, sl
 800e198:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e19c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e19e:	f7ff ff26 	bl	800dfee <__exponent>
 800e1a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1a4:	1813      	adds	r3, r2, r0
 800e1a6:	2a01      	cmp	r2, #1
 800e1a8:	4681      	mov	r9, r0
 800e1aa:	6123      	str	r3, [r4, #16]
 800e1ac:	dc02      	bgt.n	800e1b4 <_printf_float+0x150>
 800e1ae:	6822      	ldr	r2, [r4, #0]
 800e1b0:	07d2      	lsls	r2, r2, #31
 800e1b2:	d501      	bpl.n	800e1b8 <_printf_float+0x154>
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	6123      	str	r3, [r4, #16]
 800e1b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d0a2      	beq.n	800e106 <_printf_float+0xa2>
 800e1c0:	232d      	movs	r3, #45	@ 0x2d
 800e1c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1c6:	e79e      	b.n	800e106 <_printf_float+0xa2>
 800e1c8:	9a06      	ldr	r2, [sp, #24]
 800e1ca:	2a47      	cmp	r2, #71	@ 0x47
 800e1cc:	d1c2      	bne.n	800e154 <_printf_float+0xf0>
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d1c0      	bne.n	800e154 <_printf_float+0xf0>
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	e7bd      	b.n	800e152 <_printf_float+0xee>
 800e1d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e1da:	d9db      	bls.n	800e194 <_printf_float+0x130>
 800e1dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e1e0:	d118      	bne.n	800e214 <_printf_float+0x1b0>
 800e1e2:	2900      	cmp	r1, #0
 800e1e4:	6863      	ldr	r3, [r4, #4]
 800e1e6:	dd0b      	ble.n	800e200 <_printf_float+0x19c>
 800e1e8:	6121      	str	r1, [r4, #16]
 800e1ea:	b913      	cbnz	r3, 800e1f2 <_printf_float+0x18e>
 800e1ec:	6822      	ldr	r2, [r4, #0]
 800e1ee:	07d0      	lsls	r0, r2, #31
 800e1f0:	d502      	bpl.n	800e1f8 <_printf_float+0x194>
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	440b      	add	r3, r1
 800e1f6:	6123      	str	r3, [r4, #16]
 800e1f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e1fa:	f04f 0900 	mov.w	r9, #0
 800e1fe:	e7db      	b.n	800e1b8 <_printf_float+0x154>
 800e200:	b913      	cbnz	r3, 800e208 <_printf_float+0x1a4>
 800e202:	6822      	ldr	r2, [r4, #0]
 800e204:	07d2      	lsls	r2, r2, #31
 800e206:	d501      	bpl.n	800e20c <_printf_float+0x1a8>
 800e208:	3302      	adds	r3, #2
 800e20a:	e7f4      	b.n	800e1f6 <_printf_float+0x192>
 800e20c:	2301      	movs	r3, #1
 800e20e:	e7f2      	b.n	800e1f6 <_printf_float+0x192>
 800e210:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e216:	4299      	cmp	r1, r3
 800e218:	db05      	blt.n	800e226 <_printf_float+0x1c2>
 800e21a:	6823      	ldr	r3, [r4, #0]
 800e21c:	6121      	str	r1, [r4, #16]
 800e21e:	07d8      	lsls	r0, r3, #31
 800e220:	d5ea      	bpl.n	800e1f8 <_printf_float+0x194>
 800e222:	1c4b      	adds	r3, r1, #1
 800e224:	e7e7      	b.n	800e1f6 <_printf_float+0x192>
 800e226:	2900      	cmp	r1, #0
 800e228:	bfd4      	ite	le
 800e22a:	f1c1 0202 	rsble	r2, r1, #2
 800e22e:	2201      	movgt	r2, #1
 800e230:	4413      	add	r3, r2
 800e232:	e7e0      	b.n	800e1f6 <_printf_float+0x192>
 800e234:	6823      	ldr	r3, [r4, #0]
 800e236:	055a      	lsls	r2, r3, #21
 800e238:	d407      	bmi.n	800e24a <_printf_float+0x1e6>
 800e23a:	6923      	ldr	r3, [r4, #16]
 800e23c:	4642      	mov	r2, r8
 800e23e:	4631      	mov	r1, r6
 800e240:	4628      	mov	r0, r5
 800e242:	47b8      	blx	r7
 800e244:	3001      	adds	r0, #1
 800e246:	d12b      	bne.n	800e2a0 <_printf_float+0x23c>
 800e248:	e767      	b.n	800e11a <_printf_float+0xb6>
 800e24a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e24e:	f240 80dd 	bls.w	800e40c <_printf_float+0x3a8>
 800e252:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e256:	2200      	movs	r2, #0
 800e258:	2300      	movs	r3, #0
 800e25a:	f7f2 fc6d 	bl	8000b38 <__aeabi_dcmpeq>
 800e25e:	2800      	cmp	r0, #0
 800e260:	d033      	beq.n	800e2ca <_printf_float+0x266>
 800e262:	4a37      	ldr	r2, [pc, #220]	@ (800e340 <_printf_float+0x2dc>)
 800e264:	2301      	movs	r3, #1
 800e266:	4631      	mov	r1, r6
 800e268:	4628      	mov	r0, r5
 800e26a:	47b8      	blx	r7
 800e26c:	3001      	adds	r0, #1
 800e26e:	f43f af54 	beq.w	800e11a <_printf_float+0xb6>
 800e272:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e276:	4543      	cmp	r3, r8
 800e278:	db02      	blt.n	800e280 <_printf_float+0x21c>
 800e27a:	6823      	ldr	r3, [r4, #0]
 800e27c:	07d8      	lsls	r0, r3, #31
 800e27e:	d50f      	bpl.n	800e2a0 <_printf_float+0x23c>
 800e280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e284:	4631      	mov	r1, r6
 800e286:	4628      	mov	r0, r5
 800e288:	47b8      	blx	r7
 800e28a:	3001      	adds	r0, #1
 800e28c:	f43f af45 	beq.w	800e11a <_printf_float+0xb6>
 800e290:	f04f 0900 	mov.w	r9, #0
 800e294:	f108 38ff 	add.w	r8, r8, #4294967295
 800e298:	f104 0a1a 	add.w	sl, r4, #26
 800e29c:	45c8      	cmp	r8, r9
 800e29e:	dc09      	bgt.n	800e2b4 <_printf_float+0x250>
 800e2a0:	6823      	ldr	r3, [r4, #0]
 800e2a2:	079b      	lsls	r3, r3, #30
 800e2a4:	f100 8103 	bmi.w	800e4ae <_printf_float+0x44a>
 800e2a8:	68e0      	ldr	r0, [r4, #12]
 800e2aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2ac:	4298      	cmp	r0, r3
 800e2ae:	bfb8      	it	lt
 800e2b0:	4618      	movlt	r0, r3
 800e2b2:	e734      	b.n	800e11e <_printf_float+0xba>
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	4652      	mov	r2, sl
 800e2b8:	4631      	mov	r1, r6
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	47b8      	blx	r7
 800e2be:	3001      	adds	r0, #1
 800e2c0:	f43f af2b 	beq.w	800e11a <_printf_float+0xb6>
 800e2c4:	f109 0901 	add.w	r9, r9, #1
 800e2c8:	e7e8      	b.n	800e29c <_printf_float+0x238>
 800e2ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	dc39      	bgt.n	800e344 <_printf_float+0x2e0>
 800e2d0:	4a1b      	ldr	r2, [pc, #108]	@ (800e340 <_printf_float+0x2dc>)
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	4631      	mov	r1, r6
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	47b8      	blx	r7
 800e2da:	3001      	adds	r0, #1
 800e2dc:	f43f af1d 	beq.w	800e11a <_printf_float+0xb6>
 800e2e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e2e4:	ea59 0303 	orrs.w	r3, r9, r3
 800e2e8:	d102      	bne.n	800e2f0 <_printf_float+0x28c>
 800e2ea:	6823      	ldr	r3, [r4, #0]
 800e2ec:	07d9      	lsls	r1, r3, #31
 800e2ee:	d5d7      	bpl.n	800e2a0 <_printf_float+0x23c>
 800e2f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2f4:	4631      	mov	r1, r6
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	47b8      	blx	r7
 800e2fa:	3001      	adds	r0, #1
 800e2fc:	f43f af0d 	beq.w	800e11a <_printf_float+0xb6>
 800e300:	f04f 0a00 	mov.w	sl, #0
 800e304:	f104 0b1a 	add.w	fp, r4, #26
 800e308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e30a:	425b      	negs	r3, r3
 800e30c:	4553      	cmp	r3, sl
 800e30e:	dc01      	bgt.n	800e314 <_printf_float+0x2b0>
 800e310:	464b      	mov	r3, r9
 800e312:	e793      	b.n	800e23c <_printf_float+0x1d8>
 800e314:	2301      	movs	r3, #1
 800e316:	465a      	mov	r2, fp
 800e318:	4631      	mov	r1, r6
 800e31a:	4628      	mov	r0, r5
 800e31c:	47b8      	blx	r7
 800e31e:	3001      	adds	r0, #1
 800e320:	f43f aefb 	beq.w	800e11a <_printf_float+0xb6>
 800e324:	f10a 0a01 	add.w	sl, sl, #1
 800e328:	e7ee      	b.n	800e308 <_printf_float+0x2a4>
 800e32a:	bf00      	nop
 800e32c:	7fefffff 	.word	0x7fefffff
 800e330:	08011fb8 	.word	0x08011fb8
 800e334:	08011fbc 	.word	0x08011fbc
 800e338:	08011fc0 	.word	0x08011fc0
 800e33c:	08011fc4 	.word	0x08011fc4
 800e340:	08011fc8 	.word	0x08011fc8
 800e344:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e346:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e34a:	4553      	cmp	r3, sl
 800e34c:	bfa8      	it	ge
 800e34e:	4653      	movge	r3, sl
 800e350:	2b00      	cmp	r3, #0
 800e352:	4699      	mov	r9, r3
 800e354:	dc36      	bgt.n	800e3c4 <_printf_float+0x360>
 800e356:	f04f 0b00 	mov.w	fp, #0
 800e35a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e35e:	f104 021a 	add.w	r2, r4, #26
 800e362:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e364:	9306      	str	r3, [sp, #24]
 800e366:	eba3 0309 	sub.w	r3, r3, r9
 800e36a:	455b      	cmp	r3, fp
 800e36c:	dc31      	bgt.n	800e3d2 <_printf_float+0x36e>
 800e36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e370:	459a      	cmp	sl, r3
 800e372:	dc3a      	bgt.n	800e3ea <_printf_float+0x386>
 800e374:	6823      	ldr	r3, [r4, #0]
 800e376:	07da      	lsls	r2, r3, #31
 800e378:	d437      	bmi.n	800e3ea <_printf_float+0x386>
 800e37a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e37c:	ebaa 0903 	sub.w	r9, sl, r3
 800e380:	9b06      	ldr	r3, [sp, #24]
 800e382:	ebaa 0303 	sub.w	r3, sl, r3
 800e386:	4599      	cmp	r9, r3
 800e388:	bfa8      	it	ge
 800e38a:	4699      	movge	r9, r3
 800e38c:	f1b9 0f00 	cmp.w	r9, #0
 800e390:	dc33      	bgt.n	800e3fa <_printf_float+0x396>
 800e392:	f04f 0800 	mov.w	r8, #0
 800e396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e39a:	f104 0b1a 	add.w	fp, r4, #26
 800e39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3a0:	ebaa 0303 	sub.w	r3, sl, r3
 800e3a4:	eba3 0309 	sub.w	r3, r3, r9
 800e3a8:	4543      	cmp	r3, r8
 800e3aa:	f77f af79 	ble.w	800e2a0 <_printf_float+0x23c>
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	465a      	mov	r2, fp
 800e3b2:	4631      	mov	r1, r6
 800e3b4:	4628      	mov	r0, r5
 800e3b6:	47b8      	blx	r7
 800e3b8:	3001      	adds	r0, #1
 800e3ba:	f43f aeae 	beq.w	800e11a <_printf_float+0xb6>
 800e3be:	f108 0801 	add.w	r8, r8, #1
 800e3c2:	e7ec      	b.n	800e39e <_printf_float+0x33a>
 800e3c4:	4642      	mov	r2, r8
 800e3c6:	4631      	mov	r1, r6
 800e3c8:	4628      	mov	r0, r5
 800e3ca:	47b8      	blx	r7
 800e3cc:	3001      	adds	r0, #1
 800e3ce:	d1c2      	bne.n	800e356 <_printf_float+0x2f2>
 800e3d0:	e6a3      	b.n	800e11a <_printf_float+0xb6>
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	4631      	mov	r1, r6
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	9206      	str	r2, [sp, #24]
 800e3da:	47b8      	blx	r7
 800e3dc:	3001      	adds	r0, #1
 800e3de:	f43f ae9c 	beq.w	800e11a <_printf_float+0xb6>
 800e3e2:	9a06      	ldr	r2, [sp, #24]
 800e3e4:	f10b 0b01 	add.w	fp, fp, #1
 800e3e8:	e7bb      	b.n	800e362 <_printf_float+0x2fe>
 800e3ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3ee:	4631      	mov	r1, r6
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	47b8      	blx	r7
 800e3f4:	3001      	adds	r0, #1
 800e3f6:	d1c0      	bne.n	800e37a <_printf_float+0x316>
 800e3f8:	e68f      	b.n	800e11a <_printf_float+0xb6>
 800e3fa:	9a06      	ldr	r2, [sp, #24]
 800e3fc:	464b      	mov	r3, r9
 800e3fe:	4442      	add	r2, r8
 800e400:	4631      	mov	r1, r6
 800e402:	4628      	mov	r0, r5
 800e404:	47b8      	blx	r7
 800e406:	3001      	adds	r0, #1
 800e408:	d1c3      	bne.n	800e392 <_printf_float+0x32e>
 800e40a:	e686      	b.n	800e11a <_printf_float+0xb6>
 800e40c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e410:	f1ba 0f01 	cmp.w	sl, #1
 800e414:	dc01      	bgt.n	800e41a <_printf_float+0x3b6>
 800e416:	07db      	lsls	r3, r3, #31
 800e418:	d536      	bpl.n	800e488 <_printf_float+0x424>
 800e41a:	2301      	movs	r3, #1
 800e41c:	4642      	mov	r2, r8
 800e41e:	4631      	mov	r1, r6
 800e420:	4628      	mov	r0, r5
 800e422:	47b8      	blx	r7
 800e424:	3001      	adds	r0, #1
 800e426:	f43f ae78 	beq.w	800e11a <_printf_float+0xb6>
 800e42a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e42e:	4631      	mov	r1, r6
 800e430:	4628      	mov	r0, r5
 800e432:	47b8      	blx	r7
 800e434:	3001      	adds	r0, #1
 800e436:	f43f ae70 	beq.w	800e11a <_printf_float+0xb6>
 800e43a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e43e:	2200      	movs	r2, #0
 800e440:	2300      	movs	r3, #0
 800e442:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e446:	f7f2 fb77 	bl	8000b38 <__aeabi_dcmpeq>
 800e44a:	b9c0      	cbnz	r0, 800e47e <_printf_float+0x41a>
 800e44c:	4653      	mov	r3, sl
 800e44e:	f108 0201 	add.w	r2, r8, #1
 800e452:	4631      	mov	r1, r6
 800e454:	4628      	mov	r0, r5
 800e456:	47b8      	blx	r7
 800e458:	3001      	adds	r0, #1
 800e45a:	d10c      	bne.n	800e476 <_printf_float+0x412>
 800e45c:	e65d      	b.n	800e11a <_printf_float+0xb6>
 800e45e:	2301      	movs	r3, #1
 800e460:	465a      	mov	r2, fp
 800e462:	4631      	mov	r1, r6
 800e464:	4628      	mov	r0, r5
 800e466:	47b8      	blx	r7
 800e468:	3001      	adds	r0, #1
 800e46a:	f43f ae56 	beq.w	800e11a <_printf_float+0xb6>
 800e46e:	f108 0801 	add.w	r8, r8, #1
 800e472:	45d0      	cmp	r8, sl
 800e474:	dbf3      	blt.n	800e45e <_printf_float+0x3fa>
 800e476:	464b      	mov	r3, r9
 800e478:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e47c:	e6df      	b.n	800e23e <_printf_float+0x1da>
 800e47e:	f04f 0800 	mov.w	r8, #0
 800e482:	f104 0b1a 	add.w	fp, r4, #26
 800e486:	e7f4      	b.n	800e472 <_printf_float+0x40e>
 800e488:	2301      	movs	r3, #1
 800e48a:	4642      	mov	r2, r8
 800e48c:	e7e1      	b.n	800e452 <_printf_float+0x3ee>
 800e48e:	2301      	movs	r3, #1
 800e490:	464a      	mov	r2, r9
 800e492:	4631      	mov	r1, r6
 800e494:	4628      	mov	r0, r5
 800e496:	47b8      	blx	r7
 800e498:	3001      	adds	r0, #1
 800e49a:	f43f ae3e 	beq.w	800e11a <_printf_float+0xb6>
 800e49e:	f108 0801 	add.w	r8, r8, #1
 800e4a2:	68e3      	ldr	r3, [r4, #12]
 800e4a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e4a6:	1a5b      	subs	r3, r3, r1
 800e4a8:	4543      	cmp	r3, r8
 800e4aa:	dcf0      	bgt.n	800e48e <_printf_float+0x42a>
 800e4ac:	e6fc      	b.n	800e2a8 <_printf_float+0x244>
 800e4ae:	f04f 0800 	mov.w	r8, #0
 800e4b2:	f104 0919 	add.w	r9, r4, #25
 800e4b6:	e7f4      	b.n	800e4a2 <_printf_float+0x43e>

0800e4b8 <_printf_common>:
 800e4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4bc:	4616      	mov	r6, r2
 800e4be:	4698      	mov	r8, r3
 800e4c0:	688a      	ldr	r2, [r1, #8]
 800e4c2:	690b      	ldr	r3, [r1, #16]
 800e4c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	bfb8      	it	lt
 800e4cc:	4613      	movlt	r3, r2
 800e4ce:	6033      	str	r3, [r6, #0]
 800e4d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e4d4:	4607      	mov	r7, r0
 800e4d6:	460c      	mov	r4, r1
 800e4d8:	b10a      	cbz	r2, 800e4de <_printf_common+0x26>
 800e4da:	3301      	adds	r3, #1
 800e4dc:	6033      	str	r3, [r6, #0]
 800e4de:	6823      	ldr	r3, [r4, #0]
 800e4e0:	0699      	lsls	r1, r3, #26
 800e4e2:	bf42      	ittt	mi
 800e4e4:	6833      	ldrmi	r3, [r6, #0]
 800e4e6:	3302      	addmi	r3, #2
 800e4e8:	6033      	strmi	r3, [r6, #0]
 800e4ea:	6825      	ldr	r5, [r4, #0]
 800e4ec:	f015 0506 	ands.w	r5, r5, #6
 800e4f0:	d106      	bne.n	800e500 <_printf_common+0x48>
 800e4f2:	f104 0a19 	add.w	sl, r4, #25
 800e4f6:	68e3      	ldr	r3, [r4, #12]
 800e4f8:	6832      	ldr	r2, [r6, #0]
 800e4fa:	1a9b      	subs	r3, r3, r2
 800e4fc:	42ab      	cmp	r3, r5
 800e4fe:	dc26      	bgt.n	800e54e <_printf_common+0x96>
 800e500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e504:	6822      	ldr	r2, [r4, #0]
 800e506:	3b00      	subs	r3, #0
 800e508:	bf18      	it	ne
 800e50a:	2301      	movne	r3, #1
 800e50c:	0692      	lsls	r2, r2, #26
 800e50e:	d42b      	bmi.n	800e568 <_printf_common+0xb0>
 800e510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e514:	4641      	mov	r1, r8
 800e516:	4638      	mov	r0, r7
 800e518:	47c8      	blx	r9
 800e51a:	3001      	adds	r0, #1
 800e51c:	d01e      	beq.n	800e55c <_printf_common+0xa4>
 800e51e:	6823      	ldr	r3, [r4, #0]
 800e520:	6922      	ldr	r2, [r4, #16]
 800e522:	f003 0306 	and.w	r3, r3, #6
 800e526:	2b04      	cmp	r3, #4
 800e528:	bf02      	ittt	eq
 800e52a:	68e5      	ldreq	r5, [r4, #12]
 800e52c:	6833      	ldreq	r3, [r6, #0]
 800e52e:	1aed      	subeq	r5, r5, r3
 800e530:	68a3      	ldr	r3, [r4, #8]
 800e532:	bf0c      	ite	eq
 800e534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e538:	2500      	movne	r5, #0
 800e53a:	4293      	cmp	r3, r2
 800e53c:	bfc4      	itt	gt
 800e53e:	1a9b      	subgt	r3, r3, r2
 800e540:	18ed      	addgt	r5, r5, r3
 800e542:	2600      	movs	r6, #0
 800e544:	341a      	adds	r4, #26
 800e546:	42b5      	cmp	r5, r6
 800e548:	d11a      	bne.n	800e580 <_printf_common+0xc8>
 800e54a:	2000      	movs	r0, #0
 800e54c:	e008      	b.n	800e560 <_printf_common+0xa8>
 800e54e:	2301      	movs	r3, #1
 800e550:	4652      	mov	r2, sl
 800e552:	4641      	mov	r1, r8
 800e554:	4638      	mov	r0, r7
 800e556:	47c8      	blx	r9
 800e558:	3001      	adds	r0, #1
 800e55a:	d103      	bne.n	800e564 <_printf_common+0xac>
 800e55c:	f04f 30ff 	mov.w	r0, #4294967295
 800e560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e564:	3501      	adds	r5, #1
 800e566:	e7c6      	b.n	800e4f6 <_printf_common+0x3e>
 800e568:	18e1      	adds	r1, r4, r3
 800e56a:	1c5a      	adds	r2, r3, #1
 800e56c:	2030      	movs	r0, #48	@ 0x30
 800e56e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e572:	4422      	add	r2, r4
 800e574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e57c:	3302      	adds	r3, #2
 800e57e:	e7c7      	b.n	800e510 <_printf_common+0x58>
 800e580:	2301      	movs	r3, #1
 800e582:	4622      	mov	r2, r4
 800e584:	4641      	mov	r1, r8
 800e586:	4638      	mov	r0, r7
 800e588:	47c8      	blx	r9
 800e58a:	3001      	adds	r0, #1
 800e58c:	d0e6      	beq.n	800e55c <_printf_common+0xa4>
 800e58e:	3601      	adds	r6, #1
 800e590:	e7d9      	b.n	800e546 <_printf_common+0x8e>
	...

0800e594 <_printf_i>:
 800e594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e598:	7e0f      	ldrb	r7, [r1, #24]
 800e59a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e59c:	2f78      	cmp	r7, #120	@ 0x78
 800e59e:	4691      	mov	r9, r2
 800e5a0:	4680      	mov	r8, r0
 800e5a2:	460c      	mov	r4, r1
 800e5a4:	469a      	mov	sl, r3
 800e5a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e5aa:	d807      	bhi.n	800e5bc <_printf_i+0x28>
 800e5ac:	2f62      	cmp	r7, #98	@ 0x62
 800e5ae:	d80a      	bhi.n	800e5c6 <_printf_i+0x32>
 800e5b0:	2f00      	cmp	r7, #0
 800e5b2:	f000 80d2 	beq.w	800e75a <_printf_i+0x1c6>
 800e5b6:	2f58      	cmp	r7, #88	@ 0x58
 800e5b8:	f000 80b9 	beq.w	800e72e <_printf_i+0x19a>
 800e5bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e5c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e5c4:	e03a      	b.n	800e63c <_printf_i+0xa8>
 800e5c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e5ca:	2b15      	cmp	r3, #21
 800e5cc:	d8f6      	bhi.n	800e5bc <_printf_i+0x28>
 800e5ce:	a101      	add	r1, pc, #4	@ (adr r1, 800e5d4 <_printf_i+0x40>)
 800e5d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5d4:	0800e62d 	.word	0x0800e62d
 800e5d8:	0800e641 	.word	0x0800e641
 800e5dc:	0800e5bd 	.word	0x0800e5bd
 800e5e0:	0800e5bd 	.word	0x0800e5bd
 800e5e4:	0800e5bd 	.word	0x0800e5bd
 800e5e8:	0800e5bd 	.word	0x0800e5bd
 800e5ec:	0800e641 	.word	0x0800e641
 800e5f0:	0800e5bd 	.word	0x0800e5bd
 800e5f4:	0800e5bd 	.word	0x0800e5bd
 800e5f8:	0800e5bd 	.word	0x0800e5bd
 800e5fc:	0800e5bd 	.word	0x0800e5bd
 800e600:	0800e741 	.word	0x0800e741
 800e604:	0800e66b 	.word	0x0800e66b
 800e608:	0800e6fb 	.word	0x0800e6fb
 800e60c:	0800e5bd 	.word	0x0800e5bd
 800e610:	0800e5bd 	.word	0x0800e5bd
 800e614:	0800e763 	.word	0x0800e763
 800e618:	0800e5bd 	.word	0x0800e5bd
 800e61c:	0800e66b 	.word	0x0800e66b
 800e620:	0800e5bd 	.word	0x0800e5bd
 800e624:	0800e5bd 	.word	0x0800e5bd
 800e628:	0800e703 	.word	0x0800e703
 800e62c:	6833      	ldr	r3, [r6, #0]
 800e62e:	1d1a      	adds	r2, r3, #4
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	6032      	str	r2, [r6, #0]
 800e634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e63c:	2301      	movs	r3, #1
 800e63e:	e09d      	b.n	800e77c <_printf_i+0x1e8>
 800e640:	6833      	ldr	r3, [r6, #0]
 800e642:	6820      	ldr	r0, [r4, #0]
 800e644:	1d19      	adds	r1, r3, #4
 800e646:	6031      	str	r1, [r6, #0]
 800e648:	0606      	lsls	r6, r0, #24
 800e64a:	d501      	bpl.n	800e650 <_printf_i+0xbc>
 800e64c:	681d      	ldr	r5, [r3, #0]
 800e64e:	e003      	b.n	800e658 <_printf_i+0xc4>
 800e650:	0645      	lsls	r5, r0, #25
 800e652:	d5fb      	bpl.n	800e64c <_printf_i+0xb8>
 800e654:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e658:	2d00      	cmp	r5, #0
 800e65a:	da03      	bge.n	800e664 <_printf_i+0xd0>
 800e65c:	232d      	movs	r3, #45	@ 0x2d
 800e65e:	426d      	negs	r5, r5
 800e660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e664:	4859      	ldr	r0, [pc, #356]	@ (800e7cc <_printf_i+0x238>)
 800e666:	230a      	movs	r3, #10
 800e668:	e011      	b.n	800e68e <_printf_i+0xfa>
 800e66a:	6821      	ldr	r1, [r4, #0]
 800e66c:	6833      	ldr	r3, [r6, #0]
 800e66e:	0608      	lsls	r0, r1, #24
 800e670:	f853 5b04 	ldr.w	r5, [r3], #4
 800e674:	d402      	bmi.n	800e67c <_printf_i+0xe8>
 800e676:	0649      	lsls	r1, r1, #25
 800e678:	bf48      	it	mi
 800e67a:	b2ad      	uxthmi	r5, r5
 800e67c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e67e:	4853      	ldr	r0, [pc, #332]	@ (800e7cc <_printf_i+0x238>)
 800e680:	6033      	str	r3, [r6, #0]
 800e682:	bf14      	ite	ne
 800e684:	230a      	movne	r3, #10
 800e686:	2308      	moveq	r3, #8
 800e688:	2100      	movs	r1, #0
 800e68a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e68e:	6866      	ldr	r6, [r4, #4]
 800e690:	60a6      	str	r6, [r4, #8]
 800e692:	2e00      	cmp	r6, #0
 800e694:	bfa2      	ittt	ge
 800e696:	6821      	ldrge	r1, [r4, #0]
 800e698:	f021 0104 	bicge.w	r1, r1, #4
 800e69c:	6021      	strge	r1, [r4, #0]
 800e69e:	b90d      	cbnz	r5, 800e6a4 <_printf_i+0x110>
 800e6a0:	2e00      	cmp	r6, #0
 800e6a2:	d04b      	beq.n	800e73c <_printf_i+0x1a8>
 800e6a4:	4616      	mov	r6, r2
 800e6a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e6aa:	fb03 5711 	mls	r7, r3, r1, r5
 800e6ae:	5dc7      	ldrb	r7, [r0, r7]
 800e6b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e6b4:	462f      	mov	r7, r5
 800e6b6:	42bb      	cmp	r3, r7
 800e6b8:	460d      	mov	r5, r1
 800e6ba:	d9f4      	bls.n	800e6a6 <_printf_i+0x112>
 800e6bc:	2b08      	cmp	r3, #8
 800e6be:	d10b      	bne.n	800e6d8 <_printf_i+0x144>
 800e6c0:	6823      	ldr	r3, [r4, #0]
 800e6c2:	07df      	lsls	r7, r3, #31
 800e6c4:	d508      	bpl.n	800e6d8 <_printf_i+0x144>
 800e6c6:	6923      	ldr	r3, [r4, #16]
 800e6c8:	6861      	ldr	r1, [r4, #4]
 800e6ca:	4299      	cmp	r1, r3
 800e6cc:	bfde      	ittt	le
 800e6ce:	2330      	movle	r3, #48	@ 0x30
 800e6d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e6d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e6d8:	1b92      	subs	r2, r2, r6
 800e6da:	6122      	str	r2, [r4, #16]
 800e6dc:	f8cd a000 	str.w	sl, [sp]
 800e6e0:	464b      	mov	r3, r9
 800e6e2:	aa03      	add	r2, sp, #12
 800e6e4:	4621      	mov	r1, r4
 800e6e6:	4640      	mov	r0, r8
 800e6e8:	f7ff fee6 	bl	800e4b8 <_printf_common>
 800e6ec:	3001      	adds	r0, #1
 800e6ee:	d14a      	bne.n	800e786 <_printf_i+0x1f2>
 800e6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f4:	b004      	add	sp, #16
 800e6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6fa:	6823      	ldr	r3, [r4, #0]
 800e6fc:	f043 0320 	orr.w	r3, r3, #32
 800e700:	6023      	str	r3, [r4, #0]
 800e702:	4833      	ldr	r0, [pc, #204]	@ (800e7d0 <_printf_i+0x23c>)
 800e704:	2778      	movs	r7, #120	@ 0x78
 800e706:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e70a:	6823      	ldr	r3, [r4, #0]
 800e70c:	6831      	ldr	r1, [r6, #0]
 800e70e:	061f      	lsls	r7, r3, #24
 800e710:	f851 5b04 	ldr.w	r5, [r1], #4
 800e714:	d402      	bmi.n	800e71c <_printf_i+0x188>
 800e716:	065f      	lsls	r7, r3, #25
 800e718:	bf48      	it	mi
 800e71a:	b2ad      	uxthmi	r5, r5
 800e71c:	6031      	str	r1, [r6, #0]
 800e71e:	07d9      	lsls	r1, r3, #31
 800e720:	bf44      	itt	mi
 800e722:	f043 0320 	orrmi.w	r3, r3, #32
 800e726:	6023      	strmi	r3, [r4, #0]
 800e728:	b11d      	cbz	r5, 800e732 <_printf_i+0x19e>
 800e72a:	2310      	movs	r3, #16
 800e72c:	e7ac      	b.n	800e688 <_printf_i+0xf4>
 800e72e:	4827      	ldr	r0, [pc, #156]	@ (800e7cc <_printf_i+0x238>)
 800e730:	e7e9      	b.n	800e706 <_printf_i+0x172>
 800e732:	6823      	ldr	r3, [r4, #0]
 800e734:	f023 0320 	bic.w	r3, r3, #32
 800e738:	6023      	str	r3, [r4, #0]
 800e73a:	e7f6      	b.n	800e72a <_printf_i+0x196>
 800e73c:	4616      	mov	r6, r2
 800e73e:	e7bd      	b.n	800e6bc <_printf_i+0x128>
 800e740:	6833      	ldr	r3, [r6, #0]
 800e742:	6825      	ldr	r5, [r4, #0]
 800e744:	6961      	ldr	r1, [r4, #20]
 800e746:	1d18      	adds	r0, r3, #4
 800e748:	6030      	str	r0, [r6, #0]
 800e74a:	062e      	lsls	r6, r5, #24
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	d501      	bpl.n	800e754 <_printf_i+0x1c0>
 800e750:	6019      	str	r1, [r3, #0]
 800e752:	e002      	b.n	800e75a <_printf_i+0x1c6>
 800e754:	0668      	lsls	r0, r5, #25
 800e756:	d5fb      	bpl.n	800e750 <_printf_i+0x1bc>
 800e758:	8019      	strh	r1, [r3, #0]
 800e75a:	2300      	movs	r3, #0
 800e75c:	6123      	str	r3, [r4, #16]
 800e75e:	4616      	mov	r6, r2
 800e760:	e7bc      	b.n	800e6dc <_printf_i+0x148>
 800e762:	6833      	ldr	r3, [r6, #0]
 800e764:	1d1a      	adds	r2, r3, #4
 800e766:	6032      	str	r2, [r6, #0]
 800e768:	681e      	ldr	r6, [r3, #0]
 800e76a:	6862      	ldr	r2, [r4, #4]
 800e76c:	2100      	movs	r1, #0
 800e76e:	4630      	mov	r0, r6
 800e770:	f7f1 fd66 	bl	8000240 <memchr>
 800e774:	b108      	cbz	r0, 800e77a <_printf_i+0x1e6>
 800e776:	1b80      	subs	r0, r0, r6
 800e778:	6060      	str	r0, [r4, #4]
 800e77a:	6863      	ldr	r3, [r4, #4]
 800e77c:	6123      	str	r3, [r4, #16]
 800e77e:	2300      	movs	r3, #0
 800e780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e784:	e7aa      	b.n	800e6dc <_printf_i+0x148>
 800e786:	6923      	ldr	r3, [r4, #16]
 800e788:	4632      	mov	r2, r6
 800e78a:	4649      	mov	r1, r9
 800e78c:	4640      	mov	r0, r8
 800e78e:	47d0      	blx	sl
 800e790:	3001      	adds	r0, #1
 800e792:	d0ad      	beq.n	800e6f0 <_printf_i+0x15c>
 800e794:	6823      	ldr	r3, [r4, #0]
 800e796:	079b      	lsls	r3, r3, #30
 800e798:	d413      	bmi.n	800e7c2 <_printf_i+0x22e>
 800e79a:	68e0      	ldr	r0, [r4, #12]
 800e79c:	9b03      	ldr	r3, [sp, #12]
 800e79e:	4298      	cmp	r0, r3
 800e7a0:	bfb8      	it	lt
 800e7a2:	4618      	movlt	r0, r3
 800e7a4:	e7a6      	b.n	800e6f4 <_printf_i+0x160>
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	4632      	mov	r2, r6
 800e7aa:	4649      	mov	r1, r9
 800e7ac:	4640      	mov	r0, r8
 800e7ae:	47d0      	blx	sl
 800e7b0:	3001      	adds	r0, #1
 800e7b2:	d09d      	beq.n	800e6f0 <_printf_i+0x15c>
 800e7b4:	3501      	adds	r5, #1
 800e7b6:	68e3      	ldr	r3, [r4, #12]
 800e7b8:	9903      	ldr	r1, [sp, #12]
 800e7ba:	1a5b      	subs	r3, r3, r1
 800e7bc:	42ab      	cmp	r3, r5
 800e7be:	dcf2      	bgt.n	800e7a6 <_printf_i+0x212>
 800e7c0:	e7eb      	b.n	800e79a <_printf_i+0x206>
 800e7c2:	2500      	movs	r5, #0
 800e7c4:	f104 0619 	add.w	r6, r4, #25
 800e7c8:	e7f5      	b.n	800e7b6 <_printf_i+0x222>
 800e7ca:	bf00      	nop
 800e7cc:	08011fca 	.word	0x08011fca
 800e7d0:	08011fdb 	.word	0x08011fdb

0800e7d4 <std>:
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	b510      	push	{r4, lr}
 800e7d8:	4604      	mov	r4, r0
 800e7da:	e9c0 3300 	strd	r3, r3, [r0]
 800e7de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7e2:	6083      	str	r3, [r0, #8]
 800e7e4:	8181      	strh	r1, [r0, #12]
 800e7e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800e7e8:	81c2      	strh	r2, [r0, #14]
 800e7ea:	6183      	str	r3, [r0, #24]
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	2208      	movs	r2, #8
 800e7f0:	305c      	adds	r0, #92	@ 0x5c
 800e7f2:	f000 f914 	bl	800ea1e <memset>
 800e7f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e82c <std+0x58>)
 800e7f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800e7fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e830 <std+0x5c>)
 800e7fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e7fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e834 <std+0x60>)
 800e800:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e802:	4b0d      	ldr	r3, [pc, #52]	@ (800e838 <std+0x64>)
 800e804:	6323      	str	r3, [r4, #48]	@ 0x30
 800e806:	4b0d      	ldr	r3, [pc, #52]	@ (800e83c <std+0x68>)
 800e808:	6224      	str	r4, [r4, #32]
 800e80a:	429c      	cmp	r4, r3
 800e80c:	d006      	beq.n	800e81c <std+0x48>
 800e80e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e812:	4294      	cmp	r4, r2
 800e814:	d002      	beq.n	800e81c <std+0x48>
 800e816:	33d0      	adds	r3, #208	@ 0xd0
 800e818:	429c      	cmp	r4, r3
 800e81a:	d105      	bne.n	800e828 <std+0x54>
 800e81c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e824:	f000 b9f2 	b.w	800ec0c <__retarget_lock_init_recursive>
 800e828:	bd10      	pop	{r4, pc}
 800e82a:	bf00      	nop
 800e82c:	0800e999 	.word	0x0800e999
 800e830:	0800e9bb 	.word	0x0800e9bb
 800e834:	0800e9f3 	.word	0x0800e9f3
 800e838:	0800ea17 	.word	0x0800ea17
 800e83c:	20007110 	.word	0x20007110

0800e840 <stdio_exit_handler>:
 800e840:	4a02      	ldr	r2, [pc, #8]	@ (800e84c <stdio_exit_handler+0xc>)
 800e842:	4903      	ldr	r1, [pc, #12]	@ (800e850 <stdio_exit_handler+0x10>)
 800e844:	4803      	ldr	r0, [pc, #12]	@ (800e854 <stdio_exit_handler+0x14>)
 800e846:	f000 b869 	b.w	800e91c <_fwalk_sglue>
 800e84a:	bf00      	nop
 800e84c:	20000424 	.word	0x20000424
 800e850:	08010595 	.word	0x08010595
 800e854:	20000434 	.word	0x20000434

0800e858 <cleanup_stdio>:
 800e858:	6841      	ldr	r1, [r0, #4]
 800e85a:	4b0c      	ldr	r3, [pc, #48]	@ (800e88c <cleanup_stdio+0x34>)
 800e85c:	4299      	cmp	r1, r3
 800e85e:	b510      	push	{r4, lr}
 800e860:	4604      	mov	r4, r0
 800e862:	d001      	beq.n	800e868 <cleanup_stdio+0x10>
 800e864:	f001 fe96 	bl	8010594 <_fflush_r>
 800e868:	68a1      	ldr	r1, [r4, #8]
 800e86a:	4b09      	ldr	r3, [pc, #36]	@ (800e890 <cleanup_stdio+0x38>)
 800e86c:	4299      	cmp	r1, r3
 800e86e:	d002      	beq.n	800e876 <cleanup_stdio+0x1e>
 800e870:	4620      	mov	r0, r4
 800e872:	f001 fe8f 	bl	8010594 <_fflush_r>
 800e876:	68e1      	ldr	r1, [r4, #12]
 800e878:	4b06      	ldr	r3, [pc, #24]	@ (800e894 <cleanup_stdio+0x3c>)
 800e87a:	4299      	cmp	r1, r3
 800e87c:	d004      	beq.n	800e888 <cleanup_stdio+0x30>
 800e87e:	4620      	mov	r0, r4
 800e880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e884:	f001 be86 	b.w	8010594 <_fflush_r>
 800e888:	bd10      	pop	{r4, pc}
 800e88a:	bf00      	nop
 800e88c:	20007110 	.word	0x20007110
 800e890:	20007178 	.word	0x20007178
 800e894:	200071e0 	.word	0x200071e0

0800e898 <global_stdio_init.part.0>:
 800e898:	b510      	push	{r4, lr}
 800e89a:	4b0b      	ldr	r3, [pc, #44]	@ (800e8c8 <global_stdio_init.part.0+0x30>)
 800e89c:	4c0b      	ldr	r4, [pc, #44]	@ (800e8cc <global_stdio_init.part.0+0x34>)
 800e89e:	4a0c      	ldr	r2, [pc, #48]	@ (800e8d0 <global_stdio_init.part.0+0x38>)
 800e8a0:	601a      	str	r2, [r3, #0]
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	2104      	movs	r1, #4
 800e8a8:	f7ff ff94 	bl	800e7d4 <std>
 800e8ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	2109      	movs	r1, #9
 800e8b4:	f7ff ff8e 	bl	800e7d4 <std>
 800e8b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e8bc:	2202      	movs	r2, #2
 800e8be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8c2:	2112      	movs	r1, #18
 800e8c4:	f7ff bf86 	b.w	800e7d4 <std>
 800e8c8:	20007248 	.word	0x20007248
 800e8cc:	20007110 	.word	0x20007110
 800e8d0:	0800e841 	.word	0x0800e841

0800e8d4 <__sfp_lock_acquire>:
 800e8d4:	4801      	ldr	r0, [pc, #4]	@ (800e8dc <__sfp_lock_acquire+0x8>)
 800e8d6:	f000 b99a 	b.w	800ec0e <__retarget_lock_acquire_recursive>
 800e8da:	bf00      	nop
 800e8dc:	20007251 	.word	0x20007251

0800e8e0 <__sfp_lock_release>:
 800e8e0:	4801      	ldr	r0, [pc, #4]	@ (800e8e8 <__sfp_lock_release+0x8>)
 800e8e2:	f000 b995 	b.w	800ec10 <__retarget_lock_release_recursive>
 800e8e6:	bf00      	nop
 800e8e8:	20007251 	.word	0x20007251

0800e8ec <__sinit>:
 800e8ec:	b510      	push	{r4, lr}
 800e8ee:	4604      	mov	r4, r0
 800e8f0:	f7ff fff0 	bl	800e8d4 <__sfp_lock_acquire>
 800e8f4:	6a23      	ldr	r3, [r4, #32]
 800e8f6:	b11b      	cbz	r3, 800e900 <__sinit+0x14>
 800e8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8fc:	f7ff bff0 	b.w	800e8e0 <__sfp_lock_release>
 800e900:	4b04      	ldr	r3, [pc, #16]	@ (800e914 <__sinit+0x28>)
 800e902:	6223      	str	r3, [r4, #32]
 800e904:	4b04      	ldr	r3, [pc, #16]	@ (800e918 <__sinit+0x2c>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1f5      	bne.n	800e8f8 <__sinit+0xc>
 800e90c:	f7ff ffc4 	bl	800e898 <global_stdio_init.part.0>
 800e910:	e7f2      	b.n	800e8f8 <__sinit+0xc>
 800e912:	bf00      	nop
 800e914:	0800e859 	.word	0x0800e859
 800e918:	20007248 	.word	0x20007248

0800e91c <_fwalk_sglue>:
 800e91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e920:	4607      	mov	r7, r0
 800e922:	4688      	mov	r8, r1
 800e924:	4614      	mov	r4, r2
 800e926:	2600      	movs	r6, #0
 800e928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e92c:	f1b9 0901 	subs.w	r9, r9, #1
 800e930:	d505      	bpl.n	800e93e <_fwalk_sglue+0x22>
 800e932:	6824      	ldr	r4, [r4, #0]
 800e934:	2c00      	cmp	r4, #0
 800e936:	d1f7      	bne.n	800e928 <_fwalk_sglue+0xc>
 800e938:	4630      	mov	r0, r6
 800e93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e93e:	89ab      	ldrh	r3, [r5, #12]
 800e940:	2b01      	cmp	r3, #1
 800e942:	d907      	bls.n	800e954 <_fwalk_sglue+0x38>
 800e944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e948:	3301      	adds	r3, #1
 800e94a:	d003      	beq.n	800e954 <_fwalk_sglue+0x38>
 800e94c:	4629      	mov	r1, r5
 800e94e:	4638      	mov	r0, r7
 800e950:	47c0      	blx	r8
 800e952:	4306      	orrs	r6, r0
 800e954:	3568      	adds	r5, #104	@ 0x68
 800e956:	e7e9      	b.n	800e92c <_fwalk_sglue+0x10>

0800e958 <siprintf>:
 800e958:	b40e      	push	{r1, r2, r3}
 800e95a:	b500      	push	{lr}
 800e95c:	b09c      	sub	sp, #112	@ 0x70
 800e95e:	ab1d      	add	r3, sp, #116	@ 0x74
 800e960:	9002      	str	r0, [sp, #8]
 800e962:	9006      	str	r0, [sp, #24]
 800e964:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e968:	4809      	ldr	r0, [pc, #36]	@ (800e990 <siprintf+0x38>)
 800e96a:	9107      	str	r1, [sp, #28]
 800e96c:	9104      	str	r1, [sp, #16]
 800e96e:	4909      	ldr	r1, [pc, #36]	@ (800e994 <siprintf+0x3c>)
 800e970:	f853 2b04 	ldr.w	r2, [r3], #4
 800e974:	9105      	str	r1, [sp, #20]
 800e976:	6800      	ldr	r0, [r0, #0]
 800e978:	9301      	str	r3, [sp, #4]
 800e97a:	a902      	add	r1, sp, #8
 800e97c:	f001 fc8a 	bl	8010294 <_svfiprintf_r>
 800e980:	9b02      	ldr	r3, [sp, #8]
 800e982:	2200      	movs	r2, #0
 800e984:	701a      	strb	r2, [r3, #0]
 800e986:	b01c      	add	sp, #112	@ 0x70
 800e988:	f85d eb04 	ldr.w	lr, [sp], #4
 800e98c:	b003      	add	sp, #12
 800e98e:	4770      	bx	lr
 800e990:	20000430 	.word	0x20000430
 800e994:	ffff0208 	.word	0xffff0208

0800e998 <__sread>:
 800e998:	b510      	push	{r4, lr}
 800e99a:	460c      	mov	r4, r1
 800e99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9a0:	f000 f8e6 	bl	800eb70 <_read_r>
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	bfab      	itete	ge
 800e9a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e9aa:	89a3      	ldrhlt	r3, [r4, #12]
 800e9ac:	181b      	addge	r3, r3, r0
 800e9ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e9b2:	bfac      	ite	ge
 800e9b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e9b6:	81a3      	strhlt	r3, [r4, #12]
 800e9b8:	bd10      	pop	{r4, pc}

0800e9ba <__swrite>:
 800e9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9be:	461f      	mov	r7, r3
 800e9c0:	898b      	ldrh	r3, [r1, #12]
 800e9c2:	05db      	lsls	r3, r3, #23
 800e9c4:	4605      	mov	r5, r0
 800e9c6:	460c      	mov	r4, r1
 800e9c8:	4616      	mov	r6, r2
 800e9ca:	d505      	bpl.n	800e9d8 <__swrite+0x1e>
 800e9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9d0:	2302      	movs	r3, #2
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f000 f8ba 	bl	800eb4c <_lseek_r>
 800e9d8:	89a3      	ldrh	r3, [r4, #12]
 800e9da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e9e2:	81a3      	strh	r3, [r4, #12]
 800e9e4:	4632      	mov	r2, r6
 800e9e6:	463b      	mov	r3, r7
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ee:	f000 b8d1 	b.w	800eb94 <_write_r>

0800e9f2 <__sseek>:
 800e9f2:	b510      	push	{r4, lr}
 800e9f4:	460c      	mov	r4, r1
 800e9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9fa:	f000 f8a7 	bl	800eb4c <_lseek_r>
 800e9fe:	1c43      	adds	r3, r0, #1
 800ea00:	89a3      	ldrh	r3, [r4, #12]
 800ea02:	bf15      	itete	ne
 800ea04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ea06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ea0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ea0e:	81a3      	strheq	r3, [r4, #12]
 800ea10:	bf18      	it	ne
 800ea12:	81a3      	strhne	r3, [r4, #12]
 800ea14:	bd10      	pop	{r4, pc}

0800ea16 <__sclose>:
 800ea16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea1a:	f000 b831 	b.w	800ea80 <_close_r>

0800ea1e <memset>:
 800ea1e:	4402      	add	r2, r0
 800ea20:	4603      	mov	r3, r0
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d100      	bne.n	800ea28 <memset+0xa>
 800ea26:	4770      	bx	lr
 800ea28:	f803 1b01 	strb.w	r1, [r3], #1
 800ea2c:	e7f9      	b.n	800ea22 <memset+0x4>

0800ea2e <strncmp>:
 800ea2e:	b510      	push	{r4, lr}
 800ea30:	b16a      	cbz	r2, 800ea4e <strncmp+0x20>
 800ea32:	3901      	subs	r1, #1
 800ea34:	1884      	adds	r4, r0, r2
 800ea36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea3a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d103      	bne.n	800ea4a <strncmp+0x1c>
 800ea42:	42a0      	cmp	r0, r4
 800ea44:	d001      	beq.n	800ea4a <strncmp+0x1c>
 800ea46:	2a00      	cmp	r2, #0
 800ea48:	d1f5      	bne.n	800ea36 <strncmp+0x8>
 800ea4a:	1ad0      	subs	r0, r2, r3
 800ea4c:	bd10      	pop	{r4, pc}
 800ea4e:	4610      	mov	r0, r2
 800ea50:	e7fc      	b.n	800ea4c <strncmp+0x1e>

0800ea52 <strncpy>:
 800ea52:	b510      	push	{r4, lr}
 800ea54:	3901      	subs	r1, #1
 800ea56:	4603      	mov	r3, r0
 800ea58:	b132      	cbz	r2, 800ea68 <strncpy+0x16>
 800ea5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ea5e:	f803 4b01 	strb.w	r4, [r3], #1
 800ea62:	3a01      	subs	r2, #1
 800ea64:	2c00      	cmp	r4, #0
 800ea66:	d1f7      	bne.n	800ea58 <strncpy+0x6>
 800ea68:	441a      	add	r2, r3
 800ea6a:	2100      	movs	r1, #0
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d100      	bne.n	800ea72 <strncpy+0x20>
 800ea70:	bd10      	pop	{r4, pc}
 800ea72:	f803 1b01 	strb.w	r1, [r3], #1
 800ea76:	e7f9      	b.n	800ea6c <strncpy+0x1a>

0800ea78 <_localeconv_r>:
 800ea78:	4800      	ldr	r0, [pc, #0]	@ (800ea7c <_localeconv_r+0x4>)
 800ea7a:	4770      	bx	lr
 800ea7c:	20000570 	.word	0x20000570

0800ea80 <_close_r>:
 800ea80:	b538      	push	{r3, r4, r5, lr}
 800ea82:	4d06      	ldr	r5, [pc, #24]	@ (800ea9c <_close_r+0x1c>)
 800ea84:	2300      	movs	r3, #0
 800ea86:	4604      	mov	r4, r0
 800ea88:	4608      	mov	r0, r1
 800ea8a:	602b      	str	r3, [r5, #0]
 800ea8c:	f7f3 ff18 	bl	80028c0 <_close>
 800ea90:	1c43      	adds	r3, r0, #1
 800ea92:	d102      	bne.n	800ea9a <_close_r+0x1a>
 800ea94:	682b      	ldr	r3, [r5, #0]
 800ea96:	b103      	cbz	r3, 800ea9a <_close_r+0x1a>
 800ea98:	6023      	str	r3, [r4, #0]
 800ea9a:	bd38      	pop	{r3, r4, r5, pc}
 800ea9c:	2000724c 	.word	0x2000724c

0800eaa0 <_reclaim_reent>:
 800eaa0:	4b29      	ldr	r3, [pc, #164]	@ (800eb48 <_reclaim_reent+0xa8>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4283      	cmp	r3, r0
 800eaa6:	b570      	push	{r4, r5, r6, lr}
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	d04b      	beq.n	800eb44 <_reclaim_reent+0xa4>
 800eaac:	69c3      	ldr	r3, [r0, #28]
 800eaae:	b1ab      	cbz	r3, 800eadc <_reclaim_reent+0x3c>
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	b16b      	cbz	r3, 800ead0 <_reclaim_reent+0x30>
 800eab4:	2500      	movs	r5, #0
 800eab6:	69e3      	ldr	r3, [r4, #28]
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	5959      	ldr	r1, [r3, r5]
 800eabc:	2900      	cmp	r1, #0
 800eabe:	d13b      	bne.n	800eb38 <_reclaim_reent+0x98>
 800eac0:	3504      	adds	r5, #4
 800eac2:	2d80      	cmp	r5, #128	@ 0x80
 800eac4:	d1f7      	bne.n	800eab6 <_reclaim_reent+0x16>
 800eac6:	69e3      	ldr	r3, [r4, #28]
 800eac8:	4620      	mov	r0, r4
 800eaca:	68d9      	ldr	r1, [r3, #12]
 800eacc:	f000 ff04 	bl	800f8d8 <_free_r>
 800ead0:	69e3      	ldr	r3, [r4, #28]
 800ead2:	6819      	ldr	r1, [r3, #0]
 800ead4:	b111      	cbz	r1, 800eadc <_reclaim_reent+0x3c>
 800ead6:	4620      	mov	r0, r4
 800ead8:	f000 fefe 	bl	800f8d8 <_free_r>
 800eadc:	6961      	ldr	r1, [r4, #20]
 800eade:	b111      	cbz	r1, 800eae6 <_reclaim_reent+0x46>
 800eae0:	4620      	mov	r0, r4
 800eae2:	f000 fef9 	bl	800f8d8 <_free_r>
 800eae6:	69e1      	ldr	r1, [r4, #28]
 800eae8:	b111      	cbz	r1, 800eaf0 <_reclaim_reent+0x50>
 800eaea:	4620      	mov	r0, r4
 800eaec:	f000 fef4 	bl	800f8d8 <_free_r>
 800eaf0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800eaf2:	b111      	cbz	r1, 800eafa <_reclaim_reent+0x5a>
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	f000 feef 	bl	800f8d8 <_free_r>
 800eafa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eafc:	b111      	cbz	r1, 800eb04 <_reclaim_reent+0x64>
 800eafe:	4620      	mov	r0, r4
 800eb00:	f000 feea 	bl	800f8d8 <_free_r>
 800eb04:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800eb06:	b111      	cbz	r1, 800eb0e <_reclaim_reent+0x6e>
 800eb08:	4620      	mov	r0, r4
 800eb0a:	f000 fee5 	bl	800f8d8 <_free_r>
 800eb0e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800eb10:	b111      	cbz	r1, 800eb18 <_reclaim_reent+0x78>
 800eb12:	4620      	mov	r0, r4
 800eb14:	f000 fee0 	bl	800f8d8 <_free_r>
 800eb18:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800eb1a:	b111      	cbz	r1, 800eb22 <_reclaim_reent+0x82>
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f000 fedb 	bl	800f8d8 <_free_r>
 800eb22:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800eb24:	b111      	cbz	r1, 800eb2c <_reclaim_reent+0x8c>
 800eb26:	4620      	mov	r0, r4
 800eb28:	f000 fed6 	bl	800f8d8 <_free_r>
 800eb2c:	6a23      	ldr	r3, [r4, #32]
 800eb2e:	b14b      	cbz	r3, 800eb44 <_reclaim_reent+0xa4>
 800eb30:	4620      	mov	r0, r4
 800eb32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb36:	4718      	bx	r3
 800eb38:	680e      	ldr	r6, [r1, #0]
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	f000 fecc 	bl	800f8d8 <_free_r>
 800eb40:	4631      	mov	r1, r6
 800eb42:	e7bb      	b.n	800eabc <_reclaim_reent+0x1c>
 800eb44:	bd70      	pop	{r4, r5, r6, pc}
 800eb46:	bf00      	nop
 800eb48:	20000430 	.word	0x20000430

0800eb4c <_lseek_r>:
 800eb4c:	b538      	push	{r3, r4, r5, lr}
 800eb4e:	4d07      	ldr	r5, [pc, #28]	@ (800eb6c <_lseek_r+0x20>)
 800eb50:	4604      	mov	r4, r0
 800eb52:	4608      	mov	r0, r1
 800eb54:	4611      	mov	r1, r2
 800eb56:	2200      	movs	r2, #0
 800eb58:	602a      	str	r2, [r5, #0]
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	f7f3 fed7 	bl	800290e <_lseek>
 800eb60:	1c43      	adds	r3, r0, #1
 800eb62:	d102      	bne.n	800eb6a <_lseek_r+0x1e>
 800eb64:	682b      	ldr	r3, [r5, #0]
 800eb66:	b103      	cbz	r3, 800eb6a <_lseek_r+0x1e>
 800eb68:	6023      	str	r3, [r4, #0]
 800eb6a:	bd38      	pop	{r3, r4, r5, pc}
 800eb6c:	2000724c 	.word	0x2000724c

0800eb70 <_read_r>:
 800eb70:	b538      	push	{r3, r4, r5, lr}
 800eb72:	4d07      	ldr	r5, [pc, #28]	@ (800eb90 <_read_r+0x20>)
 800eb74:	4604      	mov	r4, r0
 800eb76:	4608      	mov	r0, r1
 800eb78:	4611      	mov	r1, r2
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	602a      	str	r2, [r5, #0]
 800eb7e:	461a      	mov	r2, r3
 800eb80:	f7f3 fe65 	bl	800284e <_read>
 800eb84:	1c43      	adds	r3, r0, #1
 800eb86:	d102      	bne.n	800eb8e <_read_r+0x1e>
 800eb88:	682b      	ldr	r3, [r5, #0]
 800eb8a:	b103      	cbz	r3, 800eb8e <_read_r+0x1e>
 800eb8c:	6023      	str	r3, [r4, #0]
 800eb8e:	bd38      	pop	{r3, r4, r5, pc}
 800eb90:	2000724c 	.word	0x2000724c

0800eb94 <_write_r>:
 800eb94:	b538      	push	{r3, r4, r5, lr}
 800eb96:	4d07      	ldr	r5, [pc, #28]	@ (800ebb4 <_write_r+0x20>)
 800eb98:	4604      	mov	r4, r0
 800eb9a:	4608      	mov	r0, r1
 800eb9c:	4611      	mov	r1, r2
 800eb9e:	2200      	movs	r2, #0
 800eba0:	602a      	str	r2, [r5, #0]
 800eba2:	461a      	mov	r2, r3
 800eba4:	f7f3 fe70 	bl	8002888 <_write>
 800eba8:	1c43      	adds	r3, r0, #1
 800ebaa:	d102      	bne.n	800ebb2 <_write_r+0x1e>
 800ebac:	682b      	ldr	r3, [r5, #0]
 800ebae:	b103      	cbz	r3, 800ebb2 <_write_r+0x1e>
 800ebb0:	6023      	str	r3, [r4, #0]
 800ebb2:	bd38      	pop	{r3, r4, r5, pc}
 800ebb4:	2000724c 	.word	0x2000724c

0800ebb8 <__errno>:
 800ebb8:	4b01      	ldr	r3, [pc, #4]	@ (800ebc0 <__errno+0x8>)
 800ebba:	6818      	ldr	r0, [r3, #0]
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	20000430 	.word	0x20000430

0800ebc4 <__libc_init_array>:
 800ebc4:	b570      	push	{r4, r5, r6, lr}
 800ebc6:	4d0d      	ldr	r5, [pc, #52]	@ (800ebfc <__libc_init_array+0x38>)
 800ebc8:	4c0d      	ldr	r4, [pc, #52]	@ (800ec00 <__libc_init_array+0x3c>)
 800ebca:	1b64      	subs	r4, r4, r5
 800ebcc:	10a4      	asrs	r4, r4, #2
 800ebce:	2600      	movs	r6, #0
 800ebd0:	42a6      	cmp	r6, r4
 800ebd2:	d109      	bne.n	800ebe8 <__libc_init_array+0x24>
 800ebd4:	4d0b      	ldr	r5, [pc, #44]	@ (800ec04 <__libc_init_array+0x40>)
 800ebd6:	4c0c      	ldr	r4, [pc, #48]	@ (800ec08 <__libc_init_array+0x44>)
 800ebd8:	f002 fa0c 	bl	8010ff4 <_init>
 800ebdc:	1b64      	subs	r4, r4, r5
 800ebde:	10a4      	asrs	r4, r4, #2
 800ebe0:	2600      	movs	r6, #0
 800ebe2:	42a6      	cmp	r6, r4
 800ebe4:	d105      	bne.n	800ebf2 <__libc_init_array+0x2e>
 800ebe6:	bd70      	pop	{r4, r5, r6, pc}
 800ebe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebec:	4798      	blx	r3
 800ebee:	3601      	adds	r6, #1
 800ebf0:	e7ee      	b.n	800ebd0 <__libc_init_array+0xc>
 800ebf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebf6:	4798      	blx	r3
 800ebf8:	3601      	adds	r6, #1
 800ebfa:	e7f2      	b.n	800ebe2 <__libc_init_array+0x1e>
 800ebfc:	08012368 	.word	0x08012368
 800ec00:	08012368 	.word	0x08012368
 800ec04:	08012368 	.word	0x08012368
 800ec08:	0801236c 	.word	0x0801236c

0800ec0c <__retarget_lock_init_recursive>:
 800ec0c:	4770      	bx	lr

0800ec0e <__retarget_lock_acquire_recursive>:
 800ec0e:	4770      	bx	lr

0800ec10 <__retarget_lock_release_recursive>:
 800ec10:	4770      	bx	lr

0800ec12 <strcpy>:
 800ec12:	4603      	mov	r3, r0
 800ec14:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec18:	f803 2b01 	strb.w	r2, [r3], #1
 800ec1c:	2a00      	cmp	r2, #0
 800ec1e:	d1f9      	bne.n	800ec14 <strcpy+0x2>
 800ec20:	4770      	bx	lr

0800ec22 <memcpy>:
 800ec22:	440a      	add	r2, r1
 800ec24:	4291      	cmp	r1, r2
 800ec26:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec2a:	d100      	bne.n	800ec2e <memcpy+0xc>
 800ec2c:	4770      	bx	lr
 800ec2e:	b510      	push	{r4, lr}
 800ec30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec38:	4291      	cmp	r1, r2
 800ec3a:	d1f9      	bne.n	800ec30 <memcpy+0xe>
 800ec3c:	bd10      	pop	{r4, pc}

0800ec3e <quorem>:
 800ec3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec42:	6903      	ldr	r3, [r0, #16]
 800ec44:	690c      	ldr	r4, [r1, #16]
 800ec46:	42a3      	cmp	r3, r4
 800ec48:	4607      	mov	r7, r0
 800ec4a:	db7e      	blt.n	800ed4a <quorem+0x10c>
 800ec4c:	3c01      	subs	r4, #1
 800ec4e:	f101 0814 	add.w	r8, r1, #20
 800ec52:	00a3      	lsls	r3, r4, #2
 800ec54:	f100 0514 	add.w	r5, r0, #20
 800ec58:	9300      	str	r3, [sp, #0]
 800ec5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec5e:	9301      	str	r3, [sp, #4]
 800ec60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ec64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ec70:	fbb2 f6f3 	udiv	r6, r2, r3
 800ec74:	d32e      	bcc.n	800ecd4 <quorem+0x96>
 800ec76:	f04f 0a00 	mov.w	sl, #0
 800ec7a:	46c4      	mov	ip, r8
 800ec7c:	46ae      	mov	lr, r5
 800ec7e:	46d3      	mov	fp, sl
 800ec80:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ec84:	b298      	uxth	r0, r3
 800ec86:	fb06 a000 	mla	r0, r6, r0, sl
 800ec8a:	0c02      	lsrs	r2, r0, #16
 800ec8c:	0c1b      	lsrs	r3, r3, #16
 800ec8e:	fb06 2303 	mla	r3, r6, r3, r2
 800ec92:	f8de 2000 	ldr.w	r2, [lr]
 800ec96:	b280      	uxth	r0, r0
 800ec98:	b292      	uxth	r2, r2
 800ec9a:	1a12      	subs	r2, r2, r0
 800ec9c:	445a      	add	r2, fp
 800ec9e:	f8de 0000 	ldr.w	r0, [lr]
 800eca2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ecac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ecb0:	b292      	uxth	r2, r2
 800ecb2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ecb6:	45e1      	cmp	r9, ip
 800ecb8:	f84e 2b04 	str.w	r2, [lr], #4
 800ecbc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ecc0:	d2de      	bcs.n	800ec80 <quorem+0x42>
 800ecc2:	9b00      	ldr	r3, [sp, #0]
 800ecc4:	58eb      	ldr	r3, [r5, r3]
 800ecc6:	b92b      	cbnz	r3, 800ecd4 <quorem+0x96>
 800ecc8:	9b01      	ldr	r3, [sp, #4]
 800ecca:	3b04      	subs	r3, #4
 800eccc:	429d      	cmp	r5, r3
 800ecce:	461a      	mov	r2, r3
 800ecd0:	d32f      	bcc.n	800ed32 <quorem+0xf4>
 800ecd2:	613c      	str	r4, [r7, #16]
 800ecd4:	4638      	mov	r0, r7
 800ecd6:	f001 f979 	bl	800ffcc <__mcmp>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	db25      	blt.n	800ed2a <quorem+0xec>
 800ecde:	4629      	mov	r1, r5
 800ece0:	2000      	movs	r0, #0
 800ece2:	f858 2b04 	ldr.w	r2, [r8], #4
 800ece6:	f8d1 c000 	ldr.w	ip, [r1]
 800ecea:	fa1f fe82 	uxth.w	lr, r2
 800ecee:	fa1f f38c 	uxth.w	r3, ip
 800ecf2:	eba3 030e 	sub.w	r3, r3, lr
 800ecf6:	4403      	add	r3, r0
 800ecf8:	0c12      	lsrs	r2, r2, #16
 800ecfa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ecfe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed08:	45c1      	cmp	r9, r8
 800ed0a:	f841 3b04 	str.w	r3, [r1], #4
 800ed0e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ed12:	d2e6      	bcs.n	800ece2 <quorem+0xa4>
 800ed14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed1c:	b922      	cbnz	r2, 800ed28 <quorem+0xea>
 800ed1e:	3b04      	subs	r3, #4
 800ed20:	429d      	cmp	r5, r3
 800ed22:	461a      	mov	r2, r3
 800ed24:	d30b      	bcc.n	800ed3e <quorem+0x100>
 800ed26:	613c      	str	r4, [r7, #16]
 800ed28:	3601      	adds	r6, #1
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	b003      	add	sp, #12
 800ed2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed32:	6812      	ldr	r2, [r2, #0]
 800ed34:	3b04      	subs	r3, #4
 800ed36:	2a00      	cmp	r2, #0
 800ed38:	d1cb      	bne.n	800ecd2 <quorem+0x94>
 800ed3a:	3c01      	subs	r4, #1
 800ed3c:	e7c6      	b.n	800eccc <quorem+0x8e>
 800ed3e:	6812      	ldr	r2, [r2, #0]
 800ed40:	3b04      	subs	r3, #4
 800ed42:	2a00      	cmp	r2, #0
 800ed44:	d1ef      	bne.n	800ed26 <quorem+0xe8>
 800ed46:	3c01      	subs	r4, #1
 800ed48:	e7ea      	b.n	800ed20 <quorem+0xe2>
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	e7ee      	b.n	800ed2c <quorem+0xee>
	...

0800ed50 <_dtoa_r>:
 800ed50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed54:	69c7      	ldr	r7, [r0, #28]
 800ed56:	b099      	sub	sp, #100	@ 0x64
 800ed58:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ed5c:	ec55 4b10 	vmov	r4, r5, d0
 800ed60:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ed62:	9109      	str	r1, [sp, #36]	@ 0x24
 800ed64:	4683      	mov	fp, r0
 800ed66:	920e      	str	r2, [sp, #56]	@ 0x38
 800ed68:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ed6a:	b97f      	cbnz	r7, 800ed8c <_dtoa_r+0x3c>
 800ed6c:	2010      	movs	r0, #16
 800ed6e:	f000 fdfd 	bl	800f96c <malloc>
 800ed72:	4602      	mov	r2, r0
 800ed74:	f8cb 001c 	str.w	r0, [fp, #28]
 800ed78:	b920      	cbnz	r0, 800ed84 <_dtoa_r+0x34>
 800ed7a:	4ba7      	ldr	r3, [pc, #668]	@ (800f018 <_dtoa_r+0x2c8>)
 800ed7c:	21ef      	movs	r1, #239	@ 0xef
 800ed7e:	48a7      	ldr	r0, [pc, #668]	@ (800f01c <_dtoa_r+0x2cc>)
 800ed80:	f001 fc5a 	bl	8010638 <__assert_func>
 800ed84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ed88:	6007      	str	r7, [r0, #0]
 800ed8a:	60c7      	str	r7, [r0, #12]
 800ed8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ed90:	6819      	ldr	r1, [r3, #0]
 800ed92:	b159      	cbz	r1, 800edac <_dtoa_r+0x5c>
 800ed94:	685a      	ldr	r2, [r3, #4]
 800ed96:	604a      	str	r2, [r1, #4]
 800ed98:	2301      	movs	r3, #1
 800ed9a:	4093      	lsls	r3, r2
 800ed9c:	608b      	str	r3, [r1, #8]
 800ed9e:	4658      	mov	r0, fp
 800eda0:	f000 feda 	bl	800fb58 <_Bfree>
 800eda4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800eda8:	2200      	movs	r2, #0
 800edaa:	601a      	str	r2, [r3, #0]
 800edac:	1e2b      	subs	r3, r5, #0
 800edae:	bfb9      	ittee	lt
 800edb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800edb4:	9303      	strlt	r3, [sp, #12]
 800edb6:	2300      	movge	r3, #0
 800edb8:	6033      	strge	r3, [r6, #0]
 800edba:	9f03      	ldr	r7, [sp, #12]
 800edbc:	4b98      	ldr	r3, [pc, #608]	@ (800f020 <_dtoa_r+0x2d0>)
 800edbe:	bfbc      	itt	lt
 800edc0:	2201      	movlt	r2, #1
 800edc2:	6032      	strlt	r2, [r6, #0]
 800edc4:	43bb      	bics	r3, r7
 800edc6:	d112      	bne.n	800edee <_dtoa_r+0x9e>
 800edc8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800edca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800edce:	6013      	str	r3, [r2, #0]
 800edd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800edd4:	4323      	orrs	r3, r4
 800edd6:	f000 854d 	beq.w	800f874 <_dtoa_r+0xb24>
 800edda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eddc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f034 <_dtoa_r+0x2e4>
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	f000 854f 	beq.w	800f884 <_dtoa_r+0xb34>
 800ede6:	f10a 0303 	add.w	r3, sl, #3
 800edea:	f000 bd49 	b.w	800f880 <_dtoa_r+0xb30>
 800edee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800edf2:	2200      	movs	r2, #0
 800edf4:	ec51 0b17 	vmov	r0, r1, d7
 800edf8:	2300      	movs	r3, #0
 800edfa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800edfe:	f7f1 fe9b 	bl	8000b38 <__aeabi_dcmpeq>
 800ee02:	4680      	mov	r8, r0
 800ee04:	b158      	cbz	r0, 800ee1e <_dtoa_r+0xce>
 800ee06:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ee08:	2301      	movs	r3, #1
 800ee0a:	6013      	str	r3, [r2, #0]
 800ee0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ee0e:	b113      	cbz	r3, 800ee16 <_dtoa_r+0xc6>
 800ee10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ee12:	4b84      	ldr	r3, [pc, #528]	@ (800f024 <_dtoa_r+0x2d4>)
 800ee14:	6013      	str	r3, [r2, #0]
 800ee16:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f038 <_dtoa_r+0x2e8>
 800ee1a:	f000 bd33 	b.w	800f884 <_dtoa_r+0xb34>
 800ee1e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ee22:	aa16      	add	r2, sp, #88	@ 0x58
 800ee24:	a917      	add	r1, sp, #92	@ 0x5c
 800ee26:	4658      	mov	r0, fp
 800ee28:	f001 f980 	bl	801012c <__d2b>
 800ee2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ee30:	4681      	mov	r9, r0
 800ee32:	2e00      	cmp	r6, #0
 800ee34:	d077      	beq.n	800ef26 <_dtoa_r+0x1d6>
 800ee36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ee38:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ee3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ee48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ee4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ee50:	4619      	mov	r1, r3
 800ee52:	2200      	movs	r2, #0
 800ee54:	4b74      	ldr	r3, [pc, #464]	@ (800f028 <_dtoa_r+0x2d8>)
 800ee56:	f7f1 fa4f 	bl	80002f8 <__aeabi_dsub>
 800ee5a:	a369      	add	r3, pc, #420	@ (adr r3, 800f000 <_dtoa_r+0x2b0>)
 800ee5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee60:	f7f1 fc02 	bl	8000668 <__aeabi_dmul>
 800ee64:	a368      	add	r3, pc, #416	@ (adr r3, 800f008 <_dtoa_r+0x2b8>)
 800ee66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6a:	f7f1 fa47 	bl	80002fc <__adddf3>
 800ee6e:	4604      	mov	r4, r0
 800ee70:	4630      	mov	r0, r6
 800ee72:	460d      	mov	r5, r1
 800ee74:	f7f1 fb8e 	bl	8000594 <__aeabi_i2d>
 800ee78:	a365      	add	r3, pc, #404	@ (adr r3, 800f010 <_dtoa_r+0x2c0>)
 800ee7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7e:	f7f1 fbf3 	bl	8000668 <__aeabi_dmul>
 800ee82:	4602      	mov	r2, r0
 800ee84:	460b      	mov	r3, r1
 800ee86:	4620      	mov	r0, r4
 800ee88:	4629      	mov	r1, r5
 800ee8a:	f7f1 fa37 	bl	80002fc <__adddf3>
 800ee8e:	4604      	mov	r4, r0
 800ee90:	460d      	mov	r5, r1
 800ee92:	f7f1 fe99 	bl	8000bc8 <__aeabi_d2iz>
 800ee96:	2200      	movs	r2, #0
 800ee98:	4607      	mov	r7, r0
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	4629      	mov	r1, r5
 800eea0:	f7f1 fe54 	bl	8000b4c <__aeabi_dcmplt>
 800eea4:	b140      	cbz	r0, 800eeb8 <_dtoa_r+0x168>
 800eea6:	4638      	mov	r0, r7
 800eea8:	f7f1 fb74 	bl	8000594 <__aeabi_i2d>
 800eeac:	4622      	mov	r2, r4
 800eeae:	462b      	mov	r3, r5
 800eeb0:	f7f1 fe42 	bl	8000b38 <__aeabi_dcmpeq>
 800eeb4:	b900      	cbnz	r0, 800eeb8 <_dtoa_r+0x168>
 800eeb6:	3f01      	subs	r7, #1
 800eeb8:	2f16      	cmp	r7, #22
 800eeba:	d851      	bhi.n	800ef60 <_dtoa_r+0x210>
 800eebc:	4b5b      	ldr	r3, [pc, #364]	@ (800f02c <_dtoa_r+0x2dc>)
 800eebe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eeca:	f7f1 fe3f 	bl	8000b4c <__aeabi_dcmplt>
 800eece:	2800      	cmp	r0, #0
 800eed0:	d048      	beq.n	800ef64 <_dtoa_r+0x214>
 800eed2:	3f01      	subs	r7, #1
 800eed4:	2300      	movs	r3, #0
 800eed6:	9312      	str	r3, [sp, #72]	@ 0x48
 800eed8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800eeda:	1b9b      	subs	r3, r3, r6
 800eedc:	1e5a      	subs	r2, r3, #1
 800eede:	bf44      	itt	mi
 800eee0:	f1c3 0801 	rsbmi	r8, r3, #1
 800eee4:	2300      	movmi	r3, #0
 800eee6:	9208      	str	r2, [sp, #32]
 800eee8:	bf54      	ite	pl
 800eeea:	f04f 0800 	movpl.w	r8, #0
 800eeee:	9308      	strmi	r3, [sp, #32]
 800eef0:	2f00      	cmp	r7, #0
 800eef2:	db39      	blt.n	800ef68 <_dtoa_r+0x218>
 800eef4:	9b08      	ldr	r3, [sp, #32]
 800eef6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800eef8:	443b      	add	r3, r7
 800eefa:	9308      	str	r3, [sp, #32]
 800eefc:	2300      	movs	r3, #0
 800eefe:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef02:	2b09      	cmp	r3, #9
 800ef04:	d864      	bhi.n	800efd0 <_dtoa_r+0x280>
 800ef06:	2b05      	cmp	r3, #5
 800ef08:	bfc4      	itt	gt
 800ef0a:	3b04      	subgt	r3, #4
 800ef0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ef0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef10:	f1a3 0302 	sub.w	r3, r3, #2
 800ef14:	bfcc      	ite	gt
 800ef16:	2400      	movgt	r4, #0
 800ef18:	2401      	movle	r4, #1
 800ef1a:	2b03      	cmp	r3, #3
 800ef1c:	d863      	bhi.n	800efe6 <_dtoa_r+0x296>
 800ef1e:	e8df f003 	tbb	[pc, r3]
 800ef22:	372a      	.short	0x372a
 800ef24:	5535      	.short	0x5535
 800ef26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ef2a:	441e      	add	r6, r3
 800ef2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ef30:	2b20      	cmp	r3, #32
 800ef32:	bfc1      	itttt	gt
 800ef34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ef38:	409f      	lslgt	r7, r3
 800ef3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ef3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ef42:	bfd6      	itet	le
 800ef44:	f1c3 0320 	rsble	r3, r3, #32
 800ef48:	ea47 0003 	orrgt.w	r0, r7, r3
 800ef4c:	fa04 f003 	lslle.w	r0, r4, r3
 800ef50:	f7f1 fb10 	bl	8000574 <__aeabi_ui2d>
 800ef54:	2201      	movs	r2, #1
 800ef56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ef5a:	3e01      	subs	r6, #1
 800ef5c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ef5e:	e777      	b.n	800ee50 <_dtoa_r+0x100>
 800ef60:	2301      	movs	r3, #1
 800ef62:	e7b8      	b.n	800eed6 <_dtoa_r+0x186>
 800ef64:	9012      	str	r0, [sp, #72]	@ 0x48
 800ef66:	e7b7      	b.n	800eed8 <_dtoa_r+0x188>
 800ef68:	427b      	negs	r3, r7
 800ef6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	eba8 0807 	sub.w	r8, r8, r7
 800ef72:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef74:	e7c4      	b.n	800ef00 <_dtoa_r+0x1b0>
 800ef76:	2300      	movs	r3, #0
 800ef78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	dc35      	bgt.n	800efec <_dtoa_r+0x29c>
 800ef80:	2301      	movs	r3, #1
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	9307      	str	r3, [sp, #28]
 800ef86:	461a      	mov	r2, r3
 800ef88:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef8a:	e00b      	b.n	800efa4 <_dtoa_r+0x254>
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	e7f3      	b.n	800ef78 <_dtoa_r+0x228>
 800ef90:	2300      	movs	r3, #0
 800ef92:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef96:	18fb      	adds	r3, r7, r3
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	9307      	str	r3, [sp, #28]
 800efa0:	bfb8      	it	lt
 800efa2:	2301      	movlt	r3, #1
 800efa4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800efa8:	2100      	movs	r1, #0
 800efaa:	2204      	movs	r2, #4
 800efac:	f102 0514 	add.w	r5, r2, #20
 800efb0:	429d      	cmp	r5, r3
 800efb2:	d91f      	bls.n	800eff4 <_dtoa_r+0x2a4>
 800efb4:	6041      	str	r1, [r0, #4]
 800efb6:	4658      	mov	r0, fp
 800efb8:	f000 fd8e 	bl	800fad8 <_Balloc>
 800efbc:	4682      	mov	sl, r0
 800efbe:	2800      	cmp	r0, #0
 800efc0:	d13c      	bne.n	800f03c <_dtoa_r+0x2ec>
 800efc2:	4b1b      	ldr	r3, [pc, #108]	@ (800f030 <_dtoa_r+0x2e0>)
 800efc4:	4602      	mov	r2, r0
 800efc6:	f240 11af 	movw	r1, #431	@ 0x1af
 800efca:	e6d8      	b.n	800ed7e <_dtoa_r+0x2e>
 800efcc:	2301      	movs	r3, #1
 800efce:	e7e0      	b.n	800ef92 <_dtoa_r+0x242>
 800efd0:	2401      	movs	r4, #1
 800efd2:	2300      	movs	r3, #0
 800efd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800efd6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800efd8:	f04f 33ff 	mov.w	r3, #4294967295
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	9307      	str	r3, [sp, #28]
 800efe0:	2200      	movs	r2, #0
 800efe2:	2312      	movs	r3, #18
 800efe4:	e7d0      	b.n	800ef88 <_dtoa_r+0x238>
 800efe6:	2301      	movs	r3, #1
 800efe8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800efea:	e7f5      	b.n	800efd8 <_dtoa_r+0x288>
 800efec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	9307      	str	r3, [sp, #28]
 800eff2:	e7d7      	b.n	800efa4 <_dtoa_r+0x254>
 800eff4:	3101      	adds	r1, #1
 800eff6:	0052      	lsls	r2, r2, #1
 800eff8:	e7d8      	b.n	800efac <_dtoa_r+0x25c>
 800effa:	bf00      	nop
 800effc:	f3af 8000 	nop.w
 800f000:	636f4361 	.word	0x636f4361
 800f004:	3fd287a7 	.word	0x3fd287a7
 800f008:	8b60c8b3 	.word	0x8b60c8b3
 800f00c:	3fc68a28 	.word	0x3fc68a28
 800f010:	509f79fb 	.word	0x509f79fb
 800f014:	3fd34413 	.word	0x3fd34413
 800f018:	08011ff9 	.word	0x08011ff9
 800f01c:	08012010 	.word	0x08012010
 800f020:	7ff00000 	.word	0x7ff00000
 800f024:	08011fc9 	.word	0x08011fc9
 800f028:	3ff80000 	.word	0x3ff80000
 800f02c:	08012108 	.word	0x08012108
 800f030:	08012068 	.word	0x08012068
 800f034:	08011ff5 	.word	0x08011ff5
 800f038:	08011fc8 	.word	0x08011fc8
 800f03c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f040:	6018      	str	r0, [r3, #0]
 800f042:	9b07      	ldr	r3, [sp, #28]
 800f044:	2b0e      	cmp	r3, #14
 800f046:	f200 80a4 	bhi.w	800f192 <_dtoa_r+0x442>
 800f04a:	2c00      	cmp	r4, #0
 800f04c:	f000 80a1 	beq.w	800f192 <_dtoa_r+0x442>
 800f050:	2f00      	cmp	r7, #0
 800f052:	dd33      	ble.n	800f0bc <_dtoa_r+0x36c>
 800f054:	4bad      	ldr	r3, [pc, #692]	@ (800f30c <_dtoa_r+0x5bc>)
 800f056:	f007 020f 	and.w	r2, r7, #15
 800f05a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f05e:	ed93 7b00 	vldr	d7, [r3]
 800f062:	05f8      	lsls	r0, r7, #23
 800f064:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f068:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f06c:	d516      	bpl.n	800f09c <_dtoa_r+0x34c>
 800f06e:	4ba8      	ldr	r3, [pc, #672]	@ (800f310 <_dtoa_r+0x5c0>)
 800f070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f074:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f078:	f7f1 fc20 	bl	80008bc <__aeabi_ddiv>
 800f07c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f080:	f004 040f 	and.w	r4, r4, #15
 800f084:	2603      	movs	r6, #3
 800f086:	4da2      	ldr	r5, [pc, #648]	@ (800f310 <_dtoa_r+0x5c0>)
 800f088:	b954      	cbnz	r4, 800f0a0 <_dtoa_r+0x350>
 800f08a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f092:	f7f1 fc13 	bl	80008bc <__aeabi_ddiv>
 800f096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f09a:	e028      	b.n	800f0ee <_dtoa_r+0x39e>
 800f09c:	2602      	movs	r6, #2
 800f09e:	e7f2      	b.n	800f086 <_dtoa_r+0x336>
 800f0a0:	07e1      	lsls	r1, r4, #31
 800f0a2:	d508      	bpl.n	800f0b6 <_dtoa_r+0x366>
 800f0a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f0ac:	f7f1 fadc 	bl	8000668 <__aeabi_dmul>
 800f0b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0b4:	3601      	adds	r6, #1
 800f0b6:	1064      	asrs	r4, r4, #1
 800f0b8:	3508      	adds	r5, #8
 800f0ba:	e7e5      	b.n	800f088 <_dtoa_r+0x338>
 800f0bc:	f000 80d2 	beq.w	800f264 <_dtoa_r+0x514>
 800f0c0:	427c      	negs	r4, r7
 800f0c2:	4b92      	ldr	r3, [pc, #584]	@ (800f30c <_dtoa_r+0x5bc>)
 800f0c4:	4d92      	ldr	r5, [pc, #584]	@ (800f310 <_dtoa_r+0x5c0>)
 800f0c6:	f004 020f 	and.w	r2, r4, #15
 800f0ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0d6:	f7f1 fac7 	bl	8000668 <__aeabi_dmul>
 800f0da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0de:	1124      	asrs	r4, r4, #4
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	2602      	movs	r6, #2
 800f0e4:	2c00      	cmp	r4, #0
 800f0e6:	f040 80b2 	bne.w	800f24e <_dtoa_r+0x4fe>
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1d3      	bne.n	800f096 <_dtoa_r+0x346>
 800f0ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f0f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	f000 80b7 	beq.w	800f268 <_dtoa_r+0x518>
 800f0fa:	4b86      	ldr	r3, [pc, #536]	@ (800f314 <_dtoa_r+0x5c4>)
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	4620      	mov	r0, r4
 800f100:	4629      	mov	r1, r5
 800f102:	f7f1 fd23 	bl	8000b4c <__aeabi_dcmplt>
 800f106:	2800      	cmp	r0, #0
 800f108:	f000 80ae 	beq.w	800f268 <_dtoa_r+0x518>
 800f10c:	9b07      	ldr	r3, [sp, #28]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	f000 80aa 	beq.w	800f268 <_dtoa_r+0x518>
 800f114:	9b00      	ldr	r3, [sp, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	dd37      	ble.n	800f18a <_dtoa_r+0x43a>
 800f11a:	1e7b      	subs	r3, r7, #1
 800f11c:	9304      	str	r3, [sp, #16]
 800f11e:	4620      	mov	r0, r4
 800f120:	4b7d      	ldr	r3, [pc, #500]	@ (800f318 <_dtoa_r+0x5c8>)
 800f122:	2200      	movs	r2, #0
 800f124:	4629      	mov	r1, r5
 800f126:	f7f1 fa9f 	bl	8000668 <__aeabi_dmul>
 800f12a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f12e:	9c00      	ldr	r4, [sp, #0]
 800f130:	3601      	adds	r6, #1
 800f132:	4630      	mov	r0, r6
 800f134:	f7f1 fa2e 	bl	8000594 <__aeabi_i2d>
 800f138:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f13c:	f7f1 fa94 	bl	8000668 <__aeabi_dmul>
 800f140:	4b76      	ldr	r3, [pc, #472]	@ (800f31c <_dtoa_r+0x5cc>)
 800f142:	2200      	movs	r2, #0
 800f144:	f7f1 f8da 	bl	80002fc <__adddf3>
 800f148:	4605      	mov	r5, r0
 800f14a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f14e:	2c00      	cmp	r4, #0
 800f150:	f040 808d 	bne.w	800f26e <_dtoa_r+0x51e>
 800f154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f158:	4b71      	ldr	r3, [pc, #452]	@ (800f320 <_dtoa_r+0x5d0>)
 800f15a:	2200      	movs	r2, #0
 800f15c:	f7f1 f8cc 	bl	80002f8 <__aeabi_dsub>
 800f160:	4602      	mov	r2, r0
 800f162:	460b      	mov	r3, r1
 800f164:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f168:	462a      	mov	r2, r5
 800f16a:	4633      	mov	r3, r6
 800f16c:	f7f1 fd0c 	bl	8000b88 <__aeabi_dcmpgt>
 800f170:	2800      	cmp	r0, #0
 800f172:	f040 828b 	bne.w	800f68c <_dtoa_r+0x93c>
 800f176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f17a:	462a      	mov	r2, r5
 800f17c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f180:	f7f1 fce4 	bl	8000b4c <__aeabi_dcmplt>
 800f184:	2800      	cmp	r0, #0
 800f186:	f040 8128 	bne.w	800f3da <_dtoa_r+0x68a>
 800f18a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f18e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f192:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f194:	2b00      	cmp	r3, #0
 800f196:	f2c0 815a 	blt.w	800f44e <_dtoa_r+0x6fe>
 800f19a:	2f0e      	cmp	r7, #14
 800f19c:	f300 8157 	bgt.w	800f44e <_dtoa_r+0x6fe>
 800f1a0:	4b5a      	ldr	r3, [pc, #360]	@ (800f30c <_dtoa_r+0x5bc>)
 800f1a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f1a6:	ed93 7b00 	vldr	d7, [r3]
 800f1aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	ed8d 7b00 	vstr	d7, [sp]
 800f1b2:	da03      	bge.n	800f1bc <_dtoa_r+0x46c>
 800f1b4:	9b07      	ldr	r3, [sp, #28]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f340 8101 	ble.w	800f3be <_dtoa_r+0x66e>
 800f1bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f1c0:	4656      	mov	r6, sl
 800f1c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	4629      	mov	r1, r5
 800f1ca:	f7f1 fb77 	bl	80008bc <__aeabi_ddiv>
 800f1ce:	f7f1 fcfb 	bl	8000bc8 <__aeabi_d2iz>
 800f1d2:	4680      	mov	r8, r0
 800f1d4:	f7f1 f9de 	bl	8000594 <__aeabi_i2d>
 800f1d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1dc:	f7f1 fa44 	bl	8000668 <__aeabi_dmul>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	4629      	mov	r1, r5
 800f1e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f1ec:	f7f1 f884 	bl	80002f8 <__aeabi_dsub>
 800f1f0:	f806 4b01 	strb.w	r4, [r6], #1
 800f1f4:	9d07      	ldr	r5, [sp, #28]
 800f1f6:	eba6 040a 	sub.w	r4, r6, sl
 800f1fa:	42a5      	cmp	r5, r4
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	460b      	mov	r3, r1
 800f200:	f040 8117 	bne.w	800f432 <_dtoa_r+0x6e2>
 800f204:	f7f1 f87a 	bl	80002fc <__adddf3>
 800f208:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f20c:	4604      	mov	r4, r0
 800f20e:	460d      	mov	r5, r1
 800f210:	f7f1 fcba 	bl	8000b88 <__aeabi_dcmpgt>
 800f214:	2800      	cmp	r0, #0
 800f216:	f040 80f9 	bne.w	800f40c <_dtoa_r+0x6bc>
 800f21a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f21e:	4620      	mov	r0, r4
 800f220:	4629      	mov	r1, r5
 800f222:	f7f1 fc89 	bl	8000b38 <__aeabi_dcmpeq>
 800f226:	b118      	cbz	r0, 800f230 <_dtoa_r+0x4e0>
 800f228:	f018 0f01 	tst.w	r8, #1
 800f22c:	f040 80ee 	bne.w	800f40c <_dtoa_r+0x6bc>
 800f230:	4649      	mov	r1, r9
 800f232:	4658      	mov	r0, fp
 800f234:	f000 fc90 	bl	800fb58 <_Bfree>
 800f238:	2300      	movs	r3, #0
 800f23a:	7033      	strb	r3, [r6, #0]
 800f23c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f23e:	3701      	adds	r7, #1
 800f240:	601f      	str	r7, [r3, #0]
 800f242:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f244:	2b00      	cmp	r3, #0
 800f246:	f000 831d 	beq.w	800f884 <_dtoa_r+0xb34>
 800f24a:	601e      	str	r6, [r3, #0]
 800f24c:	e31a      	b.n	800f884 <_dtoa_r+0xb34>
 800f24e:	07e2      	lsls	r2, r4, #31
 800f250:	d505      	bpl.n	800f25e <_dtoa_r+0x50e>
 800f252:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f256:	f7f1 fa07 	bl	8000668 <__aeabi_dmul>
 800f25a:	3601      	adds	r6, #1
 800f25c:	2301      	movs	r3, #1
 800f25e:	1064      	asrs	r4, r4, #1
 800f260:	3508      	adds	r5, #8
 800f262:	e73f      	b.n	800f0e4 <_dtoa_r+0x394>
 800f264:	2602      	movs	r6, #2
 800f266:	e742      	b.n	800f0ee <_dtoa_r+0x39e>
 800f268:	9c07      	ldr	r4, [sp, #28]
 800f26a:	9704      	str	r7, [sp, #16]
 800f26c:	e761      	b.n	800f132 <_dtoa_r+0x3e2>
 800f26e:	4b27      	ldr	r3, [pc, #156]	@ (800f30c <_dtoa_r+0x5bc>)
 800f270:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f272:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f276:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f27a:	4454      	add	r4, sl
 800f27c:	2900      	cmp	r1, #0
 800f27e:	d053      	beq.n	800f328 <_dtoa_r+0x5d8>
 800f280:	4928      	ldr	r1, [pc, #160]	@ (800f324 <_dtoa_r+0x5d4>)
 800f282:	2000      	movs	r0, #0
 800f284:	f7f1 fb1a 	bl	80008bc <__aeabi_ddiv>
 800f288:	4633      	mov	r3, r6
 800f28a:	462a      	mov	r2, r5
 800f28c:	f7f1 f834 	bl	80002f8 <__aeabi_dsub>
 800f290:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f294:	4656      	mov	r6, sl
 800f296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f29a:	f7f1 fc95 	bl	8000bc8 <__aeabi_d2iz>
 800f29e:	4605      	mov	r5, r0
 800f2a0:	f7f1 f978 	bl	8000594 <__aeabi_i2d>
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	460b      	mov	r3, r1
 800f2a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2ac:	f7f1 f824 	bl	80002f8 <__aeabi_dsub>
 800f2b0:	3530      	adds	r5, #48	@ 0x30
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f2ba:	f806 5b01 	strb.w	r5, [r6], #1
 800f2be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f2c2:	f7f1 fc43 	bl	8000b4c <__aeabi_dcmplt>
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	d171      	bne.n	800f3ae <_dtoa_r+0x65e>
 800f2ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f2ce:	4911      	ldr	r1, [pc, #68]	@ (800f314 <_dtoa_r+0x5c4>)
 800f2d0:	2000      	movs	r0, #0
 800f2d2:	f7f1 f811 	bl	80002f8 <__aeabi_dsub>
 800f2d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f2da:	f7f1 fc37 	bl	8000b4c <__aeabi_dcmplt>
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	f040 8095 	bne.w	800f40e <_dtoa_r+0x6be>
 800f2e4:	42a6      	cmp	r6, r4
 800f2e6:	f43f af50 	beq.w	800f18a <_dtoa_r+0x43a>
 800f2ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f2ee:	4b0a      	ldr	r3, [pc, #40]	@ (800f318 <_dtoa_r+0x5c8>)
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	f7f1 f9b9 	bl	8000668 <__aeabi_dmul>
 800f2f6:	4b08      	ldr	r3, [pc, #32]	@ (800f318 <_dtoa_r+0x5c8>)
 800f2f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f302:	f7f1 f9b1 	bl	8000668 <__aeabi_dmul>
 800f306:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f30a:	e7c4      	b.n	800f296 <_dtoa_r+0x546>
 800f30c:	08012108 	.word	0x08012108
 800f310:	080120e0 	.word	0x080120e0
 800f314:	3ff00000 	.word	0x3ff00000
 800f318:	40240000 	.word	0x40240000
 800f31c:	401c0000 	.word	0x401c0000
 800f320:	40140000 	.word	0x40140000
 800f324:	3fe00000 	.word	0x3fe00000
 800f328:	4631      	mov	r1, r6
 800f32a:	4628      	mov	r0, r5
 800f32c:	f7f1 f99c 	bl	8000668 <__aeabi_dmul>
 800f330:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f334:	9415      	str	r4, [sp, #84]	@ 0x54
 800f336:	4656      	mov	r6, sl
 800f338:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f33c:	f7f1 fc44 	bl	8000bc8 <__aeabi_d2iz>
 800f340:	4605      	mov	r5, r0
 800f342:	f7f1 f927 	bl	8000594 <__aeabi_i2d>
 800f346:	4602      	mov	r2, r0
 800f348:	460b      	mov	r3, r1
 800f34a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f34e:	f7f0 ffd3 	bl	80002f8 <__aeabi_dsub>
 800f352:	3530      	adds	r5, #48	@ 0x30
 800f354:	f806 5b01 	strb.w	r5, [r6], #1
 800f358:	4602      	mov	r2, r0
 800f35a:	460b      	mov	r3, r1
 800f35c:	42a6      	cmp	r6, r4
 800f35e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f362:	f04f 0200 	mov.w	r2, #0
 800f366:	d124      	bne.n	800f3b2 <_dtoa_r+0x662>
 800f368:	4bac      	ldr	r3, [pc, #688]	@ (800f61c <_dtoa_r+0x8cc>)
 800f36a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f36e:	f7f0 ffc5 	bl	80002fc <__adddf3>
 800f372:	4602      	mov	r2, r0
 800f374:	460b      	mov	r3, r1
 800f376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f37a:	f7f1 fc05 	bl	8000b88 <__aeabi_dcmpgt>
 800f37e:	2800      	cmp	r0, #0
 800f380:	d145      	bne.n	800f40e <_dtoa_r+0x6be>
 800f382:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f386:	49a5      	ldr	r1, [pc, #660]	@ (800f61c <_dtoa_r+0x8cc>)
 800f388:	2000      	movs	r0, #0
 800f38a:	f7f0 ffb5 	bl	80002f8 <__aeabi_dsub>
 800f38e:	4602      	mov	r2, r0
 800f390:	460b      	mov	r3, r1
 800f392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f396:	f7f1 fbd9 	bl	8000b4c <__aeabi_dcmplt>
 800f39a:	2800      	cmp	r0, #0
 800f39c:	f43f aef5 	beq.w	800f18a <_dtoa_r+0x43a>
 800f3a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f3a2:	1e73      	subs	r3, r6, #1
 800f3a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800f3a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f3aa:	2b30      	cmp	r3, #48	@ 0x30
 800f3ac:	d0f8      	beq.n	800f3a0 <_dtoa_r+0x650>
 800f3ae:	9f04      	ldr	r7, [sp, #16]
 800f3b0:	e73e      	b.n	800f230 <_dtoa_r+0x4e0>
 800f3b2:	4b9b      	ldr	r3, [pc, #620]	@ (800f620 <_dtoa_r+0x8d0>)
 800f3b4:	f7f1 f958 	bl	8000668 <__aeabi_dmul>
 800f3b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3bc:	e7bc      	b.n	800f338 <_dtoa_r+0x5e8>
 800f3be:	d10c      	bne.n	800f3da <_dtoa_r+0x68a>
 800f3c0:	4b98      	ldr	r3, [pc, #608]	@ (800f624 <_dtoa_r+0x8d4>)
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3c8:	f7f1 f94e 	bl	8000668 <__aeabi_dmul>
 800f3cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3d0:	f7f1 fbd0 	bl	8000b74 <__aeabi_dcmpge>
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	f000 8157 	beq.w	800f688 <_dtoa_r+0x938>
 800f3da:	2400      	movs	r4, #0
 800f3dc:	4625      	mov	r5, r4
 800f3de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3e0:	43db      	mvns	r3, r3
 800f3e2:	9304      	str	r3, [sp, #16]
 800f3e4:	4656      	mov	r6, sl
 800f3e6:	2700      	movs	r7, #0
 800f3e8:	4621      	mov	r1, r4
 800f3ea:	4658      	mov	r0, fp
 800f3ec:	f000 fbb4 	bl	800fb58 <_Bfree>
 800f3f0:	2d00      	cmp	r5, #0
 800f3f2:	d0dc      	beq.n	800f3ae <_dtoa_r+0x65e>
 800f3f4:	b12f      	cbz	r7, 800f402 <_dtoa_r+0x6b2>
 800f3f6:	42af      	cmp	r7, r5
 800f3f8:	d003      	beq.n	800f402 <_dtoa_r+0x6b2>
 800f3fa:	4639      	mov	r1, r7
 800f3fc:	4658      	mov	r0, fp
 800f3fe:	f000 fbab 	bl	800fb58 <_Bfree>
 800f402:	4629      	mov	r1, r5
 800f404:	4658      	mov	r0, fp
 800f406:	f000 fba7 	bl	800fb58 <_Bfree>
 800f40a:	e7d0      	b.n	800f3ae <_dtoa_r+0x65e>
 800f40c:	9704      	str	r7, [sp, #16]
 800f40e:	4633      	mov	r3, r6
 800f410:	461e      	mov	r6, r3
 800f412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f416:	2a39      	cmp	r2, #57	@ 0x39
 800f418:	d107      	bne.n	800f42a <_dtoa_r+0x6da>
 800f41a:	459a      	cmp	sl, r3
 800f41c:	d1f8      	bne.n	800f410 <_dtoa_r+0x6c0>
 800f41e:	9a04      	ldr	r2, [sp, #16]
 800f420:	3201      	adds	r2, #1
 800f422:	9204      	str	r2, [sp, #16]
 800f424:	2230      	movs	r2, #48	@ 0x30
 800f426:	f88a 2000 	strb.w	r2, [sl]
 800f42a:	781a      	ldrb	r2, [r3, #0]
 800f42c:	3201      	adds	r2, #1
 800f42e:	701a      	strb	r2, [r3, #0]
 800f430:	e7bd      	b.n	800f3ae <_dtoa_r+0x65e>
 800f432:	4b7b      	ldr	r3, [pc, #492]	@ (800f620 <_dtoa_r+0x8d0>)
 800f434:	2200      	movs	r2, #0
 800f436:	f7f1 f917 	bl	8000668 <__aeabi_dmul>
 800f43a:	2200      	movs	r2, #0
 800f43c:	2300      	movs	r3, #0
 800f43e:	4604      	mov	r4, r0
 800f440:	460d      	mov	r5, r1
 800f442:	f7f1 fb79 	bl	8000b38 <__aeabi_dcmpeq>
 800f446:	2800      	cmp	r0, #0
 800f448:	f43f aebb 	beq.w	800f1c2 <_dtoa_r+0x472>
 800f44c:	e6f0      	b.n	800f230 <_dtoa_r+0x4e0>
 800f44e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f450:	2a00      	cmp	r2, #0
 800f452:	f000 80db 	beq.w	800f60c <_dtoa_r+0x8bc>
 800f456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f458:	2a01      	cmp	r2, #1
 800f45a:	f300 80bf 	bgt.w	800f5dc <_dtoa_r+0x88c>
 800f45e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f460:	2a00      	cmp	r2, #0
 800f462:	f000 80b7 	beq.w	800f5d4 <_dtoa_r+0x884>
 800f466:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f46a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f46c:	4646      	mov	r6, r8
 800f46e:	9a08      	ldr	r2, [sp, #32]
 800f470:	2101      	movs	r1, #1
 800f472:	441a      	add	r2, r3
 800f474:	4658      	mov	r0, fp
 800f476:	4498      	add	r8, r3
 800f478:	9208      	str	r2, [sp, #32]
 800f47a:	f000 fc21 	bl	800fcc0 <__i2b>
 800f47e:	4605      	mov	r5, r0
 800f480:	b15e      	cbz	r6, 800f49a <_dtoa_r+0x74a>
 800f482:	9b08      	ldr	r3, [sp, #32]
 800f484:	2b00      	cmp	r3, #0
 800f486:	dd08      	ble.n	800f49a <_dtoa_r+0x74a>
 800f488:	42b3      	cmp	r3, r6
 800f48a:	9a08      	ldr	r2, [sp, #32]
 800f48c:	bfa8      	it	ge
 800f48e:	4633      	movge	r3, r6
 800f490:	eba8 0803 	sub.w	r8, r8, r3
 800f494:	1af6      	subs	r6, r6, r3
 800f496:	1ad3      	subs	r3, r2, r3
 800f498:	9308      	str	r3, [sp, #32]
 800f49a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f49c:	b1f3      	cbz	r3, 800f4dc <_dtoa_r+0x78c>
 800f49e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	f000 80b7 	beq.w	800f614 <_dtoa_r+0x8c4>
 800f4a6:	b18c      	cbz	r4, 800f4cc <_dtoa_r+0x77c>
 800f4a8:	4629      	mov	r1, r5
 800f4aa:	4622      	mov	r2, r4
 800f4ac:	4658      	mov	r0, fp
 800f4ae:	f000 fcc7 	bl	800fe40 <__pow5mult>
 800f4b2:	464a      	mov	r2, r9
 800f4b4:	4601      	mov	r1, r0
 800f4b6:	4605      	mov	r5, r0
 800f4b8:	4658      	mov	r0, fp
 800f4ba:	f000 fc17 	bl	800fcec <__multiply>
 800f4be:	4649      	mov	r1, r9
 800f4c0:	9004      	str	r0, [sp, #16]
 800f4c2:	4658      	mov	r0, fp
 800f4c4:	f000 fb48 	bl	800fb58 <_Bfree>
 800f4c8:	9b04      	ldr	r3, [sp, #16]
 800f4ca:	4699      	mov	r9, r3
 800f4cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4ce:	1b1a      	subs	r2, r3, r4
 800f4d0:	d004      	beq.n	800f4dc <_dtoa_r+0x78c>
 800f4d2:	4649      	mov	r1, r9
 800f4d4:	4658      	mov	r0, fp
 800f4d6:	f000 fcb3 	bl	800fe40 <__pow5mult>
 800f4da:	4681      	mov	r9, r0
 800f4dc:	2101      	movs	r1, #1
 800f4de:	4658      	mov	r0, fp
 800f4e0:	f000 fbee 	bl	800fcc0 <__i2b>
 800f4e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	f000 81cf 	beq.w	800f88c <_dtoa_r+0xb3c>
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	4601      	mov	r1, r0
 800f4f2:	4658      	mov	r0, fp
 800f4f4:	f000 fca4 	bl	800fe40 <__pow5mult>
 800f4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	4604      	mov	r4, r0
 800f4fe:	f300 8095 	bgt.w	800f62c <_dtoa_r+0x8dc>
 800f502:	9b02      	ldr	r3, [sp, #8]
 800f504:	2b00      	cmp	r3, #0
 800f506:	f040 8087 	bne.w	800f618 <_dtoa_r+0x8c8>
 800f50a:	9b03      	ldr	r3, [sp, #12]
 800f50c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f510:	2b00      	cmp	r3, #0
 800f512:	f040 8089 	bne.w	800f628 <_dtoa_r+0x8d8>
 800f516:	9b03      	ldr	r3, [sp, #12]
 800f518:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f51c:	0d1b      	lsrs	r3, r3, #20
 800f51e:	051b      	lsls	r3, r3, #20
 800f520:	b12b      	cbz	r3, 800f52e <_dtoa_r+0x7de>
 800f522:	9b08      	ldr	r3, [sp, #32]
 800f524:	3301      	adds	r3, #1
 800f526:	9308      	str	r3, [sp, #32]
 800f528:	f108 0801 	add.w	r8, r8, #1
 800f52c:	2301      	movs	r3, #1
 800f52e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f530:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f532:	2b00      	cmp	r3, #0
 800f534:	f000 81b0 	beq.w	800f898 <_dtoa_r+0xb48>
 800f538:	6923      	ldr	r3, [r4, #16]
 800f53a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f53e:	6918      	ldr	r0, [r3, #16]
 800f540:	f000 fb72 	bl	800fc28 <__hi0bits>
 800f544:	f1c0 0020 	rsb	r0, r0, #32
 800f548:	9b08      	ldr	r3, [sp, #32]
 800f54a:	4418      	add	r0, r3
 800f54c:	f010 001f 	ands.w	r0, r0, #31
 800f550:	d077      	beq.n	800f642 <_dtoa_r+0x8f2>
 800f552:	f1c0 0320 	rsb	r3, r0, #32
 800f556:	2b04      	cmp	r3, #4
 800f558:	dd6b      	ble.n	800f632 <_dtoa_r+0x8e2>
 800f55a:	9b08      	ldr	r3, [sp, #32]
 800f55c:	f1c0 001c 	rsb	r0, r0, #28
 800f560:	4403      	add	r3, r0
 800f562:	4480      	add	r8, r0
 800f564:	4406      	add	r6, r0
 800f566:	9308      	str	r3, [sp, #32]
 800f568:	f1b8 0f00 	cmp.w	r8, #0
 800f56c:	dd05      	ble.n	800f57a <_dtoa_r+0x82a>
 800f56e:	4649      	mov	r1, r9
 800f570:	4642      	mov	r2, r8
 800f572:	4658      	mov	r0, fp
 800f574:	f000 fcbe 	bl	800fef4 <__lshift>
 800f578:	4681      	mov	r9, r0
 800f57a:	9b08      	ldr	r3, [sp, #32]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	dd05      	ble.n	800f58c <_dtoa_r+0x83c>
 800f580:	4621      	mov	r1, r4
 800f582:	461a      	mov	r2, r3
 800f584:	4658      	mov	r0, fp
 800f586:	f000 fcb5 	bl	800fef4 <__lshift>
 800f58a:	4604      	mov	r4, r0
 800f58c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d059      	beq.n	800f646 <_dtoa_r+0x8f6>
 800f592:	4621      	mov	r1, r4
 800f594:	4648      	mov	r0, r9
 800f596:	f000 fd19 	bl	800ffcc <__mcmp>
 800f59a:	2800      	cmp	r0, #0
 800f59c:	da53      	bge.n	800f646 <_dtoa_r+0x8f6>
 800f59e:	1e7b      	subs	r3, r7, #1
 800f5a0:	9304      	str	r3, [sp, #16]
 800f5a2:	4649      	mov	r1, r9
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	220a      	movs	r2, #10
 800f5a8:	4658      	mov	r0, fp
 800f5aa:	f000 faf7 	bl	800fb9c <__multadd>
 800f5ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5b0:	4681      	mov	r9, r0
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	f000 8172 	beq.w	800f89c <_dtoa_r+0xb4c>
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	4629      	mov	r1, r5
 800f5bc:	220a      	movs	r2, #10
 800f5be:	4658      	mov	r0, fp
 800f5c0:	f000 faec 	bl	800fb9c <__multadd>
 800f5c4:	9b00      	ldr	r3, [sp, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	4605      	mov	r5, r0
 800f5ca:	dc67      	bgt.n	800f69c <_dtoa_r+0x94c>
 800f5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5ce:	2b02      	cmp	r3, #2
 800f5d0:	dc41      	bgt.n	800f656 <_dtoa_r+0x906>
 800f5d2:	e063      	b.n	800f69c <_dtoa_r+0x94c>
 800f5d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f5d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f5da:	e746      	b.n	800f46a <_dtoa_r+0x71a>
 800f5dc:	9b07      	ldr	r3, [sp, #28]
 800f5de:	1e5c      	subs	r4, r3, #1
 800f5e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5e2:	42a3      	cmp	r3, r4
 800f5e4:	bfbf      	itttt	lt
 800f5e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f5e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f5ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f5ec:	1ae3      	sublt	r3, r4, r3
 800f5ee:	bfb4      	ite	lt
 800f5f0:	18d2      	addlt	r2, r2, r3
 800f5f2:	1b1c      	subge	r4, r3, r4
 800f5f4:	9b07      	ldr	r3, [sp, #28]
 800f5f6:	bfbc      	itt	lt
 800f5f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f5fa:	2400      	movlt	r4, #0
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	bfb5      	itete	lt
 800f600:	eba8 0603 	sublt.w	r6, r8, r3
 800f604:	9b07      	ldrge	r3, [sp, #28]
 800f606:	2300      	movlt	r3, #0
 800f608:	4646      	movge	r6, r8
 800f60a:	e730      	b.n	800f46e <_dtoa_r+0x71e>
 800f60c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f60e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f610:	4646      	mov	r6, r8
 800f612:	e735      	b.n	800f480 <_dtoa_r+0x730>
 800f614:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f616:	e75c      	b.n	800f4d2 <_dtoa_r+0x782>
 800f618:	2300      	movs	r3, #0
 800f61a:	e788      	b.n	800f52e <_dtoa_r+0x7de>
 800f61c:	3fe00000 	.word	0x3fe00000
 800f620:	40240000 	.word	0x40240000
 800f624:	40140000 	.word	0x40140000
 800f628:	9b02      	ldr	r3, [sp, #8]
 800f62a:	e780      	b.n	800f52e <_dtoa_r+0x7de>
 800f62c:	2300      	movs	r3, #0
 800f62e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f630:	e782      	b.n	800f538 <_dtoa_r+0x7e8>
 800f632:	d099      	beq.n	800f568 <_dtoa_r+0x818>
 800f634:	9a08      	ldr	r2, [sp, #32]
 800f636:	331c      	adds	r3, #28
 800f638:	441a      	add	r2, r3
 800f63a:	4498      	add	r8, r3
 800f63c:	441e      	add	r6, r3
 800f63e:	9208      	str	r2, [sp, #32]
 800f640:	e792      	b.n	800f568 <_dtoa_r+0x818>
 800f642:	4603      	mov	r3, r0
 800f644:	e7f6      	b.n	800f634 <_dtoa_r+0x8e4>
 800f646:	9b07      	ldr	r3, [sp, #28]
 800f648:	9704      	str	r7, [sp, #16]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	dc20      	bgt.n	800f690 <_dtoa_r+0x940>
 800f64e:	9300      	str	r3, [sp, #0]
 800f650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f652:	2b02      	cmp	r3, #2
 800f654:	dd1e      	ble.n	800f694 <_dtoa_r+0x944>
 800f656:	9b00      	ldr	r3, [sp, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	f47f aec0 	bne.w	800f3de <_dtoa_r+0x68e>
 800f65e:	4621      	mov	r1, r4
 800f660:	2205      	movs	r2, #5
 800f662:	4658      	mov	r0, fp
 800f664:	f000 fa9a 	bl	800fb9c <__multadd>
 800f668:	4601      	mov	r1, r0
 800f66a:	4604      	mov	r4, r0
 800f66c:	4648      	mov	r0, r9
 800f66e:	f000 fcad 	bl	800ffcc <__mcmp>
 800f672:	2800      	cmp	r0, #0
 800f674:	f77f aeb3 	ble.w	800f3de <_dtoa_r+0x68e>
 800f678:	4656      	mov	r6, sl
 800f67a:	2331      	movs	r3, #49	@ 0x31
 800f67c:	f806 3b01 	strb.w	r3, [r6], #1
 800f680:	9b04      	ldr	r3, [sp, #16]
 800f682:	3301      	adds	r3, #1
 800f684:	9304      	str	r3, [sp, #16]
 800f686:	e6ae      	b.n	800f3e6 <_dtoa_r+0x696>
 800f688:	9c07      	ldr	r4, [sp, #28]
 800f68a:	9704      	str	r7, [sp, #16]
 800f68c:	4625      	mov	r5, r4
 800f68e:	e7f3      	b.n	800f678 <_dtoa_r+0x928>
 800f690:	9b07      	ldr	r3, [sp, #28]
 800f692:	9300      	str	r3, [sp, #0]
 800f694:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f696:	2b00      	cmp	r3, #0
 800f698:	f000 8104 	beq.w	800f8a4 <_dtoa_r+0xb54>
 800f69c:	2e00      	cmp	r6, #0
 800f69e:	dd05      	ble.n	800f6ac <_dtoa_r+0x95c>
 800f6a0:	4629      	mov	r1, r5
 800f6a2:	4632      	mov	r2, r6
 800f6a4:	4658      	mov	r0, fp
 800f6a6:	f000 fc25 	bl	800fef4 <__lshift>
 800f6aa:	4605      	mov	r5, r0
 800f6ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d05a      	beq.n	800f768 <_dtoa_r+0xa18>
 800f6b2:	6869      	ldr	r1, [r5, #4]
 800f6b4:	4658      	mov	r0, fp
 800f6b6:	f000 fa0f 	bl	800fad8 <_Balloc>
 800f6ba:	4606      	mov	r6, r0
 800f6bc:	b928      	cbnz	r0, 800f6ca <_dtoa_r+0x97a>
 800f6be:	4b84      	ldr	r3, [pc, #528]	@ (800f8d0 <_dtoa_r+0xb80>)
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f6c6:	f7ff bb5a 	b.w	800ed7e <_dtoa_r+0x2e>
 800f6ca:	692a      	ldr	r2, [r5, #16]
 800f6cc:	3202      	adds	r2, #2
 800f6ce:	0092      	lsls	r2, r2, #2
 800f6d0:	f105 010c 	add.w	r1, r5, #12
 800f6d4:	300c      	adds	r0, #12
 800f6d6:	f7ff faa4 	bl	800ec22 <memcpy>
 800f6da:	2201      	movs	r2, #1
 800f6dc:	4631      	mov	r1, r6
 800f6de:	4658      	mov	r0, fp
 800f6e0:	f000 fc08 	bl	800fef4 <__lshift>
 800f6e4:	f10a 0301 	add.w	r3, sl, #1
 800f6e8:	9307      	str	r3, [sp, #28]
 800f6ea:	9b00      	ldr	r3, [sp, #0]
 800f6ec:	4453      	add	r3, sl
 800f6ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6f0:	9b02      	ldr	r3, [sp, #8]
 800f6f2:	f003 0301 	and.w	r3, r3, #1
 800f6f6:	462f      	mov	r7, r5
 800f6f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6fa:	4605      	mov	r5, r0
 800f6fc:	9b07      	ldr	r3, [sp, #28]
 800f6fe:	4621      	mov	r1, r4
 800f700:	3b01      	subs	r3, #1
 800f702:	4648      	mov	r0, r9
 800f704:	9300      	str	r3, [sp, #0]
 800f706:	f7ff fa9a 	bl	800ec3e <quorem>
 800f70a:	4639      	mov	r1, r7
 800f70c:	9002      	str	r0, [sp, #8]
 800f70e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f712:	4648      	mov	r0, r9
 800f714:	f000 fc5a 	bl	800ffcc <__mcmp>
 800f718:	462a      	mov	r2, r5
 800f71a:	9008      	str	r0, [sp, #32]
 800f71c:	4621      	mov	r1, r4
 800f71e:	4658      	mov	r0, fp
 800f720:	f000 fc70 	bl	8010004 <__mdiff>
 800f724:	68c2      	ldr	r2, [r0, #12]
 800f726:	4606      	mov	r6, r0
 800f728:	bb02      	cbnz	r2, 800f76c <_dtoa_r+0xa1c>
 800f72a:	4601      	mov	r1, r0
 800f72c:	4648      	mov	r0, r9
 800f72e:	f000 fc4d 	bl	800ffcc <__mcmp>
 800f732:	4602      	mov	r2, r0
 800f734:	4631      	mov	r1, r6
 800f736:	4658      	mov	r0, fp
 800f738:	920e      	str	r2, [sp, #56]	@ 0x38
 800f73a:	f000 fa0d 	bl	800fb58 <_Bfree>
 800f73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f740:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f742:	9e07      	ldr	r6, [sp, #28]
 800f744:	ea43 0102 	orr.w	r1, r3, r2
 800f748:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f74a:	4319      	orrs	r1, r3
 800f74c:	d110      	bne.n	800f770 <_dtoa_r+0xa20>
 800f74e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f752:	d029      	beq.n	800f7a8 <_dtoa_r+0xa58>
 800f754:	9b08      	ldr	r3, [sp, #32]
 800f756:	2b00      	cmp	r3, #0
 800f758:	dd02      	ble.n	800f760 <_dtoa_r+0xa10>
 800f75a:	9b02      	ldr	r3, [sp, #8]
 800f75c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f760:	9b00      	ldr	r3, [sp, #0]
 800f762:	f883 8000 	strb.w	r8, [r3]
 800f766:	e63f      	b.n	800f3e8 <_dtoa_r+0x698>
 800f768:	4628      	mov	r0, r5
 800f76a:	e7bb      	b.n	800f6e4 <_dtoa_r+0x994>
 800f76c:	2201      	movs	r2, #1
 800f76e:	e7e1      	b.n	800f734 <_dtoa_r+0x9e4>
 800f770:	9b08      	ldr	r3, [sp, #32]
 800f772:	2b00      	cmp	r3, #0
 800f774:	db04      	blt.n	800f780 <_dtoa_r+0xa30>
 800f776:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f778:	430b      	orrs	r3, r1
 800f77a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f77c:	430b      	orrs	r3, r1
 800f77e:	d120      	bne.n	800f7c2 <_dtoa_r+0xa72>
 800f780:	2a00      	cmp	r2, #0
 800f782:	dded      	ble.n	800f760 <_dtoa_r+0xa10>
 800f784:	4649      	mov	r1, r9
 800f786:	2201      	movs	r2, #1
 800f788:	4658      	mov	r0, fp
 800f78a:	f000 fbb3 	bl	800fef4 <__lshift>
 800f78e:	4621      	mov	r1, r4
 800f790:	4681      	mov	r9, r0
 800f792:	f000 fc1b 	bl	800ffcc <__mcmp>
 800f796:	2800      	cmp	r0, #0
 800f798:	dc03      	bgt.n	800f7a2 <_dtoa_r+0xa52>
 800f79a:	d1e1      	bne.n	800f760 <_dtoa_r+0xa10>
 800f79c:	f018 0f01 	tst.w	r8, #1
 800f7a0:	d0de      	beq.n	800f760 <_dtoa_r+0xa10>
 800f7a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f7a6:	d1d8      	bne.n	800f75a <_dtoa_r+0xa0a>
 800f7a8:	9a00      	ldr	r2, [sp, #0]
 800f7aa:	2339      	movs	r3, #57	@ 0x39
 800f7ac:	7013      	strb	r3, [r2, #0]
 800f7ae:	4633      	mov	r3, r6
 800f7b0:	461e      	mov	r6, r3
 800f7b2:	3b01      	subs	r3, #1
 800f7b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f7b8:	2a39      	cmp	r2, #57	@ 0x39
 800f7ba:	d052      	beq.n	800f862 <_dtoa_r+0xb12>
 800f7bc:	3201      	adds	r2, #1
 800f7be:	701a      	strb	r2, [r3, #0]
 800f7c0:	e612      	b.n	800f3e8 <_dtoa_r+0x698>
 800f7c2:	2a00      	cmp	r2, #0
 800f7c4:	dd07      	ble.n	800f7d6 <_dtoa_r+0xa86>
 800f7c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f7ca:	d0ed      	beq.n	800f7a8 <_dtoa_r+0xa58>
 800f7cc:	9a00      	ldr	r2, [sp, #0]
 800f7ce:	f108 0301 	add.w	r3, r8, #1
 800f7d2:	7013      	strb	r3, [r2, #0]
 800f7d4:	e608      	b.n	800f3e8 <_dtoa_r+0x698>
 800f7d6:	9b07      	ldr	r3, [sp, #28]
 800f7d8:	9a07      	ldr	r2, [sp, #28]
 800f7da:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f7de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d028      	beq.n	800f836 <_dtoa_r+0xae6>
 800f7e4:	4649      	mov	r1, r9
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	220a      	movs	r2, #10
 800f7ea:	4658      	mov	r0, fp
 800f7ec:	f000 f9d6 	bl	800fb9c <__multadd>
 800f7f0:	42af      	cmp	r7, r5
 800f7f2:	4681      	mov	r9, r0
 800f7f4:	f04f 0300 	mov.w	r3, #0
 800f7f8:	f04f 020a 	mov.w	r2, #10
 800f7fc:	4639      	mov	r1, r7
 800f7fe:	4658      	mov	r0, fp
 800f800:	d107      	bne.n	800f812 <_dtoa_r+0xac2>
 800f802:	f000 f9cb 	bl	800fb9c <__multadd>
 800f806:	4607      	mov	r7, r0
 800f808:	4605      	mov	r5, r0
 800f80a:	9b07      	ldr	r3, [sp, #28]
 800f80c:	3301      	adds	r3, #1
 800f80e:	9307      	str	r3, [sp, #28]
 800f810:	e774      	b.n	800f6fc <_dtoa_r+0x9ac>
 800f812:	f000 f9c3 	bl	800fb9c <__multadd>
 800f816:	4629      	mov	r1, r5
 800f818:	4607      	mov	r7, r0
 800f81a:	2300      	movs	r3, #0
 800f81c:	220a      	movs	r2, #10
 800f81e:	4658      	mov	r0, fp
 800f820:	f000 f9bc 	bl	800fb9c <__multadd>
 800f824:	4605      	mov	r5, r0
 800f826:	e7f0      	b.n	800f80a <_dtoa_r+0xaba>
 800f828:	9b00      	ldr	r3, [sp, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	bfcc      	ite	gt
 800f82e:	461e      	movgt	r6, r3
 800f830:	2601      	movle	r6, #1
 800f832:	4456      	add	r6, sl
 800f834:	2700      	movs	r7, #0
 800f836:	4649      	mov	r1, r9
 800f838:	2201      	movs	r2, #1
 800f83a:	4658      	mov	r0, fp
 800f83c:	f000 fb5a 	bl	800fef4 <__lshift>
 800f840:	4621      	mov	r1, r4
 800f842:	4681      	mov	r9, r0
 800f844:	f000 fbc2 	bl	800ffcc <__mcmp>
 800f848:	2800      	cmp	r0, #0
 800f84a:	dcb0      	bgt.n	800f7ae <_dtoa_r+0xa5e>
 800f84c:	d102      	bne.n	800f854 <_dtoa_r+0xb04>
 800f84e:	f018 0f01 	tst.w	r8, #1
 800f852:	d1ac      	bne.n	800f7ae <_dtoa_r+0xa5e>
 800f854:	4633      	mov	r3, r6
 800f856:	461e      	mov	r6, r3
 800f858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f85c:	2a30      	cmp	r2, #48	@ 0x30
 800f85e:	d0fa      	beq.n	800f856 <_dtoa_r+0xb06>
 800f860:	e5c2      	b.n	800f3e8 <_dtoa_r+0x698>
 800f862:	459a      	cmp	sl, r3
 800f864:	d1a4      	bne.n	800f7b0 <_dtoa_r+0xa60>
 800f866:	9b04      	ldr	r3, [sp, #16]
 800f868:	3301      	adds	r3, #1
 800f86a:	9304      	str	r3, [sp, #16]
 800f86c:	2331      	movs	r3, #49	@ 0x31
 800f86e:	f88a 3000 	strb.w	r3, [sl]
 800f872:	e5b9      	b.n	800f3e8 <_dtoa_r+0x698>
 800f874:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f876:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f8d4 <_dtoa_r+0xb84>
 800f87a:	b11b      	cbz	r3, 800f884 <_dtoa_r+0xb34>
 800f87c:	f10a 0308 	add.w	r3, sl, #8
 800f880:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f882:	6013      	str	r3, [r2, #0]
 800f884:	4650      	mov	r0, sl
 800f886:	b019      	add	sp, #100	@ 0x64
 800f888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f88c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f88e:	2b01      	cmp	r3, #1
 800f890:	f77f ae37 	ble.w	800f502 <_dtoa_r+0x7b2>
 800f894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f896:	930a      	str	r3, [sp, #40]	@ 0x28
 800f898:	2001      	movs	r0, #1
 800f89a:	e655      	b.n	800f548 <_dtoa_r+0x7f8>
 800f89c:	9b00      	ldr	r3, [sp, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f77f aed6 	ble.w	800f650 <_dtoa_r+0x900>
 800f8a4:	4656      	mov	r6, sl
 800f8a6:	4621      	mov	r1, r4
 800f8a8:	4648      	mov	r0, r9
 800f8aa:	f7ff f9c8 	bl	800ec3e <quorem>
 800f8ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f8b2:	f806 8b01 	strb.w	r8, [r6], #1
 800f8b6:	9b00      	ldr	r3, [sp, #0]
 800f8b8:	eba6 020a 	sub.w	r2, r6, sl
 800f8bc:	4293      	cmp	r3, r2
 800f8be:	ddb3      	ble.n	800f828 <_dtoa_r+0xad8>
 800f8c0:	4649      	mov	r1, r9
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	220a      	movs	r2, #10
 800f8c6:	4658      	mov	r0, fp
 800f8c8:	f000 f968 	bl	800fb9c <__multadd>
 800f8cc:	4681      	mov	r9, r0
 800f8ce:	e7ea      	b.n	800f8a6 <_dtoa_r+0xb56>
 800f8d0:	08012068 	.word	0x08012068
 800f8d4:	08011fec 	.word	0x08011fec

0800f8d8 <_free_r>:
 800f8d8:	b538      	push	{r3, r4, r5, lr}
 800f8da:	4605      	mov	r5, r0
 800f8dc:	2900      	cmp	r1, #0
 800f8de:	d041      	beq.n	800f964 <_free_r+0x8c>
 800f8e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8e4:	1f0c      	subs	r4, r1, #4
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	bfb8      	it	lt
 800f8ea:	18e4      	addlt	r4, r4, r3
 800f8ec:	f000 f8e8 	bl	800fac0 <__malloc_lock>
 800f8f0:	4a1d      	ldr	r2, [pc, #116]	@ (800f968 <_free_r+0x90>)
 800f8f2:	6813      	ldr	r3, [r2, #0]
 800f8f4:	b933      	cbnz	r3, 800f904 <_free_r+0x2c>
 800f8f6:	6063      	str	r3, [r4, #4]
 800f8f8:	6014      	str	r4, [r2, #0]
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f900:	f000 b8e4 	b.w	800facc <__malloc_unlock>
 800f904:	42a3      	cmp	r3, r4
 800f906:	d908      	bls.n	800f91a <_free_r+0x42>
 800f908:	6820      	ldr	r0, [r4, #0]
 800f90a:	1821      	adds	r1, r4, r0
 800f90c:	428b      	cmp	r3, r1
 800f90e:	bf01      	itttt	eq
 800f910:	6819      	ldreq	r1, [r3, #0]
 800f912:	685b      	ldreq	r3, [r3, #4]
 800f914:	1809      	addeq	r1, r1, r0
 800f916:	6021      	streq	r1, [r4, #0]
 800f918:	e7ed      	b.n	800f8f6 <_free_r+0x1e>
 800f91a:	461a      	mov	r2, r3
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	b10b      	cbz	r3, 800f924 <_free_r+0x4c>
 800f920:	42a3      	cmp	r3, r4
 800f922:	d9fa      	bls.n	800f91a <_free_r+0x42>
 800f924:	6811      	ldr	r1, [r2, #0]
 800f926:	1850      	adds	r0, r2, r1
 800f928:	42a0      	cmp	r0, r4
 800f92a:	d10b      	bne.n	800f944 <_free_r+0x6c>
 800f92c:	6820      	ldr	r0, [r4, #0]
 800f92e:	4401      	add	r1, r0
 800f930:	1850      	adds	r0, r2, r1
 800f932:	4283      	cmp	r3, r0
 800f934:	6011      	str	r1, [r2, #0]
 800f936:	d1e0      	bne.n	800f8fa <_free_r+0x22>
 800f938:	6818      	ldr	r0, [r3, #0]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	6053      	str	r3, [r2, #4]
 800f93e:	4408      	add	r0, r1
 800f940:	6010      	str	r0, [r2, #0]
 800f942:	e7da      	b.n	800f8fa <_free_r+0x22>
 800f944:	d902      	bls.n	800f94c <_free_r+0x74>
 800f946:	230c      	movs	r3, #12
 800f948:	602b      	str	r3, [r5, #0]
 800f94a:	e7d6      	b.n	800f8fa <_free_r+0x22>
 800f94c:	6820      	ldr	r0, [r4, #0]
 800f94e:	1821      	adds	r1, r4, r0
 800f950:	428b      	cmp	r3, r1
 800f952:	bf04      	itt	eq
 800f954:	6819      	ldreq	r1, [r3, #0]
 800f956:	685b      	ldreq	r3, [r3, #4]
 800f958:	6063      	str	r3, [r4, #4]
 800f95a:	bf04      	itt	eq
 800f95c:	1809      	addeq	r1, r1, r0
 800f95e:	6021      	streq	r1, [r4, #0]
 800f960:	6054      	str	r4, [r2, #4]
 800f962:	e7ca      	b.n	800f8fa <_free_r+0x22>
 800f964:	bd38      	pop	{r3, r4, r5, pc}
 800f966:	bf00      	nop
 800f968:	20007258 	.word	0x20007258

0800f96c <malloc>:
 800f96c:	4b02      	ldr	r3, [pc, #8]	@ (800f978 <malloc+0xc>)
 800f96e:	4601      	mov	r1, r0
 800f970:	6818      	ldr	r0, [r3, #0]
 800f972:	f000 b825 	b.w	800f9c0 <_malloc_r>
 800f976:	bf00      	nop
 800f978:	20000430 	.word	0x20000430

0800f97c <sbrk_aligned>:
 800f97c:	b570      	push	{r4, r5, r6, lr}
 800f97e:	4e0f      	ldr	r6, [pc, #60]	@ (800f9bc <sbrk_aligned+0x40>)
 800f980:	460c      	mov	r4, r1
 800f982:	6831      	ldr	r1, [r6, #0]
 800f984:	4605      	mov	r5, r0
 800f986:	b911      	cbnz	r1, 800f98e <sbrk_aligned+0x12>
 800f988:	f000 fe46 	bl	8010618 <_sbrk_r>
 800f98c:	6030      	str	r0, [r6, #0]
 800f98e:	4621      	mov	r1, r4
 800f990:	4628      	mov	r0, r5
 800f992:	f000 fe41 	bl	8010618 <_sbrk_r>
 800f996:	1c43      	adds	r3, r0, #1
 800f998:	d103      	bne.n	800f9a2 <sbrk_aligned+0x26>
 800f99a:	f04f 34ff 	mov.w	r4, #4294967295
 800f99e:	4620      	mov	r0, r4
 800f9a0:	bd70      	pop	{r4, r5, r6, pc}
 800f9a2:	1cc4      	adds	r4, r0, #3
 800f9a4:	f024 0403 	bic.w	r4, r4, #3
 800f9a8:	42a0      	cmp	r0, r4
 800f9aa:	d0f8      	beq.n	800f99e <sbrk_aligned+0x22>
 800f9ac:	1a21      	subs	r1, r4, r0
 800f9ae:	4628      	mov	r0, r5
 800f9b0:	f000 fe32 	bl	8010618 <_sbrk_r>
 800f9b4:	3001      	adds	r0, #1
 800f9b6:	d1f2      	bne.n	800f99e <sbrk_aligned+0x22>
 800f9b8:	e7ef      	b.n	800f99a <sbrk_aligned+0x1e>
 800f9ba:	bf00      	nop
 800f9bc:	20007254 	.word	0x20007254

0800f9c0 <_malloc_r>:
 800f9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9c4:	1ccd      	adds	r5, r1, #3
 800f9c6:	f025 0503 	bic.w	r5, r5, #3
 800f9ca:	3508      	adds	r5, #8
 800f9cc:	2d0c      	cmp	r5, #12
 800f9ce:	bf38      	it	cc
 800f9d0:	250c      	movcc	r5, #12
 800f9d2:	2d00      	cmp	r5, #0
 800f9d4:	4606      	mov	r6, r0
 800f9d6:	db01      	blt.n	800f9dc <_malloc_r+0x1c>
 800f9d8:	42a9      	cmp	r1, r5
 800f9da:	d904      	bls.n	800f9e6 <_malloc_r+0x26>
 800f9dc:	230c      	movs	r3, #12
 800f9de:	6033      	str	r3, [r6, #0]
 800f9e0:	2000      	movs	r0, #0
 800f9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fabc <_malloc_r+0xfc>
 800f9ea:	f000 f869 	bl	800fac0 <__malloc_lock>
 800f9ee:	f8d8 3000 	ldr.w	r3, [r8]
 800f9f2:	461c      	mov	r4, r3
 800f9f4:	bb44      	cbnz	r4, 800fa48 <_malloc_r+0x88>
 800f9f6:	4629      	mov	r1, r5
 800f9f8:	4630      	mov	r0, r6
 800f9fa:	f7ff ffbf 	bl	800f97c <sbrk_aligned>
 800f9fe:	1c43      	adds	r3, r0, #1
 800fa00:	4604      	mov	r4, r0
 800fa02:	d158      	bne.n	800fab6 <_malloc_r+0xf6>
 800fa04:	f8d8 4000 	ldr.w	r4, [r8]
 800fa08:	4627      	mov	r7, r4
 800fa0a:	2f00      	cmp	r7, #0
 800fa0c:	d143      	bne.n	800fa96 <_malloc_r+0xd6>
 800fa0e:	2c00      	cmp	r4, #0
 800fa10:	d04b      	beq.n	800faaa <_malloc_r+0xea>
 800fa12:	6823      	ldr	r3, [r4, #0]
 800fa14:	4639      	mov	r1, r7
 800fa16:	4630      	mov	r0, r6
 800fa18:	eb04 0903 	add.w	r9, r4, r3
 800fa1c:	f000 fdfc 	bl	8010618 <_sbrk_r>
 800fa20:	4581      	cmp	r9, r0
 800fa22:	d142      	bne.n	800faaa <_malloc_r+0xea>
 800fa24:	6821      	ldr	r1, [r4, #0]
 800fa26:	1a6d      	subs	r5, r5, r1
 800fa28:	4629      	mov	r1, r5
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	f7ff ffa6 	bl	800f97c <sbrk_aligned>
 800fa30:	3001      	adds	r0, #1
 800fa32:	d03a      	beq.n	800faaa <_malloc_r+0xea>
 800fa34:	6823      	ldr	r3, [r4, #0]
 800fa36:	442b      	add	r3, r5
 800fa38:	6023      	str	r3, [r4, #0]
 800fa3a:	f8d8 3000 	ldr.w	r3, [r8]
 800fa3e:	685a      	ldr	r2, [r3, #4]
 800fa40:	bb62      	cbnz	r2, 800fa9c <_malloc_r+0xdc>
 800fa42:	f8c8 7000 	str.w	r7, [r8]
 800fa46:	e00f      	b.n	800fa68 <_malloc_r+0xa8>
 800fa48:	6822      	ldr	r2, [r4, #0]
 800fa4a:	1b52      	subs	r2, r2, r5
 800fa4c:	d420      	bmi.n	800fa90 <_malloc_r+0xd0>
 800fa4e:	2a0b      	cmp	r2, #11
 800fa50:	d917      	bls.n	800fa82 <_malloc_r+0xc2>
 800fa52:	1961      	adds	r1, r4, r5
 800fa54:	42a3      	cmp	r3, r4
 800fa56:	6025      	str	r5, [r4, #0]
 800fa58:	bf18      	it	ne
 800fa5a:	6059      	strne	r1, [r3, #4]
 800fa5c:	6863      	ldr	r3, [r4, #4]
 800fa5e:	bf08      	it	eq
 800fa60:	f8c8 1000 	streq.w	r1, [r8]
 800fa64:	5162      	str	r2, [r4, r5]
 800fa66:	604b      	str	r3, [r1, #4]
 800fa68:	4630      	mov	r0, r6
 800fa6a:	f000 f82f 	bl	800facc <__malloc_unlock>
 800fa6e:	f104 000b 	add.w	r0, r4, #11
 800fa72:	1d23      	adds	r3, r4, #4
 800fa74:	f020 0007 	bic.w	r0, r0, #7
 800fa78:	1ac2      	subs	r2, r0, r3
 800fa7a:	bf1c      	itt	ne
 800fa7c:	1a1b      	subne	r3, r3, r0
 800fa7e:	50a3      	strne	r3, [r4, r2]
 800fa80:	e7af      	b.n	800f9e2 <_malloc_r+0x22>
 800fa82:	6862      	ldr	r2, [r4, #4]
 800fa84:	42a3      	cmp	r3, r4
 800fa86:	bf0c      	ite	eq
 800fa88:	f8c8 2000 	streq.w	r2, [r8]
 800fa8c:	605a      	strne	r2, [r3, #4]
 800fa8e:	e7eb      	b.n	800fa68 <_malloc_r+0xa8>
 800fa90:	4623      	mov	r3, r4
 800fa92:	6864      	ldr	r4, [r4, #4]
 800fa94:	e7ae      	b.n	800f9f4 <_malloc_r+0x34>
 800fa96:	463c      	mov	r4, r7
 800fa98:	687f      	ldr	r7, [r7, #4]
 800fa9a:	e7b6      	b.n	800fa0a <_malloc_r+0x4a>
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	42a3      	cmp	r3, r4
 800faa2:	d1fb      	bne.n	800fa9c <_malloc_r+0xdc>
 800faa4:	2300      	movs	r3, #0
 800faa6:	6053      	str	r3, [r2, #4]
 800faa8:	e7de      	b.n	800fa68 <_malloc_r+0xa8>
 800faaa:	230c      	movs	r3, #12
 800faac:	6033      	str	r3, [r6, #0]
 800faae:	4630      	mov	r0, r6
 800fab0:	f000 f80c 	bl	800facc <__malloc_unlock>
 800fab4:	e794      	b.n	800f9e0 <_malloc_r+0x20>
 800fab6:	6005      	str	r5, [r0, #0]
 800fab8:	e7d6      	b.n	800fa68 <_malloc_r+0xa8>
 800faba:	bf00      	nop
 800fabc:	20007258 	.word	0x20007258

0800fac0 <__malloc_lock>:
 800fac0:	4801      	ldr	r0, [pc, #4]	@ (800fac8 <__malloc_lock+0x8>)
 800fac2:	f7ff b8a4 	b.w	800ec0e <__retarget_lock_acquire_recursive>
 800fac6:	bf00      	nop
 800fac8:	20007250 	.word	0x20007250

0800facc <__malloc_unlock>:
 800facc:	4801      	ldr	r0, [pc, #4]	@ (800fad4 <__malloc_unlock+0x8>)
 800face:	f7ff b89f 	b.w	800ec10 <__retarget_lock_release_recursive>
 800fad2:	bf00      	nop
 800fad4:	20007250 	.word	0x20007250

0800fad8 <_Balloc>:
 800fad8:	b570      	push	{r4, r5, r6, lr}
 800fada:	69c6      	ldr	r6, [r0, #28]
 800fadc:	4604      	mov	r4, r0
 800fade:	460d      	mov	r5, r1
 800fae0:	b976      	cbnz	r6, 800fb00 <_Balloc+0x28>
 800fae2:	2010      	movs	r0, #16
 800fae4:	f7ff ff42 	bl	800f96c <malloc>
 800fae8:	4602      	mov	r2, r0
 800faea:	61e0      	str	r0, [r4, #28]
 800faec:	b920      	cbnz	r0, 800faf8 <_Balloc+0x20>
 800faee:	4b18      	ldr	r3, [pc, #96]	@ (800fb50 <_Balloc+0x78>)
 800faf0:	4818      	ldr	r0, [pc, #96]	@ (800fb54 <_Balloc+0x7c>)
 800faf2:	216b      	movs	r1, #107	@ 0x6b
 800faf4:	f000 fda0 	bl	8010638 <__assert_func>
 800faf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fafc:	6006      	str	r6, [r0, #0]
 800fafe:	60c6      	str	r6, [r0, #12]
 800fb00:	69e6      	ldr	r6, [r4, #28]
 800fb02:	68f3      	ldr	r3, [r6, #12]
 800fb04:	b183      	cbz	r3, 800fb28 <_Balloc+0x50>
 800fb06:	69e3      	ldr	r3, [r4, #28]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb0e:	b9b8      	cbnz	r0, 800fb40 <_Balloc+0x68>
 800fb10:	2101      	movs	r1, #1
 800fb12:	fa01 f605 	lsl.w	r6, r1, r5
 800fb16:	1d72      	adds	r2, r6, #5
 800fb18:	0092      	lsls	r2, r2, #2
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	f000 fdaa 	bl	8010674 <_calloc_r>
 800fb20:	b160      	cbz	r0, 800fb3c <_Balloc+0x64>
 800fb22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fb26:	e00e      	b.n	800fb46 <_Balloc+0x6e>
 800fb28:	2221      	movs	r2, #33	@ 0x21
 800fb2a:	2104      	movs	r1, #4
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	f000 fda1 	bl	8010674 <_calloc_r>
 800fb32:	69e3      	ldr	r3, [r4, #28]
 800fb34:	60f0      	str	r0, [r6, #12]
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d1e4      	bne.n	800fb06 <_Balloc+0x2e>
 800fb3c:	2000      	movs	r0, #0
 800fb3e:	bd70      	pop	{r4, r5, r6, pc}
 800fb40:	6802      	ldr	r2, [r0, #0]
 800fb42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb46:	2300      	movs	r3, #0
 800fb48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb4c:	e7f7      	b.n	800fb3e <_Balloc+0x66>
 800fb4e:	bf00      	nop
 800fb50:	08011ff9 	.word	0x08011ff9
 800fb54:	08012079 	.word	0x08012079

0800fb58 <_Bfree>:
 800fb58:	b570      	push	{r4, r5, r6, lr}
 800fb5a:	69c6      	ldr	r6, [r0, #28]
 800fb5c:	4605      	mov	r5, r0
 800fb5e:	460c      	mov	r4, r1
 800fb60:	b976      	cbnz	r6, 800fb80 <_Bfree+0x28>
 800fb62:	2010      	movs	r0, #16
 800fb64:	f7ff ff02 	bl	800f96c <malloc>
 800fb68:	4602      	mov	r2, r0
 800fb6a:	61e8      	str	r0, [r5, #28]
 800fb6c:	b920      	cbnz	r0, 800fb78 <_Bfree+0x20>
 800fb6e:	4b09      	ldr	r3, [pc, #36]	@ (800fb94 <_Bfree+0x3c>)
 800fb70:	4809      	ldr	r0, [pc, #36]	@ (800fb98 <_Bfree+0x40>)
 800fb72:	218f      	movs	r1, #143	@ 0x8f
 800fb74:	f000 fd60 	bl	8010638 <__assert_func>
 800fb78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb7c:	6006      	str	r6, [r0, #0]
 800fb7e:	60c6      	str	r6, [r0, #12]
 800fb80:	b13c      	cbz	r4, 800fb92 <_Bfree+0x3a>
 800fb82:	69eb      	ldr	r3, [r5, #28]
 800fb84:	6862      	ldr	r2, [r4, #4]
 800fb86:	68db      	ldr	r3, [r3, #12]
 800fb88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb8c:	6021      	str	r1, [r4, #0]
 800fb8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb92:	bd70      	pop	{r4, r5, r6, pc}
 800fb94:	08011ff9 	.word	0x08011ff9
 800fb98:	08012079 	.word	0x08012079

0800fb9c <__multadd>:
 800fb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fba0:	690d      	ldr	r5, [r1, #16]
 800fba2:	4607      	mov	r7, r0
 800fba4:	460c      	mov	r4, r1
 800fba6:	461e      	mov	r6, r3
 800fba8:	f101 0c14 	add.w	ip, r1, #20
 800fbac:	2000      	movs	r0, #0
 800fbae:	f8dc 3000 	ldr.w	r3, [ip]
 800fbb2:	b299      	uxth	r1, r3
 800fbb4:	fb02 6101 	mla	r1, r2, r1, r6
 800fbb8:	0c1e      	lsrs	r6, r3, #16
 800fbba:	0c0b      	lsrs	r3, r1, #16
 800fbbc:	fb02 3306 	mla	r3, r2, r6, r3
 800fbc0:	b289      	uxth	r1, r1
 800fbc2:	3001      	adds	r0, #1
 800fbc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fbc8:	4285      	cmp	r5, r0
 800fbca:	f84c 1b04 	str.w	r1, [ip], #4
 800fbce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fbd2:	dcec      	bgt.n	800fbae <__multadd+0x12>
 800fbd4:	b30e      	cbz	r6, 800fc1a <__multadd+0x7e>
 800fbd6:	68a3      	ldr	r3, [r4, #8]
 800fbd8:	42ab      	cmp	r3, r5
 800fbda:	dc19      	bgt.n	800fc10 <__multadd+0x74>
 800fbdc:	6861      	ldr	r1, [r4, #4]
 800fbde:	4638      	mov	r0, r7
 800fbe0:	3101      	adds	r1, #1
 800fbe2:	f7ff ff79 	bl	800fad8 <_Balloc>
 800fbe6:	4680      	mov	r8, r0
 800fbe8:	b928      	cbnz	r0, 800fbf6 <__multadd+0x5a>
 800fbea:	4602      	mov	r2, r0
 800fbec:	4b0c      	ldr	r3, [pc, #48]	@ (800fc20 <__multadd+0x84>)
 800fbee:	480d      	ldr	r0, [pc, #52]	@ (800fc24 <__multadd+0x88>)
 800fbf0:	21ba      	movs	r1, #186	@ 0xba
 800fbf2:	f000 fd21 	bl	8010638 <__assert_func>
 800fbf6:	6922      	ldr	r2, [r4, #16]
 800fbf8:	3202      	adds	r2, #2
 800fbfa:	f104 010c 	add.w	r1, r4, #12
 800fbfe:	0092      	lsls	r2, r2, #2
 800fc00:	300c      	adds	r0, #12
 800fc02:	f7ff f80e 	bl	800ec22 <memcpy>
 800fc06:	4621      	mov	r1, r4
 800fc08:	4638      	mov	r0, r7
 800fc0a:	f7ff ffa5 	bl	800fb58 <_Bfree>
 800fc0e:	4644      	mov	r4, r8
 800fc10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc14:	3501      	adds	r5, #1
 800fc16:	615e      	str	r6, [r3, #20]
 800fc18:	6125      	str	r5, [r4, #16]
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc20:	08012068 	.word	0x08012068
 800fc24:	08012079 	.word	0x08012079

0800fc28 <__hi0bits>:
 800fc28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	bf36      	itet	cc
 800fc30:	0403      	lslcc	r3, r0, #16
 800fc32:	2000      	movcs	r0, #0
 800fc34:	2010      	movcc	r0, #16
 800fc36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fc3a:	bf3c      	itt	cc
 800fc3c:	021b      	lslcc	r3, r3, #8
 800fc3e:	3008      	addcc	r0, #8
 800fc40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fc44:	bf3c      	itt	cc
 800fc46:	011b      	lslcc	r3, r3, #4
 800fc48:	3004      	addcc	r0, #4
 800fc4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc4e:	bf3c      	itt	cc
 800fc50:	009b      	lslcc	r3, r3, #2
 800fc52:	3002      	addcc	r0, #2
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	db05      	blt.n	800fc64 <__hi0bits+0x3c>
 800fc58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fc5c:	f100 0001 	add.w	r0, r0, #1
 800fc60:	bf08      	it	eq
 800fc62:	2020      	moveq	r0, #32
 800fc64:	4770      	bx	lr

0800fc66 <__lo0bits>:
 800fc66:	6803      	ldr	r3, [r0, #0]
 800fc68:	4602      	mov	r2, r0
 800fc6a:	f013 0007 	ands.w	r0, r3, #7
 800fc6e:	d00b      	beq.n	800fc88 <__lo0bits+0x22>
 800fc70:	07d9      	lsls	r1, r3, #31
 800fc72:	d421      	bmi.n	800fcb8 <__lo0bits+0x52>
 800fc74:	0798      	lsls	r0, r3, #30
 800fc76:	bf49      	itett	mi
 800fc78:	085b      	lsrmi	r3, r3, #1
 800fc7a:	089b      	lsrpl	r3, r3, #2
 800fc7c:	2001      	movmi	r0, #1
 800fc7e:	6013      	strmi	r3, [r2, #0]
 800fc80:	bf5c      	itt	pl
 800fc82:	6013      	strpl	r3, [r2, #0]
 800fc84:	2002      	movpl	r0, #2
 800fc86:	4770      	bx	lr
 800fc88:	b299      	uxth	r1, r3
 800fc8a:	b909      	cbnz	r1, 800fc90 <__lo0bits+0x2a>
 800fc8c:	0c1b      	lsrs	r3, r3, #16
 800fc8e:	2010      	movs	r0, #16
 800fc90:	b2d9      	uxtb	r1, r3
 800fc92:	b909      	cbnz	r1, 800fc98 <__lo0bits+0x32>
 800fc94:	3008      	adds	r0, #8
 800fc96:	0a1b      	lsrs	r3, r3, #8
 800fc98:	0719      	lsls	r1, r3, #28
 800fc9a:	bf04      	itt	eq
 800fc9c:	091b      	lsreq	r3, r3, #4
 800fc9e:	3004      	addeq	r0, #4
 800fca0:	0799      	lsls	r1, r3, #30
 800fca2:	bf04      	itt	eq
 800fca4:	089b      	lsreq	r3, r3, #2
 800fca6:	3002      	addeq	r0, #2
 800fca8:	07d9      	lsls	r1, r3, #31
 800fcaa:	d403      	bmi.n	800fcb4 <__lo0bits+0x4e>
 800fcac:	085b      	lsrs	r3, r3, #1
 800fcae:	f100 0001 	add.w	r0, r0, #1
 800fcb2:	d003      	beq.n	800fcbc <__lo0bits+0x56>
 800fcb4:	6013      	str	r3, [r2, #0]
 800fcb6:	4770      	bx	lr
 800fcb8:	2000      	movs	r0, #0
 800fcba:	4770      	bx	lr
 800fcbc:	2020      	movs	r0, #32
 800fcbe:	4770      	bx	lr

0800fcc0 <__i2b>:
 800fcc0:	b510      	push	{r4, lr}
 800fcc2:	460c      	mov	r4, r1
 800fcc4:	2101      	movs	r1, #1
 800fcc6:	f7ff ff07 	bl	800fad8 <_Balloc>
 800fcca:	4602      	mov	r2, r0
 800fccc:	b928      	cbnz	r0, 800fcda <__i2b+0x1a>
 800fcce:	4b05      	ldr	r3, [pc, #20]	@ (800fce4 <__i2b+0x24>)
 800fcd0:	4805      	ldr	r0, [pc, #20]	@ (800fce8 <__i2b+0x28>)
 800fcd2:	f240 1145 	movw	r1, #325	@ 0x145
 800fcd6:	f000 fcaf 	bl	8010638 <__assert_func>
 800fcda:	2301      	movs	r3, #1
 800fcdc:	6144      	str	r4, [r0, #20]
 800fcde:	6103      	str	r3, [r0, #16]
 800fce0:	bd10      	pop	{r4, pc}
 800fce2:	bf00      	nop
 800fce4:	08012068 	.word	0x08012068
 800fce8:	08012079 	.word	0x08012079

0800fcec <__multiply>:
 800fcec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf0:	4614      	mov	r4, r2
 800fcf2:	690a      	ldr	r2, [r1, #16]
 800fcf4:	6923      	ldr	r3, [r4, #16]
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	bfa8      	it	ge
 800fcfa:	4623      	movge	r3, r4
 800fcfc:	460f      	mov	r7, r1
 800fcfe:	bfa4      	itt	ge
 800fd00:	460c      	movge	r4, r1
 800fd02:	461f      	movge	r7, r3
 800fd04:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fd08:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fd0c:	68a3      	ldr	r3, [r4, #8]
 800fd0e:	6861      	ldr	r1, [r4, #4]
 800fd10:	eb0a 0609 	add.w	r6, sl, r9
 800fd14:	42b3      	cmp	r3, r6
 800fd16:	b085      	sub	sp, #20
 800fd18:	bfb8      	it	lt
 800fd1a:	3101      	addlt	r1, #1
 800fd1c:	f7ff fedc 	bl	800fad8 <_Balloc>
 800fd20:	b930      	cbnz	r0, 800fd30 <__multiply+0x44>
 800fd22:	4602      	mov	r2, r0
 800fd24:	4b44      	ldr	r3, [pc, #272]	@ (800fe38 <__multiply+0x14c>)
 800fd26:	4845      	ldr	r0, [pc, #276]	@ (800fe3c <__multiply+0x150>)
 800fd28:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fd2c:	f000 fc84 	bl	8010638 <__assert_func>
 800fd30:	f100 0514 	add.w	r5, r0, #20
 800fd34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fd38:	462b      	mov	r3, r5
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	4543      	cmp	r3, r8
 800fd3e:	d321      	bcc.n	800fd84 <__multiply+0x98>
 800fd40:	f107 0114 	add.w	r1, r7, #20
 800fd44:	f104 0214 	add.w	r2, r4, #20
 800fd48:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fd4c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fd50:	9302      	str	r3, [sp, #8]
 800fd52:	1b13      	subs	r3, r2, r4
 800fd54:	3b15      	subs	r3, #21
 800fd56:	f023 0303 	bic.w	r3, r3, #3
 800fd5a:	3304      	adds	r3, #4
 800fd5c:	f104 0715 	add.w	r7, r4, #21
 800fd60:	42ba      	cmp	r2, r7
 800fd62:	bf38      	it	cc
 800fd64:	2304      	movcc	r3, #4
 800fd66:	9301      	str	r3, [sp, #4]
 800fd68:	9b02      	ldr	r3, [sp, #8]
 800fd6a:	9103      	str	r1, [sp, #12]
 800fd6c:	428b      	cmp	r3, r1
 800fd6e:	d80c      	bhi.n	800fd8a <__multiply+0x9e>
 800fd70:	2e00      	cmp	r6, #0
 800fd72:	dd03      	ble.n	800fd7c <__multiply+0x90>
 800fd74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d05b      	beq.n	800fe34 <__multiply+0x148>
 800fd7c:	6106      	str	r6, [r0, #16]
 800fd7e:	b005      	add	sp, #20
 800fd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd84:	f843 2b04 	str.w	r2, [r3], #4
 800fd88:	e7d8      	b.n	800fd3c <__multiply+0x50>
 800fd8a:	f8b1 a000 	ldrh.w	sl, [r1]
 800fd8e:	f1ba 0f00 	cmp.w	sl, #0
 800fd92:	d024      	beq.n	800fdde <__multiply+0xf2>
 800fd94:	f104 0e14 	add.w	lr, r4, #20
 800fd98:	46a9      	mov	r9, r5
 800fd9a:	f04f 0c00 	mov.w	ip, #0
 800fd9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fda2:	f8d9 3000 	ldr.w	r3, [r9]
 800fda6:	fa1f fb87 	uxth.w	fp, r7
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	fb0a 330b 	mla	r3, sl, fp, r3
 800fdb0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fdb4:	f8d9 7000 	ldr.w	r7, [r9]
 800fdb8:	4463      	add	r3, ip
 800fdba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fdbe:	fb0a c70b 	mla	r7, sl, fp, ip
 800fdc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fdc6:	b29b      	uxth	r3, r3
 800fdc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fdcc:	4572      	cmp	r2, lr
 800fdce:	f849 3b04 	str.w	r3, [r9], #4
 800fdd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fdd6:	d8e2      	bhi.n	800fd9e <__multiply+0xb2>
 800fdd8:	9b01      	ldr	r3, [sp, #4]
 800fdda:	f845 c003 	str.w	ip, [r5, r3]
 800fdde:	9b03      	ldr	r3, [sp, #12]
 800fde0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fde4:	3104      	adds	r1, #4
 800fde6:	f1b9 0f00 	cmp.w	r9, #0
 800fdea:	d021      	beq.n	800fe30 <__multiply+0x144>
 800fdec:	682b      	ldr	r3, [r5, #0]
 800fdee:	f104 0c14 	add.w	ip, r4, #20
 800fdf2:	46ae      	mov	lr, r5
 800fdf4:	f04f 0a00 	mov.w	sl, #0
 800fdf8:	f8bc b000 	ldrh.w	fp, [ip]
 800fdfc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fe00:	fb09 770b 	mla	r7, r9, fp, r7
 800fe04:	4457      	add	r7, sl
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fe0c:	f84e 3b04 	str.w	r3, [lr], #4
 800fe10:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fe14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe18:	f8be 3000 	ldrh.w	r3, [lr]
 800fe1c:	fb09 330a 	mla	r3, r9, sl, r3
 800fe20:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fe24:	4562      	cmp	r2, ip
 800fe26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fe2a:	d8e5      	bhi.n	800fdf8 <__multiply+0x10c>
 800fe2c:	9f01      	ldr	r7, [sp, #4]
 800fe2e:	51eb      	str	r3, [r5, r7]
 800fe30:	3504      	adds	r5, #4
 800fe32:	e799      	b.n	800fd68 <__multiply+0x7c>
 800fe34:	3e01      	subs	r6, #1
 800fe36:	e79b      	b.n	800fd70 <__multiply+0x84>
 800fe38:	08012068 	.word	0x08012068
 800fe3c:	08012079 	.word	0x08012079

0800fe40 <__pow5mult>:
 800fe40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe44:	4615      	mov	r5, r2
 800fe46:	f012 0203 	ands.w	r2, r2, #3
 800fe4a:	4607      	mov	r7, r0
 800fe4c:	460e      	mov	r6, r1
 800fe4e:	d007      	beq.n	800fe60 <__pow5mult+0x20>
 800fe50:	4c25      	ldr	r4, [pc, #148]	@ (800fee8 <__pow5mult+0xa8>)
 800fe52:	3a01      	subs	r2, #1
 800fe54:	2300      	movs	r3, #0
 800fe56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fe5a:	f7ff fe9f 	bl	800fb9c <__multadd>
 800fe5e:	4606      	mov	r6, r0
 800fe60:	10ad      	asrs	r5, r5, #2
 800fe62:	d03d      	beq.n	800fee0 <__pow5mult+0xa0>
 800fe64:	69fc      	ldr	r4, [r7, #28]
 800fe66:	b97c      	cbnz	r4, 800fe88 <__pow5mult+0x48>
 800fe68:	2010      	movs	r0, #16
 800fe6a:	f7ff fd7f 	bl	800f96c <malloc>
 800fe6e:	4602      	mov	r2, r0
 800fe70:	61f8      	str	r0, [r7, #28]
 800fe72:	b928      	cbnz	r0, 800fe80 <__pow5mult+0x40>
 800fe74:	4b1d      	ldr	r3, [pc, #116]	@ (800feec <__pow5mult+0xac>)
 800fe76:	481e      	ldr	r0, [pc, #120]	@ (800fef0 <__pow5mult+0xb0>)
 800fe78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fe7c:	f000 fbdc 	bl	8010638 <__assert_func>
 800fe80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fe84:	6004      	str	r4, [r0, #0]
 800fe86:	60c4      	str	r4, [r0, #12]
 800fe88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fe8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fe90:	b94c      	cbnz	r4, 800fea6 <__pow5mult+0x66>
 800fe92:	f240 2171 	movw	r1, #625	@ 0x271
 800fe96:	4638      	mov	r0, r7
 800fe98:	f7ff ff12 	bl	800fcc0 <__i2b>
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fea2:	4604      	mov	r4, r0
 800fea4:	6003      	str	r3, [r0, #0]
 800fea6:	f04f 0900 	mov.w	r9, #0
 800feaa:	07eb      	lsls	r3, r5, #31
 800feac:	d50a      	bpl.n	800fec4 <__pow5mult+0x84>
 800feae:	4631      	mov	r1, r6
 800feb0:	4622      	mov	r2, r4
 800feb2:	4638      	mov	r0, r7
 800feb4:	f7ff ff1a 	bl	800fcec <__multiply>
 800feb8:	4631      	mov	r1, r6
 800feba:	4680      	mov	r8, r0
 800febc:	4638      	mov	r0, r7
 800febe:	f7ff fe4b 	bl	800fb58 <_Bfree>
 800fec2:	4646      	mov	r6, r8
 800fec4:	106d      	asrs	r5, r5, #1
 800fec6:	d00b      	beq.n	800fee0 <__pow5mult+0xa0>
 800fec8:	6820      	ldr	r0, [r4, #0]
 800feca:	b938      	cbnz	r0, 800fedc <__pow5mult+0x9c>
 800fecc:	4622      	mov	r2, r4
 800fece:	4621      	mov	r1, r4
 800fed0:	4638      	mov	r0, r7
 800fed2:	f7ff ff0b 	bl	800fcec <__multiply>
 800fed6:	6020      	str	r0, [r4, #0]
 800fed8:	f8c0 9000 	str.w	r9, [r0]
 800fedc:	4604      	mov	r4, r0
 800fede:	e7e4      	b.n	800feaa <__pow5mult+0x6a>
 800fee0:	4630      	mov	r0, r6
 800fee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fee6:	bf00      	nop
 800fee8:	080120d4 	.word	0x080120d4
 800feec:	08011ff9 	.word	0x08011ff9
 800fef0:	08012079 	.word	0x08012079

0800fef4 <__lshift>:
 800fef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fef8:	460c      	mov	r4, r1
 800fefa:	6849      	ldr	r1, [r1, #4]
 800fefc:	6923      	ldr	r3, [r4, #16]
 800fefe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff02:	68a3      	ldr	r3, [r4, #8]
 800ff04:	4607      	mov	r7, r0
 800ff06:	4691      	mov	r9, r2
 800ff08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff0c:	f108 0601 	add.w	r6, r8, #1
 800ff10:	42b3      	cmp	r3, r6
 800ff12:	db0b      	blt.n	800ff2c <__lshift+0x38>
 800ff14:	4638      	mov	r0, r7
 800ff16:	f7ff fddf 	bl	800fad8 <_Balloc>
 800ff1a:	4605      	mov	r5, r0
 800ff1c:	b948      	cbnz	r0, 800ff32 <__lshift+0x3e>
 800ff1e:	4602      	mov	r2, r0
 800ff20:	4b28      	ldr	r3, [pc, #160]	@ (800ffc4 <__lshift+0xd0>)
 800ff22:	4829      	ldr	r0, [pc, #164]	@ (800ffc8 <__lshift+0xd4>)
 800ff24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ff28:	f000 fb86 	bl	8010638 <__assert_func>
 800ff2c:	3101      	adds	r1, #1
 800ff2e:	005b      	lsls	r3, r3, #1
 800ff30:	e7ee      	b.n	800ff10 <__lshift+0x1c>
 800ff32:	2300      	movs	r3, #0
 800ff34:	f100 0114 	add.w	r1, r0, #20
 800ff38:	f100 0210 	add.w	r2, r0, #16
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	4553      	cmp	r3, sl
 800ff40:	db33      	blt.n	800ffaa <__lshift+0xb6>
 800ff42:	6920      	ldr	r0, [r4, #16]
 800ff44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff48:	f104 0314 	add.w	r3, r4, #20
 800ff4c:	f019 091f 	ands.w	r9, r9, #31
 800ff50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ff54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ff58:	d02b      	beq.n	800ffb2 <__lshift+0xbe>
 800ff5a:	f1c9 0e20 	rsb	lr, r9, #32
 800ff5e:	468a      	mov	sl, r1
 800ff60:	2200      	movs	r2, #0
 800ff62:	6818      	ldr	r0, [r3, #0]
 800ff64:	fa00 f009 	lsl.w	r0, r0, r9
 800ff68:	4310      	orrs	r0, r2
 800ff6a:	f84a 0b04 	str.w	r0, [sl], #4
 800ff6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff72:	459c      	cmp	ip, r3
 800ff74:	fa22 f20e 	lsr.w	r2, r2, lr
 800ff78:	d8f3      	bhi.n	800ff62 <__lshift+0x6e>
 800ff7a:	ebac 0304 	sub.w	r3, ip, r4
 800ff7e:	3b15      	subs	r3, #21
 800ff80:	f023 0303 	bic.w	r3, r3, #3
 800ff84:	3304      	adds	r3, #4
 800ff86:	f104 0015 	add.w	r0, r4, #21
 800ff8a:	4584      	cmp	ip, r0
 800ff8c:	bf38      	it	cc
 800ff8e:	2304      	movcc	r3, #4
 800ff90:	50ca      	str	r2, [r1, r3]
 800ff92:	b10a      	cbz	r2, 800ff98 <__lshift+0xa4>
 800ff94:	f108 0602 	add.w	r6, r8, #2
 800ff98:	3e01      	subs	r6, #1
 800ff9a:	4638      	mov	r0, r7
 800ff9c:	612e      	str	r6, [r5, #16]
 800ff9e:	4621      	mov	r1, r4
 800ffa0:	f7ff fdda 	bl	800fb58 <_Bfree>
 800ffa4:	4628      	mov	r0, r5
 800ffa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800ffae:	3301      	adds	r3, #1
 800ffb0:	e7c5      	b.n	800ff3e <__lshift+0x4a>
 800ffb2:	3904      	subs	r1, #4
 800ffb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ffbc:	459c      	cmp	ip, r3
 800ffbe:	d8f9      	bhi.n	800ffb4 <__lshift+0xc0>
 800ffc0:	e7ea      	b.n	800ff98 <__lshift+0xa4>
 800ffc2:	bf00      	nop
 800ffc4:	08012068 	.word	0x08012068
 800ffc8:	08012079 	.word	0x08012079

0800ffcc <__mcmp>:
 800ffcc:	690a      	ldr	r2, [r1, #16]
 800ffce:	4603      	mov	r3, r0
 800ffd0:	6900      	ldr	r0, [r0, #16]
 800ffd2:	1a80      	subs	r0, r0, r2
 800ffd4:	b530      	push	{r4, r5, lr}
 800ffd6:	d10e      	bne.n	800fff6 <__mcmp+0x2a>
 800ffd8:	3314      	adds	r3, #20
 800ffda:	3114      	adds	r1, #20
 800ffdc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ffe0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ffe4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ffe8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ffec:	4295      	cmp	r5, r2
 800ffee:	d003      	beq.n	800fff8 <__mcmp+0x2c>
 800fff0:	d205      	bcs.n	800fffe <__mcmp+0x32>
 800fff2:	f04f 30ff 	mov.w	r0, #4294967295
 800fff6:	bd30      	pop	{r4, r5, pc}
 800fff8:	42a3      	cmp	r3, r4
 800fffa:	d3f3      	bcc.n	800ffe4 <__mcmp+0x18>
 800fffc:	e7fb      	b.n	800fff6 <__mcmp+0x2a>
 800fffe:	2001      	movs	r0, #1
 8010000:	e7f9      	b.n	800fff6 <__mcmp+0x2a>
	...

08010004 <__mdiff>:
 8010004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010008:	4689      	mov	r9, r1
 801000a:	4606      	mov	r6, r0
 801000c:	4611      	mov	r1, r2
 801000e:	4648      	mov	r0, r9
 8010010:	4614      	mov	r4, r2
 8010012:	f7ff ffdb 	bl	800ffcc <__mcmp>
 8010016:	1e05      	subs	r5, r0, #0
 8010018:	d112      	bne.n	8010040 <__mdiff+0x3c>
 801001a:	4629      	mov	r1, r5
 801001c:	4630      	mov	r0, r6
 801001e:	f7ff fd5b 	bl	800fad8 <_Balloc>
 8010022:	4602      	mov	r2, r0
 8010024:	b928      	cbnz	r0, 8010032 <__mdiff+0x2e>
 8010026:	4b3f      	ldr	r3, [pc, #252]	@ (8010124 <__mdiff+0x120>)
 8010028:	f240 2137 	movw	r1, #567	@ 0x237
 801002c:	483e      	ldr	r0, [pc, #248]	@ (8010128 <__mdiff+0x124>)
 801002e:	f000 fb03 	bl	8010638 <__assert_func>
 8010032:	2301      	movs	r3, #1
 8010034:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010038:	4610      	mov	r0, r2
 801003a:	b003      	add	sp, #12
 801003c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010040:	bfbc      	itt	lt
 8010042:	464b      	movlt	r3, r9
 8010044:	46a1      	movlt	r9, r4
 8010046:	4630      	mov	r0, r6
 8010048:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801004c:	bfba      	itte	lt
 801004e:	461c      	movlt	r4, r3
 8010050:	2501      	movlt	r5, #1
 8010052:	2500      	movge	r5, #0
 8010054:	f7ff fd40 	bl	800fad8 <_Balloc>
 8010058:	4602      	mov	r2, r0
 801005a:	b918      	cbnz	r0, 8010064 <__mdiff+0x60>
 801005c:	4b31      	ldr	r3, [pc, #196]	@ (8010124 <__mdiff+0x120>)
 801005e:	f240 2145 	movw	r1, #581	@ 0x245
 8010062:	e7e3      	b.n	801002c <__mdiff+0x28>
 8010064:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010068:	6926      	ldr	r6, [r4, #16]
 801006a:	60c5      	str	r5, [r0, #12]
 801006c:	f109 0310 	add.w	r3, r9, #16
 8010070:	f109 0514 	add.w	r5, r9, #20
 8010074:	f104 0e14 	add.w	lr, r4, #20
 8010078:	f100 0b14 	add.w	fp, r0, #20
 801007c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010080:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010084:	9301      	str	r3, [sp, #4]
 8010086:	46d9      	mov	r9, fp
 8010088:	f04f 0c00 	mov.w	ip, #0
 801008c:	9b01      	ldr	r3, [sp, #4]
 801008e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010092:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010096:	9301      	str	r3, [sp, #4]
 8010098:	fa1f f38a 	uxth.w	r3, sl
 801009c:	4619      	mov	r1, r3
 801009e:	b283      	uxth	r3, r0
 80100a0:	1acb      	subs	r3, r1, r3
 80100a2:	0c00      	lsrs	r0, r0, #16
 80100a4:	4463      	add	r3, ip
 80100a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80100aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80100b4:	4576      	cmp	r6, lr
 80100b6:	f849 3b04 	str.w	r3, [r9], #4
 80100ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80100be:	d8e5      	bhi.n	801008c <__mdiff+0x88>
 80100c0:	1b33      	subs	r3, r6, r4
 80100c2:	3b15      	subs	r3, #21
 80100c4:	f023 0303 	bic.w	r3, r3, #3
 80100c8:	3415      	adds	r4, #21
 80100ca:	3304      	adds	r3, #4
 80100cc:	42a6      	cmp	r6, r4
 80100ce:	bf38      	it	cc
 80100d0:	2304      	movcc	r3, #4
 80100d2:	441d      	add	r5, r3
 80100d4:	445b      	add	r3, fp
 80100d6:	461e      	mov	r6, r3
 80100d8:	462c      	mov	r4, r5
 80100da:	4544      	cmp	r4, r8
 80100dc:	d30e      	bcc.n	80100fc <__mdiff+0xf8>
 80100de:	f108 0103 	add.w	r1, r8, #3
 80100e2:	1b49      	subs	r1, r1, r5
 80100e4:	f021 0103 	bic.w	r1, r1, #3
 80100e8:	3d03      	subs	r5, #3
 80100ea:	45a8      	cmp	r8, r5
 80100ec:	bf38      	it	cc
 80100ee:	2100      	movcc	r1, #0
 80100f0:	440b      	add	r3, r1
 80100f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80100f6:	b191      	cbz	r1, 801011e <__mdiff+0x11a>
 80100f8:	6117      	str	r7, [r2, #16]
 80100fa:	e79d      	b.n	8010038 <__mdiff+0x34>
 80100fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8010100:	46e6      	mov	lr, ip
 8010102:	0c08      	lsrs	r0, r1, #16
 8010104:	fa1c fc81 	uxtah	ip, ip, r1
 8010108:	4471      	add	r1, lr
 801010a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801010e:	b289      	uxth	r1, r1
 8010110:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010114:	f846 1b04 	str.w	r1, [r6], #4
 8010118:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801011c:	e7dd      	b.n	80100da <__mdiff+0xd6>
 801011e:	3f01      	subs	r7, #1
 8010120:	e7e7      	b.n	80100f2 <__mdiff+0xee>
 8010122:	bf00      	nop
 8010124:	08012068 	.word	0x08012068
 8010128:	08012079 	.word	0x08012079

0801012c <__d2b>:
 801012c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010130:	460f      	mov	r7, r1
 8010132:	2101      	movs	r1, #1
 8010134:	ec59 8b10 	vmov	r8, r9, d0
 8010138:	4616      	mov	r6, r2
 801013a:	f7ff fccd 	bl	800fad8 <_Balloc>
 801013e:	4604      	mov	r4, r0
 8010140:	b930      	cbnz	r0, 8010150 <__d2b+0x24>
 8010142:	4602      	mov	r2, r0
 8010144:	4b23      	ldr	r3, [pc, #140]	@ (80101d4 <__d2b+0xa8>)
 8010146:	4824      	ldr	r0, [pc, #144]	@ (80101d8 <__d2b+0xac>)
 8010148:	f240 310f 	movw	r1, #783	@ 0x30f
 801014c:	f000 fa74 	bl	8010638 <__assert_func>
 8010150:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010154:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010158:	b10d      	cbz	r5, 801015e <__d2b+0x32>
 801015a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801015e:	9301      	str	r3, [sp, #4]
 8010160:	f1b8 0300 	subs.w	r3, r8, #0
 8010164:	d023      	beq.n	80101ae <__d2b+0x82>
 8010166:	4668      	mov	r0, sp
 8010168:	9300      	str	r3, [sp, #0]
 801016a:	f7ff fd7c 	bl	800fc66 <__lo0bits>
 801016e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010172:	b1d0      	cbz	r0, 80101aa <__d2b+0x7e>
 8010174:	f1c0 0320 	rsb	r3, r0, #32
 8010178:	fa02 f303 	lsl.w	r3, r2, r3
 801017c:	430b      	orrs	r3, r1
 801017e:	40c2      	lsrs	r2, r0
 8010180:	6163      	str	r3, [r4, #20]
 8010182:	9201      	str	r2, [sp, #4]
 8010184:	9b01      	ldr	r3, [sp, #4]
 8010186:	61a3      	str	r3, [r4, #24]
 8010188:	2b00      	cmp	r3, #0
 801018a:	bf0c      	ite	eq
 801018c:	2201      	moveq	r2, #1
 801018e:	2202      	movne	r2, #2
 8010190:	6122      	str	r2, [r4, #16]
 8010192:	b1a5      	cbz	r5, 80101be <__d2b+0x92>
 8010194:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010198:	4405      	add	r5, r0
 801019a:	603d      	str	r5, [r7, #0]
 801019c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80101a0:	6030      	str	r0, [r6, #0]
 80101a2:	4620      	mov	r0, r4
 80101a4:	b003      	add	sp, #12
 80101a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101aa:	6161      	str	r1, [r4, #20]
 80101ac:	e7ea      	b.n	8010184 <__d2b+0x58>
 80101ae:	a801      	add	r0, sp, #4
 80101b0:	f7ff fd59 	bl	800fc66 <__lo0bits>
 80101b4:	9b01      	ldr	r3, [sp, #4]
 80101b6:	6163      	str	r3, [r4, #20]
 80101b8:	3020      	adds	r0, #32
 80101ba:	2201      	movs	r2, #1
 80101bc:	e7e8      	b.n	8010190 <__d2b+0x64>
 80101be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80101c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80101c6:	6038      	str	r0, [r7, #0]
 80101c8:	6918      	ldr	r0, [r3, #16]
 80101ca:	f7ff fd2d 	bl	800fc28 <__hi0bits>
 80101ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80101d2:	e7e5      	b.n	80101a0 <__d2b+0x74>
 80101d4:	08012068 	.word	0x08012068
 80101d8:	08012079 	.word	0x08012079

080101dc <__ssputs_r>:
 80101dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101e0:	688e      	ldr	r6, [r1, #8]
 80101e2:	461f      	mov	r7, r3
 80101e4:	42be      	cmp	r6, r7
 80101e6:	680b      	ldr	r3, [r1, #0]
 80101e8:	4682      	mov	sl, r0
 80101ea:	460c      	mov	r4, r1
 80101ec:	4690      	mov	r8, r2
 80101ee:	d82d      	bhi.n	801024c <__ssputs_r+0x70>
 80101f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80101f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80101f8:	d026      	beq.n	8010248 <__ssputs_r+0x6c>
 80101fa:	6965      	ldr	r5, [r4, #20]
 80101fc:	6909      	ldr	r1, [r1, #16]
 80101fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010202:	eba3 0901 	sub.w	r9, r3, r1
 8010206:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801020a:	1c7b      	adds	r3, r7, #1
 801020c:	444b      	add	r3, r9
 801020e:	106d      	asrs	r5, r5, #1
 8010210:	429d      	cmp	r5, r3
 8010212:	bf38      	it	cc
 8010214:	461d      	movcc	r5, r3
 8010216:	0553      	lsls	r3, r2, #21
 8010218:	d527      	bpl.n	801026a <__ssputs_r+0x8e>
 801021a:	4629      	mov	r1, r5
 801021c:	f7ff fbd0 	bl	800f9c0 <_malloc_r>
 8010220:	4606      	mov	r6, r0
 8010222:	b360      	cbz	r0, 801027e <__ssputs_r+0xa2>
 8010224:	6921      	ldr	r1, [r4, #16]
 8010226:	464a      	mov	r2, r9
 8010228:	f7fe fcfb 	bl	800ec22 <memcpy>
 801022c:	89a3      	ldrh	r3, [r4, #12]
 801022e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010236:	81a3      	strh	r3, [r4, #12]
 8010238:	6126      	str	r6, [r4, #16]
 801023a:	6165      	str	r5, [r4, #20]
 801023c:	444e      	add	r6, r9
 801023e:	eba5 0509 	sub.w	r5, r5, r9
 8010242:	6026      	str	r6, [r4, #0]
 8010244:	60a5      	str	r5, [r4, #8]
 8010246:	463e      	mov	r6, r7
 8010248:	42be      	cmp	r6, r7
 801024a:	d900      	bls.n	801024e <__ssputs_r+0x72>
 801024c:	463e      	mov	r6, r7
 801024e:	6820      	ldr	r0, [r4, #0]
 8010250:	4632      	mov	r2, r6
 8010252:	4641      	mov	r1, r8
 8010254:	f000 f9c6 	bl	80105e4 <memmove>
 8010258:	68a3      	ldr	r3, [r4, #8]
 801025a:	1b9b      	subs	r3, r3, r6
 801025c:	60a3      	str	r3, [r4, #8]
 801025e:	6823      	ldr	r3, [r4, #0]
 8010260:	4433      	add	r3, r6
 8010262:	6023      	str	r3, [r4, #0]
 8010264:	2000      	movs	r0, #0
 8010266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801026a:	462a      	mov	r2, r5
 801026c:	f000 fa28 	bl	80106c0 <_realloc_r>
 8010270:	4606      	mov	r6, r0
 8010272:	2800      	cmp	r0, #0
 8010274:	d1e0      	bne.n	8010238 <__ssputs_r+0x5c>
 8010276:	6921      	ldr	r1, [r4, #16]
 8010278:	4650      	mov	r0, sl
 801027a:	f7ff fb2d 	bl	800f8d8 <_free_r>
 801027e:	230c      	movs	r3, #12
 8010280:	f8ca 3000 	str.w	r3, [sl]
 8010284:	89a3      	ldrh	r3, [r4, #12]
 8010286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801028a:	81a3      	strh	r3, [r4, #12]
 801028c:	f04f 30ff 	mov.w	r0, #4294967295
 8010290:	e7e9      	b.n	8010266 <__ssputs_r+0x8a>
	...

08010294 <_svfiprintf_r>:
 8010294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010298:	4698      	mov	r8, r3
 801029a:	898b      	ldrh	r3, [r1, #12]
 801029c:	061b      	lsls	r3, r3, #24
 801029e:	b09d      	sub	sp, #116	@ 0x74
 80102a0:	4607      	mov	r7, r0
 80102a2:	460d      	mov	r5, r1
 80102a4:	4614      	mov	r4, r2
 80102a6:	d510      	bpl.n	80102ca <_svfiprintf_r+0x36>
 80102a8:	690b      	ldr	r3, [r1, #16]
 80102aa:	b973      	cbnz	r3, 80102ca <_svfiprintf_r+0x36>
 80102ac:	2140      	movs	r1, #64	@ 0x40
 80102ae:	f7ff fb87 	bl	800f9c0 <_malloc_r>
 80102b2:	6028      	str	r0, [r5, #0]
 80102b4:	6128      	str	r0, [r5, #16]
 80102b6:	b930      	cbnz	r0, 80102c6 <_svfiprintf_r+0x32>
 80102b8:	230c      	movs	r3, #12
 80102ba:	603b      	str	r3, [r7, #0]
 80102bc:	f04f 30ff 	mov.w	r0, #4294967295
 80102c0:	b01d      	add	sp, #116	@ 0x74
 80102c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c6:	2340      	movs	r3, #64	@ 0x40
 80102c8:	616b      	str	r3, [r5, #20]
 80102ca:	2300      	movs	r3, #0
 80102cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80102ce:	2320      	movs	r3, #32
 80102d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80102d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80102d8:	2330      	movs	r3, #48	@ 0x30
 80102da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010478 <_svfiprintf_r+0x1e4>
 80102de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80102e2:	f04f 0901 	mov.w	r9, #1
 80102e6:	4623      	mov	r3, r4
 80102e8:	469a      	mov	sl, r3
 80102ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102ee:	b10a      	cbz	r2, 80102f4 <_svfiprintf_r+0x60>
 80102f0:	2a25      	cmp	r2, #37	@ 0x25
 80102f2:	d1f9      	bne.n	80102e8 <_svfiprintf_r+0x54>
 80102f4:	ebba 0b04 	subs.w	fp, sl, r4
 80102f8:	d00b      	beq.n	8010312 <_svfiprintf_r+0x7e>
 80102fa:	465b      	mov	r3, fp
 80102fc:	4622      	mov	r2, r4
 80102fe:	4629      	mov	r1, r5
 8010300:	4638      	mov	r0, r7
 8010302:	f7ff ff6b 	bl	80101dc <__ssputs_r>
 8010306:	3001      	adds	r0, #1
 8010308:	f000 80a7 	beq.w	801045a <_svfiprintf_r+0x1c6>
 801030c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801030e:	445a      	add	r2, fp
 8010310:	9209      	str	r2, [sp, #36]	@ 0x24
 8010312:	f89a 3000 	ldrb.w	r3, [sl]
 8010316:	2b00      	cmp	r3, #0
 8010318:	f000 809f 	beq.w	801045a <_svfiprintf_r+0x1c6>
 801031c:	2300      	movs	r3, #0
 801031e:	f04f 32ff 	mov.w	r2, #4294967295
 8010322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010326:	f10a 0a01 	add.w	sl, sl, #1
 801032a:	9304      	str	r3, [sp, #16]
 801032c:	9307      	str	r3, [sp, #28]
 801032e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010332:	931a      	str	r3, [sp, #104]	@ 0x68
 8010334:	4654      	mov	r4, sl
 8010336:	2205      	movs	r2, #5
 8010338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801033c:	484e      	ldr	r0, [pc, #312]	@ (8010478 <_svfiprintf_r+0x1e4>)
 801033e:	f7ef ff7f 	bl	8000240 <memchr>
 8010342:	9a04      	ldr	r2, [sp, #16]
 8010344:	b9d8      	cbnz	r0, 801037e <_svfiprintf_r+0xea>
 8010346:	06d0      	lsls	r0, r2, #27
 8010348:	bf44      	itt	mi
 801034a:	2320      	movmi	r3, #32
 801034c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010350:	0711      	lsls	r1, r2, #28
 8010352:	bf44      	itt	mi
 8010354:	232b      	movmi	r3, #43	@ 0x2b
 8010356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801035a:	f89a 3000 	ldrb.w	r3, [sl]
 801035e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010360:	d015      	beq.n	801038e <_svfiprintf_r+0xfa>
 8010362:	9a07      	ldr	r2, [sp, #28]
 8010364:	4654      	mov	r4, sl
 8010366:	2000      	movs	r0, #0
 8010368:	f04f 0c0a 	mov.w	ip, #10
 801036c:	4621      	mov	r1, r4
 801036e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010372:	3b30      	subs	r3, #48	@ 0x30
 8010374:	2b09      	cmp	r3, #9
 8010376:	d94b      	bls.n	8010410 <_svfiprintf_r+0x17c>
 8010378:	b1b0      	cbz	r0, 80103a8 <_svfiprintf_r+0x114>
 801037a:	9207      	str	r2, [sp, #28]
 801037c:	e014      	b.n	80103a8 <_svfiprintf_r+0x114>
 801037e:	eba0 0308 	sub.w	r3, r0, r8
 8010382:	fa09 f303 	lsl.w	r3, r9, r3
 8010386:	4313      	orrs	r3, r2
 8010388:	9304      	str	r3, [sp, #16]
 801038a:	46a2      	mov	sl, r4
 801038c:	e7d2      	b.n	8010334 <_svfiprintf_r+0xa0>
 801038e:	9b03      	ldr	r3, [sp, #12]
 8010390:	1d19      	adds	r1, r3, #4
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	9103      	str	r1, [sp, #12]
 8010396:	2b00      	cmp	r3, #0
 8010398:	bfbb      	ittet	lt
 801039a:	425b      	neglt	r3, r3
 801039c:	f042 0202 	orrlt.w	r2, r2, #2
 80103a0:	9307      	strge	r3, [sp, #28]
 80103a2:	9307      	strlt	r3, [sp, #28]
 80103a4:	bfb8      	it	lt
 80103a6:	9204      	strlt	r2, [sp, #16]
 80103a8:	7823      	ldrb	r3, [r4, #0]
 80103aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80103ac:	d10a      	bne.n	80103c4 <_svfiprintf_r+0x130>
 80103ae:	7863      	ldrb	r3, [r4, #1]
 80103b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80103b2:	d132      	bne.n	801041a <_svfiprintf_r+0x186>
 80103b4:	9b03      	ldr	r3, [sp, #12]
 80103b6:	1d1a      	adds	r2, r3, #4
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	9203      	str	r2, [sp, #12]
 80103bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80103c0:	3402      	adds	r4, #2
 80103c2:	9305      	str	r3, [sp, #20]
 80103c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010488 <_svfiprintf_r+0x1f4>
 80103c8:	7821      	ldrb	r1, [r4, #0]
 80103ca:	2203      	movs	r2, #3
 80103cc:	4650      	mov	r0, sl
 80103ce:	f7ef ff37 	bl	8000240 <memchr>
 80103d2:	b138      	cbz	r0, 80103e4 <_svfiprintf_r+0x150>
 80103d4:	9b04      	ldr	r3, [sp, #16]
 80103d6:	eba0 000a 	sub.w	r0, r0, sl
 80103da:	2240      	movs	r2, #64	@ 0x40
 80103dc:	4082      	lsls	r2, r0
 80103de:	4313      	orrs	r3, r2
 80103e0:	3401      	adds	r4, #1
 80103e2:	9304      	str	r3, [sp, #16]
 80103e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103e8:	4824      	ldr	r0, [pc, #144]	@ (801047c <_svfiprintf_r+0x1e8>)
 80103ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80103ee:	2206      	movs	r2, #6
 80103f0:	f7ef ff26 	bl	8000240 <memchr>
 80103f4:	2800      	cmp	r0, #0
 80103f6:	d036      	beq.n	8010466 <_svfiprintf_r+0x1d2>
 80103f8:	4b21      	ldr	r3, [pc, #132]	@ (8010480 <_svfiprintf_r+0x1ec>)
 80103fa:	bb1b      	cbnz	r3, 8010444 <_svfiprintf_r+0x1b0>
 80103fc:	9b03      	ldr	r3, [sp, #12]
 80103fe:	3307      	adds	r3, #7
 8010400:	f023 0307 	bic.w	r3, r3, #7
 8010404:	3308      	adds	r3, #8
 8010406:	9303      	str	r3, [sp, #12]
 8010408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801040a:	4433      	add	r3, r6
 801040c:	9309      	str	r3, [sp, #36]	@ 0x24
 801040e:	e76a      	b.n	80102e6 <_svfiprintf_r+0x52>
 8010410:	fb0c 3202 	mla	r2, ip, r2, r3
 8010414:	460c      	mov	r4, r1
 8010416:	2001      	movs	r0, #1
 8010418:	e7a8      	b.n	801036c <_svfiprintf_r+0xd8>
 801041a:	2300      	movs	r3, #0
 801041c:	3401      	adds	r4, #1
 801041e:	9305      	str	r3, [sp, #20]
 8010420:	4619      	mov	r1, r3
 8010422:	f04f 0c0a 	mov.w	ip, #10
 8010426:	4620      	mov	r0, r4
 8010428:	f810 2b01 	ldrb.w	r2, [r0], #1
 801042c:	3a30      	subs	r2, #48	@ 0x30
 801042e:	2a09      	cmp	r2, #9
 8010430:	d903      	bls.n	801043a <_svfiprintf_r+0x1a6>
 8010432:	2b00      	cmp	r3, #0
 8010434:	d0c6      	beq.n	80103c4 <_svfiprintf_r+0x130>
 8010436:	9105      	str	r1, [sp, #20]
 8010438:	e7c4      	b.n	80103c4 <_svfiprintf_r+0x130>
 801043a:	fb0c 2101 	mla	r1, ip, r1, r2
 801043e:	4604      	mov	r4, r0
 8010440:	2301      	movs	r3, #1
 8010442:	e7f0      	b.n	8010426 <_svfiprintf_r+0x192>
 8010444:	ab03      	add	r3, sp, #12
 8010446:	9300      	str	r3, [sp, #0]
 8010448:	462a      	mov	r2, r5
 801044a:	4b0e      	ldr	r3, [pc, #56]	@ (8010484 <_svfiprintf_r+0x1f0>)
 801044c:	a904      	add	r1, sp, #16
 801044e:	4638      	mov	r0, r7
 8010450:	f7fd fe08 	bl	800e064 <_printf_float>
 8010454:	1c42      	adds	r2, r0, #1
 8010456:	4606      	mov	r6, r0
 8010458:	d1d6      	bne.n	8010408 <_svfiprintf_r+0x174>
 801045a:	89ab      	ldrh	r3, [r5, #12]
 801045c:	065b      	lsls	r3, r3, #25
 801045e:	f53f af2d 	bmi.w	80102bc <_svfiprintf_r+0x28>
 8010462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010464:	e72c      	b.n	80102c0 <_svfiprintf_r+0x2c>
 8010466:	ab03      	add	r3, sp, #12
 8010468:	9300      	str	r3, [sp, #0]
 801046a:	462a      	mov	r2, r5
 801046c:	4b05      	ldr	r3, [pc, #20]	@ (8010484 <_svfiprintf_r+0x1f0>)
 801046e:	a904      	add	r1, sp, #16
 8010470:	4638      	mov	r0, r7
 8010472:	f7fe f88f 	bl	800e594 <_printf_i>
 8010476:	e7ed      	b.n	8010454 <_svfiprintf_r+0x1c0>
 8010478:	080121d0 	.word	0x080121d0
 801047c:	080121da 	.word	0x080121da
 8010480:	0800e065 	.word	0x0800e065
 8010484:	080101dd 	.word	0x080101dd
 8010488:	080121d6 	.word	0x080121d6

0801048c <__sflush_r>:
 801048c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010494:	0716      	lsls	r6, r2, #28
 8010496:	4605      	mov	r5, r0
 8010498:	460c      	mov	r4, r1
 801049a:	d454      	bmi.n	8010546 <__sflush_r+0xba>
 801049c:	684b      	ldr	r3, [r1, #4]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	dc02      	bgt.n	80104a8 <__sflush_r+0x1c>
 80104a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	dd48      	ble.n	801053a <__sflush_r+0xae>
 80104a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80104aa:	2e00      	cmp	r6, #0
 80104ac:	d045      	beq.n	801053a <__sflush_r+0xae>
 80104ae:	2300      	movs	r3, #0
 80104b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80104b4:	682f      	ldr	r7, [r5, #0]
 80104b6:	6a21      	ldr	r1, [r4, #32]
 80104b8:	602b      	str	r3, [r5, #0]
 80104ba:	d030      	beq.n	801051e <__sflush_r+0x92>
 80104bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80104be:	89a3      	ldrh	r3, [r4, #12]
 80104c0:	0759      	lsls	r1, r3, #29
 80104c2:	d505      	bpl.n	80104d0 <__sflush_r+0x44>
 80104c4:	6863      	ldr	r3, [r4, #4]
 80104c6:	1ad2      	subs	r2, r2, r3
 80104c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80104ca:	b10b      	cbz	r3, 80104d0 <__sflush_r+0x44>
 80104cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80104ce:	1ad2      	subs	r2, r2, r3
 80104d0:	2300      	movs	r3, #0
 80104d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80104d4:	6a21      	ldr	r1, [r4, #32]
 80104d6:	4628      	mov	r0, r5
 80104d8:	47b0      	blx	r6
 80104da:	1c43      	adds	r3, r0, #1
 80104dc:	89a3      	ldrh	r3, [r4, #12]
 80104de:	d106      	bne.n	80104ee <__sflush_r+0x62>
 80104e0:	6829      	ldr	r1, [r5, #0]
 80104e2:	291d      	cmp	r1, #29
 80104e4:	d82b      	bhi.n	801053e <__sflush_r+0xb2>
 80104e6:	4a2a      	ldr	r2, [pc, #168]	@ (8010590 <__sflush_r+0x104>)
 80104e8:	410a      	asrs	r2, r1
 80104ea:	07d6      	lsls	r6, r2, #31
 80104ec:	d427      	bmi.n	801053e <__sflush_r+0xb2>
 80104ee:	2200      	movs	r2, #0
 80104f0:	6062      	str	r2, [r4, #4]
 80104f2:	04d9      	lsls	r1, r3, #19
 80104f4:	6922      	ldr	r2, [r4, #16]
 80104f6:	6022      	str	r2, [r4, #0]
 80104f8:	d504      	bpl.n	8010504 <__sflush_r+0x78>
 80104fa:	1c42      	adds	r2, r0, #1
 80104fc:	d101      	bne.n	8010502 <__sflush_r+0x76>
 80104fe:	682b      	ldr	r3, [r5, #0]
 8010500:	b903      	cbnz	r3, 8010504 <__sflush_r+0x78>
 8010502:	6560      	str	r0, [r4, #84]	@ 0x54
 8010504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010506:	602f      	str	r7, [r5, #0]
 8010508:	b1b9      	cbz	r1, 801053a <__sflush_r+0xae>
 801050a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801050e:	4299      	cmp	r1, r3
 8010510:	d002      	beq.n	8010518 <__sflush_r+0x8c>
 8010512:	4628      	mov	r0, r5
 8010514:	f7ff f9e0 	bl	800f8d8 <_free_r>
 8010518:	2300      	movs	r3, #0
 801051a:	6363      	str	r3, [r4, #52]	@ 0x34
 801051c:	e00d      	b.n	801053a <__sflush_r+0xae>
 801051e:	2301      	movs	r3, #1
 8010520:	4628      	mov	r0, r5
 8010522:	47b0      	blx	r6
 8010524:	4602      	mov	r2, r0
 8010526:	1c50      	adds	r0, r2, #1
 8010528:	d1c9      	bne.n	80104be <__sflush_r+0x32>
 801052a:	682b      	ldr	r3, [r5, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d0c6      	beq.n	80104be <__sflush_r+0x32>
 8010530:	2b1d      	cmp	r3, #29
 8010532:	d001      	beq.n	8010538 <__sflush_r+0xac>
 8010534:	2b16      	cmp	r3, #22
 8010536:	d11e      	bne.n	8010576 <__sflush_r+0xea>
 8010538:	602f      	str	r7, [r5, #0]
 801053a:	2000      	movs	r0, #0
 801053c:	e022      	b.n	8010584 <__sflush_r+0xf8>
 801053e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010542:	b21b      	sxth	r3, r3
 8010544:	e01b      	b.n	801057e <__sflush_r+0xf2>
 8010546:	690f      	ldr	r7, [r1, #16]
 8010548:	2f00      	cmp	r7, #0
 801054a:	d0f6      	beq.n	801053a <__sflush_r+0xae>
 801054c:	0793      	lsls	r3, r2, #30
 801054e:	680e      	ldr	r6, [r1, #0]
 8010550:	bf08      	it	eq
 8010552:	694b      	ldreq	r3, [r1, #20]
 8010554:	600f      	str	r7, [r1, #0]
 8010556:	bf18      	it	ne
 8010558:	2300      	movne	r3, #0
 801055a:	eba6 0807 	sub.w	r8, r6, r7
 801055e:	608b      	str	r3, [r1, #8]
 8010560:	f1b8 0f00 	cmp.w	r8, #0
 8010564:	dde9      	ble.n	801053a <__sflush_r+0xae>
 8010566:	6a21      	ldr	r1, [r4, #32]
 8010568:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801056a:	4643      	mov	r3, r8
 801056c:	463a      	mov	r2, r7
 801056e:	4628      	mov	r0, r5
 8010570:	47b0      	blx	r6
 8010572:	2800      	cmp	r0, #0
 8010574:	dc08      	bgt.n	8010588 <__sflush_r+0xfc>
 8010576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801057a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801057e:	81a3      	strh	r3, [r4, #12]
 8010580:	f04f 30ff 	mov.w	r0, #4294967295
 8010584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010588:	4407      	add	r7, r0
 801058a:	eba8 0800 	sub.w	r8, r8, r0
 801058e:	e7e7      	b.n	8010560 <__sflush_r+0xd4>
 8010590:	dfbffffe 	.word	0xdfbffffe

08010594 <_fflush_r>:
 8010594:	b538      	push	{r3, r4, r5, lr}
 8010596:	690b      	ldr	r3, [r1, #16]
 8010598:	4605      	mov	r5, r0
 801059a:	460c      	mov	r4, r1
 801059c:	b913      	cbnz	r3, 80105a4 <_fflush_r+0x10>
 801059e:	2500      	movs	r5, #0
 80105a0:	4628      	mov	r0, r5
 80105a2:	bd38      	pop	{r3, r4, r5, pc}
 80105a4:	b118      	cbz	r0, 80105ae <_fflush_r+0x1a>
 80105a6:	6a03      	ldr	r3, [r0, #32]
 80105a8:	b90b      	cbnz	r3, 80105ae <_fflush_r+0x1a>
 80105aa:	f7fe f99f 	bl	800e8ec <__sinit>
 80105ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d0f3      	beq.n	801059e <_fflush_r+0xa>
 80105b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80105b8:	07d0      	lsls	r0, r2, #31
 80105ba:	d404      	bmi.n	80105c6 <_fflush_r+0x32>
 80105bc:	0599      	lsls	r1, r3, #22
 80105be:	d402      	bmi.n	80105c6 <_fflush_r+0x32>
 80105c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80105c2:	f7fe fb24 	bl	800ec0e <__retarget_lock_acquire_recursive>
 80105c6:	4628      	mov	r0, r5
 80105c8:	4621      	mov	r1, r4
 80105ca:	f7ff ff5f 	bl	801048c <__sflush_r>
 80105ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80105d0:	07da      	lsls	r2, r3, #31
 80105d2:	4605      	mov	r5, r0
 80105d4:	d4e4      	bmi.n	80105a0 <_fflush_r+0xc>
 80105d6:	89a3      	ldrh	r3, [r4, #12]
 80105d8:	059b      	lsls	r3, r3, #22
 80105da:	d4e1      	bmi.n	80105a0 <_fflush_r+0xc>
 80105dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80105de:	f7fe fb17 	bl	800ec10 <__retarget_lock_release_recursive>
 80105e2:	e7dd      	b.n	80105a0 <_fflush_r+0xc>

080105e4 <memmove>:
 80105e4:	4288      	cmp	r0, r1
 80105e6:	b510      	push	{r4, lr}
 80105e8:	eb01 0402 	add.w	r4, r1, r2
 80105ec:	d902      	bls.n	80105f4 <memmove+0x10>
 80105ee:	4284      	cmp	r4, r0
 80105f0:	4623      	mov	r3, r4
 80105f2:	d807      	bhi.n	8010604 <memmove+0x20>
 80105f4:	1e43      	subs	r3, r0, #1
 80105f6:	42a1      	cmp	r1, r4
 80105f8:	d008      	beq.n	801060c <memmove+0x28>
 80105fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010602:	e7f8      	b.n	80105f6 <memmove+0x12>
 8010604:	4402      	add	r2, r0
 8010606:	4601      	mov	r1, r0
 8010608:	428a      	cmp	r2, r1
 801060a:	d100      	bne.n	801060e <memmove+0x2a>
 801060c:	bd10      	pop	{r4, pc}
 801060e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010616:	e7f7      	b.n	8010608 <memmove+0x24>

08010618 <_sbrk_r>:
 8010618:	b538      	push	{r3, r4, r5, lr}
 801061a:	4d06      	ldr	r5, [pc, #24]	@ (8010634 <_sbrk_r+0x1c>)
 801061c:	2300      	movs	r3, #0
 801061e:	4604      	mov	r4, r0
 8010620:	4608      	mov	r0, r1
 8010622:	602b      	str	r3, [r5, #0]
 8010624:	f7f2 f980 	bl	8002928 <_sbrk>
 8010628:	1c43      	adds	r3, r0, #1
 801062a:	d102      	bne.n	8010632 <_sbrk_r+0x1a>
 801062c:	682b      	ldr	r3, [r5, #0]
 801062e:	b103      	cbz	r3, 8010632 <_sbrk_r+0x1a>
 8010630:	6023      	str	r3, [r4, #0]
 8010632:	bd38      	pop	{r3, r4, r5, pc}
 8010634:	2000724c 	.word	0x2000724c

08010638 <__assert_func>:
 8010638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801063a:	4614      	mov	r4, r2
 801063c:	461a      	mov	r2, r3
 801063e:	4b09      	ldr	r3, [pc, #36]	@ (8010664 <__assert_func+0x2c>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4605      	mov	r5, r0
 8010644:	68d8      	ldr	r0, [r3, #12]
 8010646:	b954      	cbnz	r4, 801065e <__assert_func+0x26>
 8010648:	4b07      	ldr	r3, [pc, #28]	@ (8010668 <__assert_func+0x30>)
 801064a:	461c      	mov	r4, r3
 801064c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010650:	9100      	str	r1, [sp, #0]
 8010652:	462b      	mov	r3, r5
 8010654:	4905      	ldr	r1, [pc, #20]	@ (801066c <__assert_func+0x34>)
 8010656:	f000 f86f 	bl	8010738 <fiprintf>
 801065a:	f000 f87f 	bl	801075c <abort>
 801065e:	4b04      	ldr	r3, [pc, #16]	@ (8010670 <__assert_func+0x38>)
 8010660:	e7f4      	b.n	801064c <__assert_func+0x14>
 8010662:	bf00      	nop
 8010664:	20000430 	.word	0x20000430
 8010668:	08012226 	.word	0x08012226
 801066c:	080121f8 	.word	0x080121f8
 8010670:	080121eb 	.word	0x080121eb

08010674 <_calloc_r>:
 8010674:	b570      	push	{r4, r5, r6, lr}
 8010676:	fba1 5402 	umull	r5, r4, r1, r2
 801067a:	b93c      	cbnz	r4, 801068c <_calloc_r+0x18>
 801067c:	4629      	mov	r1, r5
 801067e:	f7ff f99f 	bl	800f9c0 <_malloc_r>
 8010682:	4606      	mov	r6, r0
 8010684:	b928      	cbnz	r0, 8010692 <_calloc_r+0x1e>
 8010686:	2600      	movs	r6, #0
 8010688:	4630      	mov	r0, r6
 801068a:	bd70      	pop	{r4, r5, r6, pc}
 801068c:	220c      	movs	r2, #12
 801068e:	6002      	str	r2, [r0, #0]
 8010690:	e7f9      	b.n	8010686 <_calloc_r+0x12>
 8010692:	462a      	mov	r2, r5
 8010694:	4621      	mov	r1, r4
 8010696:	f7fe f9c2 	bl	800ea1e <memset>
 801069a:	e7f5      	b.n	8010688 <_calloc_r+0x14>

0801069c <__ascii_mbtowc>:
 801069c:	b082      	sub	sp, #8
 801069e:	b901      	cbnz	r1, 80106a2 <__ascii_mbtowc+0x6>
 80106a0:	a901      	add	r1, sp, #4
 80106a2:	b142      	cbz	r2, 80106b6 <__ascii_mbtowc+0x1a>
 80106a4:	b14b      	cbz	r3, 80106ba <__ascii_mbtowc+0x1e>
 80106a6:	7813      	ldrb	r3, [r2, #0]
 80106a8:	600b      	str	r3, [r1, #0]
 80106aa:	7812      	ldrb	r2, [r2, #0]
 80106ac:	1e10      	subs	r0, r2, #0
 80106ae:	bf18      	it	ne
 80106b0:	2001      	movne	r0, #1
 80106b2:	b002      	add	sp, #8
 80106b4:	4770      	bx	lr
 80106b6:	4610      	mov	r0, r2
 80106b8:	e7fb      	b.n	80106b2 <__ascii_mbtowc+0x16>
 80106ba:	f06f 0001 	mvn.w	r0, #1
 80106be:	e7f8      	b.n	80106b2 <__ascii_mbtowc+0x16>

080106c0 <_realloc_r>:
 80106c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c4:	4680      	mov	r8, r0
 80106c6:	4615      	mov	r5, r2
 80106c8:	460c      	mov	r4, r1
 80106ca:	b921      	cbnz	r1, 80106d6 <_realloc_r+0x16>
 80106cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106d0:	4611      	mov	r1, r2
 80106d2:	f7ff b975 	b.w	800f9c0 <_malloc_r>
 80106d6:	b92a      	cbnz	r2, 80106e4 <_realloc_r+0x24>
 80106d8:	f7ff f8fe 	bl	800f8d8 <_free_r>
 80106dc:	2400      	movs	r4, #0
 80106de:	4620      	mov	r0, r4
 80106e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106e4:	f000 f841 	bl	801076a <_malloc_usable_size_r>
 80106e8:	4285      	cmp	r5, r0
 80106ea:	4606      	mov	r6, r0
 80106ec:	d802      	bhi.n	80106f4 <_realloc_r+0x34>
 80106ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80106f2:	d8f4      	bhi.n	80106de <_realloc_r+0x1e>
 80106f4:	4629      	mov	r1, r5
 80106f6:	4640      	mov	r0, r8
 80106f8:	f7ff f962 	bl	800f9c0 <_malloc_r>
 80106fc:	4607      	mov	r7, r0
 80106fe:	2800      	cmp	r0, #0
 8010700:	d0ec      	beq.n	80106dc <_realloc_r+0x1c>
 8010702:	42b5      	cmp	r5, r6
 8010704:	462a      	mov	r2, r5
 8010706:	4621      	mov	r1, r4
 8010708:	bf28      	it	cs
 801070a:	4632      	movcs	r2, r6
 801070c:	f7fe fa89 	bl	800ec22 <memcpy>
 8010710:	4621      	mov	r1, r4
 8010712:	4640      	mov	r0, r8
 8010714:	f7ff f8e0 	bl	800f8d8 <_free_r>
 8010718:	463c      	mov	r4, r7
 801071a:	e7e0      	b.n	80106de <_realloc_r+0x1e>

0801071c <__ascii_wctomb>:
 801071c:	4603      	mov	r3, r0
 801071e:	4608      	mov	r0, r1
 8010720:	b141      	cbz	r1, 8010734 <__ascii_wctomb+0x18>
 8010722:	2aff      	cmp	r2, #255	@ 0xff
 8010724:	d904      	bls.n	8010730 <__ascii_wctomb+0x14>
 8010726:	228a      	movs	r2, #138	@ 0x8a
 8010728:	601a      	str	r2, [r3, #0]
 801072a:	f04f 30ff 	mov.w	r0, #4294967295
 801072e:	4770      	bx	lr
 8010730:	700a      	strb	r2, [r1, #0]
 8010732:	2001      	movs	r0, #1
 8010734:	4770      	bx	lr
	...

08010738 <fiprintf>:
 8010738:	b40e      	push	{r1, r2, r3}
 801073a:	b503      	push	{r0, r1, lr}
 801073c:	4601      	mov	r1, r0
 801073e:	ab03      	add	r3, sp, #12
 8010740:	4805      	ldr	r0, [pc, #20]	@ (8010758 <fiprintf+0x20>)
 8010742:	f853 2b04 	ldr.w	r2, [r3], #4
 8010746:	6800      	ldr	r0, [r0, #0]
 8010748:	9301      	str	r3, [sp, #4]
 801074a:	f000 f83f 	bl	80107cc <_vfiprintf_r>
 801074e:	b002      	add	sp, #8
 8010750:	f85d eb04 	ldr.w	lr, [sp], #4
 8010754:	b003      	add	sp, #12
 8010756:	4770      	bx	lr
 8010758:	20000430 	.word	0x20000430

0801075c <abort>:
 801075c:	b508      	push	{r3, lr}
 801075e:	2006      	movs	r0, #6
 8010760:	f000 fa08 	bl	8010b74 <raise>
 8010764:	2001      	movs	r0, #1
 8010766:	f7f2 f867 	bl	8002838 <_exit>

0801076a <_malloc_usable_size_r>:
 801076a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801076e:	1f18      	subs	r0, r3, #4
 8010770:	2b00      	cmp	r3, #0
 8010772:	bfbc      	itt	lt
 8010774:	580b      	ldrlt	r3, [r1, r0]
 8010776:	18c0      	addlt	r0, r0, r3
 8010778:	4770      	bx	lr

0801077a <__sfputc_r>:
 801077a:	6893      	ldr	r3, [r2, #8]
 801077c:	3b01      	subs	r3, #1
 801077e:	2b00      	cmp	r3, #0
 8010780:	b410      	push	{r4}
 8010782:	6093      	str	r3, [r2, #8]
 8010784:	da08      	bge.n	8010798 <__sfputc_r+0x1e>
 8010786:	6994      	ldr	r4, [r2, #24]
 8010788:	42a3      	cmp	r3, r4
 801078a:	db01      	blt.n	8010790 <__sfputc_r+0x16>
 801078c:	290a      	cmp	r1, #10
 801078e:	d103      	bne.n	8010798 <__sfputc_r+0x1e>
 8010790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010794:	f000 b932 	b.w	80109fc <__swbuf_r>
 8010798:	6813      	ldr	r3, [r2, #0]
 801079a:	1c58      	adds	r0, r3, #1
 801079c:	6010      	str	r0, [r2, #0]
 801079e:	7019      	strb	r1, [r3, #0]
 80107a0:	4608      	mov	r0, r1
 80107a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107a6:	4770      	bx	lr

080107a8 <__sfputs_r>:
 80107a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107aa:	4606      	mov	r6, r0
 80107ac:	460f      	mov	r7, r1
 80107ae:	4614      	mov	r4, r2
 80107b0:	18d5      	adds	r5, r2, r3
 80107b2:	42ac      	cmp	r4, r5
 80107b4:	d101      	bne.n	80107ba <__sfputs_r+0x12>
 80107b6:	2000      	movs	r0, #0
 80107b8:	e007      	b.n	80107ca <__sfputs_r+0x22>
 80107ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107be:	463a      	mov	r2, r7
 80107c0:	4630      	mov	r0, r6
 80107c2:	f7ff ffda 	bl	801077a <__sfputc_r>
 80107c6:	1c43      	adds	r3, r0, #1
 80107c8:	d1f3      	bne.n	80107b2 <__sfputs_r+0xa>
 80107ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080107cc <_vfiprintf_r>:
 80107cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d0:	460d      	mov	r5, r1
 80107d2:	b09d      	sub	sp, #116	@ 0x74
 80107d4:	4614      	mov	r4, r2
 80107d6:	4698      	mov	r8, r3
 80107d8:	4606      	mov	r6, r0
 80107da:	b118      	cbz	r0, 80107e4 <_vfiprintf_r+0x18>
 80107dc:	6a03      	ldr	r3, [r0, #32]
 80107de:	b90b      	cbnz	r3, 80107e4 <_vfiprintf_r+0x18>
 80107e0:	f7fe f884 	bl	800e8ec <__sinit>
 80107e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107e6:	07d9      	lsls	r1, r3, #31
 80107e8:	d405      	bmi.n	80107f6 <_vfiprintf_r+0x2a>
 80107ea:	89ab      	ldrh	r3, [r5, #12]
 80107ec:	059a      	lsls	r2, r3, #22
 80107ee:	d402      	bmi.n	80107f6 <_vfiprintf_r+0x2a>
 80107f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107f2:	f7fe fa0c 	bl	800ec0e <__retarget_lock_acquire_recursive>
 80107f6:	89ab      	ldrh	r3, [r5, #12]
 80107f8:	071b      	lsls	r3, r3, #28
 80107fa:	d501      	bpl.n	8010800 <_vfiprintf_r+0x34>
 80107fc:	692b      	ldr	r3, [r5, #16]
 80107fe:	b99b      	cbnz	r3, 8010828 <_vfiprintf_r+0x5c>
 8010800:	4629      	mov	r1, r5
 8010802:	4630      	mov	r0, r6
 8010804:	f000 f938 	bl	8010a78 <__swsetup_r>
 8010808:	b170      	cbz	r0, 8010828 <_vfiprintf_r+0x5c>
 801080a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801080c:	07dc      	lsls	r4, r3, #31
 801080e:	d504      	bpl.n	801081a <_vfiprintf_r+0x4e>
 8010810:	f04f 30ff 	mov.w	r0, #4294967295
 8010814:	b01d      	add	sp, #116	@ 0x74
 8010816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801081a:	89ab      	ldrh	r3, [r5, #12]
 801081c:	0598      	lsls	r0, r3, #22
 801081e:	d4f7      	bmi.n	8010810 <_vfiprintf_r+0x44>
 8010820:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010822:	f7fe f9f5 	bl	800ec10 <__retarget_lock_release_recursive>
 8010826:	e7f3      	b.n	8010810 <_vfiprintf_r+0x44>
 8010828:	2300      	movs	r3, #0
 801082a:	9309      	str	r3, [sp, #36]	@ 0x24
 801082c:	2320      	movs	r3, #32
 801082e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010832:	f8cd 800c 	str.w	r8, [sp, #12]
 8010836:	2330      	movs	r3, #48	@ 0x30
 8010838:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80109e8 <_vfiprintf_r+0x21c>
 801083c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010840:	f04f 0901 	mov.w	r9, #1
 8010844:	4623      	mov	r3, r4
 8010846:	469a      	mov	sl, r3
 8010848:	f813 2b01 	ldrb.w	r2, [r3], #1
 801084c:	b10a      	cbz	r2, 8010852 <_vfiprintf_r+0x86>
 801084e:	2a25      	cmp	r2, #37	@ 0x25
 8010850:	d1f9      	bne.n	8010846 <_vfiprintf_r+0x7a>
 8010852:	ebba 0b04 	subs.w	fp, sl, r4
 8010856:	d00b      	beq.n	8010870 <_vfiprintf_r+0xa4>
 8010858:	465b      	mov	r3, fp
 801085a:	4622      	mov	r2, r4
 801085c:	4629      	mov	r1, r5
 801085e:	4630      	mov	r0, r6
 8010860:	f7ff ffa2 	bl	80107a8 <__sfputs_r>
 8010864:	3001      	adds	r0, #1
 8010866:	f000 80a7 	beq.w	80109b8 <_vfiprintf_r+0x1ec>
 801086a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801086c:	445a      	add	r2, fp
 801086e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010870:	f89a 3000 	ldrb.w	r3, [sl]
 8010874:	2b00      	cmp	r3, #0
 8010876:	f000 809f 	beq.w	80109b8 <_vfiprintf_r+0x1ec>
 801087a:	2300      	movs	r3, #0
 801087c:	f04f 32ff 	mov.w	r2, #4294967295
 8010880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010884:	f10a 0a01 	add.w	sl, sl, #1
 8010888:	9304      	str	r3, [sp, #16]
 801088a:	9307      	str	r3, [sp, #28]
 801088c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010890:	931a      	str	r3, [sp, #104]	@ 0x68
 8010892:	4654      	mov	r4, sl
 8010894:	2205      	movs	r2, #5
 8010896:	f814 1b01 	ldrb.w	r1, [r4], #1
 801089a:	4853      	ldr	r0, [pc, #332]	@ (80109e8 <_vfiprintf_r+0x21c>)
 801089c:	f7ef fcd0 	bl	8000240 <memchr>
 80108a0:	9a04      	ldr	r2, [sp, #16]
 80108a2:	b9d8      	cbnz	r0, 80108dc <_vfiprintf_r+0x110>
 80108a4:	06d1      	lsls	r1, r2, #27
 80108a6:	bf44      	itt	mi
 80108a8:	2320      	movmi	r3, #32
 80108aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108ae:	0713      	lsls	r3, r2, #28
 80108b0:	bf44      	itt	mi
 80108b2:	232b      	movmi	r3, #43	@ 0x2b
 80108b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108b8:	f89a 3000 	ldrb.w	r3, [sl]
 80108bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80108be:	d015      	beq.n	80108ec <_vfiprintf_r+0x120>
 80108c0:	9a07      	ldr	r2, [sp, #28]
 80108c2:	4654      	mov	r4, sl
 80108c4:	2000      	movs	r0, #0
 80108c6:	f04f 0c0a 	mov.w	ip, #10
 80108ca:	4621      	mov	r1, r4
 80108cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108d0:	3b30      	subs	r3, #48	@ 0x30
 80108d2:	2b09      	cmp	r3, #9
 80108d4:	d94b      	bls.n	801096e <_vfiprintf_r+0x1a2>
 80108d6:	b1b0      	cbz	r0, 8010906 <_vfiprintf_r+0x13a>
 80108d8:	9207      	str	r2, [sp, #28]
 80108da:	e014      	b.n	8010906 <_vfiprintf_r+0x13a>
 80108dc:	eba0 0308 	sub.w	r3, r0, r8
 80108e0:	fa09 f303 	lsl.w	r3, r9, r3
 80108e4:	4313      	orrs	r3, r2
 80108e6:	9304      	str	r3, [sp, #16]
 80108e8:	46a2      	mov	sl, r4
 80108ea:	e7d2      	b.n	8010892 <_vfiprintf_r+0xc6>
 80108ec:	9b03      	ldr	r3, [sp, #12]
 80108ee:	1d19      	adds	r1, r3, #4
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	9103      	str	r1, [sp, #12]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	bfbb      	ittet	lt
 80108f8:	425b      	neglt	r3, r3
 80108fa:	f042 0202 	orrlt.w	r2, r2, #2
 80108fe:	9307      	strge	r3, [sp, #28]
 8010900:	9307      	strlt	r3, [sp, #28]
 8010902:	bfb8      	it	lt
 8010904:	9204      	strlt	r2, [sp, #16]
 8010906:	7823      	ldrb	r3, [r4, #0]
 8010908:	2b2e      	cmp	r3, #46	@ 0x2e
 801090a:	d10a      	bne.n	8010922 <_vfiprintf_r+0x156>
 801090c:	7863      	ldrb	r3, [r4, #1]
 801090e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010910:	d132      	bne.n	8010978 <_vfiprintf_r+0x1ac>
 8010912:	9b03      	ldr	r3, [sp, #12]
 8010914:	1d1a      	adds	r2, r3, #4
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	9203      	str	r2, [sp, #12]
 801091a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801091e:	3402      	adds	r4, #2
 8010920:	9305      	str	r3, [sp, #20]
 8010922:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80109f8 <_vfiprintf_r+0x22c>
 8010926:	7821      	ldrb	r1, [r4, #0]
 8010928:	2203      	movs	r2, #3
 801092a:	4650      	mov	r0, sl
 801092c:	f7ef fc88 	bl	8000240 <memchr>
 8010930:	b138      	cbz	r0, 8010942 <_vfiprintf_r+0x176>
 8010932:	9b04      	ldr	r3, [sp, #16]
 8010934:	eba0 000a 	sub.w	r0, r0, sl
 8010938:	2240      	movs	r2, #64	@ 0x40
 801093a:	4082      	lsls	r2, r0
 801093c:	4313      	orrs	r3, r2
 801093e:	3401      	adds	r4, #1
 8010940:	9304      	str	r3, [sp, #16]
 8010942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010946:	4829      	ldr	r0, [pc, #164]	@ (80109ec <_vfiprintf_r+0x220>)
 8010948:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801094c:	2206      	movs	r2, #6
 801094e:	f7ef fc77 	bl	8000240 <memchr>
 8010952:	2800      	cmp	r0, #0
 8010954:	d03f      	beq.n	80109d6 <_vfiprintf_r+0x20a>
 8010956:	4b26      	ldr	r3, [pc, #152]	@ (80109f0 <_vfiprintf_r+0x224>)
 8010958:	bb1b      	cbnz	r3, 80109a2 <_vfiprintf_r+0x1d6>
 801095a:	9b03      	ldr	r3, [sp, #12]
 801095c:	3307      	adds	r3, #7
 801095e:	f023 0307 	bic.w	r3, r3, #7
 8010962:	3308      	adds	r3, #8
 8010964:	9303      	str	r3, [sp, #12]
 8010966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010968:	443b      	add	r3, r7
 801096a:	9309      	str	r3, [sp, #36]	@ 0x24
 801096c:	e76a      	b.n	8010844 <_vfiprintf_r+0x78>
 801096e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010972:	460c      	mov	r4, r1
 8010974:	2001      	movs	r0, #1
 8010976:	e7a8      	b.n	80108ca <_vfiprintf_r+0xfe>
 8010978:	2300      	movs	r3, #0
 801097a:	3401      	adds	r4, #1
 801097c:	9305      	str	r3, [sp, #20]
 801097e:	4619      	mov	r1, r3
 8010980:	f04f 0c0a 	mov.w	ip, #10
 8010984:	4620      	mov	r0, r4
 8010986:	f810 2b01 	ldrb.w	r2, [r0], #1
 801098a:	3a30      	subs	r2, #48	@ 0x30
 801098c:	2a09      	cmp	r2, #9
 801098e:	d903      	bls.n	8010998 <_vfiprintf_r+0x1cc>
 8010990:	2b00      	cmp	r3, #0
 8010992:	d0c6      	beq.n	8010922 <_vfiprintf_r+0x156>
 8010994:	9105      	str	r1, [sp, #20]
 8010996:	e7c4      	b.n	8010922 <_vfiprintf_r+0x156>
 8010998:	fb0c 2101 	mla	r1, ip, r1, r2
 801099c:	4604      	mov	r4, r0
 801099e:	2301      	movs	r3, #1
 80109a0:	e7f0      	b.n	8010984 <_vfiprintf_r+0x1b8>
 80109a2:	ab03      	add	r3, sp, #12
 80109a4:	9300      	str	r3, [sp, #0]
 80109a6:	462a      	mov	r2, r5
 80109a8:	4b12      	ldr	r3, [pc, #72]	@ (80109f4 <_vfiprintf_r+0x228>)
 80109aa:	a904      	add	r1, sp, #16
 80109ac:	4630      	mov	r0, r6
 80109ae:	f7fd fb59 	bl	800e064 <_printf_float>
 80109b2:	4607      	mov	r7, r0
 80109b4:	1c78      	adds	r0, r7, #1
 80109b6:	d1d6      	bne.n	8010966 <_vfiprintf_r+0x19a>
 80109b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109ba:	07d9      	lsls	r1, r3, #31
 80109bc:	d405      	bmi.n	80109ca <_vfiprintf_r+0x1fe>
 80109be:	89ab      	ldrh	r3, [r5, #12]
 80109c0:	059a      	lsls	r2, r3, #22
 80109c2:	d402      	bmi.n	80109ca <_vfiprintf_r+0x1fe>
 80109c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109c6:	f7fe f923 	bl	800ec10 <__retarget_lock_release_recursive>
 80109ca:	89ab      	ldrh	r3, [r5, #12]
 80109cc:	065b      	lsls	r3, r3, #25
 80109ce:	f53f af1f 	bmi.w	8010810 <_vfiprintf_r+0x44>
 80109d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80109d4:	e71e      	b.n	8010814 <_vfiprintf_r+0x48>
 80109d6:	ab03      	add	r3, sp, #12
 80109d8:	9300      	str	r3, [sp, #0]
 80109da:	462a      	mov	r2, r5
 80109dc:	4b05      	ldr	r3, [pc, #20]	@ (80109f4 <_vfiprintf_r+0x228>)
 80109de:	a904      	add	r1, sp, #16
 80109e0:	4630      	mov	r0, r6
 80109e2:	f7fd fdd7 	bl	800e594 <_printf_i>
 80109e6:	e7e4      	b.n	80109b2 <_vfiprintf_r+0x1e6>
 80109e8:	080121d0 	.word	0x080121d0
 80109ec:	080121da 	.word	0x080121da
 80109f0:	0800e065 	.word	0x0800e065
 80109f4:	080107a9 	.word	0x080107a9
 80109f8:	080121d6 	.word	0x080121d6

080109fc <__swbuf_r>:
 80109fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109fe:	460e      	mov	r6, r1
 8010a00:	4614      	mov	r4, r2
 8010a02:	4605      	mov	r5, r0
 8010a04:	b118      	cbz	r0, 8010a0e <__swbuf_r+0x12>
 8010a06:	6a03      	ldr	r3, [r0, #32]
 8010a08:	b90b      	cbnz	r3, 8010a0e <__swbuf_r+0x12>
 8010a0a:	f7fd ff6f 	bl	800e8ec <__sinit>
 8010a0e:	69a3      	ldr	r3, [r4, #24]
 8010a10:	60a3      	str	r3, [r4, #8]
 8010a12:	89a3      	ldrh	r3, [r4, #12]
 8010a14:	071a      	lsls	r2, r3, #28
 8010a16:	d501      	bpl.n	8010a1c <__swbuf_r+0x20>
 8010a18:	6923      	ldr	r3, [r4, #16]
 8010a1a:	b943      	cbnz	r3, 8010a2e <__swbuf_r+0x32>
 8010a1c:	4621      	mov	r1, r4
 8010a1e:	4628      	mov	r0, r5
 8010a20:	f000 f82a 	bl	8010a78 <__swsetup_r>
 8010a24:	b118      	cbz	r0, 8010a2e <__swbuf_r+0x32>
 8010a26:	f04f 37ff 	mov.w	r7, #4294967295
 8010a2a:	4638      	mov	r0, r7
 8010a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a2e:	6823      	ldr	r3, [r4, #0]
 8010a30:	6922      	ldr	r2, [r4, #16]
 8010a32:	1a98      	subs	r0, r3, r2
 8010a34:	6963      	ldr	r3, [r4, #20]
 8010a36:	b2f6      	uxtb	r6, r6
 8010a38:	4283      	cmp	r3, r0
 8010a3a:	4637      	mov	r7, r6
 8010a3c:	dc05      	bgt.n	8010a4a <__swbuf_r+0x4e>
 8010a3e:	4621      	mov	r1, r4
 8010a40:	4628      	mov	r0, r5
 8010a42:	f7ff fda7 	bl	8010594 <_fflush_r>
 8010a46:	2800      	cmp	r0, #0
 8010a48:	d1ed      	bne.n	8010a26 <__swbuf_r+0x2a>
 8010a4a:	68a3      	ldr	r3, [r4, #8]
 8010a4c:	3b01      	subs	r3, #1
 8010a4e:	60a3      	str	r3, [r4, #8]
 8010a50:	6823      	ldr	r3, [r4, #0]
 8010a52:	1c5a      	adds	r2, r3, #1
 8010a54:	6022      	str	r2, [r4, #0]
 8010a56:	701e      	strb	r6, [r3, #0]
 8010a58:	6962      	ldr	r2, [r4, #20]
 8010a5a:	1c43      	adds	r3, r0, #1
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d004      	beq.n	8010a6a <__swbuf_r+0x6e>
 8010a60:	89a3      	ldrh	r3, [r4, #12]
 8010a62:	07db      	lsls	r3, r3, #31
 8010a64:	d5e1      	bpl.n	8010a2a <__swbuf_r+0x2e>
 8010a66:	2e0a      	cmp	r6, #10
 8010a68:	d1df      	bne.n	8010a2a <__swbuf_r+0x2e>
 8010a6a:	4621      	mov	r1, r4
 8010a6c:	4628      	mov	r0, r5
 8010a6e:	f7ff fd91 	bl	8010594 <_fflush_r>
 8010a72:	2800      	cmp	r0, #0
 8010a74:	d0d9      	beq.n	8010a2a <__swbuf_r+0x2e>
 8010a76:	e7d6      	b.n	8010a26 <__swbuf_r+0x2a>

08010a78 <__swsetup_r>:
 8010a78:	b538      	push	{r3, r4, r5, lr}
 8010a7a:	4b29      	ldr	r3, [pc, #164]	@ (8010b20 <__swsetup_r+0xa8>)
 8010a7c:	4605      	mov	r5, r0
 8010a7e:	6818      	ldr	r0, [r3, #0]
 8010a80:	460c      	mov	r4, r1
 8010a82:	b118      	cbz	r0, 8010a8c <__swsetup_r+0x14>
 8010a84:	6a03      	ldr	r3, [r0, #32]
 8010a86:	b90b      	cbnz	r3, 8010a8c <__swsetup_r+0x14>
 8010a88:	f7fd ff30 	bl	800e8ec <__sinit>
 8010a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a90:	0719      	lsls	r1, r3, #28
 8010a92:	d422      	bmi.n	8010ada <__swsetup_r+0x62>
 8010a94:	06da      	lsls	r2, r3, #27
 8010a96:	d407      	bmi.n	8010aa8 <__swsetup_r+0x30>
 8010a98:	2209      	movs	r2, #9
 8010a9a:	602a      	str	r2, [r5, #0]
 8010a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010aa0:	81a3      	strh	r3, [r4, #12]
 8010aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa6:	e033      	b.n	8010b10 <__swsetup_r+0x98>
 8010aa8:	0758      	lsls	r0, r3, #29
 8010aaa:	d512      	bpl.n	8010ad2 <__swsetup_r+0x5a>
 8010aac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010aae:	b141      	cbz	r1, 8010ac2 <__swsetup_r+0x4a>
 8010ab0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010ab4:	4299      	cmp	r1, r3
 8010ab6:	d002      	beq.n	8010abe <__swsetup_r+0x46>
 8010ab8:	4628      	mov	r0, r5
 8010aba:	f7fe ff0d 	bl	800f8d8 <_free_r>
 8010abe:	2300      	movs	r3, #0
 8010ac0:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ac2:	89a3      	ldrh	r3, [r4, #12]
 8010ac4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010ac8:	81a3      	strh	r3, [r4, #12]
 8010aca:	2300      	movs	r3, #0
 8010acc:	6063      	str	r3, [r4, #4]
 8010ace:	6923      	ldr	r3, [r4, #16]
 8010ad0:	6023      	str	r3, [r4, #0]
 8010ad2:	89a3      	ldrh	r3, [r4, #12]
 8010ad4:	f043 0308 	orr.w	r3, r3, #8
 8010ad8:	81a3      	strh	r3, [r4, #12]
 8010ada:	6923      	ldr	r3, [r4, #16]
 8010adc:	b94b      	cbnz	r3, 8010af2 <__swsetup_r+0x7a>
 8010ade:	89a3      	ldrh	r3, [r4, #12]
 8010ae0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ae8:	d003      	beq.n	8010af2 <__swsetup_r+0x7a>
 8010aea:	4621      	mov	r1, r4
 8010aec:	4628      	mov	r0, r5
 8010aee:	f000 f883 	bl	8010bf8 <__smakebuf_r>
 8010af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010af6:	f013 0201 	ands.w	r2, r3, #1
 8010afa:	d00a      	beq.n	8010b12 <__swsetup_r+0x9a>
 8010afc:	2200      	movs	r2, #0
 8010afe:	60a2      	str	r2, [r4, #8]
 8010b00:	6962      	ldr	r2, [r4, #20]
 8010b02:	4252      	negs	r2, r2
 8010b04:	61a2      	str	r2, [r4, #24]
 8010b06:	6922      	ldr	r2, [r4, #16]
 8010b08:	b942      	cbnz	r2, 8010b1c <__swsetup_r+0xa4>
 8010b0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010b0e:	d1c5      	bne.n	8010a9c <__swsetup_r+0x24>
 8010b10:	bd38      	pop	{r3, r4, r5, pc}
 8010b12:	0799      	lsls	r1, r3, #30
 8010b14:	bf58      	it	pl
 8010b16:	6962      	ldrpl	r2, [r4, #20]
 8010b18:	60a2      	str	r2, [r4, #8]
 8010b1a:	e7f4      	b.n	8010b06 <__swsetup_r+0x8e>
 8010b1c:	2000      	movs	r0, #0
 8010b1e:	e7f7      	b.n	8010b10 <__swsetup_r+0x98>
 8010b20:	20000430 	.word	0x20000430

08010b24 <_raise_r>:
 8010b24:	291f      	cmp	r1, #31
 8010b26:	b538      	push	{r3, r4, r5, lr}
 8010b28:	4605      	mov	r5, r0
 8010b2a:	460c      	mov	r4, r1
 8010b2c:	d904      	bls.n	8010b38 <_raise_r+0x14>
 8010b2e:	2316      	movs	r3, #22
 8010b30:	6003      	str	r3, [r0, #0]
 8010b32:	f04f 30ff 	mov.w	r0, #4294967295
 8010b36:	bd38      	pop	{r3, r4, r5, pc}
 8010b38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010b3a:	b112      	cbz	r2, 8010b42 <_raise_r+0x1e>
 8010b3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b40:	b94b      	cbnz	r3, 8010b56 <_raise_r+0x32>
 8010b42:	4628      	mov	r0, r5
 8010b44:	f000 f830 	bl	8010ba8 <_getpid_r>
 8010b48:	4622      	mov	r2, r4
 8010b4a:	4601      	mov	r1, r0
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b52:	f000 b817 	b.w	8010b84 <_kill_r>
 8010b56:	2b01      	cmp	r3, #1
 8010b58:	d00a      	beq.n	8010b70 <_raise_r+0x4c>
 8010b5a:	1c59      	adds	r1, r3, #1
 8010b5c:	d103      	bne.n	8010b66 <_raise_r+0x42>
 8010b5e:	2316      	movs	r3, #22
 8010b60:	6003      	str	r3, [r0, #0]
 8010b62:	2001      	movs	r0, #1
 8010b64:	e7e7      	b.n	8010b36 <_raise_r+0x12>
 8010b66:	2100      	movs	r1, #0
 8010b68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010b6c:	4620      	mov	r0, r4
 8010b6e:	4798      	blx	r3
 8010b70:	2000      	movs	r0, #0
 8010b72:	e7e0      	b.n	8010b36 <_raise_r+0x12>

08010b74 <raise>:
 8010b74:	4b02      	ldr	r3, [pc, #8]	@ (8010b80 <raise+0xc>)
 8010b76:	4601      	mov	r1, r0
 8010b78:	6818      	ldr	r0, [r3, #0]
 8010b7a:	f7ff bfd3 	b.w	8010b24 <_raise_r>
 8010b7e:	bf00      	nop
 8010b80:	20000430 	.word	0x20000430

08010b84 <_kill_r>:
 8010b84:	b538      	push	{r3, r4, r5, lr}
 8010b86:	4d07      	ldr	r5, [pc, #28]	@ (8010ba4 <_kill_r+0x20>)
 8010b88:	2300      	movs	r3, #0
 8010b8a:	4604      	mov	r4, r0
 8010b8c:	4608      	mov	r0, r1
 8010b8e:	4611      	mov	r1, r2
 8010b90:	602b      	str	r3, [r5, #0]
 8010b92:	f7f1 fe41 	bl	8002818 <_kill>
 8010b96:	1c43      	adds	r3, r0, #1
 8010b98:	d102      	bne.n	8010ba0 <_kill_r+0x1c>
 8010b9a:	682b      	ldr	r3, [r5, #0]
 8010b9c:	b103      	cbz	r3, 8010ba0 <_kill_r+0x1c>
 8010b9e:	6023      	str	r3, [r4, #0]
 8010ba0:	bd38      	pop	{r3, r4, r5, pc}
 8010ba2:	bf00      	nop
 8010ba4:	2000724c 	.word	0x2000724c

08010ba8 <_getpid_r>:
 8010ba8:	f7f1 be2e 	b.w	8002808 <_getpid>

08010bac <__swhatbuf_r>:
 8010bac:	b570      	push	{r4, r5, r6, lr}
 8010bae:	460c      	mov	r4, r1
 8010bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bb4:	2900      	cmp	r1, #0
 8010bb6:	b096      	sub	sp, #88	@ 0x58
 8010bb8:	4615      	mov	r5, r2
 8010bba:	461e      	mov	r6, r3
 8010bbc:	da0d      	bge.n	8010bda <__swhatbuf_r+0x2e>
 8010bbe:	89a3      	ldrh	r3, [r4, #12]
 8010bc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010bc4:	f04f 0100 	mov.w	r1, #0
 8010bc8:	bf14      	ite	ne
 8010bca:	2340      	movne	r3, #64	@ 0x40
 8010bcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010bd0:	2000      	movs	r0, #0
 8010bd2:	6031      	str	r1, [r6, #0]
 8010bd4:	602b      	str	r3, [r5, #0]
 8010bd6:	b016      	add	sp, #88	@ 0x58
 8010bd8:	bd70      	pop	{r4, r5, r6, pc}
 8010bda:	466a      	mov	r2, sp
 8010bdc:	f000 f848 	bl	8010c70 <_fstat_r>
 8010be0:	2800      	cmp	r0, #0
 8010be2:	dbec      	blt.n	8010bbe <__swhatbuf_r+0x12>
 8010be4:	9901      	ldr	r1, [sp, #4]
 8010be6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010bea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010bee:	4259      	negs	r1, r3
 8010bf0:	4159      	adcs	r1, r3
 8010bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010bf6:	e7eb      	b.n	8010bd0 <__swhatbuf_r+0x24>

08010bf8 <__smakebuf_r>:
 8010bf8:	898b      	ldrh	r3, [r1, #12]
 8010bfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010bfc:	079d      	lsls	r5, r3, #30
 8010bfe:	4606      	mov	r6, r0
 8010c00:	460c      	mov	r4, r1
 8010c02:	d507      	bpl.n	8010c14 <__smakebuf_r+0x1c>
 8010c04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010c08:	6023      	str	r3, [r4, #0]
 8010c0a:	6123      	str	r3, [r4, #16]
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	6163      	str	r3, [r4, #20]
 8010c10:	b003      	add	sp, #12
 8010c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c14:	ab01      	add	r3, sp, #4
 8010c16:	466a      	mov	r2, sp
 8010c18:	f7ff ffc8 	bl	8010bac <__swhatbuf_r>
 8010c1c:	9f00      	ldr	r7, [sp, #0]
 8010c1e:	4605      	mov	r5, r0
 8010c20:	4639      	mov	r1, r7
 8010c22:	4630      	mov	r0, r6
 8010c24:	f7fe fecc 	bl	800f9c0 <_malloc_r>
 8010c28:	b948      	cbnz	r0, 8010c3e <__smakebuf_r+0x46>
 8010c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c2e:	059a      	lsls	r2, r3, #22
 8010c30:	d4ee      	bmi.n	8010c10 <__smakebuf_r+0x18>
 8010c32:	f023 0303 	bic.w	r3, r3, #3
 8010c36:	f043 0302 	orr.w	r3, r3, #2
 8010c3a:	81a3      	strh	r3, [r4, #12]
 8010c3c:	e7e2      	b.n	8010c04 <__smakebuf_r+0xc>
 8010c3e:	89a3      	ldrh	r3, [r4, #12]
 8010c40:	6020      	str	r0, [r4, #0]
 8010c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c46:	81a3      	strh	r3, [r4, #12]
 8010c48:	9b01      	ldr	r3, [sp, #4]
 8010c4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010c4e:	b15b      	cbz	r3, 8010c68 <__smakebuf_r+0x70>
 8010c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c54:	4630      	mov	r0, r6
 8010c56:	f000 f81d 	bl	8010c94 <_isatty_r>
 8010c5a:	b128      	cbz	r0, 8010c68 <__smakebuf_r+0x70>
 8010c5c:	89a3      	ldrh	r3, [r4, #12]
 8010c5e:	f023 0303 	bic.w	r3, r3, #3
 8010c62:	f043 0301 	orr.w	r3, r3, #1
 8010c66:	81a3      	strh	r3, [r4, #12]
 8010c68:	89a3      	ldrh	r3, [r4, #12]
 8010c6a:	431d      	orrs	r5, r3
 8010c6c:	81a5      	strh	r5, [r4, #12]
 8010c6e:	e7cf      	b.n	8010c10 <__smakebuf_r+0x18>

08010c70 <_fstat_r>:
 8010c70:	b538      	push	{r3, r4, r5, lr}
 8010c72:	4d07      	ldr	r5, [pc, #28]	@ (8010c90 <_fstat_r+0x20>)
 8010c74:	2300      	movs	r3, #0
 8010c76:	4604      	mov	r4, r0
 8010c78:	4608      	mov	r0, r1
 8010c7a:	4611      	mov	r1, r2
 8010c7c:	602b      	str	r3, [r5, #0]
 8010c7e:	f7f1 fe2b 	bl	80028d8 <_fstat>
 8010c82:	1c43      	adds	r3, r0, #1
 8010c84:	d102      	bne.n	8010c8c <_fstat_r+0x1c>
 8010c86:	682b      	ldr	r3, [r5, #0]
 8010c88:	b103      	cbz	r3, 8010c8c <_fstat_r+0x1c>
 8010c8a:	6023      	str	r3, [r4, #0]
 8010c8c:	bd38      	pop	{r3, r4, r5, pc}
 8010c8e:	bf00      	nop
 8010c90:	2000724c 	.word	0x2000724c

08010c94 <_isatty_r>:
 8010c94:	b538      	push	{r3, r4, r5, lr}
 8010c96:	4d06      	ldr	r5, [pc, #24]	@ (8010cb0 <_isatty_r+0x1c>)
 8010c98:	2300      	movs	r3, #0
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	4608      	mov	r0, r1
 8010c9e:	602b      	str	r3, [r5, #0]
 8010ca0:	f7f1 fe2a 	bl	80028f8 <_isatty>
 8010ca4:	1c43      	adds	r3, r0, #1
 8010ca6:	d102      	bne.n	8010cae <_isatty_r+0x1a>
 8010ca8:	682b      	ldr	r3, [r5, #0]
 8010caa:	b103      	cbz	r3, 8010cae <_isatty_r+0x1a>
 8010cac:	6023      	str	r3, [r4, #0]
 8010cae:	bd38      	pop	{r3, r4, r5, pc}
 8010cb0:	2000724c 	.word	0x2000724c

08010cb4 <atan2f>:
 8010cb4:	f000 b822 	b.w	8010cfc <__ieee754_atan2f>

08010cb8 <sqrtf>:
 8010cb8:	b508      	push	{r3, lr}
 8010cba:	ed2d 8b02 	vpush	{d8}
 8010cbe:	eeb0 8a40 	vmov.f32	s16, s0
 8010cc2:	f000 f817 	bl	8010cf4 <__ieee754_sqrtf>
 8010cc6:	eeb4 8a48 	vcmp.f32	s16, s16
 8010cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cce:	d60c      	bvs.n	8010cea <sqrtf+0x32>
 8010cd0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010cf0 <sqrtf+0x38>
 8010cd4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cdc:	d505      	bpl.n	8010cea <sqrtf+0x32>
 8010cde:	f7fd ff6b 	bl	800ebb8 <__errno>
 8010ce2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010ce6:	2321      	movs	r3, #33	@ 0x21
 8010ce8:	6003      	str	r3, [r0, #0]
 8010cea:	ecbd 8b02 	vpop	{d8}
 8010cee:	bd08      	pop	{r3, pc}
 8010cf0:	00000000 	.word	0x00000000

08010cf4 <__ieee754_sqrtf>:
 8010cf4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010cf8:	4770      	bx	lr
	...

08010cfc <__ieee754_atan2f>:
 8010cfc:	ee10 2a90 	vmov	r2, s1
 8010d00:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8010d04:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010d08:	b510      	push	{r4, lr}
 8010d0a:	eef0 7a40 	vmov.f32	s15, s0
 8010d0e:	d806      	bhi.n	8010d1e <__ieee754_atan2f+0x22>
 8010d10:	ee10 0a10 	vmov	r0, s0
 8010d14:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010d18:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010d1c:	d904      	bls.n	8010d28 <__ieee754_atan2f+0x2c>
 8010d1e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010d22:	eeb0 0a67 	vmov.f32	s0, s15
 8010d26:	bd10      	pop	{r4, pc}
 8010d28:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8010d2c:	d103      	bne.n	8010d36 <__ieee754_atan2f+0x3a>
 8010d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d32:	f000 b883 	b.w	8010e3c <atanf>
 8010d36:	1794      	asrs	r4, r2, #30
 8010d38:	f004 0402 	and.w	r4, r4, #2
 8010d3c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010d40:	b943      	cbnz	r3, 8010d54 <__ieee754_atan2f+0x58>
 8010d42:	2c02      	cmp	r4, #2
 8010d44:	d05e      	beq.n	8010e04 <__ieee754_atan2f+0x108>
 8010d46:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010e18 <__ieee754_atan2f+0x11c>
 8010d4a:	2c03      	cmp	r4, #3
 8010d4c:	bf08      	it	eq
 8010d4e:	eef0 7a47 	vmoveq.f32	s15, s14
 8010d52:	e7e6      	b.n	8010d22 <__ieee754_atan2f+0x26>
 8010d54:	b941      	cbnz	r1, 8010d68 <__ieee754_atan2f+0x6c>
 8010d56:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8010e1c <__ieee754_atan2f+0x120>
 8010d5a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010e20 <__ieee754_atan2f+0x124>
 8010d5e:	2800      	cmp	r0, #0
 8010d60:	bfb8      	it	lt
 8010d62:	eef0 7a47 	vmovlt.f32	s15, s14
 8010d66:	e7dc      	b.n	8010d22 <__ieee754_atan2f+0x26>
 8010d68:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010d6c:	d110      	bne.n	8010d90 <__ieee754_atan2f+0x94>
 8010d6e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010d72:	f104 34ff 	add.w	r4, r4, #4294967295
 8010d76:	d107      	bne.n	8010d88 <__ieee754_atan2f+0x8c>
 8010d78:	2c02      	cmp	r4, #2
 8010d7a:	d846      	bhi.n	8010e0a <__ieee754_atan2f+0x10e>
 8010d7c:	4b29      	ldr	r3, [pc, #164]	@ (8010e24 <__ieee754_atan2f+0x128>)
 8010d7e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010d82:	edd3 7a00 	vldr	s15, [r3]
 8010d86:	e7cc      	b.n	8010d22 <__ieee754_atan2f+0x26>
 8010d88:	2c02      	cmp	r4, #2
 8010d8a:	d841      	bhi.n	8010e10 <__ieee754_atan2f+0x114>
 8010d8c:	4b26      	ldr	r3, [pc, #152]	@ (8010e28 <__ieee754_atan2f+0x12c>)
 8010d8e:	e7f6      	b.n	8010d7e <__ieee754_atan2f+0x82>
 8010d90:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010d94:	d0df      	beq.n	8010d56 <__ieee754_atan2f+0x5a>
 8010d96:	1a5b      	subs	r3, r3, r1
 8010d98:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8010d9c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010da0:	da1a      	bge.n	8010dd8 <__ieee754_atan2f+0xdc>
 8010da2:	2a00      	cmp	r2, #0
 8010da4:	da01      	bge.n	8010daa <__ieee754_atan2f+0xae>
 8010da6:	313c      	adds	r1, #60	@ 0x3c
 8010da8:	db19      	blt.n	8010dde <__ieee754_atan2f+0xe2>
 8010daa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010dae:	f000 f919 	bl	8010fe4 <fabsf>
 8010db2:	f000 f843 	bl	8010e3c <atanf>
 8010db6:	eef0 7a40 	vmov.f32	s15, s0
 8010dba:	2c01      	cmp	r4, #1
 8010dbc:	d012      	beq.n	8010de4 <__ieee754_atan2f+0xe8>
 8010dbe:	2c02      	cmp	r4, #2
 8010dc0:	d017      	beq.n	8010df2 <__ieee754_atan2f+0xf6>
 8010dc2:	2c00      	cmp	r4, #0
 8010dc4:	d0ad      	beq.n	8010d22 <__ieee754_atan2f+0x26>
 8010dc6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8010e2c <__ieee754_atan2f+0x130>
 8010dca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010dce:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8010e30 <__ieee754_atan2f+0x134>
 8010dd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010dd6:	e7a4      	b.n	8010d22 <__ieee754_atan2f+0x26>
 8010dd8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010e1c <__ieee754_atan2f+0x120>
 8010ddc:	e7ed      	b.n	8010dba <__ieee754_atan2f+0xbe>
 8010dde:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010e34 <__ieee754_atan2f+0x138>
 8010de2:	e7ea      	b.n	8010dba <__ieee754_atan2f+0xbe>
 8010de4:	ee17 3a90 	vmov	r3, s15
 8010de8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010dec:	ee07 3a90 	vmov	s15, r3
 8010df0:	e797      	b.n	8010d22 <__ieee754_atan2f+0x26>
 8010df2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8010e2c <__ieee754_atan2f+0x130>
 8010df6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010dfa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8010e30 <__ieee754_atan2f+0x134>
 8010dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e02:	e78e      	b.n	8010d22 <__ieee754_atan2f+0x26>
 8010e04:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010e30 <__ieee754_atan2f+0x134>
 8010e08:	e78b      	b.n	8010d22 <__ieee754_atan2f+0x26>
 8010e0a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8010e38 <__ieee754_atan2f+0x13c>
 8010e0e:	e788      	b.n	8010d22 <__ieee754_atan2f+0x26>
 8010e10:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010e34 <__ieee754_atan2f+0x138>
 8010e14:	e785      	b.n	8010d22 <__ieee754_atan2f+0x26>
 8010e16:	bf00      	nop
 8010e18:	c0490fdb 	.word	0xc0490fdb
 8010e1c:	3fc90fdb 	.word	0x3fc90fdb
 8010e20:	bfc90fdb 	.word	0xbfc90fdb
 8010e24:	08012334 	.word	0x08012334
 8010e28:	08012328 	.word	0x08012328
 8010e2c:	33bbbd2e 	.word	0x33bbbd2e
 8010e30:	40490fdb 	.word	0x40490fdb
 8010e34:	00000000 	.word	0x00000000
 8010e38:	3f490fdb 	.word	0x3f490fdb

08010e3c <atanf>:
 8010e3c:	b538      	push	{r3, r4, r5, lr}
 8010e3e:	ee10 5a10 	vmov	r5, s0
 8010e42:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010e46:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8010e4a:	eef0 7a40 	vmov.f32	s15, s0
 8010e4e:	d310      	bcc.n	8010e72 <atanf+0x36>
 8010e50:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8010e54:	d904      	bls.n	8010e60 <atanf+0x24>
 8010e56:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8010e5e:	bd38      	pop	{r3, r4, r5, pc}
 8010e60:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8010f98 <atanf+0x15c>
 8010e64:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8010f9c <atanf+0x160>
 8010e68:	2d00      	cmp	r5, #0
 8010e6a:	bfc8      	it	gt
 8010e6c:	eef0 7a47 	vmovgt.f32	s15, s14
 8010e70:	e7f3      	b.n	8010e5a <atanf+0x1e>
 8010e72:	4b4b      	ldr	r3, [pc, #300]	@ (8010fa0 <atanf+0x164>)
 8010e74:	429c      	cmp	r4, r3
 8010e76:	d810      	bhi.n	8010e9a <atanf+0x5e>
 8010e78:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8010e7c:	d20a      	bcs.n	8010e94 <atanf+0x58>
 8010e7e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010fa4 <atanf+0x168>
 8010e82:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010e8a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e92:	dce2      	bgt.n	8010e5a <atanf+0x1e>
 8010e94:	f04f 33ff 	mov.w	r3, #4294967295
 8010e98:	e013      	b.n	8010ec2 <atanf+0x86>
 8010e9a:	f000 f8a3 	bl	8010fe4 <fabsf>
 8010e9e:	4b42      	ldr	r3, [pc, #264]	@ (8010fa8 <atanf+0x16c>)
 8010ea0:	429c      	cmp	r4, r3
 8010ea2:	d84f      	bhi.n	8010f44 <atanf+0x108>
 8010ea4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8010ea8:	429c      	cmp	r4, r3
 8010eaa:	d841      	bhi.n	8010f30 <atanf+0xf4>
 8010eac:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010eb0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010eb4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010eb8:	2300      	movs	r3, #0
 8010eba:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010ebe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010ec2:	1c5a      	adds	r2, r3, #1
 8010ec4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010ec8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8010fac <atanf+0x170>
 8010ecc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8010fb0 <atanf+0x174>
 8010ed0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8010fb4 <atanf+0x178>
 8010ed4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010ed8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010edc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8010fb8 <atanf+0x17c>
 8010ee0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010ee4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8010fbc <atanf+0x180>
 8010ee8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010eec:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010fc0 <atanf+0x184>
 8010ef0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010ef4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010fc4 <atanf+0x188>
 8010ef8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010efc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8010fc8 <atanf+0x18c>
 8010f00:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010f04:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010fcc <atanf+0x190>
 8010f08:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010f0c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8010fd0 <atanf+0x194>
 8010f10:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010f14:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8010fd4 <atanf+0x198>
 8010f18:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010f1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010f20:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010f24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010f28:	d121      	bne.n	8010f6e <atanf+0x132>
 8010f2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f2e:	e794      	b.n	8010e5a <atanf+0x1e>
 8010f30:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010f34:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010f38:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010f3c:	2301      	movs	r3, #1
 8010f3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010f42:	e7be      	b.n	8010ec2 <atanf+0x86>
 8010f44:	4b24      	ldr	r3, [pc, #144]	@ (8010fd8 <atanf+0x19c>)
 8010f46:	429c      	cmp	r4, r3
 8010f48:	d80b      	bhi.n	8010f62 <atanf+0x126>
 8010f4a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8010f4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010f52:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010f56:	2302      	movs	r3, #2
 8010f58:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f60:	e7af      	b.n	8010ec2 <atanf+0x86>
 8010f62:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010f66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010f6a:	2303      	movs	r3, #3
 8010f6c:	e7a9      	b.n	8010ec2 <atanf+0x86>
 8010f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8010fdc <atanf+0x1a0>)
 8010f70:	491b      	ldr	r1, [pc, #108]	@ (8010fe0 <atanf+0x1a4>)
 8010f72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010f76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010f7a:	edd3 6a00 	vldr	s13, [r3]
 8010f7e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010f82:	2d00      	cmp	r5, #0
 8010f84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010f88:	edd2 7a00 	vldr	s15, [r2]
 8010f8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f90:	bfb8      	it	lt
 8010f92:	eef1 7a67 	vneglt.f32	s15, s15
 8010f96:	e760      	b.n	8010e5a <atanf+0x1e>
 8010f98:	bfc90fdb 	.word	0xbfc90fdb
 8010f9c:	3fc90fdb 	.word	0x3fc90fdb
 8010fa0:	3edfffff 	.word	0x3edfffff
 8010fa4:	7149f2ca 	.word	0x7149f2ca
 8010fa8:	3f97ffff 	.word	0x3f97ffff
 8010fac:	3c8569d7 	.word	0x3c8569d7
 8010fb0:	3d4bda59 	.word	0x3d4bda59
 8010fb4:	bd6ef16b 	.word	0xbd6ef16b
 8010fb8:	3d886b35 	.word	0x3d886b35
 8010fbc:	3dba2e6e 	.word	0x3dba2e6e
 8010fc0:	3e124925 	.word	0x3e124925
 8010fc4:	3eaaaaab 	.word	0x3eaaaaab
 8010fc8:	bd15a221 	.word	0xbd15a221
 8010fcc:	bd9d8795 	.word	0xbd9d8795
 8010fd0:	bde38e38 	.word	0xbde38e38
 8010fd4:	be4ccccd 	.word	0xbe4ccccd
 8010fd8:	401bffff 	.word	0x401bffff
 8010fdc:	08012350 	.word	0x08012350
 8010fe0:	08012340 	.word	0x08012340

08010fe4 <fabsf>:
 8010fe4:	ee10 3a10 	vmov	r3, s0
 8010fe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010fec:	ee00 3a10 	vmov	s0, r3
 8010ff0:	4770      	bx	lr
	...

08010ff4 <_init>:
 8010ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ff6:	bf00      	nop
 8010ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ffa:	bc08      	pop	{r3}
 8010ffc:	469e      	mov	lr, r3
 8010ffe:	4770      	bx	lr

08011000 <_fini>:
 8011000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011002:	bf00      	nop
 8011004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011006:	bc08      	pop	{r3}
 8011008:	469e      	mov	lr, r3
 801100a:	4770      	bx	lr
