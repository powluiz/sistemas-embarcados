
embarcados_aula_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104dc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001340  080106c0  080106c0  000116c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a00  08011a00  000135ec  2**0
                  CONTENTS
  4 .ARM          00000008  08011a00  08011a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a08  08011a08  000135ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a08  08011a08  00012a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011a0c  08011a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005ec  20000000  08011a10  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000073c4  200005ec  08011ffc  000135ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200079b0  08011ffc  000139b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000135ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c361  00000000  00000000  0001361c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b04  00000000  00000000  0003f97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb0  00000000  00000000  00045488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017d3  00000000  00000000  00047438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246af  00000000  00000000  00048c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025715  00000000  00000000  0006d2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ece3c  00000000  00000000  000929cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0017f80b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000988c  00000000  00000000  0017f8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00189150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002a3a  00000000  00000000  001891c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000138  00000000  00000000  0018bbfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200005ec 	.word	0x200005ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	080106a4 	.word	0x080106a4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200005f0 	.word	0x200005f0
 800021c:	080106a4 	.word	0x080106a4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b96a 	b.w	8000fa4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <FreeRTOS_CLIRegisterCommand>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
    {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFAIL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
        CLI_Definition_List_Item_t * pxNewListItem;

        /* Check the parameter is not NULL. */
        configASSERT( pxCommandToRegister != NULL );
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10b      	bne.n	8000fd2 <FreeRTOS_CLIRegisterCommand+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fbe:	f383 8811 	msr	BASEPRI, r3
 8000fc2:	f3bf 8f6f 	isb	sy
 8000fc6:	f3bf 8f4f 	dsb	sy
 8000fca:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	e7fd      	b.n	8000fce <FreeRTOS_CLIRegisterCommand+0x26>

        /* Create a new list item that will reference the command being registered. */
        pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8000fd2:	2008      	movs	r0, #8
 8000fd4:	f00b f92a 	bl	800c22c <pvPortMalloc>
 8000fd8:	6138      	str	r0, [r7, #16]
        configASSERT( pxNewListItem != NULL );
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10b      	bne.n	8000ff8 <FreeRTOS_CLIRegisterCommand+0x50>
	__asm volatile
 8000fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fe4:	f383 8811 	msr	BASEPRI, r3
 8000fe8:	f3bf 8f6f 	isb	sy
 8000fec:	f3bf 8f4f 	dsb	sy
 8000ff0:	60bb      	str	r3, [r7, #8]
}
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <FreeRTOS_CLIRegisterCommand+0x4c>

        if( pxNewListItem != NULL )
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d005      	beq.n	800100a <FreeRTOS_CLIRegisterCommand+0x62>
        {
            prvRegisterCommand( pxCommandToRegister, pxNewListItem );
 8000ffe:	6939      	ldr	r1, [r7, #16]
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f8e7 	bl	80011d4 <prvRegisterCommand>
            xReturn = pdPASS;
 8001006:	2301      	movs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800100a:	697b      	ldr	r3, [r7, #20]
    }
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput,
                                       char * pcWriteBuffer,
                                       size_t xWriteBufferLen )
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn = pdTRUE;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
    size_t xCommandStringLength;

    /* Note:  This function is not re-entrant.  It must not be called from more
     * thank one task. */

    if( pxCommand == NULL )
 8001024:	4b3a      	ldr	r3, [pc, #232]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d141      	bne.n	80010b0 <FreeRTOS_CLIProcessCommand+0x9c>
    {
        /* Search for the command string in the list of registered commands. */
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800102c:	4b38      	ldr	r3, [pc, #224]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 800102e:	4a39      	ldr	r2, [pc, #228]	@ (8001114 <FreeRTOS_CLIProcessCommand+0x100>)
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	e037      	b.n	80010a4 <FreeRTOS_CLIProcessCommand+0x90>
        {
            pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8001034:	4b36      	ldr	r3, [pc, #216]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61bb      	str	r3, [r7, #24]
            xCommandStringLength = strlen( pcRegisteredCommandString );
 800103e:	69b8      	ldr	r0, [r7, #24]
 8001040:	f7ff f94e 	bl	80002e0 <strlen>
 8001044:	6178      	str	r0, [r7, #20]

            /* To ensure the string lengths match exactly, so as not to pick up
             * a sub-string of a longer command, check the byte after the expected
             * end of the string is either the end of the string or a space before
             * a parameter. */
            if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	69b9      	ldr	r1, [r7, #24]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f00d f847 	bl	800e0de <strncmp>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d121      	bne.n	800109a <FreeRTOS_CLIProcessCommand+0x86>
            {
                if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b20      	cmp	r3, #32
 8001060:	d005      	beq.n	800106e <FreeRTOS_CLIProcessCommand+0x5a>
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d115      	bne.n	800109a <FreeRTOS_CLIProcessCommand+0x86>
                {
                    /* The command has been found.  Check it has the expected
                     * number of parameters.  If cExpectedNumberOfParameters is -1,
                     * then there could be a variable number of parameters and no
                     * check is made. */
                    if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800106e:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db18      	blt.n	80010ae <FreeRTOS_CLIProcessCommand+0x9a>
                    {
                        if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f000 f911 	bl	80012a4 <prvGetNumberOfParameters>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d00c      	beq.n	80010ae <FreeRTOS_CLIProcessCommand+0x9a>
                        {
                            xReturn = pdFALSE;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
                        }
                    }

                    break;
 8001098:	e009      	b.n	80010ae <FreeRTOS_CLIProcessCommand+0x9a>
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800109a:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1c3      	bne.n	8001034 <FreeRTOS_CLIProcessCommand+0x20>
 80010ac:	e000      	b.n	80010b0 <FreeRTOS_CLIProcessCommand+0x9c>
                    break;
 80010ae:	bf00      	nop
                }
            }
        }
    }

    if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80010b0:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00b      	beq.n	80010d0 <FreeRTOS_CLIProcessCommand+0xbc>
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d108      	bne.n	80010d0 <FreeRTOS_CLIProcessCommand+0xbc>
    {
        /* The command was found, but the number of parameters with the command
         * was incorrect. */
        strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4915      	ldr	r1, [pc, #84]	@ (8001118 <FreeRTOS_CLIProcessCommand+0x104>)
 80010c2:	68b8      	ldr	r0, [r7, #8]
 80010c4:	f00d f81d 	bl	800e102 <strncpy>
        pxCommand = NULL;
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e01a      	b.n	8001106 <FreeRTOS_CLIProcessCommand+0xf2>
    }
    else if( pxCommand != NULL )
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00f      	beq.n	80010f8 <FreeRTOS_CLIProcessCommand+0xe4>
    {
        /* Call the callback function that is registered to this command. */
        xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80010d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	68b8      	ldr	r0, [r7, #8]
 80010e6:	4798      	blx	r3
 80010e8:	61f8      	str	r0, [r7, #28]

        /* If xReturn is pdFALSE, then no further strings will be returned
         * after this one, and	pxCommand can be reset to NULL ready to search
         * for the next entered command. */
        if( xReturn == pdFALSE )
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10a      	bne.n	8001106 <FreeRTOS_CLIProcessCommand+0xf2>
        {
            pxCommand = NULL;
 80010f0:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <FreeRTOS_CLIProcessCommand+0xfc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e006      	b.n	8001106 <FreeRTOS_CLIProcessCommand+0xf2>
        }
    }
    else
    {
        /* pxCommand was NULL, the command was not found. */
        strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4908      	ldr	r1, [pc, #32]	@ (800111c <FreeRTOS_CLIProcessCommand+0x108>)
 80010fc:	68b8      	ldr	r0, [r7, #8]
 80010fe:	f00d f800 	bl	800e102 <strncpy>
        xReturn = pdFALSE;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001106:	69fb      	ldr	r3, [r7, #28]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000608 	.word	0x20000608
 8001114:	20000000 	.word	0x20000000
 8001118:	080106f8 	.word	0x080106f8
 800111c:	08010750 	.word	0x08010750

08001120 <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char * FreeRTOS_CLIGetParameter( const char * pcCommandString,
                                       UBaseType_t uxWantedParameter,
                                       BaseType_t * pxParameterStringLength )
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
    UBaseType_t uxParametersFound = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
    const char * pcReturn = NULL;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]

    *pxParameterStringLength = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]

    while( uxParametersFound < uxWantedParameter )
 800113a:	e03b      	b.n	80011b4 <FreeRTOS_CLIGetParameter+0x94>
    {
        /* Index the character pointer past the current word.  If this is the start
         * of the command string then the first word is the command itself. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
        {
            pcCommandString++;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3301      	adds	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d007      	beq.n	800115a <FreeRTOS_CLIGetParameter+0x3a>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b20      	cmp	r3, #32
 8001150:	d1f4      	bne.n	800113c <FreeRTOS_CLIGetParameter+0x1c>
        }

        /* Find the start of the next string. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001152:	e002      	b.n	800115a <FreeRTOS_CLIGetParameter+0x3a>
        {
            pcCommandString++;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <FreeRTOS_CLIGetParameter+0x4a>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b20      	cmp	r3, #32
 8001168:	d0f4      	beq.n	8001154 <FreeRTOS_CLIGetParameter+0x34>
        }

        /* Was a string found? */
        if( *pcCommandString != 0x00 )
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d025      	beq.n	80011be <FreeRTOS_CLIGetParameter+0x9e>
        {
            /* Is this the start of the required parameter? */
            uxParametersFound++;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3301      	adds	r3, #1
 8001176:	617b      	str	r3, [r7, #20]

            if( uxParametersFound == uxWantedParameter )
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	429a      	cmp	r2, r3
 800117e:	d119      	bne.n	80011b4 <FreeRTOS_CLIGetParameter+0x94>
            {
                /* How long is the parameter? */
                pcReturn = pcCommandString;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	613b      	str	r3, [r7, #16]

                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8001184:	e007      	b.n	8001196 <FreeRTOS_CLIGetParameter+0x76>
                {
                    ( *pxParameterStringLength )++;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	601a      	str	r2, [r3, #0]
                    pcCommandString++;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <FreeRTOS_CLIGetParameter+0x86>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d1ef      	bne.n	8001186 <FreeRTOS_CLIGetParameter+0x66>
                }

                if( *pxParameterStringLength == 0 )
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d109      	bne.n	80011c2 <FreeRTOS_CLIGetParameter+0xa2>
                {
                    pcReturn = NULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
                }

                break;
 80011b2:	e006      	b.n	80011c2 <FreeRTOS_CLIGetParameter+0xa2>
    while( uxParametersFound < uxWantedParameter )
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d3c2      	bcc.n	8001142 <FreeRTOS_CLIGetParameter+0x22>
 80011bc:	e002      	b.n	80011c4 <FreeRTOS_CLIGetParameter+0xa4>
            }
        }
        else
        {
            break;
 80011be:	bf00      	nop
 80011c0:	e000      	b.n	80011c4 <FreeRTOS_CLIGetParameter+0xa4>
                break;
 80011c2:	bf00      	nop
        }
    }

    return pcReturn;
 80011c4:	693b      	ldr	r3, [r7, #16]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <prvRegisterCommand>:
/*-----------------------------------------------------------*/

static void prvRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister,
                                CLI_Definition_List_Item_t * pxCliDefinitionListItemBuffer )
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
    static CLI_Definition_List_Item_t * pxLastCommandInList = &xRegisteredCommands;

    /* Check the parameters are not NULL. */
    configASSERT( pxCommandToRegister != NULL );
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10b      	bne.n	80011fc <prvRegisterCommand+0x28>
	__asm volatile
 80011e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011e8:	f383 8811 	msr	BASEPRI, r3
 80011ec:	f3bf 8f6f 	isb	sy
 80011f0:	f3bf 8f4f 	dsb	sy
 80011f4:	60fb      	str	r3, [r7, #12]
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <prvRegisterCommand+0x24>
    configASSERT( pxCliDefinitionListItemBuffer != NULL );
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10b      	bne.n	800121a <prvRegisterCommand+0x46>
	__asm volatile
 8001202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001206:	f383 8811 	msr	BASEPRI, r3
 800120a:	f3bf 8f6f 	isb	sy
 800120e:	f3bf 8f4f 	dsb	sy
 8001212:	60bb      	str	r3, [r7, #8]
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	e7fd      	b.n	8001216 <prvRegisterCommand+0x42>

    taskENTER_CRITICAL();
 800121a:	f00a fee5 	bl	800bfe8 <vPortEnterCritical>
    {
        /* Reference the command being registered from the newly created
         * list item. */
        pxCliDefinitionListItemBuffer->pxCommandLineDefinition = pxCommandToRegister;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	601a      	str	r2, [r3, #0]

        /* The new list item will get added to the end of the list, so
         * pxNext has nowhere to point. */
        pxCliDefinitionListItemBuffer->pxNext = NULL;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2200      	movs	r2, #0
 8001228:	605a      	str	r2, [r3, #4]

        /* Add the newly created list item to the end of the already existing
         * list. */
        pxLastCommandInList->pxNext = pxCliDefinitionListItemBuffer;
 800122a:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <prvRegisterCommand+0x70>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	605a      	str	r2, [r3, #4]

        /* Set the end of list marker to the new list item. */
        pxLastCommandInList = pxCliDefinitionListItemBuffer;
 8001232:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <prvRegisterCommand+0x70>)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	6013      	str	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 8001238:	f00a ff08 	bl	800c04c <vPortExitCritical>
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000008 	.word	0x20000008

08001248 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char * pcWriteBuffer,
                                  size_t xWriteBufferLen,
                                  const char * pcCommandString )
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn;

    ( void ) pcCommandString;

    if( pxCommand == NULL )
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <prvHelpCommand+0x54>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <prvHelpCommand+0x1a>
    {
        /* Reset the pxCommand pointer back to the start of the list. */
        pxCommand = &xRegisteredCommands;
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <prvHelpCommand+0x54>)
 800125e:	4a10      	ldr	r2, [pc, #64]	@ (80012a0 <prvHelpCommand+0x58>)
 8001260:	601a      	str	r2, [r3, #0]
    }

    /* Return the next command help string, before moving the pointer on to
     * the next command in the list. */
    strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <prvHelpCommand+0x54>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	4619      	mov	r1, r3
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f00c ff47 	bl	800e102 <strncpy>
    pxCommand = pxCommand->pxNext;
 8001274:	4b09      	ldr	r3, [pc, #36]	@ (800129c <prvHelpCommand+0x54>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4a08      	ldr	r2, [pc, #32]	@ (800129c <prvHelpCommand+0x54>)
 800127c:	6013      	str	r3, [r2, #0]

    if( pxCommand == NULL )
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <prvHelpCommand+0x54>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <prvHelpCommand+0x44>
    {
        /* There are no more commands in the list, so there will be no more
         *  strings to return after this one and pdFALSE should be returned. */
        xReturn = pdFALSE;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	e001      	b.n	8001290 <prvHelpCommand+0x48>
    }
    else
    {
        xReturn = pdTRUE;
 800128c:	2301      	movs	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001290:	697b      	ldr	r3, [r7, #20]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000060c 	.word	0x2000060c
 80012a0:	20000000 	.word	0x20000000

080012a4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char * pcCommandString )
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    int8_t cParameters = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
    BaseType_t xLastCharacterWasSpace = pdFALSE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]

    /* Count the number of space delimited words in pcCommandString. */
    while( *pcCommandString != 0x00 )
 80012b4:	e014      	b.n	80012e0 <prvGetNumberOfParameters+0x3c>
    {
        if( ( *pcCommandString ) == ' ' )
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b20      	cmp	r3, #32
 80012bc:	d10b      	bne.n	80012d6 <prvGetNumberOfParameters+0x32>
        {
            if( xLastCharacterWasSpace != pdTRUE )
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d00a      	beq.n	80012da <prvGetNumberOfParameters+0x36>
            {
                cParameters++;
 80012c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	3301      	adds	r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	73fb      	strb	r3, [r7, #15]
                xLastCharacterWasSpace = pdTRUE;
 80012d0:	2301      	movs	r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	e001      	b.n	80012da <prvGetNumberOfParameters+0x36>
            }
        }
        else
        {
            xLastCharacterWasSpace = pdFALSE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
        }

        pcCommandString++;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3301      	adds	r3, #1
 80012de:	607b      	str	r3, [r7, #4]
    while( *pcCommandString != 0x00 )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1e6      	bne.n	80012b6 <prvGetNumberOfParameters+0x12>
    }

    /* If the command string ended with spaces, then there will have been too
     * many parameters counted. */
    if( xLastCharacterWasSpace == pdTRUE )
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <prvGetNumberOfParameters+0x56>
    {
        cParameters--;
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	3b01      	subs	r3, #1
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	73fb      	strb	r3, [r7, #15]
    }

    /* The value returned is one less than the number of space delimited words,
     * as the first word should be the command itself. */
    return cParameters;
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
extern TIM_HandleTypeDef htim4;
void configureTimerForRunTimeStats(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    /* Inicia a contagem do timer */
    HAL_TIM_Base_Start_IT(&htim4);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <configureTimerForRunTimeStats+0x10>)
 8001312:	f004 ff69 	bl	80061e8 <HAL_TIM_Base_Start_IT>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200008e0 	.word	0x200008e0

08001320 <getRunTimeCounterValue>:

unsigned int ulHighFrequencyTimerTicks = 0;
unsigned long getRunTimeCounterValue(void) {
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
    /* Contagem de ticks do timer */
    return ulHighFrequencyTimerTicks;
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <getRunTimeCounterValue+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000610 	.word	0x20000610

08001338 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

char uart_data;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
    char data = huart->Instance->RDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134a:	b2db      	uxtb	r3, r3
 800134c:	72fb      	strb	r3, [r7, #11]
    xQueueSendFromISR(uart_rx_q, &data, &pxHigherPriorityTaskWoken);
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <HAL_UART_RxCpltCallback+0x48>)
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	f107 020c 	add.w	r2, r7, #12
 8001356:	f107 010b 	add.w	r1, r7, #11
 800135a:	2300      	movs	r3, #0
 800135c:	f008 f8f0 	bl	8009540 <xQueueGenericSendFromISR>
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d007      	beq.n	8001376 <HAL_UART_RxCpltCallback+0x3e>
 8001366:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <HAL_UART_RxCpltCallback+0x4c>)
 8001368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	f3bf 8f4f 	dsb	sy
 8001372:	f3bf 8f6f 	isb	sy
}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000940 	.word	0x20000940
 8001384:	e000ed04 	.word	0xe000ed04

08001388 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
    xSemaphoreGiveFromISR(sem_tx_uart, &pxHigherPriorityTaskWoken);
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_UART_TxCpltCallback+0x3c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f107 020c 	add.w	r2, r7, #12
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f008 f96c 	bl	800967c <xQueueGiveFromISR>
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d007      	beq.n	80013ba <HAL_UART_TxCpltCallback+0x32>
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <HAL_UART_TxCpltCallback+0x40>)
 80013ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	f3bf 8f4f 	dsb	sy
 80013b6:	f3bf 8f6f 	isb	sy
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000938 	.word	0x20000938
 80013c8:	e000ed04 	.word	0xe000ed04

080013cc <get_char_from_uart>:

// Antiga UART_RX_RTOS - Retorna os dados recebidos pela UART
BaseType_t get_char_from_uart(char *pData, TickType_t timeout) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
    return xQueueReceive(uart_rx_q, pData, timeout);
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <get_char_from_uart+0x24>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	f008 f9dc 	bl	800979c <xQueueReceive>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000940 	.word	0x20000940

080013f4 <print_string>:

void print_string(char *string, TickType_t timeout) {
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
    if (xSemaphoreTake(mutex_uart, timeout) == pdTRUE) {
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <print_string+0x4c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6839      	ldr	r1, [r7, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f008 faab 	bl	8009960 <xQueueSemaphoreTake>
 800140a:	4603      	mov	r3, r0
 800140c:	2b01      	cmp	r3, #1
 800140e:	d112      	bne.n	8001436 <print_string+0x42>
        (void)xMessageBufferSend(message_buffer, string, strlen(string),
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <print_string+0x50>)
 8001412:	681c      	ldr	r4, [r3, #0]
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7fe ff63 	bl	80002e0 <strlen>
 800141a:	4602      	mov	r2, r0
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4620      	mov	r0, r4
 8001424:	f008 fd66 	bl	8009ef4 <xStreamBufferSend>
                                 portMAX_DELAY);
        xSemaphoreGive(mutex_uart);
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <print_string+0x4c>)
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	2300      	movs	r3, #0
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	f007 ff83 	bl	800933c <xQueueGenericSend>
    }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bd90      	pop	{r4, r7, pc}
 800143e:	bf00      	nop
 8001440:	20000930 	.word	0x20000930
 8001444:	20000934 	.word	0x20000934

08001448 <print_char>:

void print_char(char string, TickType_t timeout) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
    if (xSemaphoreTake(mutex_uart, timeout) == pdTRUE) {
 8001454:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <print_char+0x44>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6839      	ldr	r1, [r7, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f008 fa80 	bl	8009960 <xQueueSemaphoreTake>
 8001460:	4603      	mov	r3, r0
 8001462:	2b01      	cmp	r3, #1
 8001464:	d10e      	bne.n	8001484 <print_char+0x3c>
        (void)xMessageBufferSend(message_buffer, &string, 1, portMAX_DELAY);
 8001466:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <print_char+0x48>)
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	1df9      	adds	r1, r7, #7
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	2201      	movs	r2, #1
 8001472:	f008 fd3f 	bl	8009ef4 <xStreamBufferSend>
        xSemaphoreGive(mutex_uart);
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <print_char+0x44>)
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	2300      	movs	r3, #0
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	f007 ff5c 	bl	800933c <xQueueGenericSend>
    }
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000930 	.word	0x20000930
 8001490:	20000934 	.word	0x20000934

08001494 <print_task>:

#define BUFFER_SIZE 512

static void print_task(void *params) {
 8001494:	b580      	push	{r7, lr}
 8001496:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800149a:	af00      	add	r7, sp, #0
 800149c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80014a0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80014a4:	6018      	str	r0, [r3, #0]
    char buffer[BUFFER_SIZE];

    while (1) {
        size_t size = xMessageBufferReceive(message_buffer, buffer, BUFFER_SIZE,
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <print_task+0x54>)
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	f107 010c 	add.w	r1, r7, #12
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014b6:	f008 fe13 	bl	800a0e0 <xStreamBufferReceive>
 80014ba:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
                                            portMAX_DELAY);
        if (size) {
 80014be:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0ef      	beq.n	80014a6 <print_task+0x12>
            HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t *)buffer, size);
 80014c6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	@ (80014ec <print_task+0x58>)
 80014d4:	f005 fc00 	bl	8006cd8 <HAL_UART_Transmit_DMA>
            xSemaphoreTake(sem_tx_uart, portMAX_DELAY);
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <print_task+0x5c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	4618      	mov	r0, r3
 80014e2:	f008 fa3d 	bl	8009960 <xQueueSemaphoreTake>
    while (1) {
 80014e6:	e7de      	b.n	80014a6 <print_task+0x12>
 80014e8:	20000934 	.word	0x20000934
 80014ec:	20000754 	.word	0x20000754
 80014f0:	20000938 	.word	0x20000938
 80014f4:	00000000 	.word	0x00000000

080014f8 <adc_task>:
        }
    }
}

void adc_task(void *param) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	f5ad 6d62 	sub.w	sp, sp, #3616	@ 0xe20
 80014fe:	af02      	add	r7, sp, #8
 8001500:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001504:	f6a3 6314 	subw	r3, r3, #3604	@ 0xe14
 8001508:	6018      	str	r0, [r3, #0]
    uint16_t adcBuffer[256];
    float ReIm[256 * 2];
    float mod[256];

    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuffer, 256);
 800150a:	f507 6341 	add.w	r3, r7, #3088	@ 0xc10
 800150e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001512:	4619      	mov	r1, r3
 8001514:	485a      	ldr	r0, [pc, #360]	@ (8001680 <adc_task+0x188>)
 8001516:	f001 fdb7 	bl	8003088 <HAL_ADC_Start_DMA>
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 800151a:	2300      	movs	r3, #0
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001522:	4a58      	ldr	r2, [pc, #352]	@ (8001684 <adc_task+0x18c>)
 8001524:	2100      	movs	r1, #0
 8001526:	4858      	ldr	r0, [pc, #352]	@ (8001688 <adc_task+0x190>)
 8001528:	f002 fd4c 	bl	8003fc4 <HAL_DAC_Start_DMA>
                      (const uint32_t *)sin_wave_3rd_harmonic, 256,
                      DAC_ALIGN_12B_R);

    HAL_TIM_Base_Start(&htim2);
 800152c:	4857      	ldr	r0, [pc, #348]	@ (800168c <adc_task+0x194>)
 800152e:	f004 fdd1 	bl	80060d4 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim3);
 8001532:	4857      	ldr	r0, [pc, #348]	@ (8001690 <adc_task+0x198>)
 8001534:	f004 fdce 	bl	80060d4 <HAL_TIM_Base_Start>

    while (1) {
        xSemaphoreTake(sem_adc, portMAX_DELAY);
 8001538:	4b56      	ldr	r3, [pc, #344]	@ (8001694 <adc_task+0x19c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	4618      	mov	r0, r3
 8001542:	f008 fa0d 	bl	8009960 <xQueueSemaphoreTake>

        int k = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
        for (int i = 0; i < 256; i++) {
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 3e10 	str.w	r3, [r7, #3600]	@ 0xe10
 8001552:	e02f      	b.n	80015b4 <adc_task+0xbc>
            ReIm[k] = (float)adcBuffer[i] * 0.0008056640625f;
 8001554:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001558:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800155c:	f8d7 2e10 	ldr.w	r2, [r7, #3600]	@ 0xe10
 8001560:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001564:	ee07 3a90 	vmov	s15, r3
 8001568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800156c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001698 <adc_task+0x1a0>
 8001570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001574:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001578:	f6a3 2208 	subw	r2, r3, #2568	@ 0xa08
 800157c:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	edc3 7a00 	vstr	s15, [r3]
            ReIm[k + 1] = 0.0;
 8001588:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 800158c:	3301      	adds	r3, #1
 800158e:	f607 6218 	addw	r2, r7, #3608	@ 0xe18
 8001592:	f6a2 2208 	subw	r2, r2, #2568	@ 0xa08
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
            k += 2;
 80015a0:	f8d7 3e14 	ldr.w	r3, [r7, #3604]	@ 0xe14
 80015a4:	3302      	adds	r3, #2
 80015a6:	f8c7 3e14 	str.w	r3, [r7, #3604]	@ 0xe14
        for (int i = 0; i < 256; i++) {
 80015aa:	f8d7 3e10 	ldr.w	r3, [r7, #3600]	@ 0xe10
 80015ae:	3301      	adds	r3, #1
 80015b0:	f8c7 3e10 	str.w	r3, [r7, #3600]	@ 0xe10
 80015b4:	f8d7 3e10 	ldr.w	r3, [r7, #3600]	@ 0xe10
 80015b8:	2bff      	cmp	r3, #255	@ 0xff
 80015ba:	ddcb      	ble.n	8001554 <adc_task+0x5c>
        }

        arm_cfft_f32(&arm_cfft_sR_f32_len256, ReIm, 0, 1);
 80015bc:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80015c0:	2301      	movs	r3, #1
 80015c2:	2200      	movs	r2, #0
 80015c4:	4835      	ldr	r0, [pc, #212]	@ (800169c <adc_task+0x1a4>)
 80015c6:	f00b fb45 	bl	800cc54 <arm_cfft_f32>
        arm_cmplx_mag_f32(ReIm, mod, 256);
 80015ca:	f107 0110 	add.w	r1, r7, #16
 80015ce:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80015d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015d6:	4618      	mov	r0, r3
 80015d8:	f00b fbd4 	bl	800cd84 <arm_cmplx_mag_f32>
        arm_scale_f32(mod, 0.0078125, mod, 128);
 80015dc:	f107 0110 	add.w	r1, r7, #16
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	2280      	movs	r2, #128	@ 0x80
 80015e6:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80016a0 <adc_task+0x1a8>
 80015ea:	4618      	mov	r0, r3
 80015ec:	f00b fcee 	bl	800cfcc <arm_scale_f32>
        mod[0] = mod[0] * 0.5;
 80015f0:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 80015f4:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001604:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001608:	f6a3 6308 	subw	r3, r3, #3592	@ 0xe08
 800160c:	edc3 7a00 	vstr	s15, [r3]

        volatile float fund_phase = atan2f(ReIm[3], ReIm[2]) * 180 /
 8001610:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001614:	f6a3 2308 	subw	r3, r3, #2568	@ 0xa08
 8001618:	edd3 7a03 	vldr	s15, [r3, #12]
 800161c:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001620:	f6a3 2308 	subw	r3, r3, #2568	@ 0xa08
 8001624:	ed93 7a02 	vldr	s14, [r3, #8]
 8001628:	eef0 0a47 	vmov.f32	s1, s14
 800162c:	eeb0 0a67 	vmov.f32	s0, s15
 8001630:	f00e fe98 	bl	8010364 <atan2f>
 8001634:	eef0 7a40 	vmov.f32	s15, s0
 8001638:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80016a4 <adc_task+0x1ac>
 800163c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001640:	ee17 0a90 	vmov	r0, s15
 8001644:	f7fe ffb8 	bl	80005b8 <__aeabi_f2d>
 8001648:	a30b      	add	r3, pc, #44	@ (adr r3, 8001678 <adc_task+0x180>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	f7ff f935 	bl	80008bc <__aeabi_ddiv>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff fadd 	bl	8000c18 <__aeabi_d2f>
 800165e:	4602      	mov	r2, r0
 8001660:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 8001664:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 8001668:	601a      	str	r2, [r3, #0]
                                    M_PI;  // Fase R da harmonica fundamental
        (void)fund_phase;
 800166a:	f607 6318 	addw	r3, r7, #3608	@ 0xe18
 800166e:	f6a3 630c 	subw	r3, r3, #3596	@ 0xe0c
 8001672:	681b      	ldr	r3, [r3, #0]
    while (1) {
 8001674:	e760      	b.n	8001538 <adc_task+0x40>
 8001676:	bf00      	nop
 8001678:	54442d18 	.word	0x54442d18
 800167c:	400921fb 	.word	0x400921fb
 8001680:	20000614 	.word	0x20000614
 8001684:	2000020c 	.word	0x2000020c
 8001688:	200006e0 	.word	0x200006e0
 800168c:	20000848 	.word	0x20000848
 8001690:	20000894 	.word	0x20000894
 8001694:	2000093c 	.word	0x2000093c
 8001698:	3a533333 	.word	0x3a533333
 800169c:	08010ad8 	.word	0x08010ad8
 80016a0:	3c000000 	.word	0x3c000000
 80016a4:	43340000 	.word	0x43340000

080016a8 <HAL_ADC_ConvCpltCallback>:
        // volatile TickType_t stop = xTaskGetTickCount();
        //(void)fund_phase;
    }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
    xSemaphoreGiveFromISR(sem_adc, &pxHigherPriorityTaskWoken);
 80016b4:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f107 020c 	add.w	r2, r7, #12
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f007 ffdc 	bl	800967c <xQueueGiveFromISR>
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <HAL_ADC_ConvCpltCallback+0x32>
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <HAL_ADC_ConvCpltCallback+0x40>)
 80016cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	f3bf 8f4f 	dsb	sy
 80016d6:	f3bf 8f6f 	isb	sy
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000093c 	.word	0x2000093c
 80016e8:	e000ed04 	.word	0xe000ed04

080016ec <HAL_DAC_ConvCpltCallbackCh1>:

volatile int dac_counter = 0;
volatile int flag = 0;
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hadc) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	6078      	str	r0, [r7, #4]
#if 1
    dac_counter++;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	3301      	adds	r3, #1
 80016fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001764 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 80016fc:	6013      	str	r3, [r2, #0]
    if (dac_counter >= 120) {
 80016fe:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b77      	cmp	r3, #119	@ 0x77
 8001704:	dd29      	ble.n	800175a <HAL_DAC_ConvCpltCallbackCh1+0x6e>
        dac_counter = 0;
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
        HAL_TIM_Base_Stop(&htim2);
 800170c:	4816      	ldr	r0, [pc, #88]	@ (8001768 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 800170e:	f004 fd43 	bl	8006198 <HAL_TIM_Base_Stop>
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001712:	2100      	movs	r1, #0
 8001714:	4815      	ldr	r0, [pc, #84]	@ (800176c <HAL_DAC_ConvCpltCallbackCh1+0x80>)
 8001716:	f002 fd29 	bl	800416c <HAL_DAC_Stop_DMA>

        if (flag == 0) {
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10c      	bne.n	800173c <HAL_DAC_ConvCpltCallbackCh1+0x50>
            HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 8001722:	2300      	movs	r3, #0
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800172a:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 800172c:	2100      	movs	r1, #0
 800172e:	480f      	ldr	r0, [pc, #60]	@ (800176c <HAL_DAC_ConvCpltCallbackCh1+0x80>)
 8001730:	f002 fc48 	bl	8003fc4 <HAL_DAC_Start_DMA>
                              (uint32_t *)sin_wave_3rd_harmonic, 256,
                              DAC_ALIGN_12B_R);
            flag = 1;
 8001734:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e00b      	b.n	8001754 <HAL_DAC_ConvCpltCallbackCh1+0x68>
        } else {
            HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)sin_wave, 256,
 800173c:	2300      	movs	r3, #0
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001744:	4a0c      	ldr	r2, [pc, #48]	@ (8001778 <HAL_DAC_ConvCpltCallbackCh1+0x8c>)
 8001746:	2100      	movs	r1, #0
 8001748:	4808      	ldr	r0, [pc, #32]	@ (800176c <HAL_DAC_ConvCpltCallbackCh1+0x80>)
 800174a:	f002 fc3b 	bl	8003fc4 <HAL_DAC_Start_DMA>
                              DAC_ALIGN_12B_R);
            flag = 0;
 800174e:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
        }
        HAL_TIM_Base_Start(&htim2);
 8001754:	4804      	ldr	r0, [pc, #16]	@ (8001768 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 8001756:	f004 fcbd 	bl	80060d4 <HAL_TIM_Base_Start>
    }
#endif
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000094c 	.word	0x2000094c
 8001768:	20000848 	.word	0x20000848
 800176c:	200006e0 	.word	0x200006e0
 8001770:	20000950 	.word	0x20000950
 8001774:	2000020c 	.word	0x2000020c
 8001778:	2000000c 	.word	0x2000000c

0800177c <getInstalledTasksFunction>:

/* ---------------- Get Installed Tasks ---------------- */

static BaseType_t getInstalledTasksFunction(char *pcWriteBuffer,
                                            size_t xWriteBufferLen,
                                            const char *pcCommandString) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
    static const char *pcHeader =
        "Task                         State  Priority   Stack  "
        "Number\r\n------------------------------------------------------------"
        "--\r\n ";

    strcpy(pcWriteBuffer, pcHeader);
 8001788:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <getInstalledTasksFunction+0x38>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f00c fd97 	bl	800e2c2 <strcpy>
    vTaskList(pcWriteBuffer + strlen(pcHeader));
 8001794:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <getInstalledTasksFunction+0x38>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fda1 	bl	80002e0 <strlen>
 800179e:	4602      	mov	r2, r0
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00a f815 	bl	800b7d4 <vTaskList>
    return pdFALSE;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000040c 	.word	0x2000040c

080017b8 <getRuntimeStatsFunction>:

/* ---------------- Get Runtime Info ---------------- */

static BaseType_t getRuntimeStatsFunction(char *pcWriteBuffer,
                                          size_t xWriteBufferLen,
                                          const char *pcCommandString) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
    static const char *pcHeader =
        "Task                          Runtime          CPU "
        "Usage\r\n----------------------------------------------------------"
        "\r\n";
    strcpy(pcWriteBuffer, pcHeader);
 80017c4:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <getRuntimeStatsFunction+0x38>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f00c fd79 	bl	800e2c2 <strcpy>
    vTaskGetRunTimeStats(pcWriteBuffer + strlen(pcHeader));
 80017d0:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <getRuntimeStatsFunction+0x38>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fd83 	bl	80002e0 <strlen>
 80017da:	4602      	mov	r2, r0
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f00a f88d 	bl	800b900 <vTaskGetRunTimeStats>
    return pdFALSE;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000410 	.word	0x20000410

080017f4 <changeWaveFunction>:
/* ---------------- Change Sin Wave ---------------- */
uint16_t sin_wave[256];
uint16_t sin_wave_3rd_harmonic[256];
static BaseType_t changeWaveFunction(char *pcWriteBuffer,
                                     size_t xWriteBufferLen,
                                     const char *pcCommandString) {
 80017f4:	b5b0      	push	{r4, r5, r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
    BaseType_t parameter_lenght;
    const char *parameter =
        FreeRTOS_CLIGetParameter(pcCommandString, 1, &parameter_lenght);
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	461a      	mov	r2, r3
 8001806:	2101      	movs	r1, #1
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fc89 	bl	8001120 <FreeRTOS_CLIGetParameter>
 800180e:	6178      	str	r0, [r7, #20]

    if (!strcmp(parameter, "sine")) {
 8001810:	4931      	ldr	r1, [pc, #196]	@ (80018d8 <changeWaveFunction+0xe4>)
 8001812:	6978      	ldr	r0, [r7, #20]
 8001814:	f7fe fd04 	bl	8000220 <strcmp>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d11e      	bne.n	800185c <changeWaveFunction+0x68>
        HAL_TIM_Base_Stop(&htim2);
 800181e:	482f      	ldr	r0, [pc, #188]	@ (80018dc <changeWaveFunction+0xe8>)
 8001820:	f004 fcba 	bl	8006198 <HAL_TIM_Base_Stop>
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001824:	2100      	movs	r1, #0
 8001826:	482e      	ldr	r0, [pc, #184]	@ (80018e0 <changeWaveFunction+0xec>)
 8001828:	f002 fca0 	bl	800416c <HAL_DAC_Stop_DMA>
        HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)sin_wave, 256,
 800182c:	2300      	movs	r3, #0
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001834:	4a2b      	ldr	r2, [pc, #172]	@ (80018e4 <changeWaveFunction+0xf0>)
 8001836:	2100      	movs	r1, #0
 8001838:	4829      	ldr	r0, [pc, #164]	@ (80018e0 <changeWaveFunction+0xec>)
 800183a:	f002 fbc3 	bl	8003fc4 <HAL_DAC_Start_DMA>
                          DAC_ALIGN_12B_R);
        HAL_TIM_Base_Start(&htim2);
 800183e:	4827      	ldr	r0, [pc, #156]	@ (80018dc <changeWaveFunction+0xe8>)
 8001840:	f004 fc48 	bl	80060d4 <HAL_TIM_Base_Start>
        strcpy(pcWriteBuffer, "Sine Signal set\n\r");
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a28      	ldr	r2, [pc, #160]	@ (80018e8 <changeWaveFunction+0xf4>)
 8001848:	461d      	mov	r5, r3
 800184a:	4614      	mov	r4, r2
 800184c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184e:	6028      	str	r0, [r5, #0]
 8001850:	6069      	str	r1, [r5, #4]
 8001852:	60aa      	str	r2, [r5, #8]
 8001854:	60eb      	str	r3, [r5, #12]
 8001856:	8823      	ldrh	r3, [r4, #0]
 8001858:	822b      	strh	r3, [r5, #16]
 800185a:	e037      	b.n	80018cc <changeWaveFunction+0xd8>
    } else if (!strcmp(parameter, "sine3rd")) {
 800185c:	4923      	ldr	r1, [pc, #140]	@ (80018ec <changeWaveFunction+0xf8>)
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7fe fcde 	bl	8000220 <strcmp>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d120      	bne.n	80018ac <changeWaveFunction+0xb8>
        HAL_TIM_Base_Stop(&htim2);
 800186a:	481c      	ldr	r0, [pc, #112]	@ (80018dc <changeWaveFunction+0xe8>)
 800186c:	f004 fc94 	bl	8006198 <HAL_TIM_Base_Stop>
        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001870:	2100      	movs	r1, #0
 8001872:	481b      	ldr	r0, [pc, #108]	@ (80018e0 <changeWaveFunction+0xec>)
 8001874:	f002 fc7a 	bl	800416c <HAL_DAC_Stop_DMA>
        HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1,
 8001878:	2300      	movs	r3, #0
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001880:	4a1b      	ldr	r2, [pc, #108]	@ (80018f0 <changeWaveFunction+0xfc>)
 8001882:	2100      	movs	r1, #0
 8001884:	4816      	ldr	r0, [pc, #88]	@ (80018e0 <changeWaveFunction+0xec>)
 8001886:	f002 fb9d 	bl	8003fc4 <HAL_DAC_Start_DMA>
                          (uint32_t *)sin_wave_3rd_harmonic, 256,
                          DAC_ALIGN_12B_R);
        HAL_TIM_Base_Start(&htim2);
 800188a:	4814      	ldr	r0, [pc, #80]	@ (80018dc <changeWaveFunction+0xe8>)
 800188c:	f004 fc22 	bl	80060d4 <HAL_TIM_Base_Start>
        strcpy(pcWriteBuffer, "Sine3rd Signal set\n\r");
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4a18      	ldr	r2, [pc, #96]	@ (80018f4 <changeWaveFunction+0x100>)
 8001894:	461d      	mov	r5, r3
 8001896:	4614      	mov	r4, r2
 8001898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800189a:	6028      	str	r0, [r5, #0]
 800189c:	6069      	str	r1, [r5, #4]
 800189e:	60aa      	str	r2, [r5, #8]
 80018a0:	60eb      	str	r3, [r5, #12]
 80018a2:	6820      	ldr	r0, [r4, #0]
 80018a4:	6128      	str	r0, [r5, #16]
 80018a6:	7923      	ldrb	r3, [r4, #4]
 80018a8:	752b      	strb	r3, [r5, #20]
 80018aa:	e00f      	b.n	80018cc <changeWaveFunction+0xd8>
    } else {
        strcpy(pcWriteBuffer, "Invalid wave signal!\n\r");
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <changeWaveFunction+0x104>)
 80018b0:	461c      	mov	r4, r3
 80018b2:	4615      	mov	r5, r2
 80018b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b6:	6020      	str	r0, [r4, #0]
 80018b8:	6061      	str	r1, [r4, #4]
 80018ba:	60a2      	str	r2, [r4, #8]
 80018bc:	60e3      	str	r3, [r4, #12]
 80018be:	6828      	ldr	r0, [r5, #0]
 80018c0:	6120      	str	r0, [r4, #16]
 80018c2:	88ab      	ldrh	r3, [r5, #4]
 80018c4:	79aa      	ldrb	r2, [r5, #6]
 80018c6:	82a3      	strh	r3, [r4, #20]
 80018c8:	4613      	mov	r3, r2
 80018ca:	75a3      	strb	r3, [r4, #22]
    }
    return pdFALSE;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bdb0      	pop	{r4, r5, r7, pc}
 80018d6:	bf00      	nop
 80018d8:	080107f0 	.word	0x080107f0
 80018dc:	20000848 	.word	0x20000848
 80018e0:	200006e0 	.word	0x200006e0
 80018e4:	2000000c 	.word	0x2000000c
 80018e8:	080107f8 	.word	0x080107f8
 80018ec:	0801080c 	.word	0x0801080c
 80018f0:	2000020c 	.word	0x2000020c
 80018f4:	08010814 	.word	0x08010814
 80018f8:	0801082c 	.word	0x0801082c

080018fc <clearTerminalFunction>:

/* ---------------- Clear Terminal ---------------- */

static BaseType_t clearTerminalFunction(char *pcWriteBuffer,
                                        size_t xWriteBufferLen,
                                        const char *pcCommandString) {
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
    strcpy(pcWriteBuffer, "\033[H\033[J\n\r");
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4907      	ldr	r1, [pc, #28]	@ (8001928 <clearTerminalFunction+0x2c>)
 800190c:	461a      	mov	r2, r3
 800190e:	460b      	mov	r3, r1
 8001910:	cb03      	ldmia	r3!, {r0, r1}
 8001912:	6010      	str	r0, [r2, #0]
 8001914:	6051      	str	r1, [r2, #4]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	7213      	strb	r3, [r2, #8]
    return pdFALSE;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	0801088c 	.word	0x0801088c

0800192c <terminal_task>:
/* ---------------- Terminal Task ---------------- */

#define MAX_INPUT_LENGTH 50
#define MAX_OUTPUT_LENGTH 512

void terminal_task(void *params) {
 800192c:	b580      	push	{r7, lr}
 800192e:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8001932:	af00      	add	r7, sp, #0
 8001934:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001938:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800193c:	6018      	str	r0, [r3, #0]
    int8_t cRxedChar, cInputIndex = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    BaseType_t xMoreDataToFollow;

    /* Buffers de entrada e saída */
    int8_t pcInputString[MAX_INPUT_LENGTH];
    int8_t pcOutputString[MAX_OUTPUT_LENGTH];
    memset(pcInputString, 0x00, MAX_INPUT_LENGTH);
 8001944:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001948:	2232      	movs	r2, #50	@ 0x32
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f00c fbbe 	bl	800e0ce <memset>

    FreeRTOS_CLIRegisterCommand(&xGetInstalledTasksCommand);
 8001952:	4847      	ldr	r0, [pc, #284]	@ (8001a70 <terminal_task+0x144>)
 8001954:	f7ff fb28 	bl	8000fa8 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xGetRuntimeCommand);
 8001958:	4846      	ldr	r0, [pc, #280]	@ (8001a74 <terminal_task+0x148>)
 800195a:	f7ff fb25 	bl	8000fa8 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xChangeWaveCommand);
 800195e:	4846      	ldr	r0, [pc, #280]	@ (8001a78 <terminal_task+0x14c>)
 8001960:	f7ff fb22 	bl	8000fa8 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xClearTerminalCommand);
 8001964:	4845      	ldr	r0, [pc, #276]	@ (8001a7c <terminal_task+0x150>)
 8001966:	f7ff fb1f 	bl	8000fa8 <FreeRTOS_CLIRegisterCommand>

    print_string("----- FreeRTOS Terminal -----\r\n\n", portMAX_DELAY);
 800196a:	f04f 31ff 	mov.w	r1, #4294967295
 800196e:	4844      	ldr	r0, [pc, #272]	@ (8001a80 <terminal_task+0x154>)
 8001970:	f7ff fd40 	bl	80013f4 <print_string>

    /* Recepção de 1byte pela uart */
    HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)&uart_data, 1);
 8001974:	2201      	movs	r2, #1
 8001976:	4943      	ldr	r1, [pc, #268]	@ (8001a84 <terminal_task+0x158>)
 8001978:	4843      	ldr	r0, [pc, #268]	@ (8001a88 <terminal_task+0x15c>)
 800197a:	f005 f961 	bl	8006c40 <HAL_UART_Receive_IT>
    hlpuart1.RxISR = HAL_UART_RxCpltCallback;
 800197e:	4b42      	ldr	r3, [pc, #264]	@ (8001a88 <terminal_task+0x15c>)
 8001980:	4a42      	ldr	r2, [pc, #264]	@ (8001a8c <terminal_task+0x160>)
 8001982:	675a      	str	r2, [r3, #116]	@ 0x74

    while (1) {
        // Espera indefinidamente por um caractere
        get_char_from_uart(&cRxedChar, portMAX_DELAY);
 8001984:	f207 233f 	addw	r3, r7, #575	@ 0x23f
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fd1d 	bl	80013cc <get_char_from_uart>

        if (cRxedChar == '\r') {
 8001992:	f997 323f 	ldrsb.w	r3, [r7, #575]	@ 0x23f
 8001996:	2b0d      	cmp	r3, #13
 8001998:	d125      	bne.n	80019e6 <terminal_task+0xba>
            /* Tecla "Enter" seja pressionada */
            print_string("\r\n", portMAX_DELAY);
 800199a:	f04f 31ff 	mov.w	r1, #4294967295
 800199e:	483c      	ldr	r0, [pc, #240]	@ (8001a90 <terminal_task+0x164>)
 80019a0:	f7ff fd28 	bl	80013f4 <print_string>

            /* Execução do comando inserido ao pressionar enter: */
            do {
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(
 80019a4:	f107 010c 	add.w	r1, r7, #12
 80019a8:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 80019ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fb2f 	bl	8001014 <FreeRTOS_CLIProcessCommand>
 80019b6:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
                    pcInputString,    /* string do comando.*/
                    pcOutputString,   /* buffer de saída. */
                    MAX_OUTPUT_LENGTH /* Tamanho do buffer de saída. */
                );

                print_string(pcOutputString, portMAX_DELAY);
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	f04f 31ff 	mov.w	r1, #4294967295
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fd16 	bl	80013f4 <print_string>
            } while (xMoreDataToFollow != pdFALSE);
 80019c8:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1e9      	bne.n	80019a4 <terminal_task+0x78>

            /* Limpa a string de entrada */
            cInputIndex = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH);
 80019d6:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 80019da:	2232      	movs	r2, #50	@ 0x32
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f00c fb75 	bl	800e0ce <memset>
 80019e4:	e7ce      	b.n	8001984 <terminal_task+0x58>

        } else {
            if (cRxedChar == '\n') {
 80019e6:	f997 323f 	ldrsb.w	r3, [r7, #575]	@ 0x23f
 80019ea:	2b0a      	cmp	r3, #10
 80019ec:	d0ca      	beq.n	8001984 <terminal_task+0x58>
                // Ignora o \n
            } else if (cRxedChar == '\b' || cRxedChar == 127) {
 80019ee:	f997 323f 	ldrsb.w	r3, [r7, #575]	@ 0x23f
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d003      	beq.n	80019fe <terminal_task+0xd2>
 80019f6:	f997 323f 	ldrsb.w	r3, [r7, #575]	@ 0x23f
 80019fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80019fc:	d11b      	bne.n	8001a36 <terminal_task+0x10a>
                /* Tratamento do backspace */
                if (cInputIndex > 0) {
 80019fe:	f997 3247 	ldrsb.w	r3, [r7, #583]	@ 0x247
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dd33      	ble.n	8001a6e <terminal_task+0x142>
                    cInputIndex--;
 8001a06:	f997 3247 	ldrsb.w	r3, [r7, #583]	@ 0x247
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
                    pcInputString[cInputIndex] = '\0';
 8001a14:	f997 3247 	ldrsb.w	r3, [r7, #583]	@ 0x247
 8001a18:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8001a1c:	443b      	add	r3, r7
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    print_char(cRxedChar, portMAX_DELAY);
 8001a24:	f997 323f 	ldrsb.w	r3, [r7, #575]	@ 0x23f
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fd0a 	bl	8001448 <print_char>
                if (cInputIndex > 0) {
 8001a34:	e01b      	b.n	8001a6e <terminal_task+0x142>
                }
            } else {
                // Adiciona o caractere na string de entrada
                if (cInputIndex < MAX_INPUT_LENGTH) {
 8001a36:	f997 3247 	ldrsb.w	r3, [r7, #583]	@ 0x247
 8001a3a:	2b31      	cmp	r3, #49	@ 0x31
 8001a3c:	dc0f      	bgt.n	8001a5e <terminal_task+0x132>
                    pcInputString[cInputIndex] = cRxedChar;
 8001a3e:	f997 3247 	ldrsb.w	r3, [r7, #583]	@ 0x247
 8001a42:	f997 223f 	ldrsb.w	r2, [r7, #575]	@ 0x23f
 8001a46:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8001a4a:	443b      	add	r3, r7
 8001a4c:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    cInputIndex++;
 8001a50:	f997 3247 	ldrsb.w	r3, [r7, #583]	@ 0x247
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
                }
                print_char(cRxedChar, portMAX_DELAY);
 8001a5e:	f997 323f 	ldrsb.w	r3, [r7, #575]	@ 0x23f
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fced 	bl	8001448 <print_char>
        get_char_from_uart(&cRxedChar, portMAX_DELAY);
 8001a6e:	e789      	b.n	8001984 <terminal_task+0x58>
 8001a70:	08010a58 	.word	0x08010a58
 8001a74:	08010a68 	.word	0x08010a68
 8001a78:	08010a78 	.word	0x08010a78
 8001a7c:	08010a88 	.word	0x08010a88
 8001a80:	080108c0 	.word	0x080108c0
 8001a84:	20000948 	.word	0x20000948
 8001a88:	20000754 	.word	0x20000754
 8001a8c:	08001339 	.word	0x08001339
 8001a90:	080108e4 	.word	0x080108e4

08001a94 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a94:	b5b0      	push	{r4, r5, r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af02      	add	r7, sp, #8
    /* MCU
     * Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the
     * Systick. */
    HAL_Init();
 8001a9a:	f000 ff1c 	bl	80028d6 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001a9e:	f000 f88f 	bl	8001bc0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001aa2:	f000 fafb 	bl	800209c <MX_GPIO_Init>
    MX_DMA_Init();
 8001aa6:	f000 fab3 	bl	8002010 <MX_DMA_Init>
    MX_ADC1_Init();
 8001aaa:	f000 f8c9 	bl	8001c40 <MX_ADC1_Init>
    MX_TIM3_Init();
 8001aae:	f000 fa13 	bl	8001ed8 <MX_TIM3_Init>
    MX_DAC1_Init();
 8001ab2:	f000 f93f 	bl	8001d34 <MX_DAC1_Init>
    MX_TIM2_Init();
 8001ab6:	f000 f9c1 	bl	8001e3c <MX_TIM2_Init>
    MX_LPUART1_UART_Init();
 8001aba:	f000 f975 	bl	8001da8 <MX_LPUART1_UART_Init>
    MX_TIM4_Init();
 8001abe:	f000 fa59 	bl	8001f74 <MX_TIM4_Init>
    /* USER CODE BEGIN 2 */

    /* USER CODE END 2 */

    /* USER CODE BEGIN RTOS_MUTEX */
    mutex_uart = xSemaphoreCreateMutex();
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f007 fc22 	bl	800930c <xQueueCreateMutex>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4a2f      	ldr	r2, [pc, #188]	@ (8001b88 <main+0xf4>)
 8001acc:	6013      	str	r3, [r2, #0]
    /* USER CODE END RTOS_MUTEX */

    /* USER CODE BEGIN RTOS_SEMAPHORES */
    /* add semaphores, ... */

    sem_tx_uart = xSemaphoreCreateBinary();
 8001ace:	2203      	movs	r2, #3
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f007 fba6 	bl	8009224 <xQueueGenericCreate>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a2c      	ldr	r2, [pc, #176]	@ (8001b8c <main+0xf8>)
 8001adc:	6013      	str	r3, [r2, #0]
    sem_adc = xSemaphoreCreateBinary();
 8001ade:	2203      	movs	r2, #3
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f007 fb9e 	bl	8009224 <xQueueGenericCreate>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a29      	ldr	r2, [pc, #164]	@ (8001b90 <main+0xfc>)
 8001aec:	6013      	str	r3, [r2, #0]
    /* USER CODE END RTOS_TIMERS */

    /* USER CODE BEGIN RTOS_QUEUES */
    /* add queues, ... */

    message_buffer = xMessageBufferCreate(BUFFER_SIZE);
 8001aee:	2201      	movs	r2, #1
 8001af0:	2100      	movs	r1, #0
 8001af2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001af6:	f008 f96b 	bl	8009dd0 <xStreamBufferGenericCreate>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a25      	ldr	r2, [pc, #148]	@ (8001b94 <main+0x100>)
 8001afe:	6013      	str	r3, [r2, #0]
    uart_rx_q = xQueueCreate(32, sizeof(char));
 8001b00:	2200      	movs	r2, #0
 8001b02:	2101      	movs	r1, #1
 8001b04:	2020      	movs	r0, #32
 8001b06:	f007 fb8d 	bl	8009224 <xQueueGenericCreate>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a22      	ldr	r2, [pc, #136]	@ (8001b98 <main+0x104>)
 8001b0e:	6013      	str	r3, [r2, #0]
    button_rx_q = xQueueCreate(128, sizeof(uint8_t));
 8001b10:	2200      	movs	r2, #0
 8001b12:	2101      	movs	r1, #1
 8001b14:	2080      	movs	r0, #128	@ 0x80
 8001b16:	f007 fb85 	bl	8009224 <xQueueGenericCreate>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001b9c <main+0x108>)
 8001b1e:	6013      	str	r3, [r2, #0]
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of defaultTask */
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001b20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba0 <main+0x10c>)
 8001b22:	1d3c      	adds	r4, r7, #4
 8001b24:	461d      	mov	r5, r3
 8001b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2a:	682b      	ldr	r3, [r5, #0]
 8001b2c:	6023      	str	r3, [r4, #0]
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f007 fa1d 	bl	8008f72 <osThreadCreate>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba4 <main+0x110>)
 8001b3c:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN RTOS_THREADS */

    (void)xTaskCreate(terminal_task, "Console", 512, NULL, 3, NULL);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2303      	movs	r3, #3
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b4c:	4916      	ldr	r1, [pc, #88]	@ (8001ba8 <main+0x114>)
 8001b4e:	4817      	ldr	r0, [pc, #92]	@ (8001bac <main+0x118>)
 8001b50:	f008 fcd6 	bl	800a500 <xTaskCreate>
    (void)xTaskCreate(print_task, "Print Task", 512, NULL, 2, NULL);
 8001b54:	2300      	movs	r3, #0
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	2302      	movs	r3, #2
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b62:	4913      	ldr	r1, [pc, #76]	@ (8001bb0 <main+0x11c>)
 8001b64:	4813      	ldr	r0, [pc, #76]	@ (8001bb4 <main+0x120>)
 8001b66:	f008 fccb 	bl	800a500 <xTaskCreate>
    //    (void)xTaskCreate(keyboard_task, "Keyboard Task", 256, NULL, 2, NULL);
    (void)xTaskCreate(adc_task, "ADC", 2048, NULL, 6, NULL);
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	2306      	movs	r3, #6
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2300      	movs	r3, #0
 8001b74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b78:	490f      	ldr	r1, [pc, #60]	@ (8001bb8 <main+0x124>)
 8001b7a:	4810      	ldr	r0, [pc, #64]	@ (8001bbc <main+0x128>)
 8001b7c:	f008 fcc0 	bl	800a500 <xTaskCreate>

    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 8001b80:	f007 f9f0 	bl	8008f64 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <main+0xf0>
 8001b88:	20000930 	.word	0x20000930
 8001b8c:	20000938 	.word	0x20000938
 8001b90:	2000093c 	.word	0x2000093c
 8001b94:	20000934 	.word	0x20000934
 8001b98:	20000940 	.word	0x20000940
 8001b9c:	20000944 	.word	0x20000944
 8001ba0:	0801090c 	.word	0x0801090c
 8001ba4:	2000092c 	.word	0x2000092c
 8001ba8:	080108e8 	.word	0x080108e8
 8001bac:	0800192d 	.word	0x0800192d
 8001bb0:	080108f0 	.word	0x080108f0
 8001bb4:	08001495 	.word	0x08001495
 8001bb8:	080108fc 	.word	0x080108fc
 8001bbc:	080014f9 	.word	0x080014f9

08001bc0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b094      	sub	sp, #80	@ 0x50
 8001bc4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc6:	f107 0318 	add.w	r3, r7, #24
 8001bca:	2238      	movs	r2, #56	@ 0x38
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f00c fa7d 	bl	800e0ce <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001be6:	f003 fa19 	bl	800501c <HAL_PWREx_ControlVoltageScaling>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bf4:	2340      	movs	r3, #64	@ 0x40
 8001bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001bfc:	f107 0318 	add.w	r3, r7, #24
 8001c00:	4618      	mov	r0, r3
 8001c02:	f003 fabf 	bl	8005184 <HAL_RCC_OscConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0x50>
        Error_Handler();
 8001c0c:	f000 faa6 	bl	800215c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001c10:	230f      	movs	r3, #15
 8001c12:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c14:	2301      	movs	r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 fdbd 	bl	80057a8 <HAL_RCC_ClockConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SystemClock_Config+0x78>
        Error_Handler();
 8001c34:	f000 fa92 	bl	800215c <Error_Handler>
    }
}
 8001c38:	bf00      	nop
 8001c3a:	3750      	adds	r7, #80	@ 0x50
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08c      	sub	sp, #48	@ 0x30
 8001c44:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_MultiModeTypeDef multimode = {0};
 8001c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2220      	movs	r2, #32
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f00c fa38 	bl	800e0ce <memset>

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 8001c5e:	4b33      	ldr	r3, [pc, #204]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001c60:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001c64:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c66:	4b31      	ldr	r3, [pc, #196]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001c68:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c6c:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c74:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
    hadc1.Init.GainCompensation = 0;
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c80:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c86:	4b29      	ldr	r3, [pc, #164]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001c88:	2204      	movs	r2, #4
 8001c8a:	619a      	str	r2, [r3, #24]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c8c:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	771a      	strb	r2, [r3, #28]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001c92:	4b26      	ldr	r3, [pc, #152]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	775a      	strb	r2, [r3, #29]
    hadc1.Init.NbrOfConversion = 1;
 8001c98:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	621a      	str	r2, [r3, #32]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8001ca6:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001ca8:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8001cac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001cae:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001cb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hadc1.Init.DMAContinuousRequests = ENABLE;
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hadc1.Init.OversamplingMode = DISABLE;
 8001cc4:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001ccc:	4817      	ldr	r0, [pc, #92]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001cce:	f001 f857 	bl	8002d80 <HAL_ADC_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_ADC1_Init+0x9c>
        Error_Handler();
 8001cd8:	f000 fa40 	bl	800215c <Error_Handler>
    }

    /** Configure the ADC multi-mode
     */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4811      	ldr	r0, [pc, #68]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001ce8:	f001 ffc6 	bl	8003c78 <HAL_ADCEx_MultiModeConfigChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_ADC1_Init+0xb6>
        Error_Handler();
 8001cf2:	f000 fa33 	bl	800215c <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_1;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <MX_ADC1_Init+0xf0>)
 8001cf8:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d02:	237f      	movs	r3, #127	@ 0x7f
 8001d04:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d06:	2304      	movs	r3, #4
 8001d08:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4806      	ldr	r0, [pc, #24]	@ (8001d2c <MX_ADC1_Init+0xec>)
 8001d14:	f001 fa80 	bl	8003218 <HAL_ADC_ConfigChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_ADC1_Init+0xe2>
        Error_Handler();
 8001d1e:	f000 fa1d 	bl	800215c <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 8001d22:	bf00      	nop
 8001d24:	3730      	adds	r7, #48	@ 0x30
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000614 	.word	0x20000614
 8001d30:	04300002 	.word	0x04300002

08001d34 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	@ 0x30
 8001d38:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DAC1_Init 0 */

    /* USER CODE END DAC1_Init 0 */

    DAC_ChannelConfTypeDef sConfig = {0};
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2230      	movs	r2, #48	@ 0x30
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f00c f9c4 	bl	800e0ce <memset>

    /* USER CODE END DAC1_Init 1 */

    /** DAC Initialization
     */
    hdac1.Instance = DAC1;
 8001d46:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <MX_DAC1_Init+0x6c>)
 8001d48:	4a16      	ldr	r2, [pc, #88]	@ (8001da4 <MX_DAC1_Init+0x70>)
 8001d4a:	601a      	str	r2, [r3, #0]
    if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8001d4c:	4814      	ldr	r0, [pc, #80]	@ (8001da0 <MX_DAC1_Init+0x6c>)
 8001d4e:	f002 f917 	bl	8003f80 <HAL_DAC_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_DAC1_Init+0x28>
        Error_Handler();
 8001d58:	f000 fa00 	bl	800215c <Error_Handler>
    }

    /** DAC channel OUT1 config
     */
    sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	603b      	str	r3, [r7, #0]
    sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	713b      	strb	r3, [r7, #4]
    sConfig.DAC_SignedFormat = DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	717b      	strb	r3, [r7, #5]
    sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
    sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001d6c:	2312      	movs	r3, #18
 8001d6e:	60fb      	str	r3, [r7, #12]
    sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
    sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	61bb      	str	r3, [r7, #24]
    sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
    if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001d80:	463b      	mov	r3, r7
 8001d82:	2200      	movs	r2, #0
 8001d84:	4619      	mov	r1, r3
 8001d86:	4806      	ldr	r0, [pc, #24]	@ (8001da0 <MX_DAC1_Init+0x6c>)
 8001d88:	f002 fa52 	bl	8004230 <HAL_DAC_ConfigChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_DAC1_Init+0x62>
        Error_Handler();
 8001d92:	f000 f9e3 	bl	800215c <Error_Handler>
    }
    /* USER CODE BEGIN DAC1_Init 2 */

    /* USER CODE END DAC1_Init 2 */
}
 8001d96:	bf00      	nop
 8001d98:	3730      	adds	r7, #48	@ 0x30
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200006e0 	.word	0x200006e0
 8001da4:	50000800 	.word	0x50000800

08001da8 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
    /* USER CODE END LPUART1_Init 0 */

    /* USER CODE BEGIN LPUART1_Init 1 */

    /* USER CODE END LPUART1_Init 1 */
    hlpuart1.Instance = LPUART1;
 8001dac:	4b21      	ldr	r3, [pc, #132]	@ (8001e34 <MX_LPUART1_UART_Init+0x8c>)
 8001dae:	4a22      	ldr	r2, [pc, #136]	@ (8001e38 <MX_LPUART1_UART_Init+0x90>)
 8001db0:	601a      	str	r2, [r3, #0]
    hlpuart1.Init.BaudRate = 115200;
 8001db2:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <MX_LPUART1_UART_Init+0x8c>)
 8001db4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001db8:	605a      	str	r2, [r3, #4]
    hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dba:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <MX_LPUART1_UART_Init+0x8c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
    hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <MX_LPUART1_UART_Init+0x8c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
    hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <MX_LPUART1_UART_Init+0x8c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
    hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	@ (8001e34 <MX_LPUART1_UART_Init+0x8c>)
 8001dce:	220c      	movs	r2, #12
 8001dd0:	615a      	str	r2, [r3, #20]
    hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd2:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <MX_LPUART1_UART_Init+0x8c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
    hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dd8:	4b16      	ldr	r3, [pc, #88]	@ (8001e34 <MX_LPUART1_UART_Init+0x8c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	621a      	str	r2, [r3, #32]
    hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <MX_LPUART1_UART_Init+0x8c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	625a      	str	r2, [r3, #36]	@ 0x24
    hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001de4:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <MX_LPUART1_UART_Init+0x8c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8001dea:	4812      	ldr	r0, [pc, #72]	@ (8001e34 <MX_LPUART1_UART_Init+0x8c>)
 8001dec:	f004 fed8 	bl	8006ba0 <HAL_UART_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_LPUART1_UART_Init+0x52>
        Error_Handler();
 8001df6:	f000 f9b1 	bl	800215c <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) !=
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	480d      	ldr	r0, [pc, #52]	@ (8001e34 <MX_LPUART1_UART_Init+0x8c>)
 8001dfe:	f006 ffce 	bl	8008d9e <HAL_UARTEx_SetTxFifoThreshold>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_LPUART1_UART_Init+0x64>
        HAL_OK) {
        Error_Handler();
 8001e08:	f000 f9a8 	bl	800215c <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) !=
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4809      	ldr	r0, [pc, #36]	@ (8001e34 <MX_LPUART1_UART_Init+0x8c>)
 8001e10:	f007 f803 	bl	8008e1a <HAL_UARTEx_SetRxFifoThreshold>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_LPUART1_UART_Init+0x76>
        HAL_OK) {
        Error_Handler();
 8001e1a:	f000 f99f 	bl	800215c <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8001e1e:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <MX_LPUART1_UART_Init+0x8c>)
 8001e20:	f006 ff84 	bl	8008d2c <HAL_UARTEx_DisableFifoMode>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_LPUART1_UART_Init+0x86>
        Error_Handler();
 8001e2a:	f000 f997 	bl	800215c <Error_Handler>
    }
    /* USER CODE BEGIN LPUART1_Init 2 */

    /* USER CODE END LPUART1_Init 2 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000754 	.word	0x20000754
 8001e38:	40008000 	.word	0x40008000

08001e3c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed4 <MX_TIM2_Init+0x98>)
 8001e5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e60:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 8001e62:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <MX_TIM2_Init+0x98>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <MX_TIM2_Init+0x98>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 11067;
 8001e6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <MX_TIM2_Init+0x98>)
 8001e70:	f642 323b 	movw	r2, #11067	@ 0x2b3b
 8001e74:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e76:	4b17      	ldr	r3, [pc, #92]	@ (8001ed4 <MX_TIM2_Init+0x98>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <MX_TIM2_Init+0x98>)
 8001e7e:	2280      	movs	r2, #128	@ 0x80
 8001e80:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001e82:	4814      	ldr	r0, [pc, #80]	@ (8001ed4 <MX_TIM2_Init+0x98>)
 8001e84:	f004 f8ce 	bl	8006024 <HAL_TIM_Base_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM2_Init+0x56>
        Error_Handler();
 8001e8e:	f000 f965 	bl	800215c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e96:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480d      	ldr	r0, [pc, #52]	@ (8001ed4 <MX_TIM2_Init+0x98>)
 8001ea0:	f004 fb5c 	bl	800655c <HAL_TIM_ConfigClockSource>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM2_Init+0x72>
        Error_Handler();
 8001eaa:	f000 f957 	bl	800215c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) !=
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4806      	ldr	r0, [pc, #24]	@ (8001ed4 <MX_TIM2_Init+0x98>)
 8001ebc:	f004 fda8 	bl	8006a10 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM2_Init+0x8e>
        HAL_OK) {
        Error_Handler();
 8001ec6:	f000 f949 	bl	800215c <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
}
 8001eca:	bf00      	nop
 8001ecc:	3720      	adds	r7, #32
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000848 	.word	0x20000848

08001ed8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ede:	f107 0310 	add.w	r3, r7, #16
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <MX_TIM3_Init+0x94>)
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f70 <MX_TIM3_Init+0x98>)
 8001efa:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <MX_TIM3_Init+0x94>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <MX_TIM3_Init+0x94>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 11067;
 8001f08:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <MX_TIM3_Init+0x94>)
 8001f0a:	f642 323b 	movw	r2, #11067	@ 0x2b3b
 8001f0e:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f10:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <MX_TIM3_Init+0x94>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <MX_TIM3_Init+0x94>)
 8001f18:	2280      	movs	r2, #128	@ 0x80
 8001f1a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001f1c:	4813      	ldr	r0, [pc, #76]	@ (8001f6c <MX_TIM3_Init+0x94>)
 8001f1e:	f004 f881 	bl	8006024 <HAL_TIM_Base_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM3_Init+0x54>
        Error_Handler();
 8001f28:	f000 f918 	bl	800215c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f30:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001f32:	f107 0310 	add.w	r3, r7, #16
 8001f36:	4619      	mov	r1, r3
 8001f38:	480c      	ldr	r0, [pc, #48]	@ (8001f6c <MX_TIM3_Init+0x94>)
 8001f3a:	f004 fb0f 	bl	800655c <HAL_TIM_ConfigClockSource>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM3_Init+0x70>
        Error_Handler();
 8001f44:	f000 f90a 	bl	800215c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f48:	2320      	movs	r3, #32
 8001f4a:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) !=
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	4619      	mov	r1, r3
 8001f54:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <MX_TIM3_Init+0x94>)
 8001f56:	f004 fd5b 	bl	8006a10 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM3_Init+0x8c>
        HAL_OK) {
        Error_Handler();
 8001f60:	f000 f8fc 	bl	800215c <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
}
 8001f64:	bf00      	nop
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000894 	.word	0x20000894
 8001f70:	40000400 	.word	0x40000400

08001f74 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	@ (8002008 <MX_TIM4_Init+0x94>)
 8001f94:	4a1d      	ldr	r2, [pc, #116]	@ (800200c <MX_TIM4_Init+0x98>)
 8001f96:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 0;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <MX_TIM4_Init+0x94>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <MX_TIM4_Init+0x94>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 16999;
 8001fa4:	4b18      	ldr	r3, [pc, #96]	@ (8002008 <MX_TIM4_Init+0x94>)
 8001fa6:	f244 2267 	movw	r2, #16999	@ 0x4267
 8001faa:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fac:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <MX_TIM4_Init+0x94>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fb2:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <MX_TIM4_Init+0x94>)
 8001fb4:	2280      	movs	r2, #128	@ 0x80
 8001fb6:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001fb8:	4813      	ldr	r0, [pc, #76]	@ (8002008 <MX_TIM4_Init+0x94>)
 8001fba:	f004 f833 	bl	8006024 <HAL_TIM_Base_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM4_Init+0x54>
        Error_Handler();
 8001fc4:	f000 f8ca 	bl	800215c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fcc:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001fce:	f107 0310 	add.w	r3, r7, #16
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480c      	ldr	r0, [pc, #48]	@ (8002008 <MX_TIM4_Init+0x94>)
 8001fd6:	f004 fac1 	bl	800655c <HAL_TIM_ConfigClockSource>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM4_Init+0x70>
        Error_Handler();
 8001fe0:	f000 f8bc 	bl	800215c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) !=
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4805      	ldr	r0, [pc, #20]	@ (8002008 <MX_TIM4_Init+0x94>)
 8001ff2:	f004 fd0d 	bl	8006a10 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM4_Init+0x8c>
        HAL_OK) {
        Error_Handler();
 8001ffc:	f000 f8ae 	bl	800215c <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */
}
 8002000:	bf00      	nop
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200008e0 	.word	0x200008e0
 800200c:	40000800 	.word	0x40000800

08002010 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002016:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <MX_DMA_Init+0x88>)
 8002018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800201a:	4a1f      	ldr	r2, [pc, #124]	@ (8002098 <MX_DMA_Init+0x88>)
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	6493      	str	r3, [r2, #72]	@ 0x48
 8002022:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <MX_DMA_Init+0x88>)
 8002024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA1_CLK_ENABLE();
 800202e:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <MX_DMA_Init+0x88>)
 8002030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002032:	4a19      	ldr	r2, [pc, #100]	@ (8002098 <MX_DMA_Init+0x88>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6493      	str	r3, [r2, #72]	@ 0x48
 800203a:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <MX_DMA_Init+0x88>)
 800203c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_DMA2_CLK_ENABLE();
 8002046:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <MX_DMA_Init+0x88>)
 8002048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204a:	4a13      	ldr	r2, [pc, #76]	@ (8002098 <MX_DMA_Init+0x88>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	6493      	str	r3, [r2, #72]	@ 0x48
 8002052:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <MX_DMA_Init+0x88>)
 8002054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2105      	movs	r1, #5
 8002062:	200b      	movs	r0, #11
 8002064:	f001 ff64 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002068:	200b      	movs	r0, #11
 800206a:	f001 ff7b 	bl	8003f64 <HAL_NVIC_EnableIRQ>
    /* DMA1_Channel2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2105      	movs	r1, #5
 8002072:	200c      	movs	r0, #12
 8002074:	f001 ff5c 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002078:	200c      	movs	r0, #12
 800207a:	f001 ff73 	bl	8003f64 <HAL_NVIC_EnableIRQ>
    /* DMA2_Channel2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2105      	movs	r1, #5
 8002082:	2039      	movs	r0, #57	@ 0x39
 8002084:	f001 ff54 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8002088:	2039      	movs	r0, #57	@ 0x39
 800208a:	f001 ff6b 	bl	8003f64 <HAL_NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000

0800209c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b2:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <MX_GPIO_Init+0x68>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	4a13      	ldr	r2, [pc, #76]	@ (8002104 <MX_GPIO_Init+0x68>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020be:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <MX_GPIO_Init+0x68>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002104 <MX_GPIO_Init+0x68>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002104 <MX_GPIO_Init+0x68>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002104 <MX_GPIO_Init+0x68>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : B1_button_Pin */
    GPIO_InitStruct.Pin = B1_button_Pin;
 80020e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(B1_button_GPIO_Port, &GPIO_InitStruct);
 80020f0:	f107 030c 	add.w	r3, r7, #12
 80020f4:	4619      	mov	r1, r3
 80020f6:	4804      	ldr	r0, [pc, #16]	@ (8002108 <MX_GPIO_Init+0x6c>)
 80020f8:	f002 fe0e 	bl	8004d18 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80020fc:	bf00      	nop
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	48000800 	.word	0x48000800

0800210c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 8002114:	2001      	movs	r0, #1
 8002116:	f006 ff53 	bl	8008fc0 <osDelay>
 800211a:	e7fb      	b.n	8002114 <StartDefaultTask+0x8>

0800211c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM1) {
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a09      	ldr	r2, [pc, #36]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 800212e:	f000 fbeb 	bl	8002908 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */
    if (htim->Instance == TIM4) {
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a07      	ldr	r2, [pc, #28]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d104      	bne.n	8002146 <HAL_TIM_PeriodElapsedCallback+0x2a>
        ulHighFrequencyTimerTicks++;
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	4a05      	ldr	r2, [pc, #20]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002144:	6013      	str	r3, [r2, #0]
    }

    /* USER CODE END Callback 1 */
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40000800 	.word	0x40000800
 8002158:	20000610 	.word	0x20000610

0800215c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002160:	b672      	cpsid	i
}
 8002162:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <Error_Handler+0x8>

08002168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_MspInit+0x50>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002172:	4a11      	ldr	r2, [pc, #68]	@ (80021b8 <HAL_MspInit+0x50>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6613      	str	r3, [r2, #96]	@ 0x60
 800217a:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <HAL_MspInit+0x50>)
 800217c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <HAL_MspInit+0x50>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	4a0b      	ldr	r2, [pc, #44]	@ (80021b8 <HAL_MspInit+0x50>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002190:	6593      	str	r3, [r2, #88]	@ 0x58
 8002192:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <HAL_MspInit+0x50>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	210f      	movs	r1, #15
 80021a2:	f06f 0001 	mvn.w	r0, #1
 80021a6:	f001 fec3 	bl	8003f30 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80021aa:	f002 ffdb 	bl	8005164 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000

080021bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b09a      	sub	sp, #104	@ 0x68
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d4:	f107 0310 	add.w	r3, r7, #16
 80021d8:	2244      	movs	r2, #68	@ 0x44
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f00b ff76 	bl	800e0ce <memset>
  if(hadc->Instance==ADC1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021ea:	d15f      	bne.n	80022ac <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80021ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80021f2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80021f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fd21 	bl	8005c44 <HAL_RCCEx_PeriphCLKConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002208:	f7ff ffa8 	bl	800215c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800220c:	4b29      	ldr	r3, [pc, #164]	@ (80022b4 <HAL_ADC_MspInit+0xf8>)
 800220e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002210:	4a28      	ldr	r2, [pc, #160]	@ (80022b4 <HAL_ADC_MspInit+0xf8>)
 8002212:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002216:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002218:	4b26      	ldr	r3, [pc, #152]	@ (80022b4 <HAL_ADC_MspInit+0xf8>)
 800221a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002224:	4b23      	ldr	r3, [pc, #140]	@ (80022b4 <HAL_ADC_MspInit+0xf8>)
 8002226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002228:	4a22      	ldr	r2, [pc, #136]	@ (80022b4 <HAL_ADC_MspInit+0xf8>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002230:	4b20      	ldr	r3, [pc, #128]	@ (80022b4 <HAL_ADC_MspInit+0xf8>)
 8002232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800223c:	2301      	movs	r3, #1
 800223e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002240:	2303      	movs	r3, #3
 8002242:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800224c:	4619      	mov	r1, r3
 800224e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002252:	f002 fd61 	bl	8004d18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002256:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <HAL_ADC_MspInit+0xfc>)
 8002258:	4a18      	ldr	r2, [pc, #96]	@ (80022bc <HAL_ADC_MspInit+0x100>)
 800225a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800225c:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <HAL_ADC_MspInit+0xfc>)
 800225e:	2205      	movs	r2, #5
 8002260:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002262:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <HAL_ADC_MspInit+0xfc>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002268:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <HAL_ADC_MspInit+0xfc>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800226e:	4b12      	ldr	r3, [pc, #72]	@ (80022b8 <HAL_ADC_MspInit+0xfc>)
 8002270:	2280      	movs	r2, #128	@ 0x80
 8002272:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002274:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <HAL_ADC_MspInit+0xfc>)
 8002276:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800227a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800227c:	4b0e      	ldr	r3, [pc, #56]	@ (80022b8 <HAL_ADC_MspInit+0xfc>)
 800227e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002282:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <HAL_ADC_MspInit+0xfc>)
 8002286:	2220      	movs	r2, #32
 8002288:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800228a:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <HAL_ADC_MspInit+0xfc>)
 800228c:	2200      	movs	r2, #0
 800228e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002290:	4809      	ldr	r0, [pc, #36]	@ (80022b8 <HAL_ADC_MspInit+0xfc>)
 8002292:	f002 fa0f 	bl	80046b4 <HAL_DMA_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800229c:	f7ff ff5e 	bl	800215c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a05      	ldr	r2, [pc, #20]	@ (80022b8 <HAL_ADC_MspInit+0xfc>)
 80022a4:	655a      	str	r2, [r3, #84]	@ 0x54
 80022a6:	4a04      	ldr	r2, [pc, #16]	@ (80022b8 <HAL_ADC_MspInit+0xfc>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022ac:	bf00      	nop
 80022ae:	3768      	adds	r7, #104	@ 0x68
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	20000680 	.word	0x20000680
 80022bc:	40020008 	.word	0x40020008

080022c0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	@ 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a2b      	ldr	r2, [pc, #172]	@ (800238c <HAL_DAC_MspInit+0xcc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d14f      	bne.n	8002382 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80022e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002390 <HAL_DAC_MspInit+0xd0>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002390 <HAL_DAC_MspInit+0xd0>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ee:	4b28      	ldr	r3, [pc, #160]	@ (8002390 <HAL_DAC_MspInit+0xd0>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	4b25      	ldr	r3, [pc, #148]	@ (8002390 <HAL_DAC_MspInit+0xd0>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fe:	4a24      	ldr	r2, [pc, #144]	@ (8002390 <HAL_DAC_MspInit+0xd0>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002306:	4b22      	ldr	r3, [pc, #136]	@ (8002390 <HAL_DAC_MspInit+0xd0>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002312:	2310      	movs	r3, #16
 8002314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002316:	2303      	movs	r3, #3
 8002318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	4619      	mov	r1, r3
 8002324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002328:	f002 fcf6 	bl	8004d18 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Channel2;
 800232c:	4b19      	ldr	r3, [pc, #100]	@ (8002394 <HAL_DAC_MspInit+0xd4>)
 800232e:	4a1a      	ldr	r2, [pc, #104]	@ (8002398 <HAL_DAC_MspInit+0xd8>)
 8002330:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8002332:	4b18      	ldr	r3, [pc, #96]	@ (8002394 <HAL_DAC_MspInit+0xd4>)
 8002334:	2206      	movs	r2, #6
 8002336:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002338:	4b16      	ldr	r3, [pc, #88]	@ (8002394 <HAL_DAC_MspInit+0xd4>)
 800233a:	2210      	movs	r2, #16
 800233c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800233e:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <HAL_DAC_MspInit+0xd4>)
 8002340:	2200      	movs	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002344:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <HAL_DAC_MspInit+0xd4>)
 8002346:	2280      	movs	r2, #128	@ 0x80
 8002348:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800234a:	4b12      	ldr	r3, [pc, #72]	@ (8002394 <HAL_DAC_MspInit+0xd4>)
 800234c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002350:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <HAL_DAC_MspInit+0xd4>)
 8002354:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002358:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800235a:	4b0e      	ldr	r3, [pc, #56]	@ (8002394 <HAL_DAC_MspInit+0xd4>)
 800235c:	2220      	movs	r2, #32
 800235e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002360:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <HAL_DAC_MspInit+0xd4>)
 8002362:	2200      	movs	r2, #0
 8002364:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002366:	480b      	ldr	r0, [pc, #44]	@ (8002394 <HAL_DAC_MspInit+0xd4>)
 8002368:	f002 f9a4 	bl	80046b4 <HAL_DMA_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002372:	f7ff fef3 	bl	800215c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a06      	ldr	r2, [pc, #24]	@ (8002394 <HAL_DAC_MspInit+0xd4>)
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	4a05      	ldr	r2, [pc, #20]	@ (8002394 <HAL_DAC_MspInit+0xd4>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	@ 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	50000800 	.word	0x50000800
 8002390:	40021000 	.word	0x40021000
 8002394:	200006f4 	.word	0x200006f4
 8002398:	4002041c 	.word	0x4002041c

0800239c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b09a      	sub	sp, #104	@ 0x68
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023b4:	f107 0310 	add.w	r3, r7, #16
 80023b8:	2244      	movs	r2, #68	@ 0x44
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f00b fe86 	bl	800e0ce <memset>
  if(huart->Instance==LPUART1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a37      	ldr	r2, [pc, #220]	@ (80024a4 <HAL_UART_MspInit+0x108>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d167      	bne.n	800249c <HAL_UART_MspInit+0x100>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80023cc:	2320      	movs	r3, #32
 80023ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d4:	f107 0310 	add.w	r3, r7, #16
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 fc33 	bl	8005c44 <HAL_RCCEx_PeriphCLKConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023e4:	f7ff feba 	bl	800215c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80023e8:	4b2f      	ldr	r3, [pc, #188]	@ (80024a8 <HAL_UART_MspInit+0x10c>)
 80023ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ec:	4a2e      	ldr	r2, [pc, #184]	@ (80024a8 <HAL_UART_MspInit+0x10c>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80023f4:	4b2c      	ldr	r3, [pc, #176]	@ (80024a8 <HAL_UART_MspInit+0x10c>)
 80023f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b29      	ldr	r3, [pc, #164]	@ (80024a8 <HAL_UART_MspInit+0x10c>)
 8002402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002404:	4a28      	ldr	r2, [pc, #160]	@ (80024a8 <HAL_UART_MspInit+0x10c>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800240c:	4b26      	ldr	r3, [pc, #152]	@ (80024a8 <HAL_UART_MspInit+0x10c>)
 800240e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002418:	230c      	movs	r3, #12
 800241a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	2300      	movs	r3, #0
 8002426:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002428:	230c      	movs	r3, #12
 800242a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002430:	4619      	mov	r1, r3
 8002432:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002436:	f002 fc6f 	bl	8004d18 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800243a:	4b1c      	ldr	r3, [pc, #112]	@ (80024ac <HAL_UART_MspInit+0x110>)
 800243c:	4a1c      	ldr	r2, [pc, #112]	@ (80024b0 <HAL_UART_MspInit+0x114>)
 800243e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002440:	4b1a      	ldr	r3, [pc, #104]	@ (80024ac <HAL_UART_MspInit+0x110>)
 8002442:	2223      	movs	r2, #35	@ 0x23
 8002444:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002446:	4b19      	ldr	r3, [pc, #100]	@ (80024ac <HAL_UART_MspInit+0x110>)
 8002448:	2210      	movs	r2, #16
 800244a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800244c:	4b17      	ldr	r3, [pc, #92]	@ (80024ac <HAL_UART_MspInit+0x110>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002452:	4b16      	ldr	r3, [pc, #88]	@ (80024ac <HAL_UART_MspInit+0x110>)
 8002454:	2280      	movs	r2, #128	@ 0x80
 8002456:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002458:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <HAL_UART_MspInit+0x110>)
 800245a:	2200      	movs	r2, #0
 800245c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800245e:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <HAL_UART_MspInit+0x110>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002464:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <HAL_UART_MspInit+0x110>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <HAL_UART_MspInit+0x110>)
 800246c:	2200      	movs	r2, #0
 800246e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002470:	480e      	ldr	r0, [pc, #56]	@ (80024ac <HAL_UART_MspInit+0x110>)
 8002472:	f002 f91f 	bl	80046b4 <HAL_DMA_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800247c:	f7ff fe6e 	bl	800215c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a0a      	ldr	r2, [pc, #40]	@ (80024ac <HAL_UART_MspInit+0x110>)
 8002484:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002486:	4a09      	ldr	r2, [pc, #36]	@ (80024ac <HAL_UART_MspInit+0x110>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	2105      	movs	r1, #5
 8002490:	205b      	movs	r0, #91	@ 0x5b
 8002492:	f001 fd4d 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002496:	205b      	movs	r0, #91	@ 0x5b
 8002498:	f001 fd64 	bl	8003f64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800249c:	bf00      	nop
 800249e:	3768      	adds	r7, #104	@ 0x68
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40008000 	.word	0x40008000
 80024a8:	40021000 	.word	0x40021000
 80024ac:	200007e8 	.word	0x200007e8
 80024b0:	4002001c 	.word	0x4002001c

080024b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c4:	d10c      	bne.n	80024e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002540 <HAL_TIM_Base_MspInit+0x8c>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002540 <HAL_TIM_Base_MspInit+0x8c>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80024d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002540 <HAL_TIM_Base_MspInit+0x8c>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024de:	e02a      	b.n	8002536 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a17      	ldr	r2, [pc, #92]	@ (8002544 <HAL_TIM_Base_MspInit+0x90>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d10c      	bne.n	8002504 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024ea:	4b15      	ldr	r3, [pc, #84]	@ (8002540 <HAL_TIM_Base_MspInit+0x8c>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ee:	4a14      	ldr	r2, [pc, #80]	@ (8002540 <HAL_TIM_Base_MspInit+0x8c>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024f6:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <HAL_TIM_Base_MspInit+0x8c>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]
}
 8002502:	e018      	b.n	8002536 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0f      	ldr	r2, [pc, #60]	@ (8002548 <HAL_TIM_Base_MspInit+0x94>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d113      	bne.n	8002536 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800250e:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <HAL_TIM_Base_MspInit+0x8c>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002512:	4a0b      	ldr	r2, [pc, #44]	@ (8002540 <HAL_TIM_Base_MspInit+0x8c>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6593      	str	r3, [r2, #88]	@ 0x58
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_TIM_Base_MspInit+0x8c>)
 800251c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2105      	movs	r1, #5
 800252a:	201e      	movs	r0, #30
 800252c:	f001 fd00 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002530:	201e      	movs	r0, #30
 8002532:	f001 fd17 	bl	8003f64 <HAL_NVIC_EnableIRQ>
}
 8002536:	bf00      	nop
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	40000400 	.word	0x40000400
 8002548:	40000800 	.word	0x40000800

0800254c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08c      	sub	sp, #48	@ 0x30
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800255c:	4b2c      	ldr	r3, [pc, #176]	@ (8002610 <HAL_InitTick+0xc4>)
 800255e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002560:	4a2b      	ldr	r2, [pc, #172]	@ (8002610 <HAL_InitTick+0xc4>)
 8002562:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002566:	6613      	str	r3, [r2, #96]	@ 0x60
 8002568:	4b29      	ldr	r3, [pc, #164]	@ (8002610 <HAL_InitTick+0xc4>)
 800256a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002574:	f107 020c 	add.w	r2, r7, #12
 8002578:	f107 0310 	add.w	r3, r7, #16
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fae8 	bl	8005b54 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002584:	f003 fad0 	bl	8005b28 <HAL_RCC_GetPCLK2Freq>
 8002588:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800258a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258c:	4a21      	ldr	r2, [pc, #132]	@ (8002614 <HAL_InitTick+0xc8>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	0c9b      	lsrs	r3, r3, #18
 8002594:	3b01      	subs	r3, #1
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002598:	4b1f      	ldr	r3, [pc, #124]	@ (8002618 <HAL_InitTick+0xcc>)
 800259a:	4a20      	ldr	r2, [pc, #128]	@ (800261c <HAL_InitTick+0xd0>)
 800259c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800259e:	4b1e      	ldr	r3, [pc, #120]	@ (8002618 <HAL_InitTick+0xcc>)
 80025a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002618 <HAL_InitTick+0xcc>)
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80025ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <HAL_InitTick+0xcc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b2:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <HAL_InitTick+0xcc>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80025b8:	4817      	ldr	r0, [pc, #92]	@ (8002618 <HAL_InitTick+0xcc>)
 80025ba:	f003 fd33 	bl	8006024 <HAL_TIM_Base_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80025c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d11b      	bne.n	8002604 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80025cc:	4812      	ldr	r0, [pc, #72]	@ (8002618 <HAL_InitTick+0xcc>)
 80025ce:	f003 fe0b 	bl	80061e8 <HAL_TIM_Base_Start_IT>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80025d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d111      	bne.n	8002604 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80025e0:	2019      	movs	r0, #25
 80025e2:	f001 fcbf 	bl	8003f64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b0f      	cmp	r3, #15
 80025ea:	d808      	bhi.n	80025fe <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80025ec:	2200      	movs	r2, #0
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	2019      	movs	r0, #25
 80025f2:	f001 fc9d 	bl	8003f30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002620 <HAL_InitTick+0xd4>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	e002      	b.n	8002604 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002604:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002608:	4618      	mov	r0, r3
 800260a:	3730      	adds	r7, #48	@ 0x30
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	431bde83 	.word	0x431bde83
 8002618:	20000954 	.word	0x20000954
 800261c:	40012c00 	.word	0x40012c00
 8002620:	20000418 	.word	0x20000418

08002624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <NMI_Handler+0x4>

0800262c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <HardFault_Handler+0x4>

08002634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002638:	bf00      	nop
 800263a:	e7fd      	b.n	8002638 <MemManage_Handler+0x4>

0800263c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <BusFault_Handler+0x4>

08002644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <UsageFault_Handler+0x4>

0800264c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002660:	4802      	ldr	r0, [pc, #8]	@ (800266c <DMA1_Channel1_IRQHandler+0x10>)
 8002662:	f002 fa0a 	bl	8004a7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000680 	.word	0x20000680

08002670 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002674:	4802      	ldr	r0, [pc, #8]	@ (8002680 <DMA1_Channel2_IRQHandler+0x10>)
 8002676:	f002 fa00 	bl	8004a7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200007e8 	.word	0x200007e8

08002684 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002688:	4802      	ldr	r0, [pc, #8]	@ (8002694 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800268a:	f003 fe17 	bl	80062bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000954 	.word	0x20000954

08002698 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800269c:	4802      	ldr	r0, [pc, #8]	@ (80026a8 <TIM4_IRQHandler+0x10>)
 800269e:	f003 fe0d 	bl	80062bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200008e0 	.word	0x200008e0

080026ac <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80026b0:	4802      	ldr	r0, [pc, #8]	@ (80026bc <DMA2_Channel2_IRQHandler+0x10>)
 80026b2:	f002 f9e2 	bl	8004a7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200006f4 	.word	0x200006f4

080026c0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80026c4:	4802      	ldr	r0, [pc, #8]	@ (80026d0 <LPUART1_IRQHandler+0x10>)
 80026c6:	f004 fb87 	bl	8006dd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000754 	.word	0x20000754

080026d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return 1;
 80026d8:	2301      	movs	r3, #1
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <_kill>:

int _kill(int pid, int sig)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026ee:	f00b fdbb 	bl	800e268 <__errno>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2216      	movs	r2, #22
 80026f6:	601a      	str	r2, [r3, #0]
  return -1;
 80026f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <_exit>:

void _exit (int status)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ffe7 	bl	80026e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002716:	bf00      	nop
 8002718:	e7fd      	b.n	8002716 <_exit+0x12>

0800271a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	e00a      	b.n	8002742 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800272c:	f3af 8000 	nop.w
 8002730:	4601      	mov	r1, r0
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	60ba      	str	r2, [r7, #8]
 8002738:	b2ca      	uxtb	r2, r1
 800273a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3301      	adds	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	dbf0      	blt.n	800272c <_read+0x12>
  }

  return len;
 800274a:	687b      	ldr	r3, [r7, #4]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	e009      	b.n	800277a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	60ba      	str	r2, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	3301      	adds	r3, #1
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	dbf1      	blt.n	8002766 <_write+0x12>
  }
  return len;
 8002782:	687b      	ldr	r3, [r7, #4]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <_close>:

int _close(int file)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027b4:	605a      	str	r2, [r3, #4]
  return 0;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_isatty>:

int _isatty(int file)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027cc:	2301      	movs	r3, #1
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027da:	b480      	push	{r7}
 80027dc:	b085      	sub	sp, #20
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027fc:	4a14      	ldr	r2, [pc, #80]	@ (8002850 <_sbrk+0x5c>)
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <_sbrk+0x60>)
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002808:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002810:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <_sbrk+0x64>)
 8002812:	4a12      	ldr	r2, [pc, #72]	@ (800285c <_sbrk+0x68>)
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002816:	4b10      	ldr	r3, [pc, #64]	@ (8002858 <_sbrk+0x64>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	429a      	cmp	r2, r3
 8002822:	d207      	bcs.n	8002834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002824:	f00b fd20 	bl	800e268 <__errno>
 8002828:	4603      	mov	r3, r0
 800282a:	220c      	movs	r2, #12
 800282c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	e009      	b.n	8002848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002834:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <_sbrk+0x64>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800283a:	4b07      	ldr	r3, [pc, #28]	@ (8002858 <_sbrk+0x64>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	4a05      	ldr	r2, [pc, #20]	@ (8002858 <_sbrk+0x64>)
 8002844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002846:	68fb      	ldr	r3, [r7, #12]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20008000 	.word	0x20008000
 8002854:	00000400 	.word	0x00000400
 8002858:	200009a0 	.word	0x200009a0
 800285c:	200079b0 	.word	0x200079b0

08002860 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002864:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <SystemInit+0x20>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286a:	4a05      	ldr	r2, [pc, #20]	@ (8002880 <SystemInit+0x20>)
 800286c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002884:	480d      	ldr	r0, [pc, #52]	@ (80028bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002886:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002888:	f7ff ffea 	bl	8002860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800288c:	480c      	ldr	r0, [pc, #48]	@ (80028c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800288e:	490d      	ldr	r1, [pc, #52]	@ (80028c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002890:	4a0d      	ldr	r2, [pc, #52]	@ (80028c8 <LoopForever+0xe>)
  movs r3, #0
 8002892:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002894:	e002      	b.n	800289c <LoopCopyDataInit>

08002896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800289a:	3304      	adds	r3, #4

0800289c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800289c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800289e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a0:	d3f9      	bcc.n	8002896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028a2:	4a0a      	ldr	r2, [pc, #40]	@ (80028cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80028a4:	4c0a      	ldr	r4, [pc, #40]	@ (80028d0 <LoopForever+0x16>)
  movs r3, #0
 80028a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a8:	e001      	b.n	80028ae <LoopFillZerobss>

080028aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028ac:	3204      	adds	r2, #4

080028ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b0:	d3fb      	bcc.n	80028aa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80028b2:	f00b fcdf 	bl	800e274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028b6:	f7ff f8ed 	bl	8001a94 <main>

080028ba <LoopForever>:

LoopForever:
    b LoopForever
 80028ba:	e7fe      	b.n	80028ba <LoopForever>
  ldr   r0, =_estack
 80028bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80028c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028c4:	200005ec 	.word	0x200005ec
  ldr r2, =_sidata
 80028c8:	08011a10 	.word	0x08011a10
  ldr r2, =_sbss
 80028cc:	200005ec 	.word	0x200005ec
  ldr r4, =_ebss
 80028d0:	200079b0 	.word	0x200079b0

080028d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028d4:	e7fe      	b.n	80028d4 <ADC1_2_IRQHandler>

080028d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e0:	2003      	movs	r0, #3
 80028e2:	f001 fb1a 	bl	8003f1a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028e6:	200f      	movs	r0, #15
 80028e8:	f7ff fe30 	bl	800254c <HAL_InitTick>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	71fb      	strb	r3, [r7, #7]
 80028f6:	e001      	b.n	80028fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028f8:	f7ff fc36 	bl	8002168 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028fc:	79fb      	ldrb	r3, [r7, #7]

}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800290c:	4b05      	ldr	r3, [pc, #20]	@ (8002924 <HAL_IncTick+0x1c>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b05      	ldr	r3, [pc, #20]	@ (8002928 <HAL_IncTick+0x20>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4413      	add	r3, r2
 8002916:	4a03      	ldr	r2, [pc, #12]	@ (8002924 <HAL_IncTick+0x1c>)
 8002918:	6013      	str	r3, [r2, #0]
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	200009a4 	.word	0x200009a4
 8002928:	2000041c 	.word	0x2000041c

0800292c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return uwTick;
 8002930:	4b03      	ldr	r3, [pc, #12]	@ (8002940 <HAL_GetTick+0x14>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	200009a4 	.word	0x200009a4

08002944 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	609a      	str	r2, [r3, #8]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	609a      	str	r2, [r3, #8]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3360      	adds	r3, #96	@ 0x60
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <LL_ADC_SetOffset+0x44>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	4313      	orrs	r3, r2
 80029dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029e4:	bf00      	nop
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	03fff000 	.word	0x03fff000

080029f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3360      	adds	r3, #96	@ 0x60
 8002a02:	461a      	mov	r2, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3360      	adds	r3, #96	@ 0x60
 8002a30:	461a      	mov	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3360      	adds	r3, #96	@ 0x60
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a80:	bf00      	nop
 8002a82:	371c      	adds	r7, #28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3360      	adds	r3, #96	@ 0x60
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	615a      	str	r2, [r3, #20]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b087      	sub	sp, #28
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3330      	adds	r3, #48	@ 0x30
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	4413      	add	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	211f      	movs	r1, #31
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	401a      	ands	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	0e9b      	lsrs	r3, r3, #26
 8002b46:	f003 011f 	and.w	r1, r3, #31
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	431a      	orrs	r2, r3
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b087      	sub	sp, #28
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3314      	adds	r3, #20
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	0e5b      	lsrs	r3, r3, #25
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	4413      	add	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0d1b      	lsrs	r3, r3, #20
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	2107      	movs	r1, #7
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	0d1b      	lsrs	r3, r3, #20
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	431a      	orrs	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f003 0318 	and.w	r3, r3, #24
 8002bde:	4908      	ldr	r1, [pc, #32]	@ (8002c00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002be0:	40d9      	lsrs	r1, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	400b      	ands	r3, r1
 8002be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bea:	431a      	orrs	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	0007ffff 	.word	0x0007ffff

08002c04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 031f 	and.w	r3, r3, #31
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002c30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6093      	str	r3, [r2, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c58:	d101      	bne.n	8002c5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ca8:	d101      	bne.n	8002cae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ccc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cd0:	f043 0201 	orr.w	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <LL_ADC_IsEnabled+0x18>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <LL_ADC_IsEnabled+0x1a>
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d1a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d1e:	f043 0204 	orr.w	r2, r3, #4
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d101      	bne.n	8002d4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d101      	bne.n	8002d70 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b089      	sub	sp, #36	@ 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e167      	b.n	800306a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fa07 	bl	80021bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff3f 	bl	8002c44 <LL_ADC_IsDeepPowerDownEnabled>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff25 	bl	8002c20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff5a 	bl	8002c94 <LL_ADC_IsInternalRegulatorEnabled>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d115      	bne.n	8002e12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff ff3e 	bl	8002c6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002df0:	4ba0      	ldr	r3, [pc, #640]	@ (8003074 <HAL_ADC_Init+0x2f4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	4aa0      	ldr	r2, [pc, #640]	@ (8003078 <HAL_ADC_Init+0x2f8>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	099b      	lsrs	r3, r3, #6
 8002dfe:	3301      	adds	r3, #1
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e04:	e002      	b.n	8002e0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f9      	bne.n	8002e06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff3c 	bl	8002c94 <LL_ADC_IsInternalRegulatorEnabled>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10d      	bne.n	8002e3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e26:	f043 0210 	orr.w	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e32:	f043 0201 	orr.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff75 	bl	8002d32 <LL_ADC_REG_IsConversionOngoing>
 8002e48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 8100 	bne.w	8003058 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 80fc 	bne.w	8003058 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e68:	f043 0202 	orr.w	r2, r3, #2
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff35 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d111      	bne.n	8002ea4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e80:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e84:	f7ff ff2e 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002e88:	4604      	mov	r4, r0
 8002e8a:	487c      	ldr	r0, [pc, #496]	@ (800307c <HAL_ADC_Init+0x2fc>)
 8002e8c:	f7ff ff2a 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002e90:	4603      	mov	r3, r0
 8002e92:	4323      	orrs	r3, r4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4878      	ldr	r0, [pc, #480]	@ (8003080 <HAL_ADC_Init+0x300>)
 8002ea0:	f7ff fd50 	bl	8002944 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7f5b      	ldrb	r3, [r3, #29]
 8002ea8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002eb4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002eba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ec2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d106      	bne.n	8002ee0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	045b      	lsls	r3, r3, #17
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d009      	beq.n	8002efc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	4b60      	ldr	r3, [pc, #384]	@ (8003084 <HAL_ADC_Init+0x304>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	69b9      	ldr	r1, [r7, #24]
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ff14 	bl	8002d58 <LL_ADC_INJ_IsConversionOngoing>
 8002f30:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d16d      	bne.n	8003014 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d16a      	bne.n	8003014 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f42:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f4a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f5a:	f023 0302 	bic.w	r3, r3, #2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	69b9      	ldr	r1, [r7, #24]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d017      	beq.n	8002fa0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002f7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f88:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6911      	ldr	r1, [r2, #16]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002f9e:	e013      	b.n	8002fc8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002fae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fc4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d118      	bne.n	8003004 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fe8:	4311      	orrs	r1, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	611a      	str	r2, [r3, #16]
 8003002:	e007      	b.n	8003014 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d10c      	bne.n	8003036 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	f023 010f 	bic.w	r1, r3, #15
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	1e5a      	subs	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	631a      	str	r2, [r3, #48]	@ 0x30
 8003034:	e007      	b.n	8003046 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 020f 	bic.w	r2, r2, #15
 8003044:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304a:	f023 0303 	bic.w	r3, r3, #3
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003056:	e007      	b.n	8003068 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	f043 0210 	orr.w	r2, r3, #16
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003068:	7ffb      	ldrb	r3, [r7, #31]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3724      	adds	r7, #36	@ 0x24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd90      	pop	{r4, r7, pc}
 8003072:	bf00      	nop
 8003074:	20000414 	.word	0x20000414
 8003078:	053e2d63 	.word	0x053e2d63
 800307c:	50000100 	.word	0x50000100
 8003080:	50000300 	.word	0x50000300
 8003084:	fff04007 	.word	0xfff04007

08003088 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003094:	4851      	ldr	r0, [pc, #324]	@ (80031dc <HAL_ADC_Start_DMA+0x154>)
 8003096:	f7ff fdb5 	bl	8002c04 <LL_ADC_GetMultimode>
 800309a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fe46 	bl	8002d32 <LL_ADC_REG_IsConversionOngoing>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f040 808f 	bne.w	80031cc <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_Start_DMA+0x34>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e08a      	b.n	80031d2 <HAL_ADC_Start_DMA+0x14a>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2b05      	cmp	r3, #5
 80030ce:	d002      	beq.n	80030d6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2b09      	cmp	r3, #9
 80030d4:	d173      	bne.n	80031be <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fc8e 	bl	80039f8 <ADC_Enable>
 80030dc:	4603      	mov	r3, r0
 80030de:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d166      	bne.n	80031b4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a38      	ldr	r2, [pc, #224]	@ (80031e0 <HAL_ADC_Start_DMA+0x158>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d002      	beq.n	800310a <HAL_ADC_Start_DMA+0x82>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	e001      	b.n	800310e <HAL_ADC_Start_DMA+0x86>
 800310a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	4293      	cmp	r3, r2
 8003114:	d002      	beq.n	800311c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d105      	bne.n	8003128 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003120:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d006      	beq.n	8003142 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003138:	f023 0206 	bic.w	r2, r3, #6
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003140:	e002      	b.n	8003148 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314c:	4a25      	ldr	r2, [pc, #148]	@ (80031e4 <HAL_ADC_Start_DMA+0x15c>)
 800314e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003154:	4a24      	ldr	r2, [pc, #144]	@ (80031e8 <HAL_ADC_Start_DMA+0x160>)
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315c:	4a23      	ldr	r2, [pc, #140]	@ (80031ec <HAL_ADC_Start_DMA+0x164>)
 800315e:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	221c      	movs	r2, #28
 8003166:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0210 	orr.w	r2, r2, #16
 800317e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3340      	adds	r3, #64	@ 0x40
 800319a:	4619      	mov	r1, r3
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f001 fb30 	bl	8004804 <HAL_DMA_Start_IT>
 80031a4:	4603      	mov	r3, r0
 80031a6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fdac 	bl	8002d0a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80031b2:	e00d      	b.n	80031d0 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80031bc:	e008      	b.n	80031d0 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80031ca:	e001      	b.n	80031d0 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
 80031ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	50000300 	.word	0x50000300
 80031e0:	50000100 	.word	0x50000100
 80031e4:	08003b05 	.word	0x08003b05
 80031e8:	08003bdd 	.word	0x08003bdd
 80031ec:	08003bf9 	.word	0x08003bf9

080031f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b0b6      	sub	sp, #216	@ 0xd8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_ADC_ConfigChannel+0x22>
 8003236:	2302      	movs	r3, #2
 8003238:	e3c8      	b.n	80039cc <HAL_ADC_ConfigChannel+0x7b4>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fd73 	bl	8002d32 <LL_ADC_REG_IsConversionOngoing>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	f040 83ad 	bne.w	80039ae <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	f7ff fc54 	bl	8002b0e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fd61 	bl	8002d32 <LL_ADC_REG_IsConversionOngoing>
 8003270:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fd6d 	bl	8002d58 <LL_ADC_INJ_IsConversionOngoing>
 800327e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003282:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 81d9 	bne.w	800363e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800328c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003290:	2b00      	cmp	r3, #0
 8003292:	f040 81d4 	bne.w	800363e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800329e:	d10f      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2200      	movs	r2, #0
 80032aa:	4619      	mov	r1, r3
 80032ac:	f7ff fc5b 	bl	8002b66 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fc02 	bl	8002ac2 <LL_ADC_SetSamplingTimeCommonConfig>
 80032be:	e00e      	b.n	80032de <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6819      	ldr	r1, [r3, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	461a      	mov	r2, r3
 80032ce:	f7ff fc4a 	bl	8002b66 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fbf2 	bl	8002ac2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	08db      	lsrs	r3, r3, #3
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d022      	beq.n	8003346 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6919      	ldr	r1, [r3, #16]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003310:	f7ff fb4c 	bl	80029ac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	6919      	ldr	r1, [r3, #16]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	461a      	mov	r2, r3
 8003322:	f7ff fb98 	bl	8002a56 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003332:	2b01      	cmp	r3, #1
 8003334:	d102      	bne.n	800333c <HAL_ADC_ConfigChannel+0x124>
 8003336:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800333a:	e000      	b.n	800333e <HAL_ADC_ConfigChannel+0x126>
 800333c:	2300      	movs	r3, #0
 800333e:	461a      	mov	r2, r3
 8003340:	f7ff fba4 	bl	8002a8c <LL_ADC_SetOffsetSaturation>
 8003344:	e17b      	b.n	800363e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fb51 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 8003352:	4603      	mov	r3, r0
 8003354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x15a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2100      	movs	r1, #0
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fb46 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 8003368:	4603      	mov	r3, r0
 800336a:	0e9b      	lsrs	r3, r3, #26
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	e01e      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x198>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fb3b 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 800337e:	4603      	mov	r3, r0
 8003380:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003390:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003394:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003398:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80033a0:	2320      	movs	r3, #32
 80033a2:	e004      	b.n	80033ae <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80033a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x1b0>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	0e9b      	lsrs	r3, r3, #26
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	e018      	b.n	80033fa <HAL_ADC_ConfigChannel+0x1e2>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80033dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80033e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80033ec:	2320      	movs	r3, #32
 80033ee:	e004      	b.n	80033fa <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80033f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d106      	bne.n	800340c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2200      	movs	r2, #0
 8003404:	2100      	movs	r1, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fb0a 	bl	8002a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2101      	movs	r1, #1
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff faee 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 8003418:	4603      	mov	r3, r0
 800341a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x220>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2101      	movs	r1, #1
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fae3 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 800342e:	4603      	mov	r3, r0
 8003430:	0e9b      	lsrs	r3, r3, #26
 8003432:	f003 021f 	and.w	r2, r3, #31
 8003436:	e01e      	b.n	8003476 <HAL_ADC_ConfigChannel+0x25e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2101      	movs	r1, #1
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fad8 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 8003444:	4603      	mov	r3, r0
 8003446:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800345a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800345e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003466:	2320      	movs	r3, #32
 8003468:	e004      	b.n	8003474 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800346a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800346e:	fab3 f383 	clz	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347e:	2b00      	cmp	r3, #0
 8003480:	d105      	bne.n	800348e <HAL_ADC_ConfigChannel+0x276>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	0e9b      	lsrs	r3, r3, #26
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	e018      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x2a8>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80034a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80034a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80034aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80034b2:	2320      	movs	r3, #32
 80034b4:	e004      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80034b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d106      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2200      	movs	r2, #0
 80034ca:	2101      	movs	r1, #1
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff faa7 	bl	8002a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2102      	movs	r1, #2
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fa8b 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 80034de:	4603      	mov	r3, r0
 80034e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x2e6>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2102      	movs	r1, #2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fa80 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 80034f4:	4603      	mov	r3, r0
 80034f6:	0e9b      	lsrs	r3, r3, #26
 80034f8:	f003 021f 	and.w	r2, r3, #31
 80034fc:	e01e      	b.n	800353c <HAL_ADC_ConfigChannel+0x324>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2102      	movs	r1, #2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fa75 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 800350a:	4603      	mov	r3, r0
 800350c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800351c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003520:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003524:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800352c:	2320      	movs	r3, #32
 800352e:	e004      	b.n	800353a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003530:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003534:	fab3 f383 	clz	r3, r3
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003544:	2b00      	cmp	r3, #0
 8003546:	d105      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x33c>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0e9b      	lsrs	r3, r3, #26
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	e016      	b.n	8003582 <HAL_ADC_ConfigChannel+0x36a>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003566:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003568:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800356c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003574:	2320      	movs	r3, #32
 8003576:	e004      	b.n	8003582 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003578:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800357c:	fab3 f383 	clz	r3, r3
 8003580:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003582:	429a      	cmp	r2, r3
 8003584:	d106      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2200      	movs	r2, #0
 800358c:	2102      	movs	r1, #2
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fa46 	bl	8002a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2103      	movs	r1, #3
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fa2a 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10a      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x3a8>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2103      	movs	r1, #3
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff fa1f 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 80035b6:	4603      	mov	r3, r0
 80035b8:	0e9b      	lsrs	r3, r3, #26
 80035ba:	f003 021f 	and.w	r2, r3, #31
 80035be:	e017      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x3d8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2103      	movs	r1, #3
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fa14 	bl	80029f4 <LL_ADC_GetOffsetChannel>
 80035cc:	4603      	mov	r3, r0
 80035ce:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80035d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035da:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80035dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80035e2:	2320      	movs	r3, #32
 80035e4:	e003      	b.n	80035ee <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80035e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035e8:	fab3 f383 	clz	r3, r3
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d105      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x3f0>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	0e9b      	lsrs	r3, r3, #26
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	e011      	b.n	800362c <HAL_ADC_ConfigChannel+0x414>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003610:	fa93 f3a3 	rbit	r3, r3
 8003614:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003616:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003618:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800361a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003620:	2320      	movs	r3, #32
 8003622:	e003      	b.n	800362c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800362c:	429a      	cmp	r2, r3
 800362e:	d106      	bne.n	800363e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2200      	movs	r2, #0
 8003636:	2103      	movs	r1, #3
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff f9f1 	bl	8002a20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fb4e 	bl	8002ce4 <LL_ADC_IsEnabled>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 8140 	bne.w	80038d0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6819      	ldr	r1, [r3, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	461a      	mov	r2, r3
 800365e:	f7ff faad 	bl	8002bbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	4a8f      	ldr	r2, [pc, #572]	@ (80038a4 <HAL_ADC_ConfigChannel+0x68c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	f040 8131 	bne.w	80038d0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10b      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x47e>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	0e9b      	lsrs	r3, r3, #26
 8003684:	3301      	adds	r3, #1
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	2b09      	cmp	r3, #9
 800368c:	bf94      	ite	ls
 800368e:	2301      	movls	r3, #1
 8003690:	2300      	movhi	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	e019      	b.n	80036ca <HAL_ADC_ConfigChannel+0x4b2>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80036a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036a6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80036a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80036ae:	2320      	movs	r3, #32
 80036b0:	e003      	b.n	80036ba <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80036b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036b4:	fab3 f383 	clz	r3, r3
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	2b09      	cmp	r3, #9
 80036c2:	bf94      	ite	ls
 80036c4:	2301      	movls	r3, #1
 80036c6:	2300      	movhi	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d079      	beq.n	80037c2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d107      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x4d2>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	0e9b      	lsrs	r3, r3, #26
 80036e0:	3301      	adds	r3, #1
 80036e2:	069b      	lsls	r3, r3, #26
 80036e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036e8:	e015      	b.n	8003716 <HAL_ADC_ConfigChannel+0x4fe>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036fa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80036fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003702:	2320      	movs	r3, #32
 8003704:	e003      	b.n	800370e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	3301      	adds	r3, #1
 8003710:	069b      	lsls	r3, r3, #26
 8003712:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x51e>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	0e9b      	lsrs	r3, r3, #26
 8003728:	3301      	adds	r3, #1
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f303 	lsl.w	r3, r1, r3
 8003734:	e017      	b.n	8003766 <HAL_ADC_ConfigChannel+0x54e>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003746:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800374e:	2320      	movs	r3, #32
 8003750:	e003      	b.n	800375a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	3301      	adds	r3, #1
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	ea42 0103 	orr.w	r1, r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10a      	bne.n	800378c <HAL_ADC_ConfigChannel+0x574>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0e9b      	lsrs	r3, r3, #26
 800377c:	3301      	adds	r3, #1
 800377e:	f003 021f 	and.w	r2, r3, #31
 8003782:	4613      	mov	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	051b      	lsls	r3, r3, #20
 800378a:	e018      	b.n	80037be <HAL_ADC_ConfigChannel+0x5a6>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800379a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800379e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80037a4:	2320      	movs	r3, #32
 80037a6:	e003      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80037a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	f003 021f 	and.w	r2, r3, #31
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037be:	430b      	orrs	r3, r1
 80037c0:	e081      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d107      	bne.n	80037de <HAL_ADC_ConfigChannel+0x5c6>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	0e9b      	lsrs	r3, r3, #26
 80037d4:	3301      	adds	r3, #1
 80037d6:	069b      	lsls	r3, r3, #26
 80037d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037dc:	e015      	b.n	800380a <HAL_ADC_ConfigChannel+0x5f2>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80037ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ee:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80037f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80037f6:	2320      	movs	r3, #32
 80037f8:	e003      	b.n	8003802 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80037fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	b2db      	uxtb	r3, r3
 8003802:	3301      	adds	r3, #1
 8003804:	069b      	lsls	r3, r3, #26
 8003806:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_ADC_ConfigChannel+0x612>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	0e9b      	lsrs	r3, r3, #26
 800381c:	3301      	adds	r3, #1
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	2101      	movs	r1, #1
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	e017      	b.n	800385a <HAL_ADC_ConfigChannel+0x642>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	61fb      	str	r3, [r7, #28]
  return result;
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800383c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003842:	2320      	movs	r3, #32
 8003844:	e003      	b.n	800384e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	b2db      	uxtb	r3, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	2101      	movs	r1, #1
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	ea42 0103 	orr.w	r1, r2, r3
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x66e>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	0e9b      	lsrs	r3, r3, #26
 8003870:	3301      	adds	r3, #1
 8003872:	f003 021f 	and.w	r2, r3, #31
 8003876:	4613      	mov	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4413      	add	r3, r2
 800387c:	3b1e      	subs	r3, #30
 800387e:	051b      	lsls	r3, r3, #20
 8003880:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003884:	e01e      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x6ac>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	613b      	str	r3, [r7, #16]
  return result;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d104      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800389e:	2320      	movs	r3, #32
 80038a0:	e006      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x698>
 80038a2:	bf00      	nop
 80038a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	3301      	adds	r3, #1
 80038b2:	f003 021f 	and.w	r2, r3, #31
 80038b6:	4613      	mov	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	4413      	add	r3, r2
 80038bc:	3b1e      	subs	r3, #30
 80038be:	051b      	lsls	r3, r3, #20
 80038c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ca:	4619      	mov	r1, r3
 80038cc:	f7ff f94b 	bl	8002b66 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b3f      	ldr	r3, [pc, #252]	@ (80039d4 <HAL_ADC_ConfigChannel+0x7bc>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d071      	beq.n	80039c0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038dc:	483e      	ldr	r0, [pc, #248]	@ (80039d8 <HAL_ADC_ConfigChannel+0x7c0>)
 80038de:	f7ff f857 	bl	8002990 <LL_ADC_GetCommonPathInternalCh>
 80038e2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a3c      	ldr	r2, [pc, #240]	@ (80039dc <HAL_ADC_ConfigChannel+0x7c4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_ADC_ConfigChannel+0x6e2>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a3a      	ldr	r2, [pc, #232]	@ (80039e0 <HAL_ADC_ConfigChannel+0x7c8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d127      	bne.n	800394a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d121      	bne.n	800394a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800390e:	d157      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003910:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003914:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003918:	4619      	mov	r1, r3
 800391a:	482f      	ldr	r0, [pc, #188]	@ (80039d8 <HAL_ADC_ConfigChannel+0x7c0>)
 800391c:	f7ff f825 	bl	800296a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003920:	4b30      	ldr	r3, [pc, #192]	@ (80039e4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	4a30      	ldr	r2, [pc, #192]	@ (80039e8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	099b      	lsrs	r3, r3, #6
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800393a:	e002      	b.n	8003942 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3b01      	subs	r3, #1
 8003940:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f9      	bne.n	800393c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003948:	e03a      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a27      	ldr	r2, [pc, #156]	@ (80039ec <HAL_ADC_ConfigChannel+0x7d4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d113      	bne.n	800397c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003954:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10d      	bne.n	800397c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a22      	ldr	r2, [pc, #136]	@ (80039f0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02a      	beq.n	80039c0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800396a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800396e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003972:	4619      	mov	r1, r3
 8003974:	4818      	ldr	r0, [pc, #96]	@ (80039d8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003976:	f7fe fff8 	bl	800296a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800397a:	e021      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1c      	ldr	r2, [pc, #112]	@ (80039f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d11c      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003986:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800398a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d116      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a16      	ldr	r2, [pc, #88]	@ (80039f0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d011      	beq.n	80039c0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800399c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039a4:	4619      	mov	r1, r3
 80039a6:	480c      	ldr	r0, [pc, #48]	@ (80039d8 <HAL_ADC_ConfigChannel+0x7c0>)
 80039a8:	f7fe ffdf 	bl	800296a <LL_ADC_SetCommonPathInternalCh>
 80039ac:	e008      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80039c8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	37d8      	adds	r7, #216	@ 0xd8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	80080000 	.word	0x80080000
 80039d8:	50000300 	.word	0x50000300
 80039dc:	c3210000 	.word	0xc3210000
 80039e0:	90c00010 	.word	0x90c00010
 80039e4:	20000414 	.word	0x20000414
 80039e8:	053e2d63 	.word	0x053e2d63
 80039ec:	c7520000 	.word	0xc7520000
 80039f0:	50000100 	.word	0x50000100
 80039f4:	cb840000 	.word	0xcb840000

080039f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff f96b 	bl	8002ce4 <LL_ADC_IsEnabled>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d169      	bne.n	8003ae8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	4b36      	ldr	r3, [pc, #216]	@ (8003af4 <ADC_Enable+0xfc>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00d      	beq.n	8003a3e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	f043 0210 	orr.w	r2, r3, #16
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a32:	f043 0201 	orr.w	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e055      	b.n	8003aea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff f93a 	bl	8002cbc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a48:	482b      	ldr	r0, [pc, #172]	@ (8003af8 <ADC_Enable+0x100>)
 8003a4a:	f7fe ffa1 	bl	8002990 <LL_ADC_GetCommonPathInternalCh>
 8003a4e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d013      	beq.n	8003a80 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a58:	4b28      	ldr	r3, [pc, #160]	@ (8003afc <ADC_Enable+0x104>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	099b      	lsrs	r3, r3, #6
 8003a5e:	4a28      	ldr	r2, [pc, #160]	@ (8003b00 <ADC_Enable+0x108>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a72:	e002      	b.n	8003a7a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f9      	bne.n	8003a74 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a80:	f7fe ff54 	bl	800292c <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a86:	e028      	b.n	8003ada <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff f929 	bl	8002ce4 <LL_ADC_IsEnabled>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d104      	bne.n	8003aa2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff f90d 	bl	8002cbc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003aa2:	f7fe ff43 	bl	800292c <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d914      	bls.n	8003ada <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d00d      	beq.n	8003ada <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac2:	f043 0210 	orr.w	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ace:	f043 0201 	orr.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e007      	b.n	8003aea <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d1cf      	bne.n	8003a88 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	8000003f 	.word	0x8000003f
 8003af8:	50000300 	.word	0x50000300
 8003afc:	20000414 	.word	0x20000414
 8003b00:	053e2d63 	.word	0x053e2d63

08003b04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b16:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d14b      	bne.n	8003bb6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b22:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d021      	beq.n	8003b7c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe ffd3 	bl	8002ae8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d032      	beq.n	8003bae <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d12b      	bne.n	8003bae <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d11f      	bne.n	8003bae <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b72:	f043 0201 	orr.w	r2, r3, #1
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b7a:	e018      	b.n	8003bae <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d111      	bne.n	8003bae <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d105      	bne.n	8003bae <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba6:	f043 0201 	orr.w	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7fd fd7a 	bl	80016a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bb4:	e00e      	b.n	8003bd4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7ff fb1e 	bl	8003204 <HAL_ADC_ErrorCallback>
}
 8003bc8:	e004      	b.n	8003bd4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f7ff fb00 	bl	80031f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c16:	f043 0204 	orr.w	r2, r3, #4
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f7ff faf0 	bl	8003204 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <LL_ADC_IsEnabled>:
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <LL_ADC_IsEnabled+0x18>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <LL_ADC_IsEnabled+0x1a>
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <LL_ADC_REG_IsConversionOngoing>:
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d101      	bne.n	8003c6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003c78:	b590      	push	{r4, r7, lr}
 8003c7a:	b0a1      	sub	sp, #132	@ 0x84
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e08b      	b.n	8003dae <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cae:	d102      	bne.n	8003cb6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cb0:	4b41      	ldr	r3, [pc, #260]	@ (8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	e001      	b.n	8003cba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e06a      	b.n	8003dae <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff ffb9 	bl	8003c52 <LL_ADC_REG_IsConversionOngoing>
 8003ce0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff ffb3 	bl	8003c52 <LL_ADC_REG_IsConversionOngoing>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d14c      	bne.n	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003cf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d149      	bne.n	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003cf8:	4b30      	ldr	r3, [pc, #192]	@ (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003cfa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d028      	beq.n	8003d56 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d16:	035b      	lsls	r3, r3, #13
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d20:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d24:	f7ff ff82 	bl	8003c2c <LL_ADC_IsEnabled>
 8003d28:	4604      	mov	r4, r0
 8003d2a:	4823      	ldr	r0, [pc, #140]	@ (8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d2c:	f7ff ff7e 	bl	8003c2c <LL_ADC_IsEnabled>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4323      	orrs	r3, r4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d133      	bne.n	8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d40:	f023 030f 	bic.w	r3, r3, #15
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	6811      	ldr	r1, [r2, #0]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	6892      	ldr	r2, [r2, #8]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d52:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d54:	e024      	b.n	8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d60:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d62:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d66:	f7ff ff61 	bl	8003c2c <LL_ADC_IsEnabled>
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	4812      	ldr	r0, [pc, #72]	@ (8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d6e:	f7ff ff5d 	bl	8003c2c <LL_ADC_IsEnabled>
 8003d72:	4603      	mov	r3, r0
 8003d74:	4323      	orrs	r3, r4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d112      	bne.n	8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d82:	f023 030f 	bic.w	r3, r3, #15
 8003d86:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003d88:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d8a:	e009      	b.n	8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003d9e:	e000      	b.n	8003da2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003da0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003daa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3784      	adds	r7, #132	@ 0x84
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd90      	pop	{r4, r7, pc}
 8003db6:	bf00      	nop
 8003db8:	50000100 	.word	0x50000100
 8003dbc:	50000300 	.word	0x50000300

08003dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003df2:	4a04      	ldr	r2, [pc, #16]	@ (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	60d3      	str	r3, [r2, #12]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e0c:	4b04      	ldr	r3, [pc, #16]	@ (8003e20 <__NVIC_GetPriorityGrouping+0x18>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	f003 0307 	and.w	r3, r3, #7
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	db0b      	blt.n	8003e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	f003 021f 	and.w	r2, r3, #31
 8003e3c:	4907      	ldr	r1, [pc, #28]	@ (8003e5c <__NVIC_EnableIRQ+0x38>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2001      	movs	r0, #1
 8003e46:	fa00 f202 	lsl.w	r2, r0, r2
 8003e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000e100 	.word	0xe000e100

08003e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	db0a      	blt.n	8003e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	490c      	ldr	r1, [pc, #48]	@ (8003eac <__NVIC_SetPriority+0x4c>)
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	0112      	lsls	r2, r2, #4
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	440b      	add	r3, r1
 8003e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e88:	e00a      	b.n	8003ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	4908      	ldr	r1, [pc, #32]	@ (8003eb0 <__NVIC_SetPriority+0x50>)
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	3b04      	subs	r3, #4
 8003e98:	0112      	lsls	r2, r2, #4
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	761a      	strb	r2, [r3, #24]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	e000e100 	.word	0xe000e100
 8003eb0:	e000ed00 	.word	0xe000ed00

08003eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	@ 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f1c3 0307 	rsb	r3, r3, #7
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	bf28      	it	cs
 8003ed2:	2304      	movcs	r3, #4
 8003ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	d902      	bls.n	8003ee4 <NVIC_EncodePriority+0x30>
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	3b03      	subs	r3, #3
 8003ee2:	e000      	b.n	8003ee6 <NVIC_EncodePriority+0x32>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003efc:	f04f 31ff 	mov.w	r1, #4294967295
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	43d9      	mvns	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f0c:	4313      	orrs	r3, r2
         );
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3724      	adds	r7, #36	@ 0x24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ff4c 	bl	8003dc0 <__NVIC_SetPriorityGrouping>
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f3e:	f7ff ff63 	bl	8003e08 <__NVIC_GetPriorityGrouping>
 8003f42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	6978      	ldr	r0, [r7, #20]
 8003f4a:	f7ff ffb3 	bl	8003eb4 <NVIC_EncodePriority>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff ff82 	bl	8003e60 <__NVIC_SetPriority>
}
 8003f5c:	bf00      	nop
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ff56 	bl	8003e24 <__NVIC_EnableIRQ>
}
 8003f78:	bf00      	nop
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e014      	b.n	8003fbc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	791b      	ldrb	r3, [r3, #4]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fe f98c 	bl	80022c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0b2      	b.n	8004142 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	795b      	ldrb	r3, [r3, #5]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_DAC_Start_DMA+0x24>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e0ac      	b.n	8004142 <HAL_DAC_Start_DMA+0x17e>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d129      	bne.n	800404e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	4a53      	ldr	r2, [pc, #332]	@ (800414c <HAL_DAC_Start_DMA+0x188>)
 8004000:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	4a52      	ldr	r2, [pc, #328]	@ (8004150 <HAL_DAC_Start_DMA+0x18c>)
 8004008:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	4a51      	ldr	r2, [pc, #324]	@ (8004154 <HAL_DAC_Start_DMA+0x190>)
 8004010:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004020:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_DAC_Start_DMA+0x6c>
 8004028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402a:	2b04      	cmp	r3, #4
 800402c:	d005      	beq.n	800403a <HAL_DAC_Start_DMA+0x76>
 800402e:	e009      	b.n	8004044 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3308      	adds	r3, #8
 8004036:	61bb      	str	r3, [r7, #24]
        break;
 8004038:	e033      	b.n	80040a2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	61bb      	str	r3, [r7, #24]
        break;
 8004042:	e02e      	b.n	80040a2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3310      	adds	r3, #16
 800404a:	61bb      	str	r3, [r7, #24]
        break;
 800404c:	e029      	b.n	80040a2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	4a41      	ldr	r2, [pc, #260]	@ (8004158 <HAL_DAC_Start_DMA+0x194>)
 8004054:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	4a40      	ldr	r2, [pc, #256]	@ (800415c <HAL_DAC_Start_DMA+0x198>)
 800405c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	4a3f      	ldr	r2, [pc, #252]	@ (8004160 <HAL_DAC_Start_DMA+0x19c>)
 8004064:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004074:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_DAC_Start_DMA+0xc0>
 800407c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407e:	2b04      	cmp	r3, #4
 8004080:	d005      	beq.n	800408e <HAL_DAC_Start_DMA+0xca>
 8004082:	e009      	b.n	8004098 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3314      	adds	r3, #20
 800408a:	61bb      	str	r3, [r7, #24]
        break;
 800408c:	e009      	b.n	80040a2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3318      	adds	r3, #24
 8004094:	61bb      	str	r3, [r7, #24]
        break;
 8004096:	e004      	b.n	80040a2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	331c      	adds	r3, #28
 800409e:	61bb      	str	r3, [r7, #24]
        break;
 80040a0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d111      	bne.n	80040cc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6898      	ldr	r0, [r3, #8]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	f000 fb9f 	bl	8004804 <HAL_DMA_Start_IT>
 80040c6:	4603      	mov	r3, r0
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	e010      	b.n	80040ee <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80040da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	68d8      	ldr	r0, [r3, #12]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	f000 fb8d 	bl	8004804 <HAL_DMA_Start_IT>
 80040ea:	4603      	mov	r3, r0
 80040ec:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80040f4:	7ffb      	ldrb	r3, [r7, #31]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d11c      	bne.n	8004134 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2201      	movs	r2, #1
 8004108:	409a      	lsls	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004112:	4b14      	ldr	r3, [pc, #80]	@ (8004164 <HAL_DAC_Start_DMA+0x1a0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	099b      	lsrs	r3, r3, #6
 8004118:	4a13      	ldr	r2, [pc, #76]	@ (8004168 <HAL_DAC_Start_DMA+0x1a4>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	099b      	lsrs	r3, r3, #6
 8004120:	3301      	adds	r3, #1
 8004122:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8004124:	e002      	b.n	800412c <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	3b01      	subs	r3, #1
 800412a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f9      	bne.n	8004126 <HAL_DAC_Start_DMA+0x162>
 8004132:	e005      	b.n	8004140 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f043 0204 	orr.w	r2, r3, #4
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004140:	7ffb      	ldrb	r3, [r7, #31]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	080045a1 	.word	0x080045a1
 8004150:	080045c3 	.word	0x080045c3
 8004154:	080045df 	.word	0x080045df
 8004158:	08004649 	.word	0x08004649
 800415c:	0800466b 	.word	0x0800466b
 8004160:	08004687 	.word	0x08004687
 8004164:	20000414 	.word	0x20000414
 8004168:	053e2d63 	.word	0x053e2d63

0800416c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e03e      	b.n	80041fe <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6819      	ldr	r1, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43da      	mvns	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	400a      	ands	r2, r1
 800419c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6819      	ldr	r1, [r3, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2201      	movs	r2, #1
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43da      	mvns	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	400a      	ands	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10d      	bne.n	80041dc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fb98 	bl	80048fa <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	e00c      	b.n	80041f6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fb8a 	bl	80048fa <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80041f4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
	...

08004230 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	@ 0x28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <HAL_DAC_ConfigChannel+0x1c>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e19e      	b.n	800458e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	795b      	ldrb	r3, [r3, #5]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_DAC_ConfigChannel+0x2c>
 8004258:	2302      	movs	r3, #2
 800425a:	e198      	b.n	800458e <HAL_DAC_ConfigChannel+0x35e>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2202      	movs	r2, #2
 8004266:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b04      	cmp	r3, #4
 800426e:	d17a      	bne.n	8004366 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004270:	f7fe fb5c 	bl	800292c <HAL_GetTick>
 8004274:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d13d      	bne.n	80042f8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800427c:	e018      	b.n	80042b0 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800427e:	f7fe fb55 	bl	800292c <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	d911      	bls.n	80042b0 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004292:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f043 0208 	orr.w	r2, r3, #8
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2203      	movs	r2, #3
 80042aa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e16e      	b.n	800458e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1df      	bne.n	800427e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80042c8:	e020      	b.n	800430c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80042ca:	f7fe fb2f 	bl	800292c <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d90f      	bls.n	80042f8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042de:	2b00      	cmp	r3, #0
 80042e0:	da0a      	bge.n	80042f8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f043 0208 	orr.w	r2, r3, #8
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2203      	movs	r2, #3
 80042f2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e14a      	b.n	800458e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042fe:	2b00      	cmp	r3, #0
 8004300:	dbe3      	blt.n	80042ca <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800430a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	ea02 0103 	and.w	r1, r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	409a      	lsls	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	21ff      	movs	r1, #255	@ 0xff
 8004348:	fa01 f303 	lsl.w	r3, r1, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	ea02 0103 	and.w	r1, r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	409a      	lsls	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d11d      	bne.n	80043aa <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004374:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	221f      	movs	r2, #31
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004386:	4013      	ands	r3, r2
 8004388:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439e:	4313      	orrs	r3, r2
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2207      	movs	r2, #7
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43db      	mvns	r3, r3
 80043c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c2:	4013      	ands	r3, r2
 80043c4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d102      	bne.n	80043d4 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	623b      	str	r3, [r7, #32]
 80043d2:	e00f      	b.n	80043f4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d102      	bne.n	80043e2 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80043dc:	2301      	movs	r3, #1
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	e008      	b.n	80043f4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80043ea:	2301      	movs	r3, #1
 80043ec:	623b      	str	r3, [r7, #32]
 80043ee:	e001      	b.n	80043f4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	6a3a      	ldr	r2, [r7, #32]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004416:	4013      	ands	r3, r2
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	791b      	ldrb	r3, [r3, #4]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d102      	bne.n	8004428 <HAL_DAC_ConfigChannel+0x1f8>
 8004422:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004426:	e000      	b.n	800442a <HAL_DAC_ConfigChannel+0x1fa>
 8004428:	2300      	movs	r3, #0
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43db      	mvns	r3, r3
 8004440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004442:	4013      	ands	r3, r2
 8004444:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	795b      	ldrb	r3, [r3, #5]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d102      	bne.n	8004454 <HAL_DAC_ConfigChannel+0x224>
 800444e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004452:	e000      	b.n	8004456 <HAL_DAC_ConfigChannel+0x226>
 8004454:	2300      	movs	r3, #0
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800445c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004462:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d114      	bne.n	8004496 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800446c:	f001 fb3a 	bl	8005ae4 <HAL_RCC_GetHCLKFreq>
 8004470:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	4a48      	ldr	r2, [pc, #288]	@ (8004598 <HAL_DAC_ConfigChannel+0x368>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d904      	bls.n	8004484 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004480:	627b      	str	r3, [r7, #36]	@ 0x24
 8004482:	e00f      	b.n	80044a4 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4a45      	ldr	r2, [pc, #276]	@ (800459c <HAL_DAC_ConfigChannel+0x36c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d90a      	bls.n	80044a2 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
 8004494:	e006      	b.n	80044a4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800449c:	4313      	orrs	r3, r2
 800449e:	627b      	str	r3, [r7, #36]	@ 0x24
 80044a0:	e000      	b.n	80044a4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80044a2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b2:	4313      	orrs	r3, r2
 80044b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6819      	ldr	r1, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43da      	mvns	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	400a      	ands	r2, r1
 80044da:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f6:	4013      	ands	r3, r2
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800450e:	4313      	orrs	r3, r2
 8004510:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004518:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6819      	ldr	r1, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	22c0      	movs	r2, #192	@ 0xc0
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	43da      	mvns	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	400a      	ands	r2, r1
 8004534:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	089b      	lsrs	r3, r3, #2
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	089b      	lsrs	r3, r3, #2
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	ea02 0103 	and.w	r1, r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	409a      	lsls	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800458c:	7ffb      	ldrb	r3, [r7, #31]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3728      	adds	r7, #40	@ 0x28
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	09896800 	.word	0x09896800
 800459c:	04c4b400 	.word	0x04c4b400

080045a0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7fd f89c 	bl	80016ec <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	711a      	strb	r2, [r3, #4]
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f7ff fe18 	bl	8004206 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f043 0204 	orr.w	r2, r3, #4
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff fe0e 	bl	800421a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	711a      	strb	r2, [r3, #4]
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004654:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff ffd8 	bl	800460c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	711a      	strb	r2, [r3, #4]
}
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004676:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff ffd1 	bl	8004620 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004692:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f043 0204 	orr.w	r2, r3, #4
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7ff ffc7 	bl	8004634 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	711a      	strb	r2, [r3, #4]
}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e08d      	b.n	80047e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	4b47      	ldr	r3, [pc, #284]	@ (80047ec <HAL_DMA_Init+0x138>)
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d80f      	bhi.n	80046f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	4b45      	ldr	r3, [pc, #276]	@ (80047f0 <HAL_DMA_Init+0x13c>)
 80046da:	4413      	add	r3, r2
 80046dc:	4a45      	ldr	r2, [pc, #276]	@ (80047f4 <HAL_DMA_Init+0x140>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	009a      	lsls	r2, r3, #2
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a42      	ldr	r2, [pc, #264]	@ (80047f8 <HAL_DMA_Init+0x144>)
 80046ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80046f0:	e00e      	b.n	8004710 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	461a      	mov	r2, r3
 80046f8:	4b40      	ldr	r3, [pc, #256]	@ (80047fc <HAL_DMA_Init+0x148>)
 80046fa:	4413      	add	r3, r2
 80046fc:	4a3d      	ldr	r2, [pc, #244]	@ (80047f4 <HAL_DMA_Init+0x140>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	009a      	lsls	r2, r3, #2
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a3c      	ldr	r2, [pc, #240]	@ (8004800 <HAL_DMA_Init+0x14c>)
 800470e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800472a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800474c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fa76 	bl	8004c54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004770:	d102      	bne.n	8004778 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800478c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d010      	beq.n	80047b8 <HAL_DMA_Init+0x104>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b04      	cmp	r3, #4
 800479c:	d80c      	bhi.n	80047b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fa96 	bl	8004cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80047b4:	605a      	str	r2, [r3, #4]
 80047b6:	e008      	b.n	80047ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40020407 	.word	0x40020407
 80047f0:	bffdfff8 	.word	0xbffdfff8
 80047f4:	cccccccd 	.word	0xcccccccd
 80047f8:	40020000 	.word	0x40020000
 80047fc:	bffdfbf8 	.word	0xbffdfbf8
 8004800:	40020400 	.word	0x40020400

08004804 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_DMA_Start_IT+0x20>
 8004820:	2302      	movs	r3, #2
 8004822:	e066      	b.n	80048f2 <HAL_DMA_Start_IT+0xee>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	d155      	bne.n	80048e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f9bb 	bl	8004bd8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 020e 	orr.w	r2, r2, #14
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e00f      	b.n	800489c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0204 	bic.w	r2, r2, #4
 800488a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 020a 	orr.w	r2, r2, #10
 800489a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d007      	beq.n	80048d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	e005      	b.n	80048f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
 80048ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b085      	sub	sp, #20
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d005      	beq.n	800491e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2204      	movs	r2, #4
 8004916:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
 800491c:	e037      	b.n	800498e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 020e 	bic.w	r2, r2, #14
 800492c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800493c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0201 	bic.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004952:	f003 021f 	and.w	r2, r3, #31
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	2101      	movs	r1, #1
 800495c:	fa01 f202 	lsl.w	r2, r1, r2
 8004960:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800496a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00c      	beq.n	800498e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004982:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800498c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800499e:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d00d      	beq.n	80049e0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2204      	movs	r2, #4
 80049c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	73fb      	strb	r3, [r7, #15]
 80049de:	e047      	b.n	8004a70 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 020e 	bic.w	r2, r2, #14
 80049ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0201 	bic.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a14:	f003 021f 	and.w	r2, r3, #31
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a22:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a2c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00c      	beq.n	8004a50 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a44:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a4e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4798      	blx	r3
    }
  }
  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	409a      	lsls	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d026      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x7a>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d021      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d107      	bne.n	8004ace <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0204 	bic.w	r2, r2, #4
 8004acc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad2:	f003 021f 	and.w	r2, r3, #31
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	2104      	movs	r1, #4
 8004adc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d071      	beq.n	8004bce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004af2:	e06c      	b.n	8004bce <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	2202      	movs	r2, #2
 8004afe:	409a      	lsls	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d02e      	beq.n	8004b66 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d029      	beq.n	8004b66 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10b      	bne.n	8004b38 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 020a 	bic.w	r2, r2, #10
 8004b2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3c:	f003 021f 	and.w	r2, r3, #31
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b44:	2102      	movs	r1, #2
 8004b46:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d038      	beq.n	8004bce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b64:	e033      	b.n	8004bce <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6a:	f003 031f 	and.w	r3, r3, #31
 8004b6e:	2208      	movs	r2, #8
 8004b70:	409a      	lsls	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d02a      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d025      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 020e 	bic.w	r2, r2, #14
 8004b92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b98:	f003 021f 	and.w	r2, r3, #31
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004bce:	bf00      	nop
 8004bd0:	bf00      	nop
}
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d004      	beq.n	8004c02 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c00:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c06:	f003 021f 	and.w	r2, r3, #31
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	2101      	movs	r1, #1
 8004c10:	fa01 f202 	lsl.w	r2, r1, r2
 8004c14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	d108      	bne.n	8004c38 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c36:	e007      	b.n	8004c48 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	60da      	str	r2, [r3, #12]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	4b16      	ldr	r3, [pc, #88]	@ (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d802      	bhi.n	8004c6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c68:	4b15      	ldr	r3, [pc, #84]	@ (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	e001      	b.n	8004c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004c6e:	4b15      	ldr	r3, [pc, #84]	@ (8004cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c70:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	3b08      	subs	r3, #8
 8004c7e:	4a12      	ldr	r2, [pc, #72]	@ (8004cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	091b      	lsrs	r3, r3, #4
 8004c86:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8c:	089b      	lsrs	r3, r3, #2
 8004c8e:	009a      	lsls	r2, r3, #2
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4413      	add	r3, r2
 8004c94:	461a      	mov	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8004ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	409a      	lsls	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40020407 	.word	0x40020407
 8004cc0:	40020800 	.word	0x40020800
 8004cc4:	40020820 	.word	0x40020820
 8004cc8:	cccccccd 	.word	0xcccccccd
 8004ccc:	40020880 	.word	0x40020880

08004cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8004d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a08      	ldr	r2, [pc, #32]	@ (8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004cf2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	1000823f 	.word	0x1000823f
 8004d14:	40020940 	.word	0x40020940

08004d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d26:	e15a      	b.n	8004fde <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	fa01 f303 	lsl.w	r3, r1, r3
 8004d34:	4013      	ands	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 814c 	beq.w	8004fd8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d005      	beq.n	8004d58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d130      	bne.n	8004dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	2203      	movs	r2, #3
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d8e:	2201      	movs	r2, #1
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	091b      	lsrs	r3, r3, #4
 8004da4:	f003 0201 	and.w	r2, r3, #1
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d017      	beq.n	8004df6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d123      	bne.n	8004e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	08da      	lsrs	r2, r3, #3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3208      	adds	r2, #8
 8004e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	220f      	movs	r2, #15
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4013      	ands	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	08da      	lsrs	r2, r3, #3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3208      	adds	r2, #8
 8004e44:	6939      	ldr	r1, [r7, #16]
 8004e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	2203      	movs	r2, #3
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 0203 	and.w	r2, r3, #3
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80a6 	beq.w	8004fd8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e8c:	4b5b      	ldr	r3, [pc, #364]	@ (8004ffc <HAL_GPIO_Init+0x2e4>)
 8004e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e90:	4a5a      	ldr	r2, [pc, #360]	@ (8004ffc <HAL_GPIO_Init+0x2e4>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e98:	4b58      	ldr	r3, [pc, #352]	@ (8004ffc <HAL_GPIO_Init+0x2e4>)
 8004e9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ea4:	4a56      	ldr	r2, [pc, #344]	@ (8005000 <HAL_GPIO_Init+0x2e8>)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	089b      	lsrs	r3, r3, #2
 8004eaa:	3302      	adds	r3, #2
 8004eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f003 0303 	and.w	r3, r3, #3
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	220f      	movs	r2, #15
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ece:	d01f      	beq.n	8004f10 <HAL_GPIO_Init+0x1f8>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a4c      	ldr	r2, [pc, #304]	@ (8005004 <HAL_GPIO_Init+0x2ec>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d019      	beq.n	8004f0c <HAL_GPIO_Init+0x1f4>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a4b      	ldr	r2, [pc, #300]	@ (8005008 <HAL_GPIO_Init+0x2f0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d013      	beq.n	8004f08 <HAL_GPIO_Init+0x1f0>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a4a      	ldr	r2, [pc, #296]	@ (800500c <HAL_GPIO_Init+0x2f4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00d      	beq.n	8004f04 <HAL_GPIO_Init+0x1ec>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a49      	ldr	r2, [pc, #292]	@ (8005010 <HAL_GPIO_Init+0x2f8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d007      	beq.n	8004f00 <HAL_GPIO_Init+0x1e8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a48      	ldr	r2, [pc, #288]	@ (8005014 <HAL_GPIO_Init+0x2fc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d101      	bne.n	8004efc <HAL_GPIO_Init+0x1e4>
 8004ef8:	2305      	movs	r3, #5
 8004efa:	e00a      	b.n	8004f12 <HAL_GPIO_Init+0x1fa>
 8004efc:	2306      	movs	r3, #6
 8004efe:	e008      	b.n	8004f12 <HAL_GPIO_Init+0x1fa>
 8004f00:	2304      	movs	r3, #4
 8004f02:	e006      	b.n	8004f12 <HAL_GPIO_Init+0x1fa>
 8004f04:	2303      	movs	r3, #3
 8004f06:	e004      	b.n	8004f12 <HAL_GPIO_Init+0x1fa>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e002      	b.n	8004f12 <HAL_GPIO_Init+0x1fa>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <HAL_GPIO_Init+0x1fa>
 8004f10:	2300      	movs	r3, #0
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	f002 0203 	and.w	r2, r2, #3
 8004f18:	0092      	lsls	r2, r2, #2
 8004f1a:	4093      	lsls	r3, r2
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f22:	4937      	ldr	r1, [pc, #220]	@ (8005000 <HAL_GPIO_Init+0x2e8>)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	089b      	lsrs	r3, r3, #2
 8004f28:	3302      	adds	r3, #2
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f30:	4b39      	ldr	r3, [pc, #228]	@ (8005018 <HAL_GPIO_Init+0x300>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f54:	4a30      	ldr	r2, [pc, #192]	@ (8005018 <HAL_GPIO_Init+0x300>)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005018 <HAL_GPIO_Init+0x300>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	43db      	mvns	r3, r3
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4013      	ands	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f7e:	4a26      	ldr	r2, [pc, #152]	@ (8005018 <HAL_GPIO_Init+0x300>)
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004f84:	4b24      	ldr	r3, [pc, #144]	@ (8005018 <HAL_GPIO_Init+0x300>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4013      	ands	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8005018 <HAL_GPIO_Init+0x300>)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004fae:	4b1a      	ldr	r3, [pc, #104]	@ (8005018 <HAL_GPIO_Init+0x300>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fd2:	4a11      	ldr	r2, [pc, #68]	@ (8005018 <HAL_GPIO_Init+0x300>)
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f47f ae9d 	bne.w	8004d28 <HAL_GPIO_Init+0x10>
  }
}
 8004fee:	bf00      	nop
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40021000 	.word	0x40021000
 8005000:	40010000 	.word	0x40010000
 8005004:	48000400 	.word	0x48000400
 8005008:	48000800 	.word	0x48000800
 800500c:	48000c00 	.word	0x48000c00
 8005010:	48001000 	.word	0x48001000
 8005014:	48001400 	.word	0x48001400
 8005018:	40010400 	.word	0x40010400

0800501c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d141      	bne.n	80050ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800502a:	4b4b      	ldr	r3, [pc, #300]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005036:	d131      	bne.n	800509c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005038:	4b47      	ldr	r3, [pc, #284]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800503e:	4a46      	ldr	r2, [pc, #280]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005044:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005048:	4b43      	ldr	r3, [pc, #268]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005050:	4a41      	ldr	r2, [pc, #260]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005052:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005056:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005058:	4b40      	ldr	r3, [pc, #256]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2232      	movs	r2, #50	@ 0x32
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	4a3f      	ldr	r2, [pc, #252]	@ (8005160 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005064:	fba2 2303 	umull	r2, r3, r2, r3
 8005068:	0c9b      	lsrs	r3, r3, #18
 800506a:	3301      	adds	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800506e:	e002      	b.n	8005076 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3b01      	subs	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005076:	4b38      	ldr	r3, [pc, #224]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800507e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005082:	d102      	bne.n	800508a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f2      	bne.n	8005070 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800508a:	4b33      	ldr	r3, [pc, #204]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005096:	d158      	bne.n	800514a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e057      	b.n	800514c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800509c:	4b2e      	ldr	r3, [pc, #184]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050ac:	e04d      	b.n	800514a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050b4:	d141      	bne.n	800513a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050b6:	4b28      	ldr	r3, [pc, #160]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c2:	d131      	bne.n	8005128 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050c4:	4b24      	ldr	r3, [pc, #144]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ca:	4a23      	ldr	r2, [pc, #140]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050d4:	4b20      	ldr	r3, [pc, #128]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050e4:	4b1d      	ldr	r3, [pc, #116]	@ (800515c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2232      	movs	r2, #50	@ 0x32
 80050ea:	fb02 f303 	mul.w	r3, r2, r3
 80050ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005160 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	0c9b      	lsrs	r3, r3, #18
 80050f6:	3301      	adds	r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050fa:	e002      	b.n	8005102 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3b01      	subs	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005102:	4b15      	ldr	r3, [pc, #84]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800510a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800510e:	d102      	bne.n	8005116 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f2      	bne.n	80050fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005116:	4b10      	ldr	r3, [pc, #64]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800511e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005122:	d112      	bne.n	800514a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e011      	b.n	800514c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005128:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800512e:	4a0a      	ldr	r2, [pc, #40]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005134:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005138:	e007      	b.n	800514a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800513a:	4b07      	ldr	r3, [pc, #28]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005142:	4a05      	ldr	r2, [pc, #20]	@ (8005158 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005144:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005148:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	40007000 	.word	0x40007000
 800515c:	20000414 	.word	0x20000414
 8005160:	431bde83 	.word	0x431bde83

08005164 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005168:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4a04      	ldr	r2, [pc, #16]	@ (8005180 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800516e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005172:	6093      	str	r3, [r2, #8]
}
 8005174:	bf00      	nop
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40007000 	.word	0x40007000

08005184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e2fe      	b.n	8005794 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d075      	beq.n	800528e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051a2:	4b97      	ldr	r3, [pc, #604]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 030c 	and.w	r3, r3, #12
 80051aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051ac:	4b94      	ldr	r3, [pc, #592]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0303 	and.w	r3, r3, #3
 80051b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d102      	bne.n	80051c2 <HAL_RCC_OscConfig+0x3e>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d002      	beq.n	80051c8 <HAL_RCC_OscConfig+0x44>
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d10b      	bne.n	80051e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c8:	4b8d      	ldr	r3, [pc, #564]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d05b      	beq.n	800528c <HAL_RCC_OscConfig+0x108>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d157      	bne.n	800528c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e2d9      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e8:	d106      	bne.n	80051f8 <HAL_RCC_OscConfig+0x74>
 80051ea:	4b85      	ldr	r3, [pc, #532]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a84      	ldr	r2, [pc, #528]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80051f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e01d      	b.n	8005234 <HAL_RCC_OscConfig+0xb0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0x98>
 8005202:	4b7f      	ldr	r3, [pc, #508]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a7e      	ldr	r2, [pc, #504]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	4b7c      	ldr	r3, [pc, #496]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a7b      	ldr	r2, [pc, #492]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e00b      	b.n	8005234 <HAL_RCC_OscConfig+0xb0>
 800521c:	4b78      	ldr	r3, [pc, #480]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a77      	ldr	r2, [pc, #476]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	4b75      	ldr	r3, [pc, #468]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a74      	ldr	r2, [pc, #464]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800522e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d013      	beq.n	8005264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7fd fb76 	bl	800292c <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005244:	f7fd fb72 	bl	800292c <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b64      	cmp	r3, #100	@ 0x64
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e29e      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005256:	4b6a      	ldr	r3, [pc, #424]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0xc0>
 8005262:	e014      	b.n	800528e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fd fb62 	bl	800292c <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800526c:	f7fd fb5e 	bl	800292c <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	@ 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e28a      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800527e:	4b60      	ldr	r3, [pc, #384]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0xe8>
 800528a:	e000      	b.n	800528e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800528c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d075      	beq.n	8005386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800529a:	4b59      	ldr	r3, [pc, #356]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052a4:	4b56      	ldr	r3, [pc, #344]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b0c      	cmp	r3, #12
 80052b2:	d102      	bne.n	80052ba <HAL_RCC_OscConfig+0x136>
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d002      	beq.n	80052c0 <HAL_RCC_OscConfig+0x13c>
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d11f      	bne.n	8005300 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_OscConfig+0x154>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e25d      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d8:	4b49      	ldr	r3, [pc, #292]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	061b      	lsls	r3, r3, #24
 80052e6:	4946      	ldr	r1, [pc, #280]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052ec:	4b45      	ldr	r3, [pc, #276]	@ (8005404 <HAL_RCC_OscConfig+0x280>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fd f92b 	bl	800254c <HAL_InitTick>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d043      	beq.n	8005384 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e249      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d023      	beq.n	8005350 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005308:	4b3d      	ldr	r3, [pc, #244]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a3c      	ldr	r2, [pc, #240]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800530e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fd fb0a 	bl	800292c <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800531c:	f7fd fb06 	bl	800292c <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e232      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800532e:	4b34      	ldr	r3, [pc, #208]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533a:	4b31      	ldr	r3, [pc, #196]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	061b      	lsls	r3, r3, #24
 8005348:	492d      	ldr	r1, [pc, #180]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800534a:	4313      	orrs	r3, r2
 800534c:	604b      	str	r3, [r1, #4]
 800534e:	e01a      	b.n	8005386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005350:	4b2b      	ldr	r3, [pc, #172]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2a      	ldr	r2, [pc, #168]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005356:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800535a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535c:	f7fd fae6 	bl	800292c <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005364:	f7fd fae2 	bl	800292c <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e20e      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005376:	4b22      	ldr	r3, [pc, #136]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_OscConfig+0x1e0>
 8005382:	e000      	b.n	8005386 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005384:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d041      	beq.n	8005416 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01c      	beq.n	80053d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800539a:	4b19      	ldr	r3, [pc, #100]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 800539c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053a0:	4a17      	ldr	r2, [pc, #92]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053aa:	f7fd fabf 	bl	800292c <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053b0:	e008      	b.n	80053c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b2:	f7fd fabb 	bl	800292c <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e1e7      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80053c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0ef      	beq.n	80053b2 <HAL_RCC_OscConfig+0x22e>
 80053d2:	e020      	b.n	8005416 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80053d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053da:	4a09      	ldr	r2, [pc, #36]	@ (8005400 <HAL_RCC_OscConfig+0x27c>)
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e4:	f7fd faa2 	bl	800292c <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053ea:	e00d      	b.n	8005408 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ec:	f7fd fa9e 	bl	800292c <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d906      	bls.n	8005408 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e1ca      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
 80053fe:	bf00      	nop
 8005400:	40021000 	.word	0x40021000
 8005404:	20000418 	.word	0x20000418
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005408:	4b8c      	ldr	r3, [pc, #560]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 800540a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1ea      	bne.n	80053ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 80a6 	beq.w	8005570 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005424:	2300      	movs	r3, #0
 8005426:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005428:	4b84      	ldr	r3, [pc, #528]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 800542a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_RCC_OscConfig+0x2b4>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <HAL_RCC_OscConfig+0x2b6>
 8005438:	2300      	movs	r3, #0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00d      	beq.n	800545a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800543e:	4b7f      	ldr	r3, [pc, #508]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005442:	4a7e      	ldr	r2, [pc, #504]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005448:	6593      	str	r3, [r2, #88]	@ 0x58
 800544a:	4b7c      	ldr	r3, [pc, #496]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005456:	2301      	movs	r3, #1
 8005458:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800545a:	4b79      	ldr	r3, [pc, #484]	@ (8005640 <HAL_RCC_OscConfig+0x4bc>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005462:	2b00      	cmp	r3, #0
 8005464:	d118      	bne.n	8005498 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005466:	4b76      	ldr	r3, [pc, #472]	@ (8005640 <HAL_RCC_OscConfig+0x4bc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a75      	ldr	r2, [pc, #468]	@ (8005640 <HAL_RCC_OscConfig+0x4bc>)
 800546c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005472:	f7fd fa5b 	bl	800292c <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800547a:	f7fd fa57 	bl	800292c <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e183      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800548c:	4b6c      	ldr	r3, [pc, #432]	@ (8005640 <HAL_RCC_OscConfig+0x4bc>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f0      	beq.n	800547a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d108      	bne.n	80054b2 <HAL_RCC_OscConfig+0x32e>
 80054a0:	4b66      	ldr	r3, [pc, #408]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a6:	4a65      	ldr	r2, [pc, #404]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054a8:	f043 0301 	orr.w	r3, r3, #1
 80054ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054b0:	e024      	b.n	80054fc <HAL_RCC_OscConfig+0x378>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2b05      	cmp	r3, #5
 80054b8:	d110      	bne.n	80054dc <HAL_RCC_OscConfig+0x358>
 80054ba:	4b60      	ldr	r3, [pc, #384]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c0:	4a5e      	ldr	r2, [pc, #376]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054c2:	f043 0304 	orr.w	r3, r3, #4
 80054c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054ca:	4b5c      	ldr	r3, [pc, #368]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d0:	4a5a      	ldr	r2, [pc, #360]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054da:	e00f      	b.n	80054fc <HAL_RCC_OscConfig+0x378>
 80054dc:	4b57      	ldr	r3, [pc, #348]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e2:	4a56      	ldr	r2, [pc, #344]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054ec:	4b53      	ldr	r3, [pc, #332]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f2:	4a52      	ldr	r2, [pc, #328]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80054f4:	f023 0304 	bic.w	r3, r3, #4
 80054f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d016      	beq.n	8005532 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005504:	f7fd fa12 	bl	800292c <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800550a:	e00a      	b.n	8005522 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800550c:	f7fd fa0e 	bl	800292c <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e138      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005522:	4b46      	ldr	r3, [pc, #280]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0ed      	beq.n	800550c <HAL_RCC_OscConfig+0x388>
 8005530:	e015      	b.n	800555e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005532:	f7fd f9fb 	bl	800292c <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005538:	e00a      	b.n	8005550 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800553a:	f7fd f9f7 	bl	800292c <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005548:	4293      	cmp	r3, r2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e121      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005550:	4b3a      	ldr	r3, [pc, #232]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1ed      	bne.n	800553a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800555e:	7ffb      	ldrb	r3, [r7, #31]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d105      	bne.n	8005570 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005564:	4b35      	ldr	r3, [pc, #212]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005568:	4a34      	ldr	r2, [pc, #208]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 800556a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800556e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d03c      	beq.n	80055f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d01c      	beq.n	80055be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005584:	4b2d      	ldr	r3, [pc, #180]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005586:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800558a:	4a2c      	ldr	r2, [pc, #176]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 800558c:	f043 0301 	orr.w	r3, r3, #1
 8005590:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fd f9ca 	bl	800292c <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800559c:	f7fd f9c6 	bl	800292c <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e0f2      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055ae:	4b23      	ldr	r3, [pc, #140]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80055b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d0ef      	beq.n	800559c <HAL_RCC_OscConfig+0x418>
 80055bc:	e01b      	b.n	80055f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055be:	4b1f      	ldr	r3, [pc, #124]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80055c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055c4:	4a1d      	ldr	r2, [pc, #116]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80055c6:	f023 0301 	bic.w	r3, r3, #1
 80055ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ce:	f7fd f9ad 	bl	800292c <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055d6:	f7fd f9a9 	bl	800292c <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e0d5      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055e8:	4b14      	ldr	r3, [pc, #80]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 80055ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1ef      	bne.n	80055d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80c9 	beq.w	8005792 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005600:	4b0e      	ldr	r3, [pc, #56]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 030c 	and.w	r3, r3, #12
 8005608:	2b0c      	cmp	r3, #12
 800560a:	f000 8083 	beq.w	8005714 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d15e      	bne.n	80056d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005616:	4b09      	ldr	r3, [pc, #36]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a08      	ldr	r2, [pc, #32]	@ (800563c <HAL_RCC_OscConfig+0x4b8>)
 800561c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005622:	f7fd f983 	bl	800292c <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005628:	e00c      	b.n	8005644 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800562a:	f7fd f97f 	bl	800292c <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d905      	bls.n	8005644 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e0ab      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
 800563c:	40021000 	.word	0x40021000
 8005640:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005644:	4b55      	ldr	r3, [pc, #340]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1ec      	bne.n	800562a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005650:	4b52      	ldr	r3, [pc, #328]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	4b52      	ldr	r3, [pc, #328]	@ (80057a0 <HAL_RCC_OscConfig+0x61c>)
 8005656:	4013      	ands	r3, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6a11      	ldr	r1, [r2, #32]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005660:	3a01      	subs	r2, #1
 8005662:	0112      	lsls	r2, r2, #4
 8005664:	4311      	orrs	r1, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800566a:	0212      	lsls	r2, r2, #8
 800566c:	4311      	orrs	r1, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005672:	0852      	lsrs	r2, r2, #1
 8005674:	3a01      	subs	r2, #1
 8005676:	0552      	lsls	r2, r2, #21
 8005678:	4311      	orrs	r1, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800567e:	0852      	lsrs	r2, r2, #1
 8005680:	3a01      	subs	r2, #1
 8005682:	0652      	lsls	r2, r2, #25
 8005684:	4311      	orrs	r1, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800568a:	06d2      	lsls	r2, r2, #27
 800568c:	430a      	orrs	r2, r1
 800568e:	4943      	ldr	r1, [pc, #268]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 8005690:	4313      	orrs	r3, r2
 8005692:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005694:	4b41      	ldr	r3, [pc, #260]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a40      	ldr	r2, [pc, #256]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 800569a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800569e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056a0:	4b3e      	ldr	r3, [pc, #248]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4a3d      	ldr	r2, [pc, #244]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 80056a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fd f93e 	bl	800292c <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b4:	f7fd f93a 	bl	800292c <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e066      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056c6:	4b35      	ldr	r3, [pc, #212]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0x530>
 80056d2:	e05e      	b.n	8005792 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d4:	4b31      	ldr	r3, [pc, #196]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a30      	ldr	r2, [pc, #192]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 80056da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e0:	f7fd f924 	bl	800292c <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e8:	f7fd f920 	bl	800292c <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e04c      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056fa:	4b28      	ldr	r3, [pc, #160]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005706:	4b25      	ldr	r3, [pc, #148]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	4924      	ldr	r1, [pc, #144]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 800570c:	4b25      	ldr	r3, [pc, #148]	@ (80057a4 <HAL_RCC_OscConfig+0x620>)
 800570e:	4013      	ands	r3, r2
 8005710:	60cb      	str	r3, [r1, #12]
 8005712:	e03e      	b.n	8005792 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e039      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005720:	4b1e      	ldr	r3, [pc, #120]	@ (800579c <HAL_RCC_OscConfig+0x618>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f003 0203 	and.w	r2, r3, #3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	429a      	cmp	r2, r3
 8005732:	d12c      	bne.n	800578e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573e:	3b01      	subs	r3, #1
 8005740:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005742:	429a      	cmp	r2, r3
 8005744:	d123      	bne.n	800578e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005752:	429a      	cmp	r2, r3
 8005754:	d11b      	bne.n	800578e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005760:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d113      	bne.n	800578e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	3b01      	subs	r3, #1
 8005774:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005776:	429a      	cmp	r2, r3
 8005778:	d109      	bne.n	800578e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005784:	085b      	lsrs	r3, r3, #1
 8005786:	3b01      	subs	r3, #1
 8005788:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800578a:	429a      	cmp	r2, r3
 800578c:	d001      	beq.n	8005792 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3720      	adds	r7, #32
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40021000 	.word	0x40021000
 80057a0:	019f800c 	.word	0x019f800c
 80057a4:	feeefffc 	.word	0xfeeefffc

080057a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e11e      	b.n	80059fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057c0:	4b91      	ldr	r3, [pc, #580]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 030f 	and.w	r3, r3, #15
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d910      	bls.n	80057f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ce:	4b8e      	ldr	r3, [pc, #568]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f023 020f 	bic.w	r2, r3, #15
 80057d6:	498c      	ldr	r1, [pc, #560]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	4313      	orrs	r3, r2
 80057dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057de:	4b8a      	ldr	r3, [pc, #552]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d001      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e106      	b.n	80059fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d073      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d129      	bne.n	8005858 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005804:	4b81      	ldr	r3, [pc, #516]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0f4      	b.n	80059fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005814:	f000 f9d0 	bl	8005bb8 <RCC_GetSysClockFreqFromPLLSource>
 8005818:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4a7c      	ldr	r2, [pc, #496]	@ (8005a10 <HAL_RCC_ClockConfig+0x268>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d93f      	bls.n	80058a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005822:	4b7a      	ldr	r3, [pc, #488]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005836:	2b00      	cmp	r3, #0
 8005838:	d033      	beq.n	80058a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800583e:	2b00      	cmp	r3, #0
 8005840:	d12f      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005842:	4b72      	ldr	r3, [pc, #456]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800584a:	4a70      	ldr	r2, [pc, #448]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 800584c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005850:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005852:	2380      	movs	r3, #128	@ 0x80
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e024      	b.n	80058a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b02      	cmp	r3, #2
 800585e:	d107      	bne.n	8005870 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005860:	4b6a      	ldr	r3, [pc, #424]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0c6      	b.n	80059fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005870:	4b66      	ldr	r3, [pc, #408]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e0be      	b.n	80059fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005880:	f000 f8ce 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 8005884:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4a61      	ldr	r2, [pc, #388]	@ (8005a10 <HAL_RCC_ClockConfig+0x268>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d909      	bls.n	80058a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800588e:	4b5f      	ldr	r3, [pc, #380]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005896:	4a5d      	ldr	r2, [pc, #372]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800589c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800589e:	2380      	movs	r3, #128	@ 0x80
 80058a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058a2:	4b5a      	ldr	r3, [pc, #360]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f023 0203 	bic.w	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4957      	ldr	r1, [pc, #348]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b4:	f7fd f83a 	bl	800292c <HAL_GetTick>
 80058b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ba:	e00a      	b.n	80058d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058bc:	f7fd f836 	bl	800292c <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e095      	b.n	80059fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d2:	4b4e      	ldr	r3, [pc, #312]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 020c 	and.w	r2, r3, #12
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d1eb      	bne.n	80058bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d023      	beq.n	8005938 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058fc:	4b43      	ldr	r3, [pc, #268]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	4a42      	ldr	r2, [pc, #264]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005902:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005906:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b00      	cmp	r3, #0
 8005912:	d007      	beq.n	8005924 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005914:	4b3d      	ldr	r3, [pc, #244]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800591c:	4a3b      	ldr	r2, [pc, #236]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 800591e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005922:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005924:	4b39      	ldr	r3, [pc, #228]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	4936      	ldr	r1, [pc, #216]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
 8005936:	e008      	b.n	800594a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b80      	cmp	r3, #128	@ 0x80
 800593c:	d105      	bne.n	800594a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800593e:	4b33      	ldr	r3, [pc, #204]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	4a32      	ldr	r2, [pc, #200]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 8005944:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005948:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800594a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d21d      	bcs.n	8005994 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005958:	4b2b      	ldr	r3, [pc, #172]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f023 020f 	bic.w	r2, r3, #15
 8005960:	4929      	ldr	r1, [pc, #164]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	4313      	orrs	r3, r2
 8005966:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005968:	f7fc ffe0 	bl	800292c <HAL_GetTick>
 800596c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800596e:	e00a      	b.n	8005986 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005970:	f7fc ffdc 	bl	800292c <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800597e:	4293      	cmp	r3, r2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e03b      	b.n	80059fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005986:	4b20      	ldr	r3, [pc, #128]	@ (8005a08 <HAL_RCC_ClockConfig+0x260>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d1ed      	bne.n	8005970 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059a0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	4917      	ldr	r1, [pc, #92]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059be:	4b13      	ldr	r3, [pc, #76]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	490f      	ldr	r1, [pc, #60]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059d2:	f000 f825 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 80059d6:	4602      	mov	r2, r0
 80059d8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a0c <HAL_RCC_ClockConfig+0x264>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	091b      	lsrs	r3, r3, #4
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	490c      	ldr	r1, [pc, #48]	@ (8005a14 <HAL_RCC_ClockConfig+0x26c>)
 80059e4:	5ccb      	ldrb	r3, [r1, r3]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	fa22 f303 	lsr.w	r3, r2, r3
 80059ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005a18 <HAL_RCC_ClockConfig+0x270>)
 80059f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059f2:	4b0a      	ldr	r3, [pc, #40]	@ (8005a1c <HAL_RCC_ClockConfig+0x274>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fc fda8 	bl	800254c <HAL_InitTick>
 80059fc:	4603      	mov	r3, r0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	40022000 	.word	0x40022000
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	04c4b400 	.word	0x04c4b400
 8005a14:	08010a98 	.word	0x08010a98
 8005a18:	20000414 	.word	0x20000414
 8005a1c:	20000418 	.word	0x20000418

08005a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a26:	4b2c      	ldr	r3, [pc, #176]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d102      	bne.n	8005a38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a32:	4b2a      	ldr	r3, [pc, #168]	@ (8005adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	e047      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a38:	4b27      	ldr	r3, [pc, #156]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 030c 	and.w	r3, r3, #12
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d102      	bne.n	8005a4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a44:	4b26      	ldr	r3, [pc, #152]	@ (8005ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a46:	613b      	str	r3, [r7, #16]
 8005a48:	e03e      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a4a:	4b23      	ldr	r3, [pc, #140]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
 8005a52:	2b0c      	cmp	r3, #12
 8005a54:	d136      	bne.n	8005ac4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a56:	4b20      	ldr	r3, [pc, #128]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a60:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d10c      	bne.n	8005a8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a74:	4a1a      	ldr	r2, [pc, #104]	@ (8005ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7c:	4a16      	ldr	r2, [pc, #88]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a7e:	68d2      	ldr	r2, [r2, #12]
 8005a80:	0a12      	lsrs	r2, r2, #8
 8005a82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	617b      	str	r3, [r7, #20]
      break;
 8005a8c:	e00c      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a8e:	4a13      	ldr	r2, [pc, #76]	@ (8005adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a96:	4a10      	ldr	r2, [pc, #64]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a98:	68d2      	ldr	r2, [r2, #12]
 8005a9a:	0a12      	lsrs	r2, r2, #8
 8005a9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005aa0:	fb02 f303 	mul.w	r3, r2, r3
 8005aa4:	617b      	str	r3, [r7, #20]
      break;
 8005aa6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	0e5b      	lsrs	r3, r3, #25
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	e001      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ac8:	693b      	ldr	r3, [r7, #16]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	00f42400 	.word	0x00f42400
 8005ae0:	007a1200 	.word	0x007a1200

08005ae4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae8:	4b03      	ldr	r3, [pc, #12]	@ (8005af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aea:	681b      	ldr	r3, [r3, #0]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	20000414 	.word	0x20000414

08005afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b00:	f7ff fff0 	bl	8005ae4 <HAL_RCC_GetHCLKFreq>
 8005b04:	4602      	mov	r2, r0
 8005b06:	4b06      	ldr	r3, [pc, #24]	@ (8005b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	0a1b      	lsrs	r3, r3, #8
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	4904      	ldr	r1, [pc, #16]	@ (8005b24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b12:	5ccb      	ldrb	r3, [r1, r3]
 8005b14:	f003 031f 	and.w	r3, r3, #31
 8005b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40021000 	.word	0x40021000
 8005b24:	08010aa8 	.word	0x08010aa8

08005b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b2c:	f7ff ffda 	bl	8005ae4 <HAL_RCC_GetHCLKFreq>
 8005b30:	4602      	mov	r2, r0
 8005b32:	4b06      	ldr	r3, [pc, #24]	@ (8005b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	0adb      	lsrs	r3, r3, #11
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	4904      	ldr	r1, [pc, #16]	@ (8005b50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b3e:	5ccb      	ldrb	r3, [r1, r3]
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	08010aa8 	.word	0x08010aa8

08005b54 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	220f      	movs	r2, #15
 8005b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b64:	4b12      	ldr	r3, [pc, #72]	@ (8005bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 0203 	and.w	r2, r3, #3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b70:	4b0f      	ldr	r3, [pc, #60]	@ (8005bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005b88:	4b09      	ldr	r3, [pc, #36]	@ (8005bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	08db      	lsrs	r3, r3, #3
 8005b8e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005b96:	4b07      	ldr	r3, [pc, #28]	@ (8005bb4 <HAL_RCC_GetClockConfig+0x60>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 020f 	and.w	r2, r3, #15
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	601a      	str	r2, [r3, #0]
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	40022000 	.word	0x40022000

08005bb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d10c      	bne.n	8005bf6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bdc:	4a17      	ldr	r2, [pc, #92]	@ (8005c3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be4:	4a14      	ldr	r2, [pc, #80]	@ (8005c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005be6:	68d2      	ldr	r2, [r2, #12]
 8005be8:	0a12      	lsrs	r2, r2, #8
 8005bea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	617b      	str	r3, [r7, #20]
    break;
 8005bf4:	e00c      	b.n	8005c10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bf6:	4a12      	ldr	r2, [pc, #72]	@ (8005c40 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8005c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c00:	68d2      	ldr	r2, [r2, #12]
 8005c02:	0a12      	lsrs	r2, r2, #8
 8005c04:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c08:	fb02 f303 	mul.w	r3, r2, r3
 8005c0c:	617b      	str	r3, [r7, #20]
    break;
 8005c0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c10:	4b09      	ldr	r3, [pc, #36]	@ (8005c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	0e5b      	lsrs	r3, r3, #25
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c2a:	687b      	ldr	r3, [r7, #4]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	371c      	adds	r7, #28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	007a1200 	.word	0x007a1200
 8005c40:	00f42400 	.word	0x00f42400

08005c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c50:	2300      	movs	r3, #0
 8005c52:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 8098 	beq.w	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c62:	2300      	movs	r3, #0
 8005c64:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c66:	4b43      	ldr	r3, [pc, #268]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10d      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c72:	4b40      	ldr	r3, [pc, #256]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c76:	4a3f      	ldr	r2, [pc, #252]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c86:	60bb      	str	r3, [r7, #8]
 8005c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c8e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a39      	ldr	r2, [pc, #228]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c9a:	f7fc fe47 	bl	800292c <HAL_GetTick>
 8005c9e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ca0:	e009      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ca2:	f7fc fe43 	bl	800292c <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d902      	bls.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	74fb      	strb	r3, [r7, #19]
        break;
 8005cb4:	e005      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cb6:	4b30      	ldr	r3, [pc, #192]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0ef      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005cc2:	7cfb      	ldrb	r3, [r7, #19]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d159      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cd2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d01e      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d019      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ce4:	4b23      	ldr	r3, [pc, #140]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cf0:	4b20      	ldr	r3, [pc, #128]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d00:	4b1c      	ldr	r3, [pc, #112]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d06:	4a1b      	ldr	r2, [pc, #108]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d10:	4a18      	ldr	r2, [pc, #96]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d016      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d22:	f7fc fe03 	bl	800292c <HAL_GetTick>
 8005d26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d28:	e00b      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d2a:	f7fc fdff 	bl	800292c <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d902      	bls.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	74fb      	strb	r3, [r7, #19]
            break;
 8005d40:	e006      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d42:	4b0c      	ldr	r3, [pc, #48]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0ec      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005d50:	7cfb      	ldrb	r3, [r7, #19]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10b      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d56:	4b07      	ldr	r3, [pc, #28]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	4903      	ldr	r1, [pc, #12]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005d6c:	e008      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d6e:	7cfb      	ldrb	r3, [r7, #19]
 8005d70:	74bb      	strb	r3, [r7, #18]
 8005d72:	e005      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d74:	40021000 	.word	0x40021000
 8005d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7c:	7cfb      	ldrb	r3, [r7, #19]
 8005d7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d80:	7c7b      	ldrb	r3, [r7, #17]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d105      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d86:	4ba6      	ldr	r3, [pc, #664]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d8a:	4aa5      	ldr	r2, [pc, #660]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d90:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d9e:	4ba0      	ldr	r3, [pc, #640]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da4:	f023 0203 	bic.w	r2, r3, #3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	499c      	ldr	r1, [pc, #624]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00a      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005dc0:	4b97      	ldr	r3, [pc, #604]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc6:	f023 020c 	bic.w	r2, r3, #12
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	4994      	ldr	r1, [pc, #592]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005de2:	4b8f      	ldr	r3, [pc, #572]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	498b      	ldr	r1, [pc, #556]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e04:	4b86      	ldr	r3, [pc, #536]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	4983      	ldr	r1, [pc, #524]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e26:	4b7e      	ldr	r3, [pc, #504]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	497a      	ldr	r1, [pc, #488]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e48:	4b75      	ldr	r3, [pc, #468]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e4e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	4972      	ldr	r1, [pc, #456]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e70:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	4969      	ldr	r1, [pc, #420]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e8c:	4b64      	ldr	r3, [pc, #400]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e92:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	4961      	ldr	r1, [pc, #388]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eae:	4b5c      	ldr	r3, [pc, #368]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebc:	4958      	ldr	r1, [pc, #352]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d015      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ed0:	4b53      	ldr	r3, [pc, #332]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ede:	4950      	ldr	r1, [pc, #320]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eee:	d105      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	4a4a      	ldr	r2, [pc, #296]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005efa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d015      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f08:	4b45      	ldr	r3, [pc, #276]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f16:	4942      	ldr	r1, [pc, #264]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f26:	d105      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f28:	4b3d      	ldr	r3, [pc, #244]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	4a3c      	ldr	r2, [pc, #240]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f32:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d015      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f40:	4b37      	ldr	r3, [pc, #220]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f46:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4e:	4934      	ldr	r1, [pc, #208]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f5e:	d105      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f60:	4b2f      	ldr	r3, [pc, #188]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4a2e      	ldr	r2, [pc, #184]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f6a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d015      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f78:	4b29      	ldr	r3, [pc, #164]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f86:	4926      	ldr	r1, [pc, #152]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f96:	d105      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f98:	4b21      	ldr	r3, [pc, #132]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	4a20      	ldr	r2, [pc, #128]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fa2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d015      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fbe:	4918      	ldr	r1, [pc, #96]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fce:	d105      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fd0:	4b13      	ldr	r3, [pc, #76]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	4a12      	ldr	r2, [pc, #72]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d015      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff6:	490a      	ldr	r1, [pc, #40]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006002:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006006:	d105      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006008:	4b05      	ldr	r3, [pc, #20]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	4a04      	ldr	r2, [pc, #16]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800600e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006012:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006014:	7cbb      	ldrb	r3, [r7, #18]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000

08006024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e049      	b.n	80060ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fc fa32 	bl	80024b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3304      	adds	r3, #4
 8006060:	4619      	mov	r1, r3
 8006062:	4610      	mov	r0, r2
 8006064:	f000 fb9c 	bl	80067a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d001      	beq.n	80060ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e042      	b.n	8006172 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a21      	ldr	r2, [pc, #132]	@ (8006180 <HAL_TIM_Base_Start+0xac>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d018      	beq.n	8006130 <HAL_TIM_Base_Start+0x5c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006106:	d013      	beq.n	8006130 <HAL_TIM_Base_Start+0x5c>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1d      	ldr	r2, [pc, #116]	@ (8006184 <HAL_TIM_Base_Start+0xb0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00e      	beq.n	8006130 <HAL_TIM_Base_Start+0x5c>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1c      	ldr	r2, [pc, #112]	@ (8006188 <HAL_TIM_Base_Start+0xb4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d009      	beq.n	8006130 <HAL_TIM_Base_Start+0x5c>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1a      	ldr	r2, [pc, #104]	@ (800618c <HAL_TIM_Base_Start+0xb8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d004      	beq.n	8006130 <HAL_TIM_Base_Start+0x5c>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a19      	ldr	r2, [pc, #100]	@ (8006190 <HAL_TIM_Base_Start+0xbc>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d115      	bne.n	800615c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	4b17      	ldr	r3, [pc, #92]	@ (8006194 <HAL_TIM_Base_Start+0xc0>)
 8006138:	4013      	ands	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b06      	cmp	r3, #6
 8006140:	d015      	beq.n	800616e <HAL_TIM_Base_Start+0x9a>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006148:	d011      	beq.n	800616e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0201 	orr.w	r2, r2, #1
 8006158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615a:	e008      	b.n	800616e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	e000      	b.n	8006170 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40012c00 	.word	0x40012c00
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800
 800618c:	40013400 	.word	0x40013400
 8006190:	40014000 	.word	0x40014000
 8006194:	00010007 	.word	0x00010007

08006198 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6a1a      	ldr	r2, [r3, #32]
 80061a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10f      	bne.n	80061d0 <HAL_TIM_Base_Stop+0x38>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6a1a      	ldr	r2, [r3, #32]
 80061b6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d107      	bne.n	80061d0 <HAL_TIM_Base_Stop+0x38>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0201 	bic.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d001      	beq.n	8006200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e04a      	b.n	8006296 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0201 	orr.w	r2, r2, #1
 8006216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a21      	ldr	r2, [pc, #132]	@ (80062a4 <HAL_TIM_Base_Start_IT+0xbc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d018      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x6c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800622a:	d013      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x6c>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1d      	ldr	r2, [pc, #116]	@ (80062a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00e      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x6c>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1c      	ldr	r2, [pc, #112]	@ (80062ac <HAL_TIM_Base_Start_IT+0xc4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d009      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x6c>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a1a      	ldr	r2, [pc, #104]	@ (80062b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d004      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x6c>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a19      	ldr	r2, [pc, #100]	@ (80062b4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d115      	bne.n	8006280 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	4b17      	ldr	r3, [pc, #92]	@ (80062b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800625c:	4013      	ands	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b06      	cmp	r3, #6
 8006264:	d015      	beq.n	8006292 <HAL_TIM_Base_Start_IT+0xaa>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800626c:	d011      	beq.n	8006292 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0201 	orr.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800627e:	e008      	b.n	8006292 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0201 	orr.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	e000      	b.n	8006294 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006292:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40012c00 	.word	0x40012c00
 80062a8:	40000400 	.word	0x40000400
 80062ac:	40000800 	.word	0x40000800
 80062b0:	40013400 	.word	0x40013400
 80062b4:	40014000 	.word	0x40014000
 80062b8:	00010007 	.word	0x00010007

080062bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d020      	beq.n	8006320 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01b      	beq.n	8006320 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f06f 0202 	mvn.w	r2, #2
 80062f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa2c 	bl	8006764 <HAL_TIM_IC_CaptureCallback>
 800630c:	e005      	b.n	800631a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fa1e 	bl	8006750 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fa2f 	bl	8006778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	d020      	beq.n	800636c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01b      	beq.n	800636c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0204 	mvn.w	r2, #4
 800633c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2202      	movs	r2, #2
 8006342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fa06 	bl	8006764 <HAL_TIM_IC_CaptureCallback>
 8006358:	e005      	b.n	8006366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f9f8 	bl	8006750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fa09 	bl	8006778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f003 0308 	and.w	r3, r3, #8
 8006372:	2b00      	cmp	r3, #0
 8006374:	d020      	beq.n	80063b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01b      	beq.n	80063b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0208 	mvn.w	r2, #8
 8006388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2204      	movs	r2, #4
 800638e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f9e0 	bl	8006764 <HAL_TIM_IC_CaptureCallback>
 80063a4:	e005      	b.n	80063b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f9d2 	bl	8006750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f9e3 	bl	8006778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 0310 	and.w	r3, r3, #16
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d020      	beq.n	8006404 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01b      	beq.n	8006404 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0210 	mvn.w	r2, #16
 80063d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2208      	movs	r2, #8
 80063da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f9ba 	bl	8006764 <HAL_TIM_IC_CaptureCallback>
 80063f0:	e005      	b.n	80063fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9ac 	bl	8006750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f9bd 	bl	8006778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00c      	beq.n	8006428 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0201 	mvn.w	r2, #1
 8006420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fb fe7a 	bl	800211c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800642e:	2b00      	cmp	r3, #0
 8006430:	d104      	bne.n	800643c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00c      	beq.n	8006456 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006442:	2b00      	cmp	r3, #0
 8006444:	d007      	beq.n	8006456 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800644e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fb69 	bl	8006b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00c      	beq.n	800647a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fb61 	bl	8006b3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00c      	beq.n	800649e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f977 	bl	800678c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00c      	beq.n	80064c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f06f 0220 	mvn.w	r2, #32
 80064ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fb29 	bl	8006b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00c      	beq.n	80064e6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80064de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fb35 	bl	8006b50 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00c      	beq.n	800650a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d007      	beq.n	800650a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fb2d 	bl	8006b64 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00c      	beq.n	800652e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fb25 	bl	8006b78 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00c      	beq.n	8006552 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800654a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fb1d 	bl	8006b8c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006552:	bf00      	nop
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_TIM_ConfigClockSource+0x1c>
 8006574:	2302      	movs	r3, #2
 8006576:	e0de      	b.n	8006736 <HAL_TIM_ConfigClockSource+0x1da>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006596:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800659a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a63      	ldr	r2, [pc, #396]	@ (8006740 <HAL_TIM_ConfigClockSource+0x1e4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	f000 80a9 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x1ae>
 80065b8:	4a61      	ldr	r2, [pc, #388]	@ (8006740 <HAL_TIM_ConfigClockSource+0x1e4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	f200 80ae 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1c0>
 80065c0:	4a60      	ldr	r2, [pc, #384]	@ (8006744 <HAL_TIM_ConfigClockSource+0x1e8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	f000 80a1 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x1ae>
 80065c8:	4a5e      	ldr	r2, [pc, #376]	@ (8006744 <HAL_TIM_ConfigClockSource+0x1e8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	f200 80a6 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1c0>
 80065d0:	4a5d      	ldr	r2, [pc, #372]	@ (8006748 <HAL_TIM_ConfigClockSource+0x1ec>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	f000 8099 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x1ae>
 80065d8:	4a5b      	ldr	r2, [pc, #364]	@ (8006748 <HAL_TIM_ConfigClockSource+0x1ec>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	f200 809e 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1c0>
 80065e0:	4a5a      	ldr	r2, [pc, #360]	@ (800674c <HAL_TIM_ConfigClockSource+0x1f0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	f000 8091 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x1ae>
 80065e8:	4a58      	ldr	r2, [pc, #352]	@ (800674c <HAL_TIM_ConfigClockSource+0x1f0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	f200 8096 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1c0>
 80065f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80065f4:	f000 8089 	beq.w	800670a <HAL_TIM_ConfigClockSource+0x1ae>
 80065f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80065fc:	f200 808e 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1c0>
 8006600:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006604:	d03e      	beq.n	8006684 <HAL_TIM_ConfigClockSource+0x128>
 8006606:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800660a:	f200 8087 	bhi.w	800671c <HAL_TIM_ConfigClockSource+0x1c0>
 800660e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006612:	f000 8086 	beq.w	8006722 <HAL_TIM_ConfigClockSource+0x1c6>
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800661a:	d87f      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x1c0>
 800661c:	2b70      	cmp	r3, #112	@ 0x70
 800661e:	d01a      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0xfa>
 8006620:	2b70      	cmp	r3, #112	@ 0x70
 8006622:	d87b      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x1c0>
 8006624:	2b60      	cmp	r3, #96	@ 0x60
 8006626:	d050      	beq.n	80066ca <HAL_TIM_ConfigClockSource+0x16e>
 8006628:	2b60      	cmp	r3, #96	@ 0x60
 800662a:	d877      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x1c0>
 800662c:	2b50      	cmp	r3, #80	@ 0x50
 800662e:	d03c      	beq.n	80066aa <HAL_TIM_ConfigClockSource+0x14e>
 8006630:	2b50      	cmp	r3, #80	@ 0x50
 8006632:	d873      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x1c0>
 8006634:	2b40      	cmp	r3, #64	@ 0x40
 8006636:	d058      	beq.n	80066ea <HAL_TIM_ConfigClockSource+0x18e>
 8006638:	2b40      	cmp	r3, #64	@ 0x40
 800663a:	d86f      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x1c0>
 800663c:	2b30      	cmp	r3, #48	@ 0x30
 800663e:	d064      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x1ae>
 8006640:	2b30      	cmp	r3, #48	@ 0x30
 8006642:	d86b      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x1c0>
 8006644:	2b20      	cmp	r3, #32
 8006646:	d060      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x1ae>
 8006648:	2b20      	cmp	r3, #32
 800664a:	d867      	bhi.n	800671c <HAL_TIM_ConfigClockSource+0x1c0>
 800664c:	2b00      	cmp	r3, #0
 800664e:	d05c      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x1ae>
 8006650:	2b10      	cmp	r3, #16
 8006652:	d05a      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x1ae>
 8006654:	e062      	b.n	800671c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006666:	f000 f9b3 	bl	80069d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006678:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	609a      	str	r2, [r3, #8]
      break;
 8006682:	e04f      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006694:	f000 f99c 	bl	80069d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066a6:	609a      	str	r2, [r3, #8]
      break;
 80066a8:	e03c      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b6:	461a      	mov	r2, r3
 80066b8:	f000 f90e 	bl	80068d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2150      	movs	r1, #80	@ 0x50
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 f967 	bl	8006996 <TIM_ITRx_SetConfig>
      break;
 80066c8:	e02c      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066d6:	461a      	mov	r2, r3
 80066d8:	f000 f92d 	bl	8006936 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2160      	movs	r1, #96	@ 0x60
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 f957 	bl	8006996 <TIM_ITRx_SetConfig>
      break;
 80066e8:	e01c      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f6:	461a      	mov	r2, r3
 80066f8:	f000 f8ee 	bl	80068d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2140      	movs	r1, #64	@ 0x40
 8006702:	4618      	mov	r0, r3
 8006704:	f000 f947 	bl	8006996 <TIM_ITRx_SetConfig>
      break;
 8006708:	e00c      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4619      	mov	r1, r3
 8006714:	4610      	mov	r0, r2
 8006716:	f000 f93e 	bl	8006996 <TIM_ITRx_SetConfig>
      break;
 800671a:	e003      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	73fb      	strb	r3, [r7, #15]
      break;
 8006720:	e000      	b.n	8006724 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006722:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	00100070 	.word	0x00100070
 8006744:	00100040 	.word	0x00100040
 8006748:	00100030 	.word	0x00100030
 800674c:	00100020 	.word	0x00100020

08006750 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a42      	ldr	r2, [pc, #264]	@ (80068bc <TIM_Base_SetConfig+0x11c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00f      	beq.n	80067d8 <TIM_Base_SetConfig+0x38>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067be:	d00b      	beq.n	80067d8 <TIM_Base_SetConfig+0x38>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a3f      	ldr	r2, [pc, #252]	@ (80068c0 <TIM_Base_SetConfig+0x120>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d007      	beq.n	80067d8 <TIM_Base_SetConfig+0x38>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a3e      	ldr	r2, [pc, #248]	@ (80068c4 <TIM_Base_SetConfig+0x124>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d003      	beq.n	80067d8 <TIM_Base_SetConfig+0x38>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a3d      	ldr	r2, [pc, #244]	@ (80068c8 <TIM_Base_SetConfig+0x128>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d108      	bne.n	80067ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a33      	ldr	r2, [pc, #204]	@ (80068bc <TIM_Base_SetConfig+0x11c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d01b      	beq.n	800682a <TIM_Base_SetConfig+0x8a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067f8:	d017      	beq.n	800682a <TIM_Base_SetConfig+0x8a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a30      	ldr	r2, [pc, #192]	@ (80068c0 <TIM_Base_SetConfig+0x120>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d013      	beq.n	800682a <TIM_Base_SetConfig+0x8a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a2f      	ldr	r2, [pc, #188]	@ (80068c4 <TIM_Base_SetConfig+0x124>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00f      	beq.n	800682a <TIM_Base_SetConfig+0x8a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2e      	ldr	r2, [pc, #184]	@ (80068c8 <TIM_Base_SetConfig+0x128>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00b      	beq.n	800682a <TIM_Base_SetConfig+0x8a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a2d      	ldr	r2, [pc, #180]	@ (80068cc <TIM_Base_SetConfig+0x12c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d007      	beq.n	800682a <TIM_Base_SetConfig+0x8a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2c      	ldr	r2, [pc, #176]	@ (80068d0 <TIM_Base_SetConfig+0x130>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d003      	beq.n	800682a <TIM_Base_SetConfig+0x8a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2b      	ldr	r2, [pc, #172]	@ (80068d4 <TIM_Base_SetConfig+0x134>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d108      	bne.n	800683c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4313      	orrs	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a16      	ldr	r2, [pc, #88]	@ (80068bc <TIM_Base_SetConfig+0x11c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00f      	beq.n	8006888 <TIM_Base_SetConfig+0xe8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a17      	ldr	r2, [pc, #92]	@ (80068c8 <TIM_Base_SetConfig+0x128>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00b      	beq.n	8006888 <TIM_Base_SetConfig+0xe8>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a16      	ldr	r2, [pc, #88]	@ (80068cc <TIM_Base_SetConfig+0x12c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_Base_SetConfig+0xe8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a15      	ldr	r2, [pc, #84]	@ (80068d0 <TIM_Base_SetConfig+0x130>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_Base_SetConfig+0xe8>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a14      	ldr	r2, [pc, #80]	@ (80068d4 <TIM_Base_SetConfig+0x134>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d103      	bne.n	8006890 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d105      	bne.n	80068ae <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f023 0201 	bic.w	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	611a      	str	r2, [r3, #16]
  }
}
 80068ae:	bf00      	nop
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40012c00 	.word	0x40012c00
 80068c0:	40000400 	.word	0x40000400
 80068c4:	40000800 	.word	0x40000800
 80068c8:	40013400 	.word	0x40013400
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40014400 	.word	0x40014400
 80068d4:	40014800 	.word	0x40014800

080068d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	f023 0201 	bic.w	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4313      	orrs	r3, r2
 800690c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f023 030a 	bic.w	r3, r3, #10
 8006914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	621a      	str	r2, [r3, #32]
}
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006936:	b480      	push	{r7}
 8006938:	b087      	sub	sp, #28
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	f023 0210 	bic.w	r2, r3, #16
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006960:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	031b      	lsls	r3, r3, #12
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006972:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006996:	b480      	push	{r7}
 8006998:	b085      	sub	sp, #20
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80069ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f043 0307 	orr.w	r3, r3, #7
 80069bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	609a      	str	r2, [r3, #8]
}
 80069c4:	bf00      	nop
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	021a      	lsls	r2, r3, #8
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	609a      	str	r2, [r3, #8]
}
 8006a04:	bf00      	nop
 8006a06:	371c      	adds	r7, #28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e065      	b.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d004      	beq.n	8006a5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a2b      	ldr	r2, [pc, #172]	@ (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d108      	bne.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1b      	ldr	r2, [pc, #108]	@ (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d018      	beq.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9e:	d013      	beq.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a18      	ldr	r2, [pc, #96]	@ (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d00e      	beq.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a17      	ldr	r2, [pc, #92]	@ (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d009      	beq.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a12      	ldr	r2, [pc, #72]	@ (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d004      	beq.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a13      	ldr	r2, [pc, #76]	@ (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d10c      	bne.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ace:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	40012c00 	.word	0x40012c00
 8006b04:	40013400 	.word	0x40013400
 8006b08:	40000400 	.word	0x40000400
 8006b0c:	40000800 	.word	0x40000800
 8006b10:	40014000 	.word	0x40014000

08006b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e042      	b.n	8006c38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d106      	bne.n	8006bca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7fb fbe9 	bl	800239c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2224      	movs	r2, #36	@ 0x24
 8006bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0201 	bic.w	r2, r2, #1
 8006be0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 ff04 	bl	80079f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fc35 	bl	8007460 <UART_SetConfig>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d101      	bne.n	8006c00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e01b      	b.n	8006c38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0201 	orr.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 ff83 	bl	8007b3c <UART_CheckIdleState>
 8006c36:	4603      	mov	r3, r0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	@ 0x28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d137      	bne.n	8006cc8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_UART_Receive_IT+0x24>
 8006c5e:	88fb      	ldrh	r3, [r7, #6]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e030      	b.n	8006cca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a18      	ldr	r2, [pc, #96]	@ (8006cd4 <HAL_UART_Receive_IT+0x94>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d01f      	beq.n	8006cb8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d018      	beq.n	8006cb8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	613b      	str	r3, [r7, #16]
   return(result);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca4:	623b      	str	r3, [r7, #32]
 8006ca6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	69f9      	ldr	r1, [r7, #28]
 8006caa:	6a3a      	ldr	r2, [r7, #32]
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e6      	bne.n	8006c86 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006cb8:	88fb      	ldrh	r3, [r7, #6]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f001 f854 	bl	8007d6c <UART_Start_Receive_IT>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	e000      	b.n	8006cca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cc8:	2302      	movs	r3, #2
  }
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3728      	adds	r7, #40	@ 0x28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40008000 	.word	0x40008000

08006cd8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	@ 0x28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d167      	bne.n	8006dc0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <HAL_UART_Transmit_DMA+0x24>
 8006cf6:	88fb      	ldrh	r3, [r7, #6]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e060      	b.n	8006dc2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	88fa      	ldrh	r2, [r7, #6]
 8006d0a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	88fa      	ldrh	r2, [r7, #6]
 8006d12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2221      	movs	r2, #33	@ 0x21
 8006d22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d028      	beq.n	8006d80 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d32:	4a26      	ldr	r2, [pc, #152]	@ (8006dcc <HAL_UART_Transmit_DMA+0xf4>)
 8006d34:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d3a:	4a25      	ldr	r2, [pc, #148]	@ (8006dd0 <HAL_UART_Transmit_DMA+0xf8>)
 8006d3c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d42:	4a24      	ldr	r2, [pc, #144]	@ (8006dd4 <HAL_UART_Transmit_DMA+0xfc>)
 8006d44:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d56:	4619      	mov	r1, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3328      	adds	r3, #40	@ 0x28
 8006d5e:	461a      	mov	r2, r3
 8006d60:	88fb      	ldrh	r3, [r7, #6]
 8006d62:	f7fd fd4f 	bl	8004804 <HAL_DMA_Start_IT>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d009      	beq.n	8006d80 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2210      	movs	r2, #16
 8006d70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e020      	b.n	8006dc2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2240      	movs	r2, #64	@ 0x40
 8006d86:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	613b      	str	r3, [r7, #16]
   return(result);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3308      	adds	r3, #8
 8006da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006da8:	623a      	str	r2, [r7, #32]
 8006daa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	69f9      	ldr	r1, [r7, #28]
 8006dae:	6a3a      	ldr	r2, [r7, #32]
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e5      	bne.n	8006d88 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e000      	b.n	8006dc2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006dc0:	2302      	movs	r3, #2
  }
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3728      	adds	r7, #40	@ 0x28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	080080ff 	.word	0x080080ff
 8006dd0:	08008199 	.word	0x08008199
 8006dd4:	080081b5 	.word	0x080081b5

08006dd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b0ba      	sub	sp, #232	@ 0xe8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006dfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006e02:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006e06:	4013      	ands	r3, r2
 8006e08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d11b      	bne.n	8006e4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e18:	f003 0320 	and.w	r3, r3, #32
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d015      	beq.n	8006e4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d105      	bne.n	8006e38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d009      	beq.n	8006e4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 82e3 	beq.w	8007408 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
      }
      return;
 8006e4a:	e2dd      	b.n	8007408 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 8123 	beq.w	800709c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006e56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006e5a:	4b8d      	ldr	r3, [pc, #564]	@ (8007090 <HAL_UART_IRQHandler+0x2b8>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006e62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006e66:	4b8b      	ldr	r3, [pc, #556]	@ (8007094 <HAL_UART_IRQHandler+0x2bc>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 8116 	beq.w	800709c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d011      	beq.n	8006ea0 <HAL_UART_IRQHandler+0xc8>
 8006e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e96:	f043 0201 	orr.w	r2, r3, #1
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d011      	beq.n	8006ed0 <HAL_UART_IRQHandler+0xf8>
 8006eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00b      	beq.n	8006ed0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ec6:	f043 0204 	orr.w	r2, r3, #4
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d011      	beq.n	8006f00 <HAL_UART_IRQHandler+0x128>
 8006edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2204      	movs	r2, #4
 8006eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ef6:	f043 0202 	orr.w	r2, r3, #2
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d017      	beq.n	8006f3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f10:	f003 0320 	and.w	r3, r3, #32
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d105      	bne.n	8006f24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006f1c:	4b5c      	ldr	r3, [pc, #368]	@ (8007090 <HAL_UART_IRQHandler+0x2b8>)
 8006f1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2208      	movs	r2, #8
 8006f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f32:	f043 0208 	orr.w	r2, r3, #8
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d012      	beq.n	8006f6e <HAL_UART_IRQHandler+0x196>
 8006f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00c      	beq.n	8006f6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f64:	f043 0220 	orr.w	r2, r3, #32
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 8249 	beq.w	800740c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d013      	beq.n	8006fae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d105      	bne.n	8006f9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d007      	beq.n	8006fae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc2:	2b40      	cmp	r3, #64	@ 0x40
 8006fc4:	d005      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d054      	beq.n	800707c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 f82d 	bl	8008032 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe2:	2b40      	cmp	r3, #64	@ 0x40
 8006fe4:	d146      	bne.n	8007074 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007004:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3308      	adds	r3, #8
 800700e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007012:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007016:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800701e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800702a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1d9      	bne.n	8006fe6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007038:	2b00      	cmp	r3, #0
 800703a:	d017      	beq.n	800706c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007042:	4a15      	ldr	r2, [pc, #84]	@ (8007098 <HAL_UART_IRQHandler+0x2c0>)
 8007044:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800704c:	4618      	mov	r0, r3
 800704e:	f7fd fcad 	bl	80049ac <HAL_DMA_Abort_IT>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d019      	beq.n	800708c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800705e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007066:	4610      	mov	r0, r2
 8007068:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800706a:	e00f      	b.n	800708c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f9e1 	bl	8007434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007072:	e00b      	b.n	800708c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f9dd 	bl	8007434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800707a:	e007      	b.n	800708c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f9d9 	bl	8007434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800708a:	e1bf      	b.n	800740c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800708c:	bf00      	nop
    return;
 800708e:	e1bd      	b.n	800740c <HAL_UART_IRQHandler+0x634>
 8007090:	10000001 	.word	0x10000001
 8007094:	04000120 	.word	0x04000120
 8007098:	08008235 	.word	0x08008235

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	f040 8153 	bne.w	800734c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070aa:	f003 0310 	and.w	r3, r3, #16
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 814c 	beq.w	800734c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80070b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8145 	beq.w	800734c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2210      	movs	r2, #16
 80070c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d4:	2b40      	cmp	r3, #64	@ 0x40
 80070d6:	f040 80bb 	bne.w	8007250 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 818f 	beq.w	8007410 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070fc:	429a      	cmp	r2, r3
 80070fe:	f080 8187 	bcs.w	8007410 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007108:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	f040 8087 	bne.w	800722e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007134:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800713c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	461a      	mov	r2, r3
 8007146:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800714a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800714e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007156:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007162:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1da      	bne.n	8007120 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3308      	adds	r3, #8
 8007170:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800717a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800717c:	f023 0301 	bic.w	r3, r3, #1
 8007180:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3308      	adds	r3, #8
 800718a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800718e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007192:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007194:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007196:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800719a:	e841 2300 	strex	r3, r2, [r1]
 800719e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1e1      	bne.n	800716a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80071b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3308      	adds	r3, #8
 80071c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80071ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e3      	bne.n	80071a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071fc:	f023 0310 	bic.w	r3, r3, #16
 8007200:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800720e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007210:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007214:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800721c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e4      	bne.n	80071ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007228:	4618      	mov	r0, r3
 800722a:	f7fd fb66 	bl	80048fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2202      	movs	r2, #2
 8007232:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007240:	b29b      	uxth	r3, r3
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	b29b      	uxth	r3, r3
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f8fd 	bl	8007448 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800724e:	e0df      	b.n	8007410 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800725c:	b29b      	uxth	r3, r3
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800726a:	b29b      	uxth	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 80d1 	beq.w	8007414 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007272:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 80cc 	beq.w	8007414 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800728a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800728c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007290:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800729e:	647b      	str	r3, [r7, #68]	@ 0x44
 80072a0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e4      	bne.n	800727c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3308      	adds	r3, #8
 80072b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	623b      	str	r3, [r7, #32]
   return(result);
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072c8:	f023 0301 	bic.w	r3, r3, #1
 80072cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3308      	adds	r3, #8
 80072d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072da:	633a      	str	r2, [r7, #48]	@ 0x30
 80072dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1e1      	bne.n	80072b2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f023 0310 	bic.w	r3, r3, #16
 8007316:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007324:	61fb      	str	r3, [r7, #28]
 8007326:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	69b9      	ldr	r1, [r7, #24]
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	617b      	str	r3, [r7, #20]
   return(result);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e4      	bne.n	8007302 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800733e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f87f 	bl	8007448 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800734a:	e063      	b.n	8007414 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800734c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007350:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00e      	beq.n	8007376 <HAL_UART_IRQHandler+0x59e>
 8007358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800735c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d008      	beq.n	8007376 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800736c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 fcbe 	bl	8008cf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007374:	e051      	b.n	800741a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800737a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800737e:	2b00      	cmp	r3, #0
 8007380:	d014      	beq.n	80073ac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800738a:	2b00      	cmp	r3, #0
 800738c:	d105      	bne.n	800739a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800738e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007392:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d008      	beq.n	80073ac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d03a      	beq.n	8007418 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
    }
    return;
 80073aa:	e035      	b.n	8007418 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d009      	beq.n	80073cc <HAL_UART_IRQHandler+0x5f4>
 80073b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 ff4b 	bl	8008260 <UART_EndTransmit_IT>
    return;
 80073ca:	e026      	b.n	800741a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80073cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d009      	beq.n	80073ec <HAL_UART_IRQHandler+0x614>
 80073d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 fc97 	bl	8008d18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073ea:	e016      	b.n	800741a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80073ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d010      	beq.n	800741a <HAL_UART_IRQHandler+0x642>
 80073f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	da0c      	bge.n	800741a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 fc7f 	bl	8008d04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007406:	e008      	b.n	800741a <HAL_UART_IRQHandler+0x642>
      return;
 8007408:	bf00      	nop
 800740a:	e006      	b.n	800741a <HAL_UART_IRQHandler+0x642>
    return;
 800740c:	bf00      	nop
 800740e:	e004      	b.n	800741a <HAL_UART_IRQHandler+0x642>
      return;
 8007410:	bf00      	nop
 8007412:	e002      	b.n	800741a <HAL_UART_IRQHandler+0x642>
      return;
 8007414:	bf00      	nop
 8007416:	e000      	b.n	800741a <HAL_UART_IRQHandler+0x642>
    return;
 8007418:	bf00      	nop
  }
}
 800741a:	37e8      	adds	r7, #232	@ 0xe8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007464:	b08c      	sub	sp, #48	@ 0x30
 8007466:	af00      	add	r7, sp, #0
 8007468:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	431a      	orrs	r2, r3
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	431a      	orrs	r2, r3
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	4313      	orrs	r3, r2
 8007486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	4bab      	ldr	r3, [pc, #684]	@ (800773c <UART_SetConfig+0x2dc>)
 8007490:	4013      	ands	r3, r2
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	6812      	ldr	r2, [r2, #0]
 8007496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007498:	430b      	orrs	r3, r1
 800749a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4aa0      	ldr	r2, [pc, #640]	@ (8007740 <UART_SetConfig+0x2e0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d004      	beq.n	80074cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074c8:	4313      	orrs	r3, r2
 80074ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80074d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074e0:	430b      	orrs	r3, r1
 80074e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ea:	f023 010f 	bic.w	r1, r3, #15
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a91      	ldr	r2, [pc, #580]	@ (8007744 <UART_SetConfig+0x2e4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d125      	bne.n	8007550 <UART_SetConfig+0xf0>
 8007504:	4b90      	ldr	r3, [pc, #576]	@ (8007748 <UART_SetConfig+0x2e8>)
 8007506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	2b03      	cmp	r3, #3
 8007510:	d81a      	bhi.n	8007548 <UART_SetConfig+0xe8>
 8007512:	a201      	add	r2, pc, #4	@ (adr r2, 8007518 <UART_SetConfig+0xb8>)
 8007514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007518:	08007529 	.word	0x08007529
 800751c:	08007539 	.word	0x08007539
 8007520:	08007531 	.word	0x08007531
 8007524:	08007541 	.word	0x08007541
 8007528:	2301      	movs	r3, #1
 800752a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800752e:	e0d6      	b.n	80076de <UART_SetConfig+0x27e>
 8007530:	2302      	movs	r3, #2
 8007532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007536:	e0d2      	b.n	80076de <UART_SetConfig+0x27e>
 8007538:	2304      	movs	r3, #4
 800753a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800753e:	e0ce      	b.n	80076de <UART_SetConfig+0x27e>
 8007540:	2308      	movs	r3, #8
 8007542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007546:	e0ca      	b.n	80076de <UART_SetConfig+0x27e>
 8007548:	2310      	movs	r3, #16
 800754a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800754e:	e0c6      	b.n	80076de <UART_SetConfig+0x27e>
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a7d      	ldr	r2, [pc, #500]	@ (800774c <UART_SetConfig+0x2ec>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d138      	bne.n	80075cc <UART_SetConfig+0x16c>
 800755a:	4b7b      	ldr	r3, [pc, #492]	@ (8007748 <UART_SetConfig+0x2e8>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007560:	f003 030c 	and.w	r3, r3, #12
 8007564:	2b0c      	cmp	r3, #12
 8007566:	d82d      	bhi.n	80075c4 <UART_SetConfig+0x164>
 8007568:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <UART_SetConfig+0x110>)
 800756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756e:	bf00      	nop
 8007570:	080075a5 	.word	0x080075a5
 8007574:	080075c5 	.word	0x080075c5
 8007578:	080075c5 	.word	0x080075c5
 800757c:	080075c5 	.word	0x080075c5
 8007580:	080075b5 	.word	0x080075b5
 8007584:	080075c5 	.word	0x080075c5
 8007588:	080075c5 	.word	0x080075c5
 800758c:	080075c5 	.word	0x080075c5
 8007590:	080075ad 	.word	0x080075ad
 8007594:	080075c5 	.word	0x080075c5
 8007598:	080075c5 	.word	0x080075c5
 800759c:	080075c5 	.word	0x080075c5
 80075a0:	080075bd 	.word	0x080075bd
 80075a4:	2300      	movs	r3, #0
 80075a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075aa:	e098      	b.n	80076de <UART_SetConfig+0x27e>
 80075ac:	2302      	movs	r3, #2
 80075ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075b2:	e094      	b.n	80076de <UART_SetConfig+0x27e>
 80075b4:	2304      	movs	r3, #4
 80075b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ba:	e090      	b.n	80076de <UART_SetConfig+0x27e>
 80075bc:	2308      	movs	r3, #8
 80075be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075c2:	e08c      	b.n	80076de <UART_SetConfig+0x27e>
 80075c4:	2310      	movs	r3, #16
 80075c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ca:	e088      	b.n	80076de <UART_SetConfig+0x27e>
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a5f      	ldr	r2, [pc, #380]	@ (8007750 <UART_SetConfig+0x2f0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d125      	bne.n	8007622 <UART_SetConfig+0x1c2>
 80075d6:	4b5c      	ldr	r3, [pc, #368]	@ (8007748 <UART_SetConfig+0x2e8>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80075e0:	2b30      	cmp	r3, #48	@ 0x30
 80075e2:	d016      	beq.n	8007612 <UART_SetConfig+0x1b2>
 80075e4:	2b30      	cmp	r3, #48	@ 0x30
 80075e6:	d818      	bhi.n	800761a <UART_SetConfig+0x1ba>
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d00a      	beq.n	8007602 <UART_SetConfig+0x1a2>
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	d814      	bhi.n	800761a <UART_SetConfig+0x1ba>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <UART_SetConfig+0x19a>
 80075f4:	2b10      	cmp	r3, #16
 80075f6:	d008      	beq.n	800760a <UART_SetConfig+0x1aa>
 80075f8:	e00f      	b.n	800761a <UART_SetConfig+0x1ba>
 80075fa:	2300      	movs	r3, #0
 80075fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007600:	e06d      	b.n	80076de <UART_SetConfig+0x27e>
 8007602:	2302      	movs	r3, #2
 8007604:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007608:	e069      	b.n	80076de <UART_SetConfig+0x27e>
 800760a:	2304      	movs	r3, #4
 800760c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007610:	e065      	b.n	80076de <UART_SetConfig+0x27e>
 8007612:	2308      	movs	r3, #8
 8007614:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007618:	e061      	b.n	80076de <UART_SetConfig+0x27e>
 800761a:	2310      	movs	r3, #16
 800761c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007620:	e05d      	b.n	80076de <UART_SetConfig+0x27e>
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a4b      	ldr	r2, [pc, #300]	@ (8007754 <UART_SetConfig+0x2f4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d125      	bne.n	8007678 <UART_SetConfig+0x218>
 800762c:	4b46      	ldr	r3, [pc, #280]	@ (8007748 <UART_SetConfig+0x2e8>)
 800762e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007632:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007636:	2bc0      	cmp	r3, #192	@ 0xc0
 8007638:	d016      	beq.n	8007668 <UART_SetConfig+0x208>
 800763a:	2bc0      	cmp	r3, #192	@ 0xc0
 800763c:	d818      	bhi.n	8007670 <UART_SetConfig+0x210>
 800763e:	2b80      	cmp	r3, #128	@ 0x80
 8007640:	d00a      	beq.n	8007658 <UART_SetConfig+0x1f8>
 8007642:	2b80      	cmp	r3, #128	@ 0x80
 8007644:	d814      	bhi.n	8007670 <UART_SetConfig+0x210>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <UART_SetConfig+0x1f0>
 800764a:	2b40      	cmp	r3, #64	@ 0x40
 800764c:	d008      	beq.n	8007660 <UART_SetConfig+0x200>
 800764e:	e00f      	b.n	8007670 <UART_SetConfig+0x210>
 8007650:	2300      	movs	r3, #0
 8007652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007656:	e042      	b.n	80076de <UART_SetConfig+0x27e>
 8007658:	2302      	movs	r3, #2
 800765a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800765e:	e03e      	b.n	80076de <UART_SetConfig+0x27e>
 8007660:	2304      	movs	r3, #4
 8007662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007666:	e03a      	b.n	80076de <UART_SetConfig+0x27e>
 8007668:	2308      	movs	r3, #8
 800766a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800766e:	e036      	b.n	80076de <UART_SetConfig+0x27e>
 8007670:	2310      	movs	r3, #16
 8007672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007676:	e032      	b.n	80076de <UART_SetConfig+0x27e>
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a30      	ldr	r2, [pc, #192]	@ (8007740 <UART_SetConfig+0x2e0>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d12a      	bne.n	80076d8 <UART_SetConfig+0x278>
 8007682:	4b31      	ldr	r3, [pc, #196]	@ (8007748 <UART_SetConfig+0x2e8>)
 8007684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007688:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800768c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007690:	d01a      	beq.n	80076c8 <UART_SetConfig+0x268>
 8007692:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007696:	d81b      	bhi.n	80076d0 <UART_SetConfig+0x270>
 8007698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800769c:	d00c      	beq.n	80076b8 <UART_SetConfig+0x258>
 800769e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076a2:	d815      	bhi.n	80076d0 <UART_SetConfig+0x270>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <UART_SetConfig+0x250>
 80076a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ac:	d008      	beq.n	80076c0 <UART_SetConfig+0x260>
 80076ae:	e00f      	b.n	80076d0 <UART_SetConfig+0x270>
 80076b0:	2300      	movs	r3, #0
 80076b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076b6:	e012      	b.n	80076de <UART_SetConfig+0x27e>
 80076b8:	2302      	movs	r3, #2
 80076ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076be:	e00e      	b.n	80076de <UART_SetConfig+0x27e>
 80076c0:	2304      	movs	r3, #4
 80076c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076c6:	e00a      	b.n	80076de <UART_SetConfig+0x27e>
 80076c8:	2308      	movs	r3, #8
 80076ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ce:	e006      	b.n	80076de <UART_SetConfig+0x27e>
 80076d0:	2310      	movs	r3, #16
 80076d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076d6:	e002      	b.n	80076de <UART_SetConfig+0x27e>
 80076d8:	2310      	movs	r3, #16
 80076da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a17      	ldr	r2, [pc, #92]	@ (8007740 <UART_SetConfig+0x2e0>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	f040 80a8 	bne.w	800783a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076ee:	2b08      	cmp	r3, #8
 80076f0:	d834      	bhi.n	800775c <UART_SetConfig+0x2fc>
 80076f2:	a201      	add	r2, pc, #4	@ (adr r2, 80076f8 <UART_SetConfig+0x298>)
 80076f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f8:	0800771d 	.word	0x0800771d
 80076fc:	0800775d 	.word	0x0800775d
 8007700:	08007725 	.word	0x08007725
 8007704:	0800775d 	.word	0x0800775d
 8007708:	0800772b 	.word	0x0800772b
 800770c:	0800775d 	.word	0x0800775d
 8007710:	0800775d 	.word	0x0800775d
 8007714:	0800775d 	.word	0x0800775d
 8007718:	08007733 	.word	0x08007733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800771c:	f7fe f9ee 	bl	8005afc <HAL_RCC_GetPCLK1Freq>
 8007720:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007722:	e021      	b.n	8007768 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007724:	4b0c      	ldr	r3, [pc, #48]	@ (8007758 <UART_SetConfig+0x2f8>)
 8007726:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007728:	e01e      	b.n	8007768 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800772a:	f7fe f979 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 800772e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007730:	e01a      	b.n	8007768 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007736:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007738:	e016      	b.n	8007768 <UART_SetConfig+0x308>
 800773a:	bf00      	nop
 800773c:	cfff69f3 	.word	0xcfff69f3
 8007740:	40008000 	.word	0x40008000
 8007744:	40013800 	.word	0x40013800
 8007748:	40021000 	.word	0x40021000
 800774c:	40004400 	.word	0x40004400
 8007750:	40004800 	.word	0x40004800
 8007754:	40004c00 	.word	0x40004c00
 8007758:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007766:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 812a 	beq.w	80079c4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007774:	4a9e      	ldr	r2, [pc, #632]	@ (80079f0 <UART_SetConfig+0x590>)
 8007776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800777a:	461a      	mov	r2, r3
 800777c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007782:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	4613      	mov	r3, r2
 800778a:	005b      	lsls	r3, r3, #1
 800778c:	4413      	add	r3, r2
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	429a      	cmp	r2, r3
 8007792:	d305      	bcc.n	80077a0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	429a      	cmp	r2, r3
 800779e:	d903      	bls.n	80077a8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80077a6:	e10d      	b.n	80079c4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077aa:	2200      	movs	r2, #0
 80077ac:	60bb      	str	r3, [r7, #8]
 80077ae:	60fa      	str	r2, [r7, #12]
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b4:	4a8e      	ldr	r2, [pc, #568]	@ (80079f0 <UART_SetConfig+0x590>)
 80077b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2200      	movs	r2, #0
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	607a      	str	r2, [r7, #4]
 80077c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077ca:	f7f9 fa75 	bl	8000cb8 <__aeabi_uldivmod>
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	4610      	mov	r0, r2
 80077d4:	4619      	mov	r1, r3
 80077d6:	f04f 0200 	mov.w	r2, #0
 80077da:	f04f 0300 	mov.w	r3, #0
 80077de:	020b      	lsls	r3, r1, #8
 80077e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077e4:	0202      	lsls	r2, r0, #8
 80077e6:	6979      	ldr	r1, [r7, #20]
 80077e8:	6849      	ldr	r1, [r1, #4]
 80077ea:	0849      	lsrs	r1, r1, #1
 80077ec:	2000      	movs	r0, #0
 80077ee:	460c      	mov	r4, r1
 80077f0:	4605      	mov	r5, r0
 80077f2:	eb12 0804 	adds.w	r8, r2, r4
 80077f6:	eb43 0905 	adc.w	r9, r3, r5
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	469a      	mov	sl, r3
 8007802:	4693      	mov	fp, r2
 8007804:	4652      	mov	r2, sl
 8007806:	465b      	mov	r3, fp
 8007808:	4640      	mov	r0, r8
 800780a:	4649      	mov	r1, r9
 800780c:	f7f9 fa54 	bl	8000cb8 <__aeabi_uldivmod>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4613      	mov	r3, r2
 8007816:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800781e:	d308      	bcc.n	8007832 <UART_SetConfig+0x3d2>
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007826:	d204      	bcs.n	8007832 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6a3a      	ldr	r2, [r7, #32]
 800782e:	60da      	str	r2, [r3, #12]
 8007830:	e0c8      	b.n	80079c4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007838:	e0c4      	b.n	80079c4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007842:	d167      	bne.n	8007914 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007844:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007848:	2b08      	cmp	r3, #8
 800784a:	d828      	bhi.n	800789e <UART_SetConfig+0x43e>
 800784c:	a201      	add	r2, pc, #4	@ (adr r2, 8007854 <UART_SetConfig+0x3f4>)
 800784e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007852:	bf00      	nop
 8007854:	08007879 	.word	0x08007879
 8007858:	08007881 	.word	0x08007881
 800785c:	08007889 	.word	0x08007889
 8007860:	0800789f 	.word	0x0800789f
 8007864:	0800788f 	.word	0x0800788f
 8007868:	0800789f 	.word	0x0800789f
 800786c:	0800789f 	.word	0x0800789f
 8007870:	0800789f 	.word	0x0800789f
 8007874:	08007897 	.word	0x08007897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007878:	f7fe f940 	bl	8005afc <HAL_RCC_GetPCLK1Freq>
 800787c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800787e:	e014      	b.n	80078aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007880:	f7fe f952 	bl	8005b28 <HAL_RCC_GetPCLK2Freq>
 8007884:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007886:	e010      	b.n	80078aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007888:	4b5a      	ldr	r3, [pc, #360]	@ (80079f4 <UART_SetConfig+0x594>)
 800788a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800788c:	e00d      	b.n	80078aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800788e:	f7fe f8c7 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 8007892:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007894:	e009      	b.n	80078aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800789a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800789c:	e005      	b.n	80078aa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80078a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 8089 	beq.w	80079c4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b6:	4a4e      	ldr	r2, [pc, #312]	@ (80079f0 <UART_SetConfig+0x590>)
 80078b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078bc:	461a      	mov	r2, r3
 80078be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80078c4:	005a      	lsls	r2, r3, #1
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	085b      	lsrs	r3, r3, #1
 80078cc:	441a      	add	r2, r3
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	2b0f      	cmp	r3, #15
 80078dc:	d916      	bls.n	800790c <UART_SetConfig+0x4ac>
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078e4:	d212      	bcs.n	800790c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	f023 030f 	bic.w	r3, r3, #15
 80078ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	085b      	lsrs	r3, r3, #1
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	8bfb      	ldrh	r3, [r7, #30]
 80078fe:	4313      	orrs	r3, r2
 8007900:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	8bfa      	ldrh	r2, [r7, #30]
 8007908:	60da      	str	r2, [r3, #12]
 800790a:	e05b      	b.n	80079c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007912:	e057      	b.n	80079c4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007914:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007918:	2b08      	cmp	r3, #8
 800791a:	d828      	bhi.n	800796e <UART_SetConfig+0x50e>
 800791c:	a201      	add	r2, pc, #4	@ (adr r2, 8007924 <UART_SetConfig+0x4c4>)
 800791e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007922:	bf00      	nop
 8007924:	08007949 	.word	0x08007949
 8007928:	08007951 	.word	0x08007951
 800792c:	08007959 	.word	0x08007959
 8007930:	0800796f 	.word	0x0800796f
 8007934:	0800795f 	.word	0x0800795f
 8007938:	0800796f 	.word	0x0800796f
 800793c:	0800796f 	.word	0x0800796f
 8007940:	0800796f 	.word	0x0800796f
 8007944:	08007967 	.word	0x08007967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007948:	f7fe f8d8 	bl	8005afc <HAL_RCC_GetPCLK1Freq>
 800794c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800794e:	e014      	b.n	800797a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007950:	f7fe f8ea 	bl	8005b28 <HAL_RCC_GetPCLK2Freq>
 8007954:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007956:	e010      	b.n	800797a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007958:	4b26      	ldr	r3, [pc, #152]	@ (80079f4 <UART_SetConfig+0x594>)
 800795a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800795c:	e00d      	b.n	800797a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800795e:	f7fe f85f 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 8007962:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007964:	e009      	b.n	800797a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800796a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800796c:	e005      	b.n	800797a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007978:	bf00      	nop
    }

    if (pclk != 0U)
 800797a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797c:	2b00      	cmp	r3, #0
 800797e:	d021      	beq.n	80079c4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007984:	4a1a      	ldr	r2, [pc, #104]	@ (80079f0 <UART_SetConfig+0x590>)
 8007986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800798a:	461a      	mov	r2, r3
 800798c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	085b      	lsrs	r3, r3, #1
 8007998:	441a      	add	r2, r3
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	2b0f      	cmp	r3, #15
 80079a8:	d909      	bls.n	80079be <UART_SetConfig+0x55e>
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079b0:	d205      	bcs.n	80079be <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60da      	str	r2, [r3, #12]
 80079bc:	e002      	b.n	80079c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2200      	movs	r2, #0
 80079d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2200      	movs	r2, #0
 80079de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80079e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3730      	adds	r7, #48	@ 0x30
 80079e8:	46bd      	mov	sp, r7
 80079ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079ee:	bf00      	nop
 80079f0:	08010ab0 	.word	0x08010ab0
 80079f4:	00f42400 	.word	0x00f42400

080079f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a04:	f003 0308 	and.w	r3, r3, #8
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00a      	beq.n	8007a22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00a      	beq.n	8007a44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00a      	beq.n	8007a66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8c:	f003 0310 	and.w	r3, r3, #16
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01a      	beq.n	8007b0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007af6:	d10a      	bne.n	8007b0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	605a      	str	r2, [r3, #4]
  }
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b098      	sub	sp, #96	@ 0x60
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b4c:	f7fa feee 	bl	800292c <HAL_GetTick>
 8007b50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0308 	and.w	r3, r3, #8
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	d12f      	bne.n	8007bc0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f88e 	bl	8007c90 <UART_WaitOnFlagUntilTimeout>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d022      	beq.n	8007bc0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b98:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e6      	bne.n	8007b7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e063      	b.n	8007c88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0304 	and.w	r3, r3, #4
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	d149      	bne.n	8007c62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f857 	bl	8007c90 <UART_WaitOnFlagUntilTimeout>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d03c      	beq.n	8007c62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c06:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e6      	bne.n	8007be8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3308      	adds	r3, #8
 8007c20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f023 0301 	bic.w	r3, r3, #1
 8007c30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3308      	adds	r3, #8
 8007c38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c3a:	61fa      	str	r2, [r7, #28]
 8007c3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	69b9      	ldr	r1, [r7, #24]
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	617b      	str	r3, [r7, #20]
   return(result);
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e5      	bne.n	8007c1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e012      	b.n	8007c88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3758      	adds	r7, #88	@ 0x58
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ca0:	e04f      	b.n	8007d42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca8:	d04b      	beq.n	8007d42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007caa:	f7fa fe3f 	bl	800292c <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d302      	bcc.n	8007cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e04e      	b.n	8007d62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0304 	and.w	r3, r3, #4
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d037      	beq.n	8007d42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b80      	cmp	r3, #128	@ 0x80
 8007cd6:	d034      	beq.n	8007d42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b40      	cmp	r3, #64	@ 0x40
 8007cdc:	d031      	beq.n	8007d42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	2b08      	cmp	r3, #8
 8007cea:	d110      	bne.n	8007d0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 f99c 	bl	8008032 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e029      	b.n	8007d62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d1c:	d111      	bne.n	8007d42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 f982 	bl	8008032 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e00f      	b.n	8007d62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	69da      	ldr	r2, [r3, #28]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	bf0c      	ite	eq
 8007d52:	2301      	moveq	r3, #1
 8007d54:	2300      	movne	r3, #0
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	461a      	mov	r2, r3
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d0a0      	beq.n	8007ca2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b0a3      	sub	sp, #140	@ 0x8c
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	4613      	mov	r3, r2
 8007d78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	88fa      	ldrh	r2, [r7, #6]
 8007d84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	88fa      	ldrh	r2, [r7, #6]
 8007d8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d9e:	d10e      	bne.n	8007dbe <UART_Start_Receive_IT+0x52>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d105      	bne.n	8007db4 <UART_Start_Receive_IT+0x48>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007dae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007db2:	e02d      	b.n	8007e10 <UART_Start_Receive_IT+0xa4>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	22ff      	movs	r2, #255	@ 0xff
 8007db8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007dbc:	e028      	b.n	8007e10 <UART_Start_Receive_IT+0xa4>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10d      	bne.n	8007de2 <UART_Start_Receive_IT+0x76>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d104      	bne.n	8007dd8 <UART_Start_Receive_IT+0x6c>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	22ff      	movs	r2, #255	@ 0xff
 8007dd2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007dd6:	e01b      	b.n	8007e10 <UART_Start_Receive_IT+0xa4>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	227f      	movs	r2, #127	@ 0x7f
 8007ddc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007de0:	e016      	b.n	8007e10 <UART_Start_Receive_IT+0xa4>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dea:	d10d      	bne.n	8007e08 <UART_Start_Receive_IT+0x9c>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <UART_Start_Receive_IT+0x92>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	227f      	movs	r2, #127	@ 0x7f
 8007df8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007dfc:	e008      	b.n	8007e10 <UART_Start_Receive_IT+0xa4>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	223f      	movs	r2, #63	@ 0x3f
 8007e02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e06:	e003      	b.n	8007e10 <UART_Start_Receive_IT+0xa4>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2222      	movs	r2, #34	@ 0x22
 8007e1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3308      	adds	r3, #8
 8007e26:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007e30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e32:	f043 0301 	orr.w	r3, r3, #1
 8007e36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3308      	adds	r3, #8
 8007e40:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007e44:	673a      	str	r2, [r7, #112]	@ 0x70
 8007e46:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e48:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007e4a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007e4c:	e841 2300 	strex	r3, r2, [r1]
 8007e50:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007e52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1e3      	bne.n	8007e20 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e60:	d14f      	bne.n	8007f02 <UART_Start_Receive_IT+0x196>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007e68:	88fa      	ldrh	r2, [r7, #6]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d349      	bcc.n	8007f02 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e76:	d107      	bne.n	8007e88 <UART_Start_Receive_IT+0x11c>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d103      	bne.n	8007e88 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4a47      	ldr	r2, [pc, #284]	@ (8007fa0 <UART_Start_Receive_IT+0x234>)
 8007e84:	675a      	str	r2, [r3, #116]	@ 0x74
 8007e86:	e002      	b.n	8007e8e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4a46      	ldr	r2, [pc, #280]	@ (8007fa4 <UART_Start_Receive_IT+0x238>)
 8007e8c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d01a      	beq.n	8007ecc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007ea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eaa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007eb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007eba:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007ebe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007ec0:	e841 2300 	strex	r3, r2, [r1]
 8007ec4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e4      	bne.n	8007e96 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ed6:	e853 3f00 	ldrex	r3, [r3]
 8007eda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ee2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3308      	adds	r3, #8
 8007eea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007eec:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007eee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ef2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ef4:	e841 2300 	strex	r3, r2, [r1]
 8007ef8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e5      	bne.n	8007ecc <UART_Start_Receive_IT+0x160>
 8007f00:	e046      	b.n	8007f90 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f0a:	d107      	bne.n	8007f1c <UART_Start_Receive_IT+0x1b0>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d103      	bne.n	8007f1c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4a24      	ldr	r2, [pc, #144]	@ (8007fa8 <UART_Start_Receive_IT+0x23c>)
 8007f18:	675a      	str	r2, [r3, #116]	@ 0x74
 8007f1a:	e002      	b.n	8007f22 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4a23      	ldr	r2, [pc, #140]	@ (8007fac <UART_Start_Receive_IT+0x240>)
 8007f20:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d019      	beq.n	8007f5e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f32:	e853 3f00 	ldrex	r3, [r3]
 8007f36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007f3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	461a      	mov	r2, r3
 8007f46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f4a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f50:	e841 2300 	strex	r3, r2, [r1]
 8007f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e6      	bne.n	8007f2a <UART_Start_Receive_IT+0x1be>
 8007f5c:	e018      	b.n	8007f90 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	e853 3f00 	ldrex	r3, [r3]
 8007f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	f043 0320 	orr.w	r3, r3, #32
 8007f72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f7c:	623b      	str	r3, [r7, #32]
 8007f7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	69f9      	ldr	r1, [r7, #28]
 8007f82:	6a3a      	ldr	r2, [r7, #32]
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e6      	bne.n	8007f5e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	378c      	adds	r7, #140	@ 0x8c
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	08008989 	.word	0x08008989
 8007fa4:	08008629 	.word	0x08008629
 8007fa8:	08008471 	.word	0x08008471
 8007fac:	080082b9 	.word	0x080082b9

08007fb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b08f      	sub	sp, #60	@ 0x3c
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	e853 3f00 	ldrex	r3, [r3]
 8007fc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fd8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e6      	bne.n	8007fb8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	e853 3f00 	ldrex	r3, [r3]
 8007ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008000:	633b      	str	r3, [r7, #48]	@ 0x30
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3308      	adds	r3, #8
 8008008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800800a:	61ba      	str	r2, [r7, #24]
 800800c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800e:	6979      	ldr	r1, [r7, #20]
 8008010:	69ba      	ldr	r2, [r7, #24]
 8008012:	e841 2300 	strex	r3, r2, [r1]
 8008016:	613b      	str	r3, [r7, #16]
   return(result);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1e5      	bne.n	8007fea <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008026:	bf00      	nop
 8008028:	373c      	adds	r7, #60	@ 0x3c
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008032:	b480      	push	{r7}
 8008034:	b095      	sub	sp, #84	@ 0x54
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008042:	e853 3f00 	ldrex	r3, [r3]
 8008046:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800804e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008058:	643b      	str	r3, [r7, #64]	@ 0x40
 800805a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800805e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008060:	e841 2300 	strex	r3, r2, [r1]
 8008064:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e6      	bne.n	800803a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3308      	adds	r3, #8
 8008072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	e853 3f00 	ldrex	r3, [r3]
 800807a:	61fb      	str	r3, [r7, #28]
   return(result);
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008082:	f023 0301 	bic.w	r3, r3, #1
 8008086:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3308      	adds	r3, #8
 800808e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008090:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008092:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008098:	e841 2300 	strex	r3, r2, [r1]
 800809c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800809e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e3      	bne.n	800806c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d118      	bne.n	80080de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	e853 3f00 	ldrex	r3, [r3]
 80080b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f023 0310 	bic.w	r3, r3, #16
 80080c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080ca:	61bb      	str	r3, [r7, #24]
 80080cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ce:	6979      	ldr	r1, [r7, #20]
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	e841 2300 	strex	r3, r2, [r1]
 80080d6:	613b      	str	r3, [r7, #16]
   return(result);
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1e6      	bne.n	80080ac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2220      	movs	r2, #32
 80080e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80080f2:	bf00      	nop
 80080f4:	3754      	adds	r7, #84	@ 0x54
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b090      	sub	sp, #64	@ 0x40
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800810a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0320 	and.w	r3, r3, #32
 8008116:	2b00      	cmp	r3, #0
 8008118:	d137      	bne.n	800818a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800811a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800811c:	2200      	movs	r2, #0
 800811e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3308      	adds	r3, #8
 8008128:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812c:	e853 3f00 	ldrex	r3, [r3]
 8008130:	623b      	str	r3, [r7, #32]
   return(result);
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008138:	63bb      	str	r3, [r7, #56]	@ 0x38
 800813a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3308      	adds	r3, #8
 8008140:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008142:	633a      	str	r2, [r7, #48]	@ 0x30
 8008144:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008146:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800814a:	e841 2300 	strex	r3, r2, [r1]
 800814e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1e5      	bne.n	8008122 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	60fb      	str	r3, [r7, #12]
   return(result);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800816a:	637b      	str	r3, [r7, #52]	@ 0x34
 800816c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	461a      	mov	r2, r3
 8008172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008174:	61fb      	str	r3, [r7, #28]
 8008176:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008178:	69b9      	ldr	r1, [r7, #24]
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	e841 2300 	strex	r3, r2, [r1]
 8008180:	617b      	str	r3, [r7, #20]
   return(result);
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1e6      	bne.n	8008156 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008188:	e002      	b.n	8008190 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800818a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800818c:	f7f9 f8fc 	bl	8001388 <HAL_UART_TxCpltCallback>
}
 8008190:	bf00      	nop
 8008192:	3740      	adds	r7, #64	@ 0x40
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f7ff f93a 	bl	8007420 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081ac:	bf00      	nop
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081dc:	2b80      	cmp	r3, #128	@ 0x80
 80081de:	d109      	bne.n	80081f4 <UART_DMAError+0x40>
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	2b21      	cmp	r3, #33	@ 0x21
 80081e4:	d106      	bne.n	80081f4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80081ee:	6978      	ldr	r0, [r7, #20]
 80081f0:	f7ff fede 	bl	8007fb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081fe:	2b40      	cmp	r3, #64	@ 0x40
 8008200:	d109      	bne.n	8008216 <UART_DMAError+0x62>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2b22      	cmp	r3, #34	@ 0x22
 8008206:	d106      	bne.n	8008216 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	2200      	movs	r2, #0
 800820c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008210:	6978      	ldr	r0, [r7, #20]
 8008212:	f7ff ff0e 	bl	8008032 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800821c:	f043 0210 	orr.w	r2, r3, #16
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008226:	6978      	ldr	r0, [r7, #20]
 8008228:	f7ff f904 	bl	8007434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800822c:	bf00      	nop
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008240:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7ff f8ee 	bl	8007434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008258:	bf00      	nop
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b088      	sub	sp, #32
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	60bb      	str	r3, [r7, #8]
   return(result);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800827c:	61fb      	str	r3, [r7, #28]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	61bb      	str	r3, [r7, #24]
 8008288:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	6979      	ldr	r1, [r7, #20]
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	613b      	str	r3, [r7, #16]
   return(result);
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e6      	bne.n	8008268 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7f9 f86d 	bl	8001388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082ae:	bf00      	nop
 80082b0:	3720      	adds	r7, #32
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b09c      	sub	sp, #112	@ 0x70
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80082c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082d0:	2b22      	cmp	r3, #34	@ 0x22
 80082d2:	f040 80be 	bne.w	8008452 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80082e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80082e4:	b2d9      	uxtb	r1, r3
 80082e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082f0:	400a      	ands	r2, r1
 80082f2:	b2d2      	uxtb	r2, r2
 80082f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008306:	b29b      	uxth	r3, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	f040 80a1 	bne.w	8008462 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008328:	e853 3f00 	ldrex	r3, [r3]
 800832c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800832e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008330:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008334:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800833e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008340:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008344:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800834c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1e6      	bne.n	8008320 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3308      	adds	r3, #8
 8008358:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008364:	f023 0301 	bic.w	r3, r3, #1
 8008368:	667b      	str	r3, [r7, #100]	@ 0x64
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3308      	adds	r3, #8
 8008370:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008372:	647a      	str	r2, [r7, #68]	@ 0x44
 8008374:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008378:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e5      	bne.n	8008352 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a33      	ldr	r2, [pc, #204]	@ (800846c <UART_RxISR_8BIT+0x1b4>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d01f      	beq.n	80083e4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d018      	beq.n	80083e4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ba:	e853 3f00 	ldrex	r3, [r3]
 80083be:	623b      	str	r3, [r7, #32]
   return(result);
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80083c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	461a      	mov	r2, r3
 80083ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80083d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80083d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083d8:	e841 2300 	strex	r3, r2, [r1]
 80083dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e6      	bne.n	80083b2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d12e      	bne.n	800844a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	e853 3f00 	ldrex	r3, [r3]
 80083fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f023 0310 	bic.w	r3, r3, #16
 8008406:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008410:	61fb      	str	r3, [r7, #28]
 8008412:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008414:	69b9      	ldr	r1, [r7, #24]
 8008416:	69fa      	ldr	r2, [r7, #28]
 8008418:	e841 2300 	strex	r3, r2, [r1]
 800841c:	617b      	str	r3, [r7, #20]
   return(result);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e6      	bne.n	80083f2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	f003 0310 	and.w	r3, r3, #16
 800842e:	2b10      	cmp	r3, #16
 8008430:	d103      	bne.n	800843a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2210      	movs	r2, #16
 8008438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff f800 	bl	8007448 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008448:	e00b      	b.n	8008462 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7f8 ff74 	bl	8001338 <HAL_UART_RxCpltCallback>
}
 8008450:	e007      	b.n	8008462 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	699a      	ldr	r2, [r3, #24]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f042 0208 	orr.w	r2, r2, #8
 8008460:	619a      	str	r2, [r3, #24]
}
 8008462:	bf00      	nop
 8008464:	3770      	adds	r7, #112	@ 0x70
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	40008000 	.word	0x40008000

08008470 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b09c      	sub	sp, #112	@ 0x70
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800847e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008488:	2b22      	cmp	r3, #34	@ 0x22
 800848a:	f040 80be 	bne.w	800860a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008494:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800849c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800849e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80084a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80084a6:	4013      	ands	r3, r2
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084b2:	1c9a      	adds	r2, r3, #2
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084be:	b29b      	uxth	r3, r3
 80084c0:	3b01      	subs	r3, #1
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f040 80a1 	bne.w	800861a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80084e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80084f8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80084fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e6      	bne.n	80084d8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3308      	adds	r3, #8
 8008510:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008514:	e853 3f00 	ldrex	r3, [r3]
 8008518:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851c:	f023 0301 	bic.w	r3, r3, #1
 8008520:	663b      	str	r3, [r7, #96]	@ 0x60
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3308      	adds	r3, #8
 8008528:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800852a:	643a      	str	r2, [r7, #64]	@ 0x40
 800852c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008530:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e5      	bne.n	800850a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2220      	movs	r2, #32
 8008542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a33      	ldr	r2, [pc, #204]	@ (8008624 <UART_RxISR_16BIT+0x1b4>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d01f      	beq.n	800859c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d018      	beq.n	800859c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	e853 3f00 	ldrex	r3, [r3]
 8008576:	61fb      	str	r3, [r7, #28]
   return(result);
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800857e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	461a      	mov	r2, r3
 8008586:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800858a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800858e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008590:	e841 2300 	strex	r3, r2, [r1]
 8008594:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1e6      	bne.n	800856a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d12e      	bne.n	8008602 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	f023 0310 	bic.w	r3, r3, #16
 80085be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085c8:	61bb      	str	r3, [r7, #24]
 80085ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	6979      	ldr	r1, [r7, #20]
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	613b      	str	r3, [r7, #16]
   return(result);
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e6      	bne.n	80085aa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	f003 0310 	and.w	r3, r3, #16
 80085e6:	2b10      	cmp	r3, #16
 80085e8:	d103      	bne.n	80085f2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2210      	movs	r2, #16
 80085f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7fe ff24 	bl	8007448 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008600:	e00b      	b.n	800861a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7f8 fe98 	bl	8001338 <HAL_UART_RxCpltCallback>
}
 8008608:	e007      	b.n	800861a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	699a      	ldr	r2, [r3, #24]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f042 0208 	orr.w	r2, r2, #8
 8008618:	619a      	str	r2, [r3, #24]
}
 800861a:	bf00      	nop
 800861c:	3770      	adds	r7, #112	@ 0x70
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	40008000 	.word	0x40008000

08008628 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b0ac      	sub	sp, #176	@ 0xb0
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008636:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800865e:	2b22      	cmp	r3, #34	@ 0x22
 8008660:	f040 8182 	bne.w	8008968 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800866a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800866e:	e125      	b.n	80088bc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008676:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800867a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800867e:	b2d9      	uxtb	r1, r3
 8008680:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008684:	b2da      	uxtb	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800868a:	400a      	ands	r2, r1
 800868c:	b2d2      	uxtb	r2, r2
 800868e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008694:	1c5a      	adds	r2, r3, #1
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80086b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086ba:	f003 0307 	and.w	r3, r3, #7
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d053      	beq.n	800876a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d011      	beq.n	80086f2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80086ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80086d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00b      	beq.n	80086f2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2201      	movs	r2, #1
 80086e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086e8:	f043 0201 	orr.w	r2, r3, #1
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d011      	beq.n	8008722 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80086fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00b      	beq.n	8008722 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2202      	movs	r2, #2
 8008710:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008718:	f043 0204 	orr.w	r2, r3, #4
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b00      	cmp	r3, #0
 800872c:	d011      	beq.n	8008752 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800872e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00b      	beq.n	8008752 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2204      	movs	r2, #4
 8008740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008748:	f043 0202 	orr.w	r2, r3, #2
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008758:	2b00      	cmp	r3, #0
 800875a:	d006      	beq.n	800876a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7fe fe69 	bl	8007434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008770:	b29b      	uxth	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	f040 80a2 	bne.w	80088bc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008780:	e853 3f00 	ldrex	r3, [r3]
 8008784:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800878c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	461a      	mov	r2, r3
 8008796:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800879a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800879c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80087a0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80087a2:	e841 2300 	strex	r3, r2, [r1]
 80087a6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80087a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1e4      	bne.n	8008778 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3308      	adds	r3, #8
 80087b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80087be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087c4:	f023 0301 	bic.w	r3, r3, #1
 80087c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3308      	adds	r3, #8
 80087d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80087d6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80087d8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80087dc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80087e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e1      	bne.n	80087ae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2220      	movs	r2, #32
 80087ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a5f      	ldr	r2, [pc, #380]	@ (8008980 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d021      	beq.n	800884c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d01a      	beq.n	800884c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008826:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800882a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008838:	657b      	str	r3, [r7, #84]	@ 0x54
 800883a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800883e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008840:	e841 2300 	strex	r3, r2, [r1]
 8008844:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e4      	bne.n	8008816 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008850:	2b01      	cmp	r3, #1
 8008852:	d130      	bne.n	80088b6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008862:	e853 3f00 	ldrex	r3, [r3]
 8008866:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886a:	f023 0310 	bic.w	r3, r3, #16
 800886e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800887c:	643b      	str	r3, [r7, #64]	@ 0x40
 800887e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008880:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008882:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008884:	e841 2300 	strex	r3, r2, [r1]
 8008888:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800888a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e4      	bne.n	800885a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	f003 0310 	and.w	r3, r3, #16
 800889a:	2b10      	cmp	r3, #16
 800889c:	d103      	bne.n	80088a6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2210      	movs	r2, #16
 80088a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7fe fdca 	bl	8007448 <HAL_UARTEx_RxEventCallback>
 80088b4:	e002      	b.n	80088bc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7f8 fd3e 	bl	8001338 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088bc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d006      	beq.n	80088d2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80088c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088c8:	f003 0320 	and.w	r3, r3, #32
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f47f aecf 	bne.w	8008670 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80088dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d049      	beq.n	8008978 <UART_RxISR_8BIT_FIFOEN+0x350>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80088ea:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d242      	bcs.n	8008978 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3308      	adds	r3, #8
 80088f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	e853 3f00 	ldrex	r3, [r3]
 8008900:	61fb      	str	r3, [r7, #28]
   return(result);
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008908:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3308      	adds	r3, #8
 8008912:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008916:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008918:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800891c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e3      	bne.n	80088f2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a15      	ldr	r2, [pc, #84]	@ (8008984 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800892e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	60bb      	str	r3, [r7, #8]
   return(result);
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	f043 0320 	orr.w	r3, r3, #32
 8008944:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	461a      	mov	r2, r3
 800894e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008952:	61bb      	str	r3, [r7, #24]
 8008954:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008956:	6979      	ldr	r1, [r7, #20]
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	e841 2300 	strex	r3, r2, [r1]
 800895e:	613b      	str	r3, [r7, #16]
   return(result);
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1e4      	bne.n	8008930 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008966:	e007      	b.n	8008978 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0208 	orr.w	r2, r2, #8
 8008976:	619a      	str	r2, [r3, #24]
}
 8008978:	bf00      	nop
 800897a:	37b0      	adds	r7, #176	@ 0xb0
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	40008000 	.word	0x40008000
 8008984:	080082b9 	.word	0x080082b9

08008988 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b0ae      	sub	sp, #184	@ 0xb8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008996:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089be:	2b22      	cmp	r3, #34	@ 0x22
 80089c0:	f040 8186 	bne.w	8008cd0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80089ca:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089ce:	e129      	b.n	8008c24 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80089e2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80089e6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80089ea:	4013      	ands	r3, r2
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089f8:	1c9a      	adds	r2, r3, #2
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	3b01      	subs	r3, #1
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d053      	beq.n	8008ace <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d011      	beq.n	8008a56 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00b      	beq.n	8008a56 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2201      	movs	r2, #1
 8008a44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a4c:	f043 0201 	orr.w	r2, r3, #1
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d011      	beq.n	8008a86 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008a62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00b      	beq.n	8008a86 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2202      	movs	r2, #2
 8008a74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a7c:	f043 0204 	orr.w	r2, r3, #4
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a8a:	f003 0304 	and.w	r3, r3, #4
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d011      	beq.n	8008ab6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008a92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2204      	movs	r2, #4
 8008aa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aac:	f043 0202 	orr.w	r2, r3, #2
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d006      	beq.n	8008ace <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7fe fcb7 	bl	8007434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f040 80a4 	bne.w	8008c24 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008aea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008af0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008afe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b02:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b0a:	e841 2300 	strex	r3, r2, [r1]
 8008b0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e2      	bne.n	8008adc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b20:	e853 3f00 	ldrex	r3, [r3]
 8008b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b2c:	f023 0301 	bic.w	r3, r3, #1
 8008b30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3308      	adds	r3, #8
 8008b3a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008b3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e1      	bne.n	8008b16 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a5f      	ldr	r2, [pc, #380]	@ (8008ce8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d021      	beq.n	8008bb4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d01a      	beq.n	8008bb4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b86:	e853 3f00 	ldrex	r3, [r3]
 8008b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ba2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ba6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ba8:	e841 2300 	strex	r3, r2, [r1]
 8008bac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1e4      	bne.n	8008b7e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d130      	bne.n	8008c1e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bca:	e853 3f00 	ldrex	r3, [r3]
 8008bce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd2:	f023 0310 	bic.w	r3, r3, #16
 8008bd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008be6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bec:	e841 2300 	strex	r3, r2, [r1]
 8008bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e4      	bne.n	8008bc2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	f003 0310 	and.w	r3, r3, #16
 8008c02:	2b10      	cmp	r3, #16
 8008c04:	d103      	bne.n	8008c0e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2210      	movs	r2, #16
 8008c0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7fe fc16 	bl	8007448 <HAL_UARTEx_RxEventCallback>
 8008c1c:	e002      	b.n	8008c24 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7f8 fb8a 	bl	8001338 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c24:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d006      	beq.n	8008c3a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008c2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c30:	f003 0320 	and.w	r3, r3, #32
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f47f aecb 	bne.w	80089d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c40:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008c44:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d049      	beq.n	8008ce0 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c52:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d242      	bcs.n	8008ce0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3308      	adds	r3, #8
 8008c60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	623b      	str	r3, [r7, #32]
   return(result);
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3308      	adds	r3, #8
 8008c7a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008c7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e3      	bne.n	8008c5a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a15      	ldr	r2, [pc, #84]	@ (8008cec <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008c96:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f043 0320 	orr.w	r3, r3, #32
 8008cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008cba:	61fb      	str	r3, [r7, #28]
 8008cbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	69b9      	ldr	r1, [r7, #24]
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e4      	bne.n	8008c98 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008cce:	e007      	b.n	8008ce0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	699a      	ldr	r2, [r3, #24]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0208 	orr.w	r2, r2, #8
 8008cde:	619a      	str	r2, [r3, #24]
}
 8008ce0:	bf00      	nop
 8008ce2:	37b8      	adds	r7, #184	@ 0xb8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	40008000 	.word	0x40008000
 8008cec:	08008471 	.word	0x08008471

08008cf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d101      	bne.n	8008d42 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e027      	b.n	8008d92 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2224      	movs	r2, #36	@ 0x24
 8008d4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 0201 	bic.w	r2, r2, #1
 8008d68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008d70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d101      	bne.n	8008db6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008db2:	2302      	movs	r3, #2
 8008db4:	e02d      	b.n	8008e12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2224      	movs	r2, #36	@ 0x24
 8008dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0201 	bic.w	r2, r2, #1
 8008ddc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f850 	bl	8008e98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2220      	movs	r2, #32
 8008e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d101      	bne.n	8008e32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	e02d      	b.n	8008e8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2224      	movs	r2, #36	@ 0x24
 8008e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 0201 	bic.w	r2, r2, #1
 8008e58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	430a      	orrs	r2, r1
 8008e6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f812 	bl	8008e98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2220      	movs	r2, #32
 8008e80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d108      	bne.n	8008eba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008eb8:	e031      	b.n	8008f1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008eba:	2308      	movs	r3, #8
 8008ebc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ebe:	2308      	movs	r3, #8
 8008ec0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	0e5b      	lsrs	r3, r3, #25
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	f003 0307 	and.w	r3, r3, #7
 8008ed0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	0f5b      	lsrs	r3, r3, #29
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	f003 0307 	and.w	r3, r3, #7
 8008ee0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ee2:	7bbb      	ldrb	r3, [r7, #14]
 8008ee4:	7b3a      	ldrb	r2, [r7, #12]
 8008ee6:	4911      	ldr	r1, [pc, #68]	@ (8008f2c <UARTEx_SetNbDataToProcess+0x94>)
 8008ee8:	5c8a      	ldrb	r2, [r1, r2]
 8008eea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008eee:	7b3a      	ldrb	r2, [r7, #12]
 8008ef0:	490f      	ldr	r1, [pc, #60]	@ (8008f30 <UARTEx_SetNbDataToProcess+0x98>)
 8008ef2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ef4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	7b7a      	ldrb	r2, [r7, #13]
 8008f04:	4909      	ldr	r1, [pc, #36]	@ (8008f2c <UARTEx_SetNbDataToProcess+0x94>)
 8008f06:	5c8a      	ldrb	r2, [r1, r2]
 8008f08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f0c:	7b7a      	ldrb	r2, [r7, #13]
 8008f0e:	4908      	ldr	r1, [pc, #32]	@ (8008f30 <UARTEx_SetNbDataToProcess+0x98>)
 8008f10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f12:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008f1e:	bf00      	nop
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	08010ac8 	.word	0x08010ac8
 8008f30:	08010ad0 	.word	0x08010ad0

08008f34 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f46:	2b84      	cmp	r3, #132	@ 0x84
 8008f48:	d005      	beq.n	8008f56 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008f4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	3303      	adds	r3, #3
 8008f54:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008f56:	68fb      	ldr	r3, [r7, #12]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008f68:	f001 fcc2 	bl	800a8f0 <vTaskStartScheduler>
  
  return osOK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008f72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f74:	b087      	sub	sp, #28
 8008f76:	af02      	add	r7, sp, #8
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685c      	ldr	r4, [r3, #4]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f88:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7ff ffcf 	bl	8008f34 <makeFreeRtosPriority>
 8008f96:	4602      	mov	r2, r0
 8008f98:	f107 030c 	add.w	r3, r7, #12
 8008f9c:	9301      	str	r3, [sp, #4]
 8008f9e:	9200      	str	r2, [sp, #0]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	4632      	mov	r2, r6
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f001 faaa 	bl	800a500 <xTaskCreate>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d001      	beq.n	8008fb6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e000      	b.n	8008fb8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fc0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d001      	beq.n	8008fd6 <osDelay+0x16>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	e000      	b.n	8008fd8 <osDelay+0x18>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f001 fbeb 	bl	800a7b4 <vTaskDelay>
  
  return osOK;
 8008fde:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f103 0208 	add.w	r2, r3, #8
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8009000:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f103 0208 	add.w	r2, r3, #8
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f103 0208 	add.w	r2, r3, #8
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009042:	b480      	push	{r7}
 8009044:	b085      	sub	sp, #20
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	689a      	ldr	r2, [r3, #8]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	601a      	str	r2, [r3, #0]
}
 800907e:	bf00      	nop
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800908a:	b480      	push	{r7}
 800908c:	b085      	sub	sp, #20
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a0:	d103      	bne.n	80090aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	e00c      	b.n	80090c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	3308      	adds	r3, #8
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	e002      	b.n	80090b8 <vListInsert+0x2e>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d2f6      	bcs.n	80090b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	601a      	str	r2, [r3, #0]
}
 80090f0:	bf00      	nop
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	6892      	ldr	r2, [r2, #8]
 8009112:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	6852      	ldr	r2, [r2, #4]
 800911c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	429a      	cmp	r2, r3
 8009126:	d103      	bne.n	8009130 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	689a      	ldr	r2, [r3, #8]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	1e5a      	subs	r2, r3, #1
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10b      	bne.n	800917c <xQueueGenericReset+0x2c>
	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	60bb      	str	r3, [r7, #8]
}
 8009176:	bf00      	nop
 8009178:	bf00      	nop
 800917a:	e7fd      	b.n	8009178 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800917c:	f002 ff34 	bl	800bfe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009188:	68f9      	ldr	r1, [r7, #12]
 800918a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800918c:	fb01 f303 	mul.w	r3, r1, r3
 8009190:	441a      	add	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ac:	3b01      	subs	r3, #1
 80091ae:	68f9      	ldr	r1, [r7, #12]
 80091b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80091b2:	fb01 f303 	mul.w	r3, r1, r3
 80091b6:	441a      	add	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	22ff      	movs	r2, #255	@ 0xff
 80091c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	22ff      	movs	r2, #255	@ 0xff
 80091c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d114      	bne.n	80091fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d01a      	beq.n	8009210 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3310      	adds	r3, #16
 80091de:	4618      	mov	r0, r3
 80091e0:	f001 fe74 	bl	800aecc <xTaskRemoveFromEventList>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d012      	beq.n	8009210 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80091ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009220 <xQueueGenericReset+0xd0>)
 80091ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091f0:	601a      	str	r2, [r3, #0]
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	e009      	b.n	8009210 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	3310      	adds	r3, #16
 8009200:	4618      	mov	r0, r3
 8009202:	f7ff fef1 	bl	8008fe8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3324      	adds	r3, #36	@ 0x24
 800920a:	4618      	mov	r0, r3
 800920c:	f7ff feec 	bl	8008fe8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009210:	f002 ff1c 	bl	800c04c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009214:	2301      	movs	r3, #1
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	e000ed04 	.word	0xe000ed04

08009224 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009224:	b580      	push	{r7, lr}
 8009226:	b08a      	sub	sp, #40	@ 0x28
 8009228:	af02      	add	r7, sp, #8
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	4613      	mov	r3, r2
 8009230:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10b      	bne.n	8009250 <xQueueGenericCreate+0x2c>
	__asm volatile
 8009238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	613b      	str	r3, [r7, #16]
}
 800924a:	bf00      	nop
 800924c:	bf00      	nop
 800924e:	e7fd      	b.n	800924c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	fb02 f303 	mul.w	r3, r2, r3
 8009258:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	3350      	adds	r3, #80	@ 0x50
 800925e:	4618      	mov	r0, r3
 8009260:	f002 ffe4 	bl	800c22c <pvPortMalloc>
 8009264:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00d      	beq.n	8009288 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	3350      	adds	r3, #80	@ 0x50
 8009274:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009276:	79fa      	ldrb	r2, [r7, #7]
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	4613      	mov	r3, r2
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	68b9      	ldr	r1, [r7, #8]
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f000 f805 	bl	8009292 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009288:	69bb      	ldr	r3, [r7, #24]
	}
 800928a:	4618      	mov	r0, r3
 800928c:	3720      	adds	r7, #32
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	60f8      	str	r0, [r7, #12]
 800929a:	60b9      	str	r1, [r7, #8]
 800929c:	607a      	str	r2, [r7, #4]
 800929e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d103      	bne.n	80092ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	69ba      	ldr	r2, [r7, #24]
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	e002      	b.n	80092b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80092c0:	2101      	movs	r1, #1
 80092c2:	69b8      	ldr	r0, [r7, #24]
 80092c4:	f7ff ff44 	bl	8009150 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	78fa      	ldrb	r2, [r7, #3]
 80092cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80092d0:	bf00      	nop
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00e      	beq.n	8009304 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80092f8:	2300      	movs	r3, #0
 80092fa:	2200      	movs	r2, #0
 80092fc:	2100      	movs	r1, #0
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f81c 	bl	800933c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009304:	bf00      	nop
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	4603      	mov	r3, r0
 8009314:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009316:	2301      	movs	r3, #1
 8009318:	617b      	str	r3, [r7, #20]
 800931a:	2300      	movs	r3, #0
 800931c:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800931e:	79fb      	ldrb	r3, [r7, #7]
 8009320:	461a      	mov	r2, r3
 8009322:	6939      	ldr	r1, [r7, #16]
 8009324:	6978      	ldr	r0, [r7, #20]
 8009326:	f7ff ff7d 	bl	8009224 <xQueueGenericCreate>
 800932a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f7ff ffd3 	bl	80092d8 <prvInitialiseMutex>

		return xNewQueue;
 8009332:	68fb      	ldr	r3, [r7, #12]
	}
 8009334:	4618      	mov	r0, r3
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b08e      	sub	sp, #56	@ 0x38
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800934a:	2300      	movs	r3, #0
 800934c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10b      	bne.n	8009370 <xQueueGenericSend+0x34>
	__asm volatile
 8009358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800936a:	bf00      	nop
 800936c:	bf00      	nop
 800936e:	e7fd      	b.n	800936c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d103      	bne.n	800937e <xQueueGenericSend+0x42>
 8009376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <xQueueGenericSend+0x46>
 800937e:	2301      	movs	r3, #1
 8009380:	e000      	b.n	8009384 <xQueueGenericSend+0x48>
 8009382:	2300      	movs	r3, #0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10b      	bne.n	80093a0 <xQueueGenericSend+0x64>
	__asm volatile
 8009388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800939a:	bf00      	nop
 800939c:	bf00      	nop
 800939e:	e7fd      	b.n	800939c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d103      	bne.n	80093ae <xQueueGenericSend+0x72>
 80093a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d101      	bne.n	80093b2 <xQueueGenericSend+0x76>
 80093ae:	2301      	movs	r3, #1
 80093b0:	e000      	b.n	80093b4 <xQueueGenericSend+0x78>
 80093b2:	2300      	movs	r3, #0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10b      	bne.n	80093d0 <xQueueGenericSend+0x94>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	623b      	str	r3, [r7, #32]
}
 80093ca:	bf00      	nop
 80093cc:	bf00      	nop
 80093ce:	e7fd      	b.n	80093cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093d0:	f002 f82e 	bl	800b430 <xTaskGetSchedulerState>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d102      	bne.n	80093e0 <xQueueGenericSend+0xa4>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <xQueueGenericSend+0xa8>
 80093e0:	2301      	movs	r3, #1
 80093e2:	e000      	b.n	80093e6 <xQueueGenericSend+0xaa>
 80093e4:	2300      	movs	r3, #0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10b      	bne.n	8009402 <xQueueGenericSend+0xc6>
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	61fb      	str	r3, [r7, #28]
}
 80093fc:	bf00      	nop
 80093fe:	bf00      	nop
 8009400:	e7fd      	b.n	80093fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009402:	f002 fdf1 	bl	800bfe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800940a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800940e:	429a      	cmp	r2, r3
 8009410:	d302      	bcc.n	8009418 <xQueueGenericSend+0xdc>
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b02      	cmp	r3, #2
 8009416:	d129      	bne.n	800946c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	68b9      	ldr	r1, [r7, #8]
 800941c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800941e:	f000 fbc7 	bl	8009bb0 <prvCopyDataToQueue>
 8009422:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009428:	2b00      	cmp	r3, #0
 800942a:	d010      	beq.n	800944e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800942c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942e:	3324      	adds	r3, #36	@ 0x24
 8009430:	4618      	mov	r0, r3
 8009432:	f001 fd4b 	bl	800aecc <xTaskRemoveFromEventList>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d013      	beq.n	8009464 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800943c:	4b3f      	ldr	r3, [pc, #252]	@ (800953c <xQueueGenericSend+0x200>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	e00a      	b.n	8009464 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800944e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009450:	2b00      	cmp	r3, #0
 8009452:	d007      	beq.n	8009464 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009454:	4b39      	ldr	r3, [pc, #228]	@ (800953c <xQueueGenericSend+0x200>)
 8009456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009464:	f002 fdf2 	bl	800c04c <vPortExitCritical>
				return pdPASS;
 8009468:	2301      	movs	r3, #1
 800946a:	e063      	b.n	8009534 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d103      	bne.n	800947a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009472:	f002 fdeb 	bl	800c04c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009476:	2300      	movs	r3, #0
 8009478:	e05c      	b.n	8009534 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800947a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800947c:	2b00      	cmp	r3, #0
 800947e:	d106      	bne.n	800948e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009480:	f107 0314 	add.w	r3, r7, #20
 8009484:	4618      	mov	r0, r3
 8009486:	f001 fdad 	bl	800afe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800948a:	2301      	movs	r3, #1
 800948c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800948e:	f002 fddd 	bl	800c04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009492:	f001 fa81 	bl	800a998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009496:	f002 fda7 	bl	800bfe8 <vPortEnterCritical>
 800949a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094a0:	b25b      	sxtb	r3, r3
 80094a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a6:	d103      	bne.n	80094b0 <xQueueGenericSend+0x174>
 80094a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094b6:	b25b      	sxtb	r3, r3
 80094b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094bc:	d103      	bne.n	80094c6 <xQueueGenericSend+0x18a>
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094c6:	f002 fdc1 	bl	800c04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094ca:	1d3a      	adds	r2, r7, #4
 80094cc:	f107 0314 	add.w	r3, r7, #20
 80094d0:	4611      	mov	r1, r2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 fd9c 	bl	800b010 <xTaskCheckForTimeOut>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d124      	bne.n	8009528 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094e0:	f000 fc5e 	bl	8009da0 <prvIsQueueFull>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d018      	beq.n	800951c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80094ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ec:	3310      	adds	r3, #16
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	4611      	mov	r1, r2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f001 fcc4 	bl	800ae80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80094f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094fa:	f000 fbe9 	bl	8009cd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80094fe:	f001 fa59 	bl	800a9b4 <xTaskResumeAll>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	f47f af7c 	bne.w	8009402 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800950a:	4b0c      	ldr	r3, [pc, #48]	@ (800953c <xQueueGenericSend+0x200>)
 800950c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	e772      	b.n	8009402 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800951c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800951e:	f000 fbd7 	bl	8009cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009522:	f001 fa47 	bl	800a9b4 <xTaskResumeAll>
 8009526:	e76c      	b.n	8009402 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009528:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800952a:	f000 fbd1 	bl	8009cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800952e:	f001 fa41 	bl	800a9b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009532:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009534:	4618      	mov	r0, r3
 8009536:	3738      	adds	r7, #56	@ 0x38
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	e000ed04 	.word	0xe000ed04

08009540 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b090      	sub	sp, #64	@ 0x40
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10b      	bne.n	8009570 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800956a:	bf00      	nop
 800956c:	bf00      	nop
 800956e:	e7fd      	b.n	800956c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d103      	bne.n	800957e <xQueueGenericSendFromISR+0x3e>
 8009576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <xQueueGenericSendFromISR+0x42>
 800957e:	2301      	movs	r3, #1
 8009580:	e000      	b.n	8009584 <xQueueGenericSendFromISR+0x44>
 8009582:	2300      	movs	r3, #0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10b      	bne.n	80095a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800959a:	bf00      	nop
 800959c:	bf00      	nop
 800959e:	e7fd      	b.n	800959c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d103      	bne.n	80095ae <xQueueGenericSendFromISR+0x6e>
 80095a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d101      	bne.n	80095b2 <xQueueGenericSendFromISR+0x72>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e000      	b.n	80095b4 <xQueueGenericSendFromISR+0x74>
 80095b2:	2300      	movs	r3, #0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10b      	bne.n	80095d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	623b      	str	r3, [r7, #32]
}
 80095ca:	bf00      	nop
 80095cc:	bf00      	nop
 80095ce:	e7fd      	b.n	80095cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095d0:	f002 fdea 	bl	800c1a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095d4:	f3ef 8211 	mrs	r2, BASEPRI
 80095d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	61fa      	str	r2, [r7, #28]
 80095ea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80095ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d302      	bcc.n	8009602 <xQueueGenericSendFromISR+0xc2>
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d12f      	bne.n	8009662 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009604:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009608:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800960c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009610:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	68b9      	ldr	r1, [r7, #8]
 8009616:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009618:	f000 faca 	bl	8009bb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800961c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009624:	d112      	bne.n	800964c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800962a:	2b00      	cmp	r3, #0
 800962c:	d016      	beq.n	800965c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800962e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009630:	3324      	adds	r3, #36	@ 0x24
 8009632:	4618      	mov	r0, r3
 8009634:	f001 fc4a 	bl	800aecc <xTaskRemoveFromEventList>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00e      	beq.n	800965c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00b      	beq.n	800965c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	e007      	b.n	800965c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800964c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009650:	3301      	adds	r3, #1
 8009652:	b2db      	uxtb	r3, r3
 8009654:	b25a      	sxtb	r2, r3
 8009656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800965c:	2301      	movs	r3, #1
 800965e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009660:	e001      	b.n	8009666 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009662:	2300      	movs	r3, #0
 8009664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009668:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009670:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009674:	4618      	mov	r0, r3
 8009676:	3740      	adds	r7, #64	@ 0x40
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08e      	sub	sp, #56	@ 0x38
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800968a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10b      	bne.n	80096a8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	623b      	str	r3, [r7, #32]
}
 80096a2:	bf00      	nop
 80096a4:	bf00      	nop
 80096a6:	e7fd      	b.n	80096a4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80096a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	61fb      	str	r3, [r7, #28]
}
 80096c2:	bf00      	nop
 80096c4:	bf00      	nop
 80096c6:	e7fd      	b.n	80096c4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80096c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d103      	bne.n	80096d8 <xQueueGiveFromISR+0x5c>
 80096d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <xQueueGiveFromISR+0x60>
 80096d8:	2301      	movs	r3, #1
 80096da:	e000      	b.n	80096de <xQueueGiveFromISR+0x62>
 80096dc:	2300      	movs	r3, #0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10b      	bne.n	80096fa <xQueueGiveFromISR+0x7e>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	61bb      	str	r3, [r7, #24]
}
 80096f4:	bf00      	nop
 80096f6:	bf00      	nop
 80096f8:	e7fd      	b.n	80096f6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096fa:	f002 fd55 	bl	800c1a8 <vPortValidateInterruptPriority>
	__asm volatile
 80096fe:	f3ef 8211 	mrs	r2, BASEPRI
 8009702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	617a      	str	r2, [r7, #20]
 8009714:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009716:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009718:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800971a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009726:	429a      	cmp	r2, r3
 8009728:	d22b      	bcs.n	8009782 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800972a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009730:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009736:	1c5a      	adds	r2, r3, #1
 8009738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800973c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009744:	d112      	bne.n	800976c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800974a:	2b00      	cmp	r3, #0
 800974c:	d016      	beq.n	800977c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800974e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009750:	3324      	adds	r3, #36	@ 0x24
 8009752:	4618      	mov	r0, r3
 8009754:	f001 fbba 	bl	800aecc <xTaskRemoveFromEventList>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00e      	beq.n	800977c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00b      	beq.n	800977c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	2201      	movs	r2, #1
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	e007      	b.n	800977c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800976c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009770:	3301      	adds	r3, #1
 8009772:	b2db      	uxtb	r3, r3
 8009774:	b25a      	sxtb	r2, r3
 8009776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800977c:	2301      	movs	r3, #1
 800977e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009780:	e001      	b.n	8009786 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009782:	2300      	movs	r3, #0
 8009784:	637b      	str	r3, [r7, #52]	@ 0x34
 8009786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009788:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f383 8811 	msr	BASEPRI, r3
}
 8009790:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009794:	4618      	mov	r0, r3
 8009796:	3738      	adds	r7, #56	@ 0x38
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b08c      	sub	sp, #48	@ 0x30
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097a8:	2300      	movs	r3, #0
 80097aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10b      	bne.n	80097ce <xQueueReceive+0x32>
	__asm volatile
 80097b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	623b      	str	r3, [r7, #32]
}
 80097c8:	bf00      	nop
 80097ca:	bf00      	nop
 80097cc:	e7fd      	b.n	80097ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d103      	bne.n	80097dc <xQueueReceive+0x40>
 80097d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <xQueueReceive+0x44>
 80097dc:	2301      	movs	r3, #1
 80097de:	e000      	b.n	80097e2 <xQueueReceive+0x46>
 80097e0:	2300      	movs	r3, #0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10b      	bne.n	80097fe <xQueueReceive+0x62>
	__asm volatile
 80097e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	61fb      	str	r3, [r7, #28]
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	e7fd      	b.n	80097fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097fe:	f001 fe17 	bl	800b430 <xTaskGetSchedulerState>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d102      	bne.n	800980e <xQueueReceive+0x72>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <xQueueReceive+0x76>
 800980e:	2301      	movs	r3, #1
 8009810:	e000      	b.n	8009814 <xQueueReceive+0x78>
 8009812:	2300      	movs	r3, #0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10b      	bne.n	8009830 <xQueueReceive+0x94>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981c:	f383 8811 	msr	BASEPRI, r3
 8009820:	f3bf 8f6f 	isb	sy
 8009824:	f3bf 8f4f 	dsb	sy
 8009828:	61bb      	str	r3, [r7, #24]
}
 800982a:	bf00      	nop
 800982c:	bf00      	nop
 800982e:	e7fd      	b.n	800982c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009830:	f002 fbda 	bl	800bfe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009838:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800983a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983c:	2b00      	cmp	r3, #0
 800983e:	d01f      	beq.n	8009880 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009840:	68b9      	ldr	r1, [r7, #8]
 8009842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009844:	f000 fa1e 	bl	8009c84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984a:	1e5a      	subs	r2, r3, #1
 800984c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00f      	beq.n	8009878 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985a:	3310      	adds	r3, #16
 800985c:	4618      	mov	r0, r3
 800985e:	f001 fb35 	bl	800aecc <xTaskRemoveFromEventList>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d007      	beq.n	8009878 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009868:	4b3c      	ldr	r3, [pc, #240]	@ (800995c <xQueueReceive+0x1c0>)
 800986a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800986e:	601a      	str	r2, [r3, #0]
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009878:	f002 fbe8 	bl	800c04c <vPortExitCritical>
				return pdPASS;
 800987c:	2301      	movs	r3, #1
 800987e:	e069      	b.n	8009954 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d103      	bne.n	800988e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009886:	f002 fbe1 	bl	800c04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800988a:	2300      	movs	r3, #0
 800988c:	e062      	b.n	8009954 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800988e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009890:	2b00      	cmp	r3, #0
 8009892:	d106      	bne.n	80098a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009894:	f107 0310 	add.w	r3, r7, #16
 8009898:	4618      	mov	r0, r3
 800989a:	f001 fba3 	bl	800afe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800989e:	2301      	movs	r3, #1
 80098a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098a2:	f002 fbd3 	bl	800c04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098a6:	f001 f877 	bl	800a998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098aa:	f002 fb9d 	bl	800bfe8 <vPortEnterCritical>
 80098ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098b4:	b25b      	sxtb	r3, r3
 80098b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ba:	d103      	bne.n	80098c4 <xQueueReceive+0x128>
 80098bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098ca:	b25b      	sxtb	r3, r3
 80098cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d0:	d103      	bne.n	80098da <xQueueReceive+0x13e>
 80098d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098da:	f002 fbb7 	bl	800c04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098de:	1d3a      	adds	r2, r7, #4
 80098e0:	f107 0310 	add.w	r3, r7, #16
 80098e4:	4611      	mov	r1, r2
 80098e6:	4618      	mov	r0, r3
 80098e8:	f001 fb92 	bl	800b010 <xTaskCheckForTimeOut>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d123      	bne.n	800993a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098f4:	f000 fa3e 	bl	8009d74 <prvIsQueueEmpty>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d017      	beq.n	800992e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009900:	3324      	adds	r3, #36	@ 0x24
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	4611      	mov	r1, r2
 8009906:	4618      	mov	r0, r3
 8009908:	f001 faba 	bl	800ae80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800990c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800990e:	f000 f9df 	bl	8009cd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009912:	f001 f84f 	bl	800a9b4 <xTaskResumeAll>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d189      	bne.n	8009830 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800991c:	4b0f      	ldr	r3, [pc, #60]	@ (800995c <xQueueReceive+0x1c0>)
 800991e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	e780      	b.n	8009830 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800992e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009930:	f000 f9ce 	bl	8009cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009934:	f001 f83e 	bl	800a9b4 <xTaskResumeAll>
 8009938:	e77a      	b.n	8009830 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800993a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800993c:	f000 f9c8 	bl	8009cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009940:	f001 f838 	bl	800a9b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009946:	f000 fa15 	bl	8009d74 <prvIsQueueEmpty>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	f43f af6f 	beq.w	8009830 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009952:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009954:	4618      	mov	r0, r3
 8009956:	3730      	adds	r7, #48	@ 0x30
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	e000ed04 	.word	0xe000ed04

08009960 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b08e      	sub	sp, #56	@ 0x38
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800996a:	2300      	movs	r3, #0
 800996c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009972:	2300      	movs	r3, #0
 8009974:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10b      	bne.n	8009994 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	623b      	str	r3, [r7, #32]
}
 800998e:	bf00      	nop
 8009990:	bf00      	nop
 8009992:	e7fd      	b.n	8009990 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00b      	beq.n	80099b4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	61fb      	str	r3, [r7, #28]
}
 80099ae:	bf00      	nop
 80099b0:	bf00      	nop
 80099b2:	e7fd      	b.n	80099b0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099b4:	f001 fd3c 	bl	800b430 <xTaskGetSchedulerState>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d102      	bne.n	80099c4 <xQueueSemaphoreTake+0x64>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <xQueueSemaphoreTake+0x68>
 80099c4:	2301      	movs	r3, #1
 80099c6:	e000      	b.n	80099ca <xQueueSemaphoreTake+0x6a>
 80099c8:	2300      	movs	r3, #0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10b      	bne.n	80099e6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	61bb      	str	r3, [r7, #24]
}
 80099e0:	bf00      	nop
 80099e2:	bf00      	nop
 80099e4:	e7fd      	b.n	80099e2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099e6:	f002 faff 	bl	800bfe8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80099ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80099f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d024      	beq.n	8009a40 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80099f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f8:	1e5a      	subs	r2, r3, #1
 80099fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d104      	bne.n	8009a10 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009a06:	f001 ffff 	bl	800ba08 <pvTaskIncrementMutexHeldCount>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00f      	beq.n	8009a38 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a1a:	3310      	adds	r3, #16
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f001 fa55 	bl	800aecc <xTaskRemoveFromEventList>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d007      	beq.n	8009a38 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a28:	4b54      	ldr	r3, [pc, #336]	@ (8009b7c <xQueueSemaphoreTake+0x21c>)
 8009a2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a38:	f002 fb08 	bl	800c04c <vPortExitCritical>
				return pdPASS;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e098      	b.n	8009b72 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d112      	bne.n	8009a6c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00b      	beq.n	8009a64 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a50:	f383 8811 	msr	BASEPRI, r3
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	617b      	str	r3, [r7, #20]
}
 8009a5e:	bf00      	nop
 8009a60:	bf00      	nop
 8009a62:	e7fd      	b.n	8009a60 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009a64:	f002 faf2 	bl	800c04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	e082      	b.n	8009b72 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d106      	bne.n	8009a80 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a72:	f107 030c 	add.w	r3, r7, #12
 8009a76:	4618      	mov	r0, r3
 8009a78:	f001 fab4 	bl	800afe4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a80:	f002 fae4 	bl	800c04c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a84:	f000 ff88 	bl	800a998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a88:	f002 faae 	bl	800bfe8 <vPortEnterCritical>
 8009a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a92:	b25b      	sxtb	r3, r3
 8009a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a98:	d103      	bne.n	8009aa2 <xQueueSemaphoreTake+0x142>
 8009a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009aa8:	b25b      	sxtb	r3, r3
 8009aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aae:	d103      	bne.n	8009ab8 <xQueueSemaphoreTake+0x158>
 8009ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ab8:	f002 fac8 	bl	800c04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009abc:	463a      	mov	r2, r7
 8009abe:	f107 030c 	add.w	r3, r7, #12
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f001 faa3 	bl	800b010 <xTaskCheckForTimeOut>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d132      	bne.n	8009b36 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ad0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009ad2:	f000 f94f 	bl	8009d74 <prvIsQueueEmpty>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d026      	beq.n	8009b2a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d109      	bne.n	8009af8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009ae4:	f002 fa80 	bl	800bfe8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f001 fcbd 	bl	800b46c <xTaskPriorityInherit>
 8009af2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009af4:	f002 faaa 	bl	800c04c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009afa:	3324      	adds	r3, #36	@ 0x24
 8009afc:	683a      	ldr	r2, [r7, #0]
 8009afe:	4611      	mov	r1, r2
 8009b00:	4618      	mov	r0, r3
 8009b02:	f001 f9bd 	bl	800ae80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b08:	f000 f8e2 	bl	8009cd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b0c:	f000 ff52 	bl	800a9b4 <xTaskResumeAll>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f47f af67 	bne.w	80099e6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009b18:	4b18      	ldr	r3, [pc, #96]	@ (8009b7c <xQueueSemaphoreTake+0x21c>)
 8009b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	e75d      	b.n	80099e6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009b2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b2c:	f000 f8d0 	bl	8009cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b30:	f000 ff40 	bl	800a9b4 <xTaskResumeAll>
 8009b34:	e757      	b.n	80099e6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009b36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b38:	f000 f8ca 	bl	8009cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b3c:	f000 ff3a 	bl	800a9b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b42:	f000 f917 	bl	8009d74 <prvIsQueueEmpty>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f43f af4c 	beq.w	80099e6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00d      	beq.n	8009b70 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009b54:	f002 fa48 	bl	800bfe8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009b58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b5a:	f000 f811 	bl	8009b80 <prvGetDisinheritPriorityAfterTimeout>
 8009b5e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b66:	4618      	mov	r0, r3
 8009b68:	f001 fd7e 	bl	800b668 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009b6c:	f002 fa6e 	bl	800c04c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3738      	adds	r7, #56	@ 0x38
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	e000ed04 	.word	0xe000ed04

08009b80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d006      	beq.n	8009b9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f1c3 0307 	rsb	r3, r3, #7
 8009b9a:	60fb      	str	r3, [r7, #12]
 8009b9c:	e001      	b.n	8009ba2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
	}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b086      	sub	sp, #24
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10d      	bne.n	8009bea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d14d      	bne.n	8009c72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f001 fcbc 	bl	800b558 <xTaskPriorityDisinherit>
 8009be0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	609a      	str	r2, [r3, #8]
 8009be8:	e043      	b.n	8009c72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d119      	bne.n	8009c24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6858      	ldr	r0, [r3, #4]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	68b9      	ldr	r1, [r7, #8]
 8009bfc:	f004 fb69 	bl	800e2d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c08:	441a      	add	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d32b      	bcc.n	8009c72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	605a      	str	r2, [r3, #4]
 8009c22:	e026      	b.n	8009c72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	68d8      	ldr	r0, [r3, #12]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	f004 fb4f 	bl	800e2d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	68da      	ldr	r2, [r3, #12]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c3c:	425b      	negs	r3, r3
 8009c3e:	441a      	add	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	68da      	ldr	r2, [r3, #12]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d207      	bcs.n	8009c60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	689a      	ldr	r2, [r3, #8]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c58:	425b      	negs	r3, r3
 8009c5a:	441a      	add	r2, r3
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d105      	bne.n	8009c72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009c7a:	697b      	ldr	r3, [r7, #20]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3718      	adds	r7, #24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d018      	beq.n	8009cc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68da      	ldr	r2, [r3, #12]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c9e:	441a      	add	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	68da      	ldr	r2, [r3, #12]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d303      	bcc.n	8009cb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68d9      	ldr	r1, [r3, #12]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	6838      	ldr	r0, [r7, #0]
 8009cc4:	f004 fb05 	bl	800e2d2 <memcpy>
	}
}
 8009cc8:	bf00      	nop
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009cd8:	f002 f986 	bl	800bfe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ce2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ce4:	e011      	b.n	8009d0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d012      	beq.n	8009d14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	3324      	adds	r3, #36	@ 0x24
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f001 f8ea 	bl	800aecc <xTaskRemoveFromEventList>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009cfe:	f001 f9eb 	bl	800b0d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	dce9      	bgt.n	8009ce6 <prvUnlockQueue+0x16>
 8009d12:	e000      	b.n	8009d16 <prvUnlockQueue+0x46>
					break;
 8009d14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	22ff      	movs	r2, #255	@ 0xff
 8009d1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009d1e:	f002 f995 	bl	800c04c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d22:	f002 f961 	bl	800bfe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d2e:	e011      	b.n	8009d54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d012      	beq.n	8009d5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3310      	adds	r3, #16
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f001 f8c5 	bl	800aecc <xTaskRemoveFromEventList>
 8009d42:	4603      	mov	r3, r0
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d001      	beq.n	8009d4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d48:	f001 f9c6 	bl	800b0d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	dce9      	bgt.n	8009d30 <prvUnlockQueue+0x60>
 8009d5c:	e000      	b.n	8009d60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	22ff      	movs	r2, #255	@ 0xff
 8009d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009d68:	f002 f970 	bl	800c04c <vPortExitCritical>
}
 8009d6c:	bf00      	nop
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d7c:	f002 f934 	bl	800bfe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d102      	bne.n	8009d8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	60fb      	str	r3, [r7, #12]
 8009d8c:	e001      	b.n	8009d92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d92:	f002 f95b 	bl	800c04c <vPortExitCritical>

	return xReturn;
 8009d96:	68fb      	ldr	r3, [r7, #12]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009da8:	f002 f91e 	bl	800bfe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d102      	bne.n	8009dbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009db8:	2301      	movs	r3, #1
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	e001      	b.n	8009dc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009dc2:	f002 f943 	bl	800c04c <vPortExitCritical>

	return xReturn;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08c      	sub	sp, #48	@ 0x30
 8009dd4:	af02      	add	r7, sp, #8
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d111      	bne.n	8009e06 <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8009de2:	2301      	movs	r3, #1
 8009de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b04      	cmp	r3, #4
 8009dec:	d81d      	bhi.n	8009e2a <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	61fb      	str	r3, [r7, #28]
}
 8009e00:	bf00      	nop
 8009e02:	bf00      	nop
 8009e04:	e7fd      	b.n	8009e02 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10b      	bne.n	8009e2a <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8009e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	61bb      	str	r3, [r7, #24]
}
 8009e24:	bf00      	nop
 8009e26:	bf00      	nop
 8009e28:	e7fd      	b.n	8009e26 <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d90b      	bls.n	8009e4a <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	617b      	str	r3, [r7, #20]
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop
 8009e48:	e7fd      	b.n	8009e46 <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8009e50:	2301      	movs	r3, #1
 8009e52:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	3301      	adds	r3, #1
 8009e58:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	3324      	adds	r3, #36	@ 0x24
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f002 f9e4 	bl	800c22c <pvPortMalloc>
 8009e64:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00a      	beq.n	8009e82 <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8009e72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	6a38      	ldr	r0, [r7, #32]
 8009e7e:	f000 fb0b 	bl	800a498 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8009e82:	6a3b      	ldr	r3, [r7, #32]
	}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3728      	adds	r7, #40	@ 0x28
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10b      	bne.n	8009eb6 <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	60fb      	str	r3, [r7, #12]
}
 8009eb0:	bf00      	nop
 8009eb2:	bf00      	nop
 8009eb4:	e7fd      	b.n	8009eb2 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	689a      	ldr	r2, [r3, #8]
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d304      	bcc.n	8009ee6 <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8009ee6:	697b      	ldr	r3, [r7, #20]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b090      	sub	sp, #64	@ 0x40
 8009ef8:	af02      	add	r7, sp, #8
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10b      	bne.n	8009f2c <xStreamBufferSend+0x38>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f26:	bf00      	nop
 8009f28:	bf00      	nop
 8009f2a:	e7fd      	b.n	8009f28 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8009f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10b      	bne.n	8009f4a <xStreamBufferSend+0x56>
	__asm volatile
 8009f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	623b      	str	r3, [r7, #32]
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
 8009f48:	e7fd      	b.n	8009f46 <xStreamBufferSend+0x52>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f4c:	7f1b      	ldrb	r3, [r3, #28]
 8009f4e:	f003 0301 	and.w	r3, r3, #1
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d012      	beq.n	8009f7c <xStreamBufferSend+0x88>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f58:	3304      	adds	r3, #4
 8009f5a:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8009f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d80b      	bhi.n	8009f7c <xStreamBufferSend+0x88>
	__asm volatile
 8009f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	61fb      	str	r3, [r7, #28]
}
 8009f76:	bf00      	nop
 8009f78:	bf00      	nop
 8009f7a:	e7fd      	b.n	8009f78 <xStreamBufferSend+0x84>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d03f      	beq.n	800a002 <xStreamBufferSend+0x10e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8009f82:	f107 0310 	add.w	r3, r7, #16
 8009f86:	4618      	mov	r0, r3
 8009f88:	f001 f804 	bl	800af94 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8009f8c:	f002 f82c 	bl	800bfe8 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009f90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f92:	f7ff ff7b 	bl	8009e8c <xStreamBufferSpacesAvailable>
 8009f96:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 8009f98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d218      	bcs.n	8009fd2 <xStreamBufferSend+0xde>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	f001 fe67 	bl	800bc74 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8009fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00b      	beq.n	8009fc6 <xStreamBufferSend+0xd2>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	61bb      	str	r3, [r7, #24]
}
 8009fc0:	bf00      	nop
 8009fc2:	bf00      	nop
 8009fc4:	e7fd      	b.n	8009fc2 <xStreamBufferSend+0xce>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8009fc6:	f001 fa23 	bl	800b410 <xTaskGetCurrentTaskHandle>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fce:	615a      	str	r2, [r3, #20]
 8009fd0:	e002      	b.n	8009fd8 <xStreamBufferSend+0xe4>
				}
				else
				{
					taskEXIT_CRITICAL();
 8009fd2:	f002 f83b 	bl	800c04c <vPortExitCritical>
					break;
 8009fd6:	e014      	b.n	800a002 <xStreamBufferSend+0x10e>
				}
			}
			taskEXIT_CRITICAL();
 8009fd8:	f002 f838 	bl	800c04c <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	f001 fd24 	bl	800ba30 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8009fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fea:	2200      	movs	r2, #0
 8009fec:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8009fee:	463a      	mov	r2, r7
 8009ff0:	f107 0310 	add.w	r3, r7, #16
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f001 f80a 	bl	800b010 <xTaskCheckForTimeOut>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d0c4      	beq.n	8009f8c <xStreamBufferSend+0x98>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800a002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a004:	2b00      	cmp	r3, #0
 800a006:	d103      	bne.n	800a010 <xStreamBufferSend+0x11c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800a008:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a00a:	f7ff ff3f 	bl	8009e8c <xStreamBufferSpacesAvailable>
 800a00e:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800a010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	68b9      	ldr	r1, [r7, #8]
 800a01a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a01c:	f000 f823 	bl	800a066 <prvWriteMessageToBuffer>
 800a020:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 800a022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a024:	2b00      	cmp	r3, #0
 800a026:	d019      	beq.n	800a05c <xStreamBufferSend+0x168>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800a028:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a02a:	f000 fa15 	bl	800a458 <prvBytesInBuffer>
 800a02e:	4602      	mov	r2, r0
 800a030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	429a      	cmp	r2, r3
 800a036:	d311      	bcc.n	800a05c <xStreamBufferSend+0x168>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800a038:	f000 fcae 	bl	800a998 <vTaskSuspendAll>
 800a03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d009      	beq.n	800a058 <xStreamBufferSend+0x164>
 800a044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a046:	6918      	ldr	r0, [r3, #16]
 800a048:	2300      	movs	r3, #0
 800a04a:	2200      	movs	r2, #0
 800a04c:	2100      	movs	r1, #0
 800a04e:	f001 fd4f 	bl	800baf0 <xTaskGenericNotify>
 800a052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a054:	2200      	movs	r2, #0
 800a056:	611a      	str	r2, [r3, #16]
 800a058:	f000 fcac 	bl	800a9b4 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800a05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3738      	adds	r7, #56	@ 0x38
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b086      	sub	sp, #24
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	60f8      	str	r0, [r7, #12]
 800a06e:	60b9      	str	r1, [r7, #8]
 800a070:	607a      	str	r2, [r7, #4]
 800a072:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d102      	bne.n	800a080 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800a07a:	2300      	movs	r3, #0
 800a07c:	617b      	str	r3, [r7, #20]
 800a07e:	e01d      	b.n	800a0bc <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	7f1b      	ldrb	r3, [r3, #28]
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d108      	bne.n	800a09e <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800a08c:	2301      	movs	r3, #1
 800a08e:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	4293      	cmp	r3, r2
 800a096:	bf28      	it	cs
 800a098:	4613      	movcs	r3, r2
 800a09a:	607b      	str	r3, [r7, #4]
 800a09c:	e00e      	b.n	800a0bc <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d308      	bcc.n	800a0b8 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800a0aa:	1d3b      	adds	r3, r7, #4
 800a0ac:	2204      	movs	r2, #4
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 f8df 	bl	800a274 <prvWriteBytesToBuffer>
 800a0b6:	e001      	b.n	800a0bc <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d007      	beq.n	800a0d2 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	68b9      	ldr	r1, [r7, #8]
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f000 f8d3 	bl	800a274 <prvWriteBytesToBuffer>
 800a0ce:	6138      	str	r0, [r7, #16]
 800a0d0:	e001      	b.n	800a0d6 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800a0d6:	693b      	ldr	r3, [r7, #16]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3718      	adds	r7, #24
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b08e      	sub	sp, #56	@ 0x38
 800a0e4:	af02      	add	r7, sp, #8
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
 800a0ec:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10b      	bne.n	800a114 <xStreamBufferReceive+0x34>
	__asm volatile
 800a0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a100:	f383 8811 	msr	BASEPRI, r3
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	61fb      	str	r3, [r7, #28]
}
 800a10e:	bf00      	nop
 800a110:	bf00      	nop
 800a112:	e7fd      	b.n	800a110 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10b      	bne.n	800a132 <xStreamBufferReceive+0x52>
	__asm volatile
 800a11a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11e:	f383 8811 	msr	BASEPRI, r3
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	61bb      	str	r3, [r7, #24]
}
 800a12c:	bf00      	nop
 800a12e:	bf00      	nop
 800a130:	e7fd      	b.n	800a12e <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	7f1b      	ldrb	r3, [r3, #28]
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d002      	beq.n	800a144 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800a13e:	2304      	movs	r3, #4
 800a140:	627b      	str	r3, [r7, #36]	@ 0x24
 800a142:	e001      	b.n	800a148 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d035      	beq.n	800a1ba <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800a14e:	f001 ff4b 	bl	800bfe8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800a152:	6a38      	ldr	r0, [r7, #32]
 800a154:	f000 f980 	bl	800a458 <prvBytesInBuffer>
 800a158:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800a15a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15e:	429a      	cmp	r2, r3
 800a160:	d817      	bhi.n	800a192 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800a162:	2000      	movs	r0, #0
 800a164:	f001 fd86 	bl	800bc74 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800a168:	6a3b      	ldr	r3, [r7, #32]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00b      	beq.n	800a188 <xStreamBufferReceive+0xa8>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	617b      	str	r3, [r7, #20]
}
 800a182:	bf00      	nop
 800a184:	bf00      	nop
 800a186:	e7fd      	b.n	800a184 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800a188:	f001 f942 	bl	800b410 <xTaskGetCurrentTaskHandle>
 800a18c:	4602      	mov	r2, r0
 800a18e:	6a3b      	ldr	r3, [r7, #32]
 800a190:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a192:	f001 ff5b 	bl	800c04c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800a196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d811      	bhi.n	800a1c2 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	f001 fc43 	bl	800ba30 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800a1b0:	6a38      	ldr	r0, [r7, #32]
 800a1b2:	f000 f951 	bl	800a458 <prvBytesInBuffer>
 800a1b6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a1b8:	e003      	b.n	800a1c2 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800a1ba:	6a38      	ldr	r0, [r7, #32]
 800a1bc:	f000 f94c 	bl	800a458 <prvBytesInBuffer>
 800a1c0:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800a1c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d91d      	bls.n	800a206 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	68b9      	ldr	r1, [r7, #8]
 800a1d4:	6a38      	ldr	r0, [r7, #32]
 800a1d6:	f000 f81b 	bl	800a210 <prvReadMessageFromBuffer>
 800a1da:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800a1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d011      	beq.n	800a206 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800a1e2:	f000 fbd9 	bl	800a998 <vTaskSuspendAll>
 800a1e6:	6a3b      	ldr	r3, [r7, #32]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d009      	beq.n	800a202 <xStreamBufferReceive+0x122>
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	6958      	ldr	r0, [r3, #20]
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	f001 fc7a 	bl	800baf0 <xTaskGenericNotify>
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	2200      	movs	r2, #0
 800a200:	615a      	str	r2, [r3, #20]
 800a202:	f000 fbd7 	bl	800a9b4 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800a206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3730      	adds	r7, #48	@ 0x30
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b088      	sub	sp, #32
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
 800a21c:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800a21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a220:	2b00      	cmp	r3, #0
 800a222:	d019      	beq.n	800a258 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800a22a:	f107 0110 	add.w	r1, r7, #16
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f000 f893 	bl	800a35e <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800a23c:	683a      	ldr	r2, [r7, #0]
 800a23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800a244:	69fa      	ldr	r2, [r7, #28]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d907      	bls.n	800a25c <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	69ba      	ldr	r2, [r7, #24]
 800a250:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800a252:	2300      	movs	r3, #0
 800a254:	61fb      	str	r3, [r7, #28]
 800a256:	e001      	b.n	800a25c <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	69fa      	ldr	r2, [r7, #28]
 800a260:	68b9      	ldr	r1, [r7, #8]
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f000 f87b 	bl	800a35e <prvReadBytesFromBuffer>
 800a268:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800a26a:	697b      	ldr	r3, [r7, #20]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3720      	adds	r7, #32
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b08a      	sub	sp, #40	@ 0x28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d10b      	bne.n	800a29e <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 800a286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	61fb      	str	r3, [r7, #28]
}
 800a298:	bf00      	nop
 800a29a:	bf00      	nop
 800a29c:	e7fd      	b.n	800a29a <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	689a      	ldr	r2, [r3, #8]
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	bf28      	it	cs
 800a2b2:	4613      	movcs	r3, r2
 800a2b4:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800a2b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	441a      	add	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d90b      	bls.n	800a2dc <prvWriteBytesToBuffer+0x68>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	61bb      	str	r3, [r7, #24]
}
 800a2d6:	bf00      	nop
 800a2d8:	bf00      	nop
 800a2da:	e7fd      	b.n	800a2d8 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	699a      	ldr	r2, [r3, #24]
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e2:	4413      	add	r3, r2
 800a2e4:	6a3a      	ldr	r2, [r7, #32]
 800a2e6:	68b9      	ldr	r1, [r7, #8]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f003 fff2 	bl	800e2d2 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d91d      	bls.n	800a332 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	1ad2      	subs	r2, r2, r3
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	429a      	cmp	r2, r3
 800a302:	d90b      	bls.n	800a31c <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 800a304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a308:	f383 8811 	msr	BASEPRI, r3
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	617b      	str	r3, [r7, #20]
}
 800a316:	bf00      	nop
 800a318:	bf00      	nop
 800a31a:	e7fd      	b.n	800a318 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6998      	ldr	r0, [r3, #24]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	18d1      	adds	r1, r2, r3
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	6a3b      	ldr	r3, [r7, #32]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	461a      	mov	r2, r3
 800a32e:	f003 ffd0 	bl	800e2d2 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800a332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4413      	add	r3, r2
 800a338:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a340:	429a      	cmp	r2, r3
 800a342:	d304      	bcc.n	800a34e <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a352:	605a      	str	r2, [r3, #4]

	return xCount;
 800a354:	687b      	ldr	r3, [r7, #4]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3728      	adds	r7, #40	@ 0x28
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b08a      	sub	sp, #40	@ 0x28
 800a362:	af00      	add	r7, sp, #0
 800a364:	60f8      	str	r0, [r7, #12]
 800a366:	60b9      	str	r1, [r7, #8]
 800a368:	607a      	str	r2, [r7, #4]
 800a36a:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	4293      	cmp	r3, r2
 800a372:	bf28      	it	cs
 800a374:	4613      	movcs	r3, r2
 800a376:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d067      	beq.n	800a44e <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	689a      	ldr	r2, [r3, #8]
 800a388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	6a3a      	ldr	r2, [r7, #32]
 800a38e:	4293      	cmp	r3, r2
 800a390:	bf28      	it	cs
 800a392:	4613      	movcs	r3, r2
 800a394:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800a396:	69fa      	ldr	r2, [r7, #28]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d90b      	bls.n	800a3b6 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	61bb      	str	r3, [r7, #24]
}
 800a3b0:	bf00      	nop
 800a3b2:	bf00      	nop
 800a3b4:	e7fd      	b.n	800a3b2 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800a3b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	441a      	add	r2, r3
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d90b      	bls.n	800a3dc <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 800a3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c8:	f383 8811 	msr	BASEPRI, r3
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	617b      	str	r3, [r7, #20]
}
 800a3d6:	bf00      	nop
 800a3d8:	bf00      	nop
 800a3da:	e7fd      	b.n	800a3d8 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	699a      	ldr	r2, [r3, #24]
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e2:	4413      	add	r3, r2
 800a3e4:	69fa      	ldr	r2, [r7, #28]
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	68b8      	ldr	r0, [r7, #8]
 800a3ea:	f003 ff72 	bl	800e2d2 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800a3ee:	6a3a      	ldr	r2, [r7, #32]
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d91a      	bls.n	800a42c <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800a3f6:	6a3a      	ldr	r2, [r7, #32]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d90b      	bls.n	800a416 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	613b      	str	r3, [r7, #16]
}
 800a410:	bf00      	nop
 800a412:	bf00      	nop
 800a414:	e7fd      	b.n	800a412 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	18d0      	adds	r0, r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6999      	ldr	r1, [r3, #24]
 800a420:	6a3a      	ldr	r2, [r7, #32]
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	461a      	mov	r2, r3
 800a428:	f003 ff53 	bl	800e2d2 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800a42c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a42e:	6a3b      	ldr	r3, [r7, #32]
 800a430:	4413      	add	r3, r2
 800a432:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d304      	bcc.n	800a448 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a44c:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800a44e:	6a3b      	ldr	r3, [r7, #32]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3728      	adds	r7, #40	@ 0x28
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	689a      	ldr	r2, [r3, #8]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	4413      	add	r3, r2
 800a46a:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d304      	bcc.n	800a48a <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800a48a:	68fb      	ldr	r3, [r7, #12]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
 800a4a4:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800a4a6:	2355      	movs	r3, #85	@ 0x55
 800a4a8:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	6979      	ldr	r1, [r7, #20]
 800a4ae:	68b8      	ldr	r0, [r7, #8]
 800a4b0:	f003 fe0d 	bl	800e0ce <memset>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d00b      	beq.n	800a4d4 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	613b      	str	r3, [r7, #16]
}
 800a4ce:	bf00      	nop
 800a4d0:	bf00      	nop
 800a4d2:	e7fd      	b.n	800a4d0 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800a4d4:	2224      	movs	r2, #36	@ 0x24
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f003 fdf8 	bl	800e0ce <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	68ba      	ldr	r2, [r7, #8]
 800a4e2:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a4f6:	771a      	strb	r2, [r3, #28]
}
 800a4f8:	bf00      	nop
 800a4fa:	3718      	adds	r7, #24
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a500:	b580      	push	{r7, lr}
 800a502:	b08c      	sub	sp, #48	@ 0x30
 800a504:	af04      	add	r7, sp, #16
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	603b      	str	r3, [r7, #0]
 800a50c:	4613      	mov	r3, r2
 800a50e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a510:	88fb      	ldrh	r3, [r7, #6]
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4618      	mov	r0, r3
 800a516:	f001 fe89 	bl	800c22c <pvPortMalloc>
 800a51a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00e      	beq.n	800a540 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a522:	20bc      	movs	r0, #188	@ 0xbc
 800a524:	f001 fe82 	bl	800c22c <pvPortMalloc>
 800a528:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d003      	beq.n	800a538 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	697a      	ldr	r2, [r7, #20]
 800a534:	631a      	str	r2, [r3, #48]	@ 0x30
 800a536:	e005      	b.n	800a544 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a538:	6978      	ldr	r0, [r7, #20]
 800a53a:	f001 ff45 	bl	800c3c8 <vPortFree>
 800a53e:	e001      	b.n	800a544 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a540:	2300      	movs	r3, #0
 800a542:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d013      	beq.n	800a572 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a54a:	88fa      	ldrh	r2, [r7, #6]
 800a54c:	2300      	movs	r3, #0
 800a54e:	9303      	str	r3, [sp, #12]
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	9302      	str	r3, [sp, #8]
 800a554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a556:	9301      	str	r3, [sp, #4]
 800a558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	68b9      	ldr	r1, [r7, #8]
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f000 f80f 	bl	800a584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a566:	69f8      	ldr	r0, [r7, #28]
 800a568:	f000 f8b6 	bl	800a6d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a56c:	2301      	movs	r3, #1
 800a56e:	61bb      	str	r3, [r7, #24]
 800a570:	e002      	b.n	800a578 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a572:	f04f 33ff 	mov.w	r3, #4294967295
 800a576:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a578:	69bb      	ldr	r3, [r7, #24]
	}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3720      	adds	r7, #32
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
	...

0800a584 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b088      	sub	sp, #32
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
 800a590:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a594:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	461a      	mov	r2, r3
 800a59c:	21a5      	movs	r1, #165	@ 0xa5
 800a59e:	f003 fd96 	bl	800e0ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	f023 0307 	bic.w	r3, r3, #7
 800a5ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	f003 0307 	and.w	r3, r3, #7
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00b      	beq.n	800a5de <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	617b      	str	r3, [r7, #20]
}
 800a5d8:	bf00      	nop
 800a5da:	bf00      	nop
 800a5dc:	e7fd      	b.n	800a5da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d01f      	beq.n	800a624 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	61fb      	str	r3, [r7, #28]
 800a5e8:	e012      	b.n	800a610 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	7819      	ldrb	r1, [r3, #0]
 800a5f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3334      	adds	r3, #52	@ 0x34
 800a5fa:	460a      	mov	r2, r1
 800a5fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	4413      	add	r3, r2
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d006      	beq.n	800a618 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	3301      	adds	r3, #1
 800a60e:	61fb      	str	r3, [r7, #28]
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	2b1f      	cmp	r3, #31
 800a614:	d9e9      	bls.n	800a5ea <prvInitialiseNewTask+0x66>
 800a616:	e000      	b.n	800a61a <prvInitialiseNewTask+0x96>
			{
				break;
 800a618:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800a622:	e003      	b.n	800a62c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a626:	2200      	movs	r2, #0
 800a628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a62e:	2b06      	cmp	r3, #6
 800a630:	d901      	bls.n	800a636 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a632:	2306      	movs	r3, #6
 800a634:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a63a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a640:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800a642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a644:	2200      	movs	r2, #0
 800a646:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64a:	3304      	adds	r3, #4
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fe fceb 	bl	8009028 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a654:	3318      	adds	r3, #24
 800a656:	4618      	mov	r0, r3
 800a658:	f7fe fce6 	bl	8009028 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a660:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a664:	f1c3 0207 	rsb	r2, r3, #7
 800a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a670:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a674:	2200      	movs	r2, #0
 800a676:	665a      	str	r2, [r3, #100]	@ 0x64
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67a:	2200      	movs	r2, #0
 800a67c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a682:	2200      	movs	r2, #0
 800a684:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68a:	3368      	adds	r3, #104	@ 0x68
 800a68c:	224c      	movs	r2, #76	@ 0x4c
 800a68e:	2100      	movs	r1, #0
 800a690:	4618      	mov	r0, r3
 800a692:	f003 fd1c 	bl	800e0ce <memset>
 800a696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a698:	4a0c      	ldr	r2, [pc, #48]	@ (800a6cc <prvInitialiseNewTask+0x148>)
 800a69a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69e:	4a0c      	ldr	r2, [pc, #48]	@ (800a6d0 <prvInitialiseNewTask+0x14c>)
 800a6a0:	671a      	str	r2, [r3, #112]	@ 0x70
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a4:	4a0b      	ldr	r2, [pc, #44]	@ (800a6d4 <prvInitialiseNewTask+0x150>)
 800a6a6:	675a      	str	r2, [r3, #116]	@ 0x74
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6a8:	683a      	ldr	r2, [r7, #0]
 800a6aa:	68f9      	ldr	r1, [r7, #12]
 800a6ac:	69b8      	ldr	r0, [r7, #24]
 800a6ae:	f001 fb6d 	bl	800bd8c <pxPortInitialiseStack>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d002      	beq.n	800a6c4 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6c4:	bf00      	nop
 800a6c6:	3720      	adds	r7, #32
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	20007864 	.word	0x20007864
 800a6d0:	200078cc 	.word	0x200078cc
 800a6d4:	20007934 	.word	0x20007934

0800a6d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6e0:	f001 fc82 	bl	800bfe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6e4:	4b2c      	ldr	r3, [pc, #176]	@ (800a798 <prvAddNewTaskToReadyList+0xc0>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	4a2b      	ldr	r2, [pc, #172]	@ (800a798 <prvAddNewTaskToReadyList+0xc0>)
 800a6ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6ee:	4b2b      	ldr	r3, [pc, #172]	@ (800a79c <prvAddNewTaskToReadyList+0xc4>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d109      	bne.n	800a70a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6f6:	4a29      	ldr	r2, [pc, #164]	@ (800a79c <prvAddNewTaskToReadyList+0xc4>)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6fc:	4b26      	ldr	r3, [pc, #152]	@ (800a798 <prvAddNewTaskToReadyList+0xc0>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d110      	bne.n	800a726 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a704:	f000 fd0c 	bl	800b120 <prvInitialiseTaskLists>
 800a708:	e00d      	b.n	800a726 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a70a:	4b25      	ldr	r3, [pc, #148]	@ (800a7a0 <prvAddNewTaskToReadyList+0xc8>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d109      	bne.n	800a726 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a712:	4b22      	ldr	r3, [pc, #136]	@ (800a79c <prvAddNewTaskToReadyList+0xc4>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d802      	bhi.n	800a726 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a720:	4a1e      	ldr	r2, [pc, #120]	@ (800a79c <prvAddNewTaskToReadyList+0xc4>)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a726:	4b1f      	ldr	r3, [pc, #124]	@ (800a7a4 <prvAddNewTaskToReadyList+0xcc>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3301      	adds	r3, #1
 800a72c:	4a1d      	ldr	r2, [pc, #116]	@ (800a7a4 <prvAddNewTaskToReadyList+0xcc>)
 800a72e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a730:	4b1c      	ldr	r3, [pc, #112]	@ (800a7a4 <prvAddNewTaskToReadyList+0xcc>)
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a73c:	2201      	movs	r2, #1
 800a73e:	409a      	lsls	r2, r3
 800a740:	4b19      	ldr	r3, [pc, #100]	@ (800a7a8 <prvAddNewTaskToReadyList+0xd0>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4313      	orrs	r3, r2
 800a746:	4a18      	ldr	r2, [pc, #96]	@ (800a7a8 <prvAddNewTaskToReadyList+0xd0>)
 800a748:	6013      	str	r3, [r2, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a74e:	4613      	mov	r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4413      	add	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4a15      	ldr	r2, [pc, #84]	@ (800a7ac <prvAddNewTaskToReadyList+0xd4>)
 800a758:	441a      	add	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	3304      	adds	r3, #4
 800a75e:	4619      	mov	r1, r3
 800a760:	4610      	mov	r0, r2
 800a762:	f7fe fc6e 	bl	8009042 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a766:	f001 fc71 	bl	800c04c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a76a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a0 <prvAddNewTaskToReadyList+0xc8>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00e      	beq.n	800a790 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a772:	4b0a      	ldr	r3, [pc, #40]	@ (800a79c <prvAddNewTaskToReadyList+0xc4>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d207      	bcs.n	800a790 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a780:	4b0b      	ldr	r3, [pc, #44]	@ (800a7b0 <prvAddNewTaskToReadyList+0xd8>)
 800a782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a786:	601a      	str	r2, [r3, #0]
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	20000aa8 	.word	0x20000aa8
 800a79c:	200009a8 	.word	0x200009a8
 800a7a0:	20000ab4 	.word	0x20000ab4
 800a7a4:	20000ac4 	.word	0x20000ac4
 800a7a8:	20000ab0 	.word	0x20000ab0
 800a7ac:	200009ac 	.word	0x200009ac
 800a7b0:	e000ed04 	.word	0xe000ed04

0800a7b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d018      	beq.n	800a7f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a7c6:	4b14      	ldr	r3, [pc, #80]	@ (800a818 <vTaskDelay+0x64>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00b      	beq.n	800a7e6 <vTaskDelay+0x32>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	60bb      	str	r3, [r7, #8]
}
 800a7e0:	bf00      	nop
 800a7e2:	bf00      	nop
 800a7e4:	e7fd      	b.n	800a7e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7e6:	f000 f8d7 	bl	800a998 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f001 fa67 	bl	800bcc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7f2:	f000 f8df 	bl	800a9b4 <xTaskResumeAll>
 800a7f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d107      	bne.n	800a80e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a7fe:	4b07      	ldr	r3, [pc, #28]	@ (800a81c <vTaskDelay+0x68>)
 800a800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a804:	601a      	str	r2, [r3, #0]
 800a806:	f3bf 8f4f 	dsb	sy
 800a80a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a80e:	bf00      	nop
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	20000ad0 	.word	0x20000ad0
 800a81c:	e000ed04 	.word	0xe000ed04

0800a820 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800a820:	b580      	push	{r7, lr}
 800a822:	b088      	sub	sp, #32
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10b      	bne.n	800a84a <eTaskGetState+0x2a>
	__asm volatile
 800a832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	60bb      	str	r3, [r7, #8]
}
 800a844:	bf00      	nop
 800a846:	bf00      	nop
 800a848:	e7fd      	b.n	800a846 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800a84a:	4b24      	ldr	r3, [pc, #144]	@ (800a8dc <eTaskGetState+0xbc>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	69ba      	ldr	r2, [r7, #24]
 800a850:	429a      	cmp	r2, r3
 800a852:	d102      	bne.n	800a85a <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800a854:	2300      	movs	r3, #0
 800a856:	77fb      	strb	r3, [r7, #31]
 800a858:	e03a      	b.n	800a8d0 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800a85a:	f001 fbc5 	bl	800bfe8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	695b      	ldr	r3, [r3, #20]
 800a862:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800a864:	4b1e      	ldr	r3, [pc, #120]	@ (800a8e0 <eTaskGetState+0xc0>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800a86a:	4b1e      	ldr	r3, [pc, #120]	@ (800a8e4 <eTaskGetState+0xc4>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800a870:	f001 fbec 	bl	800c04c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800a874:	697a      	ldr	r2, [r7, #20]
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d003      	beq.n	800a884 <eTaskGetState+0x64>
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	429a      	cmp	r2, r3
 800a882:	d102      	bne.n	800a88a <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800a884:	2302      	movs	r3, #2
 800a886:	77fb      	strb	r3, [r7, #31]
 800a888:	e022      	b.n	800a8d0 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	4a16      	ldr	r2, [pc, #88]	@ (800a8e8 <eTaskGetState+0xc8>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d112      	bne.n	800a8b8 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10b      	bne.n	800a8b2 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d102      	bne.n	800a8ac <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	77fb      	strb	r3, [r7, #31]
 800a8aa:	e011      	b.n	800a8d0 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	77fb      	strb	r3, [r7, #31]
 800a8b0:	e00e      	b.n	800a8d0 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	77fb      	strb	r3, [r7, #31]
 800a8b6:	e00b      	b.n	800a8d0 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	4a0c      	ldr	r2, [pc, #48]	@ (800a8ec <eTaskGetState+0xcc>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d002      	beq.n	800a8c6 <eTaskGetState+0xa6>
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d102      	bne.n	800a8cc <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800a8c6:	2304      	movs	r3, #4
 800a8c8:	77fb      	strb	r3, [r7, #31]
 800a8ca:	e001      	b.n	800a8d0 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800a8d0:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3720      	adds	r7, #32
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	200009a8 	.word	0x200009a8
 800a8e0:	20000a60 	.word	0x20000a60
 800a8e4:	20000a64 	.word	0x20000a64
 800a8e8:	20000a94 	.word	0x20000a94
 800a8ec:	20000a7c 	.word	0x20000a7c

0800a8f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a8f6:	4b20      	ldr	r3, [pc, #128]	@ (800a978 <vTaskStartScheduler+0x88>)
 800a8f8:	9301      	str	r3, [sp, #4]
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	2300      	movs	r3, #0
 800a900:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a904:	491d      	ldr	r1, [pc, #116]	@ (800a97c <vTaskStartScheduler+0x8c>)
 800a906:	481e      	ldr	r0, [pc, #120]	@ (800a980 <vTaskStartScheduler+0x90>)
 800a908:	f7ff fdfa 	bl	800a500 <xTaskCreate>
 800a90c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d11d      	bne.n	800a950 <vTaskStartScheduler+0x60>
	__asm volatile
 800a914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a918:	f383 8811 	msr	BASEPRI, r3
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	60bb      	str	r3, [r7, #8]
}
 800a926:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a928:	4b16      	ldr	r3, [pc, #88]	@ (800a984 <vTaskStartScheduler+0x94>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	3368      	adds	r3, #104	@ 0x68
 800a92e:	4a16      	ldr	r2, [pc, #88]	@ (800a988 <vTaskStartScheduler+0x98>)
 800a930:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a932:	4b16      	ldr	r3, [pc, #88]	@ (800a98c <vTaskStartScheduler+0x9c>)
 800a934:	f04f 32ff 	mov.w	r2, #4294967295
 800a938:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a93a:	4b15      	ldr	r3, [pc, #84]	@ (800a990 <vTaskStartScheduler+0xa0>)
 800a93c:	2201      	movs	r2, #1
 800a93e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a940:	4b14      	ldr	r3, [pc, #80]	@ (800a994 <vTaskStartScheduler+0xa4>)
 800a942:	2200      	movs	r2, #0
 800a944:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a946:	f7f6 fce1 	bl	800130c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a94a:	f001 faa9 	bl	800bea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a94e:	e00f      	b.n	800a970 <vTaskStartScheduler+0x80>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a956:	d10b      	bne.n	800a970 <vTaskStartScheduler+0x80>
	__asm volatile
 800a958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	607b      	str	r3, [r7, #4]
}
 800a96a:	bf00      	nop
 800a96c:	bf00      	nop
 800a96e:	e7fd      	b.n	800a96c <vTaskStartScheduler+0x7c>
}
 800a970:	bf00      	nop
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	20000acc 	.word	0x20000acc
 800a97c:	08010a18 	.word	0x08010a18
 800a980:	0800b0f1 	.word	0x0800b0f1
 800a984:	200009a8 	.word	0x200009a8
 800a988:	20000430 	.word	0x20000430
 800a98c:	20000ac8 	.word	0x20000ac8
 800a990:	20000ab4 	.word	0x20000ab4
 800a994:	20000aac 	.word	0x20000aac

0800a998 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a998:	b480      	push	{r7}
 800a99a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a99c:	4b04      	ldr	r3, [pc, #16]	@ (800a9b0 <vTaskSuspendAll+0x18>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	4a03      	ldr	r2, [pc, #12]	@ (800a9b0 <vTaskSuspendAll+0x18>)
 800a9a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a9a6:	bf00      	nop
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr
 800a9b0:	20000ad0 	.word	0x20000ad0

0800a9b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a9c2:	4b42      	ldr	r3, [pc, #264]	@ (800aacc <xTaskResumeAll+0x118>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d10b      	bne.n	800a9e2 <xTaskResumeAll+0x2e>
	__asm volatile
 800a9ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	603b      	str	r3, [r7, #0]
}
 800a9dc:	bf00      	nop
 800a9de:	bf00      	nop
 800a9e0:	e7fd      	b.n	800a9de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a9e2:	f001 fb01 	bl	800bfe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a9e6:	4b39      	ldr	r3, [pc, #228]	@ (800aacc <xTaskResumeAll+0x118>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	4a37      	ldr	r2, [pc, #220]	@ (800aacc <xTaskResumeAll+0x118>)
 800a9ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9f0:	4b36      	ldr	r3, [pc, #216]	@ (800aacc <xTaskResumeAll+0x118>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d161      	bne.n	800aabc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a9f8:	4b35      	ldr	r3, [pc, #212]	@ (800aad0 <xTaskResumeAll+0x11c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d05d      	beq.n	800aabc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa00:	e02e      	b.n	800aa60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa02:	4b34      	ldr	r3, [pc, #208]	@ (800aad4 <xTaskResumeAll+0x120>)
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	3318      	adds	r3, #24
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe fb74 	bl	80090fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	3304      	adds	r3, #4
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7fe fb6f 	bl	80090fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa22:	2201      	movs	r2, #1
 800aa24:	409a      	lsls	r2, r3
 800aa26:	4b2c      	ldr	r3, [pc, #176]	@ (800aad8 <xTaskResumeAll+0x124>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	4a2a      	ldr	r2, [pc, #168]	@ (800aad8 <xTaskResumeAll+0x124>)
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa34:	4613      	mov	r3, r2
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	4413      	add	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	4a27      	ldr	r2, [pc, #156]	@ (800aadc <xTaskResumeAll+0x128>)
 800aa3e:	441a      	add	r2, r3
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	3304      	adds	r3, #4
 800aa44:	4619      	mov	r1, r3
 800aa46:	4610      	mov	r0, r2
 800aa48:	f7fe fafb 	bl	8009042 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa50:	4b23      	ldr	r3, [pc, #140]	@ (800aae0 <xTaskResumeAll+0x12c>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d302      	bcc.n	800aa60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aa5a:	4b22      	ldr	r3, [pc, #136]	@ (800aae4 <xTaskResumeAll+0x130>)
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa60:	4b1c      	ldr	r3, [pc, #112]	@ (800aad4 <xTaskResumeAll+0x120>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1cc      	bne.n	800aa02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d001      	beq.n	800aa72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa6e:	f000 fcaf 	bl	800b3d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aa72:	4b1d      	ldr	r3, [pc, #116]	@ (800aae8 <xTaskResumeAll+0x134>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d010      	beq.n	800aaa0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa7e:	f000 f8c7 	bl	800ac10 <xTaskIncrementTick>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d002      	beq.n	800aa8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aa88:	4b16      	ldr	r3, [pc, #88]	@ (800aae4 <xTaskResumeAll+0x130>)
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1f1      	bne.n	800aa7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aa9a:	4b13      	ldr	r3, [pc, #76]	@ (800aae8 <xTaskResumeAll+0x134>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aaa0:	4b10      	ldr	r3, [pc, #64]	@ (800aae4 <xTaskResumeAll+0x130>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d009      	beq.n	800aabc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aaac:	4b0f      	ldr	r3, [pc, #60]	@ (800aaec <xTaskResumeAll+0x138>)
 800aaae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aabc:	f001 fac6 	bl	800c04c <vPortExitCritical>

	return xAlreadyYielded;
 800aac0:	68bb      	ldr	r3, [r7, #8]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	20000ad0 	.word	0x20000ad0
 800aad0:	20000aa8 	.word	0x20000aa8
 800aad4:	20000a68 	.word	0x20000a68
 800aad8:	20000ab0 	.word	0x20000ab0
 800aadc:	200009ac 	.word	0x200009ac
 800aae0:	200009a8 	.word	0x200009a8
 800aae4:	20000abc 	.word	0x20000abc
 800aae8:	20000ab8 	.word	0x20000ab8
 800aaec:	e000ed04 	.word	0xe000ed04

0800aaf0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b086      	sub	sp, #24
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800aafc:	2300      	movs	r3, #0
 800aafe:	617b      	str	r3, [r7, #20]
 800ab00:	2307      	movs	r3, #7
 800ab02:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800ab04:	f7ff ff48 	bl	800a998 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800ab08:	4b3b      	ldr	r3, [pc, #236]	@ (800abf8 <uxTaskGetSystemState+0x108>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d36a      	bcc.n	800abe8 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	3b01      	subs	r3, #1
 800ab16:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800ab18:	697a      	ldr	r2, [r7, #20]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	00db      	lsls	r3, r3, #3
 800ab1e:	4413      	add	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	461a      	mov	r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	1898      	adds	r0, r3, r2
 800ab28:	693a      	ldr	r2, [r7, #16]
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	4413      	add	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4a32      	ldr	r2, [pc, #200]	@ (800abfc <uxTaskGetSystemState+0x10c>)
 800ab34:	4413      	add	r3, r2
 800ab36:	2201      	movs	r2, #1
 800ab38:	4619      	mov	r1, r3
 800ab3a:	f000 fbc5 	bl	800b2c8 <prvListTasksWithinSingleList>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	4413      	add	r3, r2
 800ab44:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e2      	bne.n	800ab12 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800ab4c:	697a      	ldr	r2, [r7, #20]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	00db      	lsls	r3, r3, #3
 800ab52:	4413      	add	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	461a      	mov	r2, r3
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	4a28      	ldr	r2, [pc, #160]	@ (800ac00 <uxTaskGetSystemState+0x110>)
 800ab5e:	6811      	ldr	r1, [r2, #0]
 800ab60:	2202      	movs	r2, #2
 800ab62:	4618      	mov	r0, r3
 800ab64:	f000 fbb0 	bl	800b2c8 <prvListTasksWithinSingleList>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	4613      	mov	r3, r2
 800ab74:	00db      	lsls	r3, r3, #3
 800ab76:	4413      	add	r3, r2
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4413      	add	r3, r2
 800ab80:	4a20      	ldr	r2, [pc, #128]	@ (800ac04 <uxTaskGetSystemState+0x114>)
 800ab82:	6811      	ldr	r1, [r2, #0]
 800ab84:	2202      	movs	r2, #2
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 fb9e 	bl	800b2c8 <prvListTasksWithinSingleList>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	4413      	add	r3, r2
 800ab92:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	4613      	mov	r3, r2
 800ab98:	00db      	lsls	r3, r3, #3
 800ab9a:	4413      	add	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	461a      	mov	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4413      	add	r3, r2
 800aba4:	2204      	movs	r2, #4
 800aba6:	4918      	ldr	r1, [pc, #96]	@ (800ac08 <uxTaskGetSystemState+0x118>)
 800aba8:	4618      	mov	r0, r3
 800abaa:	f000 fb8d 	bl	800b2c8 <prvListTasksWithinSingleList>
 800abae:	4602      	mov	r2, r0
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	4413      	add	r3, r2
 800abb4:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	4613      	mov	r3, r2
 800abba:	00db      	lsls	r3, r3, #3
 800abbc:	4413      	add	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	461a      	mov	r2, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	4413      	add	r3, r2
 800abc6:	2203      	movs	r2, #3
 800abc8:	4910      	ldr	r1, [pc, #64]	@ (800ac0c <uxTaskGetSystemState+0x11c>)
 800abca:	4618      	mov	r0, r3
 800abcc:	f000 fb7c 	bl	800b2c8 <prvListTasksWithinSingleList>
 800abd0:	4602      	mov	r2, r0
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	4413      	add	r3, r2
 800abd6:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d004      	beq.n	800abe8 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800abde:	f7f6 fb9f 	bl	8001320 <getRunTimeCounterValue>
 800abe2:	4602      	mov	r2, r0
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800abe8:	f7ff fee4 	bl	800a9b4 <xTaskResumeAll>

		return uxTask;
 800abec:	697b      	ldr	r3, [r7, #20]
	}
 800abee:	4618      	mov	r0, r3
 800abf0:	3718      	adds	r7, #24
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	20000aa8 	.word	0x20000aa8
 800abfc:	200009ac 	.word	0x200009ac
 800ac00:	20000a60 	.word	0x20000a60
 800ac04:	20000a64 	.word	0x20000a64
 800ac08:	20000a7c 	.word	0x20000a7c
 800ac0c:	20000a94 	.word	0x20000a94

0800ac10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b086      	sub	sp, #24
 800ac14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac16:	2300      	movs	r3, #0
 800ac18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac1a:	4b4f      	ldr	r3, [pc, #316]	@ (800ad58 <xTaskIncrementTick+0x148>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f040 808f 	bne.w	800ad42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac24:	4b4d      	ldr	r3, [pc, #308]	@ (800ad5c <xTaskIncrementTick+0x14c>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac2c:	4a4b      	ldr	r2, [pc, #300]	@ (800ad5c <xTaskIncrementTick+0x14c>)
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d121      	bne.n	800ac7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac38:	4b49      	ldr	r3, [pc, #292]	@ (800ad60 <xTaskIncrementTick+0x150>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00b      	beq.n	800ac5a <xTaskIncrementTick+0x4a>
	__asm volatile
 800ac42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	603b      	str	r3, [r7, #0]
}
 800ac54:	bf00      	nop
 800ac56:	bf00      	nop
 800ac58:	e7fd      	b.n	800ac56 <xTaskIncrementTick+0x46>
 800ac5a:	4b41      	ldr	r3, [pc, #260]	@ (800ad60 <xTaskIncrementTick+0x150>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	4b40      	ldr	r3, [pc, #256]	@ (800ad64 <xTaskIncrementTick+0x154>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4a3e      	ldr	r2, [pc, #248]	@ (800ad60 <xTaskIncrementTick+0x150>)
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	4a3e      	ldr	r2, [pc, #248]	@ (800ad64 <xTaskIncrementTick+0x154>)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6013      	str	r3, [r2, #0]
 800ac6e:	4b3e      	ldr	r3, [pc, #248]	@ (800ad68 <xTaskIncrementTick+0x158>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3301      	adds	r3, #1
 800ac74:	4a3c      	ldr	r2, [pc, #240]	@ (800ad68 <xTaskIncrementTick+0x158>)
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	f000 fbaa 	bl	800b3d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac7c:	4b3b      	ldr	r3, [pc, #236]	@ (800ad6c <xTaskIncrementTick+0x15c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d348      	bcc.n	800ad18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac86:	4b36      	ldr	r3, [pc, #216]	@ (800ad60 <xTaskIncrementTick+0x150>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d104      	bne.n	800ac9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac90:	4b36      	ldr	r3, [pc, #216]	@ (800ad6c <xTaskIncrementTick+0x15c>)
 800ac92:	f04f 32ff 	mov.w	r2, #4294967295
 800ac96:	601a      	str	r2, [r3, #0]
					break;
 800ac98:	e03e      	b.n	800ad18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac9a:	4b31      	ldr	r3, [pc, #196]	@ (800ad60 <xTaskIncrementTick+0x150>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800acaa:	693a      	ldr	r2, [r7, #16]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d203      	bcs.n	800acba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800acb2:	4a2e      	ldr	r2, [pc, #184]	@ (800ad6c <xTaskIncrementTick+0x15c>)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800acb8:	e02e      	b.n	800ad18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	3304      	adds	r3, #4
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fe fa1c 	bl	80090fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d004      	beq.n	800acd6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	3318      	adds	r3, #24
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fe fa13 	bl	80090fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acda:	2201      	movs	r2, #1
 800acdc:	409a      	lsls	r2, r3
 800acde:	4b24      	ldr	r3, [pc, #144]	@ (800ad70 <xTaskIncrementTick+0x160>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	4a22      	ldr	r2, [pc, #136]	@ (800ad70 <xTaskIncrementTick+0x160>)
 800ace6:	6013      	str	r3, [r2, #0]
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acec:	4613      	mov	r3, r2
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	4413      	add	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4a1f      	ldr	r2, [pc, #124]	@ (800ad74 <xTaskIncrementTick+0x164>)
 800acf6:	441a      	add	r2, r3
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	3304      	adds	r3, #4
 800acfc:	4619      	mov	r1, r3
 800acfe:	4610      	mov	r0, r2
 800ad00:	f7fe f99f 	bl	8009042 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad08:	4b1b      	ldr	r3, [pc, #108]	@ (800ad78 <xTaskIncrementTick+0x168>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d3b9      	bcc.n	800ac86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ad12:	2301      	movs	r3, #1
 800ad14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad16:	e7b6      	b.n	800ac86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad18:	4b17      	ldr	r3, [pc, #92]	@ (800ad78 <xTaskIncrementTick+0x168>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad1e:	4915      	ldr	r1, [pc, #84]	@ (800ad74 <xTaskIncrementTick+0x164>)
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	440b      	add	r3, r1
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d901      	bls.n	800ad34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ad30:	2301      	movs	r3, #1
 800ad32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ad34:	4b11      	ldr	r3, [pc, #68]	@ (800ad7c <xTaskIncrementTick+0x16c>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d007      	beq.n	800ad4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	617b      	str	r3, [r7, #20]
 800ad40:	e004      	b.n	800ad4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad42:	4b0f      	ldr	r3, [pc, #60]	@ (800ad80 <xTaskIncrementTick+0x170>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3301      	adds	r3, #1
 800ad48:	4a0d      	ldr	r2, [pc, #52]	@ (800ad80 <xTaskIncrementTick+0x170>)
 800ad4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ad4c:	697b      	ldr	r3, [r7, #20]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3718      	adds	r7, #24
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20000ad0 	.word	0x20000ad0
 800ad5c:	20000aac 	.word	0x20000aac
 800ad60:	20000a60 	.word	0x20000a60
 800ad64:	20000a64 	.word	0x20000a64
 800ad68:	20000ac0 	.word	0x20000ac0
 800ad6c:	20000ac8 	.word	0x20000ac8
 800ad70:	20000ab0 	.word	0x20000ab0
 800ad74:	200009ac 	.word	0x200009ac
 800ad78:	200009a8 	.word	0x200009a8
 800ad7c:	20000abc 	.word	0x20000abc
 800ad80:	20000ab8 	.word	0x20000ab8

0800ad84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad8a:	4b35      	ldr	r3, [pc, #212]	@ (800ae60 <vTaskSwitchContext+0xdc>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d003      	beq.n	800ad9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad92:	4b34      	ldr	r3, [pc, #208]	@ (800ae64 <vTaskSwitchContext+0xe0>)
 800ad94:	2201      	movs	r2, #1
 800ad96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad98:	e05e      	b.n	800ae58 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800ad9a:	4b32      	ldr	r3, [pc, #200]	@ (800ae64 <vTaskSwitchContext+0xe0>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ada0:	f7f6 fabe 	bl	8001320 <getRunTimeCounterValue>
 800ada4:	4603      	mov	r3, r0
 800ada6:	4a30      	ldr	r2, [pc, #192]	@ (800ae68 <vTaskSwitchContext+0xe4>)
 800ada8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800adaa:	4b2f      	ldr	r3, [pc, #188]	@ (800ae68 <vTaskSwitchContext+0xe4>)
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	4b2f      	ldr	r3, [pc, #188]	@ (800ae6c <vTaskSwitchContext+0xe8>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d909      	bls.n	800adca <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800adb6:	4b2e      	ldr	r3, [pc, #184]	@ (800ae70 <vTaskSwitchContext+0xec>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 800adbc:	4a2a      	ldr	r2, [pc, #168]	@ (800ae68 <vTaskSwitchContext+0xe4>)
 800adbe:	6810      	ldr	r0, [r2, #0]
 800adc0:	4a2a      	ldr	r2, [pc, #168]	@ (800ae6c <vTaskSwitchContext+0xe8>)
 800adc2:	6812      	ldr	r2, [r2, #0]
 800adc4:	1a82      	subs	r2, r0, r2
 800adc6:	440a      	add	r2, r1
 800adc8:	665a      	str	r2, [r3, #100]	@ 0x64
			ulTaskSwitchedInTime = ulTotalRunTime;
 800adca:	4b27      	ldr	r3, [pc, #156]	@ (800ae68 <vTaskSwitchContext+0xe4>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a27      	ldr	r2, [pc, #156]	@ (800ae6c <vTaskSwitchContext+0xe8>)
 800add0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add2:	4b28      	ldr	r3, [pc, #160]	@ (800ae74 <vTaskSwitchContext+0xf0>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	fab3 f383 	clz	r3, r3
 800adde:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ade0:	7afb      	ldrb	r3, [r7, #11]
 800ade2:	f1c3 031f 	rsb	r3, r3, #31
 800ade6:	617b      	str	r3, [r7, #20]
 800ade8:	4923      	ldr	r1, [pc, #140]	@ (800ae78 <vTaskSwitchContext+0xf4>)
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	4613      	mov	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	440b      	add	r3, r1
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10b      	bne.n	800ae14 <vTaskSwitchContext+0x90>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	607b      	str	r3, [r7, #4]
}
 800ae0e:	bf00      	nop
 800ae10:	bf00      	nop
 800ae12:	e7fd      	b.n	800ae10 <vTaskSwitchContext+0x8c>
 800ae14:	697a      	ldr	r2, [r7, #20]
 800ae16:	4613      	mov	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4a16      	ldr	r2, [pc, #88]	@ (800ae78 <vTaskSwitchContext+0xf4>)
 800ae20:	4413      	add	r3, r2
 800ae22:	613b      	str	r3, [r7, #16]
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	685a      	ldr	r2, [r3, #4]
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	605a      	str	r2, [r3, #4]
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	685a      	ldr	r2, [r3, #4]
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	3308      	adds	r3, #8
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d104      	bne.n	800ae44 <vTaskSwitchContext+0xc0>
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	605a      	str	r2, [r3, #4]
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	4a09      	ldr	r2, [pc, #36]	@ (800ae70 <vTaskSwitchContext+0xec>)
 800ae4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae4e:	4b08      	ldr	r3, [pc, #32]	@ (800ae70 <vTaskSwitchContext+0xec>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	3368      	adds	r3, #104	@ 0x68
 800ae54:	4a09      	ldr	r2, [pc, #36]	@ (800ae7c <vTaskSwitchContext+0xf8>)
 800ae56:	6013      	str	r3, [r2, #0]
}
 800ae58:	bf00      	nop
 800ae5a:	3718      	adds	r7, #24
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	20000ad0 	.word	0x20000ad0
 800ae64:	20000abc 	.word	0x20000abc
 800ae68:	20000ad8 	.word	0x20000ad8
 800ae6c:	20000ad4 	.word	0x20000ad4
 800ae70:	200009a8 	.word	0x200009a8
 800ae74:	20000ab0 	.word	0x20000ab0
 800ae78:	200009ac 	.word	0x200009ac
 800ae7c:	20000430 	.word	0x20000430

0800ae80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10b      	bne.n	800aea8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	60fb      	str	r3, [r7, #12]
}
 800aea2:	bf00      	nop
 800aea4:	bf00      	nop
 800aea6:	e7fd      	b.n	800aea4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aea8:	4b07      	ldr	r3, [pc, #28]	@ (800aec8 <vTaskPlaceOnEventList+0x48>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	3318      	adds	r3, #24
 800aeae:	4619      	mov	r1, r3
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7fe f8ea 	bl	800908a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aeb6:	2101      	movs	r1, #1
 800aeb8:	6838      	ldr	r0, [r7, #0]
 800aeba:	f000 ff01 	bl	800bcc0 <prvAddCurrentTaskToDelayedList>
}
 800aebe:	bf00      	nop
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	200009a8 	.word	0x200009a8

0800aecc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d10b      	bne.n	800aefa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee6:	f383 8811 	msr	BASEPRI, r3
 800aeea:	f3bf 8f6f 	isb	sy
 800aeee:	f3bf 8f4f 	dsb	sy
 800aef2:	60fb      	str	r3, [r7, #12]
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop
 800aef8:	e7fd      	b.n	800aef6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	3318      	adds	r3, #24
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fe f8fc 	bl	80090fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af04:	4b1d      	ldr	r3, [pc, #116]	@ (800af7c <xTaskRemoveFromEventList+0xb0>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d11c      	bne.n	800af46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	3304      	adds	r3, #4
 800af10:	4618      	mov	r0, r3
 800af12:	f7fe f8f3 	bl	80090fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af1a:	2201      	movs	r2, #1
 800af1c:	409a      	lsls	r2, r3
 800af1e:	4b18      	ldr	r3, [pc, #96]	@ (800af80 <xTaskRemoveFromEventList+0xb4>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4313      	orrs	r3, r2
 800af24:	4a16      	ldr	r2, [pc, #88]	@ (800af80 <xTaskRemoveFromEventList+0xb4>)
 800af26:	6013      	str	r3, [r2, #0]
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af2c:	4613      	mov	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4a13      	ldr	r2, [pc, #76]	@ (800af84 <xTaskRemoveFromEventList+0xb8>)
 800af36:	441a      	add	r2, r3
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	3304      	adds	r3, #4
 800af3c:	4619      	mov	r1, r3
 800af3e:	4610      	mov	r0, r2
 800af40:	f7fe f87f 	bl	8009042 <vListInsertEnd>
 800af44:	e005      	b.n	800af52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	3318      	adds	r3, #24
 800af4a:	4619      	mov	r1, r3
 800af4c:	480e      	ldr	r0, [pc, #56]	@ (800af88 <xTaskRemoveFromEventList+0xbc>)
 800af4e:	f7fe f878 	bl	8009042 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af56:	4b0d      	ldr	r3, [pc, #52]	@ (800af8c <xTaskRemoveFromEventList+0xc0>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d905      	bls.n	800af6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af60:	2301      	movs	r3, #1
 800af62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af64:	4b0a      	ldr	r3, [pc, #40]	@ (800af90 <xTaskRemoveFromEventList+0xc4>)
 800af66:	2201      	movs	r2, #1
 800af68:	601a      	str	r2, [r3, #0]
 800af6a:	e001      	b.n	800af70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800af6c:	2300      	movs	r3, #0
 800af6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800af70:	697b      	ldr	r3, [r7, #20]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3718      	adds	r7, #24
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	20000ad0 	.word	0x20000ad0
 800af80:	20000ab0 	.word	0x20000ab0
 800af84:	200009ac 	.word	0x200009ac
 800af88:	20000a68 	.word	0x20000a68
 800af8c:	200009a8 	.word	0x200009a8
 800af90:	20000abc 	.word	0x20000abc

0800af94 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10b      	bne.n	800afba <vTaskSetTimeOutState+0x26>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	60fb      	str	r3, [r7, #12]
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop
 800afb8:	e7fd      	b.n	800afb6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800afba:	f001 f815 	bl	800bfe8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800afbe:	4b07      	ldr	r3, [pc, #28]	@ (800afdc <vTaskSetTimeOutState+0x48>)
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800afc6:	4b06      	ldr	r3, [pc, #24]	@ (800afe0 <vTaskSetTimeOutState+0x4c>)
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800afce:	f001 f83d 	bl	800c04c <vPortExitCritical>
}
 800afd2:	bf00      	nop
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	20000ac0 	.word	0x20000ac0
 800afe0:	20000aac 	.word	0x20000aac

0800afe4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800afec:	4b06      	ldr	r3, [pc, #24]	@ (800b008 <vTaskInternalSetTimeOutState+0x24>)
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aff4:	4b05      	ldr	r3, [pc, #20]	@ (800b00c <vTaskInternalSetTimeOutState+0x28>)
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	605a      	str	r2, [r3, #4]
}
 800affc:	bf00      	nop
 800affe:	370c      	adds	r7, #12
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr
 800b008:	20000ac0 	.word	0x20000ac0
 800b00c:	20000aac 	.word	0x20000aac

0800b010 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b088      	sub	sp, #32
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10b      	bne.n	800b038 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	613b      	str	r3, [r7, #16]
}
 800b032:	bf00      	nop
 800b034:	bf00      	nop
 800b036:	e7fd      	b.n	800b034 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10b      	bne.n	800b056 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	60fb      	str	r3, [r7, #12]
}
 800b050:	bf00      	nop
 800b052:	bf00      	nop
 800b054:	e7fd      	b.n	800b052 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b056:	f000 ffc7 	bl	800bfe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b05a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0d0 <xTaskCheckForTimeOut+0xc0>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	69ba      	ldr	r2, [r7, #24]
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b072:	d102      	bne.n	800b07a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b074:	2300      	movs	r3, #0
 800b076:	61fb      	str	r3, [r7, #28]
 800b078:	e023      	b.n	800b0c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	4b15      	ldr	r3, [pc, #84]	@ (800b0d4 <xTaskCheckForTimeOut+0xc4>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	429a      	cmp	r2, r3
 800b084:	d007      	beq.n	800b096 <xTaskCheckForTimeOut+0x86>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	69ba      	ldr	r2, [r7, #24]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d302      	bcc.n	800b096 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b090:	2301      	movs	r3, #1
 800b092:	61fb      	str	r3, [r7, #28]
 800b094:	e015      	b.n	800b0c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d20b      	bcs.n	800b0b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	1ad2      	subs	r2, r2, r3
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7ff ff99 	bl	800afe4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	61fb      	str	r3, [r7, #28]
 800b0b6:	e004      	b.n	800b0c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b0c2:	f000 ffc3 	bl	800c04c <vPortExitCritical>

	return xReturn;
 800b0c6:	69fb      	ldr	r3, [r7, #28]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3720      	adds	r7, #32
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	20000aac 	.word	0x20000aac
 800b0d4:	20000ac0 	.word	0x20000ac0

0800b0d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b0d8:	b480      	push	{r7}
 800b0da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b0dc:	4b03      	ldr	r3, [pc, #12]	@ (800b0ec <vTaskMissedYield+0x14>)
 800b0de:	2201      	movs	r2, #1
 800b0e0:	601a      	str	r2, [r3, #0]
}
 800b0e2:	bf00      	nop
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr
 800b0ec:	20000abc 	.word	0x20000abc

0800b0f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b0f8:	f000 f852 	bl	800b1a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b0fc:	4b06      	ldr	r3, [pc, #24]	@ (800b118 <prvIdleTask+0x28>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d9f9      	bls.n	800b0f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b104:	4b05      	ldr	r3, [pc, #20]	@ (800b11c <prvIdleTask+0x2c>)
 800b106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b10a:	601a      	str	r2, [r3, #0]
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b114:	e7f0      	b.n	800b0f8 <prvIdleTask+0x8>
 800b116:	bf00      	nop
 800b118:	200009ac 	.word	0x200009ac
 800b11c:	e000ed04 	.word	0xe000ed04

0800b120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b126:	2300      	movs	r3, #0
 800b128:	607b      	str	r3, [r7, #4]
 800b12a:	e00c      	b.n	800b146 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	4613      	mov	r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4413      	add	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4a12      	ldr	r2, [pc, #72]	@ (800b180 <prvInitialiseTaskLists+0x60>)
 800b138:	4413      	add	r3, r2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fd ff54 	bl	8008fe8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	3301      	adds	r3, #1
 800b144:	607b      	str	r3, [r7, #4]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b06      	cmp	r3, #6
 800b14a:	d9ef      	bls.n	800b12c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b14c:	480d      	ldr	r0, [pc, #52]	@ (800b184 <prvInitialiseTaskLists+0x64>)
 800b14e:	f7fd ff4b 	bl	8008fe8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b152:	480d      	ldr	r0, [pc, #52]	@ (800b188 <prvInitialiseTaskLists+0x68>)
 800b154:	f7fd ff48 	bl	8008fe8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b158:	480c      	ldr	r0, [pc, #48]	@ (800b18c <prvInitialiseTaskLists+0x6c>)
 800b15a:	f7fd ff45 	bl	8008fe8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b15e:	480c      	ldr	r0, [pc, #48]	@ (800b190 <prvInitialiseTaskLists+0x70>)
 800b160:	f7fd ff42 	bl	8008fe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b164:	480b      	ldr	r0, [pc, #44]	@ (800b194 <prvInitialiseTaskLists+0x74>)
 800b166:	f7fd ff3f 	bl	8008fe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b16a:	4b0b      	ldr	r3, [pc, #44]	@ (800b198 <prvInitialiseTaskLists+0x78>)
 800b16c:	4a05      	ldr	r2, [pc, #20]	@ (800b184 <prvInitialiseTaskLists+0x64>)
 800b16e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b170:	4b0a      	ldr	r3, [pc, #40]	@ (800b19c <prvInitialiseTaskLists+0x7c>)
 800b172:	4a05      	ldr	r2, [pc, #20]	@ (800b188 <prvInitialiseTaskLists+0x68>)
 800b174:	601a      	str	r2, [r3, #0]
}
 800b176:	bf00      	nop
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	200009ac 	.word	0x200009ac
 800b184:	20000a38 	.word	0x20000a38
 800b188:	20000a4c 	.word	0x20000a4c
 800b18c:	20000a68 	.word	0x20000a68
 800b190:	20000a7c 	.word	0x20000a7c
 800b194:	20000a94 	.word	0x20000a94
 800b198:	20000a60 	.word	0x20000a60
 800b19c:	20000a64 	.word	0x20000a64

0800b1a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1a6:	e019      	b.n	800b1dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b1a8:	f000 ff1e 	bl	800bfe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1ac:	4b10      	ldr	r3, [pc, #64]	@ (800b1f0 <prvCheckTasksWaitingTermination+0x50>)
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fd ff9f 	bl	80090fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b1be:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f4 <prvCheckTasksWaitingTermination+0x54>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	4a0b      	ldr	r2, [pc, #44]	@ (800b1f4 <prvCheckTasksWaitingTermination+0x54>)
 800b1c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b1c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b1f8 <prvCheckTasksWaitingTermination+0x58>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	4a0a      	ldr	r2, [pc, #40]	@ (800b1f8 <prvCheckTasksWaitingTermination+0x58>)
 800b1d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b1d2:	f000 ff3b 	bl	800c04c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 f8e4 	bl	800b3a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1dc:	4b06      	ldr	r3, [pc, #24]	@ (800b1f8 <prvCheckTasksWaitingTermination+0x58>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1e1      	bne.n	800b1a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b1e4:	bf00      	nop
 800b1e6:	bf00      	nop
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	20000a7c 	.word	0x20000a7c
 800b1f4:	20000aa8 	.word	0x20000aa8
 800b1f8:	20000a90 	.word	0x20000a90

0800b1fc <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]
 800b208:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d102      	bne.n	800b216 <vTaskGetInfo+0x1a>
 800b210:	4b2c      	ldr	r3, [pc, #176]	@ (800b2c4 <vTaskGetInfo+0xc8>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	e000      	b.n	800b218 <vTaskGetInfo+0x1c>
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800b252:	78fb      	ldrb	r3, [r7, #3]
 800b254:	2b05      	cmp	r3, #5
 800b256:	d01a      	beq.n	800b28e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800b258:	4b1a      	ldr	r3, [pc, #104]	@ (800b2c4 <vTaskGetInfo+0xc8>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	697a      	ldr	r2, [r7, #20]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d103      	bne.n	800b26a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	2200      	movs	r2, #0
 800b266:	731a      	strb	r2, [r3, #12]
 800b268:	e018      	b.n	800b29c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	78fa      	ldrb	r2, [r7, #3]
 800b26e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800b270:	78fb      	ldrb	r3, [r7, #3]
 800b272:	2b03      	cmp	r3, #3
 800b274:	d112      	bne.n	800b29c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800b276:	f7ff fb8f 	bl	800a998 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d002      	beq.n	800b288 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	2202      	movs	r2, #2
 800b286:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800b288:	f7ff fb94 	bl	800a9b4 <xTaskResumeAll>
 800b28c:	e006      	b.n	800b29c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800b28e:	6978      	ldr	r0, [r7, #20]
 800b290:	f7ff fac6 	bl	800a820 <eTaskGetState>
 800b294:	4603      	mov	r3, r0
 800b296:	461a      	mov	r2, r3
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d009      	beq.n	800b2b6 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 f860 	bl	800b36c <prvTaskCheckFreeStackSpace>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800b2b4:	e002      	b.n	800b2bc <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	841a      	strh	r2, [r3, #32]
	}
 800b2bc:	bf00      	nop
 800b2be:	3718      	adds	r7, #24
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	200009a8 	.word	0x200009a8

0800b2c8 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b08a      	sub	sp, #40	@ 0x28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d03f      	beq.n	800b362 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	623b      	str	r3, [r7, #32]
 800b2e6:	6a3b      	ldr	r3, [r7, #32]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	6a3b      	ldr	r3, [r7, #32]
 800b2ee:	605a      	str	r2, [r3, #4]
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	685a      	ldr	r2, [r3, #4]
 800b2f4:	6a3b      	ldr	r3, [r7, #32]
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d104      	bne.n	800b306 <prvListTasksWithinSingleList+0x3e>
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	685a      	ldr	r2, [r3, #4]
 800b302:	6a3b      	ldr	r3, [r7, #32]
 800b304:	605a      	str	r2, [r3, #4]
 800b306:	6a3b      	ldr	r3, [r7, #32]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	61bb      	str	r3, [r7, #24]
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	685a      	ldr	r2, [r3, #4]
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	605a      	str	r2, [r3, #4]
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	685a      	ldr	r2, [r3, #4]
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	3308      	adds	r3, #8
 800b324:	429a      	cmp	r2, r3
 800b326:	d104      	bne.n	800b332 <prvListTasksWithinSingleList+0x6a>
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	605a      	str	r2, [r3, #4]
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800b33a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b33c:	4613      	mov	r3, r2
 800b33e:	00db      	lsls	r3, r3, #3
 800b340:	4413      	add	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	461a      	mov	r2, r3
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	1899      	adds	r1, r3, r2
 800b34a:	79fb      	ldrb	r3, [r7, #7]
 800b34c:	2201      	movs	r2, #1
 800b34e:	6978      	ldr	r0, [r7, #20]
 800b350:	f7ff ff54 	bl	800b1fc <vTaskGetInfo>
				uxTask++;
 800b354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b356:	3301      	adds	r3, #1
 800b358:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d1d5      	bne.n	800b30e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800b362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b364:	4618      	mov	r0, r3
 800b366:	3728      	adds	r7, #40	@ 0x28
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800b374:	2300      	movs	r3, #0
 800b376:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b378:	e005      	b.n	800b386 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	3301      	adds	r3, #1
 800b37e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	3301      	adds	r3, #1
 800b384:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	2ba5      	cmp	r3, #165	@ 0xa5
 800b38c:	d0f5      	beq.n	800b37a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	089b      	lsrs	r3, r3, #2
 800b392:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	b29b      	uxth	r3, r3
	}
 800b398:	4618      	mov	r0, r3
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3368      	adds	r3, #104	@ 0x68
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f002 fecd 	bl	800e150 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f001 f804 	bl	800c3c8 <vPortFree>
			vPortFree( pxTCB );
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f001 f801 	bl	800c3c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b3c6:	bf00      	nop
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
	...

0800b3d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b408 <prvResetNextTaskUnblockTime+0x38>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d104      	bne.n	800b3ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b40c <prvResetNextTaskUnblockTime+0x3c>)
 800b3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b3e8:	e008      	b.n	800b3fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3ea:	4b07      	ldr	r3, [pc, #28]	@ (800b408 <prvResetNextTaskUnblockTime+0x38>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	4a04      	ldr	r2, [pc, #16]	@ (800b40c <prvResetNextTaskUnblockTime+0x3c>)
 800b3fa:	6013      	str	r3, [r2, #0]
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	20000a60 	.word	0x20000a60
 800b40c:	20000ac8 	.word	0x20000ac8

0800b410 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b416:	4b05      	ldr	r3, [pc, #20]	@ (800b42c <xTaskGetCurrentTaskHandle+0x1c>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b41c:	687b      	ldr	r3, [r7, #4]
	}
 800b41e:	4618      	mov	r0, r3
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	200009a8 	.word	0x200009a8

0800b430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b436:	4b0b      	ldr	r3, [pc, #44]	@ (800b464 <xTaskGetSchedulerState+0x34>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d102      	bne.n	800b444 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b43e:	2301      	movs	r3, #1
 800b440:	607b      	str	r3, [r7, #4]
 800b442:	e008      	b.n	800b456 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b444:	4b08      	ldr	r3, [pc, #32]	@ (800b468 <xTaskGetSchedulerState+0x38>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d102      	bne.n	800b452 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b44c:	2302      	movs	r3, #2
 800b44e:	607b      	str	r3, [r7, #4]
 800b450:	e001      	b.n	800b456 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b452:	2300      	movs	r3, #0
 800b454:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b456:	687b      	ldr	r3, [r7, #4]
	}
 800b458:	4618      	mov	r0, r3
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	20000ab4 	.word	0x20000ab4
 800b468:	20000ad0 	.word	0x20000ad0

0800b46c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b478:	2300      	movs	r3, #0
 800b47a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d05e      	beq.n	800b540 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b486:	4b31      	ldr	r3, [pc, #196]	@ (800b54c <xTaskPriorityInherit+0xe0>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d24e      	bcs.n	800b52e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	2b00      	cmp	r3, #0
 800b496:	db06      	blt.n	800b4a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b498:	4b2c      	ldr	r3, [pc, #176]	@ (800b54c <xTaskPriorityInherit+0xe0>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b49e:	f1c3 0207 	rsb	r2, r3, #7
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	6959      	ldr	r1, [r3, #20]
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	4413      	add	r3, r2
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	4a26      	ldr	r2, [pc, #152]	@ (800b550 <xTaskPriorityInherit+0xe4>)
 800b4b8:	4413      	add	r3, r2
 800b4ba:	4299      	cmp	r1, r3
 800b4bc:	d12f      	bne.n	800b51e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7fd fe1a 	bl	80090fc <uxListRemove>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d10a      	bne.n	800b4e4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d8:	43da      	mvns	r2, r3
 800b4da:	4b1e      	ldr	r3, [pc, #120]	@ (800b554 <xTaskPriorityInherit+0xe8>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4013      	ands	r3, r2
 800b4e0:	4a1c      	ldr	r2, [pc, #112]	@ (800b554 <xTaskPriorityInherit+0xe8>)
 800b4e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b4e4:	4b19      	ldr	r3, [pc, #100]	@ (800b54c <xTaskPriorityInherit+0xe0>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	409a      	lsls	r2, r3
 800b4f6:	4b17      	ldr	r3, [pc, #92]	@ (800b554 <xTaskPriorityInherit+0xe8>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	4a15      	ldr	r2, [pc, #84]	@ (800b554 <xTaskPriorityInherit+0xe8>)
 800b4fe:	6013      	str	r3, [r2, #0]
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b504:	4613      	mov	r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	4a10      	ldr	r2, [pc, #64]	@ (800b550 <xTaskPriorityInherit+0xe4>)
 800b50e:	441a      	add	r2, r3
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	3304      	adds	r3, #4
 800b514:	4619      	mov	r1, r3
 800b516:	4610      	mov	r0, r2
 800b518:	f7fd fd93 	bl	8009042 <vListInsertEnd>
 800b51c:	e004      	b.n	800b528 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b51e:	4b0b      	ldr	r3, [pc, #44]	@ (800b54c <xTaskPriorityInherit+0xe0>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b528:	2301      	movs	r3, #1
 800b52a:	60fb      	str	r3, [r7, #12]
 800b52c:	e008      	b.n	800b540 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b532:	4b06      	ldr	r3, [pc, #24]	@ (800b54c <xTaskPriorityInherit+0xe0>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b538:	429a      	cmp	r2, r3
 800b53a:	d201      	bcs.n	800b540 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b53c:	2301      	movs	r3, #1
 800b53e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b540:	68fb      	ldr	r3, [r7, #12]
	}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	200009a8 	.word	0x200009a8
 800b550:	200009ac 	.word	0x200009ac
 800b554:	20000ab0 	.word	0x20000ab0

0800b558 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b564:	2300      	movs	r3, #0
 800b566:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d070      	beq.n	800b650 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b56e:	4b3b      	ldr	r3, [pc, #236]	@ (800b65c <xTaskPriorityDisinherit+0x104>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	693a      	ldr	r2, [r7, #16]
 800b574:	429a      	cmp	r2, r3
 800b576:	d00b      	beq.n	800b590 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	60fb      	str	r3, [r7, #12]
}
 800b58a:	bf00      	nop
 800b58c:	bf00      	nop
 800b58e:	e7fd      	b.n	800b58c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10b      	bne.n	800b5b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59c:	f383 8811 	msr	BASEPRI, r3
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	60bb      	str	r3, [r7, #8]
}
 800b5aa:	bf00      	nop
 800b5ac:	bf00      	nop
 800b5ae:	e7fd      	b.n	800b5ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5b4:	1e5a      	subs	r2, r3, #1
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	661a      	str	r2, [r3, #96]	@ 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d044      	beq.n	800b650 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d140      	bne.n	800b650 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	3304      	adds	r3, #4
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fd fd92 	bl	80090fc <uxListRemove>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d115      	bne.n	800b60a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5e2:	491f      	ldr	r1, [pc, #124]	@ (800b660 <xTaskPriorityDisinherit+0x108>)
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4413      	add	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	440b      	add	r3, r1
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10a      	bne.n	800b60a <xTaskPriorityDisinherit+0xb2>
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fe:	43da      	mvns	r2, r3
 800b600:	4b18      	ldr	r3, [pc, #96]	@ (800b664 <xTaskPriorityDisinherit+0x10c>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4013      	ands	r3, r2
 800b606:	4a17      	ldr	r2, [pc, #92]	@ (800b664 <xTaskPriorityDisinherit+0x10c>)
 800b608:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b616:	f1c3 0207 	rsb	r2, r3, #7
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b622:	2201      	movs	r2, #1
 800b624:	409a      	lsls	r2, r3
 800b626:	4b0f      	ldr	r3, [pc, #60]	@ (800b664 <xTaskPriorityDisinherit+0x10c>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	4a0d      	ldr	r2, [pc, #52]	@ (800b664 <xTaskPriorityDisinherit+0x10c>)
 800b62e:	6013      	str	r3, [r2, #0]
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b634:	4613      	mov	r3, r2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	4a08      	ldr	r2, [pc, #32]	@ (800b660 <xTaskPriorityDisinherit+0x108>)
 800b63e:	441a      	add	r2, r3
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	3304      	adds	r3, #4
 800b644:	4619      	mov	r1, r3
 800b646:	4610      	mov	r0, r2
 800b648:	f7fd fcfb 	bl	8009042 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b64c:	2301      	movs	r3, #1
 800b64e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b650:	697b      	ldr	r3, [r7, #20]
	}
 800b652:	4618      	mov	r0, r3
 800b654:	3718      	adds	r7, #24
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	200009a8 	.word	0x200009a8
 800b660:	200009ac 	.word	0x200009ac
 800b664:	20000ab0 	.word	0x20000ab0

0800b668 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b088      	sub	sp, #32
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b676:	2301      	movs	r3, #1
 800b678:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d079      	beq.n	800b774 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10b      	bne.n	800b6a0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	60fb      	str	r3, [r7, #12]
}
 800b69a:	bf00      	nop
 800b69c:	bf00      	nop
 800b69e:	e7fd      	b.n	800b69c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d902      	bls.n	800b6b0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	61fb      	str	r3, [r7, #28]
 800b6ae:	e002      	b.n	800b6b6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6b4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ba:	69fa      	ldr	r2, [r7, #28]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d059      	beq.n	800b774 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b6c4:	697a      	ldr	r2, [r7, #20]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d154      	bne.n	800b774 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b6ca:	4b2c      	ldr	r3, [pc, #176]	@ (800b77c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	69ba      	ldr	r2, [r7, #24]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d10b      	bne.n	800b6ec <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d8:	f383 8811 	msr	BASEPRI, r3
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f3bf 8f4f 	dsb	sy
 800b6e4:	60bb      	str	r3, [r7, #8]
}
 800b6e6:	bf00      	nop
 800b6e8:	bf00      	nop
 800b6ea:	e7fd      	b.n	800b6e8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	69fa      	ldr	r2, [r7, #28]
 800b6f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	699b      	ldr	r3, [r3, #24]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	db04      	blt.n	800b70a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	f1c3 0207 	rsb	r2, r3, #7
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	6959      	ldr	r1, [r3, #20]
 800b70e:	693a      	ldr	r2, [r7, #16]
 800b710:	4613      	mov	r3, r2
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	4413      	add	r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	4a19      	ldr	r2, [pc, #100]	@ (800b780 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b71a:	4413      	add	r3, r2
 800b71c:	4299      	cmp	r1, r3
 800b71e:	d129      	bne.n	800b774 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	3304      	adds	r3, #4
 800b724:	4618      	mov	r0, r3
 800b726:	f7fd fce9 	bl	80090fc <uxListRemove>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10a      	bne.n	800b746 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b730:	69bb      	ldr	r3, [r7, #24]
 800b732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b734:	2201      	movs	r2, #1
 800b736:	fa02 f303 	lsl.w	r3, r2, r3
 800b73a:	43da      	mvns	r2, r3
 800b73c:	4b11      	ldr	r3, [pc, #68]	@ (800b784 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4013      	ands	r3, r2
 800b742:	4a10      	ldr	r2, [pc, #64]	@ (800b784 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b744:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b74a:	2201      	movs	r2, #1
 800b74c:	409a      	lsls	r2, r3
 800b74e:	4b0d      	ldr	r3, [pc, #52]	@ (800b784 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4313      	orrs	r3, r2
 800b754:	4a0b      	ldr	r2, [pc, #44]	@ (800b784 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b75c:	4613      	mov	r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	4413      	add	r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4a06      	ldr	r2, [pc, #24]	@ (800b780 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b766:	441a      	add	r2, r3
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	3304      	adds	r3, #4
 800b76c:	4619      	mov	r1, r3
 800b76e:	4610      	mov	r0, r2
 800b770:	f7fd fc67 	bl	8009042 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b774:	bf00      	nop
 800b776:	3720      	adds	r7, #32
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	200009a8 	.word	0x200009a8
 800b780:	200009ac 	.word	0x200009ac
 800b784:	20000ab0 	.word	0x20000ab0

0800b788 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f002 fd94 	bl	800e2c2 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7f4 fda0 	bl	80002e0 <strlen>
 800b7a0:	60f8      	str	r0, [r7, #12]
 800b7a2:	e007      	b.n	800b7b4 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	2220      	movs	r2, #32
 800b7ac:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	60fb      	str	r3, [r7, #12]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b1e      	cmp	r3, #30
 800b7b8:	d9f4      	bls.n	800b7a4 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	4413      	add	r3, r2
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	4413      	add	r3, r2
	}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
	...

0800b7d4 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800b7d4:	b590      	push	{r4, r7, lr}
 800b7d6:	b089      	sub	sp, #36	@ 0x24
 800b7d8:	af02      	add	r7, sp, #8
 800b7da:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800b7e2:	4b45      	ldr	r3, [pc, #276]	@ (800b8f8 <vTaskList+0x124>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800b7e8:	4b43      	ldr	r3, [pc, #268]	@ (800b8f8 <vTaskList+0x124>)
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	4413      	add	r3, r2
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 fd19 	bl	800c22c <pvPortMalloc>
 800b7fa:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d076      	beq.n	800b8f0 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800b802:	2200      	movs	r2, #0
 800b804:	68f9      	ldr	r1, [r7, #12]
 800b806:	68b8      	ldr	r0, [r7, #8]
 800b808:	f7ff f972 	bl	800aaf0 <uxTaskGetSystemState>
 800b80c:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800b80e:	2300      	movs	r3, #0
 800b810:	617b      	str	r3, [r7, #20]
 800b812:	e066      	b.n	800b8e2 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800b814:	697a      	ldr	r2, [r7, #20]
 800b816:	4613      	mov	r3, r2
 800b818:	00db      	lsls	r3, r3, #3
 800b81a:	4413      	add	r3, r2
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	461a      	mov	r2, r3
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	4413      	add	r3, r2
 800b824:	7b1b      	ldrb	r3, [r3, #12]
 800b826:	2b04      	cmp	r3, #4
 800b828:	d81b      	bhi.n	800b862 <vTaskList+0x8e>
 800b82a:	a201      	add	r2, pc, #4	@ (adr r2, 800b830 <vTaskList+0x5c>)
 800b82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b830:	0800b845 	.word	0x0800b845
 800b834:	0800b84b 	.word	0x0800b84b
 800b838:	0800b851 	.word	0x0800b851
 800b83c:	0800b857 	.word	0x0800b857
 800b840:	0800b85d 	.word	0x0800b85d
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800b844:	2358      	movs	r3, #88	@ 0x58
 800b846:	74fb      	strb	r3, [r7, #19]
										break;
 800b848:	e00e      	b.n	800b868 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800b84a:	2352      	movs	r3, #82	@ 0x52
 800b84c:	74fb      	strb	r3, [r7, #19]
										break;
 800b84e:	e00b      	b.n	800b868 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800b850:	2342      	movs	r3, #66	@ 0x42
 800b852:	74fb      	strb	r3, [r7, #19]
										break;
 800b854:	e008      	b.n	800b868 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800b856:	2353      	movs	r3, #83	@ 0x53
 800b858:	74fb      	strb	r3, [r7, #19]
										break;
 800b85a:	e005      	b.n	800b868 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800b85c:	2344      	movs	r3, #68	@ 0x44
 800b85e:	74fb      	strb	r3, [r7, #19]
										break;
 800b860:	e002      	b.n	800b868 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800b862:	2300      	movs	r3, #0
 800b864:	74fb      	strb	r3, [r7, #19]
										break;
 800b866:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	4613      	mov	r3, r2
 800b86c:	00db      	lsls	r3, r3, #3
 800b86e:	4413      	add	r3, r2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	461a      	mov	r2, r3
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	4413      	add	r3, r2
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	4619      	mov	r1, r3
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f7ff ff83 	bl	800b788 <prvWriteNameToBuffer>
 800b882:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800b884:	7cf9      	ldrb	r1, [r7, #19]
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	4613      	mov	r3, r2
 800b88a:	00db      	lsls	r3, r3, #3
 800b88c:	4413      	add	r3, r2
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	461a      	mov	r2, r3
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	4413      	add	r3, r2
 800b896:	6918      	ldr	r0, [r3, #16]
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	4613      	mov	r3, r2
 800b89c:	00db      	lsls	r3, r3, #3
 800b89e:	4413      	add	r3, r2
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	8c1b      	ldrh	r3, [r3, #32]
 800b8aa:	461c      	mov	r4, r3
 800b8ac:	697a      	ldr	r2, [r7, #20]
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	00db      	lsls	r3, r3, #3
 800b8b2:	4413      	add	r3, r2
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	9301      	str	r3, [sp, #4]
 800b8c0:	9400      	str	r4, [sp, #0]
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	460a      	mov	r2, r1
 800b8c6:	490d      	ldr	r1, [pc, #52]	@ (800b8fc <vTaskList+0x128>)
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f002 fb9d 	bl	800e008 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7f4 fd06 	bl	80002e0 <strlen>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4413      	add	r3, r2
 800b8da:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	617b      	str	r3, [r7, #20]
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d394      	bcc.n	800b814 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800b8ea:	68b8      	ldr	r0, [r7, #8]
 800b8ec:	f000 fd6c 	bl	800c3c8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8f0:	bf00      	nop
 800b8f2:	371c      	adds	r7, #28
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd90      	pop	{r4, r7, pc}
 800b8f8:	20000aa8 	.word	0x20000aa8
 800b8fc:	08010a20 	.word	0x08010a20

0800b900 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800b900:	b580      	push	{r7, lr}
 800b902:	b088      	sub	sp, #32
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800b90e:	4b3a      	ldr	r3, [pc, #232]	@ (800b9f8 <vTaskGetRunTimeStats+0xf8>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800b914:	4b38      	ldr	r3, [pc, #224]	@ (800b9f8 <vTaskGetRunTimeStats+0xf8>)
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	4613      	mov	r3, r2
 800b91a:	00db      	lsls	r3, r3, #3
 800b91c:	4413      	add	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4618      	mov	r0, r3
 800b922:	f000 fc83 	bl	800c22c <pvPortMalloc>
 800b926:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d05f      	beq.n	800b9ee <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800b92e:	f107 030c 	add.w	r3, r7, #12
 800b932:	461a      	mov	r2, r3
 800b934:	69b9      	ldr	r1, [r7, #24]
 800b936:	6978      	ldr	r0, [r7, #20]
 800b938:	f7ff f8da 	bl	800aaf0 <uxTaskGetSystemState>
 800b93c:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	4a2e      	ldr	r2, [pc, #184]	@ (800b9fc <vTaskGetRunTimeStats+0xfc>)
 800b942:	fba2 2303 	umull	r2, r3, r2, r3
 800b946:	095b      	lsrs	r3, r3, #5
 800b948:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d04b      	beq.n	800b9e8 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800b950:	2300      	movs	r3, #0
 800b952:	61fb      	str	r3, [r7, #28]
 800b954:	e044      	b.n	800b9e0 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800b956:	69fa      	ldr	r2, [r7, #28]
 800b958:	4613      	mov	r3, r2
 800b95a:	00db      	lsls	r3, r3, #3
 800b95c:	4413      	add	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	461a      	mov	r2, r3
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	4413      	add	r3, r2
 800b966:	699a      	ldr	r2, [r3, #24]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b96e:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800b970:	69fa      	ldr	r2, [r7, #28]
 800b972:	4613      	mov	r3, r2
 800b974:	00db      	lsls	r3, r3, #3
 800b976:	4413      	add	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	461a      	mov	r2, r3
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	4413      	add	r3, r2
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	4619      	mov	r1, r3
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f7ff feff 	bl	800b788 <prvWriteNameToBuffer>
 800b98a:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00e      	beq.n	800b9b0 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800b992:	69fa      	ldr	r2, [r7, #28]
 800b994:	4613      	mov	r3, r2
 800b996:	00db      	lsls	r3, r3, #3
 800b998:	4413      	add	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	461a      	mov	r2, r3
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	699a      	ldr	r2, [r3, #24]
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	4916      	ldr	r1, [pc, #88]	@ (800ba00 <vTaskGetRunTimeStats+0x100>)
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f002 fb2d 	bl	800e008 <siprintf>
 800b9ae:	e00d      	b.n	800b9cc <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800b9b0:	69fa      	ldr	r2, [r7, #28]
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	00db      	lsls	r3, r3, #3
 800b9b6:	4413      	add	r3, r2
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	4413      	add	r3, r2
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	490f      	ldr	r1, [pc, #60]	@ (800ba04 <vTaskGetRunTimeStats+0x104>)
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f002 fb1e 	bl	800e008 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f7f4 fc87 	bl	80002e0 <strlen>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800b9da:	69fb      	ldr	r3, [r7, #28]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	61fb      	str	r3, [r7, #28]
 800b9e0:	69fa      	ldr	r2, [r7, #28]
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d3b6      	bcc.n	800b956 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800b9e8:	6978      	ldr	r0, [r7, #20]
 800b9ea:	f000 fced 	bl	800c3c8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9ee:	bf00      	nop
 800b9f0:	3720      	adds	r7, #32
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	20000aa8 	.word	0x20000aa8
 800b9fc:	51eb851f 	.word	0x51eb851f
 800ba00:	08010a30 	.word	0x08010a30
 800ba04:	08010a3c 	.word	0x08010a3c

0800ba08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ba08:	b480      	push	{r7}
 800ba0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ba0c:	4b07      	ldr	r3, [pc, #28]	@ (800ba2c <pvTaskIncrementMutexHeldCount+0x24>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d004      	beq.n	800ba1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ba14:	4b05      	ldr	r3, [pc, #20]	@ (800ba2c <pvTaskIncrementMutexHeldCount+0x24>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ba1a:	3201      	adds	r2, #1
 800ba1c:	661a      	str	r2, [r3, #96]	@ 0x60
		}

		return pxCurrentTCB;
 800ba1e:	4b03      	ldr	r3, [pc, #12]	@ (800ba2c <pvTaskIncrementMutexHeldCount+0x24>)
 800ba20:	681b      	ldr	r3, [r3, #0]
	}
 800ba22:	4618      	mov	r0, r3
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr
 800ba2c:	200009a8 	.word	0x200009a8

0800ba30 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
 800ba3c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ba3e:	f000 fad3 	bl	800bfe8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ba42:	4b29      	ldr	r3, [pc, #164]	@ (800bae8 <xTaskNotifyWait+0xb8>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	2b02      	cmp	r3, #2
 800ba4e:	d01c      	beq.n	800ba8a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ba50:	4b25      	ldr	r3, [pc, #148]	@ (800bae8 <xTaskNotifyWait+0xb8>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	43d2      	mvns	r2, r2
 800ba5c:	400a      	ands	r2, r1
 800ba5e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ba62:	4b21      	ldr	r3, [pc, #132]	@ (800bae8 <xTaskNotifyWait+0xb8>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00b      	beq.n	800ba8a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba72:	2101      	movs	r1, #1
 800ba74:	6838      	ldr	r0, [r7, #0]
 800ba76:	f000 f923 	bl	800bcc0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ba7a:	4b1c      	ldr	r3, [pc, #112]	@ (800baec <xTaskNotifyWait+0xbc>)
 800ba7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba80:	601a      	str	r2, [r3, #0]
 800ba82:	f3bf 8f4f 	dsb	sy
 800ba86:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ba8a:	f000 fadf 	bl	800c04c <vPortExitCritical>

		taskENTER_CRITICAL();
 800ba8e:	f000 faab 	bl	800bfe8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d005      	beq.n	800baa4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ba98:	4b13      	ldr	r3, [pc, #76]	@ (800bae8 <xTaskNotifyWait+0xb8>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800baa4:	4b10      	ldr	r3, [pc, #64]	@ (800bae8 <xTaskNotifyWait+0xb8>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800baac:	b2db      	uxtb	r3, r3
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d002      	beq.n	800bab8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bab2:	2300      	movs	r3, #0
 800bab4:	617b      	str	r3, [r7, #20]
 800bab6:	e00a      	b.n	800bace <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bab8:	4b0b      	ldr	r3, [pc, #44]	@ (800bae8 <xTaskNotifyWait+0xb8>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 800bac0:	68ba      	ldr	r2, [r7, #8]
 800bac2:	43d2      	mvns	r2, r2
 800bac4:	400a      	ands	r2, r1
 800bac6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				xReturn = pdTRUE;
 800baca:	2301      	movs	r3, #1
 800bacc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bace:	4b06      	ldr	r3, [pc, #24]	@ (800bae8 <xTaskNotifyWait+0xb8>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
		}
		taskEXIT_CRITICAL();
 800bad8:	f000 fab8 	bl	800c04c <vPortExitCritical>

		return xReturn;
 800badc:	697b      	ldr	r3, [r7, #20]
	}
 800bade:	4618      	mov	r0, r3
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	200009a8 	.word	0x200009a8
 800baec:	e000ed04 	.word	0xe000ed04

0800baf0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b08a      	sub	sp, #40	@ 0x28
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	603b      	str	r3, [r7, #0]
 800bafc:	4613      	mov	r3, r2
 800bafe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bb00:	2301      	movs	r3, #1
 800bb02:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d10b      	bne.n	800bb22 <xTaskGenericNotify+0x32>
	__asm volatile
 800bb0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb0e:	f383 8811 	msr	BASEPRI, r3
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	f3bf 8f4f 	dsb	sy
 800bb1a:	61bb      	str	r3, [r7, #24]
}
 800bb1c:	bf00      	nop
 800bb1e:	bf00      	nop
 800bb20:	e7fd      	b.n	800bb1e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bb26:	f000 fa5f 	bl	800bfe8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d004      	beq.n	800bb3a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bb30:	6a3b      	ldr	r3, [r7, #32]
 800bb32:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bb3a:	6a3b      	ldr	r3, [r7, #32]
 800bb3c:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800bb40:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bb42:	6a3b      	ldr	r3, [r7, #32]
 800bb44:	2202      	movs	r2, #2
 800bb46:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			switch( eAction )
 800bb4a:	79fb      	ldrb	r3, [r7, #7]
 800bb4c:	2b04      	cmp	r3, #4
 800bb4e:	d82e      	bhi.n	800bbae <xTaskGenericNotify+0xbe>
 800bb50:	a201      	add	r2, pc, #4	@ (adr r2, 800bb58 <xTaskGenericNotify+0x68>)
 800bb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb56:	bf00      	nop
 800bb58:	0800bbd3 	.word	0x0800bbd3
 800bb5c:	0800bb6d 	.word	0x0800bb6d
 800bb60:	0800bb7f 	.word	0x0800bb7f
 800bb64:	0800bb8f 	.word	0x0800bb8f
 800bb68:	0800bb99 	.word	0x0800bb99
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bb6c:	6a3b      	ldr	r3, [r7, #32]
 800bb6e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	431a      	orrs	r2, r3
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800bb7c:	e02c      	b.n	800bbd8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bb84:	1c5a      	adds	r2, r3, #1
 800bb86:	6a3b      	ldr	r3, [r7, #32]
 800bb88:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800bb8c:	e024      	b.n	800bbd8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bb8e:	6a3b      	ldr	r3, [r7, #32]
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 800bb96:	e01f      	b.n	800bbd8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bb98:	7ffb      	ldrb	r3, [r7, #31]
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d004      	beq.n	800bba8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	68ba      	ldr	r2, [r7, #8]
 800bba2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bba6:	e017      	b.n	800bbd8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800bbac:	e014      	b.n	800bbd8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb8:	d00d      	beq.n	800bbd6 <xTaskGenericNotify+0xe6>
	__asm volatile
 800bbba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbbe:	f383 8811 	msr	BASEPRI, r3
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	f3bf 8f4f 	dsb	sy
 800bbca:	617b      	str	r3, [r7, #20]
}
 800bbcc:	bf00      	nop
 800bbce:	bf00      	nop
 800bbd0:	e7fd      	b.n	800bbce <xTaskGenericNotify+0xde>
					break;
 800bbd2:	bf00      	nop
 800bbd4:	e000      	b.n	800bbd8 <xTaskGenericNotify+0xe8>

					break;
 800bbd6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bbd8:	7ffb      	ldrb	r3, [r7, #31]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d13a      	bne.n	800bc54 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbde:	6a3b      	ldr	r3, [r7, #32]
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fd fa8a 	bl	80090fc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bbe8:	6a3b      	ldr	r3, [r7, #32]
 800bbea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbec:	2201      	movs	r2, #1
 800bbee:	409a      	lsls	r2, r3
 800bbf0:	4b1c      	ldr	r3, [pc, #112]	@ (800bc64 <xTaskGenericNotify+0x174>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	4a1b      	ldr	r2, [pc, #108]	@ (800bc64 <xTaskGenericNotify+0x174>)
 800bbf8:	6013      	str	r3, [r2, #0]
 800bbfa:	6a3b      	ldr	r3, [r7, #32]
 800bbfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbfe:	4613      	mov	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4413      	add	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4a18      	ldr	r2, [pc, #96]	@ (800bc68 <xTaskGenericNotify+0x178>)
 800bc08:	441a      	add	r2, r3
 800bc0a:	6a3b      	ldr	r3, [r7, #32]
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	4619      	mov	r1, r3
 800bc10:	4610      	mov	r0, r2
 800bc12:	f7fd fa16 	bl	8009042 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bc16:	6a3b      	ldr	r3, [r7, #32]
 800bc18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00b      	beq.n	800bc36 <xTaskGenericNotify+0x146>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	613b      	str	r3, [r7, #16]
}
 800bc30:	bf00      	nop
 800bc32:	bf00      	nop
 800bc34:	e7fd      	b.n	800bc32 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc3a:	4b0c      	ldr	r3, [pc, #48]	@ (800bc6c <xTaskGenericNotify+0x17c>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d907      	bls.n	800bc54 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800bc44:	4b0a      	ldr	r3, [pc, #40]	@ (800bc70 <xTaskGenericNotify+0x180>)
 800bc46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc4a:	601a      	str	r2, [r3, #0]
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bc54:	f000 f9fa 	bl	800c04c <vPortExitCritical>

		return xReturn;
 800bc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3728      	adds	r7, #40	@ 0x28
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	20000ab0 	.word	0x20000ab0
 800bc68:	200009ac 	.word	0x200009ac
 800bc6c:	200009a8 	.word	0x200009a8
 800bc70:	e000ed04 	.word	0xe000ed04

0800bc74 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d102      	bne.n	800bc88 <xTaskNotifyStateClear+0x14>
 800bc82:	4b0e      	ldr	r3, [pc, #56]	@ (800bcbc <xTaskNotifyStateClear+0x48>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	e000      	b.n	800bc8a <xTaskNotifyStateClear+0x16>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800bc8c:	f000 f9ac 	bl	800bfe8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d106      	bne.n	800bcaa <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
				xReturn = pdPASS;
 800bca4:	2301      	movs	r3, #1
 800bca6:	60fb      	str	r3, [r7, #12]
 800bca8:	e001      	b.n	800bcae <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800bcae:	f000 f9cd 	bl	800c04c <vPortExitCritical>

		return xReturn;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
	}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	200009a8 	.word	0x200009a8

0800bcc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bcca:	4b29      	ldr	r3, [pc, #164]	@ (800bd70 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcd0:	4b28      	ldr	r3, [pc, #160]	@ (800bd74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7fd fa10 	bl	80090fc <uxListRemove>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10b      	bne.n	800bcfa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bce2:	4b24      	ldr	r3, [pc, #144]	@ (800bd74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce8:	2201      	movs	r2, #1
 800bcea:	fa02 f303 	lsl.w	r3, r2, r3
 800bcee:	43da      	mvns	r2, r3
 800bcf0:	4b21      	ldr	r3, [pc, #132]	@ (800bd78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	4a20      	ldr	r2, [pc, #128]	@ (800bd78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bcf8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd00:	d10a      	bne.n	800bd18 <prvAddCurrentTaskToDelayedList+0x58>
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d007      	beq.n	800bd18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd08:	4b1a      	ldr	r3, [pc, #104]	@ (800bd74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	4619      	mov	r1, r3
 800bd10:	481a      	ldr	r0, [pc, #104]	@ (800bd7c <prvAddCurrentTaskToDelayedList+0xbc>)
 800bd12:	f7fd f996 	bl	8009042 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd16:	e026      	b.n	800bd66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd20:	4b14      	ldr	r3, [pc, #80]	@ (800bd74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d209      	bcs.n	800bd44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd30:	4b13      	ldr	r3, [pc, #76]	@ (800bd80 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	4b0f      	ldr	r3, [pc, #60]	@ (800bd74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	3304      	adds	r3, #4
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	f7fd f9a4 	bl	800908a <vListInsert>
}
 800bd42:	e010      	b.n	800bd66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd44:	4b0f      	ldr	r3, [pc, #60]	@ (800bd84 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	4b0a      	ldr	r3, [pc, #40]	@ (800bd74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	4619      	mov	r1, r3
 800bd50:	4610      	mov	r0, r2
 800bd52:	f7fd f99a 	bl	800908a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd56:	4b0c      	ldr	r3, [pc, #48]	@ (800bd88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d202      	bcs.n	800bd66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bd60:	4a09      	ldr	r2, [pc, #36]	@ (800bd88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	6013      	str	r3, [r2, #0]
}
 800bd66:	bf00      	nop
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	20000aac 	.word	0x20000aac
 800bd74:	200009a8 	.word	0x200009a8
 800bd78:	20000ab0 	.word	0x20000ab0
 800bd7c:	20000a94 	.word	0x20000a94
 800bd80:	20000a64 	.word	0x20000a64
 800bd84:	20000a60 	.word	0x20000a60
 800bd88:	20000ac8 	.word	0x20000ac8

0800bd8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	3b04      	subs	r3, #4
 800bd9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bda4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	3b04      	subs	r3, #4
 800bdaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	f023 0201 	bic.w	r2, r3, #1
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	3b04      	subs	r3, #4
 800bdba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bdbc:	4a0c      	ldr	r2, [pc, #48]	@ (800bdf0 <pxPortInitialiseStack+0x64>)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3b14      	subs	r3, #20
 800bdc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	3b04      	subs	r3, #4
 800bdd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f06f 0202 	mvn.w	r2, #2
 800bdda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	3b20      	subs	r3, #32
 800bde0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bde2:	68fb      	ldr	r3, [r7, #12]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3714      	adds	r7, #20
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr
 800bdf0:	0800bdf5 	.word	0x0800bdf5

0800bdf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bdfe:	4b13      	ldr	r3, [pc, #76]	@ (800be4c <prvTaskExitError+0x58>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be06:	d00b      	beq.n	800be20 <prvTaskExitError+0x2c>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	60fb      	str	r3, [r7, #12]
}
 800be1a:	bf00      	nop
 800be1c:	bf00      	nop
 800be1e:	e7fd      	b.n	800be1c <prvTaskExitError+0x28>
	__asm volatile
 800be20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	60bb      	str	r3, [r7, #8]
}
 800be32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be34:	bf00      	nop
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d0fc      	beq.n	800be36 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be3c:	bf00      	nop
 800be3e:	bf00      	nop
 800be40:	3714      	adds	r7, #20
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	20000420 	.word	0x20000420

0800be50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be50:	4b07      	ldr	r3, [pc, #28]	@ (800be70 <pxCurrentTCBConst2>)
 800be52:	6819      	ldr	r1, [r3, #0]
 800be54:	6808      	ldr	r0, [r1, #0]
 800be56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5a:	f380 8809 	msr	PSP, r0
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f04f 0000 	mov.w	r0, #0
 800be66:	f380 8811 	msr	BASEPRI, r0
 800be6a:	4770      	bx	lr
 800be6c:	f3af 8000 	nop.w

0800be70 <pxCurrentTCBConst2>:
 800be70:	200009a8 	.word	0x200009a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be74:	bf00      	nop
 800be76:	bf00      	nop

0800be78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be78:	4808      	ldr	r0, [pc, #32]	@ (800be9c <prvPortStartFirstTask+0x24>)
 800be7a:	6800      	ldr	r0, [r0, #0]
 800be7c:	6800      	ldr	r0, [r0, #0]
 800be7e:	f380 8808 	msr	MSP, r0
 800be82:	f04f 0000 	mov.w	r0, #0
 800be86:	f380 8814 	msr	CONTROL, r0
 800be8a:	b662      	cpsie	i
 800be8c:	b661      	cpsie	f
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	df00      	svc	0
 800be98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be9a:	bf00      	nop
 800be9c:	e000ed08 	.word	0xe000ed08

0800bea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bea6:	4b47      	ldr	r3, [pc, #284]	@ (800bfc4 <xPortStartScheduler+0x124>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a47      	ldr	r2, [pc, #284]	@ (800bfc8 <xPortStartScheduler+0x128>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d10b      	bne.n	800bec8 <xPortStartScheduler+0x28>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	613b      	str	r3, [r7, #16]
}
 800bec2:	bf00      	nop
 800bec4:	bf00      	nop
 800bec6:	e7fd      	b.n	800bec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bec8:	4b3e      	ldr	r3, [pc, #248]	@ (800bfc4 <xPortStartScheduler+0x124>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a3f      	ldr	r2, [pc, #252]	@ (800bfcc <xPortStartScheduler+0x12c>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d10b      	bne.n	800beea <xPortStartScheduler+0x4a>
	__asm volatile
 800bed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	60fb      	str	r3, [r7, #12]
}
 800bee4:	bf00      	nop
 800bee6:	bf00      	nop
 800bee8:	e7fd      	b.n	800bee6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800beea:	4b39      	ldr	r3, [pc, #228]	@ (800bfd0 <xPortStartScheduler+0x130>)
 800beec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	22ff      	movs	r2, #255	@ 0xff
 800befa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf04:	78fb      	ldrb	r3, [r7, #3]
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	4b31      	ldr	r3, [pc, #196]	@ (800bfd4 <xPortStartScheduler+0x134>)
 800bf10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf12:	4b31      	ldr	r3, [pc, #196]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf14:	2207      	movs	r2, #7
 800bf16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf18:	e009      	b.n	800bf2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bf1a:	4b2f      	ldr	r3, [pc, #188]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	4a2d      	ldr	r2, [pc, #180]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf24:	78fb      	ldrb	r3, [r7, #3]
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf2e:	78fb      	ldrb	r3, [r7, #3]
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf36:	2b80      	cmp	r3, #128	@ 0x80
 800bf38:	d0ef      	beq.n	800bf1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf3a:	4b27      	ldr	r3, [pc, #156]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f1c3 0307 	rsb	r3, r3, #7
 800bf42:	2b04      	cmp	r3, #4
 800bf44:	d00b      	beq.n	800bf5e <xPortStartScheduler+0xbe>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4a:	f383 8811 	msr	BASEPRI, r3
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	60bb      	str	r3, [r7, #8]
}
 800bf58:	bf00      	nop
 800bf5a:	bf00      	nop
 800bf5c:	e7fd      	b.n	800bf5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf5e:	4b1e      	ldr	r3, [pc, #120]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	021b      	lsls	r3, r3, #8
 800bf64:	4a1c      	ldr	r2, [pc, #112]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf68:	4b1b      	ldr	r3, [pc, #108]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bf70:	4a19      	ldr	r2, [pc, #100]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	b2da      	uxtb	r2, r3
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf7c:	4b17      	ldr	r3, [pc, #92]	@ (800bfdc <xPortStartScheduler+0x13c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a16      	ldr	r2, [pc, #88]	@ (800bfdc <xPortStartScheduler+0x13c>)
 800bf82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bf86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf88:	4b14      	ldr	r3, [pc, #80]	@ (800bfdc <xPortStartScheduler+0x13c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a13      	ldr	r2, [pc, #76]	@ (800bfdc <xPortStartScheduler+0x13c>)
 800bf8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bf92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf94:	f000 f8da 	bl	800c14c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf98:	4b11      	ldr	r3, [pc, #68]	@ (800bfe0 <xPortStartScheduler+0x140>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf9e:	f000 f8f9 	bl	800c194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bfa2:	4b10      	ldr	r3, [pc, #64]	@ (800bfe4 <xPortStartScheduler+0x144>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a0f      	ldr	r2, [pc, #60]	@ (800bfe4 <xPortStartScheduler+0x144>)
 800bfa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bfac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bfae:	f7ff ff63 	bl	800be78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bfb2:	f7fe fee7 	bl	800ad84 <vTaskSwitchContext>
	prvTaskExitError();
 800bfb6:	f7ff ff1d 	bl	800bdf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	e000ed00 	.word	0xe000ed00
 800bfc8:	410fc271 	.word	0x410fc271
 800bfcc:	410fc270 	.word	0x410fc270
 800bfd0:	e000e400 	.word	0xe000e400
 800bfd4:	20000adc 	.word	0x20000adc
 800bfd8:	20000ae0 	.word	0x20000ae0
 800bfdc:	e000ed20 	.word	0xe000ed20
 800bfe0:	20000420 	.word	0x20000420
 800bfe4:	e000ef34 	.word	0xe000ef34

0800bfe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	607b      	str	r3, [r7, #4]
}
 800c000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c002:	4b10      	ldr	r3, [pc, #64]	@ (800c044 <vPortEnterCritical+0x5c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	3301      	adds	r3, #1
 800c008:	4a0e      	ldr	r2, [pc, #56]	@ (800c044 <vPortEnterCritical+0x5c>)
 800c00a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c00c:	4b0d      	ldr	r3, [pc, #52]	@ (800c044 <vPortEnterCritical+0x5c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b01      	cmp	r3, #1
 800c012:	d110      	bne.n	800c036 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c014:	4b0c      	ldr	r3, [pc, #48]	@ (800c048 <vPortEnterCritical+0x60>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00b      	beq.n	800c036 <vPortEnterCritical+0x4e>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	603b      	str	r3, [r7, #0]
}
 800c030:	bf00      	nop
 800c032:	bf00      	nop
 800c034:	e7fd      	b.n	800c032 <vPortEnterCritical+0x4a>
	}
}
 800c036:	bf00      	nop
 800c038:	370c      	adds	r7, #12
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	20000420 	.word	0x20000420
 800c048:	e000ed04 	.word	0xe000ed04

0800c04c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c052:	4b12      	ldr	r3, [pc, #72]	@ (800c09c <vPortExitCritical+0x50>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10b      	bne.n	800c072 <vPortExitCritical+0x26>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	607b      	str	r3, [r7, #4]
}
 800c06c:	bf00      	nop
 800c06e:	bf00      	nop
 800c070:	e7fd      	b.n	800c06e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c072:	4b0a      	ldr	r3, [pc, #40]	@ (800c09c <vPortExitCritical+0x50>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3b01      	subs	r3, #1
 800c078:	4a08      	ldr	r2, [pc, #32]	@ (800c09c <vPortExitCritical+0x50>)
 800c07a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c07c:	4b07      	ldr	r3, [pc, #28]	@ (800c09c <vPortExitCritical+0x50>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d105      	bne.n	800c090 <vPortExitCritical+0x44>
 800c084:	2300      	movs	r3, #0
 800c086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	f383 8811 	msr	BASEPRI, r3
}
 800c08e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c090:	bf00      	nop
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	20000420 	.word	0x20000420

0800c0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c0a0:	f3ef 8009 	mrs	r0, PSP
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	4b15      	ldr	r3, [pc, #84]	@ (800c100 <pxCurrentTCBConst>)
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	f01e 0f10 	tst.w	lr, #16
 800c0b0:	bf08      	it	eq
 800c0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ba:	6010      	str	r0, [r2, #0]
 800c0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c0c4:	f380 8811 	msr	BASEPRI, r0
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f7fe fe58 	bl	800ad84 <vTaskSwitchContext>
 800c0d4:	f04f 0000 	mov.w	r0, #0
 800c0d8:	f380 8811 	msr	BASEPRI, r0
 800c0dc:	bc09      	pop	{r0, r3}
 800c0de:	6819      	ldr	r1, [r3, #0]
 800c0e0:	6808      	ldr	r0, [r1, #0]
 800c0e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e6:	f01e 0f10 	tst.w	lr, #16
 800c0ea:	bf08      	it	eq
 800c0ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c0f0:	f380 8809 	msr	PSP, r0
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	f3af 8000 	nop.w

0800c100 <pxCurrentTCBConst>:
 800c100:	200009a8 	.word	0x200009a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c104:	bf00      	nop
 800c106:	bf00      	nop

0800c108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	607b      	str	r3, [r7, #4]
}
 800c120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c122:	f7fe fd75 	bl	800ac10 <xTaskIncrementTick>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d003      	beq.n	800c134 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c12c:	4b06      	ldr	r3, [pc, #24]	@ (800c148 <SysTick_Handler+0x40>)
 800c12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c132:	601a      	str	r2, [r3, #0]
 800c134:	2300      	movs	r3, #0
 800c136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	f383 8811 	msr	BASEPRI, r3
}
 800c13e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	e000ed04 	.word	0xe000ed04

0800c14c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c14c:	b480      	push	{r7}
 800c14e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c150:	4b0b      	ldr	r3, [pc, #44]	@ (800c180 <vPortSetupTimerInterrupt+0x34>)
 800c152:	2200      	movs	r2, #0
 800c154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c156:	4b0b      	ldr	r3, [pc, #44]	@ (800c184 <vPortSetupTimerInterrupt+0x38>)
 800c158:	2200      	movs	r2, #0
 800c15a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c15c:	4b0a      	ldr	r3, [pc, #40]	@ (800c188 <vPortSetupTimerInterrupt+0x3c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a0a      	ldr	r2, [pc, #40]	@ (800c18c <vPortSetupTimerInterrupt+0x40>)
 800c162:	fba2 2303 	umull	r2, r3, r2, r3
 800c166:	099b      	lsrs	r3, r3, #6
 800c168:	4a09      	ldr	r2, [pc, #36]	@ (800c190 <vPortSetupTimerInterrupt+0x44>)
 800c16a:	3b01      	subs	r3, #1
 800c16c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c16e:	4b04      	ldr	r3, [pc, #16]	@ (800c180 <vPortSetupTimerInterrupt+0x34>)
 800c170:	2207      	movs	r2, #7
 800c172:	601a      	str	r2, [r3, #0]
}
 800c174:	bf00      	nop
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop
 800c180:	e000e010 	.word	0xe000e010
 800c184:	e000e018 	.word	0xe000e018
 800c188:	20000414 	.word	0x20000414
 800c18c:	10624dd3 	.word	0x10624dd3
 800c190:	e000e014 	.word	0xe000e014

0800c194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c194:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c1a4 <vPortEnableVFP+0x10>
 800c198:	6801      	ldr	r1, [r0, #0]
 800c19a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c19e:	6001      	str	r1, [r0, #0]
 800c1a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c1a2:	bf00      	nop
 800c1a4:	e000ed88 	.word	0xe000ed88

0800c1a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c1ae:	f3ef 8305 	mrs	r3, IPSR
 800c1b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2b0f      	cmp	r3, #15
 800c1b8:	d915      	bls.n	800c1e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1ba:	4a18      	ldr	r2, [pc, #96]	@ (800c21c <vPortValidateInterruptPriority+0x74>)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	4413      	add	r3, r2
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1c4:	4b16      	ldr	r3, [pc, #88]	@ (800c220 <vPortValidateInterruptPriority+0x78>)
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	7afa      	ldrb	r2, [r7, #11]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d20b      	bcs.n	800c1e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	607b      	str	r3, [r7, #4]
}
 800c1e0:	bf00      	nop
 800c1e2:	bf00      	nop
 800c1e4:	e7fd      	b.n	800c1e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c224 <vPortValidateInterruptPriority+0x7c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c1ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c228 <vPortValidateInterruptPriority+0x80>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d90b      	bls.n	800c20e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fa:	f383 8811 	msr	BASEPRI, r3
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	603b      	str	r3, [r7, #0]
}
 800c208:	bf00      	nop
 800c20a:	bf00      	nop
 800c20c:	e7fd      	b.n	800c20a <vPortValidateInterruptPriority+0x62>
	}
 800c20e:	bf00      	nop
 800c210:	3714      	adds	r7, #20
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	e000e3f0 	.word	0xe000e3f0
 800c220:	20000adc 	.word	0x20000adc
 800c224:	e000ed0c 	.word	0xe000ed0c
 800c228:	20000ae0 	.word	0x20000ae0

0800c22c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b08a      	sub	sp, #40	@ 0x28
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c234:	2300      	movs	r3, #0
 800c236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c238:	f7fe fbae 	bl	800a998 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c23c:	4b5c      	ldr	r3, [pc, #368]	@ (800c3b0 <pvPortMalloc+0x184>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d101      	bne.n	800c248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c244:	f000 f924 	bl	800c490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c248:	4b5a      	ldr	r3, [pc, #360]	@ (800c3b4 <pvPortMalloc+0x188>)
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4013      	ands	r3, r2
 800c250:	2b00      	cmp	r3, #0
 800c252:	f040 8095 	bne.w	800c380 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d01e      	beq.n	800c29a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c25c:	2208      	movs	r2, #8
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4413      	add	r3, r2
 800c262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f003 0307 	and.w	r3, r3, #7
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d015      	beq.n	800c29a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f023 0307 	bic.w	r3, r3, #7
 800c274:	3308      	adds	r3, #8
 800c276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f003 0307 	and.w	r3, r3, #7
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00b      	beq.n	800c29a <pvPortMalloc+0x6e>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	617b      	str	r3, [r7, #20]
}
 800c294:	bf00      	nop
 800c296:	bf00      	nop
 800c298:	e7fd      	b.n	800c296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d06f      	beq.n	800c380 <pvPortMalloc+0x154>
 800c2a0:	4b45      	ldr	r3, [pc, #276]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d86a      	bhi.n	800c380 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2aa:	4b44      	ldr	r3, [pc, #272]	@ (800c3bc <pvPortMalloc+0x190>)
 800c2ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2ae:	4b43      	ldr	r3, [pc, #268]	@ (800c3bc <pvPortMalloc+0x190>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2b4:	e004      	b.n	800c2c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d903      	bls.n	800c2d2 <pvPortMalloc+0xa6>
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1f1      	bne.n	800c2b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2d2:	4b37      	ldr	r3, [pc, #220]	@ (800c3b0 <pvPortMalloc+0x184>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d051      	beq.n	800c380 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2dc:	6a3b      	ldr	r3, [r7, #32]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2208      	movs	r2, #8
 800c2e2:	4413      	add	r3, r2
 800c2e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	6a3b      	ldr	r3, [r7, #32]
 800c2ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f0:	685a      	ldr	r2, [r3, #4]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	1ad2      	subs	r2, r2, r3
 800c2f6:	2308      	movs	r3, #8
 800c2f8:	005b      	lsls	r3, r3, #1
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d920      	bls.n	800c340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c2fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4413      	add	r3, r2
 800c304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	f003 0307 	and.w	r3, r3, #7
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00b      	beq.n	800c328 <pvPortMalloc+0xfc>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	613b      	str	r3, [r7, #16]
}
 800c322:	bf00      	nop
 800c324:	bf00      	nop
 800c326:	e7fd      	b.n	800c324 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	1ad2      	subs	r2, r2, r3
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c33a:	69b8      	ldr	r0, [r7, #24]
 800c33c:	f000 f90a 	bl	800c554 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c340:	4b1d      	ldr	r3, [pc, #116]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	1ad3      	subs	r3, r2, r3
 800c34a:	4a1b      	ldr	r2, [pc, #108]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c34c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c34e:	4b1a      	ldr	r3, [pc, #104]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	4b1b      	ldr	r3, [pc, #108]	@ (800c3c0 <pvPortMalloc+0x194>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	429a      	cmp	r2, r3
 800c358:	d203      	bcs.n	800c362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c35a:	4b17      	ldr	r3, [pc, #92]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a18      	ldr	r2, [pc, #96]	@ (800c3c0 <pvPortMalloc+0x194>)
 800c360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c364:	685a      	ldr	r2, [r3, #4]
 800c366:	4b13      	ldr	r3, [pc, #76]	@ (800c3b4 <pvPortMalloc+0x188>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	431a      	orrs	r2, r3
 800c36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c372:	2200      	movs	r2, #0
 800c374:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c376:	4b13      	ldr	r3, [pc, #76]	@ (800c3c4 <pvPortMalloc+0x198>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3301      	adds	r3, #1
 800c37c:	4a11      	ldr	r2, [pc, #68]	@ (800c3c4 <pvPortMalloc+0x198>)
 800c37e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c380:	f7fe fb18 	bl	800a9b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	f003 0307 	and.w	r3, r3, #7
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00b      	beq.n	800c3a6 <pvPortMalloc+0x17a>
	__asm volatile
 800c38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c392:	f383 8811 	msr	BASEPRI, r3
 800c396:	f3bf 8f6f 	isb	sy
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	60fb      	str	r3, [r7, #12]
}
 800c3a0:	bf00      	nop
 800c3a2:	bf00      	nop
 800c3a4:	e7fd      	b.n	800c3a2 <pvPortMalloc+0x176>
	return pvReturn;
 800c3a6:	69fb      	ldr	r3, [r7, #28]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3728      	adds	r7, #40	@ 0x28
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	2000784c 	.word	0x2000784c
 800c3b4:	20007860 	.word	0x20007860
 800c3b8:	20007850 	.word	0x20007850
 800c3bc:	20007844 	.word	0x20007844
 800c3c0:	20007854 	.word	0x20007854
 800c3c4:	20007858 	.word	0x20007858

0800c3c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b086      	sub	sp, #24
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d04f      	beq.n	800c47a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3da:	2308      	movs	r3, #8
 800c3dc:	425b      	negs	r3, r3
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	685a      	ldr	r2, [r3, #4]
 800c3ec:	4b25      	ldr	r3, [pc, #148]	@ (800c484 <vPortFree+0xbc>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4013      	ands	r3, r2
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d10b      	bne.n	800c40e <vPortFree+0x46>
	__asm volatile
 800c3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3fa:	f383 8811 	msr	BASEPRI, r3
 800c3fe:	f3bf 8f6f 	isb	sy
 800c402:	f3bf 8f4f 	dsb	sy
 800c406:	60fb      	str	r3, [r7, #12]
}
 800c408:	bf00      	nop
 800c40a:	bf00      	nop
 800c40c:	e7fd      	b.n	800c40a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00b      	beq.n	800c42e <vPortFree+0x66>
	__asm volatile
 800c416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41a:	f383 8811 	msr	BASEPRI, r3
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	60bb      	str	r3, [r7, #8]
}
 800c428:	bf00      	nop
 800c42a:	bf00      	nop
 800c42c:	e7fd      	b.n	800c42a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	685a      	ldr	r2, [r3, #4]
 800c432:	4b14      	ldr	r3, [pc, #80]	@ (800c484 <vPortFree+0xbc>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4013      	ands	r3, r2
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d01e      	beq.n	800c47a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d11a      	bne.n	800c47a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	4b0e      	ldr	r3, [pc, #56]	@ (800c484 <vPortFree+0xbc>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	43db      	mvns	r3, r3
 800c44e:	401a      	ands	r2, r3
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c454:	f7fe faa0 	bl	800a998 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	685a      	ldr	r2, [r3, #4]
 800c45c:	4b0a      	ldr	r3, [pc, #40]	@ (800c488 <vPortFree+0xc0>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4413      	add	r3, r2
 800c462:	4a09      	ldr	r2, [pc, #36]	@ (800c488 <vPortFree+0xc0>)
 800c464:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c466:	6938      	ldr	r0, [r7, #16]
 800c468:	f000 f874 	bl	800c554 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c46c:	4b07      	ldr	r3, [pc, #28]	@ (800c48c <vPortFree+0xc4>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	3301      	adds	r3, #1
 800c472:	4a06      	ldr	r2, [pc, #24]	@ (800c48c <vPortFree+0xc4>)
 800c474:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c476:	f7fe fa9d 	bl	800a9b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c47a:	bf00      	nop
 800c47c:	3718      	adds	r7, #24
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	20007860 	.word	0x20007860
 800c488:	20007850 	.word	0x20007850
 800c48c:	2000785c 	.word	0x2000785c

0800c490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c496:	f646 5360 	movw	r3, #28000	@ 0x6d60
 800c49a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c49c:	4b27      	ldr	r3, [pc, #156]	@ (800c53c <prvHeapInit+0xac>)
 800c49e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f003 0307 	and.w	r3, r3, #7
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00c      	beq.n	800c4c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	3307      	adds	r3, #7
 800c4ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f023 0307 	bic.w	r3, r3, #7
 800c4b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4b8:	68ba      	ldr	r2, [r7, #8]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	4a1f      	ldr	r2, [pc, #124]	@ (800c53c <prvHeapInit+0xac>)
 800c4c0:	4413      	add	r3, r2
 800c4c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c540 <prvHeapInit+0xb0>)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4ce:	4b1c      	ldr	r3, [pc, #112]	@ (800c540 <prvHeapInit+0xb0>)
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	68ba      	ldr	r2, [r7, #8]
 800c4d8:	4413      	add	r3, r2
 800c4da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4dc:	2208      	movs	r2, #8
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	1a9b      	subs	r3, r3, r2
 800c4e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f023 0307 	bic.w	r3, r3, #7
 800c4ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	4a15      	ldr	r2, [pc, #84]	@ (800c544 <prvHeapInit+0xb4>)
 800c4f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4f2:	4b14      	ldr	r3, [pc, #80]	@ (800c544 <prvHeapInit+0xb4>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c4fa:	4b12      	ldr	r3, [pc, #72]	@ (800c544 <prvHeapInit+0xb4>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2200      	movs	r2, #0
 800c500:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	1ad2      	subs	r2, r2, r3
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c510:	4b0c      	ldr	r3, [pc, #48]	@ (800c544 <prvHeapInit+0xb4>)
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	4a0a      	ldr	r2, [pc, #40]	@ (800c548 <prvHeapInit+0xb8>)
 800c51e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	4a09      	ldr	r2, [pc, #36]	@ (800c54c <prvHeapInit+0xbc>)
 800c526:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c528:	4b09      	ldr	r3, [pc, #36]	@ (800c550 <prvHeapInit+0xc0>)
 800c52a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c52e:	601a      	str	r2, [r3, #0]
}
 800c530:	bf00      	nop
 800c532:	3714      	adds	r7, #20
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr
 800c53c:	20000ae4 	.word	0x20000ae4
 800c540:	20007844 	.word	0x20007844
 800c544:	2000784c 	.word	0x2000784c
 800c548:	20007854 	.word	0x20007854
 800c54c:	20007850 	.word	0x20007850
 800c550:	20007860 	.word	0x20007860

0800c554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c55c:	4b28      	ldr	r3, [pc, #160]	@ (800c600 <prvInsertBlockIntoFreeList+0xac>)
 800c55e:	60fb      	str	r3, [r7, #12]
 800c560:	e002      	b.n	800c568 <prvInsertBlockIntoFreeList+0x14>
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	60fb      	str	r3, [r7, #12]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d8f7      	bhi.n	800c562 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	4413      	add	r3, r2
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	429a      	cmp	r2, r3
 800c582:	d108      	bne.n	800c596 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	685a      	ldr	r2, [r3, #4]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	441a      	add	r2, r3
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	441a      	add	r2, r3
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d118      	bne.n	800c5dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	4b15      	ldr	r3, [pc, #84]	@ (800c604 <prvInsertBlockIntoFreeList+0xb0>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d00d      	beq.n	800c5d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	685a      	ldr	r2, [r3, #4]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	441a      	add	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	601a      	str	r2, [r3, #0]
 800c5d0:	e008      	b.n	800c5e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800c604 <prvInsertBlockIntoFreeList+0xb0>)
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	601a      	str	r2, [r3, #0]
 800c5da:	e003      	b.n	800c5e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d002      	beq.n	800c5f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5f2:	bf00      	nop
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	20007844 	.word	0x20007844
 800c604:	2000784c 	.word	0x2000784c

0800c608 <arm_cfft_radix8by2_f32>:
 800c608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c60c:	ed2d 8b08 	vpush	{d8-d11}
 800c610:	4607      	mov	r7, r0
 800c612:	4608      	mov	r0, r1
 800c614:	f8b7 c000 	ldrh.w	ip, [r7]
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800c61e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800c622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c626:	f000 80b0 	beq.w	800c78a <arm_cfft_radix8by2_f32+0x182>
 800c62a:	008c      	lsls	r4, r1, #2
 800c62c:	3410      	adds	r4, #16
 800c62e:	f100 0310 	add.w	r3, r0, #16
 800c632:	1906      	adds	r6, r0, r4
 800c634:	3210      	adds	r2, #16
 800c636:	4444      	add	r4, r8
 800c638:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800c63c:	f108 0510 	add.w	r5, r8, #16
 800c640:	ed15 2a04 	vldr	s4, [r5, #-16]
 800c644:	ed55 2a03 	vldr	s5, [r5, #-12]
 800c648:	ed54 4a04 	vldr	s9, [r4, #-16]
 800c64c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800c650:	ed14 6a02 	vldr	s12, [r4, #-8]
 800c654:	ed54 5a01 	vldr	s11, [r4, #-4]
 800c658:	ed53 3a04 	vldr	s7, [r3, #-16]
 800c65c:	ed15 0a02 	vldr	s0, [r5, #-8]
 800c660:	ed55 0a01 	vldr	s1, [r5, #-4]
 800c664:	ed56 6a04 	vldr	s13, [r6, #-16]
 800c668:	ed16 3a03 	vldr	s6, [r6, #-12]
 800c66c:	ed13 7a03 	vldr	s14, [r3, #-12]
 800c670:	ed13 5a02 	vldr	s10, [r3, #-8]
 800c674:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c678:	ed16 1a02 	vldr	s2, [r6, #-8]
 800c67c:	ed56 1a01 	vldr	s3, [r6, #-4]
 800c680:	ee73 ba82 	vadd.f32	s23, s7, s4
 800c684:	ee37 ba22 	vadd.f32	s22, s14, s5
 800c688:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800c68c:	ee33 9a04 	vadd.f32	s18, s6, s8
 800c690:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800c694:	ee75 aa00 	vadd.f32	s21, s10, s0
 800c698:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800c69c:	ee71 8a06 	vadd.f32	s17, s2, s12
 800c6a0:	ed43 ba04 	vstr	s23, [r3, #-16]
 800c6a4:	ed03 ba03 	vstr	s22, [r3, #-12]
 800c6a8:	ed43 aa02 	vstr	s21, [r3, #-8]
 800c6ac:	ed03 aa01 	vstr	s20, [r3, #-4]
 800c6b0:	ed06 8a01 	vstr	s16, [r6, #-4]
 800c6b4:	ed46 9a04 	vstr	s19, [r6, #-16]
 800c6b8:	ed06 9a03 	vstr	s18, [r6, #-12]
 800c6bc:	ed46 8a02 	vstr	s17, [r6, #-8]
 800c6c0:	ee37 7a62 	vsub.f32	s14, s14, s5
 800c6c4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800c6c8:	ee34 4a43 	vsub.f32	s8, s8, s6
 800c6cc:	ed52 6a03 	vldr	s13, [r2, #-12]
 800c6d0:	ed12 3a04 	vldr	s6, [r2, #-16]
 800c6d4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800c6d8:	ee27 8a26 	vmul.f32	s16, s14, s13
 800c6dc:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800c6e0:	ee23 2a83 	vmul.f32	s4, s7, s6
 800c6e4:	ee64 4a83 	vmul.f32	s9, s9, s6
 800c6e8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800c6ec:	ee27 7a03 	vmul.f32	s14, s14, s6
 800c6f0:	ee64 6a26 	vmul.f32	s13, s8, s13
 800c6f4:	ee24 4a03 	vmul.f32	s8, s8, s6
 800c6f8:	ee37 7a63 	vsub.f32	s14, s14, s7
 800c6fc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c700:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800c704:	ee32 3a08 	vadd.f32	s6, s4, s16
 800c708:	ed05 7a03 	vstr	s14, [r5, #-12]
 800c70c:	ed05 3a04 	vstr	s6, [r5, #-16]
 800c710:	ed04 4a04 	vstr	s8, [r4, #-16]
 800c714:	ed44 6a03 	vstr	s13, [r4, #-12]
 800c718:	ed12 7a01 	vldr	s14, [r2, #-4]
 800c71c:	ee76 6a41 	vsub.f32	s13, s12, s2
 800c720:	ee35 5a40 	vsub.f32	s10, s10, s0
 800c724:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800c728:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c72c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800c730:	ee67 3a87 	vmul.f32	s7, s15, s14
 800c734:	ee66 4a87 	vmul.f32	s9, s13, s14
 800c738:	ee25 4a25 	vmul.f32	s8, s10, s11
 800c73c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c740:	ee25 5a07 	vmul.f32	s10, s10, s14
 800c744:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c748:	ee26 7a07 	vmul.f32	s14, s12, s14
 800c74c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800c750:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c754:	ee74 5a23 	vadd.f32	s11, s8, s7
 800c758:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800c75c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c760:	3310      	adds	r3, #16
 800c762:	4563      	cmp	r3, ip
 800c764:	ed45 5a02 	vstr	s11, [r5, #-8]
 800c768:	f106 0610 	add.w	r6, r6, #16
 800c76c:	ed45 7a01 	vstr	s15, [r5, #-4]
 800c770:	f102 0210 	add.w	r2, r2, #16
 800c774:	ed04 6a02 	vstr	s12, [r4, #-8]
 800c778:	ed04 7a01 	vstr	s14, [r4, #-4]
 800c77c:	f105 0510 	add.w	r5, r5, #16
 800c780:	f104 0410 	add.w	r4, r4, #16
 800c784:	f47f af5c 	bne.w	800c640 <arm_cfft_radix8by2_f32+0x38>
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	b28c      	uxth	r4, r1
 800c78c:	4621      	mov	r1, r4
 800c78e:	2302      	movs	r3, #2
 800c790:	f000 fc60 	bl	800d054 <arm_radix8_butterfly_f32>
 800c794:	ecbd 8b08 	vpop	{d8-d11}
 800c798:	4621      	mov	r1, r4
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	4640      	mov	r0, r8
 800c79e:	2302      	movs	r3, #2
 800c7a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a4:	f000 bc56 	b.w	800d054 <arm_radix8_butterfly_f32>

0800c7a8 <arm_cfft_radix8by4_f32>:
 800c7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ac:	ed2d 8b0a 	vpush	{d8-d12}
 800c7b0:	b08d      	sub	sp, #52	@ 0x34
 800c7b2:	460d      	mov	r5, r1
 800c7b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c7b6:	8801      	ldrh	r1, [r0, #0]
 800c7b8:	6842      	ldr	r2, [r0, #4]
 800c7ba:	900a      	str	r0, [sp, #40]	@ 0x28
 800c7bc:	0849      	lsrs	r1, r1, #1
 800c7be:	008b      	lsls	r3, r1, #2
 800c7c0:	18ee      	adds	r6, r5, r3
 800c7c2:	18f0      	adds	r0, r6, r3
 800c7c4:	edd0 5a00 	vldr	s11, [r0]
 800c7c8:	edd5 7a00 	vldr	s15, [r5]
 800c7cc:	ed96 7a00 	vldr	s14, [r6]
 800c7d0:	edd0 3a01 	vldr	s7, [r0, #4]
 800c7d4:	ed96 4a01 	vldr	s8, [r6, #4]
 800c7d8:	ed95 5a01 	vldr	s10, [r5, #4]
 800c7dc:	9008      	str	r0, [sp, #32]
 800c7de:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800c7e2:	18c7      	adds	r7, r0, r3
 800c7e4:	edd7 4a00 	vldr	s9, [r7]
 800c7e8:	ed97 3a01 	vldr	s6, [r7, #4]
 800c7ec:	9701      	str	r7, [sp, #4]
 800c7ee:	ee77 6a06 	vadd.f32	s13, s14, s12
 800c7f2:	462c      	mov	r4, r5
 800c7f4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c7f8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c7fc:	ee16 ca90 	vmov	ip, s13
 800c800:	f844 cb08 	str.w	ip, [r4], #8
 800c804:	ee75 6a23 	vadd.f32	s13, s10, s7
 800c808:	edd6 5a01 	vldr	s11, [r6, #4]
 800c80c:	edd7 2a01 	vldr	s5, [r7, #4]
 800c810:	9404      	str	r4, [sp, #16]
 800c812:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c816:	ee74 3a27 	vadd.f32	s7, s8, s15
 800c81a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c81e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800c822:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800c826:	0849      	lsrs	r1, r1, #1
 800c828:	f102 0e08 	add.w	lr, r2, #8
 800c82c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800c830:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800c834:	9109      	str	r1, [sp, #36]	@ 0x24
 800c836:	ee35 4a47 	vsub.f32	s8, s10, s14
 800c83a:	f1a1 0902 	sub.w	r9, r1, #2
 800c83e:	f8cd e00c 	str.w	lr, [sp, #12]
 800c842:	4631      	mov	r1, r6
 800c844:	ee13 ea90 	vmov	lr, s7
 800c848:	ee36 6a64 	vsub.f32	s12, s12, s9
 800c84c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800c850:	4604      	mov	r4, r0
 800c852:	edc5 5a01 	vstr	s11, [r5, #4]
 800c856:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c85a:	f841 eb08 	str.w	lr, [r1], #8
 800c85e:	ee34 5a24 	vadd.f32	s10, s8, s9
 800c862:	ee16 ea10 	vmov	lr, s12
 800c866:	ed86 5a01 	vstr	s10, [r6, #4]
 800c86a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800c86e:	f844 eb08 	str.w	lr, [r4], #8
 800c872:	ee77 7a83 	vadd.f32	s15, s15, s6
 800c876:	edc0 6a01 	vstr	s13, [r0, #4]
 800c87a:	9405      	str	r4, [sp, #20]
 800c87c:	4604      	mov	r4, r0
 800c87e:	ee17 0a90 	vmov	r0, s15
 800c882:	9106      	str	r1, [sp, #24]
 800c884:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c888:	f102 0110 	add.w	r1, r2, #16
 800c88c:	46bc      	mov	ip, r7
 800c88e:	9100      	str	r1, [sp, #0]
 800c890:	f847 0b08 	str.w	r0, [r7], #8
 800c894:	f102 0118 	add.w	r1, r2, #24
 800c898:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800c89c:	9102      	str	r1, [sp, #8]
 800c89e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800c8a2:	9007      	str	r0, [sp, #28]
 800c8a4:	f000 8134 	beq.w	800cb10 <arm_cfft_radix8by4_f32+0x368>
 800c8a8:	f102 0920 	add.w	r9, r2, #32
 800c8ac:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 800c8b0:	9a01      	ldr	r2, [sp, #4]
 800c8b2:	f8dd a000 	ldr.w	sl, [sp]
 800c8b6:	3b0c      	subs	r3, #12
 800c8b8:	4683      	mov	fp, r0
 800c8ba:	4463      	add	r3, ip
 800c8bc:	f105 0e10 	add.w	lr, r5, #16
 800c8c0:	f1a4 010c 	sub.w	r1, r4, #12
 800c8c4:	f104 0510 	add.w	r5, r4, #16
 800c8c8:	f1a6 0c0c 	sub.w	ip, r6, #12
 800c8cc:	f1a2 040c 	sub.w	r4, r2, #12
 800c8d0:	f106 0010 	add.w	r0, r6, #16
 800c8d4:	3210      	adds	r2, #16
 800c8d6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800c8da:	ed55 5a02 	vldr	s11, [r5, #-8]
 800c8de:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c8e2:	ed52 1a02 	vldr	s3, [r2, #-8]
 800c8e6:	ed55 6a01 	vldr	s13, [r5, #-4]
 800c8ea:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800c8ee:	ed12 1a01 	vldr	s2, [r2, #-4]
 800c8f2:	ed10 8a01 	vldr	s16, [r0, #-4]
 800c8f6:	ee35 4a25 	vadd.f32	s8, s10, s11
 800c8fa:	ee30 6a26 	vadd.f32	s12, s0, s13
 800c8fe:	ee37 7a84 	vadd.f32	s14, s15, s8
 800c902:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c906:	ee37 7a21 	vadd.f32	s14, s14, s3
 800c90a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800c90e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800c912:	ed10 7a01 	vldr	s14, [r0, #-4]
 800c916:	ed52 6a01 	vldr	s13, [r2, #-4]
 800c91a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800c91e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800c922:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c926:	ee70 3a67 	vsub.f32	s7, s0, s15
 800c92a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800c92e:	ed94 7a02 	vldr	s14, [r4, #8]
 800c932:	ed9c 2a02 	vldr	s4, [ip, #8]
 800c936:	ed91 ba02 	vldr	s22, [r1, #8]
 800c93a:	edd3 9a02 	vldr	s19, [r3, #8]
 800c93e:	edd4 2a01 	vldr	s5, [r4, #4]
 800c942:	ed9c 9a01 	vldr	s18, [ip, #4]
 800c946:	ed93 5a01 	vldr	s10, [r3, #4]
 800c94a:	edd1 0a01 	vldr	s1, [r1, #4]
 800c94e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800c952:	ee32 2a47 	vsub.f32	s4, s4, s14
 800c956:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800c95a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800c95e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800c962:	ee79 2a62 	vsub.f32	s5, s18, s5
 800c966:	ed8c 7a02 	vstr	s14, [ip, #8]
 800c96a:	ed91 7a01 	vldr	s14, [r1, #4]
 800c96e:	edd3 8a01 	vldr	s17, [r3, #4]
 800c972:	ee34 7a87 	vadd.f32	s14, s9, s14
 800c976:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800c97a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800c97e:	ee32 9a60 	vsub.f32	s18, s4, s1
 800c982:	ed8c 7a01 	vstr	s14, [ip, #4]
 800c986:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800c98a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800c98e:	ee73 8a22 	vadd.f32	s17, s6, s5
 800c992:	ee39 9a05 	vadd.f32	s18, s18, s10
 800c996:	ee7a aac1 	vsub.f32	s21, s21, s2
 800c99a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800c99e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800c9a2:	ee69 ba07 	vmul.f32	s23, s18, s14
 800c9a6:	ee6a aa87 	vmul.f32	s21, s21, s14
 800c9aa:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800c9ae:	ee63 ca87 	vmul.f32	s25, s7, s14
 800c9b2:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800c9b6:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800c9ba:	ee68 8a87 	vmul.f32	s17, s17, s14
 800c9be:	ee73 3aea 	vsub.f32	s7, s7, s21
 800c9c2:	ee78 8a89 	vadd.f32	s17, s17, s18
 800c9c6:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800c9ca:	ee3b aaca 	vsub.f32	s20, s23, s20
 800c9ce:	ee34 4a67 	vsub.f32	s8, s8, s15
 800c9d2:	ee76 6acb 	vsub.f32	s13, s13, s22
 800c9d6:	ee36 6a48 	vsub.f32	s12, s12, s16
 800c9da:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800c9de:	ed00 7a02 	vstr	s14, [r0, #-8]
 800c9e2:	ed40 3a01 	vstr	s7, [r0, #-4]
 800c9e6:	edc1 8a01 	vstr	s17, [r1, #4]
 800c9ea:	ed81 aa02 	vstr	s20, [r1, #8]
 800c9ee:	ed59 3a04 	vldr	s7, [r9, #-16]
 800c9f2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800c9f6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800c9fa:	ed59 6a03 	vldr	s13, [r9, #-12]
 800c9fe:	ee34 4a61 	vsub.f32	s8, s8, s3
 800ca02:	ee36 6a41 	vsub.f32	s12, s12, s2
 800ca06:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800ca0a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800ca0e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800ca12:	ee26 6a23 	vmul.f32	s12, s12, s7
 800ca16:	ee24 4a26 	vmul.f32	s8, s8, s13
 800ca1a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ca1e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800ca22:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800ca26:	ee36 6a44 	vsub.f32	s12, s12, s8
 800ca2a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ca2e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800ca32:	ee79 3a29 	vadd.f32	s7, s18, s19
 800ca36:	ee75 6a60 	vsub.f32	s13, s10, s1
 800ca3a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800ca3e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ca42:	ed45 3a02 	vstr	s7, [r5, #-8]
 800ca46:	ed05 6a01 	vstr	s12, [r5, #-4]
 800ca4a:	ed84 7a01 	vstr	s14, [r4, #4]
 800ca4e:	ed84 4a02 	vstr	s8, [r4, #8]
 800ca52:	ee35 6a81 	vadd.f32	s12, s11, s2
 800ca56:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800ca5a:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 800ca5e:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 800ca62:	ee33 3a62 	vsub.f32	s6, s6, s5
 800ca66:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800ca6a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800ca6e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800ca72:	ee26 5a25 	vmul.f32	s10, s12, s11
 800ca76:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ca7a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800ca7e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ca82:	ee63 6a26 	vmul.f32	s13, s6, s13
 800ca86:	ee23 3a25 	vmul.f32	s6, s6, s11
 800ca8a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ca8e:	ee75 5a24 	vadd.f32	s11, s10, s9
 800ca92:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800ca96:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ca9a:	f1bb 0b01 	subs.w	fp, fp, #1
 800ca9e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800caa2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800caa6:	f10e 0e08 	add.w	lr, lr, #8
 800caaa:	ed83 3a02 	vstr	s6, [r3, #8]
 800caae:	ed83 7a01 	vstr	s14, [r3, #4]
 800cab2:	f1ac 0c08 	sub.w	ip, ip, #8
 800cab6:	f10a 0a08 	add.w	sl, sl, #8
 800caba:	f100 0008 	add.w	r0, r0, #8
 800cabe:	f1a1 0108 	sub.w	r1, r1, #8
 800cac2:	f109 0910 	add.w	r9, r9, #16
 800cac6:	f105 0508 	add.w	r5, r5, #8
 800caca:	f1a4 0408 	sub.w	r4, r4, #8
 800cace:	f108 0818 	add.w	r8, r8, #24
 800cad2:	f102 0208 	add.w	r2, r2, #8
 800cad6:	f1a3 0308 	sub.w	r3, r3, #8
 800cada:	f47f aefc 	bne.w	800c8d6 <arm_cfft_radix8by4_f32+0x12e>
 800cade:	9907      	ldr	r1, [sp, #28]
 800cae0:	9800      	ldr	r0, [sp, #0]
 800cae2:	00cb      	lsls	r3, r1, #3
 800cae4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800cae8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800caec:	9100      	str	r1, [sp, #0]
 800caee:	9904      	ldr	r1, [sp, #16]
 800caf0:	4419      	add	r1, r3
 800caf2:	9104      	str	r1, [sp, #16]
 800caf4:	9903      	ldr	r1, [sp, #12]
 800caf6:	4419      	add	r1, r3
 800caf8:	9103      	str	r1, [sp, #12]
 800cafa:	9906      	ldr	r1, [sp, #24]
 800cafc:	4419      	add	r1, r3
 800cafe:	9106      	str	r1, [sp, #24]
 800cb00:	9905      	ldr	r1, [sp, #20]
 800cb02:	441f      	add	r7, r3
 800cb04:	4419      	add	r1, r3
 800cb06:	9b02      	ldr	r3, [sp, #8]
 800cb08:	9105      	str	r1, [sp, #20]
 800cb0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb0e:	9302      	str	r3, [sp, #8]
 800cb10:	9904      	ldr	r1, [sp, #16]
 800cb12:	9805      	ldr	r0, [sp, #20]
 800cb14:	ed91 4a00 	vldr	s8, [r1]
 800cb18:	edd0 6a00 	vldr	s13, [r0]
 800cb1c:	9b06      	ldr	r3, [sp, #24]
 800cb1e:	ed97 3a00 	vldr	s6, [r7]
 800cb22:	edd3 7a00 	vldr	s15, [r3]
 800cb26:	edd0 4a01 	vldr	s9, [r0, #4]
 800cb2a:	edd1 3a01 	vldr	s7, [r1, #4]
 800cb2e:	ed97 2a01 	vldr	s4, [r7, #4]
 800cb32:	ed93 7a01 	vldr	s14, [r3, #4]
 800cb36:	9a03      	ldr	r2, [sp, #12]
 800cb38:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800cb3c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800cb40:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800cb44:	ee37 5a86 	vadd.f32	s10, s15, s12
 800cb48:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800cb4c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800cb50:	ee74 6a66 	vsub.f32	s13, s8, s13
 800cb54:	ed81 5a00 	vstr	s10, [r1]
 800cb58:	ed93 5a01 	vldr	s10, [r3, #4]
 800cb5c:	edd7 4a01 	vldr	s9, [r7, #4]
 800cb60:	ee35 5a85 	vadd.f32	s10, s11, s10
 800cb64:	ee37 4a26 	vadd.f32	s8, s14, s13
 800cb68:	ee35 5a24 	vadd.f32	s10, s10, s9
 800cb6c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800cb70:	ed81 5a01 	vstr	s10, [r1, #4]
 800cb74:	edd2 1a00 	vldr	s3, [r2]
 800cb78:	edd2 2a01 	vldr	s5, [r2, #4]
 800cb7c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800cb80:	ee34 4a42 	vsub.f32	s8, s8, s4
 800cb84:	ee36 6a67 	vsub.f32	s12, s12, s15
 800cb88:	ee64 4a21 	vmul.f32	s9, s8, s3
 800cb8c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800cb90:	ee65 2a22 	vmul.f32	s5, s10, s5
 800cb94:	ee25 5a21 	vmul.f32	s10, s10, s3
 800cb98:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800cb9c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800cba0:	edc3 2a00 	vstr	s5, [r3]
 800cba4:	ed83 5a01 	vstr	s10, [r3, #4]
 800cba8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800cbac:	9b00      	ldr	r3, [sp, #0]
 800cbae:	ee36 6a43 	vsub.f32	s12, s12, s6
 800cbb2:	ed93 4a01 	vldr	s8, [r3, #4]
 800cbb6:	ed93 5a00 	vldr	s10, [r3]
 800cbba:	9b02      	ldr	r3, [sp, #8]
 800cbbc:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800cbc0:	ee66 4a05 	vmul.f32	s9, s12, s10
 800cbc4:	ee25 5a85 	vmul.f32	s10, s11, s10
 800cbc8:	ee26 6a04 	vmul.f32	s12, s12, s8
 800cbcc:	ee65 5a84 	vmul.f32	s11, s11, s8
 800cbd0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800cbd4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800cbd8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800cbdc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800cbe0:	ed80 6a01 	vstr	s12, [r0, #4]
 800cbe4:	edc0 5a00 	vstr	s11, [r0]
 800cbe8:	edd3 5a01 	vldr	s11, [r3, #4]
 800cbec:	edd3 6a00 	vldr	s13, [r3]
 800cbf0:	ee37 7a02 	vadd.f32	s14, s14, s4
 800cbf4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800cbf8:	ee27 6a26 	vmul.f32	s12, s14, s13
 800cbfc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800cc00:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cc04:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cc08:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800cc0c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800cc10:	ed87 7a01 	vstr	s14, [r7, #4]
 800cc14:	edc7 7a00 	vstr	s15, [r7]
 800cc18:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 800cc1c:	4621      	mov	r1, r4
 800cc1e:	686a      	ldr	r2, [r5, #4]
 800cc20:	2304      	movs	r3, #4
 800cc22:	f000 fa17 	bl	800d054 <arm_radix8_butterfly_f32>
 800cc26:	4630      	mov	r0, r6
 800cc28:	4621      	mov	r1, r4
 800cc2a:	686a      	ldr	r2, [r5, #4]
 800cc2c:	2304      	movs	r3, #4
 800cc2e:	f000 fa11 	bl	800d054 <arm_radix8_butterfly_f32>
 800cc32:	9808      	ldr	r0, [sp, #32]
 800cc34:	686a      	ldr	r2, [r5, #4]
 800cc36:	4621      	mov	r1, r4
 800cc38:	2304      	movs	r3, #4
 800cc3a:	f000 fa0b 	bl	800d054 <arm_radix8_butterfly_f32>
 800cc3e:	686a      	ldr	r2, [r5, #4]
 800cc40:	9801      	ldr	r0, [sp, #4]
 800cc42:	4621      	mov	r1, r4
 800cc44:	2304      	movs	r3, #4
 800cc46:	b00d      	add	sp, #52	@ 0x34
 800cc48:	ecbd 8b0a 	vpop	{d8-d12}
 800cc4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc50:	f000 ba00 	b.w	800d054 <arm_radix8_butterfly_f32>

0800cc54 <arm_cfft_f32>:
 800cc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc58:	2a01      	cmp	r2, #1
 800cc5a:	4606      	mov	r6, r0
 800cc5c:	4617      	mov	r7, r2
 800cc5e:	460c      	mov	r4, r1
 800cc60:	4698      	mov	r8, r3
 800cc62:	8805      	ldrh	r5, [r0, #0]
 800cc64:	d056      	beq.n	800cd14 <arm_cfft_f32+0xc0>
 800cc66:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800cc6a:	d063      	beq.n	800cd34 <arm_cfft_f32+0xe0>
 800cc6c:	d916      	bls.n	800cc9c <arm_cfft_f32+0x48>
 800cc6e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800cc72:	d01a      	beq.n	800ccaa <arm_cfft_f32+0x56>
 800cc74:	d947      	bls.n	800cd06 <arm_cfft_f32+0xb2>
 800cc76:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800cc7a:	d05b      	beq.n	800cd34 <arm_cfft_f32+0xe0>
 800cc7c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800cc80:	d105      	bne.n	800cc8e <arm_cfft_f32+0x3a>
 800cc82:	2301      	movs	r3, #1
 800cc84:	6872      	ldr	r2, [r6, #4]
 800cc86:	4629      	mov	r1, r5
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f000 f9e3 	bl	800d054 <arm_radix8_butterfly_f32>
 800cc8e:	f1b8 0f00 	cmp.w	r8, #0
 800cc92:	d111      	bne.n	800ccb8 <arm_cfft_f32+0x64>
 800cc94:	2f01      	cmp	r7, #1
 800cc96:	d016      	beq.n	800ccc6 <arm_cfft_f32+0x72>
 800cc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9c:	2d20      	cmp	r5, #32
 800cc9e:	d049      	beq.n	800cd34 <arm_cfft_f32+0xe0>
 800cca0:	d935      	bls.n	800cd0e <arm_cfft_f32+0xba>
 800cca2:	2d40      	cmp	r5, #64	@ 0x40
 800cca4:	d0ed      	beq.n	800cc82 <arm_cfft_f32+0x2e>
 800cca6:	2d80      	cmp	r5, #128	@ 0x80
 800cca8:	d1f1      	bne.n	800cc8e <arm_cfft_f32+0x3a>
 800ccaa:	4621      	mov	r1, r4
 800ccac:	4630      	mov	r0, r6
 800ccae:	f7ff fcab 	bl	800c608 <arm_cfft_radix8by2_f32>
 800ccb2:	f1b8 0f00 	cmp.w	r8, #0
 800ccb6:	d0ed      	beq.n	800cc94 <arm_cfft_f32+0x40>
 800ccb8:	68b2      	ldr	r2, [r6, #8]
 800ccba:	89b1      	ldrh	r1, [r6, #12]
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	f000 f841 	bl	800cd44 <arm_bitreversal_32>
 800ccc2:	2f01      	cmp	r7, #1
 800ccc4:	d1e8      	bne.n	800cc98 <arm_cfft_f32+0x44>
 800ccc6:	ee07 5a90 	vmov	s15, r5
 800ccca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ccd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ccd6:	2d00      	cmp	r5, #0
 800ccd8:	d0de      	beq.n	800cc98 <arm_cfft_f32+0x44>
 800ccda:	f104 0108 	add.w	r1, r4, #8
 800ccde:	2300      	movs	r3, #0
 800cce0:	3301      	adds	r3, #1
 800cce2:	429d      	cmp	r5, r3
 800cce4:	f101 0108 	add.w	r1, r1, #8
 800cce8:	ed11 7a04 	vldr	s14, [r1, #-16]
 800ccec:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ccf0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ccf4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ccf8:	ed01 7a04 	vstr	s14, [r1, #-16]
 800ccfc:	ed41 7a03 	vstr	s15, [r1, #-12]
 800cd00:	d1ee      	bne.n	800cce0 <arm_cfft_f32+0x8c>
 800cd02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd06:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800cd0a:	d0ba      	beq.n	800cc82 <arm_cfft_f32+0x2e>
 800cd0c:	e7bf      	b.n	800cc8e <arm_cfft_f32+0x3a>
 800cd0e:	2d10      	cmp	r5, #16
 800cd10:	d0cb      	beq.n	800ccaa <arm_cfft_f32+0x56>
 800cd12:	e7bc      	b.n	800cc8e <arm_cfft_f32+0x3a>
 800cd14:	b19d      	cbz	r5, 800cd3e <arm_cfft_f32+0xea>
 800cd16:	f101 030c 	add.w	r3, r1, #12
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800cd20:	3201      	adds	r2, #1
 800cd22:	eef1 7a67 	vneg.f32	s15, s15
 800cd26:	4295      	cmp	r5, r2
 800cd28:	ed43 7a02 	vstr	s15, [r3, #-8]
 800cd2c:	f103 0308 	add.w	r3, r3, #8
 800cd30:	d1f4      	bne.n	800cd1c <arm_cfft_f32+0xc8>
 800cd32:	e798      	b.n	800cc66 <arm_cfft_f32+0x12>
 800cd34:	4621      	mov	r1, r4
 800cd36:	4630      	mov	r0, r6
 800cd38:	f7ff fd36 	bl	800c7a8 <arm_cfft_radix8by4_f32>
 800cd3c:	e7a7      	b.n	800cc8e <arm_cfft_f32+0x3a>
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d0aa      	beq.n	800cc98 <arm_cfft_f32+0x44>
 800cd42:	e7b9      	b.n	800ccb8 <arm_cfft_f32+0x64>

0800cd44 <arm_bitreversal_32>:
 800cd44:	b1e9      	cbz	r1, 800cd82 <arm_bitreversal_32+0x3e>
 800cd46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd48:	2500      	movs	r5, #0
 800cd4a:	f102 0e02 	add.w	lr, r2, #2
 800cd4e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800cd52:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800cd56:	08a4      	lsrs	r4, r4, #2
 800cd58:	089b      	lsrs	r3, r3, #2
 800cd5a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800cd5e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800cd62:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800cd66:	00a6      	lsls	r6, r4, #2
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	1d34      	adds	r4, r6, #4
 800cd72:	3502      	adds	r5, #2
 800cd74:	58c6      	ldr	r6, [r0, r3]
 800cd76:	5907      	ldr	r7, [r0, r4]
 800cd78:	50c7      	str	r7, [r0, r3]
 800cd7a:	428d      	cmp	r5, r1
 800cd7c:	5106      	str	r6, [r0, r4]
 800cd7e:	d3e6      	bcc.n	800cd4e <arm_bitreversal_32+0xa>
 800cd80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd82:	4770      	bx	lr

0800cd84 <arm_cmplx_mag_f32>:
 800cd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd88:	ed2d 8b02 	vpush	{d8}
 800cd8c:	0897      	lsrs	r7, r2, #2
 800cd8e:	b084      	sub	sp, #16
 800cd90:	d077      	beq.n	800ce82 <arm_cmplx_mag_f32+0xfe>
 800cd92:	f04f 0800 	mov.w	r8, #0
 800cd96:	f100 0420 	add.w	r4, r0, #32
 800cd9a:	f101 0510 	add.w	r5, r1, #16
 800cd9e:	463e      	mov	r6, r7
 800cda0:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800cda4:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800cda8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cdac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cdb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cdb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cdb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdbc:	f2c0 80c5 	blt.w	800cf4a <arm_cmplx_mag_f32+0x1c6>
 800cdc0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cdc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800cdcc:	f100 80cb 	bmi.w	800cf66 <arm_cmplx_mag_f32+0x1e2>
 800cdd0:	ed05 8a04 	vstr	s16, [r5, #-16]
 800cdd4:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800cdd8:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800cddc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cde0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cde4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cde8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf0:	f2c0 80a8 	blt.w	800cf44 <arm_cmplx_mag_f32+0x1c0>
 800cdf4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cdf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdfc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ce00:	f100 80a8 	bmi.w	800cf54 <arm_cmplx_mag_f32+0x1d0>
 800ce04:	ed05 8a03 	vstr	s16, [r5, #-12]
 800ce08:	ed14 0a04 	vldr	s0, [r4, #-16]
 800ce0c:	ed54 7a03 	vldr	s15, [r4, #-12]
 800ce10:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ce14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ce18:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ce1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ce20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce24:	f2c0 808b 	blt.w	800cf3e <arm_cmplx_mag_f32+0x1ba>
 800ce28:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ce2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce30:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ce34:	f100 80a9 	bmi.w	800cf8a <arm_cmplx_mag_f32+0x206>
 800ce38:	ed05 8a02 	vstr	s16, [r5, #-8]
 800ce3c:	ed14 0a02 	vldr	s0, [r4, #-8]
 800ce40:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ce44:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ce48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ce4c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ce50:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ce54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce58:	db6e      	blt.n	800cf38 <arm_cmplx_mag_f32+0x1b4>
 800ce5a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ce5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce62:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ce66:	f100 8087 	bmi.w	800cf78 <arm_cmplx_mag_f32+0x1f4>
 800ce6a:	ed05 8a01 	vstr	s16, [r5, #-4]
 800ce6e:	3e01      	subs	r6, #1
 800ce70:	f104 0420 	add.w	r4, r4, #32
 800ce74:	f105 0510 	add.w	r5, r5, #16
 800ce78:	d192      	bne.n	800cda0 <arm_cmplx_mag_f32+0x1c>
 800ce7a:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800ce7e:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800ce82:	f012 0203 	ands.w	r2, r2, #3
 800ce86:	d052      	beq.n	800cf2e <arm_cmplx_mag_f32+0x1aa>
 800ce88:	ed90 0a00 	vldr	s0, [r0]
 800ce8c:	edd0 7a01 	vldr	s15, [r0, #4]
 800ce90:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ce94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ce98:	2300      	movs	r3, #0
 800ce9a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ce9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea6:	bfb8      	it	lt
 800cea8:	600b      	strlt	r3, [r1, #0]
 800ceaa:	db08      	blt.n	800cebe <arm_cmplx_mag_f32+0x13a>
 800ceac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ceb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceb4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ceb8:	d479      	bmi.n	800cfae <arm_cmplx_mag_f32+0x22a>
 800ceba:	ed81 8a00 	vstr	s16, [r1]
 800cebe:	3a01      	subs	r2, #1
 800cec0:	d035      	beq.n	800cf2e <arm_cmplx_mag_f32+0x1aa>
 800cec2:	ed90 0a02 	vldr	s0, [r0, #8]
 800cec6:	edd0 7a03 	vldr	s15, [r0, #12]
 800ceca:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cece:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ced2:	2300      	movs	r3, #0
 800ced4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ced8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cee0:	bfb8      	it	lt
 800cee2:	604b      	strlt	r3, [r1, #4]
 800cee4:	db08      	blt.n	800cef8 <arm_cmplx_mag_f32+0x174>
 800cee6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ceea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceee:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800cef2:	d453      	bmi.n	800cf9c <arm_cmplx_mag_f32+0x218>
 800cef4:	ed81 8a01 	vstr	s16, [r1, #4]
 800cef8:	2a01      	cmp	r2, #1
 800cefa:	d018      	beq.n	800cf2e <arm_cmplx_mag_f32+0x1aa>
 800cefc:	ed90 0a04 	vldr	s0, [r0, #16]
 800cf00:	edd0 7a05 	vldr	s15, [r0, #20]
 800cf04:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cf08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cf12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf1a:	db19      	blt.n	800cf50 <arm_cmplx_mag_f32+0x1cc>
 800cf1c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cf20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf24:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800cf28:	d44a      	bmi.n	800cfc0 <arm_cmplx_mag_f32+0x23c>
 800cf2a:	ed81 8a02 	vstr	s16, [r1, #8]
 800cf2e:	b004      	add	sp, #16
 800cf30:	ecbd 8b02 	vpop	{d8}
 800cf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf38:	f845 8c04 	str.w	r8, [r5, #-4]
 800cf3c:	e797      	b.n	800ce6e <arm_cmplx_mag_f32+0xea>
 800cf3e:	f845 8c08 	str.w	r8, [r5, #-8]
 800cf42:	e77b      	b.n	800ce3c <arm_cmplx_mag_f32+0xb8>
 800cf44:	f845 8c0c 	str.w	r8, [r5, #-12]
 800cf48:	e75e      	b.n	800ce08 <arm_cmplx_mag_f32+0x84>
 800cf4a:	f845 8c10 	str.w	r8, [r5, #-16]
 800cf4e:	e741      	b.n	800cdd4 <arm_cmplx_mag_f32+0x50>
 800cf50:	608b      	str	r3, [r1, #8]
 800cf52:	e7ec      	b.n	800cf2e <arm_cmplx_mag_f32+0x1aa>
 800cf54:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cf58:	9001      	str	r0, [sp, #4]
 800cf5a:	f003 fa05 	bl	8010368 <sqrtf>
 800cf5e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cf62:	9801      	ldr	r0, [sp, #4]
 800cf64:	e74e      	b.n	800ce04 <arm_cmplx_mag_f32+0x80>
 800cf66:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cf6a:	9001      	str	r0, [sp, #4]
 800cf6c:	f003 f9fc 	bl	8010368 <sqrtf>
 800cf70:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cf74:	9801      	ldr	r0, [sp, #4]
 800cf76:	e72b      	b.n	800cdd0 <arm_cmplx_mag_f32+0x4c>
 800cf78:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cf7c:	9001      	str	r0, [sp, #4]
 800cf7e:	f003 f9f3 	bl	8010368 <sqrtf>
 800cf82:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cf86:	9801      	ldr	r0, [sp, #4]
 800cf88:	e76f      	b.n	800ce6a <arm_cmplx_mag_f32+0xe6>
 800cf8a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cf8e:	9001      	str	r0, [sp, #4]
 800cf90:	f003 f9ea 	bl	8010368 <sqrtf>
 800cf94:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cf98:	9801      	ldr	r0, [sp, #4]
 800cf9a:	e74d      	b.n	800ce38 <arm_cmplx_mag_f32+0xb4>
 800cf9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfa0:	9201      	str	r2, [sp, #4]
 800cfa2:	f003 f9e1 	bl	8010368 <sqrtf>
 800cfa6:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800cfaa:	9903      	ldr	r1, [sp, #12]
 800cfac:	e7a2      	b.n	800cef4 <arm_cmplx_mag_f32+0x170>
 800cfae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfb2:	9201      	str	r2, [sp, #4]
 800cfb4:	f003 f9d8 	bl	8010368 <sqrtf>
 800cfb8:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800cfbc:	9903      	ldr	r1, [sp, #12]
 800cfbe:	e77c      	b.n	800ceba <arm_cmplx_mag_f32+0x136>
 800cfc0:	9101      	str	r1, [sp, #4]
 800cfc2:	f003 f9d1 	bl	8010368 <sqrtf>
 800cfc6:	9901      	ldr	r1, [sp, #4]
 800cfc8:	e7af      	b.n	800cf2a <arm_cmplx_mag_f32+0x1a6>
 800cfca:	bf00      	nop

0800cfcc <arm_scale_f32>:
 800cfcc:	b470      	push	{r4, r5, r6}
 800cfce:	0896      	lsrs	r6, r2, #2
 800cfd0:	d025      	beq.n	800d01e <arm_scale_f32+0x52>
 800cfd2:	f100 0410 	add.w	r4, r0, #16
 800cfd6:	f101 0310 	add.w	r3, r1, #16
 800cfda:	4635      	mov	r5, r6
 800cfdc:	ed54 7a04 	vldr	s15, [r4, #-16]
 800cfe0:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cfe4:	3d01      	subs	r5, #1
 800cfe6:	ed43 7a04 	vstr	s15, [r3, #-16]
 800cfea:	ed54 7a03 	vldr	s15, [r4, #-12]
 800cfee:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cff2:	f104 0410 	add.w	r4, r4, #16
 800cff6:	ed43 7a03 	vstr	s15, [r3, #-12]
 800cffa:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800cffe:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d002:	f103 0310 	add.w	r3, r3, #16
 800d006:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 800d00a:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800d00e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d012:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 800d016:	d1e1      	bne.n	800cfdc <arm_scale_f32+0x10>
 800d018:	0136      	lsls	r6, r6, #4
 800d01a:	4430      	add	r0, r6
 800d01c:	4431      	add	r1, r6
 800d01e:	f012 0203 	ands.w	r2, r2, #3
 800d022:	d015      	beq.n	800d050 <arm_scale_f32+0x84>
 800d024:	edd0 7a00 	vldr	s15, [r0]
 800d028:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d02c:	3a01      	subs	r2, #1
 800d02e:	edc1 7a00 	vstr	s15, [r1]
 800d032:	d00d      	beq.n	800d050 <arm_scale_f32+0x84>
 800d034:	edd0 7a01 	vldr	s15, [r0, #4]
 800d038:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d03c:	2a01      	cmp	r2, #1
 800d03e:	edc1 7a01 	vstr	s15, [r1, #4]
 800d042:	d005      	beq.n	800d050 <arm_scale_f32+0x84>
 800d044:	edd0 7a02 	vldr	s15, [r0, #8]
 800d048:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d04c:	ed81 0a02 	vstr	s0, [r1, #8]
 800d050:	bc70      	pop	{r4, r5, r6}
 800d052:	4770      	bx	lr

0800d054 <arm_radix8_butterfly_f32>:
 800d054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d058:	ed2d 8b10 	vpush	{d8-d15}
 800d05c:	b095      	sub	sp, #84	@ 0x54
 800d05e:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 800d062:	4603      	mov	r3, r0
 800d064:	3304      	adds	r3, #4
 800d066:	ed9f bab9 	vldr	s22, [pc, #740]	@ 800d34c <arm_radix8_butterfly_f32+0x2f8>
 800d06a:	9012      	str	r0, [sp, #72]	@ 0x48
 800d06c:	468b      	mov	fp, r1
 800d06e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d070:	4689      	mov	r9, r1
 800d072:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800d076:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d078:	960f      	str	r6, [sp, #60]	@ 0x3c
 800d07a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800d07e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800d082:	eb03 0508 	add.w	r5, r3, r8
 800d086:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800d08a:	eb05 040e 	add.w	r4, r5, lr
 800d08e:	0137      	lsls	r7, r6, #4
 800d090:	eba6 030a 	sub.w	r3, r6, sl
 800d094:	eb04 000e 	add.w	r0, r4, lr
 800d098:	44b2      	add	sl, r6
 800d09a:	1d3a      	adds	r2, r7, #4
 800d09c:	9702      	str	r7, [sp, #8]
 800d09e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800d0a2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800d0a6:	ebae 0c06 	sub.w	ip, lr, r6
 800d0aa:	9703      	str	r7, [sp, #12]
 800d0ac:	eb03 0708 	add.w	r7, r3, r8
 800d0b0:	9701      	str	r7, [sp, #4]
 800d0b2:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800d0b6:	9706      	str	r7, [sp, #24]
 800d0b8:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800d0ba:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800d0be:	f10e 0104 	add.w	r1, lr, #4
 800d0c2:	4439      	add	r1, r7
 800d0c4:	443a      	add	r2, r7
 800d0c6:	0137      	lsls	r7, r6, #4
 800d0c8:	00f6      	lsls	r6, r6, #3
 800d0ca:	9704      	str	r7, [sp, #16]
 800d0cc:	9605      	str	r6, [sp, #20]
 800d0ce:	9f01      	ldr	r7, [sp, #4]
 800d0d0:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d0d2:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800d0d6:	f04f 0c00 	mov.w	ip, #0
 800d0da:	edd4 6a00 	vldr	s13, [r4]
 800d0de:	edd7 1a00 	vldr	s3, [r7]
 800d0e2:	ed16 aa01 	vldr	s20, [r6, #-4]
 800d0e6:	edd5 5a00 	vldr	s11, [r5]
 800d0ea:	ed52 9a01 	vldr	s19, [r2, #-4]
 800d0ee:	ed90 6a00 	vldr	s12, [r0]
 800d0f2:	ed51 7a01 	vldr	s15, [r1, #-4]
 800d0f6:	ed93 3a00 	vldr	s6, [r3]
 800d0fa:	ee39 0a86 	vadd.f32	s0, s19, s12
 800d0fe:	ee33 2a21 	vadd.f32	s4, s6, s3
 800d102:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800d106:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800d10a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800d10e:	ee34 4a80 	vadd.f32	s8, s9, s0
 800d112:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d116:	ee74 6a07 	vadd.f32	s13, s8, s14
 800d11a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800d11e:	ed46 6a01 	vstr	s13, [r6, #-4]
 800d122:	ed85 4a00 	vstr	s8, [r5]
 800d126:	edd1 6a00 	vldr	s13, [r1]
 800d12a:	ed94 9a01 	vldr	s18, [r4, #4]
 800d12e:	edd3 2a01 	vldr	s5, [r3, #4]
 800d132:	edd7 8a01 	vldr	s17, [r7, #4]
 800d136:	edd6 0a00 	vldr	s1, [r6]
 800d13a:	edd5 3a01 	vldr	s7, [r5, #4]
 800d13e:	ed90 8a01 	vldr	s16, [r0, #4]
 800d142:	ed92 7a00 	vldr	s14, [r2]
 800d146:	ee33 3a61 	vsub.f32	s6, s6, s3
 800d14a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800d14e:	ee72 aae8 	vsub.f32	s21, s5, s17
 800d152:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800d156:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800d15a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800d15e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800d162:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800d166:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800d16a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800d16e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800d172:	ee77 0a08 	vadd.f32	s1, s14, s16
 800d176:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800d17a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800d17e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800d182:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800d186:	ee76 6a89 	vadd.f32	s13, s13, s18
 800d18a:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800d18e:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800d192:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800d196:	ee35 5a42 	vsub.f32	s10, s10, s4
 800d19a:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800d19e:	ee33 2a20 	vadd.f32	s4, s6, s1
 800d1a2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800d1a6:	ee33 3a60 	vsub.f32	s6, s6, s1
 800d1aa:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800d1ae:	ee77 0a01 	vadd.f32	s1, s14, s2
 800d1b2:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800d1b6:	ee37 7a41 	vsub.f32	s14, s14, s2
 800d1ba:	ee73 1a84 	vadd.f32	s3, s7, s8
 800d1be:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800d1c2:	ee76 3a27 	vadd.f32	s7, s12, s15
 800d1c6:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d1ca:	ee32 8a00 	vadd.f32	s16, s4, s0
 800d1ce:	ee33 1a45 	vsub.f32	s2, s6, s10
 800d1d2:	ee32 2a40 	vsub.f32	s4, s4, s0
 800d1d6:	ee35 5a03 	vadd.f32	s10, s10, s6
 800d1da:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800d1de:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800d1e2:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800d1e6:	ee34 6a67 	vsub.f32	s12, s8, s15
 800d1ea:	ee75 4a87 	vadd.f32	s9, s11, s14
 800d1ee:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800d1f2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800d1f6:	ee77 7a84 	vadd.f32	s15, s15, s8
 800d1fa:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800d1fe:	44dc      	add	ip, fp
 800d200:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800d204:	45e1      	cmp	r9, ip
 800d206:	ed86 8a00 	vstr	s16, [r6]
 800d20a:	ed85 2a01 	vstr	s4, [r5, #4]
 800d20e:	4456      	add	r6, sl
 800d210:	ed02 0a01 	vstr	s0, [r2, #-4]
 800d214:	4455      	add	r5, sl
 800d216:	edc0 6a00 	vstr	s13, [r0]
 800d21a:	ed82 1a00 	vstr	s2, [r2]
 800d21e:	ed80 5a01 	vstr	s10, [r0, #4]
 800d222:	4452      	add	r2, sl
 800d224:	ed01 3a01 	vstr	s6, [r1, #-4]
 800d228:	4450      	add	r0, sl
 800d22a:	edc7 2a00 	vstr	s5, [r7]
 800d22e:	edc4 4a00 	vstr	s9, [r4]
 800d232:	ed83 7a00 	vstr	s14, [r3]
 800d236:	edc1 5a00 	vstr	s11, [r1]
 800d23a:	edc7 3a01 	vstr	s7, [r7, #4]
 800d23e:	4451      	add	r1, sl
 800d240:	ed84 6a01 	vstr	s12, [r4, #4]
 800d244:	4457      	add	r7, sl
 800d246:	edc3 7a01 	vstr	s15, [r3, #4]
 800d24a:	4454      	add	r4, sl
 800d24c:	4453      	add	r3, sl
 800d24e:	f63f af44 	bhi.w	800d0da <arm_radix8_butterfly_f32+0x86>
 800d252:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d254:	2b07      	cmp	r3, #7
 800d256:	f240 81b7 	bls.w	800d5c8 <arm_radix8_butterfly_f32+0x574>
 800d25a:	9b06      	ldr	r3, [sp, #24]
 800d25c:	9903      	ldr	r1, [sp, #12]
 800d25e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d260:	9e05      	ldr	r6, [sp, #20]
 800d262:	9a04      	ldr	r2, [sp, #16]
 800d264:	f103 0c08 	add.w	ip, r3, #8
 800d268:	9b02      	ldr	r3, [sp, #8]
 800d26a:	3108      	adds	r1, #8
 800d26c:	f108 0808 	add.w	r8, r8, #8
 800d270:	1841      	adds	r1, r0, r1
 800d272:	3608      	adds	r6, #8
 800d274:	330c      	adds	r3, #12
 800d276:	4604      	mov	r4, r0
 800d278:	4444      	add	r4, r8
 800d27a:	18c3      	adds	r3, r0, r3
 800d27c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d27e:	1981      	adds	r1, r0, r6
 800d280:	f10e 0e08 	add.w	lr, lr, #8
 800d284:	3208      	adds	r2, #8
 800d286:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d288:	9107      	str	r1, [sp, #28]
 800d28a:	4604      	mov	r4, r0
 800d28c:	4601      	mov	r1, r0
 800d28e:	9304      	str	r3, [sp, #16]
 800d290:	f100 030c 	add.w	r3, r0, #12
 800d294:	4474      	add	r4, lr
 800d296:	f04f 0801 	mov.w	r8, #1
 800d29a:	1882      	adds	r2, r0, r2
 800d29c:	4461      	add	r1, ip
 800d29e:	9305      	str	r3, [sp, #20]
 800d2a0:	464b      	mov	r3, r9
 800d2a2:	940a      	str	r4, [sp, #40]	@ 0x28
 800d2a4:	46c1      	mov	r9, r8
 800d2a6:	9208      	str	r2, [sp, #32]
 800d2a8:	46d8      	mov	r8, fp
 800d2aa:	9106      	str	r1, [sp, #24]
 800d2ac:	f04f 0e00 	mov.w	lr, #0
 800d2b0:	469b      	mov	fp, r3
 800d2b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d2b4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d2b6:	449e      	add	lr, r3
 800d2b8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800d2bc:	441a      	add	r2, r3
 800d2be:	920e      	str	r2, [sp, #56]	@ 0x38
 800d2c0:	441a      	add	r2, r3
 800d2c2:	18d4      	adds	r4, r2, r3
 800d2c4:	18e5      	adds	r5, r4, r3
 800d2c6:	18ee      	adds	r6, r5, r3
 800d2c8:	18f7      	adds	r7, r6, r3
 800d2ca:	eb07 0c03 	add.w	ip, r7, r3
 800d2ce:	920d      	str	r2, [sp, #52]	@ 0x34
 800d2d0:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800d2d4:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800d2d8:	910c      	str	r1, [sp, #48]	@ 0x30
 800d2da:	4419      	add	r1, r3
 800d2dc:	9103      	str	r1, [sp, #12]
 800d2de:	4419      	add	r1, r3
 800d2e0:	18ca      	adds	r2, r1, r3
 800d2e2:	9202      	str	r2, [sp, #8]
 800d2e4:	441a      	add	r2, r3
 800d2e6:	18d0      	adds	r0, r2, r3
 800d2e8:	ed92 ea01 	vldr	s28, [r2, #4]
 800d2ec:	9a02      	ldr	r2, [sp, #8]
 800d2ee:	edd4 7a00 	vldr	s15, [r4]
 800d2f2:	edd2 da01 	vldr	s27, [r2, #4]
 800d2f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d2f8:	ed91 da01 	vldr	s26, [r1, #4]
 800d2fc:	ed92 ca01 	vldr	s24, [r2, #4]
 800d300:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d302:	9903      	ldr	r1, [sp, #12]
 800d304:	edcd 7a03 	vstr	s15, [sp, #12]
 800d308:	edd2 7a00 	vldr	s15, [r2]
 800d30c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d30e:	edcd 7a02 	vstr	s15, [sp, #8]
 800d312:	edd2 7a00 	vldr	s15, [r2]
 800d316:	edd0 ea01 	vldr	s29, [r0, #4]
 800d31a:	edd1 ca01 	vldr	s25, [r1, #4]
 800d31e:	eddc ba00 	vldr	s23, [ip]
 800d322:	edd7 aa00 	vldr	s21, [r7]
 800d326:	ed96 aa00 	vldr	s20, [r6]
 800d32a:	edd5 9a00 	vldr	s19, [r5]
 800d32e:	edcd 7a01 	vstr	s15, [sp, #4]
 800d332:	4403      	add	r3, r0
 800d334:	ed93 fa01 	vldr	s30, [r3, #4]
 800d338:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800d33c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800d340:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d344:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800d348:	46cc      	mov	ip, r9
 800d34a:	e001      	b.n	800d350 <arm_radix8_butterfly_f32+0x2fc>
 800d34c:	3f3504f3 	.word	0x3f3504f3
 800d350:	ed91 6a00 	vldr	s12, [r1]
 800d354:	ed93 5a00 	vldr	s10, [r3]
 800d358:	edd0 fa00 	vldr	s31, [r0]
 800d35c:	edd4 7a00 	vldr	s15, [r4]
 800d360:	ed95 7a00 	vldr	s14, [r5]
 800d364:	ed56 3a01 	vldr	s7, [r6, #-4]
 800d368:	ed17 3a01 	vldr	s6, [r7, #-4]
 800d36c:	ed92 2a00 	vldr	s4, [r2]
 800d370:	ed96 0a00 	vldr	s0, [r6]
 800d374:	ee33 8a85 	vadd.f32	s16, s7, s10
 800d378:	ee32 1a06 	vadd.f32	s2, s4, s12
 800d37c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800d380:	ee77 4a87 	vadd.f32	s9, s15, s14
 800d384:	ee78 1a04 	vadd.f32	s3, s16, s8
 800d388:	ee71 6a24 	vadd.f32	s13, s2, s9
 800d38c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800d390:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800d394:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d398:	ed06 6a01 	vstr	s12, [r6, #-4]
 800d39c:	edd4 8a01 	vldr	s17, [r4, #4]
 800d3a0:	ed92 9a01 	vldr	s18, [r2, #4]
 800d3a4:	edd7 0a00 	vldr	s1, [r7]
 800d3a8:	edd1 2a01 	vldr	s5, [r1, #4]
 800d3ac:	ed95 7a01 	vldr	s14, [r5, #4]
 800d3b0:	ed93 6a01 	vldr	s12, [r3, #4]
 800d3b4:	edd0 5a01 	vldr	s11, [r0, #4]
 800d3b8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800d3bc:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800d3c0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800d3c4:	ee78 fac7 	vsub.f32	s31, s17, s14
 800d3c8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800d3cc:	ee38 7a87 	vadd.f32	s14, s17, s14
 800d3d0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800d3d4:	ee79 2a22 	vadd.f32	s5, s18, s5
 800d3d8:	ee32 9a27 	vadd.f32	s18, s4, s15
 800d3dc:	ee72 7a67 	vsub.f32	s15, s4, s15
 800d3e0:	ee30 2a06 	vadd.f32	s4, s0, s12
 800d3e4:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800d3e8:	ee71 4a64 	vsub.f32	s9, s2, s9
 800d3ec:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800d3f0:	ee32 1a08 	vadd.f32	s2, s4, s16
 800d3f4:	ee72 fa87 	vadd.f32	s31, s5, s14
 800d3f8:	ee32 2a48 	vsub.f32	s4, s4, s16
 800d3fc:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800d400:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800d404:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800d408:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800d40c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800d410:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800d414:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800d418:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800d41c:	ee30 6a46 	vsub.f32	s12, s0, s12
 800d420:	ee74 0a22 	vadd.f32	s1, s8, s5
 800d424:	ee36 0a28 	vadd.f32	s0, s12, s17
 800d428:	ee74 2a62 	vsub.f32	s5, s8, s5
 800d42c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800d430:	ee32 4a64 	vsub.f32	s8, s4, s9
 800d434:	ee73 8a09 	vadd.f32	s17, s6, s18
 800d438:	ee74 4a82 	vadd.f32	s9, s9, s4
 800d43c:	ee33 9a49 	vsub.f32	s18, s6, s18
 800d440:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800d444:	ee35 3a85 	vadd.f32	s6, s11, s10
 800d448:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800d44c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800d450:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800d454:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800d458:	ee30 7a68 	vsub.f32	s14, s0, s17
 800d45c:	ee35 8a03 	vadd.f32	s16, s10, s6
 800d460:	ee38 0a80 	vadd.f32	s0, s17, s0
 800d464:	ee73 3a82 	vadd.f32	s7, s7, s4
 800d468:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800d46c:	ed9d 2a01 	vldr	s4, [sp, #4]
 800d470:	eddd 1a02 	vldr	s3, [sp, #8]
 800d474:	ee35 5a43 	vsub.f32	s10, s10, s6
 800d478:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800d47c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800d480:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800d484:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d488:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800d48c:	ee76 5a49 	vsub.f32	s11, s12, s18
 800d490:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800d494:	ee39 6a06 	vadd.f32	s12, s18, s12
 800d498:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800d49c:	ee21 4a84 	vmul.f32	s8, s3, s8
 800d4a0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800d4a4:	ee22 7a07 	vmul.f32	s14, s4, s14
 800d4a8:	ee22 2a08 	vmul.f32	s4, s4, s16
 800d4ac:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800d4b0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800d4b4:	ee31 1a09 	vadd.f32	s2, s2, s18
 800d4b8:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800d4bc:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800d4c0:	ee74 0a60 	vsub.f32	s1, s8, s1
 800d4c4:	ee37 7a48 	vsub.f32	s14, s14, s16
 800d4c8:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800d4cc:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800d4d0:	ee72 1a21 	vadd.f32	s3, s4, s3
 800d4d4:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800d4d8:	ee38 2a89 	vadd.f32	s4, s17, s18
 800d4dc:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800d4e0:	ee38 8a04 	vadd.f32	s16, s16, s8
 800d4e4:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800d4e8:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800d4ec:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800d4f0:	eddd 5a03 	vldr	s11, [sp, #12]
 800d4f4:	edc6 fa00 	vstr	s31, [r6]
 800d4f8:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800d4fc:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800d500:	ee30 0a45 	vsub.f32	s0, s0, s10
 800d504:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800d508:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800d50c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800d510:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800d514:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800d518:	ee25 6a86 	vmul.f32	s12, s11, s12
 800d51c:	ee74 4a89 	vadd.f32	s9, s9, s18
 800d520:	ee34 3a43 	vsub.f32	s6, s8, s6
 800d524:	ee78 8a85 	vadd.f32	s17, s17, s10
 800d528:	ee36 6a67 	vsub.f32	s12, s12, s15
 800d52c:	44c4      	add	ip, r8
 800d52e:	45e3      	cmp	fp, ip
 800d530:	edc3 3a00 	vstr	s7, [r3]
 800d534:	edc3 6a01 	vstr	s13, [r3, #4]
 800d538:	4456      	add	r6, sl
 800d53a:	ed07 1a01 	vstr	s2, [r7, #-4]
 800d53e:	edc7 0a00 	vstr	s1, [r7]
 800d542:	4453      	add	r3, sl
 800d544:	ed80 2a00 	vstr	s4, [r0]
 800d548:	edc0 2a01 	vstr	s5, [r0, #4]
 800d54c:	4457      	add	r7, sl
 800d54e:	edc2 1a00 	vstr	s3, [r2]
 800d552:	ed82 7a01 	vstr	s14, [r2, #4]
 800d556:	4450      	add	r0, sl
 800d558:	ed85 8a00 	vstr	s16, [r5]
 800d55c:	ed85 0a01 	vstr	s0, [r5, #4]
 800d560:	4452      	add	r2, sl
 800d562:	edc1 4a00 	vstr	s9, [r1]
 800d566:	4455      	add	r5, sl
 800d568:	ed81 3a01 	vstr	s6, [r1, #4]
 800d56c:	edc4 8a00 	vstr	s17, [r4]
 800d570:	ed84 6a01 	vstr	s12, [r4, #4]
 800d574:	4451      	add	r1, sl
 800d576:	4454      	add	r4, sl
 800d578:	f63f aeea 	bhi.w	800d350 <arm_radix8_butterfly_f32+0x2fc>
 800d57c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d57e:	3308      	adds	r3, #8
 800d580:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d582:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d584:	3308      	adds	r3, #8
 800d586:	930a      	str	r3, [sp, #40]	@ 0x28
 800d588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d58a:	3308      	adds	r3, #8
 800d58c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d58e:	9b08      	ldr	r3, [sp, #32]
 800d590:	3308      	adds	r3, #8
 800d592:	9308      	str	r3, [sp, #32]
 800d594:	9b07      	ldr	r3, [sp, #28]
 800d596:	3308      	adds	r3, #8
 800d598:	9307      	str	r3, [sp, #28]
 800d59a:	9b06      	ldr	r3, [sp, #24]
 800d59c:	3308      	adds	r3, #8
 800d59e:	9306      	str	r3, [sp, #24]
 800d5a0:	9b05      	ldr	r3, [sp, #20]
 800d5a2:	3308      	adds	r3, #8
 800d5a4:	9305      	str	r3, [sp, #20]
 800d5a6:	9b04      	ldr	r3, [sp, #16]
 800d5a8:	3308      	adds	r3, #8
 800d5aa:	9304      	str	r3, [sp, #16]
 800d5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5ae:	f109 0901 	add.w	r9, r9, #1
 800d5b2:	454b      	cmp	r3, r9
 800d5b4:	f47f ae7d 	bne.w	800d2b2 <arm_radix8_butterfly_f32+0x25e>
 800d5b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d5ba:	00db      	lsls	r3, r3, #3
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	46d9      	mov	r9, fp
 800d5c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d5c2:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800d5c6:	e554      	b.n	800d072 <arm_radix8_butterfly_f32+0x1e>
 800d5c8:	b015      	add	sp, #84	@ 0x54
 800d5ca:	ecbd 8b10 	vpop	{d8-d15}
 800d5ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5d2:	bf00      	nop

0800d5d4 <__cvt>:
 800d5d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d8:	ec57 6b10 	vmov	r6, r7, d0
 800d5dc:	2f00      	cmp	r7, #0
 800d5de:	460c      	mov	r4, r1
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	463b      	mov	r3, r7
 800d5e4:	bfbb      	ittet	lt
 800d5e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d5ea:	461f      	movlt	r7, r3
 800d5ec:	2300      	movge	r3, #0
 800d5ee:	232d      	movlt	r3, #45	@ 0x2d
 800d5f0:	700b      	strb	r3, [r1, #0]
 800d5f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d5f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d5f8:	4691      	mov	r9, r2
 800d5fa:	f023 0820 	bic.w	r8, r3, #32
 800d5fe:	bfbc      	itt	lt
 800d600:	4632      	movlt	r2, r6
 800d602:	4616      	movlt	r6, r2
 800d604:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d608:	d005      	beq.n	800d616 <__cvt+0x42>
 800d60a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d60e:	d100      	bne.n	800d612 <__cvt+0x3e>
 800d610:	3401      	adds	r4, #1
 800d612:	2102      	movs	r1, #2
 800d614:	e000      	b.n	800d618 <__cvt+0x44>
 800d616:	2103      	movs	r1, #3
 800d618:	ab03      	add	r3, sp, #12
 800d61a:	9301      	str	r3, [sp, #4]
 800d61c:	ab02      	add	r3, sp, #8
 800d61e:	9300      	str	r3, [sp, #0]
 800d620:	ec47 6b10 	vmov	d0, r6, r7
 800d624:	4653      	mov	r3, sl
 800d626:	4622      	mov	r2, r4
 800d628:	f000 feea 	bl	800e400 <_dtoa_r>
 800d62c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d630:	4605      	mov	r5, r0
 800d632:	d119      	bne.n	800d668 <__cvt+0x94>
 800d634:	f019 0f01 	tst.w	r9, #1
 800d638:	d00e      	beq.n	800d658 <__cvt+0x84>
 800d63a:	eb00 0904 	add.w	r9, r0, r4
 800d63e:	2200      	movs	r2, #0
 800d640:	2300      	movs	r3, #0
 800d642:	4630      	mov	r0, r6
 800d644:	4639      	mov	r1, r7
 800d646:	f7f3 fa77 	bl	8000b38 <__aeabi_dcmpeq>
 800d64a:	b108      	cbz	r0, 800d650 <__cvt+0x7c>
 800d64c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d650:	2230      	movs	r2, #48	@ 0x30
 800d652:	9b03      	ldr	r3, [sp, #12]
 800d654:	454b      	cmp	r3, r9
 800d656:	d31e      	bcc.n	800d696 <__cvt+0xc2>
 800d658:	9b03      	ldr	r3, [sp, #12]
 800d65a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d65c:	1b5b      	subs	r3, r3, r5
 800d65e:	4628      	mov	r0, r5
 800d660:	6013      	str	r3, [r2, #0]
 800d662:	b004      	add	sp, #16
 800d664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d668:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d66c:	eb00 0904 	add.w	r9, r0, r4
 800d670:	d1e5      	bne.n	800d63e <__cvt+0x6a>
 800d672:	7803      	ldrb	r3, [r0, #0]
 800d674:	2b30      	cmp	r3, #48	@ 0x30
 800d676:	d10a      	bne.n	800d68e <__cvt+0xba>
 800d678:	2200      	movs	r2, #0
 800d67a:	2300      	movs	r3, #0
 800d67c:	4630      	mov	r0, r6
 800d67e:	4639      	mov	r1, r7
 800d680:	f7f3 fa5a 	bl	8000b38 <__aeabi_dcmpeq>
 800d684:	b918      	cbnz	r0, 800d68e <__cvt+0xba>
 800d686:	f1c4 0401 	rsb	r4, r4, #1
 800d68a:	f8ca 4000 	str.w	r4, [sl]
 800d68e:	f8da 3000 	ldr.w	r3, [sl]
 800d692:	4499      	add	r9, r3
 800d694:	e7d3      	b.n	800d63e <__cvt+0x6a>
 800d696:	1c59      	adds	r1, r3, #1
 800d698:	9103      	str	r1, [sp, #12]
 800d69a:	701a      	strb	r2, [r3, #0]
 800d69c:	e7d9      	b.n	800d652 <__cvt+0x7e>

0800d69e <__exponent>:
 800d69e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6a0:	2900      	cmp	r1, #0
 800d6a2:	bfba      	itte	lt
 800d6a4:	4249      	neglt	r1, r1
 800d6a6:	232d      	movlt	r3, #45	@ 0x2d
 800d6a8:	232b      	movge	r3, #43	@ 0x2b
 800d6aa:	2909      	cmp	r1, #9
 800d6ac:	7002      	strb	r2, [r0, #0]
 800d6ae:	7043      	strb	r3, [r0, #1]
 800d6b0:	dd29      	ble.n	800d706 <__exponent+0x68>
 800d6b2:	f10d 0307 	add.w	r3, sp, #7
 800d6b6:	461d      	mov	r5, r3
 800d6b8:	270a      	movs	r7, #10
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	fbb1 f6f7 	udiv	r6, r1, r7
 800d6c0:	fb07 1416 	mls	r4, r7, r6, r1
 800d6c4:	3430      	adds	r4, #48	@ 0x30
 800d6c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d6ca:	460c      	mov	r4, r1
 800d6cc:	2c63      	cmp	r4, #99	@ 0x63
 800d6ce:	f103 33ff 	add.w	r3, r3, #4294967295
 800d6d2:	4631      	mov	r1, r6
 800d6d4:	dcf1      	bgt.n	800d6ba <__exponent+0x1c>
 800d6d6:	3130      	adds	r1, #48	@ 0x30
 800d6d8:	1e94      	subs	r4, r2, #2
 800d6da:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d6de:	1c41      	adds	r1, r0, #1
 800d6e0:	4623      	mov	r3, r4
 800d6e2:	42ab      	cmp	r3, r5
 800d6e4:	d30a      	bcc.n	800d6fc <__exponent+0x5e>
 800d6e6:	f10d 0309 	add.w	r3, sp, #9
 800d6ea:	1a9b      	subs	r3, r3, r2
 800d6ec:	42ac      	cmp	r4, r5
 800d6ee:	bf88      	it	hi
 800d6f0:	2300      	movhi	r3, #0
 800d6f2:	3302      	adds	r3, #2
 800d6f4:	4403      	add	r3, r0
 800d6f6:	1a18      	subs	r0, r3, r0
 800d6f8:	b003      	add	sp, #12
 800d6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d700:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d704:	e7ed      	b.n	800d6e2 <__exponent+0x44>
 800d706:	2330      	movs	r3, #48	@ 0x30
 800d708:	3130      	adds	r1, #48	@ 0x30
 800d70a:	7083      	strb	r3, [r0, #2]
 800d70c:	70c1      	strb	r1, [r0, #3]
 800d70e:	1d03      	adds	r3, r0, #4
 800d710:	e7f1      	b.n	800d6f6 <__exponent+0x58>
	...

0800d714 <_printf_float>:
 800d714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d718:	b08d      	sub	sp, #52	@ 0x34
 800d71a:	460c      	mov	r4, r1
 800d71c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d720:	4616      	mov	r6, r2
 800d722:	461f      	mov	r7, r3
 800d724:	4605      	mov	r5, r0
 800d726:	f000 fcff 	bl	800e128 <_localeconv_r>
 800d72a:	6803      	ldr	r3, [r0, #0]
 800d72c:	9304      	str	r3, [sp, #16]
 800d72e:	4618      	mov	r0, r3
 800d730:	f7f2 fdd6 	bl	80002e0 <strlen>
 800d734:	2300      	movs	r3, #0
 800d736:	930a      	str	r3, [sp, #40]	@ 0x28
 800d738:	f8d8 3000 	ldr.w	r3, [r8]
 800d73c:	9005      	str	r0, [sp, #20]
 800d73e:	3307      	adds	r3, #7
 800d740:	f023 0307 	bic.w	r3, r3, #7
 800d744:	f103 0208 	add.w	r2, r3, #8
 800d748:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d74c:	f8d4 b000 	ldr.w	fp, [r4]
 800d750:	f8c8 2000 	str.w	r2, [r8]
 800d754:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d758:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d75c:	9307      	str	r3, [sp, #28]
 800d75e:	f8cd 8018 	str.w	r8, [sp, #24]
 800d762:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d76a:	4b9c      	ldr	r3, [pc, #624]	@ (800d9dc <_printf_float+0x2c8>)
 800d76c:	f04f 32ff 	mov.w	r2, #4294967295
 800d770:	f7f3 fa14 	bl	8000b9c <__aeabi_dcmpun>
 800d774:	bb70      	cbnz	r0, 800d7d4 <_printf_float+0xc0>
 800d776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d77a:	4b98      	ldr	r3, [pc, #608]	@ (800d9dc <_printf_float+0x2c8>)
 800d77c:	f04f 32ff 	mov.w	r2, #4294967295
 800d780:	f7f3 f9ee 	bl	8000b60 <__aeabi_dcmple>
 800d784:	bb30      	cbnz	r0, 800d7d4 <_printf_float+0xc0>
 800d786:	2200      	movs	r2, #0
 800d788:	2300      	movs	r3, #0
 800d78a:	4640      	mov	r0, r8
 800d78c:	4649      	mov	r1, r9
 800d78e:	f7f3 f9dd 	bl	8000b4c <__aeabi_dcmplt>
 800d792:	b110      	cbz	r0, 800d79a <_printf_float+0x86>
 800d794:	232d      	movs	r3, #45	@ 0x2d
 800d796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d79a:	4a91      	ldr	r2, [pc, #580]	@ (800d9e0 <_printf_float+0x2cc>)
 800d79c:	4b91      	ldr	r3, [pc, #580]	@ (800d9e4 <_printf_float+0x2d0>)
 800d79e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d7a2:	bf94      	ite	ls
 800d7a4:	4690      	movls	r8, r2
 800d7a6:	4698      	movhi	r8, r3
 800d7a8:	2303      	movs	r3, #3
 800d7aa:	6123      	str	r3, [r4, #16]
 800d7ac:	f02b 0304 	bic.w	r3, fp, #4
 800d7b0:	6023      	str	r3, [r4, #0]
 800d7b2:	f04f 0900 	mov.w	r9, #0
 800d7b6:	9700      	str	r7, [sp, #0]
 800d7b8:	4633      	mov	r3, r6
 800d7ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d7bc:	4621      	mov	r1, r4
 800d7be:	4628      	mov	r0, r5
 800d7c0:	f000 f9d2 	bl	800db68 <_printf_common>
 800d7c4:	3001      	adds	r0, #1
 800d7c6:	f040 808d 	bne.w	800d8e4 <_printf_float+0x1d0>
 800d7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ce:	b00d      	add	sp, #52	@ 0x34
 800d7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d4:	4642      	mov	r2, r8
 800d7d6:	464b      	mov	r3, r9
 800d7d8:	4640      	mov	r0, r8
 800d7da:	4649      	mov	r1, r9
 800d7dc:	f7f3 f9de 	bl	8000b9c <__aeabi_dcmpun>
 800d7e0:	b140      	cbz	r0, 800d7f4 <_printf_float+0xe0>
 800d7e2:	464b      	mov	r3, r9
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	bfbc      	itt	lt
 800d7e8:	232d      	movlt	r3, #45	@ 0x2d
 800d7ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d7ee:	4a7e      	ldr	r2, [pc, #504]	@ (800d9e8 <_printf_float+0x2d4>)
 800d7f0:	4b7e      	ldr	r3, [pc, #504]	@ (800d9ec <_printf_float+0x2d8>)
 800d7f2:	e7d4      	b.n	800d79e <_printf_float+0x8a>
 800d7f4:	6863      	ldr	r3, [r4, #4]
 800d7f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d7fa:	9206      	str	r2, [sp, #24]
 800d7fc:	1c5a      	adds	r2, r3, #1
 800d7fe:	d13b      	bne.n	800d878 <_printf_float+0x164>
 800d800:	2306      	movs	r3, #6
 800d802:	6063      	str	r3, [r4, #4]
 800d804:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d808:	2300      	movs	r3, #0
 800d80a:	6022      	str	r2, [r4, #0]
 800d80c:	9303      	str	r3, [sp, #12]
 800d80e:	ab0a      	add	r3, sp, #40	@ 0x28
 800d810:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d814:	ab09      	add	r3, sp, #36	@ 0x24
 800d816:	9300      	str	r3, [sp, #0]
 800d818:	6861      	ldr	r1, [r4, #4]
 800d81a:	ec49 8b10 	vmov	d0, r8, r9
 800d81e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d822:	4628      	mov	r0, r5
 800d824:	f7ff fed6 	bl	800d5d4 <__cvt>
 800d828:	9b06      	ldr	r3, [sp, #24]
 800d82a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d82c:	2b47      	cmp	r3, #71	@ 0x47
 800d82e:	4680      	mov	r8, r0
 800d830:	d129      	bne.n	800d886 <_printf_float+0x172>
 800d832:	1cc8      	adds	r0, r1, #3
 800d834:	db02      	blt.n	800d83c <_printf_float+0x128>
 800d836:	6863      	ldr	r3, [r4, #4]
 800d838:	4299      	cmp	r1, r3
 800d83a:	dd41      	ble.n	800d8c0 <_printf_float+0x1ac>
 800d83c:	f1aa 0a02 	sub.w	sl, sl, #2
 800d840:	fa5f fa8a 	uxtb.w	sl, sl
 800d844:	3901      	subs	r1, #1
 800d846:	4652      	mov	r2, sl
 800d848:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d84c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d84e:	f7ff ff26 	bl	800d69e <__exponent>
 800d852:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d854:	1813      	adds	r3, r2, r0
 800d856:	2a01      	cmp	r2, #1
 800d858:	4681      	mov	r9, r0
 800d85a:	6123      	str	r3, [r4, #16]
 800d85c:	dc02      	bgt.n	800d864 <_printf_float+0x150>
 800d85e:	6822      	ldr	r2, [r4, #0]
 800d860:	07d2      	lsls	r2, r2, #31
 800d862:	d501      	bpl.n	800d868 <_printf_float+0x154>
 800d864:	3301      	adds	r3, #1
 800d866:	6123      	str	r3, [r4, #16]
 800d868:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d0a2      	beq.n	800d7b6 <_printf_float+0xa2>
 800d870:	232d      	movs	r3, #45	@ 0x2d
 800d872:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d876:	e79e      	b.n	800d7b6 <_printf_float+0xa2>
 800d878:	9a06      	ldr	r2, [sp, #24]
 800d87a:	2a47      	cmp	r2, #71	@ 0x47
 800d87c:	d1c2      	bne.n	800d804 <_printf_float+0xf0>
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1c0      	bne.n	800d804 <_printf_float+0xf0>
 800d882:	2301      	movs	r3, #1
 800d884:	e7bd      	b.n	800d802 <_printf_float+0xee>
 800d886:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d88a:	d9db      	bls.n	800d844 <_printf_float+0x130>
 800d88c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d890:	d118      	bne.n	800d8c4 <_printf_float+0x1b0>
 800d892:	2900      	cmp	r1, #0
 800d894:	6863      	ldr	r3, [r4, #4]
 800d896:	dd0b      	ble.n	800d8b0 <_printf_float+0x19c>
 800d898:	6121      	str	r1, [r4, #16]
 800d89a:	b913      	cbnz	r3, 800d8a2 <_printf_float+0x18e>
 800d89c:	6822      	ldr	r2, [r4, #0]
 800d89e:	07d0      	lsls	r0, r2, #31
 800d8a0:	d502      	bpl.n	800d8a8 <_printf_float+0x194>
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	440b      	add	r3, r1
 800d8a6:	6123      	str	r3, [r4, #16]
 800d8a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d8aa:	f04f 0900 	mov.w	r9, #0
 800d8ae:	e7db      	b.n	800d868 <_printf_float+0x154>
 800d8b0:	b913      	cbnz	r3, 800d8b8 <_printf_float+0x1a4>
 800d8b2:	6822      	ldr	r2, [r4, #0]
 800d8b4:	07d2      	lsls	r2, r2, #31
 800d8b6:	d501      	bpl.n	800d8bc <_printf_float+0x1a8>
 800d8b8:	3302      	adds	r3, #2
 800d8ba:	e7f4      	b.n	800d8a6 <_printf_float+0x192>
 800d8bc:	2301      	movs	r3, #1
 800d8be:	e7f2      	b.n	800d8a6 <_printf_float+0x192>
 800d8c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d8c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8c6:	4299      	cmp	r1, r3
 800d8c8:	db05      	blt.n	800d8d6 <_printf_float+0x1c2>
 800d8ca:	6823      	ldr	r3, [r4, #0]
 800d8cc:	6121      	str	r1, [r4, #16]
 800d8ce:	07d8      	lsls	r0, r3, #31
 800d8d0:	d5ea      	bpl.n	800d8a8 <_printf_float+0x194>
 800d8d2:	1c4b      	adds	r3, r1, #1
 800d8d4:	e7e7      	b.n	800d8a6 <_printf_float+0x192>
 800d8d6:	2900      	cmp	r1, #0
 800d8d8:	bfd4      	ite	le
 800d8da:	f1c1 0202 	rsble	r2, r1, #2
 800d8de:	2201      	movgt	r2, #1
 800d8e0:	4413      	add	r3, r2
 800d8e2:	e7e0      	b.n	800d8a6 <_printf_float+0x192>
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	055a      	lsls	r2, r3, #21
 800d8e8:	d407      	bmi.n	800d8fa <_printf_float+0x1e6>
 800d8ea:	6923      	ldr	r3, [r4, #16]
 800d8ec:	4642      	mov	r2, r8
 800d8ee:	4631      	mov	r1, r6
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	47b8      	blx	r7
 800d8f4:	3001      	adds	r0, #1
 800d8f6:	d12b      	bne.n	800d950 <_printf_float+0x23c>
 800d8f8:	e767      	b.n	800d7ca <_printf_float+0xb6>
 800d8fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d8fe:	f240 80dd 	bls.w	800dabc <_printf_float+0x3a8>
 800d902:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d906:	2200      	movs	r2, #0
 800d908:	2300      	movs	r3, #0
 800d90a:	f7f3 f915 	bl	8000b38 <__aeabi_dcmpeq>
 800d90e:	2800      	cmp	r0, #0
 800d910:	d033      	beq.n	800d97a <_printf_float+0x266>
 800d912:	4a37      	ldr	r2, [pc, #220]	@ (800d9f0 <_printf_float+0x2dc>)
 800d914:	2301      	movs	r3, #1
 800d916:	4631      	mov	r1, r6
 800d918:	4628      	mov	r0, r5
 800d91a:	47b8      	blx	r7
 800d91c:	3001      	adds	r0, #1
 800d91e:	f43f af54 	beq.w	800d7ca <_printf_float+0xb6>
 800d922:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d926:	4543      	cmp	r3, r8
 800d928:	db02      	blt.n	800d930 <_printf_float+0x21c>
 800d92a:	6823      	ldr	r3, [r4, #0]
 800d92c:	07d8      	lsls	r0, r3, #31
 800d92e:	d50f      	bpl.n	800d950 <_printf_float+0x23c>
 800d930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d934:	4631      	mov	r1, r6
 800d936:	4628      	mov	r0, r5
 800d938:	47b8      	blx	r7
 800d93a:	3001      	adds	r0, #1
 800d93c:	f43f af45 	beq.w	800d7ca <_printf_float+0xb6>
 800d940:	f04f 0900 	mov.w	r9, #0
 800d944:	f108 38ff 	add.w	r8, r8, #4294967295
 800d948:	f104 0a1a 	add.w	sl, r4, #26
 800d94c:	45c8      	cmp	r8, r9
 800d94e:	dc09      	bgt.n	800d964 <_printf_float+0x250>
 800d950:	6823      	ldr	r3, [r4, #0]
 800d952:	079b      	lsls	r3, r3, #30
 800d954:	f100 8103 	bmi.w	800db5e <_printf_float+0x44a>
 800d958:	68e0      	ldr	r0, [r4, #12]
 800d95a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d95c:	4298      	cmp	r0, r3
 800d95e:	bfb8      	it	lt
 800d960:	4618      	movlt	r0, r3
 800d962:	e734      	b.n	800d7ce <_printf_float+0xba>
 800d964:	2301      	movs	r3, #1
 800d966:	4652      	mov	r2, sl
 800d968:	4631      	mov	r1, r6
 800d96a:	4628      	mov	r0, r5
 800d96c:	47b8      	blx	r7
 800d96e:	3001      	adds	r0, #1
 800d970:	f43f af2b 	beq.w	800d7ca <_printf_float+0xb6>
 800d974:	f109 0901 	add.w	r9, r9, #1
 800d978:	e7e8      	b.n	800d94c <_printf_float+0x238>
 800d97a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	dc39      	bgt.n	800d9f4 <_printf_float+0x2e0>
 800d980:	4a1b      	ldr	r2, [pc, #108]	@ (800d9f0 <_printf_float+0x2dc>)
 800d982:	2301      	movs	r3, #1
 800d984:	4631      	mov	r1, r6
 800d986:	4628      	mov	r0, r5
 800d988:	47b8      	blx	r7
 800d98a:	3001      	adds	r0, #1
 800d98c:	f43f af1d 	beq.w	800d7ca <_printf_float+0xb6>
 800d990:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d994:	ea59 0303 	orrs.w	r3, r9, r3
 800d998:	d102      	bne.n	800d9a0 <_printf_float+0x28c>
 800d99a:	6823      	ldr	r3, [r4, #0]
 800d99c:	07d9      	lsls	r1, r3, #31
 800d99e:	d5d7      	bpl.n	800d950 <_printf_float+0x23c>
 800d9a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9a4:	4631      	mov	r1, r6
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	47b8      	blx	r7
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	f43f af0d 	beq.w	800d7ca <_printf_float+0xb6>
 800d9b0:	f04f 0a00 	mov.w	sl, #0
 800d9b4:	f104 0b1a 	add.w	fp, r4, #26
 800d9b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9ba:	425b      	negs	r3, r3
 800d9bc:	4553      	cmp	r3, sl
 800d9be:	dc01      	bgt.n	800d9c4 <_printf_float+0x2b0>
 800d9c0:	464b      	mov	r3, r9
 800d9c2:	e793      	b.n	800d8ec <_printf_float+0x1d8>
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	465a      	mov	r2, fp
 800d9c8:	4631      	mov	r1, r6
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	47b8      	blx	r7
 800d9ce:	3001      	adds	r0, #1
 800d9d0:	f43f aefb 	beq.w	800d7ca <_printf_float+0xb6>
 800d9d4:	f10a 0a01 	add.w	sl, sl, #1
 800d9d8:	e7ee      	b.n	800d9b8 <_printf_float+0x2a4>
 800d9da:	bf00      	nop
 800d9dc:	7fefffff 	.word	0x7fefffff
 800d9e0:	08011658 	.word	0x08011658
 800d9e4:	0801165c 	.word	0x0801165c
 800d9e8:	08011660 	.word	0x08011660
 800d9ec:	08011664 	.word	0x08011664
 800d9f0:	08011668 	.word	0x08011668
 800d9f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d9f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d9fa:	4553      	cmp	r3, sl
 800d9fc:	bfa8      	it	ge
 800d9fe:	4653      	movge	r3, sl
 800da00:	2b00      	cmp	r3, #0
 800da02:	4699      	mov	r9, r3
 800da04:	dc36      	bgt.n	800da74 <_printf_float+0x360>
 800da06:	f04f 0b00 	mov.w	fp, #0
 800da0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da0e:	f104 021a 	add.w	r2, r4, #26
 800da12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800da14:	9306      	str	r3, [sp, #24]
 800da16:	eba3 0309 	sub.w	r3, r3, r9
 800da1a:	455b      	cmp	r3, fp
 800da1c:	dc31      	bgt.n	800da82 <_printf_float+0x36e>
 800da1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da20:	459a      	cmp	sl, r3
 800da22:	dc3a      	bgt.n	800da9a <_printf_float+0x386>
 800da24:	6823      	ldr	r3, [r4, #0]
 800da26:	07da      	lsls	r2, r3, #31
 800da28:	d437      	bmi.n	800da9a <_printf_float+0x386>
 800da2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da2c:	ebaa 0903 	sub.w	r9, sl, r3
 800da30:	9b06      	ldr	r3, [sp, #24]
 800da32:	ebaa 0303 	sub.w	r3, sl, r3
 800da36:	4599      	cmp	r9, r3
 800da38:	bfa8      	it	ge
 800da3a:	4699      	movge	r9, r3
 800da3c:	f1b9 0f00 	cmp.w	r9, #0
 800da40:	dc33      	bgt.n	800daaa <_printf_float+0x396>
 800da42:	f04f 0800 	mov.w	r8, #0
 800da46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da4a:	f104 0b1a 	add.w	fp, r4, #26
 800da4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da50:	ebaa 0303 	sub.w	r3, sl, r3
 800da54:	eba3 0309 	sub.w	r3, r3, r9
 800da58:	4543      	cmp	r3, r8
 800da5a:	f77f af79 	ble.w	800d950 <_printf_float+0x23c>
 800da5e:	2301      	movs	r3, #1
 800da60:	465a      	mov	r2, fp
 800da62:	4631      	mov	r1, r6
 800da64:	4628      	mov	r0, r5
 800da66:	47b8      	blx	r7
 800da68:	3001      	adds	r0, #1
 800da6a:	f43f aeae 	beq.w	800d7ca <_printf_float+0xb6>
 800da6e:	f108 0801 	add.w	r8, r8, #1
 800da72:	e7ec      	b.n	800da4e <_printf_float+0x33a>
 800da74:	4642      	mov	r2, r8
 800da76:	4631      	mov	r1, r6
 800da78:	4628      	mov	r0, r5
 800da7a:	47b8      	blx	r7
 800da7c:	3001      	adds	r0, #1
 800da7e:	d1c2      	bne.n	800da06 <_printf_float+0x2f2>
 800da80:	e6a3      	b.n	800d7ca <_printf_float+0xb6>
 800da82:	2301      	movs	r3, #1
 800da84:	4631      	mov	r1, r6
 800da86:	4628      	mov	r0, r5
 800da88:	9206      	str	r2, [sp, #24]
 800da8a:	47b8      	blx	r7
 800da8c:	3001      	adds	r0, #1
 800da8e:	f43f ae9c 	beq.w	800d7ca <_printf_float+0xb6>
 800da92:	9a06      	ldr	r2, [sp, #24]
 800da94:	f10b 0b01 	add.w	fp, fp, #1
 800da98:	e7bb      	b.n	800da12 <_printf_float+0x2fe>
 800da9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da9e:	4631      	mov	r1, r6
 800daa0:	4628      	mov	r0, r5
 800daa2:	47b8      	blx	r7
 800daa4:	3001      	adds	r0, #1
 800daa6:	d1c0      	bne.n	800da2a <_printf_float+0x316>
 800daa8:	e68f      	b.n	800d7ca <_printf_float+0xb6>
 800daaa:	9a06      	ldr	r2, [sp, #24]
 800daac:	464b      	mov	r3, r9
 800daae:	4442      	add	r2, r8
 800dab0:	4631      	mov	r1, r6
 800dab2:	4628      	mov	r0, r5
 800dab4:	47b8      	blx	r7
 800dab6:	3001      	adds	r0, #1
 800dab8:	d1c3      	bne.n	800da42 <_printf_float+0x32e>
 800daba:	e686      	b.n	800d7ca <_printf_float+0xb6>
 800dabc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dac0:	f1ba 0f01 	cmp.w	sl, #1
 800dac4:	dc01      	bgt.n	800daca <_printf_float+0x3b6>
 800dac6:	07db      	lsls	r3, r3, #31
 800dac8:	d536      	bpl.n	800db38 <_printf_float+0x424>
 800daca:	2301      	movs	r3, #1
 800dacc:	4642      	mov	r2, r8
 800dace:	4631      	mov	r1, r6
 800dad0:	4628      	mov	r0, r5
 800dad2:	47b8      	blx	r7
 800dad4:	3001      	adds	r0, #1
 800dad6:	f43f ae78 	beq.w	800d7ca <_printf_float+0xb6>
 800dada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dade:	4631      	mov	r1, r6
 800dae0:	4628      	mov	r0, r5
 800dae2:	47b8      	blx	r7
 800dae4:	3001      	adds	r0, #1
 800dae6:	f43f ae70 	beq.w	800d7ca <_printf_float+0xb6>
 800daea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800daee:	2200      	movs	r2, #0
 800daf0:	2300      	movs	r3, #0
 800daf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800daf6:	f7f3 f81f 	bl	8000b38 <__aeabi_dcmpeq>
 800dafa:	b9c0      	cbnz	r0, 800db2e <_printf_float+0x41a>
 800dafc:	4653      	mov	r3, sl
 800dafe:	f108 0201 	add.w	r2, r8, #1
 800db02:	4631      	mov	r1, r6
 800db04:	4628      	mov	r0, r5
 800db06:	47b8      	blx	r7
 800db08:	3001      	adds	r0, #1
 800db0a:	d10c      	bne.n	800db26 <_printf_float+0x412>
 800db0c:	e65d      	b.n	800d7ca <_printf_float+0xb6>
 800db0e:	2301      	movs	r3, #1
 800db10:	465a      	mov	r2, fp
 800db12:	4631      	mov	r1, r6
 800db14:	4628      	mov	r0, r5
 800db16:	47b8      	blx	r7
 800db18:	3001      	adds	r0, #1
 800db1a:	f43f ae56 	beq.w	800d7ca <_printf_float+0xb6>
 800db1e:	f108 0801 	add.w	r8, r8, #1
 800db22:	45d0      	cmp	r8, sl
 800db24:	dbf3      	blt.n	800db0e <_printf_float+0x3fa>
 800db26:	464b      	mov	r3, r9
 800db28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800db2c:	e6df      	b.n	800d8ee <_printf_float+0x1da>
 800db2e:	f04f 0800 	mov.w	r8, #0
 800db32:	f104 0b1a 	add.w	fp, r4, #26
 800db36:	e7f4      	b.n	800db22 <_printf_float+0x40e>
 800db38:	2301      	movs	r3, #1
 800db3a:	4642      	mov	r2, r8
 800db3c:	e7e1      	b.n	800db02 <_printf_float+0x3ee>
 800db3e:	2301      	movs	r3, #1
 800db40:	464a      	mov	r2, r9
 800db42:	4631      	mov	r1, r6
 800db44:	4628      	mov	r0, r5
 800db46:	47b8      	blx	r7
 800db48:	3001      	adds	r0, #1
 800db4a:	f43f ae3e 	beq.w	800d7ca <_printf_float+0xb6>
 800db4e:	f108 0801 	add.w	r8, r8, #1
 800db52:	68e3      	ldr	r3, [r4, #12]
 800db54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800db56:	1a5b      	subs	r3, r3, r1
 800db58:	4543      	cmp	r3, r8
 800db5a:	dcf0      	bgt.n	800db3e <_printf_float+0x42a>
 800db5c:	e6fc      	b.n	800d958 <_printf_float+0x244>
 800db5e:	f04f 0800 	mov.w	r8, #0
 800db62:	f104 0919 	add.w	r9, r4, #25
 800db66:	e7f4      	b.n	800db52 <_printf_float+0x43e>

0800db68 <_printf_common>:
 800db68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db6c:	4616      	mov	r6, r2
 800db6e:	4698      	mov	r8, r3
 800db70:	688a      	ldr	r2, [r1, #8]
 800db72:	690b      	ldr	r3, [r1, #16]
 800db74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db78:	4293      	cmp	r3, r2
 800db7a:	bfb8      	it	lt
 800db7c:	4613      	movlt	r3, r2
 800db7e:	6033      	str	r3, [r6, #0]
 800db80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800db84:	4607      	mov	r7, r0
 800db86:	460c      	mov	r4, r1
 800db88:	b10a      	cbz	r2, 800db8e <_printf_common+0x26>
 800db8a:	3301      	adds	r3, #1
 800db8c:	6033      	str	r3, [r6, #0]
 800db8e:	6823      	ldr	r3, [r4, #0]
 800db90:	0699      	lsls	r1, r3, #26
 800db92:	bf42      	ittt	mi
 800db94:	6833      	ldrmi	r3, [r6, #0]
 800db96:	3302      	addmi	r3, #2
 800db98:	6033      	strmi	r3, [r6, #0]
 800db9a:	6825      	ldr	r5, [r4, #0]
 800db9c:	f015 0506 	ands.w	r5, r5, #6
 800dba0:	d106      	bne.n	800dbb0 <_printf_common+0x48>
 800dba2:	f104 0a19 	add.w	sl, r4, #25
 800dba6:	68e3      	ldr	r3, [r4, #12]
 800dba8:	6832      	ldr	r2, [r6, #0]
 800dbaa:	1a9b      	subs	r3, r3, r2
 800dbac:	42ab      	cmp	r3, r5
 800dbae:	dc26      	bgt.n	800dbfe <_printf_common+0x96>
 800dbb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dbb4:	6822      	ldr	r2, [r4, #0]
 800dbb6:	3b00      	subs	r3, #0
 800dbb8:	bf18      	it	ne
 800dbba:	2301      	movne	r3, #1
 800dbbc:	0692      	lsls	r2, r2, #26
 800dbbe:	d42b      	bmi.n	800dc18 <_printf_common+0xb0>
 800dbc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dbc4:	4641      	mov	r1, r8
 800dbc6:	4638      	mov	r0, r7
 800dbc8:	47c8      	blx	r9
 800dbca:	3001      	adds	r0, #1
 800dbcc:	d01e      	beq.n	800dc0c <_printf_common+0xa4>
 800dbce:	6823      	ldr	r3, [r4, #0]
 800dbd0:	6922      	ldr	r2, [r4, #16]
 800dbd2:	f003 0306 	and.w	r3, r3, #6
 800dbd6:	2b04      	cmp	r3, #4
 800dbd8:	bf02      	ittt	eq
 800dbda:	68e5      	ldreq	r5, [r4, #12]
 800dbdc:	6833      	ldreq	r3, [r6, #0]
 800dbde:	1aed      	subeq	r5, r5, r3
 800dbe0:	68a3      	ldr	r3, [r4, #8]
 800dbe2:	bf0c      	ite	eq
 800dbe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbe8:	2500      	movne	r5, #0
 800dbea:	4293      	cmp	r3, r2
 800dbec:	bfc4      	itt	gt
 800dbee:	1a9b      	subgt	r3, r3, r2
 800dbf0:	18ed      	addgt	r5, r5, r3
 800dbf2:	2600      	movs	r6, #0
 800dbf4:	341a      	adds	r4, #26
 800dbf6:	42b5      	cmp	r5, r6
 800dbf8:	d11a      	bne.n	800dc30 <_printf_common+0xc8>
 800dbfa:	2000      	movs	r0, #0
 800dbfc:	e008      	b.n	800dc10 <_printf_common+0xa8>
 800dbfe:	2301      	movs	r3, #1
 800dc00:	4652      	mov	r2, sl
 800dc02:	4641      	mov	r1, r8
 800dc04:	4638      	mov	r0, r7
 800dc06:	47c8      	blx	r9
 800dc08:	3001      	adds	r0, #1
 800dc0a:	d103      	bne.n	800dc14 <_printf_common+0xac>
 800dc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc14:	3501      	adds	r5, #1
 800dc16:	e7c6      	b.n	800dba6 <_printf_common+0x3e>
 800dc18:	18e1      	adds	r1, r4, r3
 800dc1a:	1c5a      	adds	r2, r3, #1
 800dc1c:	2030      	movs	r0, #48	@ 0x30
 800dc1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dc22:	4422      	add	r2, r4
 800dc24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dc28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dc2c:	3302      	adds	r3, #2
 800dc2e:	e7c7      	b.n	800dbc0 <_printf_common+0x58>
 800dc30:	2301      	movs	r3, #1
 800dc32:	4622      	mov	r2, r4
 800dc34:	4641      	mov	r1, r8
 800dc36:	4638      	mov	r0, r7
 800dc38:	47c8      	blx	r9
 800dc3a:	3001      	adds	r0, #1
 800dc3c:	d0e6      	beq.n	800dc0c <_printf_common+0xa4>
 800dc3e:	3601      	adds	r6, #1
 800dc40:	e7d9      	b.n	800dbf6 <_printf_common+0x8e>
	...

0800dc44 <_printf_i>:
 800dc44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc48:	7e0f      	ldrb	r7, [r1, #24]
 800dc4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc4c:	2f78      	cmp	r7, #120	@ 0x78
 800dc4e:	4691      	mov	r9, r2
 800dc50:	4680      	mov	r8, r0
 800dc52:	460c      	mov	r4, r1
 800dc54:	469a      	mov	sl, r3
 800dc56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dc5a:	d807      	bhi.n	800dc6c <_printf_i+0x28>
 800dc5c:	2f62      	cmp	r7, #98	@ 0x62
 800dc5e:	d80a      	bhi.n	800dc76 <_printf_i+0x32>
 800dc60:	2f00      	cmp	r7, #0
 800dc62:	f000 80d2 	beq.w	800de0a <_printf_i+0x1c6>
 800dc66:	2f58      	cmp	r7, #88	@ 0x58
 800dc68:	f000 80b9 	beq.w	800ddde <_printf_i+0x19a>
 800dc6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dc74:	e03a      	b.n	800dcec <_printf_i+0xa8>
 800dc76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dc7a:	2b15      	cmp	r3, #21
 800dc7c:	d8f6      	bhi.n	800dc6c <_printf_i+0x28>
 800dc7e:	a101      	add	r1, pc, #4	@ (adr r1, 800dc84 <_printf_i+0x40>)
 800dc80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc84:	0800dcdd 	.word	0x0800dcdd
 800dc88:	0800dcf1 	.word	0x0800dcf1
 800dc8c:	0800dc6d 	.word	0x0800dc6d
 800dc90:	0800dc6d 	.word	0x0800dc6d
 800dc94:	0800dc6d 	.word	0x0800dc6d
 800dc98:	0800dc6d 	.word	0x0800dc6d
 800dc9c:	0800dcf1 	.word	0x0800dcf1
 800dca0:	0800dc6d 	.word	0x0800dc6d
 800dca4:	0800dc6d 	.word	0x0800dc6d
 800dca8:	0800dc6d 	.word	0x0800dc6d
 800dcac:	0800dc6d 	.word	0x0800dc6d
 800dcb0:	0800ddf1 	.word	0x0800ddf1
 800dcb4:	0800dd1b 	.word	0x0800dd1b
 800dcb8:	0800ddab 	.word	0x0800ddab
 800dcbc:	0800dc6d 	.word	0x0800dc6d
 800dcc0:	0800dc6d 	.word	0x0800dc6d
 800dcc4:	0800de13 	.word	0x0800de13
 800dcc8:	0800dc6d 	.word	0x0800dc6d
 800dccc:	0800dd1b 	.word	0x0800dd1b
 800dcd0:	0800dc6d 	.word	0x0800dc6d
 800dcd4:	0800dc6d 	.word	0x0800dc6d
 800dcd8:	0800ddb3 	.word	0x0800ddb3
 800dcdc:	6833      	ldr	r3, [r6, #0]
 800dcde:	1d1a      	adds	r2, r3, #4
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	6032      	str	r2, [r6, #0]
 800dce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dcec:	2301      	movs	r3, #1
 800dcee:	e09d      	b.n	800de2c <_printf_i+0x1e8>
 800dcf0:	6833      	ldr	r3, [r6, #0]
 800dcf2:	6820      	ldr	r0, [r4, #0]
 800dcf4:	1d19      	adds	r1, r3, #4
 800dcf6:	6031      	str	r1, [r6, #0]
 800dcf8:	0606      	lsls	r6, r0, #24
 800dcfa:	d501      	bpl.n	800dd00 <_printf_i+0xbc>
 800dcfc:	681d      	ldr	r5, [r3, #0]
 800dcfe:	e003      	b.n	800dd08 <_printf_i+0xc4>
 800dd00:	0645      	lsls	r5, r0, #25
 800dd02:	d5fb      	bpl.n	800dcfc <_printf_i+0xb8>
 800dd04:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dd08:	2d00      	cmp	r5, #0
 800dd0a:	da03      	bge.n	800dd14 <_printf_i+0xd0>
 800dd0c:	232d      	movs	r3, #45	@ 0x2d
 800dd0e:	426d      	negs	r5, r5
 800dd10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd14:	4859      	ldr	r0, [pc, #356]	@ (800de7c <_printf_i+0x238>)
 800dd16:	230a      	movs	r3, #10
 800dd18:	e011      	b.n	800dd3e <_printf_i+0xfa>
 800dd1a:	6821      	ldr	r1, [r4, #0]
 800dd1c:	6833      	ldr	r3, [r6, #0]
 800dd1e:	0608      	lsls	r0, r1, #24
 800dd20:	f853 5b04 	ldr.w	r5, [r3], #4
 800dd24:	d402      	bmi.n	800dd2c <_printf_i+0xe8>
 800dd26:	0649      	lsls	r1, r1, #25
 800dd28:	bf48      	it	mi
 800dd2a:	b2ad      	uxthmi	r5, r5
 800dd2c:	2f6f      	cmp	r7, #111	@ 0x6f
 800dd2e:	4853      	ldr	r0, [pc, #332]	@ (800de7c <_printf_i+0x238>)
 800dd30:	6033      	str	r3, [r6, #0]
 800dd32:	bf14      	ite	ne
 800dd34:	230a      	movne	r3, #10
 800dd36:	2308      	moveq	r3, #8
 800dd38:	2100      	movs	r1, #0
 800dd3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dd3e:	6866      	ldr	r6, [r4, #4]
 800dd40:	60a6      	str	r6, [r4, #8]
 800dd42:	2e00      	cmp	r6, #0
 800dd44:	bfa2      	ittt	ge
 800dd46:	6821      	ldrge	r1, [r4, #0]
 800dd48:	f021 0104 	bicge.w	r1, r1, #4
 800dd4c:	6021      	strge	r1, [r4, #0]
 800dd4e:	b90d      	cbnz	r5, 800dd54 <_printf_i+0x110>
 800dd50:	2e00      	cmp	r6, #0
 800dd52:	d04b      	beq.n	800ddec <_printf_i+0x1a8>
 800dd54:	4616      	mov	r6, r2
 800dd56:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd5a:	fb03 5711 	mls	r7, r3, r1, r5
 800dd5e:	5dc7      	ldrb	r7, [r0, r7]
 800dd60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd64:	462f      	mov	r7, r5
 800dd66:	42bb      	cmp	r3, r7
 800dd68:	460d      	mov	r5, r1
 800dd6a:	d9f4      	bls.n	800dd56 <_printf_i+0x112>
 800dd6c:	2b08      	cmp	r3, #8
 800dd6e:	d10b      	bne.n	800dd88 <_printf_i+0x144>
 800dd70:	6823      	ldr	r3, [r4, #0]
 800dd72:	07df      	lsls	r7, r3, #31
 800dd74:	d508      	bpl.n	800dd88 <_printf_i+0x144>
 800dd76:	6923      	ldr	r3, [r4, #16]
 800dd78:	6861      	ldr	r1, [r4, #4]
 800dd7a:	4299      	cmp	r1, r3
 800dd7c:	bfde      	ittt	le
 800dd7e:	2330      	movle	r3, #48	@ 0x30
 800dd80:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dd84:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dd88:	1b92      	subs	r2, r2, r6
 800dd8a:	6122      	str	r2, [r4, #16]
 800dd8c:	f8cd a000 	str.w	sl, [sp]
 800dd90:	464b      	mov	r3, r9
 800dd92:	aa03      	add	r2, sp, #12
 800dd94:	4621      	mov	r1, r4
 800dd96:	4640      	mov	r0, r8
 800dd98:	f7ff fee6 	bl	800db68 <_printf_common>
 800dd9c:	3001      	adds	r0, #1
 800dd9e:	d14a      	bne.n	800de36 <_printf_i+0x1f2>
 800dda0:	f04f 30ff 	mov.w	r0, #4294967295
 800dda4:	b004      	add	sp, #16
 800dda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddaa:	6823      	ldr	r3, [r4, #0]
 800ddac:	f043 0320 	orr.w	r3, r3, #32
 800ddb0:	6023      	str	r3, [r4, #0]
 800ddb2:	4833      	ldr	r0, [pc, #204]	@ (800de80 <_printf_i+0x23c>)
 800ddb4:	2778      	movs	r7, #120	@ 0x78
 800ddb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ddba:	6823      	ldr	r3, [r4, #0]
 800ddbc:	6831      	ldr	r1, [r6, #0]
 800ddbe:	061f      	lsls	r7, r3, #24
 800ddc0:	f851 5b04 	ldr.w	r5, [r1], #4
 800ddc4:	d402      	bmi.n	800ddcc <_printf_i+0x188>
 800ddc6:	065f      	lsls	r7, r3, #25
 800ddc8:	bf48      	it	mi
 800ddca:	b2ad      	uxthmi	r5, r5
 800ddcc:	6031      	str	r1, [r6, #0]
 800ddce:	07d9      	lsls	r1, r3, #31
 800ddd0:	bf44      	itt	mi
 800ddd2:	f043 0320 	orrmi.w	r3, r3, #32
 800ddd6:	6023      	strmi	r3, [r4, #0]
 800ddd8:	b11d      	cbz	r5, 800dde2 <_printf_i+0x19e>
 800ddda:	2310      	movs	r3, #16
 800dddc:	e7ac      	b.n	800dd38 <_printf_i+0xf4>
 800ddde:	4827      	ldr	r0, [pc, #156]	@ (800de7c <_printf_i+0x238>)
 800dde0:	e7e9      	b.n	800ddb6 <_printf_i+0x172>
 800dde2:	6823      	ldr	r3, [r4, #0]
 800dde4:	f023 0320 	bic.w	r3, r3, #32
 800dde8:	6023      	str	r3, [r4, #0]
 800ddea:	e7f6      	b.n	800ddda <_printf_i+0x196>
 800ddec:	4616      	mov	r6, r2
 800ddee:	e7bd      	b.n	800dd6c <_printf_i+0x128>
 800ddf0:	6833      	ldr	r3, [r6, #0]
 800ddf2:	6825      	ldr	r5, [r4, #0]
 800ddf4:	6961      	ldr	r1, [r4, #20]
 800ddf6:	1d18      	adds	r0, r3, #4
 800ddf8:	6030      	str	r0, [r6, #0]
 800ddfa:	062e      	lsls	r6, r5, #24
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	d501      	bpl.n	800de04 <_printf_i+0x1c0>
 800de00:	6019      	str	r1, [r3, #0]
 800de02:	e002      	b.n	800de0a <_printf_i+0x1c6>
 800de04:	0668      	lsls	r0, r5, #25
 800de06:	d5fb      	bpl.n	800de00 <_printf_i+0x1bc>
 800de08:	8019      	strh	r1, [r3, #0]
 800de0a:	2300      	movs	r3, #0
 800de0c:	6123      	str	r3, [r4, #16]
 800de0e:	4616      	mov	r6, r2
 800de10:	e7bc      	b.n	800dd8c <_printf_i+0x148>
 800de12:	6833      	ldr	r3, [r6, #0]
 800de14:	1d1a      	adds	r2, r3, #4
 800de16:	6032      	str	r2, [r6, #0]
 800de18:	681e      	ldr	r6, [r3, #0]
 800de1a:	6862      	ldr	r2, [r4, #4]
 800de1c:	2100      	movs	r1, #0
 800de1e:	4630      	mov	r0, r6
 800de20:	f7f2 fa0e 	bl	8000240 <memchr>
 800de24:	b108      	cbz	r0, 800de2a <_printf_i+0x1e6>
 800de26:	1b80      	subs	r0, r0, r6
 800de28:	6060      	str	r0, [r4, #4]
 800de2a:	6863      	ldr	r3, [r4, #4]
 800de2c:	6123      	str	r3, [r4, #16]
 800de2e:	2300      	movs	r3, #0
 800de30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de34:	e7aa      	b.n	800dd8c <_printf_i+0x148>
 800de36:	6923      	ldr	r3, [r4, #16]
 800de38:	4632      	mov	r2, r6
 800de3a:	4649      	mov	r1, r9
 800de3c:	4640      	mov	r0, r8
 800de3e:	47d0      	blx	sl
 800de40:	3001      	adds	r0, #1
 800de42:	d0ad      	beq.n	800dda0 <_printf_i+0x15c>
 800de44:	6823      	ldr	r3, [r4, #0]
 800de46:	079b      	lsls	r3, r3, #30
 800de48:	d413      	bmi.n	800de72 <_printf_i+0x22e>
 800de4a:	68e0      	ldr	r0, [r4, #12]
 800de4c:	9b03      	ldr	r3, [sp, #12]
 800de4e:	4298      	cmp	r0, r3
 800de50:	bfb8      	it	lt
 800de52:	4618      	movlt	r0, r3
 800de54:	e7a6      	b.n	800dda4 <_printf_i+0x160>
 800de56:	2301      	movs	r3, #1
 800de58:	4632      	mov	r2, r6
 800de5a:	4649      	mov	r1, r9
 800de5c:	4640      	mov	r0, r8
 800de5e:	47d0      	blx	sl
 800de60:	3001      	adds	r0, #1
 800de62:	d09d      	beq.n	800dda0 <_printf_i+0x15c>
 800de64:	3501      	adds	r5, #1
 800de66:	68e3      	ldr	r3, [r4, #12]
 800de68:	9903      	ldr	r1, [sp, #12]
 800de6a:	1a5b      	subs	r3, r3, r1
 800de6c:	42ab      	cmp	r3, r5
 800de6e:	dcf2      	bgt.n	800de56 <_printf_i+0x212>
 800de70:	e7eb      	b.n	800de4a <_printf_i+0x206>
 800de72:	2500      	movs	r5, #0
 800de74:	f104 0619 	add.w	r6, r4, #25
 800de78:	e7f5      	b.n	800de66 <_printf_i+0x222>
 800de7a:	bf00      	nop
 800de7c:	0801166a 	.word	0x0801166a
 800de80:	0801167b 	.word	0x0801167b

0800de84 <std>:
 800de84:	2300      	movs	r3, #0
 800de86:	b510      	push	{r4, lr}
 800de88:	4604      	mov	r4, r0
 800de8a:	e9c0 3300 	strd	r3, r3, [r0]
 800de8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de92:	6083      	str	r3, [r0, #8]
 800de94:	8181      	strh	r1, [r0, #12]
 800de96:	6643      	str	r3, [r0, #100]	@ 0x64
 800de98:	81c2      	strh	r2, [r0, #14]
 800de9a:	6183      	str	r3, [r0, #24]
 800de9c:	4619      	mov	r1, r3
 800de9e:	2208      	movs	r2, #8
 800dea0:	305c      	adds	r0, #92	@ 0x5c
 800dea2:	f000 f914 	bl	800e0ce <memset>
 800dea6:	4b0d      	ldr	r3, [pc, #52]	@ (800dedc <std+0x58>)
 800dea8:	6263      	str	r3, [r4, #36]	@ 0x24
 800deaa:	4b0d      	ldr	r3, [pc, #52]	@ (800dee0 <std+0x5c>)
 800deac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800deae:	4b0d      	ldr	r3, [pc, #52]	@ (800dee4 <std+0x60>)
 800deb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800deb2:	4b0d      	ldr	r3, [pc, #52]	@ (800dee8 <std+0x64>)
 800deb4:	6323      	str	r3, [r4, #48]	@ 0x30
 800deb6:	4b0d      	ldr	r3, [pc, #52]	@ (800deec <std+0x68>)
 800deb8:	6224      	str	r4, [r4, #32]
 800deba:	429c      	cmp	r4, r3
 800debc:	d006      	beq.n	800decc <std+0x48>
 800debe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dec2:	4294      	cmp	r4, r2
 800dec4:	d002      	beq.n	800decc <std+0x48>
 800dec6:	33d0      	adds	r3, #208	@ 0xd0
 800dec8:	429c      	cmp	r4, r3
 800deca:	d105      	bne.n	800ded8 <std+0x54>
 800decc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ded0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ded4:	f000 b9f2 	b.w	800e2bc <__retarget_lock_init_recursive>
 800ded8:	bd10      	pop	{r4, pc}
 800deda:	bf00      	nop
 800dedc:	0800e049 	.word	0x0800e049
 800dee0:	0800e06b 	.word	0x0800e06b
 800dee4:	0800e0a3 	.word	0x0800e0a3
 800dee8:	0800e0c7 	.word	0x0800e0c7
 800deec:	20007864 	.word	0x20007864

0800def0 <stdio_exit_handler>:
 800def0:	4a02      	ldr	r2, [pc, #8]	@ (800defc <stdio_exit_handler+0xc>)
 800def2:	4903      	ldr	r1, [pc, #12]	@ (800df00 <stdio_exit_handler+0x10>)
 800def4:	4803      	ldr	r0, [pc, #12]	@ (800df04 <stdio_exit_handler+0x14>)
 800def6:	f000 b869 	b.w	800dfcc <_fwalk_sglue>
 800defa:	bf00      	nop
 800defc:	20000424 	.word	0x20000424
 800df00:	0800fc45 	.word	0x0800fc45
 800df04:	20000434 	.word	0x20000434

0800df08 <cleanup_stdio>:
 800df08:	6841      	ldr	r1, [r0, #4]
 800df0a:	4b0c      	ldr	r3, [pc, #48]	@ (800df3c <cleanup_stdio+0x34>)
 800df0c:	4299      	cmp	r1, r3
 800df0e:	b510      	push	{r4, lr}
 800df10:	4604      	mov	r4, r0
 800df12:	d001      	beq.n	800df18 <cleanup_stdio+0x10>
 800df14:	f001 fe96 	bl	800fc44 <_fflush_r>
 800df18:	68a1      	ldr	r1, [r4, #8]
 800df1a:	4b09      	ldr	r3, [pc, #36]	@ (800df40 <cleanup_stdio+0x38>)
 800df1c:	4299      	cmp	r1, r3
 800df1e:	d002      	beq.n	800df26 <cleanup_stdio+0x1e>
 800df20:	4620      	mov	r0, r4
 800df22:	f001 fe8f 	bl	800fc44 <_fflush_r>
 800df26:	68e1      	ldr	r1, [r4, #12]
 800df28:	4b06      	ldr	r3, [pc, #24]	@ (800df44 <cleanup_stdio+0x3c>)
 800df2a:	4299      	cmp	r1, r3
 800df2c:	d004      	beq.n	800df38 <cleanup_stdio+0x30>
 800df2e:	4620      	mov	r0, r4
 800df30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df34:	f001 be86 	b.w	800fc44 <_fflush_r>
 800df38:	bd10      	pop	{r4, pc}
 800df3a:	bf00      	nop
 800df3c:	20007864 	.word	0x20007864
 800df40:	200078cc 	.word	0x200078cc
 800df44:	20007934 	.word	0x20007934

0800df48 <global_stdio_init.part.0>:
 800df48:	b510      	push	{r4, lr}
 800df4a:	4b0b      	ldr	r3, [pc, #44]	@ (800df78 <global_stdio_init.part.0+0x30>)
 800df4c:	4c0b      	ldr	r4, [pc, #44]	@ (800df7c <global_stdio_init.part.0+0x34>)
 800df4e:	4a0c      	ldr	r2, [pc, #48]	@ (800df80 <global_stdio_init.part.0+0x38>)
 800df50:	601a      	str	r2, [r3, #0]
 800df52:	4620      	mov	r0, r4
 800df54:	2200      	movs	r2, #0
 800df56:	2104      	movs	r1, #4
 800df58:	f7ff ff94 	bl	800de84 <std>
 800df5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800df60:	2201      	movs	r2, #1
 800df62:	2109      	movs	r1, #9
 800df64:	f7ff ff8e 	bl	800de84 <std>
 800df68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800df6c:	2202      	movs	r2, #2
 800df6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df72:	2112      	movs	r1, #18
 800df74:	f7ff bf86 	b.w	800de84 <std>
 800df78:	2000799c 	.word	0x2000799c
 800df7c:	20007864 	.word	0x20007864
 800df80:	0800def1 	.word	0x0800def1

0800df84 <__sfp_lock_acquire>:
 800df84:	4801      	ldr	r0, [pc, #4]	@ (800df8c <__sfp_lock_acquire+0x8>)
 800df86:	f000 b99a 	b.w	800e2be <__retarget_lock_acquire_recursive>
 800df8a:	bf00      	nop
 800df8c:	200079a5 	.word	0x200079a5

0800df90 <__sfp_lock_release>:
 800df90:	4801      	ldr	r0, [pc, #4]	@ (800df98 <__sfp_lock_release+0x8>)
 800df92:	f000 b995 	b.w	800e2c0 <__retarget_lock_release_recursive>
 800df96:	bf00      	nop
 800df98:	200079a5 	.word	0x200079a5

0800df9c <__sinit>:
 800df9c:	b510      	push	{r4, lr}
 800df9e:	4604      	mov	r4, r0
 800dfa0:	f7ff fff0 	bl	800df84 <__sfp_lock_acquire>
 800dfa4:	6a23      	ldr	r3, [r4, #32]
 800dfa6:	b11b      	cbz	r3, 800dfb0 <__sinit+0x14>
 800dfa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfac:	f7ff bff0 	b.w	800df90 <__sfp_lock_release>
 800dfb0:	4b04      	ldr	r3, [pc, #16]	@ (800dfc4 <__sinit+0x28>)
 800dfb2:	6223      	str	r3, [r4, #32]
 800dfb4:	4b04      	ldr	r3, [pc, #16]	@ (800dfc8 <__sinit+0x2c>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1f5      	bne.n	800dfa8 <__sinit+0xc>
 800dfbc:	f7ff ffc4 	bl	800df48 <global_stdio_init.part.0>
 800dfc0:	e7f2      	b.n	800dfa8 <__sinit+0xc>
 800dfc2:	bf00      	nop
 800dfc4:	0800df09 	.word	0x0800df09
 800dfc8:	2000799c 	.word	0x2000799c

0800dfcc <_fwalk_sglue>:
 800dfcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfd0:	4607      	mov	r7, r0
 800dfd2:	4688      	mov	r8, r1
 800dfd4:	4614      	mov	r4, r2
 800dfd6:	2600      	movs	r6, #0
 800dfd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfdc:	f1b9 0901 	subs.w	r9, r9, #1
 800dfe0:	d505      	bpl.n	800dfee <_fwalk_sglue+0x22>
 800dfe2:	6824      	ldr	r4, [r4, #0]
 800dfe4:	2c00      	cmp	r4, #0
 800dfe6:	d1f7      	bne.n	800dfd8 <_fwalk_sglue+0xc>
 800dfe8:	4630      	mov	r0, r6
 800dfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfee:	89ab      	ldrh	r3, [r5, #12]
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d907      	bls.n	800e004 <_fwalk_sglue+0x38>
 800dff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dff8:	3301      	adds	r3, #1
 800dffa:	d003      	beq.n	800e004 <_fwalk_sglue+0x38>
 800dffc:	4629      	mov	r1, r5
 800dffe:	4638      	mov	r0, r7
 800e000:	47c0      	blx	r8
 800e002:	4306      	orrs	r6, r0
 800e004:	3568      	adds	r5, #104	@ 0x68
 800e006:	e7e9      	b.n	800dfdc <_fwalk_sglue+0x10>

0800e008 <siprintf>:
 800e008:	b40e      	push	{r1, r2, r3}
 800e00a:	b500      	push	{lr}
 800e00c:	b09c      	sub	sp, #112	@ 0x70
 800e00e:	ab1d      	add	r3, sp, #116	@ 0x74
 800e010:	9002      	str	r0, [sp, #8]
 800e012:	9006      	str	r0, [sp, #24]
 800e014:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e018:	4809      	ldr	r0, [pc, #36]	@ (800e040 <siprintf+0x38>)
 800e01a:	9107      	str	r1, [sp, #28]
 800e01c:	9104      	str	r1, [sp, #16]
 800e01e:	4909      	ldr	r1, [pc, #36]	@ (800e044 <siprintf+0x3c>)
 800e020:	f853 2b04 	ldr.w	r2, [r3], #4
 800e024:	9105      	str	r1, [sp, #20]
 800e026:	6800      	ldr	r0, [r0, #0]
 800e028:	9301      	str	r3, [sp, #4]
 800e02a:	a902      	add	r1, sp, #8
 800e02c:	f001 fc8a 	bl	800f944 <_svfiprintf_r>
 800e030:	9b02      	ldr	r3, [sp, #8]
 800e032:	2200      	movs	r2, #0
 800e034:	701a      	strb	r2, [r3, #0]
 800e036:	b01c      	add	sp, #112	@ 0x70
 800e038:	f85d eb04 	ldr.w	lr, [sp], #4
 800e03c:	b003      	add	sp, #12
 800e03e:	4770      	bx	lr
 800e040:	20000430 	.word	0x20000430
 800e044:	ffff0208 	.word	0xffff0208

0800e048 <__sread>:
 800e048:	b510      	push	{r4, lr}
 800e04a:	460c      	mov	r4, r1
 800e04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e050:	f000 f8e6 	bl	800e220 <_read_r>
 800e054:	2800      	cmp	r0, #0
 800e056:	bfab      	itete	ge
 800e058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e05a:	89a3      	ldrhlt	r3, [r4, #12]
 800e05c:	181b      	addge	r3, r3, r0
 800e05e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e062:	bfac      	ite	ge
 800e064:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e066:	81a3      	strhlt	r3, [r4, #12]
 800e068:	bd10      	pop	{r4, pc}

0800e06a <__swrite>:
 800e06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e06e:	461f      	mov	r7, r3
 800e070:	898b      	ldrh	r3, [r1, #12]
 800e072:	05db      	lsls	r3, r3, #23
 800e074:	4605      	mov	r5, r0
 800e076:	460c      	mov	r4, r1
 800e078:	4616      	mov	r6, r2
 800e07a:	d505      	bpl.n	800e088 <__swrite+0x1e>
 800e07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e080:	2302      	movs	r3, #2
 800e082:	2200      	movs	r2, #0
 800e084:	f000 f8ba 	bl	800e1fc <_lseek_r>
 800e088:	89a3      	ldrh	r3, [r4, #12]
 800e08a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e08e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e092:	81a3      	strh	r3, [r4, #12]
 800e094:	4632      	mov	r2, r6
 800e096:	463b      	mov	r3, r7
 800e098:	4628      	mov	r0, r5
 800e09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e09e:	f000 b8d1 	b.w	800e244 <_write_r>

0800e0a2 <__sseek>:
 800e0a2:	b510      	push	{r4, lr}
 800e0a4:	460c      	mov	r4, r1
 800e0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0aa:	f000 f8a7 	bl	800e1fc <_lseek_r>
 800e0ae:	1c43      	adds	r3, r0, #1
 800e0b0:	89a3      	ldrh	r3, [r4, #12]
 800e0b2:	bf15      	itete	ne
 800e0b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e0b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e0ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e0be:	81a3      	strheq	r3, [r4, #12]
 800e0c0:	bf18      	it	ne
 800e0c2:	81a3      	strhne	r3, [r4, #12]
 800e0c4:	bd10      	pop	{r4, pc}

0800e0c6 <__sclose>:
 800e0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0ca:	f000 b831 	b.w	800e130 <_close_r>

0800e0ce <memset>:
 800e0ce:	4402      	add	r2, r0
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d100      	bne.n	800e0d8 <memset+0xa>
 800e0d6:	4770      	bx	lr
 800e0d8:	f803 1b01 	strb.w	r1, [r3], #1
 800e0dc:	e7f9      	b.n	800e0d2 <memset+0x4>

0800e0de <strncmp>:
 800e0de:	b510      	push	{r4, lr}
 800e0e0:	b16a      	cbz	r2, 800e0fe <strncmp+0x20>
 800e0e2:	3901      	subs	r1, #1
 800e0e4:	1884      	adds	r4, r0, r2
 800e0e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d103      	bne.n	800e0fa <strncmp+0x1c>
 800e0f2:	42a0      	cmp	r0, r4
 800e0f4:	d001      	beq.n	800e0fa <strncmp+0x1c>
 800e0f6:	2a00      	cmp	r2, #0
 800e0f8:	d1f5      	bne.n	800e0e6 <strncmp+0x8>
 800e0fa:	1ad0      	subs	r0, r2, r3
 800e0fc:	bd10      	pop	{r4, pc}
 800e0fe:	4610      	mov	r0, r2
 800e100:	e7fc      	b.n	800e0fc <strncmp+0x1e>

0800e102 <strncpy>:
 800e102:	b510      	push	{r4, lr}
 800e104:	3901      	subs	r1, #1
 800e106:	4603      	mov	r3, r0
 800e108:	b132      	cbz	r2, 800e118 <strncpy+0x16>
 800e10a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e10e:	f803 4b01 	strb.w	r4, [r3], #1
 800e112:	3a01      	subs	r2, #1
 800e114:	2c00      	cmp	r4, #0
 800e116:	d1f7      	bne.n	800e108 <strncpy+0x6>
 800e118:	441a      	add	r2, r3
 800e11a:	2100      	movs	r1, #0
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d100      	bne.n	800e122 <strncpy+0x20>
 800e120:	bd10      	pop	{r4, pc}
 800e122:	f803 1b01 	strb.w	r1, [r3], #1
 800e126:	e7f9      	b.n	800e11c <strncpy+0x1a>

0800e128 <_localeconv_r>:
 800e128:	4800      	ldr	r0, [pc, #0]	@ (800e12c <_localeconv_r+0x4>)
 800e12a:	4770      	bx	lr
 800e12c:	20000570 	.word	0x20000570

0800e130 <_close_r>:
 800e130:	b538      	push	{r3, r4, r5, lr}
 800e132:	4d06      	ldr	r5, [pc, #24]	@ (800e14c <_close_r+0x1c>)
 800e134:	2300      	movs	r3, #0
 800e136:	4604      	mov	r4, r0
 800e138:	4608      	mov	r0, r1
 800e13a:	602b      	str	r3, [r5, #0]
 800e13c:	f7f4 fb26 	bl	800278c <_close>
 800e140:	1c43      	adds	r3, r0, #1
 800e142:	d102      	bne.n	800e14a <_close_r+0x1a>
 800e144:	682b      	ldr	r3, [r5, #0]
 800e146:	b103      	cbz	r3, 800e14a <_close_r+0x1a>
 800e148:	6023      	str	r3, [r4, #0]
 800e14a:	bd38      	pop	{r3, r4, r5, pc}
 800e14c:	200079a0 	.word	0x200079a0

0800e150 <_reclaim_reent>:
 800e150:	4b29      	ldr	r3, [pc, #164]	@ (800e1f8 <_reclaim_reent+0xa8>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4283      	cmp	r3, r0
 800e156:	b570      	push	{r4, r5, r6, lr}
 800e158:	4604      	mov	r4, r0
 800e15a:	d04b      	beq.n	800e1f4 <_reclaim_reent+0xa4>
 800e15c:	69c3      	ldr	r3, [r0, #28]
 800e15e:	b1ab      	cbz	r3, 800e18c <_reclaim_reent+0x3c>
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	b16b      	cbz	r3, 800e180 <_reclaim_reent+0x30>
 800e164:	2500      	movs	r5, #0
 800e166:	69e3      	ldr	r3, [r4, #28]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	5959      	ldr	r1, [r3, r5]
 800e16c:	2900      	cmp	r1, #0
 800e16e:	d13b      	bne.n	800e1e8 <_reclaim_reent+0x98>
 800e170:	3504      	adds	r5, #4
 800e172:	2d80      	cmp	r5, #128	@ 0x80
 800e174:	d1f7      	bne.n	800e166 <_reclaim_reent+0x16>
 800e176:	69e3      	ldr	r3, [r4, #28]
 800e178:	4620      	mov	r0, r4
 800e17a:	68d9      	ldr	r1, [r3, #12]
 800e17c:	f000 ff04 	bl	800ef88 <_free_r>
 800e180:	69e3      	ldr	r3, [r4, #28]
 800e182:	6819      	ldr	r1, [r3, #0]
 800e184:	b111      	cbz	r1, 800e18c <_reclaim_reent+0x3c>
 800e186:	4620      	mov	r0, r4
 800e188:	f000 fefe 	bl	800ef88 <_free_r>
 800e18c:	6961      	ldr	r1, [r4, #20]
 800e18e:	b111      	cbz	r1, 800e196 <_reclaim_reent+0x46>
 800e190:	4620      	mov	r0, r4
 800e192:	f000 fef9 	bl	800ef88 <_free_r>
 800e196:	69e1      	ldr	r1, [r4, #28]
 800e198:	b111      	cbz	r1, 800e1a0 <_reclaim_reent+0x50>
 800e19a:	4620      	mov	r0, r4
 800e19c:	f000 fef4 	bl	800ef88 <_free_r>
 800e1a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e1a2:	b111      	cbz	r1, 800e1aa <_reclaim_reent+0x5a>
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	f000 feef 	bl	800ef88 <_free_r>
 800e1aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e1ac:	b111      	cbz	r1, 800e1b4 <_reclaim_reent+0x64>
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f000 feea 	bl	800ef88 <_free_r>
 800e1b4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e1b6:	b111      	cbz	r1, 800e1be <_reclaim_reent+0x6e>
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f000 fee5 	bl	800ef88 <_free_r>
 800e1be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e1c0:	b111      	cbz	r1, 800e1c8 <_reclaim_reent+0x78>
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f000 fee0 	bl	800ef88 <_free_r>
 800e1c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e1ca:	b111      	cbz	r1, 800e1d2 <_reclaim_reent+0x82>
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	f000 fedb 	bl	800ef88 <_free_r>
 800e1d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e1d4:	b111      	cbz	r1, 800e1dc <_reclaim_reent+0x8c>
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	f000 fed6 	bl	800ef88 <_free_r>
 800e1dc:	6a23      	ldr	r3, [r4, #32]
 800e1de:	b14b      	cbz	r3, 800e1f4 <_reclaim_reent+0xa4>
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1e6:	4718      	bx	r3
 800e1e8:	680e      	ldr	r6, [r1, #0]
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	f000 fecc 	bl	800ef88 <_free_r>
 800e1f0:	4631      	mov	r1, r6
 800e1f2:	e7bb      	b.n	800e16c <_reclaim_reent+0x1c>
 800e1f4:	bd70      	pop	{r4, r5, r6, pc}
 800e1f6:	bf00      	nop
 800e1f8:	20000430 	.word	0x20000430

0800e1fc <_lseek_r>:
 800e1fc:	b538      	push	{r3, r4, r5, lr}
 800e1fe:	4d07      	ldr	r5, [pc, #28]	@ (800e21c <_lseek_r+0x20>)
 800e200:	4604      	mov	r4, r0
 800e202:	4608      	mov	r0, r1
 800e204:	4611      	mov	r1, r2
 800e206:	2200      	movs	r2, #0
 800e208:	602a      	str	r2, [r5, #0]
 800e20a:	461a      	mov	r2, r3
 800e20c:	f7f4 fae5 	bl	80027da <_lseek>
 800e210:	1c43      	adds	r3, r0, #1
 800e212:	d102      	bne.n	800e21a <_lseek_r+0x1e>
 800e214:	682b      	ldr	r3, [r5, #0]
 800e216:	b103      	cbz	r3, 800e21a <_lseek_r+0x1e>
 800e218:	6023      	str	r3, [r4, #0]
 800e21a:	bd38      	pop	{r3, r4, r5, pc}
 800e21c:	200079a0 	.word	0x200079a0

0800e220 <_read_r>:
 800e220:	b538      	push	{r3, r4, r5, lr}
 800e222:	4d07      	ldr	r5, [pc, #28]	@ (800e240 <_read_r+0x20>)
 800e224:	4604      	mov	r4, r0
 800e226:	4608      	mov	r0, r1
 800e228:	4611      	mov	r1, r2
 800e22a:	2200      	movs	r2, #0
 800e22c:	602a      	str	r2, [r5, #0]
 800e22e:	461a      	mov	r2, r3
 800e230:	f7f4 fa73 	bl	800271a <_read>
 800e234:	1c43      	adds	r3, r0, #1
 800e236:	d102      	bne.n	800e23e <_read_r+0x1e>
 800e238:	682b      	ldr	r3, [r5, #0]
 800e23a:	b103      	cbz	r3, 800e23e <_read_r+0x1e>
 800e23c:	6023      	str	r3, [r4, #0]
 800e23e:	bd38      	pop	{r3, r4, r5, pc}
 800e240:	200079a0 	.word	0x200079a0

0800e244 <_write_r>:
 800e244:	b538      	push	{r3, r4, r5, lr}
 800e246:	4d07      	ldr	r5, [pc, #28]	@ (800e264 <_write_r+0x20>)
 800e248:	4604      	mov	r4, r0
 800e24a:	4608      	mov	r0, r1
 800e24c:	4611      	mov	r1, r2
 800e24e:	2200      	movs	r2, #0
 800e250:	602a      	str	r2, [r5, #0]
 800e252:	461a      	mov	r2, r3
 800e254:	f7f4 fa7e 	bl	8002754 <_write>
 800e258:	1c43      	adds	r3, r0, #1
 800e25a:	d102      	bne.n	800e262 <_write_r+0x1e>
 800e25c:	682b      	ldr	r3, [r5, #0]
 800e25e:	b103      	cbz	r3, 800e262 <_write_r+0x1e>
 800e260:	6023      	str	r3, [r4, #0]
 800e262:	bd38      	pop	{r3, r4, r5, pc}
 800e264:	200079a0 	.word	0x200079a0

0800e268 <__errno>:
 800e268:	4b01      	ldr	r3, [pc, #4]	@ (800e270 <__errno+0x8>)
 800e26a:	6818      	ldr	r0, [r3, #0]
 800e26c:	4770      	bx	lr
 800e26e:	bf00      	nop
 800e270:	20000430 	.word	0x20000430

0800e274 <__libc_init_array>:
 800e274:	b570      	push	{r4, r5, r6, lr}
 800e276:	4d0d      	ldr	r5, [pc, #52]	@ (800e2ac <__libc_init_array+0x38>)
 800e278:	4c0d      	ldr	r4, [pc, #52]	@ (800e2b0 <__libc_init_array+0x3c>)
 800e27a:	1b64      	subs	r4, r4, r5
 800e27c:	10a4      	asrs	r4, r4, #2
 800e27e:	2600      	movs	r6, #0
 800e280:	42a6      	cmp	r6, r4
 800e282:	d109      	bne.n	800e298 <__libc_init_array+0x24>
 800e284:	4d0b      	ldr	r5, [pc, #44]	@ (800e2b4 <__libc_init_array+0x40>)
 800e286:	4c0c      	ldr	r4, [pc, #48]	@ (800e2b8 <__libc_init_array+0x44>)
 800e288:	f002 fa0c 	bl	80106a4 <_init>
 800e28c:	1b64      	subs	r4, r4, r5
 800e28e:	10a4      	asrs	r4, r4, #2
 800e290:	2600      	movs	r6, #0
 800e292:	42a6      	cmp	r6, r4
 800e294:	d105      	bne.n	800e2a2 <__libc_init_array+0x2e>
 800e296:	bd70      	pop	{r4, r5, r6, pc}
 800e298:	f855 3b04 	ldr.w	r3, [r5], #4
 800e29c:	4798      	blx	r3
 800e29e:	3601      	adds	r6, #1
 800e2a0:	e7ee      	b.n	800e280 <__libc_init_array+0xc>
 800e2a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2a6:	4798      	blx	r3
 800e2a8:	3601      	adds	r6, #1
 800e2aa:	e7f2      	b.n	800e292 <__libc_init_array+0x1e>
 800e2ac:	08011a08 	.word	0x08011a08
 800e2b0:	08011a08 	.word	0x08011a08
 800e2b4:	08011a08 	.word	0x08011a08
 800e2b8:	08011a0c 	.word	0x08011a0c

0800e2bc <__retarget_lock_init_recursive>:
 800e2bc:	4770      	bx	lr

0800e2be <__retarget_lock_acquire_recursive>:
 800e2be:	4770      	bx	lr

0800e2c0 <__retarget_lock_release_recursive>:
 800e2c0:	4770      	bx	lr

0800e2c2 <strcpy>:
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2c8:	f803 2b01 	strb.w	r2, [r3], #1
 800e2cc:	2a00      	cmp	r2, #0
 800e2ce:	d1f9      	bne.n	800e2c4 <strcpy+0x2>
 800e2d0:	4770      	bx	lr

0800e2d2 <memcpy>:
 800e2d2:	440a      	add	r2, r1
 800e2d4:	4291      	cmp	r1, r2
 800e2d6:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2da:	d100      	bne.n	800e2de <memcpy+0xc>
 800e2dc:	4770      	bx	lr
 800e2de:	b510      	push	{r4, lr}
 800e2e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2e8:	4291      	cmp	r1, r2
 800e2ea:	d1f9      	bne.n	800e2e0 <memcpy+0xe>
 800e2ec:	bd10      	pop	{r4, pc}

0800e2ee <quorem>:
 800e2ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f2:	6903      	ldr	r3, [r0, #16]
 800e2f4:	690c      	ldr	r4, [r1, #16]
 800e2f6:	42a3      	cmp	r3, r4
 800e2f8:	4607      	mov	r7, r0
 800e2fa:	db7e      	blt.n	800e3fa <quorem+0x10c>
 800e2fc:	3c01      	subs	r4, #1
 800e2fe:	f101 0814 	add.w	r8, r1, #20
 800e302:	00a3      	lsls	r3, r4, #2
 800e304:	f100 0514 	add.w	r5, r0, #20
 800e308:	9300      	str	r3, [sp, #0]
 800e30a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e30e:	9301      	str	r3, [sp, #4]
 800e310:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e314:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e318:	3301      	adds	r3, #1
 800e31a:	429a      	cmp	r2, r3
 800e31c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e320:	fbb2 f6f3 	udiv	r6, r2, r3
 800e324:	d32e      	bcc.n	800e384 <quorem+0x96>
 800e326:	f04f 0a00 	mov.w	sl, #0
 800e32a:	46c4      	mov	ip, r8
 800e32c:	46ae      	mov	lr, r5
 800e32e:	46d3      	mov	fp, sl
 800e330:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e334:	b298      	uxth	r0, r3
 800e336:	fb06 a000 	mla	r0, r6, r0, sl
 800e33a:	0c02      	lsrs	r2, r0, #16
 800e33c:	0c1b      	lsrs	r3, r3, #16
 800e33e:	fb06 2303 	mla	r3, r6, r3, r2
 800e342:	f8de 2000 	ldr.w	r2, [lr]
 800e346:	b280      	uxth	r0, r0
 800e348:	b292      	uxth	r2, r2
 800e34a:	1a12      	subs	r2, r2, r0
 800e34c:	445a      	add	r2, fp
 800e34e:	f8de 0000 	ldr.w	r0, [lr]
 800e352:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e356:	b29b      	uxth	r3, r3
 800e358:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e35c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e360:	b292      	uxth	r2, r2
 800e362:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e366:	45e1      	cmp	r9, ip
 800e368:	f84e 2b04 	str.w	r2, [lr], #4
 800e36c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e370:	d2de      	bcs.n	800e330 <quorem+0x42>
 800e372:	9b00      	ldr	r3, [sp, #0]
 800e374:	58eb      	ldr	r3, [r5, r3]
 800e376:	b92b      	cbnz	r3, 800e384 <quorem+0x96>
 800e378:	9b01      	ldr	r3, [sp, #4]
 800e37a:	3b04      	subs	r3, #4
 800e37c:	429d      	cmp	r5, r3
 800e37e:	461a      	mov	r2, r3
 800e380:	d32f      	bcc.n	800e3e2 <quorem+0xf4>
 800e382:	613c      	str	r4, [r7, #16]
 800e384:	4638      	mov	r0, r7
 800e386:	f001 f979 	bl	800f67c <__mcmp>
 800e38a:	2800      	cmp	r0, #0
 800e38c:	db25      	blt.n	800e3da <quorem+0xec>
 800e38e:	4629      	mov	r1, r5
 800e390:	2000      	movs	r0, #0
 800e392:	f858 2b04 	ldr.w	r2, [r8], #4
 800e396:	f8d1 c000 	ldr.w	ip, [r1]
 800e39a:	fa1f fe82 	uxth.w	lr, r2
 800e39e:	fa1f f38c 	uxth.w	r3, ip
 800e3a2:	eba3 030e 	sub.w	r3, r3, lr
 800e3a6:	4403      	add	r3, r0
 800e3a8:	0c12      	lsrs	r2, r2, #16
 800e3aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e3ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3b8:	45c1      	cmp	r9, r8
 800e3ba:	f841 3b04 	str.w	r3, [r1], #4
 800e3be:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e3c2:	d2e6      	bcs.n	800e392 <quorem+0xa4>
 800e3c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3cc:	b922      	cbnz	r2, 800e3d8 <quorem+0xea>
 800e3ce:	3b04      	subs	r3, #4
 800e3d0:	429d      	cmp	r5, r3
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	d30b      	bcc.n	800e3ee <quorem+0x100>
 800e3d6:	613c      	str	r4, [r7, #16]
 800e3d8:	3601      	adds	r6, #1
 800e3da:	4630      	mov	r0, r6
 800e3dc:	b003      	add	sp, #12
 800e3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e2:	6812      	ldr	r2, [r2, #0]
 800e3e4:	3b04      	subs	r3, #4
 800e3e6:	2a00      	cmp	r2, #0
 800e3e8:	d1cb      	bne.n	800e382 <quorem+0x94>
 800e3ea:	3c01      	subs	r4, #1
 800e3ec:	e7c6      	b.n	800e37c <quorem+0x8e>
 800e3ee:	6812      	ldr	r2, [r2, #0]
 800e3f0:	3b04      	subs	r3, #4
 800e3f2:	2a00      	cmp	r2, #0
 800e3f4:	d1ef      	bne.n	800e3d6 <quorem+0xe8>
 800e3f6:	3c01      	subs	r4, #1
 800e3f8:	e7ea      	b.n	800e3d0 <quorem+0xe2>
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	e7ee      	b.n	800e3dc <quorem+0xee>
	...

0800e400 <_dtoa_r>:
 800e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e404:	69c7      	ldr	r7, [r0, #28]
 800e406:	b099      	sub	sp, #100	@ 0x64
 800e408:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e40c:	ec55 4b10 	vmov	r4, r5, d0
 800e410:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e412:	9109      	str	r1, [sp, #36]	@ 0x24
 800e414:	4683      	mov	fp, r0
 800e416:	920e      	str	r2, [sp, #56]	@ 0x38
 800e418:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e41a:	b97f      	cbnz	r7, 800e43c <_dtoa_r+0x3c>
 800e41c:	2010      	movs	r0, #16
 800e41e:	f000 fdfd 	bl	800f01c <malloc>
 800e422:	4602      	mov	r2, r0
 800e424:	f8cb 001c 	str.w	r0, [fp, #28]
 800e428:	b920      	cbnz	r0, 800e434 <_dtoa_r+0x34>
 800e42a:	4ba7      	ldr	r3, [pc, #668]	@ (800e6c8 <_dtoa_r+0x2c8>)
 800e42c:	21ef      	movs	r1, #239	@ 0xef
 800e42e:	48a7      	ldr	r0, [pc, #668]	@ (800e6cc <_dtoa_r+0x2cc>)
 800e430:	f001 fc5a 	bl	800fce8 <__assert_func>
 800e434:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e438:	6007      	str	r7, [r0, #0]
 800e43a:	60c7      	str	r7, [r0, #12]
 800e43c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e440:	6819      	ldr	r1, [r3, #0]
 800e442:	b159      	cbz	r1, 800e45c <_dtoa_r+0x5c>
 800e444:	685a      	ldr	r2, [r3, #4]
 800e446:	604a      	str	r2, [r1, #4]
 800e448:	2301      	movs	r3, #1
 800e44a:	4093      	lsls	r3, r2
 800e44c:	608b      	str	r3, [r1, #8]
 800e44e:	4658      	mov	r0, fp
 800e450:	f000 feda 	bl	800f208 <_Bfree>
 800e454:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e458:	2200      	movs	r2, #0
 800e45a:	601a      	str	r2, [r3, #0]
 800e45c:	1e2b      	subs	r3, r5, #0
 800e45e:	bfb9      	ittee	lt
 800e460:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e464:	9303      	strlt	r3, [sp, #12]
 800e466:	2300      	movge	r3, #0
 800e468:	6033      	strge	r3, [r6, #0]
 800e46a:	9f03      	ldr	r7, [sp, #12]
 800e46c:	4b98      	ldr	r3, [pc, #608]	@ (800e6d0 <_dtoa_r+0x2d0>)
 800e46e:	bfbc      	itt	lt
 800e470:	2201      	movlt	r2, #1
 800e472:	6032      	strlt	r2, [r6, #0]
 800e474:	43bb      	bics	r3, r7
 800e476:	d112      	bne.n	800e49e <_dtoa_r+0x9e>
 800e478:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e47a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e47e:	6013      	str	r3, [r2, #0]
 800e480:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e484:	4323      	orrs	r3, r4
 800e486:	f000 854d 	beq.w	800ef24 <_dtoa_r+0xb24>
 800e48a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e48c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e6e4 <_dtoa_r+0x2e4>
 800e490:	2b00      	cmp	r3, #0
 800e492:	f000 854f 	beq.w	800ef34 <_dtoa_r+0xb34>
 800e496:	f10a 0303 	add.w	r3, sl, #3
 800e49a:	f000 bd49 	b.w	800ef30 <_dtoa_r+0xb30>
 800e49e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	ec51 0b17 	vmov	r0, r1, d7
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e4ae:	f7f2 fb43 	bl	8000b38 <__aeabi_dcmpeq>
 800e4b2:	4680      	mov	r8, r0
 800e4b4:	b158      	cbz	r0, 800e4ce <_dtoa_r+0xce>
 800e4b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	6013      	str	r3, [r2, #0]
 800e4bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e4be:	b113      	cbz	r3, 800e4c6 <_dtoa_r+0xc6>
 800e4c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e4c2:	4b84      	ldr	r3, [pc, #528]	@ (800e6d4 <_dtoa_r+0x2d4>)
 800e4c4:	6013      	str	r3, [r2, #0]
 800e4c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e6e8 <_dtoa_r+0x2e8>
 800e4ca:	f000 bd33 	b.w	800ef34 <_dtoa_r+0xb34>
 800e4ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e4d2:	aa16      	add	r2, sp, #88	@ 0x58
 800e4d4:	a917      	add	r1, sp, #92	@ 0x5c
 800e4d6:	4658      	mov	r0, fp
 800e4d8:	f001 f980 	bl	800f7dc <__d2b>
 800e4dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e4e0:	4681      	mov	r9, r0
 800e4e2:	2e00      	cmp	r6, #0
 800e4e4:	d077      	beq.n	800e5d6 <_dtoa_r+0x1d6>
 800e4e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e4ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e4f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e4fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e500:	4619      	mov	r1, r3
 800e502:	2200      	movs	r2, #0
 800e504:	4b74      	ldr	r3, [pc, #464]	@ (800e6d8 <_dtoa_r+0x2d8>)
 800e506:	f7f1 fef7 	bl	80002f8 <__aeabi_dsub>
 800e50a:	a369      	add	r3, pc, #420	@ (adr r3, 800e6b0 <_dtoa_r+0x2b0>)
 800e50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e510:	f7f2 f8aa 	bl	8000668 <__aeabi_dmul>
 800e514:	a368      	add	r3, pc, #416	@ (adr r3, 800e6b8 <_dtoa_r+0x2b8>)
 800e516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51a:	f7f1 feef 	bl	80002fc <__adddf3>
 800e51e:	4604      	mov	r4, r0
 800e520:	4630      	mov	r0, r6
 800e522:	460d      	mov	r5, r1
 800e524:	f7f2 f836 	bl	8000594 <__aeabi_i2d>
 800e528:	a365      	add	r3, pc, #404	@ (adr r3, 800e6c0 <_dtoa_r+0x2c0>)
 800e52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52e:	f7f2 f89b 	bl	8000668 <__aeabi_dmul>
 800e532:	4602      	mov	r2, r0
 800e534:	460b      	mov	r3, r1
 800e536:	4620      	mov	r0, r4
 800e538:	4629      	mov	r1, r5
 800e53a:	f7f1 fedf 	bl	80002fc <__adddf3>
 800e53e:	4604      	mov	r4, r0
 800e540:	460d      	mov	r5, r1
 800e542:	f7f2 fb41 	bl	8000bc8 <__aeabi_d2iz>
 800e546:	2200      	movs	r2, #0
 800e548:	4607      	mov	r7, r0
 800e54a:	2300      	movs	r3, #0
 800e54c:	4620      	mov	r0, r4
 800e54e:	4629      	mov	r1, r5
 800e550:	f7f2 fafc 	bl	8000b4c <__aeabi_dcmplt>
 800e554:	b140      	cbz	r0, 800e568 <_dtoa_r+0x168>
 800e556:	4638      	mov	r0, r7
 800e558:	f7f2 f81c 	bl	8000594 <__aeabi_i2d>
 800e55c:	4622      	mov	r2, r4
 800e55e:	462b      	mov	r3, r5
 800e560:	f7f2 faea 	bl	8000b38 <__aeabi_dcmpeq>
 800e564:	b900      	cbnz	r0, 800e568 <_dtoa_r+0x168>
 800e566:	3f01      	subs	r7, #1
 800e568:	2f16      	cmp	r7, #22
 800e56a:	d851      	bhi.n	800e610 <_dtoa_r+0x210>
 800e56c:	4b5b      	ldr	r3, [pc, #364]	@ (800e6dc <_dtoa_r+0x2dc>)
 800e56e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e57a:	f7f2 fae7 	bl	8000b4c <__aeabi_dcmplt>
 800e57e:	2800      	cmp	r0, #0
 800e580:	d048      	beq.n	800e614 <_dtoa_r+0x214>
 800e582:	3f01      	subs	r7, #1
 800e584:	2300      	movs	r3, #0
 800e586:	9312      	str	r3, [sp, #72]	@ 0x48
 800e588:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e58a:	1b9b      	subs	r3, r3, r6
 800e58c:	1e5a      	subs	r2, r3, #1
 800e58e:	bf44      	itt	mi
 800e590:	f1c3 0801 	rsbmi	r8, r3, #1
 800e594:	2300      	movmi	r3, #0
 800e596:	9208      	str	r2, [sp, #32]
 800e598:	bf54      	ite	pl
 800e59a:	f04f 0800 	movpl.w	r8, #0
 800e59e:	9308      	strmi	r3, [sp, #32]
 800e5a0:	2f00      	cmp	r7, #0
 800e5a2:	db39      	blt.n	800e618 <_dtoa_r+0x218>
 800e5a4:	9b08      	ldr	r3, [sp, #32]
 800e5a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e5a8:	443b      	add	r3, r7
 800e5aa:	9308      	str	r3, [sp, #32]
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5b2:	2b09      	cmp	r3, #9
 800e5b4:	d864      	bhi.n	800e680 <_dtoa_r+0x280>
 800e5b6:	2b05      	cmp	r3, #5
 800e5b8:	bfc4      	itt	gt
 800e5ba:	3b04      	subgt	r3, #4
 800e5bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5c0:	f1a3 0302 	sub.w	r3, r3, #2
 800e5c4:	bfcc      	ite	gt
 800e5c6:	2400      	movgt	r4, #0
 800e5c8:	2401      	movle	r4, #1
 800e5ca:	2b03      	cmp	r3, #3
 800e5cc:	d863      	bhi.n	800e696 <_dtoa_r+0x296>
 800e5ce:	e8df f003 	tbb	[pc, r3]
 800e5d2:	372a      	.short	0x372a
 800e5d4:	5535      	.short	0x5535
 800e5d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e5da:	441e      	add	r6, r3
 800e5dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e5e0:	2b20      	cmp	r3, #32
 800e5e2:	bfc1      	itttt	gt
 800e5e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e5e8:	409f      	lslgt	r7, r3
 800e5ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e5ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e5f2:	bfd6      	itet	le
 800e5f4:	f1c3 0320 	rsble	r3, r3, #32
 800e5f8:	ea47 0003 	orrgt.w	r0, r7, r3
 800e5fc:	fa04 f003 	lslle.w	r0, r4, r3
 800e600:	f7f1 ffb8 	bl	8000574 <__aeabi_ui2d>
 800e604:	2201      	movs	r2, #1
 800e606:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e60a:	3e01      	subs	r6, #1
 800e60c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e60e:	e777      	b.n	800e500 <_dtoa_r+0x100>
 800e610:	2301      	movs	r3, #1
 800e612:	e7b8      	b.n	800e586 <_dtoa_r+0x186>
 800e614:	9012      	str	r0, [sp, #72]	@ 0x48
 800e616:	e7b7      	b.n	800e588 <_dtoa_r+0x188>
 800e618:	427b      	negs	r3, r7
 800e61a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e61c:	2300      	movs	r3, #0
 800e61e:	eba8 0807 	sub.w	r8, r8, r7
 800e622:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e624:	e7c4      	b.n	800e5b0 <_dtoa_r+0x1b0>
 800e626:	2300      	movs	r3, #0
 800e628:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e62a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	dc35      	bgt.n	800e69c <_dtoa_r+0x29c>
 800e630:	2301      	movs	r3, #1
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	9307      	str	r3, [sp, #28]
 800e636:	461a      	mov	r2, r3
 800e638:	920e      	str	r2, [sp, #56]	@ 0x38
 800e63a:	e00b      	b.n	800e654 <_dtoa_r+0x254>
 800e63c:	2301      	movs	r3, #1
 800e63e:	e7f3      	b.n	800e628 <_dtoa_r+0x228>
 800e640:	2300      	movs	r3, #0
 800e642:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e646:	18fb      	adds	r3, r7, r3
 800e648:	9300      	str	r3, [sp, #0]
 800e64a:	3301      	adds	r3, #1
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	9307      	str	r3, [sp, #28]
 800e650:	bfb8      	it	lt
 800e652:	2301      	movlt	r3, #1
 800e654:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e658:	2100      	movs	r1, #0
 800e65a:	2204      	movs	r2, #4
 800e65c:	f102 0514 	add.w	r5, r2, #20
 800e660:	429d      	cmp	r5, r3
 800e662:	d91f      	bls.n	800e6a4 <_dtoa_r+0x2a4>
 800e664:	6041      	str	r1, [r0, #4]
 800e666:	4658      	mov	r0, fp
 800e668:	f000 fd8e 	bl	800f188 <_Balloc>
 800e66c:	4682      	mov	sl, r0
 800e66e:	2800      	cmp	r0, #0
 800e670:	d13c      	bne.n	800e6ec <_dtoa_r+0x2ec>
 800e672:	4b1b      	ldr	r3, [pc, #108]	@ (800e6e0 <_dtoa_r+0x2e0>)
 800e674:	4602      	mov	r2, r0
 800e676:	f240 11af 	movw	r1, #431	@ 0x1af
 800e67a:	e6d8      	b.n	800e42e <_dtoa_r+0x2e>
 800e67c:	2301      	movs	r3, #1
 800e67e:	e7e0      	b.n	800e642 <_dtoa_r+0x242>
 800e680:	2401      	movs	r4, #1
 800e682:	2300      	movs	r3, #0
 800e684:	9309      	str	r3, [sp, #36]	@ 0x24
 800e686:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e688:	f04f 33ff 	mov.w	r3, #4294967295
 800e68c:	9300      	str	r3, [sp, #0]
 800e68e:	9307      	str	r3, [sp, #28]
 800e690:	2200      	movs	r2, #0
 800e692:	2312      	movs	r3, #18
 800e694:	e7d0      	b.n	800e638 <_dtoa_r+0x238>
 800e696:	2301      	movs	r3, #1
 800e698:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e69a:	e7f5      	b.n	800e688 <_dtoa_r+0x288>
 800e69c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	9307      	str	r3, [sp, #28]
 800e6a2:	e7d7      	b.n	800e654 <_dtoa_r+0x254>
 800e6a4:	3101      	adds	r1, #1
 800e6a6:	0052      	lsls	r2, r2, #1
 800e6a8:	e7d8      	b.n	800e65c <_dtoa_r+0x25c>
 800e6aa:	bf00      	nop
 800e6ac:	f3af 8000 	nop.w
 800e6b0:	636f4361 	.word	0x636f4361
 800e6b4:	3fd287a7 	.word	0x3fd287a7
 800e6b8:	8b60c8b3 	.word	0x8b60c8b3
 800e6bc:	3fc68a28 	.word	0x3fc68a28
 800e6c0:	509f79fb 	.word	0x509f79fb
 800e6c4:	3fd34413 	.word	0x3fd34413
 800e6c8:	08011699 	.word	0x08011699
 800e6cc:	080116b0 	.word	0x080116b0
 800e6d0:	7ff00000 	.word	0x7ff00000
 800e6d4:	08011669 	.word	0x08011669
 800e6d8:	3ff80000 	.word	0x3ff80000
 800e6dc:	080117a8 	.word	0x080117a8
 800e6e0:	08011708 	.word	0x08011708
 800e6e4:	08011695 	.word	0x08011695
 800e6e8:	08011668 	.word	0x08011668
 800e6ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e6f0:	6018      	str	r0, [r3, #0]
 800e6f2:	9b07      	ldr	r3, [sp, #28]
 800e6f4:	2b0e      	cmp	r3, #14
 800e6f6:	f200 80a4 	bhi.w	800e842 <_dtoa_r+0x442>
 800e6fa:	2c00      	cmp	r4, #0
 800e6fc:	f000 80a1 	beq.w	800e842 <_dtoa_r+0x442>
 800e700:	2f00      	cmp	r7, #0
 800e702:	dd33      	ble.n	800e76c <_dtoa_r+0x36c>
 800e704:	4bad      	ldr	r3, [pc, #692]	@ (800e9bc <_dtoa_r+0x5bc>)
 800e706:	f007 020f 	and.w	r2, r7, #15
 800e70a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e70e:	ed93 7b00 	vldr	d7, [r3]
 800e712:	05f8      	lsls	r0, r7, #23
 800e714:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e718:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e71c:	d516      	bpl.n	800e74c <_dtoa_r+0x34c>
 800e71e:	4ba8      	ldr	r3, [pc, #672]	@ (800e9c0 <_dtoa_r+0x5c0>)
 800e720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e724:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e728:	f7f2 f8c8 	bl	80008bc <__aeabi_ddiv>
 800e72c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e730:	f004 040f 	and.w	r4, r4, #15
 800e734:	2603      	movs	r6, #3
 800e736:	4da2      	ldr	r5, [pc, #648]	@ (800e9c0 <_dtoa_r+0x5c0>)
 800e738:	b954      	cbnz	r4, 800e750 <_dtoa_r+0x350>
 800e73a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e742:	f7f2 f8bb 	bl	80008bc <__aeabi_ddiv>
 800e746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e74a:	e028      	b.n	800e79e <_dtoa_r+0x39e>
 800e74c:	2602      	movs	r6, #2
 800e74e:	e7f2      	b.n	800e736 <_dtoa_r+0x336>
 800e750:	07e1      	lsls	r1, r4, #31
 800e752:	d508      	bpl.n	800e766 <_dtoa_r+0x366>
 800e754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e758:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e75c:	f7f1 ff84 	bl	8000668 <__aeabi_dmul>
 800e760:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e764:	3601      	adds	r6, #1
 800e766:	1064      	asrs	r4, r4, #1
 800e768:	3508      	adds	r5, #8
 800e76a:	e7e5      	b.n	800e738 <_dtoa_r+0x338>
 800e76c:	f000 80d2 	beq.w	800e914 <_dtoa_r+0x514>
 800e770:	427c      	negs	r4, r7
 800e772:	4b92      	ldr	r3, [pc, #584]	@ (800e9bc <_dtoa_r+0x5bc>)
 800e774:	4d92      	ldr	r5, [pc, #584]	@ (800e9c0 <_dtoa_r+0x5c0>)
 800e776:	f004 020f 	and.w	r2, r4, #15
 800e77a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e782:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e786:	f7f1 ff6f 	bl	8000668 <__aeabi_dmul>
 800e78a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e78e:	1124      	asrs	r4, r4, #4
 800e790:	2300      	movs	r3, #0
 800e792:	2602      	movs	r6, #2
 800e794:	2c00      	cmp	r4, #0
 800e796:	f040 80b2 	bne.w	800e8fe <_dtoa_r+0x4fe>
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d1d3      	bne.n	800e746 <_dtoa_r+0x346>
 800e79e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e7a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f000 80b7 	beq.w	800e918 <_dtoa_r+0x518>
 800e7aa:	4b86      	ldr	r3, [pc, #536]	@ (800e9c4 <_dtoa_r+0x5c4>)
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	4629      	mov	r1, r5
 800e7b2:	f7f2 f9cb 	bl	8000b4c <__aeabi_dcmplt>
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	f000 80ae 	beq.w	800e918 <_dtoa_r+0x518>
 800e7bc:	9b07      	ldr	r3, [sp, #28]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	f000 80aa 	beq.w	800e918 <_dtoa_r+0x518>
 800e7c4:	9b00      	ldr	r3, [sp, #0]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	dd37      	ble.n	800e83a <_dtoa_r+0x43a>
 800e7ca:	1e7b      	subs	r3, r7, #1
 800e7cc:	9304      	str	r3, [sp, #16]
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	4b7d      	ldr	r3, [pc, #500]	@ (800e9c8 <_dtoa_r+0x5c8>)
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	4629      	mov	r1, r5
 800e7d6:	f7f1 ff47 	bl	8000668 <__aeabi_dmul>
 800e7da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7de:	9c00      	ldr	r4, [sp, #0]
 800e7e0:	3601      	adds	r6, #1
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	f7f1 fed6 	bl	8000594 <__aeabi_i2d>
 800e7e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7ec:	f7f1 ff3c 	bl	8000668 <__aeabi_dmul>
 800e7f0:	4b76      	ldr	r3, [pc, #472]	@ (800e9cc <_dtoa_r+0x5cc>)
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f7f1 fd82 	bl	80002fc <__adddf3>
 800e7f8:	4605      	mov	r5, r0
 800e7fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e7fe:	2c00      	cmp	r4, #0
 800e800:	f040 808d 	bne.w	800e91e <_dtoa_r+0x51e>
 800e804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e808:	4b71      	ldr	r3, [pc, #452]	@ (800e9d0 <_dtoa_r+0x5d0>)
 800e80a:	2200      	movs	r2, #0
 800e80c:	f7f1 fd74 	bl	80002f8 <__aeabi_dsub>
 800e810:	4602      	mov	r2, r0
 800e812:	460b      	mov	r3, r1
 800e814:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e818:	462a      	mov	r2, r5
 800e81a:	4633      	mov	r3, r6
 800e81c:	f7f2 f9b4 	bl	8000b88 <__aeabi_dcmpgt>
 800e820:	2800      	cmp	r0, #0
 800e822:	f040 828b 	bne.w	800ed3c <_dtoa_r+0x93c>
 800e826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e82a:	462a      	mov	r2, r5
 800e82c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e830:	f7f2 f98c 	bl	8000b4c <__aeabi_dcmplt>
 800e834:	2800      	cmp	r0, #0
 800e836:	f040 8128 	bne.w	800ea8a <_dtoa_r+0x68a>
 800e83a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e83e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e842:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e844:	2b00      	cmp	r3, #0
 800e846:	f2c0 815a 	blt.w	800eafe <_dtoa_r+0x6fe>
 800e84a:	2f0e      	cmp	r7, #14
 800e84c:	f300 8157 	bgt.w	800eafe <_dtoa_r+0x6fe>
 800e850:	4b5a      	ldr	r3, [pc, #360]	@ (800e9bc <_dtoa_r+0x5bc>)
 800e852:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e856:	ed93 7b00 	vldr	d7, [r3]
 800e85a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	ed8d 7b00 	vstr	d7, [sp]
 800e862:	da03      	bge.n	800e86c <_dtoa_r+0x46c>
 800e864:	9b07      	ldr	r3, [sp, #28]
 800e866:	2b00      	cmp	r3, #0
 800e868:	f340 8101 	ble.w	800ea6e <_dtoa_r+0x66e>
 800e86c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e870:	4656      	mov	r6, sl
 800e872:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e876:	4620      	mov	r0, r4
 800e878:	4629      	mov	r1, r5
 800e87a:	f7f2 f81f 	bl	80008bc <__aeabi_ddiv>
 800e87e:	f7f2 f9a3 	bl	8000bc8 <__aeabi_d2iz>
 800e882:	4680      	mov	r8, r0
 800e884:	f7f1 fe86 	bl	8000594 <__aeabi_i2d>
 800e888:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e88c:	f7f1 feec 	bl	8000668 <__aeabi_dmul>
 800e890:	4602      	mov	r2, r0
 800e892:	460b      	mov	r3, r1
 800e894:	4620      	mov	r0, r4
 800e896:	4629      	mov	r1, r5
 800e898:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e89c:	f7f1 fd2c 	bl	80002f8 <__aeabi_dsub>
 800e8a0:	f806 4b01 	strb.w	r4, [r6], #1
 800e8a4:	9d07      	ldr	r5, [sp, #28]
 800e8a6:	eba6 040a 	sub.w	r4, r6, sl
 800e8aa:	42a5      	cmp	r5, r4
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	f040 8117 	bne.w	800eae2 <_dtoa_r+0x6e2>
 800e8b4:	f7f1 fd22 	bl	80002fc <__adddf3>
 800e8b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8bc:	4604      	mov	r4, r0
 800e8be:	460d      	mov	r5, r1
 800e8c0:	f7f2 f962 	bl	8000b88 <__aeabi_dcmpgt>
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	f040 80f9 	bne.w	800eabc <_dtoa_r+0x6bc>
 800e8ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	4629      	mov	r1, r5
 800e8d2:	f7f2 f931 	bl	8000b38 <__aeabi_dcmpeq>
 800e8d6:	b118      	cbz	r0, 800e8e0 <_dtoa_r+0x4e0>
 800e8d8:	f018 0f01 	tst.w	r8, #1
 800e8dc:	f040 80ee 	bne.w	800eabc <_dtoa_r+0x6bc>
 800e8e0:	4649      	mov	r1, r9
 800e8e2:	4658      	mov	r0, fp
 800e8e4:	f000 fc90 	bl	800f208 <_Bfree>
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	7033      	strb	r3, [r6, #0]
 800e8ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e8ee:	3701      	adds	r7, #1
 800e8f0:	601f      	str	r7, [r3, #0]
 800e8f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	f000 831d 	beq.w	800ef34 <_dtoa_r+0xb34>
 800e8fa:	601e      	str	r6, [r3, #0]
 800e8fc:	e31a      	b.n	800ef34 <_dtoa_r+0xb34>
 800e8fe:	07e2      	lsls	r2, r4, #31
 800e900:	d505      	bpl.n	800e90e <_dtoa_r+0x50e>
 800e902:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e906:	f7f1 feaf 	bl	8000668 <__aeabi_dmul>
 800e90a:	3601      	adds	r6, #1
 800e90c:	2301      	movs	r3, #1
 800e90e:	1064      	asrs	r4, r4, #1
 800e910:	3508      	adds	r5, #8
 800e912:	e73f      	b.n	800e794 <_dtoa_r+0x394>
 800e914:	2602      	movs	r6, #2
 800e916:	e742      	b.n	800e79e <_dtoa_r+0x39e>
 800e918:	9c07      	ldr	r4, [sp, #28]
 800e91a:	9704      	str	r7, [sp, #16]
 800e91c:	e761      	b.n	800e7e2 <_dtoa_r+0x3e2>
 800e91e:	4b27      	ldr	r3, [pc, #156]	@ (800e9bc <_dtoa_r+0x5bc>)
 800e920:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e922:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e926:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e92a:	4454      	add	r4, sl
 800e92c:	2900      	cmp	r1, #0
 800e92e:	d053      	beq.n	800e9d8 <_dtoa_r+0x5d8>
 800e930:	4928      	ldr	r1, [pc, #160]	@ (800e9d4 <_dtoa_r+0x5d4>)
 800e932:	2000      	movs	r0, #0
 800e934:	f7f1 ffc2 	bl	80008bc <__aeabi_ddiv>
 800e938:	4633      	mov	r3, r6
 800e93a:	462a      	mov	r2, r5
 800e93c:	f7f1 fcdc 	bl	80002f8 <__aeabi_dsub>
 800e940:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e944:	4656      	mov	r6, sl
 800e946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e94a:	f7f2 f93d 	bl	8000bc8 <__aeabi_d2iz>
 800e94e:	4605      	mov	r5, r0
 800e950:	f7f1 fe20 	bl	8000594 <__aeabi_i2d>
 800e954:	4602      	mov	r2, r0
 800e956:	460b      	mov	r3, r1
 800e958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e95c:	f7f1 fccc 	bl	80002f8 <__aeabi_dsub>
 800e960:	3530      	adds	r5, #48	@ 0x30
 800e962:	4602      	mov	r2, r0
 800e964:	460b      	mov	r3, r1
 800e966:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e96a:	f806 5b01 	strb.w	r5, [r6], #1
 800e96e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e972:	f7f2 f8eb 	bl	8000b4c <__aeabi_dcmplt>
 800e976:	2800      	cmp	r0, #0
 800e978:	d171      	bne.n	800ea5e <_dtoa_r+0x65e>
 800e97a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e97e:	4911      	ldr	r1, [pc, #68]	@ (800e9c4 <_dtoa_r+0x5c4>)
 800e980:	2000      	movs	r0, #0
 800e982:	f7f1 fcb9 	bl	80002f8 <__aeabi_dsub>
 800e986:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e98a:	f7f2 f8df 	bl	8000b4c <__aeabi_dcmplt>
 800e98e:	2800      	cmp	r0, #0
 800e990:	f040 8095 	bne.w	800eabe <_dtoa_r+0x6be>
 800e994:	42a6      	cmp	r6, r4
 800e996:	f43f af50 	beq.w	800e83a <_dtoa_r+0x43a>
 800e99a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e99e:	4b0a      	ldr	r3, [pc, #40]	@ (800e9c8 <_dtoa_r+0x5c8>)
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	f7f1 fe61 	bl	8000668 <__aeabi_dmul>
 800e9a6:	4b08      	ldr	r3, [pc, #32]	@ (800e9c8 <_dtoa_r+0x5c8>)
 800e9a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9b2:	f7f1 fe59 	bl	8000668 <__aeabi_dmul>
 800e9b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9ba:	e7c4      	b.n	800e946 <_dtoa_r+0x546>
 800e9bc:	080117a8 	.word	0x080117a8
 800e9c0:	08011780 	.word	0x08011780
 800e9c4:	3ff00000 	.word	0x3ff00000
 800e9c8:	40240000 	.word	0x40240000
 800e9cc:	401c0000 	.word	0x401c0000
 800e9d0:	40140000 	.word	0x40140000
 800e9d4:	3fe00000 	.word	0x3fe00000
 800e9d8:	4631      	mov	r1, r6
 800e9da:	4628      	mov	r0, r5
 800e9dc:	f7f1 fe44 	bl	8000668 <__aeabi_dmul>
 800e9e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e9e4:	9415      	str	r4, [sp, #84]	@ 0x54
 800e9e6:	4656      	mov	r6, sl
 800e9e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9ec:	f7f2 f8ec 	bl	8000bc8 <__aeabi_d2iz>
 800e9f0:	4605      	mov	r5, r0
 800e9f2:	f7f1 fdcf 	bl	8000594 <__aeabi_i2d>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9fe:	f7f1 fc7b 	bl	80002f8 <__aeabi_dsub>
 800ea02:	3530      	adds	r5, #48	@ 0x30
 800ea04:	f806 5b01 	strb.w	r5, [r6], #1
 800ea08:	4602      	mov	r2, r0
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	42a6      	cmp	r6, r4
 800ea0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea12:	f04f 0200 	mov.w	r2, #0
 800ea16:	d124      	bne.n	800ea62 <_dtoa_r+0x662>
 800ea18:	4bac      	ldr	r3, [pc, #688]	@ (800eccc <_dtoa_r+0x8cc>)
 800ea1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ea1e:	f7f1 fc6d 	bl	80002fc <__adddf3>
 800ea22:	4602      	mov	r2, r0
 800ea24:	460b      	mov	r3, r1
 800ea26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea2a:	f7f2 f8ad 	bl	8000b88 <__aeabi_dcmpgt>
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	d145      	bne.n	800eabe <_dtoa_r+0x6be>
 800ea32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ea36:	49a5      	ldr	r1, [pc, #660]	@ (800eccc <_dtoa_r+0x8cc>)
 800ea38:	2000      	movs	r0, #0
 800ea3a:	f7f1 fc5d 	bl	80002f8 <__aeabi_dsub>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	460b      	mov	r3, r1
 800ea42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea46:	f7f2 f881 	bl	8000b4c <__aeabi_dcmplt>
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	f43f aef5 	beq.w	800e83a <_dtoa_r+0x43a>
 800ea50:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ea52:	1e73      	subs	r3, r6, #1
 800ea54:	9315      	str	r3, [sp, #84]	@ 0x54
 800ea56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ea5a:	2b30      	cmp	r3, #48	@ 0x30
 800ea5c:	d0f8      	beq.n	800ea50 <_dtoa_r+0x650>
 800ea5e:	9f04      	ldr	r7, [sp, #16]
 800ea60:	e73e      	b.n	800e8e0 <_dtoa_r+0x4e0>
 800ea62:	4b9b      	ldr	r3, [pc, #620]	@ (800ecd0 <_dtoa_r+0x8d0>)
 800ea64:	f7f1 fe00 	bl	8000668 <__aeabi_dmul>
 800ea68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea6c:	e7bc      	b.n	800e9e8 <_dtoa_r+0x5e8>
 800ea6e:	d10c      	bne.n	800ea8a <_dtoa_r+0x68a>
 800ea70:	4b98      	ldr	r3, [pc, #608]	@ (800ecd4 <_dtoa_r+0x8d4>)
 800ea72:	2200      	movs	r2, #0
 800ea74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea78:	f7f1 fdf6 	bl	8000668 <__aeabi_dmul>
 800ea7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea80:	f7f2 f878 	bl	8000b74 <__aeabi_dcmpge>
 800ea84:	2800      	cmp	r0, #0
 800ea86:	f000 8157 	beq.w	800ed38 <_dtoa_r+0x938>
 800ea8a:	2400      	movs	r4, #0
 800ea8c:	4625      	mov	r5, r4
 800ea8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea90:	43db      	mvns	r3, r3
 800ea92:	9304      	str	r3, [sp, #16]
 800ea94:	4656      	mov	r6, sl
 800ea96:	2700      	movs	r7, #0
 800ea98:	4621      	mov	r1, r4
 800ea9a:	4658      	mov	r0, fp
 800ea9c:	f000 fbb4 	bl	800f208 <_Bfree>
 800eaa0:	2d00      	cmp	r5, #0
 800eaa2:	d0dc      	beq.n	800ea5e <_dtoa_r+0x65e>
 800eaa4:	b12f      	cbz	r7, 800eab2 <_dtoa_r+0x6b2>
 800eaa6:	42af      	cmp	r7, r5
 800eaa8:	d003      	beq.n	800eab2 <_dtoa_r+0x6b2>
 800eaaa:	4639      	mov	r1, r7
 800eaac:	4658      	mov	r0, fp
 800eaae:	f000 fbab 	bl	800f208 <_Bfree>
 800eab2:	4629      	mov	r1, r5
 800eab4:	4658      	mov	r0, fp
 800eab6:	f000 fba7 	bl	800f208 <_Bfree>
 800eaba:	e7d0      	b.n	800ea5e <_dtoa_r+0x65e>
 800eabc:	9704      	str	r7, [sp, #16]
 800eabe:	4633      	mov	r3, r6
 800eac0:	461e      	mov	r6, r3
 800eac2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eac6:	2a39      	cmp	r2, #57	@ 0x39
 800eac8:	d107      	bne.n	800eada <_dtoa_r+0x6da>
 800eaca:	459a      	cmp	sl, r3
 800eacc:	d1f8      	bne.n	800eac0 <_dtoa_r+0x6c0>
 800eace:	9a04      	ldr	r2, [sp, #16]
 800ead0:	3201      	adds	r2, #1
 800ead2:	9204      	str	r2, [sp, #16]
 800ead4:	2230      	movs	r2, #48	@ 0x30
 800ead6:	f88a 2000 	strb.w	r2, [sl]
 800eada:	781a      	ldrb	r2, [r3, #0]
 800eadc:	3201      	adds	r2, #1
 800eade:	701a      	strb	r2, [r3, #0]
 800eae0:	e7bd      	b.n	800ea5e <_dtoa_r+0x65e>
 800eae2:	4b7b      	ldr	r3, [pc, #492]	@ (800ecd0 <_dtoa_r+0x8d0>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	f7f1 fdbf 	bl	8000668 <__aeabi_dmul>
 800eaea:	2200      	movs	r2, #0
 800eaec:	2300      	movs	r3, #0
 800eaee:	4604      	mov	r4, r0
 800eaf0:	460d      	mov	r5, r1
 800eaf2:	f7f2 f821 	bl	8000b38 <__aeabi_dcmpeq>
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	f43f aebb 	beq.w	800e872 <_dtoa_r+0x472>
 800eafc:	e6f0      	b.n	800e8e0 <_dtoa_r+0x4e0>
 800eafe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eb00:	2a00      	cmp	r2, #0
 800eb02:	f000 80db 	beq.w	800ecbc <_dtoa_r+0x8bc>
 800eb06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb08:	2a01      	cmp	r2, #1
 800eb0a:	f300 80bf 	bgt.w	800ec8c <_dtoa_r+0x88c>
 800eb0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800eb10:	2a00      	cmp	r2, #0
 800eb12:	f000 80b7 	beq.w	800ec84 <_dtoa_r+0x884>
 800eb16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800eb1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eb1c:	4646      	mov	r6, r8
 800eb1e:	9a08      	ldr	r2, [sp, #32]
 800eb20:	2101      	movs	r1, #1
 800eb22:	441a      	add	r2, r3
 800eb24:	4658      	mov	r0, fp
 800eb26:	4498      	add	r8, r3
 800eb28:	9208      	str	r2, [sp, #32]
 800eb2a:	f000 fc21 	bl	800f370 <__i2b>
 800eb2e:	4605      	mov	r5, r0
 800eb30:	b15e      	cbz	r6, 800eb4a <_dtoa_r+0x74a>
 800eb32:	9b08      	ldr	r3, [sp, #32]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	dd08      	ble.n	800eb4a <_dtoa_r+0x74a>
 800eb38:	42b3      	cmp	r3, r6
 800eb3a:	9a08      	ldr	r2, [sp, #32]
 800eb3c:	bfa8      	it	ge
 800eb3e:	4633      	movge	r3, r6
 800eb40:	eba8 0803 	sub.w	r8, r8, r3
 800eb44:	1af6      	subs	r6, r6, r3
 800eb46:	1ad3      	subs	r3, r2, r3
 800eb48:	9308      	str	r3, [sp, #32]
 800eb4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb4c:	b1f3      	cbz	r3, 800eb8c <_dtoa_r+0x78c>
 800eb4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	f000 80b7 	beq.w	800ecc4 <_dtoa_r+0x8c4>
 800eb56:	b18c      	cbz	r4, 800eb7c <_dtoa_r+0x77c>
 800eb58:	4629      	mov	r1, r5
 800eb5a:	4622      	mov	r2, r4
 800eb5c:	4658      	mov	r0, fp
 800eb5e:	f000 fcc7 	bl	800f4f0 <__pow5mult>
 800eb62:	464a      	mov	r2, r9
 800eb64:	4601      	mov	r1, r0
 800eb66:	4605      	mov	r5, r0
 800eb68:	4658      	mov	r0, fp
 800eb6a:	f000 fc17 	bl	800f39c <__multiply>
 800eb6e:	4649      	mov	r1, r9
 800eb70:	9004      	str	r0, [sp, #16]
 800eb72:	4658      	mov	r0, fp
 800eb74:	f000 fb48 	bl	800f208 <_Bfree>
 800eb78:	9b04      	ldr	r3, [sp, #16]
 800eb7a:	4699      	mov	r9, r3
 800eb7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb7e:	1b1a      	subs	r2, r3, r4
 800eb80:	d004      	beq.n	800eb8c <_dtoa_r+0x78c>
 800eb82:	4649      	mov	r1, r9
 800eb84:	4658      	mov	r0, fp
 800eb86:	f000 fcb3 	bl	800f4f0 <__pow5mult>
 800eb8a:	4681      	mov	r9, r0
 800eb8c:	2101      	movs	r1, #1
 800eb8e:	4658      	mov	r0, fp
 800eb90:	f000 fbee 	bl	800f370 <__i2b>
 800eb94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb96:	4604      	mov	r4, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f000 81cf 	beq.w	800ef3c <_dtoa_r+0xb3c>
 800eb9e:	461a      	mov	r2, r3
 800eba0:	4601      	mov	r1, r0
 800eba2:	4658      	mov	r0, fp
 800eba4:	f000 fca4 	bl	800f4f0 <__pow5mult>
 800eba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebaa:	2b01      	cmp	r3, #1
 800ebac:	4604      	mov	r4, r0
 800ebae:	f300 8095 	bgt.w	800ecdc <_dtoa_r+0x8dc>
 800ebb2:	9b02      	ldr	r3, [sp, #8]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f040 8087 	bne.w	800ecc8 <_dtoa_r+0x8c8>
 800ebba:	9b03      	ldr	r3, [sp, #12]
 800ebbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f040 8089 	bne.w	800ecd8 <_dtoa_r+0x8d8>
 800ebc6:	9b03      	ldr	r3, [sp, #12]
 800ebc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ebcc:	0d1b      	lsrs	r3, r3, #20
 800ebce:	051b      	lsls	r3, r3, #20
 800ebd0:	b12b      	cbz	r3, 800ebde <_dtoa_r+0x7de>
 800ebd2:	9b08      	ldr	r3, [sp, #32]
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	9308      	str	r3, [sp, #32]
 800ebd8:	f108 0801 	add.w	r8, r8, #1
 800ebdc:	2301      	movs	r3, #1
 800ebde:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	f000 81b0 	beq.w	800ef48 <_dtoa_r+0xb48>
 800ebe8:	6923      	ldr	r3, [r4, #16]
 800ebea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ebee:	6918      	ldr	r0, [r3, #16]
 800ebf0:	f000 fb72 	bl	800f2d8 <__hi0bits>
 800ebf4:	f1c0 0020 	rsb	r0, r0, #32
 800ebf8:	9b08      	ldr	r3, [sp, #32]
 800ebfa:	4418      	add	r0, r3
 800ebfc:	f010 001f 	ands.w	r0, r0, #31
 800ec00:	d077      	beq.n	800ecf2 <_dtoa_r+0x8f2>
 800ec02:	f1c0 0320 	rsb	r3, r0, #32
 800ec06:	2b04      	cmp	r3, #4
 800ec08:	dd6b      	ble.n	800ece2 <_dtoa_r+0x8e2>
 800ec0a:	9b08      	ldr	r3, [sp, #32]
 800ec0c:	f1c0 001c 	rsb	r0, r0, #28
 800ec10:	4403      	add	r3, r0
 800ec12:	4480      	add	r8, r0
 800ec14:	4406      	add	r6, r0
 800ec16:	9308      	str	r3, [sp, #32]
 800ec18:	f1b8 0f00 	cmp.w	r8, #0
 800ec1c:	dd05      	ble.n	800ec2a <_dtoa_r+0x82a>
 800ec1e:	4649      	mov	r1, r9
 800ec20:	4642      	mov	r2, r8
 800ec22:	4658      	mov	r0, fp
 800ec24:	f000 fcbe 	bl	800f5a4 <__lshift>
 800ec28:	4681      	mov	r9, r0
 800ec2a:	9b08      	ldr	r3, [sp, #32]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	dd05      	ble.n	800ec3c <_dtoa_r+0x83c>
 800ec30:	4621      	mov	r1, r4
 800ec32:	461a      	mov	r2, r3
 800ec34:	4658      	mov	r0, fp
 800ec36:	f000 fcb5 	bl	800f5a4 <__lshift>
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d059      	beq.n	800ecf6 <_dtoa_r+0x8f6>
 800ec42:	4621      	mov	r1, r4
 800ec44:	4648      	mov	r0, r9
 800ec46:	f000 fd19 	bl	800f67c <__mcmp>
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	da53      	bge.n	800ecf6 <_dtoa_r+0x8f6>
 800ec4e:	1e7b      	subs	r3, r7, #1
 800ec50:	9304      	str	r3, [sp, #16]
 800ec52:	4649      	mov	r1, r9
 800ec54:	2300      	movs	r3, #0
 800ec56:	220a      	movs	r2, #10
 800ec58:	4658      	mov	r0, fp
 800ec5a:	f000 faf7 	bl	800f24c <__multadd>
 800ec5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec60:	4681      	mov	r9, r0
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	f000 8172 	beq.w	800ef4c <_dtoa_r+0xb4c>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	4629      	mov	r1, r5
 800ec6c:	220a      	movs	r2, #10
 800ec6e:	4658      	mov	r0, fp
 800ec70:	f000 faec 	bl	800f24c <__multadd>
 800ec74:	9b00      	ldr	r3, [sp, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	4605      	mov	r5, r0
 800ec7a:	dc67      	bgt.n	800ed4c <_dtoa_r+0x94c>
 800ec7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec7e:	2b02      	cmp	r3, #2
 800ec80:	dc41      	bgt.n	800ed06 <_dtoa_r+0x906>
 800ec82:	e063      	b.n	800ed4c <_dtoa_r+0x94c>
 800ec84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ec86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ec8a:	e746      	b.n	800eb1a <_dtoa_r+0x71a>
 800ec8c:	9b07      	ldr	r3, [sp, #28]
 800ec8e:	1e5c      	subs	r4, r3, #1
 800ec90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec92:	42a3      	cmp	r3, r4
 800ec94:	bfbf      	itttt	lt
 800ec96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ec98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ec9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ec9c:	1ae3      	sublt	r3, r4, r3
 800ec9e:	bfb4      	ite	lt
 800eca0:	18d2      	addlt	r2, r2, r3
 800eca2:	1b1c      	subge	r4, r3, r4
 800eca4:	9b07      	ldr	r3, [sp, #28]
 800eca6:	bfbc      	itt	lt
 800eca8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ecaa:	2400      	movlt	r4, #0
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	bfb5      	itete	lt
 800ecb0:	eba8 0603 	sublt.w	r6, r8, r3
 800ecb4:	9b07      	ldrge	r3, [sp, #28]
 800ecb6:	2300      	movlt	r3, #0
 800ecb8:	4646      	movge	r6, r8
 800ecba:	e730      	b.n	800eb1e <_dtoa_r+0x71e>
 800ecbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ecbe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ecc0:	4646      	mov	r6, r8
 800ecc2:	e735      	b.n	800eb30 <_dtoa_r+0x730>
 800ecc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ecc6:	e75c      	b.n	800eb82 <_dtoa_r+0x782>
 800ecc8:	2300      	movs	r3, #0
 800ecca:	e788      	b.n	800ebde <_dtoa_r+0x7de>
 800eccc:	3fe00000 	.word	0x3fe00000
 800ecd0:	40240000 	.word	0x40240000
 800ecd4:	40140000 	.word	0x40140000
 800ecd8:	9b02      	ldr	r3, [sp, #8]
 800ecda:	e780      	b.n	800ebde <_dtoa_r+0x7de>
 800ecdc:	2300      	movs	r3, #0
 800ecde:	930a      	str	r3, [sp, #40]	@ 0x28
 800ece0:	e782      	b.n	800ebe8 <_dtoa_r+0x7e8>
 800ece2:	d099      	beq.n	800ec18 <_dtoa_r+0x818>
 800ece4:	9a08      	ldr	r2, [sp, #32]
 800ece6:	331c      	adds	r3, #28
 800ece8:	441a      	add	r2, r3
 800ecea:	4498      	add	r8, r3
 800ecec:	441e      	add	r6, r3
 800ecee:	9208      	str	r2, [sp, #32]
 800ecf0:	e792      	b.n	800ec18 <_dtoa_r+0x818>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	e7f6      	b.n	800ece4 <_dtoa_r+0x8e4>
 800ecf6:	9b07      	ldr	r3, [sp, #28]
 800ecf8:	9704      	str	r7, [sp, #16]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	dc20      	bgt.n	800ed40 <_dtoa_r+0x940>
 800ecfe:	9300      	str	r3, [sp, #0]
 800ed00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed02:	2b02      	cmp	r3, #2
 800ed04:	dd1e      	ble.n	800ed44 <_dtoa_r+0x944>
 800ed06:	9b00      	ldr	r3, [sp, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	f47f aec0 	bne.w	800ea8e <_dtoa_r+0x68e>
 800ed0e:	4621      	mov	r1, r4
 800ed10:	2205      	movs	r2, #5
 800ed12:	4658      	mov	r0, fp
 800ed14:	f000 fa9a 	bl	800f24c <__multadd>
 800ed18:	4601      	mov	r1, r0
 800ed1a:	4604      	mov	r4, r0
 800ed1c:	4648      	mov	r0, r9
 800ed1e:	f000 fcad 	bl	800f67c <__mcmp>
 800ed22:	2800      	cmp	r0, #0
 800ed24:	f77f aeb3 	ble.w	800ea8e <_dtoa_r+0x68e>
 800ed28:	4656      	mov	r6, sl
 800ed2a:	2331      	movs	r3, #49	@ 0x31
 800ed2c:	f806 3b01 	strb.w	r3, [r6], #1
 800ed30:	9b04      	ldr	r3, [sp, #16]
 800ed32:	3301      	adds	r3, #1
 800ed34:	9304      	str	r3, [sp, #16]
 800ed36:	e6ae      	b.n	800ea96 <_dtoa_r+0x696>
 800ed38:	9c07      	ldr	r4, [sp, #28]
 800ed3a:	9704      	str	r7, [sp, #16]
 800ed3c:	4625      	mov	r5, r4
 800ed3e:	e7f3      	b.n	800ed28 <_dtoa_r+0x928>
 800ed40:	9b07      	ldr	r3, [sp, #28]
 800ed42:	9300      	str	r3, [sp, #0]
 800ed44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	f000 8104 	beq.w	800ef54 <_dtoa_r+0xb54>
 800ed4c:	2e00      	cmp	r6, #0
 800ed4e:	dd05      	ble.n	800ed5c <_dtoa_r+0x95c>
 800ed50:	4629      	mov	r1, r5
 800ed52:	4632      	mov	r2, r6
 800ed54:	4658      	mov	r0, fp
 800ed56:	f000 fc25 	bl	800f5a4 <__lshift>
 800ed5a:	4605      	mov	r5, r0
 800ed5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d05a      	beq.n	800ee18 <_dtoa_r+0xa18>
 800ed62:	6869      	ldr	r1, [r5, #4]
 800ed64:	4658      	mov	r0, fp
 800ed66:	f000 fa0f 	bl	800f188 <_Balloc>
 800ed6a:	4606      	mov	r6, r0
 800ed6c:	b928      	cbnz	r0, 800ed7a <_dtoa_r+0x97a>
 800ed6e:	4b84      	ldr	r3, [pc, #528]	@ (800ef80 <_dtoa_r+0xb80>)
 800ed70:	4602      	mov	r2, r0
 800ed72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ed76:	f7ff bb5a 	b.w	800e42e <_dtoa_r+0x2e>
 800ed7a:	692a      	ldr	r2, [r5, #16]
 800ed7c:	3202      	adds	r2, #2
 800ed7e:	0092      	lsls	r2, r2, #2
 800ed80:	f105 010c 	add.w	r1, r5, #12
 800ed84:	300c      	adds	r0, #12
 800ed86:	f7ff faa4 	bl	800e2d2 <memcpy>
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	4631      	mov	r1, r6
 800ed8e:	4658      	mov	r0, fp
 800ed90:	f000 fc08 	bl	800f5a4 <__lshift>
 800ed94:	f10a 0301 	add.w	r3, sl, #1
 800ed98:	9307      	str	r3, [sp, #28]
 800ed9a:	9b00      	ldr	r3, [sp, #0]
 800ed9c:	4453      	add	r3, sl
 800ed9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eda0:	9b02      	ldr	r3, [sp, #8]
 800eda2:	f003 0301 	and.w	r3, r3, #1
 800eda6:	462f      	mov	r7, r5
 800eda8:	930a      	str	r3, [sp, #40]	@ 0x28
 800edaa:	4605      	mov	r5, r0
 800edac:	9b07      	ldr	r3, [sp, #28]
 800edae:	4621      	mov	r1, r4
 800edb0:	3b01      	subs	r3, #1
 800edb2:	4648      	mov	r0, r9
 800edb4:	9300      	str	r3, [sp, #0]
 800edb6:	f7ff fa9a 	bl	800e2ee <quorem>
 800edba:	4639      	mov	r1, r7
 800edbc:	9002      	str	r0, [sp, #8]
 800edbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800edc2:	4648      	mov	r0, r9
 800edc4:	f000 fc5a 	bl	800f67c <__mcmp>
 800edc8:	462a      	mov	r2, r5
 800edca:	9008      	str	r0, [sp, #32]
 800edcc:	4621      	mov	r1, r4
 800edce:	4658      	mov	r0, fp
 800edd0:	f000 fc70 	bl	800f6b4 <__mdiff>
 800edd4:	68c2      	ldr	r2, [r0, #12]
 800edd6:	4606      	mov	r6, r0
 800edd8:	bb02      	cbnz	r2, 800ee1c <_dtoa_r+0xa1c>
 800edda:	4601      	mov	r1, r0
 800eddc:	4648      	mov	r0, r9
 800edde:	f000 fc4d 	bl	800f67c <__mcmp>
 800ede2:	4602      	mov	r2, r0
 800ede4:	4631      	mov	r1, r6
 800ede6:	4658      	mov	r0, fp
 800ede8:	920e      	str	r2, [sp, #56]	@ 0x38
 800edea:	f000 fa0d 	bl	800f208 <_Bfree>
 800edee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edf2:	9e07      	ldr	r6, [sp, #28]
 800edf4:	ea43 0102 	orr.w	r1, r3, r2
 800edf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edfa:	4319      	orrs	r1, r3
 800edfc:	d110      	bne.n	800ee20 <_dtoa_r+0xa20>
 800edfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ee02:	d029      	beq.n	800ee58 <_dtoa_r+0xa58>
 800ee04:	9b08      	ldr	r3, [sp, #32]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	dd02      	ble.n	800ee10 <_dtoa_r+0xa10>
 800ee0a:	9b02      	ldr	r3, [sp, #8]
 800ee0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ee10:	9b00      	ldr	r3, [sp, #0]
 800ee12:	f883 8000 	strb.w	r8, [r3]
 800ee16:	e63f      	b.n	800ea98 <_dtoa_r+0x698>
 800ee18:	4628      	mov	r0, r5
 800ee1a:	e7bb      	b.n	800ed94 <_dtoa_r+0x994>
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	e7e1      	b.n	800ede4 <_dtoa_r+0x9e4>
 800ee20:	9b08      	ldr	r3, [sp, #32]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	db04      	blt.n	800ee30 <_dtoa_r+0xa30>
 800ee26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ee28:	430b      	orrs	r3, r1
 800ee2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee2c:	430b      	orrs	r3, r1
 800ee2e:	d120      	bne.n	800ee72 <_dtoa_r+0xa72>
 800ee30:	2a00      	cmp	r2, #0
 800ee32:	dded      	ble.n	800ee10 <_dtoa_r+0xa10>
 800ee34:	4649      	mov	r1, r9
 800ee36:	2201      	movs	r2, #1
 800ee38:	4658      	mov	r0, fp
 800ee3a:	f000 fbb3 	bl	800f5a4 <__lshift>
 800ee3e:	4621      	mov	r1, r4
 800ee40:	4681      	mov	r9, r0
 800ee42:	f000 fc1b 	bl	800f67c <__mcmp>
 800ee46:	2800      	cmp	r0, #0
 800ee48:	dc03      	bgt.n	800ee52 <_dtoa_r+0xa52>
 800ee4a:	d1e1      	bne.n	800ee10 <_dtoa_r+0xa10>
 800ee4c:	f018 0f01 	tst.w	r8, #1
 800ee50:	d0de      	beq.n	800ee10 <_dtoa_r+0xa10>
 800ee52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ee56:	d1d8      	bne.n	800ee0a <_dtoa_r+0xa0a>
 800ee58:	9a00      	ldr	r2, [sp, #0]
 800ee5a:	2339      	movs	r3, #57	@ 0x39
 800ee5c:	7013      	strb	r3, [r2, #0]
 800ee5e:	4633      	mov	r3, r6
 800ee60:	461e      	mov	r6, r3
 800ee62:	3b01      	subs	r3, #1
 800ee64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ee68:	2a39      	cmp	r2, #57	@ 0x39
 800ee6a:	d052      	beq.n	800ef12 <_dtoa_r+0xb12>
 800ee6c:	3201      	adds	r2, #1
 800ee6e:	701a      	strb	r2, [r3, #0]
 800ee70:	e612      	b.n	800ea98 <_dtoa_r+0x698>
 800ee72:	2a00      	cmp	r2, #0
 800ee74:	dd07      	ble.n	800ee86 <_dtoa_r+0xa86>
 800ee76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ee7a:	d0ed      	beq.n	800ee58 <_dtoa_r+0xa58>
 800ee7c:	9a00      	ldr	r2, [sp, #0]
 800ee7e:	f108 0301 	add.w	r3, r8, #1
 800ee82:	7013      	strb	r3, [r2, #0]
 800ee84:	e608      	b.n	800ea98 <_dtoa_r+0x698>
 800ee86:	9b07      	ldr	r3, [sp, #28]
 800ee88:	9a07      	ldr	r2, [sp, #28]
 800ee8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ee8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d028      	beq.n	800eee6 <_dtoa_r+0xae6>
 800ee94:	4649      	mov	r1, r9
 800ee96:	2300      	movs	r3, #0
 800ee98:	220a      	movs	r2, #10
 800ee9a:	4658      	mov	r0, fp
 800ee9c:	f000 f9d6 	bl	800f24c <__multadd>
 800eea0:	42af      	cmp	r7, r5
 800eea2:	4681      	mov	r9, r0
 800eea4:	f04f 0300 	mov.w	r3, #0
 800eea8:	f04f 020a 	mov.w	r2, #10
 800eeac:	4639      	mov	r1, r7
 800eeae:	4658      	mov	r0, fp
 800eeb0:	d107      	bne.n	800eec2 <_dtoa_r+0xac2>
 800eeb2:	f000 f9cb 	bl	800f24c <__multadd>
 800eeb6:	4607      	mov	r7, r0
 800eeb8:	4605      	mov	r5, r0
 800eeba:	9b07      	ldr	r3, [sp, #28]
 800eebc:	3301      	adds	r3, #1
 800eebe:	9307      	str	r3, [sp, #28]
 800eec0:	e774      	b.n	800edac <_dtoa_r+0x9ac>
 800eec2:	f000 f9c3 	bl	800f24c <__multadd>
 800eec6:	4629      	mov	r1, r5
 800eec8:	4607      	mov	r7, r0
 800eeca:	2300      	movs	r3, #0
 800eecc:	220a      	movs	r2, #10
 800eece:	4658      	mov	r0, fp
 800eed0:	f000 f9bc 	bl	800f24c <__multadd>
 800eed4:	4605      	mov	r5, r0
 800eed6:	e7f0      	b.n	800eeba <_dtoa_r+0xaba>
 800eed8:	9b00      	ldr	r3, [sp, #0]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	bfcc      	ite	gt
 800eede:	461e      	movgt	r6, r3
 800eee0:	2601      	movle	r6, #1
 800eee2:	4456      	add	r6, sl
 800eee4:	2700      	movs	r7, #0
 800eee6:	4649      	mov	r1, r9
 800eee8:	2201      	movs	r2, #1
 800eeea:	4658      	mov	r0, fp
 800eeec:	f000 fb5a 	bl	800f5a4 <__lshift>
 800eef0:	4621      	mov	r1, r4
 800eef2:	4681      	mov	r9, r0
 800eef4:	f000 fbc2 	bl	800f67c <__mcmp>
 800eef8:	2800      	cmp	r0, #0
 800eefa:	dcb0      	bgt.n	800ee5e <_dtoa_r+0xa5e>
 800eefc:	d102      	bne.n	800ef04 <_dtoa_r+0xb04>
 800eefe:	f018 0f01 	tst.w	r8, #1
 800ef02:	d1ac      	bne.n	800ee5e <_dtoa_r+0xa5e>
 800ef04:	4633      	mov	r3, r6
 800ef06:	461e      	mov	r6, r3
 800ef08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef0c:	2a30      	cmp	r2, #48	@ 0x30
 800ef0e:	d0fa      	beq.n	800ef06 <_dtoa_r+0xb06>
 800ef10:	e5c2      	b.n	800ea98 <_dtoa_r+0x698>
 800ef12:	459a      	cmp	sl, r3
 800ef14:	d1a4      	bne.n	800ee60 <_dtoa_r+0xa60>
 800ef16:	9b04      	ldr	r3, [sp, #16]
 800ef18:	3301      	adds	r3, #1
 800ef1a:	9304      	str	r3, [sp, #16]
 800ef1c:	2331      	movs	r3, #49	@ 0x31
 800ef1e:	f88a 3000 	strb.w	r3, [sl]
 800ef22:	e5b9      	b.n	800ea98 <_dtoa_r+0x698>
 800ef24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ef26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ef84 <_dtoa_r+0xb84>
 800ef2a:	b11b      	cbz	r3, 800ef34 <_dtoa_r+0xb34>
 800ef2c:	f10a 0308 	add.w	r3, sl, #8
 800ef30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ef32:	6013      	str	r3, [r2, #0]
 800ef34:	4650      	mov	r0, sl
 800ef36:	b019      	add	sp, #100	@ 0x64
 800ef38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	f77f ae37 	ble.w	800ebb2 <_dtoa_r+0x7b2>
 800ef44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef48:	2001      	movs	r0, #1
 800ef4a:	e655      	b.n	800ebf8 <_dtoa_r+0x7f8>
 800ef4c:	9b00      	ldr	r3, [sp, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	f77f aed6 	ble.w	800ed00 <_dtoa_r+0x900>
 800ef54:	4656      	mov	r6, sl
 800ef56:	4621      	mov	r1, r4
 800ef58:	4648      	mov	r0, r9
 800ef5a:	f7ff f9c8 	bl	800e2ee <quorem>
 800ef5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ef62:	f806 8b01 	strb.w	r8, [r6], #1
 800ef66:	9b00      	ldr	r3, [sp, #0]
 800ef68:	eba6 020a 	sub.w	r2, r6, sl
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	ddb3      	ble.n	800eed8 <_dtoa_r+0xad8>
 800ef70:	4649      	mov	r1, r9
 800ef72:	2300      	movs	r3, #0
 800ef74:	220a      	movs	r2, #10
 800ef76:	4658      	mov	r0, fp
 800ef78:	f000 f968 	bl	800f24c <__multadd>
 800ef7c:	4681      	mov	r9, r0
 800ef7e:	e7ea      	b.n	800ef56 <_dtoa_r+0xb56>
 800ef80:	08011708 	.word	0x08011708
 800ef84:	0801168c 	.word	0x0801168c

0800ef88 <_free_r>:
 800ef88:	b538      	push	{r3, r4, r5, lr}
 800ef8a:	4605      	mov	r5, r0
 800ef8c:	2900      	cmp	r1, #0
 800ef8e:	d041      	beq.n	800f014 <_free_r+0x8c>
 800ef90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef94:	1f0c      	subs	r4, r1, #4
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	bfb8      	it	lt
 800ef9a:	18e4      	addlt	r4, r4, r3
 800ef9c:	f000 f8e8 	bl	800f170 <__malloc_lock>
 800efa0:	4a1d      	ldr	r2, [pc, #116]	@ (800f018 <_free_r+0x90>)
 800efa2:	6813      	ldr	r3, [r2, #0]
 800efa4:	b933      	cbnz	r3, 800efb4 <_free_r+0x2c>
 800efa6:	6063      	str	r3, [r4, #4]
 800efa8:	6014      	str	r4, [r2, #0]
 800efaa:	4628      	mov	r0, r5
 800efac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efb0:	f000 b8e4 	b.w	800f17c <__malloc_unlock>
 800efb4:	42a3      	cmp	r3, r4
 800efb6:	d908      	bls.n	800efca <_free_r+0x42>
 800efb8:	6820      	ldr	r0, [r4, #0]
 800efba:	1821      	adds	r1, r4, r0
 800efbc:	428b      	cmp	r3, r1
 800efbe:	bf01      	itttt	eq
 800efc0:	6819      	ldreq	r1, [r3, #0]
 800efc2:	685b      	ldreq	r3, [r3, #4]
 800efc4:	1809      	addeq	r1, r1, r0
 800efc6:	6021      	streq	r1, [r4, #0]
 800efc8:	e7ed      	b.n	800efa6 <_free_r+0x1e>
 800efca:	461a      	mov	r2, r3
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	b10b      	cbz	r3, 800efd4 <_free_r+0x4c>
 800efd0:	42a3      	cmp	r3, r4
 800efd2:	d9fa      	bls.n	800efca <_free_r+0x42>
 800efd4:	6811      	ldr	r1, [r2, #0]
 800efd6:	1850      	adds	r0, r2, r1
 800efd8:	42a0      	cmp	r0, r4
 800efda:	d10b      	bne.n	800eff4 <_free_r+0x6c>
 800efdc:	6820      	ldr	r0, [r4, #0]
 800efde:	4401      	add	r1, r0
 800efe0:	1850      	adds	r0, r2, r1
 800efe2:	4283      	cmp	r3, r0
 800efe4:	6011      	str	r1, [r2, #0]
 800efe6:	d1e0      	bne.n	800efaa <_free_r+0x22>
 800efe8:	6818      	ldr	r0, [r3, #0]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	6053      	str	r3, [r2, #4]
 800efee:	4408      	add	r0, r1
 800eff0:	6010      	str	r0, [r2, #0]
 800eff2:	e7da      	b.n	800efaa <_free_r+0x22>
 800eff4:	d902      	bls.n	800effc <_free_r+0x74>
 800eff6:	230c      	movs	r3, #12
 800eff8:	602b      	str	r3, [r5, #0]
 800effa:	e7d6      	b.n	800efaa <_free_r+0x22>
 800effc:	6820      	ldr	r0, [r4, #0]
 800effe:	1821      	adds	r1, r4, r0
 800f000:	428b      	cmp	r3, r1
 800f002:	bf04      	itt	eq
 800f004:	6819      	ldreq	r1, [r3, #0]
 800f006:	685b      	ldreq	r3, [r3, #4]
 800f008:	6063      	str	r3, [r4, #4]
 800f00a:	bf04      	itt	eq
 800f00c:	1809      	addeq	r1, r1, r0
 800f00e:	6021      	streq	r1, [r4, #0]
 800f010:	6054      	str	r4, [r2, #4]
 800f012:	e7ca      	b.n	800efaa <_free_r+0x22>
 800f014:	bd38      	pop	{r3, r4, r5, pc}
 800f016:	bf00      	nop
 800f018:	200079ac 	.word	0x200079ac

0800f01c <malloc>:
 800f01c:	4b02      	ldr	r3, [pc, #8]	@ (800f028 <malloc+0xc>)
 800f01e:	4601      	mov	r1, r0
 800f020:	6818      	ldr	r0, [r3, #0]
 800f022:	f000 b825 	b.w	800f070 <_malloc_r>
 800f026:	bf00      	nop
 800f028:	20000430 	.word	0x20000430

0800f02c <sbrk_aligned>:
 800f02c:	b570      	push	{r4, r5, r6, lr}
 800f02e:	4e0f      	ldr	r6, [pc, #60]	@ (800f06c <sbrk_aligned+0x40>)
 800f030:	460c      	mov	r4, r1
 800f032:	6831      	ldr	r1, [r6, #0]
 800f034:	4605      	mov	r5, r0
 800f036:	b911      	cbnz	r1, 800f03e <sbrk_aligned+0x12>
 800f038:	f000 fe46 	bl	800fcc8 <_sbrk_r>
 800f03c:	6030      	str	r0, [r6, #0]
 800f03e:	4621      	mov	r1, r4
 800f040:	4628      	mov	r0, r5
 800f042:	f000 fe41 	bl	800fcc8 <_sbrk_r>
 800f046:	1c43      	adds	r3, r0, #1
 800f048:	d103      	bne.n	800f052 <sbrk_aligned+0x26>
 800f04a:	f04f 34ff 	mov.w	r4, #4294967295
 800f04e:	4620      	mov	r0, r4
 800f050:	bd70      	pop	{r4, r5, r6, pc}
 800f052:	1cc4      	adds	r4, r0, #3
 800f054:	f024 0403 	bic.w	r4, r4, #3
 800f058:	42a0      	cmp	r0, r4
 800f05a:	d0f8      	beq.n	800f04e <sbrk_aligned+0x22>
 800f05c:	1a21      	subs	r1, r4, r0
 800f05e:	4628      	mov	r0, r5
 800f060:	f000 fe32 	bl	800fcc8 <_sbrk_r>
 800f064:	3001      	adds	r0, #1
 800f066:	d1f2      	bne.n	800f04e <sbrk_aligned+0x22>
 800f068:	e7ef      	b.n	800f04a <sbrk_aligned+0x1e>
 800f06a:	bf00      	nop
 800f06c:	200079a8 	.word	0x200079a8

0800f070 <_malloc_r>:
 800f070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f074:	1ccd      	adds	r5, r1, #3
 800f076:	f025 0503 	bic.w	r5, r5, #3
 800f07a:	3508      	adds	r5, #8
 800f07c:	2d0c      	cmp	r5, #12
 800f07e:	bf38      	it	cc
 800f080:	250c      	movcc	r5, #12
 800f082:	2d00      	cmp	r5, #0
 800f084:	4606      	mov	r6, r0
 800f086:	db01      	blt.n	800f08c <_malloc_r+0x1c>
 800f088:	42a9      	cmp	r1, r5
 800f08a:	d904      	bls.n	800f096 <_malloc_r+0x26>
 800f08c:	230c      	movs	r3, #12
 800f08e:	6033      	str	r3, [r6, #0]
 800f090:	2000      	movs	r0, #0
 800f092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f096:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f16c <_malloc_r+0xfc>
 800f09a:	f000 f869 	bl	800f170 <__malloc_lock>
 800f09e:	f8d8 3000 	ldr.w	r3, [r8]
 800f0a2:	461c      	mov	r4, r3
 800f0a4:	bb44      	cbnz	r4, 800f0f8 <_malloc_r+0x88>
 800f0a6:	4629      	mov	r1, r5
 800f0a8:	4630      	mov	r0, r6
 800f0aa:	f7ff ffbf 	bl	800f02c <sbrk_aligned>
 800f0ae:	1c43      	adds	r3, r0, #1
 800f0b0:	4604      	mov	r4, r0
 800f0b2:	d158      	bne.n	800f166 <_malloc_r+0xf6>
 800f0b4:	f8d8 4000 	ldr.w	r4, [r8]
 800f0b8:	4627      	mov	r7, r4
 800f0ba:	2f00      	cmp	r7, #0
 800f0bc:	d143      	bne.n	800f146 <_malloc_r+0xd6>
 800f0be:	2c00      	cmp	r4, #0
 800f0c0:	d04b      	beq.n	800f15a <_malloc_r+0xea>
 800f0c2:	6823      	ldr	r3, [r4, #0]
 800f0c4:	4639      	mov	r1, r7
 800f0c6:	4630      	mov	r0, r6
 800f0c8:	eb04 0903 	add.w	r9, r4, r3
 800f0cc:	f000 fdfc 	bl	800fcc8 <_sbrk_r>
 800f0d0:	4581      	cmp	r9, r0
 800f0d2:	d142      	bne.n	800f15a <_malloc_r+0xea>
 800f0d4:	6821      	ldr	r1, [r4, #0]
 800f0d6:	1a6d      	subs	r5, r5, r1
 800f0d8:	4629      	mov	r1, r5
 800f0da:	4630      	mov	r0, r6
 800f0dc:	f7ff ffa6 	bl	800f02c <sbrk_aligned>
 800f0e0:	3001      	adds	r0, #1
 800f0e2:	d03a      	beq.n	800f15a <_malloc_r+0xea>
 800f0e4:	6823      	ldr	r3, [r4, #0]
 800f0e6:	442b      	add	r3, r5
 800f0e8:	6023      	str	r3, [r4, #0]
 800f0ea:	f8d8 3000 	ldr.w	r3, [r8]
 800f0ee:	685a      	ldr	r2, [r3, #4]
 800f0f0:	bb62      	cbnz	r2, 800f14c <_malloc_r+0xdc>
 800f0f2:	f8c8 7000 	str.w	r7, [r8]
 800f0f6:	e00f      	b.n	800f118 <_malloc_r+0xa8>
 800f0f8:	6822      	ldr	r2, [r4, #0]
 800f0fa:	1b52      	subs	r2, r2, r5
 800f0fc:	d420      	bmi.n	800f140 <_malloc_r+0xd0>
 800f0fe:	2a0b      	cmp	r2, #11
 800f100:	d917      	bls.n	800f132 <_malloc_r+0xc2>
 800f102:	1961      	adds	r1, r4, r5
 800f104:	42a3      	cmp	r3, r4
 800f106:	6025      	str	r5, [r4, #0]
 800f108:	bf18      	it	ne
 800f10a:	6059      	strne	r1, [r3, #4]
 800f10c:	6863      	ldr	r3, [r4, #4]
 800f10e:	bf08      	it	eq
 800f110:	f8c8 1000 	streq.w	r1, [r8]
 800f114:	5162      	str	r2, [r4, r5]
 800f116:	604b      	str	r3, [r1, #4]
 800f118:	4630      	mov	r0, r6
 800f11a:	f000 f82f 	bl	800f17c <__malloc_unlock>
 800f11e:	f104 000b 	add.w	r0, r4, #11
 800f122:	1d23      	adds	r3, r4, #4
 800f124:	f020 0007 	bic.w	r0, r0, #7
 800f128:	1ac2      	subs	r2, r0, r3
 800f12a:	bf1c      	itt	ne
 800f12c:	1a1b      	subne	r3, r3, r0
 800f12e:	50a3      	strne	r3, [r4, r2]
 800f130:	e7af      	b.n	800f092 <_malloc_r+0x22>
 800f132:	6862      	ldr	r2, [r4, #4]
 800f134:	42a3      	cmp	r3, r4
 800f136:	bf0c      	ite	eq
 800f138:	f8c8 2000 	streq.w	r2, [r8]
 800f13c:	605a      	strne	r2, [r3, #4]
 800f13e:	e7eb      	b.n	800f118 <_malloc_r+0xa8>
 800f140:	4623      	mov	r3, r4
 800f142:	6864      	ldr	r4, [r4, #4]
 800f144:	e7ae      	b.n	800f0a4 <_malloc_r+0x34>
 800f146:	463c      	mov	r4, r7
 800f148:	687f      	ldr	r7, [r7, #4]
 800f14a:	e7b6      	b.n	800f0ba <_malloc_r+0x4a>
 800f14c:	461a      	mov	r2, r3
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	42a3      	cmp	r3, r4
 800f152:	d1fb      	bne.n	800f14c <_malloc_r+0xdc>
 800f154:	2300      	movs	r3, #0
 800f156:	6053      	str	r3, [r2, #4]
 800f158:	e7de      	b.n	800f118 <_malloc_r+0xa8>
 800f15a:	230c      	movs	r3, #12
 800f15c:	6033      	str	r3, [r6, #0]
 800f15e:	4630      	mov	r0, r6
 800f160:	f000 f80c 	bl	800f17c <__malloc_unlock>
 800f164:	e794      	b.n	800f090 <_malloc_r+0x20>
 800f166:	6005      	str	r5, [r0, #0]
 800f168:	e7d6      	b.n	800f118 <_malloc_r+0xa8>
 800f16a:	bf00      	nop
 800f16c:	200079ac 	.word	0x200079ac

0800f170 <__malloc_lock>:
 800f170:	4801      	ldr	r0, [pc, #4]	@ (800f178 <__malloc_lock+0x8>)
 800f172:	f7ff b8a4 	b.w	800e2be <__retarget_lock_acquire_recursive>
 800f176:	bf00      	nop
 800f178:	200079a4 	.word	0x200079a4

0800f17c <__malloc_unlock>:
 800f17c:	4801      	ldr	r0, [pc, #4]	@ (800f184 <__malloc_unlock+0x8>)
 800f17e:	f7ff b89f 	b.w	800e2c0 <__retarget_lock_release_recursive>
 800f182:	bf00      	nop
 800f184:	200079a4 	.word	0x200079a4

0800f188 <_Balloc>:
 800f188:	b570      	push	{r4, r5, r6, lr}
 800f18a:	69c6      	ldr	r6, [r0, #28]
 800f18c:	4604      	mov	r4, r0
 800f18e:	460d      	mov	r5, r1
 800f190:	b976      	cbnz	r6, 800f1b0 <_Balloc+0x28>
 800f192:	2010      	movs	r0, #16
 800f194:	f7ff ff42 	bl	800f01c <malloc>
 800f198:	4602      	mov	r2, r0
 800f19a:	61e0      	str	r0, [r4, #28]
 800f19c:	b920      	cbnz	r0, 800f1a8 <_Balloc+0x20>
 800f19e:	4b18      	ldr	r3, [pc, #96]	@ (800f200 <_Balloc+0x78>)
 800f1a0:	4818      	ldr	r0, [pc, #96]	@ (800f204 <_Balloc+0x7c>)
 800f1a2:	216b      	movs	r1, #107	@ 0x6b
 800f1a4:	f000 fda0 	bl	800fce8 <__assert_func>
 800f1a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f1ac:	6006      	str	r6, [r0, #0]
 800f1ae:	60c6      	str	r6, [r0, #12]
 800f1b0:	69e6      	ldr	r6, [r4, #28]
 800f1b2:	68f3      	ldr	r3, [r6, #12]
 800f1b4:	b183      	cbz	r3, 800f1d8 <_Balloc+0x50>
 800f1b6:	69e3      	ldr	r3, [r4, #28]
 800f1b8:	68db      	ldr	r3, [r3, #12]
 800f1ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f1be:	b9b8      	cbnz	r0, 800f1f0 <_Balloc+0x68>
 800f1c0:	2101      	movs	r1, #1
 800f1c2:	fa01 f605 	lsl.w	r6, r1, r5
 800f1c6:	1d72      	adds	r2, r6, #5
 800f1c8:	0092      	lsls	r2, r2, #2
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	f000 fdaa 	bl	800fd24 <_calloc_r>
 800f1d0:	b160      	cbz	r0, 800f1ec <_Balloc+0x64>
 800f1d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f1d6:	e00e      	b.n	800f1f6 <_Balloc+0x6e>
 800f1d8:	2221      	movs	r2, #33	@ 0x21
 800f1da:	2104      	movs	r1, #4
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f000 fda1 	bl	800fd24 <_calloc_r>
 800f1e2:	69e3      	ldr	r3, [r4, #28]
 800f1e4:	60f0      	str	r0, [r6, #12]
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d1e4      	bne.n	800f1b6 <_Balloc+0x2e>
 800f1ec:	2000      	movs	r0, #0
 800f1ee:	bd70      	pop	{r4, r5, r6, pc}
 800f1f0:	6802      	ldr	r2, [r0, #0]
 800f1f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f1fc:	e7f7      	b.n	800f1ee <_Balloc+0x66>
 800f1fe:	bf00      	nop
 800f200:	08011699 	.word	0x08011699
 800f204:	08011719 	.word	0x08011719

0800f208 <_Bfree>:
 800f208:	b570      	push	{r4, r5, r6, lr}
 800f20a:	69c6      	ldr	r6, [r0, #28]
 800f20c:	4605      	mov	r5, r0
 800f20e:	460c      	mov	r4, r1
 800f210:	b976      	cbnz	r6, 800f230 <_Bfree+0x28>
 800f212:	2010      	movs	r0, #16
 800f214:	f7ff ff02 	bl	800f01c <malloc>
 800f218:	4602      	mov	r2, r0
 800f21a:	61e8      	str	r0, [r5, #28]
 800f21c:	b920      	cbnz	r0, 800f228 <_Bfree+0x20>
 800f21e:	4b09      	ldr	r3, [pc, #36]	@ (800f244 <_Bfree+0x3c>)
 800f220:	4809      	ldr	r0, [pc, #36]	@ (800f248 <_Bfree+0x40>)
 800f222:	218f      	movs	r1, #143	@ 0x8f
 800f224:	f000 fd60 	bl	800fce8 <__assert_func>
 800f228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f22c:	6006      	str	r6, [r0, #0]
 800f22e:	60c6      	str	r6, [r0, #12]
 800f230:	b13c      	cbz	r4, 800f242 <_Bfree+0x3a>
 800f232:	69eb      	ldr	r3, [r5, #28]
 800f234:	6862      	ldr	r2, [r4, #4]
 800f236:	68db      	ldr	r3, [r3, #12]
 800f238:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f23c:	6021      	str	r1, [r4, #0]
 800f23e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f242:	bd70      	pop	{r4, r5, r6, pc}
 800f244:	08011699 	.word	0x08011699
 800f248:	08011719 	.word	0x08011719

0800f24c <__multadd>:
 800f24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f250:	690d      	ldr	r5, [r1, #16]
 800f252:	4607      	mov	r7, r0
 800f254:	460c      	mov	r4, r1
 800f256:	461e      	mov	r6, r3
 800f258:	f101 0c14 	add.w	ip, r1, #20
 800f25c:	2000      	movs	r0, #0
 800f25e:	f8dc 3000 	ldr.w	r3, [ip]
 800f262:	b299      	uxth	r1, r3
 800f264:	fb02 6101 	mla	r1, r2, r1, r6
 800f268:	0c1e      	lsrs	r6, r3, #16
 800f26a:	0c0b      	lsrs	r3, r1, #16
 800f26c:	fb02 3306 	mla	r3, r2, r6, r3
 800f270:	b289      	uxth	r1, r1
 800f272:	3001      	adds	r0, #1
 800f274:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f278:	4285      	cmp	r5, r0
 800f27a:	f84c 1b04 	str.w	r1, [ip], #4
 800f27e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f282:	dcec      	bgt.n	800f25e <__multadd+0x12>
 800f284:	b30e      	cbz	r6, 800f2ca <__multadd+0x7e>
 800f286:	68a3      	ldr	r3, [r4, #8]
 800f288:	42ab      	cmp	r3, r5
 800f28a:	dc19      	bgt.n	800f2c0 <__multadd+0x74>
 800f28c:	6861      	ldr	r1, [r4, #4]
 800f28e:	4638      	mov	r0, r7
 800f290:	3101      	adds	r1, #1
 800f292:	f7ff ff79 	bl	800f188 <_Balloc>
 800f296:	4680      	mov	r8, r0
 800f298:	b928      	cbnz	r0, 800f2a6 <__multadd+0x5a>
 800f29a:	4602      	mov	r2, r0
 800f29c:	4b0c      	ldr	r3, [pc, #48]	@ (800f2d0 <__multadd+0x84>)
 800f29e:	480d      	ldr	r0, [pc, #52]	@ (800f2d4 <__multadd+0x88>)
 800f2a0:	21ba      	movs	r1, #186	@ 0xba
 800f2a2:	f000 fd21 	bl	800fce8 <__assert_func>
 800f2a6:	6922      	ldr	r2, [r4, #16]
 800f2a8:	3202      	adds	r2, #2
 800f2aa:	f104 010c 	add.w	r1, r4, #12
 800f2ae:	0092      	lsls	r2, r2, #2
 800f2b0:	300c      	adds	r0, #12
 800f2b2:	f7ff f80e 	bl	800e2d2 <memcpy>
 800f2b6:	4621      	mov	r1, r4
 800f2b8:	4638      	mov	r0, r7
 800f2ba:	f7ff ffa5 	bl	800f208 <_Bfree>
 800f2be:	4644      	mov	r4, r8
 800f2c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f2c4:	3501      	adds	r5, #1
 800f2c6:	615e      	str	r6, [r3, #20]
 800f2c8:	6125      	str	r5, [r4, #16]
 800f2ca:	4620      	mov	r0, r4
 800f2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2d0:	08011708 	.word	0x08011708
 800f2d4:	08011719 	.word	0x08011719

0800f2d8 <__hi0bits>:
 800f2d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f2dc:	4603      	mov	r3, r0
 800f2de:	bf36      	itet	cc
 800f2e0:	0403      	lslcc	r3, r0, #16
 800f2e2:	2000      	movcs	r0, #0
 800f2e4:	2010      	movcc	r0, #16
 800f2e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f2ea:	bf3c      	itt	cc
 800f2ec:	021b      	lslcc	r3, r3, #8
 800f2ee:	3008      	addcc	r0, #8
 800f2f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f2f4:	bf3c      	itt	cc
 800f2f6:	011b      	lslcc	r3, r3, #4
 800f2f8:	3004      	addcc	r0, #4
 800f2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2fe:	bf3c      	itt	cc
 800f300:	009b      	lslcc	r3, r3, #2
 800f302:	3002      	addcc	r0, #2
 800f304:	2b00      	cmp	r3, #0
 800f306:	db05      	blt.n	800f314 <__hi0bits+0x3c>
 800f308:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f30c:	f100 0001 	add.w	r0, r0, #1
 800f310:	bf08      	it	eq
 800f312:	2020      	moveq	r0, #32
 800f314:	4770      	bx	lr

0800f316 <__lo0bits>:
 800f316:	6803      	ldr	r3, [r0, #0]
 800f318:	4602      	mov	r2, r0
 800f31a:	f013 0007 	ands.w	r0, r3, #7
 800f31e:	d00b      	beq.n	800f338 <__lo0bits+0x22>
 800f320:	07d9      	lsls	r1, r3, #31
 800f322:	d421      	bmi.n	800f368 <__lo0bits+0x52>
 800f324:	0798      	lsls	r0, r3, #30
 800f326:	bf49      	itett	mi
 800f328:	085b      	lsrmi	r3, r3, #1
 800f32a:	089b      	lsrpl	r3, r3, #2
 800f32c:	2001      	movmi	r0, #1
 800f32e:	6013      	strmi	r3, [r2, #0]
 800f330:	bf5c      	itt	pl
 800f332:	6013      	strpl	r3, [r2, #0]
 800f334:	2002      	movpl	r0, #2
 800f336:	4770      	bx	lr
 800f338:	b299      	uxth	r1, r3
 800f33a:	b909      	cbnz	r1, 800f340 <__lo0bits+0x2a>
 800f33c:	0c1b      	lsrs	r3, r3, #16
 800f33e:	2010      	movs	r0, #16
 800f340:	b2d9      	uxtb	r1, r3
 800f342:	b909      	cbnz	r1, 800f348 <__lo0bits+0x32>
 800f344:	3008      	adds	r0, #8
 800f346:	0a1b      	lsrs	r3, r3, #8
 800f348:	0719      	lsls	r1, r3, #28
 800f34a:	bf04      	itt	eq
 800f34c:	091b      	lsreq	r3, r3, #4
 800f34e:	3004      	addeq	r0, #4
 800f350:	0799      	lsls	r1, r3, #30
 800f352:	bf04      	itt	eq
 800f354:	089b      	lsreq	r3, r3, #2
 800f356:	3002      	addeq	r0, #2
 800f358:	07d9      	lsls	r1, r3, #31
 800f35a:	d403      	bmi.n	800f364 <__lo0bits+0x4e>
 800f35c:	085b      	lsrs	r3, r3, #1
 800f35e:	f100 0001 	add.w	r0, r0, #1
 800f362:	d003      	beq.n	800f36c <__lo0bits+0x56>
 800f364:	6013      	str	r3, [r2, #0]
 800f366:	4770      	bx	lr
 800f368:	2000      	movs	r0, #0
 800f36a:	4770      	bx	lr
 800f36c:	2020      	movs	r0, #32
 800f36e:	4770      	bx	lr

0800f370 <__i2b>:
 800f370:	b510      	push	{r4, lr}
 800f372:	460c      	mov	r4, r1
 800f374:	2101      	movs	r1, #1
 800f376:	f7ff ff07 	bl	800f188 <_Balloc>
 800f37a:	4602      	mov	r2, r0
 800f37c:	b928      	cbnz	r0, 800f38a <__i2b+0x1a>
 800f37e:	4b05      	ldr	r3, [pc, #20]	@ (800f394 <__i2b+0x24>)
 800f380:	4805      	ldr	r0, [pc, #20]	@ (800f398 <__i2b+0x28>)
 800f382:	f240 1145 	movw	r1, #325	@ 0x145
 800f386:	f000 fcaf 	bl	800fce8 <__assert_func>
 800f38a:	2301      	movs	r3, #1
 800f38c:	6144      	str	r4, [r0, #20]
 800f38e:	6103      	str	r3, [r0, #16]
 800f390:	bd10      	pop	{r4, pc}
 800f392:	bf00      	nop
 800f394:	08011708 	.word	0x08011708
 800f398:	08011719 	.word	0x08011719

0800f39c <__multiply>:
 800f39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a0:	4614      	mov	r4, r2
 800f3a2:	690a      	ldr	r2, [r1, #16]
 800f3a4:	6923      	ldr	r3, [r4, #16]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	bfa8      	it	ge
 800f3aa:	4623      	movge	r3, r4
 800f3ac:	460f      	mov	r7, r1
 800f3ae:	bfa4      	itt	ge
 800f3b0:	460c      	movge	r4, r1
 800f3b2:	461f      	movge	r7, r3
 800f3b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f3b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f3bc:	68a3      	ldr	r3, [r4, #8]
 800f3be:	6861      	ldr	r1, [r4, #4]
 800f3c0:	eb0a 0609 	add.w	r6, sl, r9
 800f3c4:	42b3      	cmp	r3, r6
 800f3c6:	b085      	sub	sp, #20
 800f3c8:	bfb8      	it	lt
 800f3ca:	3101      	addlt	r1, #1
 800f3cc:	f7ff fedc 	bl	800f188 <_Balloc>
 800f3d0:	b930      	cbnz	r0, 800f3e0 <__multiply+0x44>
 800f3d2:	4602      	mov	r2, r0
 800f3d4:	4b44      	ldr	r3, [pc, #272]	@ (800f4e8 <__multiply+0x14c>)
 800f3d6:	4845      	ldr	r0, [pc, #276]	@ (800f4ec <__multiply+0x150>)
 800f3d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f3dc:	f000 fc84 	bl	800fce8 <__assert_func>
 800f3e0:	f100 0514 	add.w	r5, r0, #20
 800f3e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f3e8:	462b      	mov	r3, r5
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	4543      	cmp	r3, r8
 800f3ee:	d321      	bcc.n	800f434 <__multiply+0x98>
 800f3f0:	f107 0114 	add.w	r1, r7, #20
 800f3f4:	f104 0214 	add.w	r2, r4, #20
 800f3f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f3fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f400:	9302      	str	r3, [sp, #8]
 800f402:	1b13      	subs	r3, r2, r4
 800f404:	3b15      	subs	r3, #21
 800f406:	f023 0303 	bic.w	r3, r3, #3
 800f40a:	3304      	adds	r3, #4
 800f40c:	f104 0715 	add.w	r7, r4, #21
 800f410:	42ba      	cmp	r2, r7
 800f412:	bf38      	it	cc
 800f414:	2304      	movcc	r3, #4
 800f416:	9301      	str	r3, [sp, #4]
 800f418:	9b02      	ldr	r3, [sp, #8]
 800f41a:	9103      	str	r1, [sp, #12]
 800f41c:	428b      	cmp	r3, r1
 800f41e:	d80c      	bhi.n	800f43a <__multiply+0x9e>
 800f420:	2e00      	cmp	r6, #0
 800f422:	dd03      	ble.n	800f42c <__multiply+0x90>
 800f424:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d05b      	beq.n	800f4e4 <__multiply+0x148>
 800f42c:	6106      	str	r6, [r0, #16]
 800f42e:	b005      	add	sp, #20
 800f430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f434:	f843 2b04 	str.w	r2, [r3], #4
 800f438:	e7d8      	b.n	800f3ec <__multiply+0x50>
 800f43a:	f8b1 a000 	ldrh.w	sl, [r1]
 800f43e:	f1ba 0f00 	cmp.w	sl, #0
 800f442:	d024      	beq.n	800f48e <__multiply+0xf2>
 800f444:	f104 0e14 	add.w	lr, r4, #20
 800f448:	46a9      	mov	r9, r5
 800f44a:	f04f 0c00 	mov.w	ip, #0
 800f44e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f452:	f8d9 3000 	ldr.w	r3, [r9]
 800f456:	fa1f fb87 	uxth.w	fp, r7
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	fb0a 330b 	mla	r3, sl, fp, r3
 800f460:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f464:	f8d9 7000 	ldr.w	r7, [r9]
 800f468:	4463      	add	r3, ip
 800f46a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f46e:	fb0a c70b 	mla	r7, sl, fp, ip
 800f472:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f476:	b29b      	uxth	r3, r3
 800f478:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f47c:	4572      	cmp	r2, lr
 800f47e:	f849 3b04 	str.w	r3, [r9], #4
 800f482:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f486:	d8e2      	bhi.n	800f44e <__multiply+0xb2>
 800f488:	9b01      	ldr	r3, [sp, #4]
 800f48a:	f845 c003 	str.w	ip, [r5, r3]
 800f48e:	9b03      	ldr	r3, [sp, #12]
 800f490:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f494:	3104      	adds	r1, #4
 800f496:	f1b9 0f00 	cmp.w	r9, #0
 800f49a:	d021      	beq.n	800f4e0 <__multiply+0x144>
 800f49c:	682b      	ldr	r3, [r5, #0]
 800f49e:	f104 0c14 	add.w	ip, r4, #20
 800f4a2:	46ae      	mov	lr, r5
 800f4a4:	f04f 0a00 	mov.w	sl, #0
 800f4a8:	f8bc b000 	ldrh.w	fp, [ip]
 800f4ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f4b0:	fb09 770b 	mla	r7, r9, fp, r7
 800f4b4:	4457      	add	r7, sl
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f4bc:	f84e 3b04 	str.w	r3, [lr], #4
 800f4c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f4c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f4c8:	f8be 3000 	ldrh.w	r3, [lr]
 800f4cc:	fb09 330a 	mla	r3, r9, sl, r3
 800f4d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f4d4:	4562      	cmp	r2, ip
 800f4d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f4da:	d8e5      	bhi.n	800f4a8 <__multiply+0x10c>
 800f4dc:	9f01      	ldr	r7, [sp, #4]
 800f4de:	51eb      	str	r3, [r5, r7]
 800f4e0:	3504      	adds	r5, #4
 800f4e2:	e799      	b.n	800f418 <__multiply+0x7c>
 800f4e4:	3e01      	subs	r6, #1
 800f4e6:	e79b      	b.n	800f420 <__multiply+0x84>
 800f4e8:	08011708 	.word	0x08011708
 800f4ec:	08011719 	.word	0x08011719

0800f4f0 <__pow5mult>:
 800f4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4f4:	4615      	mov	r5, r2
 800f4f6:	f012 0203 	ands.w	r2, r2, #3
 800f4fa:	4607      	mov	r7, r0
 800f4fc:	460e      	mov	r6, r1
 800f4fe:	d007      	beq.n	800f510 <__pow5mult+0x20>
 800f500:	4c25      	ldr	r4, [pc, #148]	@ (800f598 <__pow5mult+0xa8>)
 800f502:	3a01      	subs	r2, #1
 800f504:	2300      	movs	r3, #0
 800f506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f50a:	f7ff fe9f 	bl	800f24c <__multadd>
 800f50e:	4606      	mov	r6, r0
 800f510:	10ad      	asrs	r5, r5, #2
 800f512:	d03d      	beq.n	800f590 <__pow5mult+0xa0>
 800f514:	69fc      	ldr	r4, [r7, #28]
 800f516:	b97c      	cbnz	r4, 800f538 <__pow5mult+0x48>
 800f518:	2010      	movs	r0, #16
 800f51a:	f7ff fd7f 	bl	800f01c <malloc>
 800f51e:	4602      	mov	r2, r0
 800f520:	61f8      	str	r0, [r7, #28]
 800f522:	b928      	cbnz	r0, 800f530 <__pow5mult+0x40>
 800f524:	4b1d      	ldr	r3, [pc, #116]	@ (800f59c <__pow5mult+0xac>)
 800f526:	481e      	ldr	r0, [pc, #120]	@ (800f5a0 <__pow5mult+0xb0>)
 800f528:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f52c:	f000 fbdc 	bl	800fce8 <__assert_func>
 800f530:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f534:	6004      	str	r4, [r0, #0]
 800f536:	60c4      	str	r4, [r0, #12]
 800f538:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f53c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f540:	b94c      	cbnz	r4, 800f556 <__pow5mult+0x66>
 800f542:	f240 2171 	movw	r1, #625	@ 0x271
 800f546:	4638      	mov	r0, r7
 800f548:	f7ff ff12 	bl	800f370 <__i2b>
 800f54c:	2300      	movs	r3, #0
 800f54e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f552:	4604      	mov	r4, r0
 800f554:	6003      	str	r3, [r0, #0]
 800f556:	f04f 0900 	mov.w	r9, #0
 800f55a:	07eb      	lsls	r3, r5, #31
 800f55c:	d50a      	bpl.n	800f574 <__pow5mult+0x84>
 800f55e:	4631      	mov	r1, r6
 800f560:	4622      	mov	r2, r4
 800f562:	4638      	mov	r0, r7
 800f564:	f7ff ff1a 	bl	800f39c <__multiply>
 800f568:	4631      	mov	r1, r6
 800f56a:	4680      	mov	r8, r0
 800f56c:	4638      	mov	r0, r7
 800f56e:	f7ff fe4b 	bl	800f208 <_Bfree>
 800f572:	4646      	mov	r6, r8
 800f574:	106d      	asrs	r5, r5, #1
 800f576:	d00b      	beq.n	800f590 <__pow5mult+0xa0>
 800f578:	6820      	ldr	r0, [r4, #0]
 800f57a:	b938      	cbnz	r0, 800f58c <__pow5mult+0x9c>
 800f57c:	4622      	mov	r2, r4
 800f57e:	4621      	mov	r1, r4
 800f580:	4638      	mov	r0, r7
 800f582:	f7ff ff0b 	bl	800f39c <__multiply>
 800f586:	6020      	str	r0, [r4, #0]
 800f588:	f8c0 9000 	str.w	r9, [r0]
 800f58c:	4604      	mov	r4, r0
 800f58e:	e7e4      	b.n	800f55a <__pow5mult+0x6a>
 800f590:	4630      	mov	r0, r6
 800f592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f596:	bf00      	nop
 800f598:	08011774 	.word	0x08011774
 800f59c:	08011699 	.word	0x08011699
 800f5a0:	08011719 	.word	0x08011719

0800f5a4 <__lshift>:
 800f5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5a8:	460c      	mov	r4, r1
 800f5aa:	6849      	ldr	r1, [r1, #4]
 800f5ac:	6923      	ldr	r3, [r4, #16]
 800f5ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f5b2:	68a3      	ldr	r3, [r4, #8]
 800f5b4:	4607      	mov	r7, r0
 800f5b6:	4691      	mov	r9, r2
 800f5b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f5bc:	f108 0601 	add.w	r6, r8, #1
 800f5c0:	42b3      	cmp	r3, r6
 800f5c2:	db0b      	blt.n	800f5dc <__lshift+0x38>
 800f5c4:	4638      	mov	r0, r7
 800f5c6:	f7ff fddf 	bl	800f188 <_Balloc>
 800f5ca:	4605      	mov	r5, r0
 800f5cc:	b948      	cbnz	r0, 800f5e2 <__lshift+0x3e>
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	4b28      	ldr	r3, [pc, #160]	@ (800f674 <__lshift+0xd0>)
 800f5d2:	4829      	ldr	r0, [pc, #164]	@ (800f678 <__lshift+0xd4>)
 800f5d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f5d8:	f000 fb86 	bl	800fce8 <__assert_func>
 800f5dc:	3101      	adds	r1, #1
 800f5de:	005b      	lsls	r3, r3, #1
 800f5e0:	e7ee      	b.n	800f5c0 <__lshift+0x1c>
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	f100 0114 	add.w	r1, r0, #20
 800f5e8:	f100 0210 	add.w	r2, r0, #16
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	4553      	cmp	r3, sl
 800f5f0:	db33      	blt.n	800f65a <__lshift+0xb6>
 800f5f2:	6920      	ldr	r0, [r4, #16]
 800f5f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f5f8:	f104 0314 	add.w	r3, r4, #20
 800f5fc:	f019 091f 	ands.w	r9, r9, #31
 800f600:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f604:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f608:	d02b      	beq.n	800f662 <__lshift+0xbe>
 800f60a:	f1c9 0e20 	rsb	lr, r9, #32
 800f60e:	468a      	mov	sl, r1
 800f610:	2200      	movs	r2, #0
 800f612:	6818      	ldr	r0, [r3, #0]
 800f614:	fa00 f009 	lsl.w	r0, r0, r9
 800f618:	4310      	orrs	r0, r2
 800f61a:	f84a 0b04 	str.w	r0, [sl], #4
 800f61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f622:	459c      	cmp	ip, r3
 800f624:	fa22 f20e 	lsr.w	r2, r2, lr
 800f628:	d8f3      	bhi.n	800f612 <__lshift+0x6e>
 800f62a:	ebac 0304 	sub.w	r3, ip, r4
 800f62e:	3b15      	subs	r3, #21
 800f630:	f023 0303 	bic.w	r3, r3, #3
 800f634:	3304      	adds	r3, #4
 800f636:	f104 0015 	add.w	r0, r4, #21
 800f63a:	4584      	cmp	ip, r0
 800f63c:	bf38      	it	cc
 800f63e:	2304      	movcc	r3, #4
 800f640:	50ca      	str	r2, [r1, r3]
 800f642:	b10a      	cbz	r2, 800f648 <__lshift+0xa4>
 800f644:	f108 0602 	add.w	r6, r8, #2
 800f648:	3e01      	subs	r6, #1
 800f64a:	4638      	mov	r0, r7
 800f64c:	612e      	str	r6, [r5, #16]
 800f64e:	4621      	mov	r1, r4
 800f650:	f7ff fdda 	bl	800f208 <_Bfree>
 800f654:	4628      	mov	r0, r5
 800f656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f65a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f65e:	3301      	adds	r3, #1
 800f660:	e7c5      	b.n	800f5ee <__lshift+0x4a>
 800f662:	3904      	subs	r1, #4
 800f664:	f853 2b04 	ldr.w	r2, [r3], #4
 800f668:	f841 2f04 	str.w	r2, [r1, #4]!
 800f66c:	459c      	cmp	ip, r3
 800f66e:	d8f9      	bhi.n	800f664 <__lshift+0xc0>
 800f670:	e7ea      	b.n	800f648 <__lshift+0xa4>
 800f672:	bf00      	nop
 800f674:	08011708 	.word	0x08011708
 800f678:	08011719 	.word	0x08011719

0800f67c <__mcmp>:
 800f67c:	690a      	ldr	r2, [r1, #16]
 800f67e:	4603      	mov	r3, r0
 800f680:	6900      	ldr	r0, [r0, #16]
 800f682:	1a80      	subs	r0, r0, r2
 800f684:	b530      	push	{r4, r5, lr}
 800f686:	d10e      	bne.n	800f6a6 <__mcmp+0x2a>
 800f688:	3314      	adds	r3, #20
 800f68a:	3114      	adds	r1, #20
 800f68c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f690:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f694:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f698:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f69c:	4295      	cmp	r5, r2
 800f69e:	d003      	beq.n	800f6a8 <__mcmp+0x2c>
 800f6a0:	d205      	bcs.n	800f6ae <__mcmp+0x32>
 800f6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a6:	bd30      	pop	{r4, r5, pc}
 800f6a8:	42a3      	cmp	r3, r4
 800f6aa:	d3f3      	bcc.n	800f694 <__mcmp+0x18>
 800f6ac:	e7fb      	b.n	800f6a6 <__mcmp+0x2a>
 800f6ae:	2001      	movs	r0, #1
 800f6b0:	e7f9      	b.n	800f6a6 <__mcmp+0x2a>
	...

0800f6b4 <__mdiff>:
 800f6b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b8:	4689      	mov	r9, r1
 800f6ba:	4606      	mov	r6, r0
 800f6bc:	4611      	mov	r1, r2
 800f6be:	4648      	mov	r0, r9
 800f6c0:	4614      	mov	r4, r2
 800f6c2:	f7ff ffdb 	bl	800f67c <__mcmp>
 800f6c6:	1e05      	subs	r5, r0, #0
 800f6c8:	d112      	bne.n	800f6f0 <__mdiff+0x3c>
 800f6ca:	4629      	mov	r1, r5
 800f6cc:	4630      	mov	r0, r6
 800f6ce:	f7ff fd5b 	bl	800f188 <_Balloc>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	b928      	cbnz	r0, 800f6e2 <__mdiff+0x2e>
 800f6d6:	4b3f      	ldr	r3, [pc, #252]	@ (800f7d4 <__mdiff+0x120>)
 800f6d8:	f240 2137 	movw	r1, #567	@ 0x237
 800f6dc:	483e      	ldr	r0, [pc, #248]	@ (800f7d8 <__mdiff+0x124>)
 800f6de:	f000 fb03 	bl	800fce8 <__assert_func>
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f6e8:	4610      	mov	r0, r2
 800f6ea:	b003      	add	sp, #12
 800f6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6f0:	bfbc      	itt	lt
 800f6f2:	464b      	movlt	r3, r9
 800f6f4:	46a1      	movlt	r9, r4
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f6fc:	bfba      	itte	lt
 800f6fe:	461c      	movlt	r4, r3
 800f700:	2501      	movlt	r5, #1
 800f702:	2500      	movge	r5, #0
 800f704:	f7ff fd40 	bl	800f188 <_Balloc>
 800f708:	4602      	mov	r2, r0
 800f70a:	b918      	cbnz	r0, 800f714 <__mdiff+0x60>
 800f70c:	4b31      	ldr	r3, [pc, #196]	@ (800f7d4 <__mdiff+0x120>)
 800f70e:	f240 2145 	movw	r1, #581	@ 0x245
 800f712:	e7e3      	b.n	800f6dc <__mdiff+0x28>
 800f714:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f718:	6926      	ldr	r6, [r4, #16]
 800f71a:	60c5      	str	r5, [r0, #12]
 800f71c:	f109 0310 	add.w	r3, r9, #16
 800f720:	f109 0514 	add.w	r5, r9, #20
 800f724:	f104 0e14 	add.w	lr, r4, #20
 800f728:	f100 0b14 	add.w	fp, r0, #20
 800f72c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f730:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f734:	9301      	str	r3, [sp, #4]
 800f736:	46d9      	mov	r9, fp
 800f738:	f04f 0c00 	mov.w	ip, #0
 800f73c:	9b01      	ldr	r3, [sp, #4]
 800f73e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f742:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f746:	9301      	str	r3, [sp, #4]
 800f748:	fa1f f38a 	uxth.w	r3, sl
 800f74c:	4619      	mov	r1, r3
 800f74e:	b283      	uxth	r3, r0
 800f750:	1acb      	subs	r3, r1, r3
 800f752:	0c00      	lsrs	r0, r0, #16
 800f754:	4463      	add	r3, ip
 800f756:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f75a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f75e:	b29b      	uxth	r3, r3
 800f760:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f764:	4576      	cmp	r6, lr
 800f766:	f849 3b04 	str.w	r3, [r9], #4
 800f76a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f76e:	d8e5      	bhi.n	800f73c <__mdiff+0x88>
 800f770:	1b33      	subs	r3, r6, r4
 800f772:	3b15      	subs	r3, #21
 800f774:	f023 0303 	bic.w	r3, r3, #3
 800f778:	3415      	adds	r4, #21
 800f77a:	3304      	adds	r3, #4
 800f77c:	42a6      	cmp	r6, r4
 800f77e:	bf38      	it	cc
 800f780:	2304      	movcc	r3, #4
 800f782:	441d      	add	r5, r3
 800f784:	445b      	add	r3, fp
 800f786:	461e      	mov	r6, r3
 800f788:	462c      	mov	r4, r5
 800f78a:	4544      	cmp	r4, r8
 800f78c:	d30e      	bcc.n	800f7ac <__mdiff+0xf8>
 800f78e:	f108 0103 	add.w	r1, r8, #3
 800f792:	1b49      	subs	r1, r1, r5
 800f794:	f021 0103 	bic.w	r1, r1, #3
 800f798:	3d03      	subs	r5, #3
 800f79a:	45a8      	cmp	r8, r5
 800f79c:	bf38      	it	cc
 800f79e:	2100      	movcc	r1, #0
 800f7a0:	440b      	add	r3, r1
 800f7a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f7a6:	b191      	cbz	r1, 800f7ce <__mdiff+0x11a>
 800f7a8:	6117      	str	r7, [r2, #16]
 800f7aa:	e79d      	b.n	800f6e8 <__mdiff+0x34>
 800f7ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800f7b0:	46e6      	mov	lr, ip
 800f7b2:	0c08      	lsrs	r0, r1, #16
 800f7b4:	fa1c fc81 	uxtah	ip, ip, r1
 800f7b8:	4471      	add	r1, lr
 800f7ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f7be:	b289      	uxth	r1, r1
 800f7c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f7c4:	f846 1b04 	str.w	r1, [r6], #4
 800f7c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f7cc:	e7dd      	b.n	800f78a <__mdiff+0xd6>
 800f7ce:	3f01      	subs	r7, #1
 800f7d0:	e7e7      	b.n	800f7a2 <__mdiff+0xee>
 800f7d2:	bf00      	nop
 800f7d4:	08011708 	.word	0x08011708
 800f7d8:	08011719 	.word	0x08011719

0800f7dc <__d2b>:
 800f7dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7e0:	460f      	mov	r7, r1
 800f7e2:	2101      	movs	r1, #1
 800f7e4:	ec59 8b10 	vmov	r8, r9, d0
 800f7e8:	4616      	mov	r6, r2
 800f7ea:	f7ff fccd 	bl	800f188 <_Balloc>
 800f7ee:	4604      	mov	r4, r0
 800f7f0:	b930      	cbnz	r0, 800f800 <__d2b+0x24>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	4b23      	ldr	r3, [pc, #140]	@ (800f884 <__d2b+0xa8>)
 800f7f6:	4824      	ldr	r0, [pc, #144]	@ (800f888 <__d2b+0xac>)
 800f7f8:	f240 310f 	movw	r1, #783	@ 0x30f
 800f7fc:	f000 fa74 	bl	800fce8 <__assert_func>
 800f800:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f804:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f808:	b10d      	cbz	r5, 800f80e <__d2b+0x32>
 800f80a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f80e:	9301      	str	r3, [sp, #4]
 800f810:	f1b8 0300 	subs.w	r3, r8, #0
 800f814:	d023      	beq.n	800f85e <__d2b+0x82>
 800f816:	4668      	mov	r0, sp
 800f818:	9300      	str	r3, [sp, #0]
 800f81a:	f7ff fd7c 	bl	800f316 <__lo0bits>
 800f81e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f822:	b1d0      	cbz	r0, 800f85a <__d2b+0x7e>
 800f824:	f1c0 0320 	rsb	r3, r0, #32
 800f828:	fa02 f303 	lsl.w	r3, r2, r3
 800f82c:	430b      	orrs	r3, r1
 800f82e:	40c2      	lsrs	r2, r0
 800f830:	6163      	str	r3, [r4, #20]
 800f832:	9201      	str	r2, [sp, #4]
 800f834:	9b01      	ldr	r3, [sp, #4]
 800f836:	61a3      	str	r3, [r4, #24]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	bf0c      	ite	eq
 800f83c:	2201      	moveq	r2, #1
 800f83e:	2202      	movne	r2, #2
 800f840:	6122      	str	r2, [r4, #16]
 800f842:	b1a5      	cbz	r5, 800f86e <__d2b+0x92>
 800f844:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f848:	4405      	add	r5, r0
 800f84a:	603d      	str	r5, [r7, #0]
 800f84c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f850:	6030      	str	r0, [r6, #0]
 800f852:	4620      	mov	r0, r4
 800f854:	b003      	add	sp, #12
 800f856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f85a:	6161      	str	r1, [r4, #20]
 800f85c:	e7ea      	b.n	800f834 <__d2b+0x58>
 800f85e:	a801      	add	r0, sp, #4
 800f860:	f7ff fd59 	bl	800f316 <__lo0bits>
 800f864:	9b01      	ldr	r3, [sp, #4]
 800f866:	6163      	str	r3, [r4, #20]
 800f868:	3020      	adds	r0, #32
 800f86a:	2201      	movs	r2, #1
 800f86c:	e7e8      	b.n	800f840 <__d2b+0x64>
 800f86e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f872:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f876:	6038      	str	r0, [r7, #0]
 800f878:	6918      	ldr	r0, [r3, #16]
 800f87a:	f7ff fd2d 	bl	800f2d8 <__hi0bits>
 800f87e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f882:	e7e5      	b.n	800f850 <__d2b+0x74>
 800f884:	08011708 	.word	0x08011708
 800f888:	08011719 	.word	0x08011719

0800f88c <__ssputs_r>:
 800f88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f890:	688e      	ldr	r6, [r1, #8]
 800f892:	461f      	mov	r7, r3
 800f894:	42be      	cmp	r6, r7
 800f896:	680b      	ldr	r3, [r1, #0]
 800f898:	4682      	mov	sl, r0
 800f89a:	460c      	mov	r4, r1
 800f89c:	4690      	mov	r8, r2
 800f89e:	d82d      	bhi.n	800f8fc <__ssputs_r+0x70>
 800f8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f8a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f8a8:	d026      	beq.n	800f8f8 <__ssputs_r+0x6c>
 800f8aa:	6965      	ldr	r5, [r4, #20]
 800f8ac:	6909      	ldr	r1, [r1, #16]
 800f8ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f8b2:	eba3 0901 	sub.w	r9, r3, r1
 800f8b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f8ba:	1c7b      	adds	r3, r7, #1
 800f8bc:	444b      	add	r3, r9
 800f8be:	106d      	asrs	r5, r5, #1
 800f8c0:	429d      	cmp	r5, r3
 800f8c2:	bf38      	it	cc
 800f8c4:	461d      	movcc	r5, r3
 800f8c6:	0553      	lsls	r3, r2, #21
 800f8c8:	d527      	bpl.n	800f91a <__ssputs_r+0x8e>
 800f8ca:	4629      	mov	r1, r5
 800f8cc:	f7ff fbd0 	bl	800f070 <_malloc_r>
 800f8d0:	4606      	mov	r6, r0
 800f8d2:	b360      	cbz	r0, 800f92e <__ssputs_r+0xa2>
 800f8d4:	6921      	ldr	r1, [r4, #16]
 800f8d6:	464a      	mov	r2, r9
 800f8d8:	f7fe fcfb 	bl	800e2d2 <memcpy>
 800f8dc:	89a3      	ldrh	r3, [r4, #12]
 800f8de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f8e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8e6:	81a3      	strh	r3, [r4, #12]
 800f8e8:	6126      	str	r6, [r4, #16]
 800f8ea:	6165      	str	r5, [r4, #20]
 800f8ec:	444e      	add	r6, r9
 800f8ee:	eba5 0509 	sub.w	r5, r5, r9
 800f8f2:	6026      	str	r6, [r4, #0]
 800f8f4:	60a5      	str	r5, [r4, #8]
 800f8f6:	463e      	mov	r6, r7
 800f8f8:	42be      	cmp	r6, r7
 800f8fa:	d900      	bls.n	800f8fe <__ssputs_r+0x72>
 800f8fc:	463e      	mov	r6, r7
 800f8fe:	6820      	ldr	r0, [r4, #0]
 800f900:	4632      	mov	r2, r6
 800f902:	4641      	mov	r1, r8
 800f904:	f000 f9c6 	bl	800fc94 <memmove>
 800f908:	68a3      	ldr	r3, [r4, #8]
 800f90a:	1b9b      	subs	r3, r3, r6
 800f90c:	60a3      	str	r3, [r4, #8]
 800f90e:	6823      	ldr	r3, [r4, #0]
 800f910:	4433      	add	r3, r6
 800f912:	6023      	str	r3, [r4, #0]
 800f914:	2000      	movs	r0, #0
 800f916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f91a:	462a      	mov	r2, r5
 800f91c:	f000 fa28 	bl	800fd70 <_realloc_r>
 800f920:	4606      	mov	r6, r0
 800f922:	2800      	cmp	r0, #0
 800f924:	d1e0      	bne.n	800f8e8 <__ssputs_r+0x5c>
 800f926:	6921      	ldr	r1, [r4, #16]
 800f928:	4650      	mov	r0, sl
 800f92a:	f7ff fb2d 	bl	800ef88 <_free_r>
 800f92e:	230c      	movs	r3, #12
 800f930:	f8ca 3000 	str.w	r3, [sl]
 800f934:	89a3      	ldrh	r3, [r4, #12]
 800f936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f93a:	81a3      	strh	r3, [r4, #12]
 800f93c:	f04f 30ff 	mov.w	r0, #4294967295
 800f940:	e7e9      	b.n	800f916 <__ssputs_r+0x8a>
	...

0800f944 <_svfiprintf_r>:
 800f944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f948:	4698      	mov	r8, r3
 800f94a:	898b      	ldrh	r3, [r1, #12]
 800f94c:	061b      	lsls	r3, r3, #24
 800f94e:	b09d      	sub	sp, #116	@ 0x74
 800f950:	4607      	mov	r7, r0
 800f952:	460d      	mov	r5, r1
 800f954:	4614      	mov	r4, r2
 800f956:	d510      	bpl.n	800f97a <_svfiprintf_r+0x36>
 800f958:	690b      	ldr	r3, [r1, #16]
 800f95a:	b973      	cbnz	r3, 800f97a <_svfiprintf_r+0x36>
 800f95c:	2140      	movs	r1, #64	@ 0x40
 800f95e:	f7ff fb87 	bl	800f070 <_malloc_r>
 800f962:	6028      	str	r0, [r5, #0]
 800f964:	6128      	str	r0, [r5, #16]
 800f966:	b930      	cbnz	r0, 800f976 <_svfiprintf_r+0x32>
 800f968:	230c      	movs	r3, #12
 800f96a:	603b      	str	r3, [r7, #0]
 800f96c:	f04f 30ff 	mov.w	r0, #4294967295
 800f970:	b01d      	add	sp, #116	@ 0x74
 800f972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f976:	2340      	movs	r3, #64	@ 0x40
 800f978:	616b      	str	r3, [r5, #20]
 800f97a:	2300      	movs	r3, #0
 800f97c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f97e:	2320      	movs	r3, #32
 800f980:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f984:	f8cd 800c 	str.w	r8, [sp, #12]
 800f988:	2330      	movs	r3, #48	@ 0x30
 800f98a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fb28 <_svfiprintf_r+0x1e4>
 800f98e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f992:	f04f 0901 	mov.w	r9, #1
 800f996:	4623      	mov	r3, r4
 800f998:	469a      	mov	sl, r3
 800f99a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f99e:	b10a      	cbz	r2, 800f9a4 <_svfiprintf_r+0x60>
 800f9a0:	2a25      	cmp	r2, #37	@ 0x25
 800f9a2:	d1f9      	bne.n	800f998 <_svfiprintf_r+0x54>
 800f9a4:	ebba 0b04 	subs.w	fp, sl, r4
 800f9a8:	d00b      	beq.n	800f9c2 <_svfiprintf_r+0x7e>
 800f9aa:	465b      	mov	r3, fp
 800f9ac:	4622      	mov	r2, r4
 800f9ae:	4629      	mov	r1, r5
 800f9b0:	4638      	mov	r0, r7
 800f9b2:	f7ff ff6b 	bl	800f88c <__ssputs_r>
 800f9b6:	3001      	adds	r0, #1
 800f9b8:	f000 80a7 	beq.w	800fb0a <_svfiprintf_r+0x1c6>
 800f9bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9be:	445a      	add	r2, fp
 800f9c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f9c2:	f89a 3000 	ldrb.w	r3, [sl]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	f000 809f 	beq.w	800fb0a <_svfiprintf_r+0x1c6>
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f9d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9d6:	f10a 0a01 	add.w	sl, sl, #1
 800f9da:	9304      	str	r3, [sp, #16]
 800f9dc:	9307      	str	r3, [sp, #28]
 800f9de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f9e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f9e4:	4654      	mov	r4, sl
 800f9e6:	2205      	movs	r2, #5
 800f9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9ec:	484e      	ldr	r0, [pc, #312]	@ (800fb28 <_svfiprintf_r+0x1e4>)
 800f9ee:	f7f0 fc27 	bl	8000240 <memchr>
 800f9f2:	9a04      	ldr	r2, [sp, #16]
 800f9f4:	b9d8      	cbnz	r0, 800fa2e <_svfiprintf_r+0xea>
 800f9f6:	06d0      	lsls	r0, r2, #27
 800f9f8:	bf44      	itt	mi
 800f9fa:	2320      	movmi	r3, #32
 800f9fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa00:	0711      	lsls	r1, r2, #28
 800fa02:	bf44      	itt	mi
 800fa04:	232b      	movmi	r3, #43	@ 0x2b
 800fa06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa0a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa10:	d015      	beq.n	800fa3e <_svfiprintf_r+0xfa>
 800fa12:	9a07      	ldr	r2, [sp, #28]
 800fa14:	4654      	mov	r4, sl
 800fa16:	2000      	movs	r0, #0
 800fa18:	f04f 0c0a 	mov.w	ip, #10
 800fa1c:	4621      	mov	r1, r4
 800fa1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa22:	3b30      	subs	r3, #48	@ 0x30
 800fa24:	2b09      	cmp	r3, #9
 800fa26:	d94b      	bls.n	800fac0 <_svfiprintf_r+0x17c>
 800fa28:	b1b0      	cbz	r0, 800fa58 <_svfiprintf_r+0x114>
 800fa2a:	9207      	str	r2, [sp, #28]
 800fa2c:	e014      	b.n	800fa58 <_svfiprintf_r+0x114>
 800fa2e:	eba0 0308 	sub.w	r3, r0, r8
 800fa32:	fa09 f303 	lsl.w	r3, r9, r3
 800fa36:	4313      	orrs	r3, r2
 800fa38:	9304      	str	r3, [sp, #16]
 800fa3a:	46a2      	mov	sl, r4
 800fa3c:	e7d2      	b.n	800f9e4 <_svfiprintf_r+0xa0>
 800fa3e:	9b03      	ldr	r3, [sp, #12]
 800fa40:	1d19      	adds	r1, r3, #4
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	9103      	str	r1, [sp, #12]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	bfbb      	ittet	lt
 800fa4a:	425b      	neglt	r3, r3
 800fa4c:	f042 0202 	orrlt.w	r2, r2, #2
 800fa50:	9307      	strge	r3, [sp, #28]
 800fa52:	9307      	strlt	r3, [sp, #28]
 800fa54:	bfb8      	it	lt
 800fa56:	9204      	strlt	r2, [sp, #16]
 800fa58:	7823      	ldrb	r3, [r4, #0]
 800fa5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa5c:	d10a      	bne.n	800fa74 <_svfiprintf_r+0x130>
 800fa5e:	7863      	ldrb	r3, [r4, #1]
 800fa60:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa62:	d132      	bne.n	800faca <_svfiprintf_r+0x186>
 800fa64:	9b03      	ldr	r3, [sp, #12]
 800fa66:	1d1a      	adds	r2, r3, #4
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	9203      	str	r2, [sp, #12]
 800fa6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fa70:	3402      	adds	r4, #2
 800fa72:	9305      	str	r3, [sp, #20]
 800fa74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fb38 <_svfiprintf_r+0x1f4>
 800fa78:	7821      	ldrb	r1, [r4, #0]
 800fa7a:	2203      	movs	r2, #3
 800fa7c:	4650      	mov	r0, sl
 800fa7e:	f7f0 fbdf 	bl	8000240 <memchr>
 800fa82:	b138      	cbz	r0, 800fa94 <_svfiprintf_r+0x150>
 800fa84:	9b04      	ldr	r3, [sp, #16]
 800fa86:	eba0 000a 	sub.w	r0, r0, sl
 800fa8a:	2240      	movs	r2, #64	@ 0x40
 800fa8c:	4082      	lsls	r2, r0
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	3401      	adds	r4, #1
 800fa92:	9304      	str	r3, [sp, #16]
 800fa94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa98:	4824      	ldr	r0, [pc, #144]	@ (800fb2c <_svfiprintf_r+0x1e8>)
 800fa9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa9e:	2206      	movs	r2, #6
 800faa0:	f7f0 fbce 	bl	8000240 <memchr>
 800faa4:	2800      	cmp	r0, #0
 800faa6:	d036      	beq.n	800fb16 <_svfiprintf_r+0x1d2>
 800faa8:	4b21      	ldr	r3, [pc, #132]	@ (800fb30 <_svfiprintf_r+0x1ec>)
 800faaa:	bb1b      	cbnz	r3, 800faf4 <_svfiprintf_r+0x1b0>
 800faac:	9b03      	ldr	r3, [sp, #12]
 800faae:	3307      	adds	r3, #7
 800fab0:	f023 0307 	bic.w	r3, r3, #7
 800fab4:	3308      	adds	r3, #8
 800fab6:	9303      	str	r3, [sp, #12]
 800fab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faba:	4433      	add	r3, r6
 800fabc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fabe:	e76a      	b.n	800f996 <_svfiprintf_r+0x52>
 800fac0:	fb0c 3202 	mla	r2, ip, r2, r3
 800fac4:	460c      	mov	r4, r1
 800fac6:	2001      	movs	r0, #1
 800fac8:	e7a8      	b.n	800fa1c <_svfiprintf_r+0xd8>
 800faca:	2300      	movs	r3, #0
 800facc:	3401      	adds	r4, #1
 800face:	9305      	str	r3, [sp, #20]
 800fad0:	4619      	mov	r1, r3
 800fad2:	f04f 0c0a 	mov.w	ip, #10
 800fad6:	4620      	mov	r0, r4
 800fad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fadc:	3a30      	subs	r2, #48	@ 0x30
 800fade:	2a09      	cmp	r2, #9
 800fae0:	d903      	bls.n	800faea <_svfiprintf_r+0x1a6>
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d0c6      	beq.n	800fa74 <_svfiprintf_r+0x130>
 800fae6:	9105      	str	r1, [sp, #20]
 800fae8:	e7c4      	b.n	800fa74 <_svfiprintf_r+0x130>
 800faea:	fb0c 2101 	mla	r1, ip, r1, r2
 800faee:	4604      	mov	r4, r0
 800faf0:	2301      	movs	r3, #1
 800faf2:	e7f0      	b.n	800fad6 <_svfiprintf_r+0x192>
 800faf4:	ab03      	add	r3, sp, #12
 800faf6:	9300      	str	r3, [sp, #0]
 800faf8:	462a      	mov	r2, r5
 800fafa:	4b0e      	ldr	r3, [pc, #56]	@ (800fb34 <_svfiprintf_r+0x1f0>)
 800fafc:	a904      	add	r1, sp, #16
 800fafe:	4638      	mov	r0, r7
 800fb00:	f7fd fe08 	bl	800d714 <_printf_float>
 800fb04:	1c42      	adds	r2, r0, #1
 800fb06:	4606      	mov	r6, r0
 800fb08:	d1d6      	bne.n	800fab8 <_svfiprintf_r+0x174>
 800fb0a:	89ab      	ldrh	r3, [r5, #12]
 800fb0c:	065b      	lsls	r3, r3, #25
 800fb0e:	f53f af2d 	bmi.w	800f96c <_svfiprintf_r+0x28>
 800fb12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb14:	e72c      	b.n	800f970 <_svfiprintf_r+0x2c>
 800fb16:	ab03      	add	r3, sp, #12
 800fb18:	9300      	str	r3, [sp, #0]
 800fb1a:	462a      	mov	r2, r5
 800fb1c:	4b05      	ldr	r3, [pc, #20]	@ (800fb34 <_svfiprintf_r+0x1f0>)
 800fb1e:	a904      	add	r1, sp, #16
 800fb20:	4638      	mov	r0, r7
 800fb22:	f7fe f88f 	bl	800dc44 <_printf_i>
 800fb26:	e7ed      	b.n	800fb04 <_svfiprintf_r+0x1c0>
 800fb28:	08011870 	.word	0x08011870
 800fb2c:	0801187a 	.word	0x0801187a
 800fb30:	0800d715 	.word	0x0800d715
 800fb34:	0800f88d 	.word	0x0800f88d
 800fb38:	08011876 	.word	0x08011876

0800fb3c <__sflush_r>:
 800fb3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb44:	0716      	lsls	r6, r2, #28
 800fb46:	4605      	mov	r5, r0
 800fb48:	460c      	mov	r4, r1
 800fb4a:	d454      	bmi.n	800fbf6 <__sflush_r+0xba>
 800fb4c:	684b      	ldr	r3, [r1, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	dc02      	bgt.n	800fb58 <__sflush_r+0x1c>
 800fb52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	dd48      	ble.n	800fbea <__sflush_r+0xae>
 800fb58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb5a:	2e00      	cmp	r6, #0
 800fb5c:	d045      	beq.n	800fbea <__sflush_r+0xae>
 800fb5e:	2300      	movs	r3, #0
 800fb60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fb64:	682f      	ldr	r7, [r5, #0]
 800fb66:	6a21      	ldr	r1, [r4, #32]
 800fb68:	602b      	str	r3, [r5, #0]
 800fb6a:	d030      	beq.n	800fbce <__sflush_r+0x92>
 800fb6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fb6e:	89a3      	ldrh	r3, [r4, #12]
 800fb70:	0759      	lsls	r1, r3, #29
 800fb72:	d505      	bpl.n	800fb80 <__sflush_r+0x44>
 800fb74:	6863      	ldr	r3, [r4, #4]
 800fb76:	1ad2      	subs	r2, r2, r3
 800fb78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fb7a:	b10b      	cbz	r3, 800fb80 <__sflush_r+0x44>
 800fb7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fb7e:	1ad2      	subs	r2, r2, r3
 800fb80:	2300      	movs	r3, #0
 800fb82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb84:	6a21      	ldr	r1, [r4, #32]
 800fb86:	4628      	mov	r0, r5
 800fb88:	47b0      	blx	r6
 800fb8a:	1c43      	adds	r3, r0, #1
 800fb8c:	89a3      	ldrh	r3, [r4, #12]
 800fb8e:	d106      	bne.n	800fb9e <__sflush_r+0x62>
 800fb90:	6829      	ldr	r1, [r5, #0]
 800fb92:	291d      	cmp	r1, #29
 800fb94:	d82b      	bhi.n	800fbee <__sflush_r+0xb2>
 800fb96:	4a2a      	ldr	r2, [pc, #168]	@ (800fc40 <__sflush_r+0x104>)
 800fb98:	410a      	asrs	r2, r1
 800fb9a:	07d6      	lsls	r6, r2, #31
 800fb9c:	d427      	bmi.n	800fbee <__sflush_r+0xb2>
 800fb9e:	2200      	movs	r2, #0
 800fba0:	6062      	str	r2, [r4, #4]
 800fba2:	04d9      	lsls	r1, r3, #19
 800fba4:	6922      	ldr	r2, [r4, #16]
 800fba6:	6022      	str	r2, [r4, #0]
 800fba8:	d504      	bpl.n	800fbb4 <__sflush_r+0x78>
 800fbaa:	1c42      	adds	r2, r0, #1
 800fbac:	d101      	bne.n	800fbb2 <__sflush_r+0x76>
 800fbae:	682b      	ldr	r3, [r5, #0]
 800fbb0:	b903      	cbnz	r3, 800fbb4 <__sflush_r+0x78>
 800fbb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800fbb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fbb6:	602f      	str	r7, [r5, #0]
 800fbb8:	b1b9      	cbz	r1, 800fbea <__sflush_r+0xae>
 800fbba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fbbe:	4299      	cmp	r1, r3
 800fbc0:	d002      	beq.n	800fbc8 <__sflush_r+0x8c>
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	f7ff f9e0 	bl	800ef88 <_free_r>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	6363      	str	r3, [r4, #52]	@ 0x34
 800fbcc:	e00d      	b.n	800fbea <__sflush_r+0xae>
 800fbce:	2301      	movs	r3, #1
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	47b0      	blx	r6
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	1c50      	adds	r0, r2, #1
 800fbd8:	d1c9      	bne.n	800fb6e <__sflush_r+0x32>
 800fbda:	682b      	ldr	r3, [r5, #0]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d0c6      	beq.n	800fb6e <__sflush_r+0x32>
 800fbe0:	2b1d      	cmp	r3, #29
 800fbe2:	d001      	beq.n	800fbe8 <__sflush_r+0xac>
 800fbe4:	2b16      	cmp	r3, #22
 800fbe6:	d11e      	bne.n	800fc26 <__sflush_r+0xea>
 800fbe8:	602f      	str	r7, [r5, #0]
 800fbea:	2000      	movs	r0, #0
 800fbec:	e022      	b.n	800fc34 <__sflush_r+0xf8>
 800fbee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbf2:	b21b      	sxth	r3, r3
 800fbf4:	e01b      	b.n	800fc2e <__sflush_r+0xf2>
 800fbf6:	690f      	ldr	r7, [r1, #16]
 800fbf8:	2f00      	cmp	r7, #0
 800fbfa:	d0f6      	beq.n	800fbea <__sflush_r+0xae>
 800fbfc:	0793      	lsls	r3, r2, #30
 800fbfe:	680e      	ldr	r6, [r1, #0]
 800fc00:	bf08      	it	eq
 800fc02:	694b      	ldreq	r3, [r1, #20]
 800fc04:	600f      	str	r7, [r1, #0]
 800fc06:	bf18      	it	ne
 800fc08:	2300      	movne	r3, #0
 800fc0a:	eba6 0807 	sub.w	r8, r6, r7
 800fc0e:	608b      	str	r3, [r1, #8]
 800fc10:	f1b8 0f00 	cmp.w	r8, #0
 800fc14:	dde9      	ble.n	800fbea <__sflush_r+0xae>
 800fc16:	6a21      	ldr	r1, [r4, #32]
 800fc18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fc1a:	4643      	mov	r3, r8
 800fc1c:	463a      	mov	r2, r7
 800fc1e:	4628      	mov	r0, r5
 800fc20:	47b0      	blx	r6
 800fc22:	2800      	cmp	r0, #0
 800fc24:	dc08      	bgt.n	800fc38 <__sflush_r+0xfc>
 800fc26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc2e:	81a3      	strh	r3, [r4, #12]
 800fc30:	f04f 30ff 	mov.w	r0, #4294967295
 800fc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc38:	4407      	add	r7, r0
 800fc3a:	eba8 0800 	sub.w	r8, r8, r0
 800fc3e:	e7e7      	b.n	800fc10 <__sflush_r+0xd4>
 800fc40:	dfbffffe 	.word	0xdfbffffe

0800fc44 <_fflush_r>:
 800fc44:	b538      	push	{r3, r4, r5, lr}
 800fc46:	690b      	ldr	r3, [r1, #16]
 800fc48:	4605      	mov	r5, r0
 800fc4a:	460c      	mov	r4, r1
 800fc4c:	b913      	cbnz	r3, 800fc54 <_fflush_r+0x10>
 800fc4e:	2500      	movs	r5, #0
 800fc50:	4628      	mov	r0, r5
 800fc52:	bd38      	pop	{r3, r4, r5, pc}
 800fc54:	b118      	cbz	r0, 800fc5e <_fflush_r+0x1a>
 800fc56:	6a03      	ldr	r3, [r0, #32]
 800fc58:	b90b      	cbnz	r3, 800fc5e <_fflush_r+0x1a>
 800fc5a:	f7fe f99f 	bl	800df9c <__sinit>
 800fc5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d0f3      	beq.n	800fc4e <_fflush_r+0xa>
 800fc66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fc68:	07d0      	lsls	r0, r2, #31
 800fc6a:	d404      	bmi.n	800fc76 <_fflush_r+0x32>
 800fc6c:	0599      	lsls	r1, r3, #22
 800fc6e:	d402      	bmi.n	800fc76 <_fflush_r+0x32>
 800fc70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc72:	f7fe fb24 	bl	800e2be <__retarget_lock_acquire_recursive>
 800fc76:	4628      	mov	r0, r5
 800fc78:	4621      	mov	r1, r4
 800fc7a:	f7ff ff5f 	bl	800fb3c <__sflush_r>
 800fc7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc80:	07da      	lsls	r2, r3, #31
 800fc82:	4605      	mov	r5, r0
 800fc84:	d4e4      	bmi.n	800fc50 <_fflush_r+0xc>
 800fc86:	89a3      	ldrh	r3, [r4, #12]
 800fc88:	059b      	lsls	r3, r3, #22
 800fc8a:	d4e1      	bmi.n	800fc50 <_fflush_r+0xc>
 800fc8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc8e:	f7fe fb17 	bl	800e2c0 <__retarget_lock_release_recursive>
 800fc92:	e7dd      	b.n	800fc50 <_fflush_r+0xc>

0800fc94 <memmove>:
 800fc94:	4288      	cmp	r0, r1
 800fc96:	b510      	push	{r4, lr}
 800fc98:	eb01 0402 	add.w	r4, r1, r2
 800fc9c:	d902      	bls.n	800fca4 <memmove+0x10>
 800fc9e:	4284      	cmp	r4, r0
 800fca0:	4623      	mov	r3, r4
 800fca2:	d807      	bhi.n	800fcb4 <memmove+0x20>
 800fca4:	1e43      	subs	r3, r0, #1
 800fca6:	42a1      	cmp	r1, r4
 800fca8:	d008      	beq.n	800fcbc <memmove+0x28>
 800fcaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fcb2:	e7f8      	b.n	800fca6 <memmove+0x12>
 800fcb4:	4402      	add	r2, r0
 800fcb6:	4601      	mov	r1, r0
 800fcb8:	428a      	cmp	r2, r1
 800fcba:	d100      	bne.n	800fcbe <memmove+0x2a>
 800fcbc:	bd10      	pop	{r4, pc}
 800fcbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fcc6:	e7f7      	b.n	800fcb8 <memmove+0x24>

0800fcc8 <_sbrk_r>:
 800fcc8:	b538      	push	{r3, r4, r5, lr}
 800fcca:	4d06      	ldr	r5, [pc, #24]	@ (800fce4 <_sbrk_r+0x1c>)
 800fccc:	2300      	movs	r3, #0
 800fcce:	4604      	mov	r4, r0
 800fcd0:	4608      	mov	r0, r1
 800fcd2:	602b      	str	r3, [r5, #0]
 800fcd4:	f7f2 fd8e 	bl	80027f4 <_sbrk>
 800fcd8:	1c43      	adds	r3, r0, #1
 800fcda:	d102      	bne.n	800fce2 <_sbrk_r+0x1a>
 800fcdc:	682b      	ldr	r3, [r5, #0]
 800fcde:	b103      	cbz	r3, 800fce2 <_sbrk_r+0x1a>
 800fce0:	6023      	str	r3, [r4, #0]
 800fce2:	bd38      	pop	{r3, r4, r5, pc}
 800fce4:	200079a0 	.word	0x200079a0

0800fce8 <__assert_func>:
 800fce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcea:	4614      	mov	r4, r2
 800fcec:	461a      	mov	r2, r3
 800fcee:	4b09      	ldr	r3, [pc, #36]	@ (800fd14 <__assert_func+0x2c>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4605      	mov	r5, r0
 800fcf4:	68d8      	ldr	r0, [r3, #12]
 800fcf6:	b954      	cbnz	r4, 800fd0e <__assert_func+0x26>
 800fcf8:	4b07      	ldr	r3, [pc, #28]	@ (800fd18 <__assert_func+0x30>)
 800fcfa:	461c      	mov	r4, r3
 800fcfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd00:	9100      	str	r1, [sp, #0]
 800fd02:	462b      	mov	r3, r5
 800fd04:	4905      	ldr	r1, [pc, #20]	@ (800fd1c <__assert_func+0x34>)
 800fd06:	f000 f86f 	bl	800fde8 <fiprintf>
 800fd0a:	f000 f87f 	bl	800fe0c <abort>
 800fd0e:	4b04      	ldr	r3, [pc, #16]	@ (800fd20 <__assert_func+0x38>)
 800fd10:	e7f4      	b.n	800fcfc <__assert_func+0x14>
 800fd12:	bf00      	nop
 800fd14:	20000430 	.word	0x20000430
 800fd18:	080118c6 	.word	0x080118c6
 800fd1c:	08011898 	.word	0x08011898
 800fd20:	0801188b 	.word	0x0801188b

0800fd24 <_calloc_r>:
 800fd24:	b570      	push	{r4, r5, r6, lr}
 800fd26:	fba1 5402 	umull	r5, r4, r1, r2
 800fd2a:	b93c      	cbnz	r4, 800fd3c <_calloc_r+0x18>
 800fd2c:	4629      	mov	r1, r5
 800fd2e:	f7ff f99f 	bl	800f070 <_malloc_r>
 800fd32:	4606      	mov	r6, r0
 800fd34:	b928      	cbnz	r0, 800fd42 <_calloc_r+0x1e>
 800fd36:	2600      	movs	r6, #0
 800fd38:	4630      	mov	r0, r6
 800fd3a:	bd70      	pop	{r4, r5, r6, pc}
 800fd3c:	220c      	movs	r2, #12
 800fd3e:	6002      	str	r2, [r0, #0]
 800fd40:	e7f9      	b.n	800fd36 <_calloc_r+0x12>
 800fd42:	462a      	mov	r2, r5
 800fd44:	4621      	mov	r1, r4
 800fd46:	f7fe f9c2 	bl	800e0ce <memset>
 800fd4a:	e7f5      	b.n	800fd38 <_calloc_r+0x14>

0800fd4c <__ascii_mbtowc>:
 800fd4c:	b082      	sub	sp, #8
 800fd4e:	b901      	cbnz	r1, 800fd52 <__ascii_mbtowc+0x6>
 800fd50:	a901      	add	r1, sp, #4
 800fd52:	b142      	cbz	r2, 800fd66 <__ascii_mbtowc+0x1a>
 800fd54:	b14b      	cbz	r3, 800fd6a <__ascii_mbtowc+0x1e>
 800fd56:	7813      	ldrb	r3, [r2, #0]
 800fd58:	600b      	str	r3, [r1, #0]
 800fd5a:	7812      	ldrb	r2, [r2, #0]
 800fd5c:	1e10      	subs	r0, r2, #0
 800fd5e:	bf18      	it	ne
 800fd60:	2001      	movne	r0, #1
 800fd62:	b002      	add	sp, #8
 800fd64:	4770      	bx	lr
 800fd66:	4610      	mov	r0, r2
 800fd68:	e7fb      	b.n	800fd62 <__ascii_mbtowc+0x16>
 800fd6a:	f06f 0001 	mvn.w	r0, #1
 800fd6e:	e7f8      	b.n	800fd62 <__ascii_mbtowc+0x16>

0800fd70 <_realloc_r>:
 800fd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd74:	4680      	mov	r8, r0
 800fd76:	4615      	mov	r5, r2
 800fd78:	460c      	mov	r4, r1
 800fd7a:	b921      	cbnz	r1, 800fd86 <_realloc_r+0x16>
 800fd7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd80:	4611      	mov	r1, r2
 800fd82:	f7ff b975 	b.w	800f070 <_malloc_r>
 800fd86:	b92a      	cbnz	r2, 800fd94 <_realloc_r+0x24>
 800fd88:	f7ff f8fe 	bl	800ef88 <_free_r>
 800fd8c:	2400      	movs	r4, #0
 800fd8e:	4620      	mov	r0, r4
 800fd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd94:	f000 f841 	bl	800fe1a <_malloc_usable_size_r>
 800fd98:	4285      	cmp	r5, r0
 800fd9a:	4606      	mov	r6, r0
 800fd9c:	d802      	bhi.n	800fda4 <_realloc_r+0x34>
 800fd9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fda2:	d8f4      	bhi.n	800fd8e <_realloc_r+0x1e>
 800fda4:	4629      	mov	r1, r5
 800fda6:	4640      	mov	r0, r8
 800fda8:	f7ff f962 	bl	800f070 <_malloc_r>
 800fdac:	4607      	mov	r7, r0
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	d0ec      	beq.n	800fd8c <_realloc_r+0x1c>
 800fdb2:	42b5      	cmp	r5, r6
 800fdb4:	462a      	mov	r2, r5
 800fdb6:	4621      	mov	r1, r4
 800fdb8:	bf28      	it	cs
 800fdba:	4632      	movcs	r2, r6
 800fdbc:	f7fe fa89 	bl	800e2d2 <memcpy>
 800fdc0:	4621      	mov	r1, r4
 800fdc2:	4640      	mov	r0, r8
 800fdc4:	f7ff f8e0 	bl	800ef88 <_free_r>
 800fdc8:	463c      	mov	r4, r7
 800fdca:	e7e0      	b.n	800fd8e <_realloc_r+0x1e>

0800fdcc <__ascii_wctomb>:
 800fdcc:	4603      	mov	r3, r0
 800fdce:	4608      	mov	r0, r1
 800fdd0:	b141      	cbz	r1, 800fde4 <__ascii_wctomb+0x18>
 800fdd2:	2aff      	cmp	r2, #255	@ 0xff
 800fdd4:	d904      	bls.n	800fde0 <__ascii_wctomb+0x14>
 800fdd6:	228a      	movs	r2, #138	@ 0x8a
 800fdd8:	601a      	str	r2, [r3, #0]
 800fdda:	f04f 30ff 	mov.w	r0, #4294967295
 800fdde:	4770      	bx	lr
 800fde0:	700a      	strb	r2, [r1, #0]
 800fde2:	2001      	movs	r0, #1
 800fde4:	4770      	bx	lr
	...

0800fde8 <fiprintf>:
 800fde8:	b40e      	push	{r1, r2, r3}
 800fdea:	b503      	push	{r0, r1, lr}
 800fdec:	4601      	mov	r1, r0
 800fdee:	ab03      	add	r3, sp, #12
 800fdf0:	4805      	ldr	r0, [pc, #20]	@ (800fe08 <fiprintf+0x20>)
 800fdf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdf6:	6800      	ldr	r0, [r0, #0]
 800fdf8:	9301      	str	r3, [sp, #4]
 800fdfa:	f000 f83f 	bl	800fe7c <_vfiprintf_r>
 800fdfe:	b002      	add	sp, #8
 800fe00:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe04:	b003      	add	sp, #12
 800fe06:	4770      	bx	lr
 800fe08:	20000430 	.word	0x20000430

0800fe0c <abort>:
 800fe0c:	b508      	push	{r3, lr}
 800fe0e:	2006      	movs	r0, #6
 800fe10:	f000 fa08 	bl	8010224 <raise>
 800fe14:	2001      	movs	r0, #1
 800fe16:	f7f2 fc75 	bl	8002704 <_exit>

0800fe1a <_malloc_usable_size_r>:
 800fe1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe1e:	1f18      	subs	r0, r3, #4
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	bfbc      	itt	lt
 800fe24:	580b      	ldrlt	r3, [r1, r0]
 800fe26:	18c0      	addlt	r0, r0, r3
 800fe28:	4770      	bx	lr

0800fe2a <__sfputc_r>:
 800fe2a:	6893      	ldr	r3, [r2, #8]
 800fe2c:	3b01      	subs	r3, #1
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	b410      	push	{r4}
 800fe32:	6093      	str	r3, [r2, #8]
 800fe34:	da08      	bge.n	800fe48 <__sfputc_r+0x1e>
 800fe36:	6994      	ldr	r4, [r2, #24]
 800fe38:	42a3      	cmp	r3, r4
 800fe3a:	db01      	blt.n	800fe40 <__sfputc_r+0x16>
 800fe3c:	290a      	cmp	r1, #10
 800fe3e:	d103      	bne.n	800fe48 <__sfputc_r+0x1e>
 800fe40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe44:	f000 b932 	b.w	80100ac <__swbuf_r>
 800fe48:	6813      	ldr	r3, [r2, #0]
 800fe4a:	1c58      	adds	r0, r3, #1
 800fe4c:	6010      	str	r0, [r2, #0]
 800fe4e:	7019      	strb	r1, [r3, #0]
 800fe50:	4608      	mov	r0, r1
 800fe52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe56:	4770      	bx	lr

0800fe58 <__sfputs_r>:
 800fe58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe5a:	4606      	mov	r6, r0
 800fe5c:	460f      	mov	r7, r1
 800fe5e:	4614      	mov	r4, r2
 800fe60:	18d5      	adds	r5, r2, r3
 800fe62:	42ac      	cmp	r4, r5
 800fe64:	d101      	bne.n	800fe6a <__sfputs_r+0x12>
 800fe66:	2000      	movs	r0, #0
 800fe68:	e007      	b.n	800fe7a <__sfputs_r+0x22>
 800fe6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe6e:	463a      	mov	r2, r7
 800fe70:	4630      	mov	r0, r6
 800fe72:	f7ff ffda 	bl	800fe2a <__sfputc_r>
 800fe76:	1c43      	adds	r3, r0, #1
 800fe78:	d1f3      	bne.n	800fe62 <__sfputs_r+0xa>
 800fe7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fe7c <_vfiprintf_r>:
 800fe7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe80:	460d      	mov	r5, r1
 800fe82:	b09d      	sub	sp, #116	@ 0x74
 800fe84:	4614      	mov	r4, r2
 800fe86:	4698      	mov	r8, r3
 800fe88:	4606      	mov	r6, r0
 800fe8a:	b118      	cbz	r0, 800fe94 <_vfiprintf_r+0x18>
 800fe8c:	6a03      	ldr	r3, [r0, #32]
 800fe8e:	b90b      	cbnz	r3, 800fe94 <_vfiprintf_r+0x18>
 800fe90:	f7fe f884 	bl	800df9c <__sinit>
 800fe94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fe96:	07d9      	lsls	r1, r3, #31
 800fe98:	d405      	bmi.n	800fea6 <_vfiprintf_r+0x2a>
 800fe9a:	89ab      	ldrh	r3, [r5, #12]
 800fe9c:	059a      	lsls	r2, r3, #22
 800fe9e:	d402      	bmi.n	800fea6 <_vfiprintf_r+0x2a>
 800fea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fea2:	f7fe fa0c 	bl	800e2be <__retarget_lock_acquire_recursive>
 800fea6:	89ab      	ldrh	r3, [r5, #12]
 800fea8:	071b      	lsls	r3, r3, #28
 800feaa:	d501      	bpl.n	800feb0 <_vfiprintf_r+0x34>
 800feac:	692b      	ldr	r3, [r5, #16]
 800feae:	b99b      	cbnz	r3, 800fed8 <_vfiprintf_r+0x5c>
 800feb0:	4629      	mov	r1, r5
 800feb2:	4630      	mov	r0, r6
 800feb4:	f000 f938 	bl	8010128 <__swsetup_r>
 800feb8:	b170      	cbz	r0, 800fed8 <_vfiprintf_r+0x5c>
 800feba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800febc:	07dc      	lsls	r4, r3, #31
 800febe:	d504      	bpl.n	800feca <_vfiprintf_r+0x4e>
 800fec0:	f04f 30ff 	mov.w	r0, #4294967295
 800fec4:	b01d      	add	sp, #116	@ 0x74
 800fec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feca:	89ab      	ldrh	r3, [r5, #12]
 800fecc:	0598      	lsls	r0, r3, #22
 800fece:	d4f7      	bmi.n	800fec0 <_vfiprintf_r+0x44>
 800fed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fed2:	f7fe f9f5 	bl	800e2c0 <__retarget_lock_release_recursive>
 800fed6:	e7f3      	b.n	800fec0 <_vfiprintf_r+0x44>
 800fed8:	2300      	movs	r3, #0
 800feda:	9309      	str	r3, [sp, #36]	@ 0x24
 800fedc:	2320      	movs	r3, #32
 800fede:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fee2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fee6:	2330      	movs	r3, #48	@ 0x30
 800fee8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010098 <_vfiprintf_r+0x21c>
 800feec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fef0:	f04f 0901 	mov.w	r9, #1
 800fef4:	4623      	mov	r3, r4
 800fef6:	469a      	mov	sl, r3
 800fef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fefc:	b10a      	cbz	r2, 800ff02 <_vfiprintf_r+0x86>
 800fefe:	2a25      	cmp	r2, #37	@ 0x25
 800ff00:	d1f9      	bne.n	800fef6 <_vfiprintf_r+0x7a>
 800ff02:	ebba 0b04 	subs.w	fp, sl, r4
 800ff06:	d00b      	beq.n	800ff20 <_vfiprintf_r+0xa4>
 800ff08:	465b      	mov	r3, fp
 800ff0a:	4622      	mov	r2, r4
 800ff0c:	4629      	mov	r1, r5
 800ff0e:	4630      	mov	r0, r6
 800ff10:	f7ff ffa2 	bl	800fe58 <__sfputs_r>
 800ff14:	3001      	adds	r0, #1
 800ff16:	f000 80a7 	beq.w	8010068 <_vfiprintf_r+0x1ec>
 800ff1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff1c:	445a      	add	r2, fp
 800ff1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff20:	f89a 3000 	ldrb.w	r3, [sl]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	f000 809f 	beq.w	8010068 <_vfiprintf_r+0x1ec>
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff34:	f10a 0a01 	add.w	sl, sl, #1
 800ff38:	9304      	str	r3, [sp, #16]
 800ff3a:	9307      	str	r3, [sp, #28]
 800ff3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff40:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff42:	4654      	mov	r4, sl
 800ff44:	2205      	movs	r2, #5
 800ff46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff4a:	4853      	ldr	r0, [pc, #332]	@ (8010098 <_vfiprintf_r+0x21c>)
 800ff4c:	f7f0 f978 	bl	8000240 <memchr>
 800ff50:	9a04      	ldr	r2, [sp, #16]
 800ff52:	b9d8      	cbnz	r0, 800ff8c <_vfiprintf_r+0x110>
 800ff54:	06d1      	lsls	r1, r2, #27
 800ff56:	bf44      	itt	mi
 800ff58:	2320      	movmi	r3, #32
 800ff5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff5e:	0713      	lsls	r3, r2, #28
 800ff60:	bf44      	itt	mi
 800ff62:	232b      	movmi	r3, #43	@ 0x2b
 800ff64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff68:	f89a 3000 	ldrb.w	r3, [sl]
 800ff6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff6e:	d015      	beq.n	800ff9c <_vfiprintf_r+0x120>
 800ff70:	9a07      	ldr	r2, [sp, #28]
 800ff72:	4654      	mov	r4, sl
 800ff74:	2000      	movs	r0, #0
 800ff76:	f04f 0c0a 	mov.w	ip, #10
 800ff7a:	4621      	mov	r1, r4
 800ff7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff80:	3b30      	subs	r3, #48	@ 0x30
 800ff82:	2b09      	cmp	r3, #9
 800ff84:	d94b      	bls.n	801001e <_vfiprintf_r+0x1a2>
 800ff86:	b1b0      	cbz	r0, 800ffb6 <_vfiprintf_r+0x13a>
 800ff88:	9207      	str	r2, [sp, #28]
 800ff8a:	e014      	b.n	800ffb6 <_vfiprintf_r+0x13a>
 800ff8c:	eba0 0308 	sub.w	r3, r0, r8
 800ff90:	fa09 f303 	lsl.w	r3, r9, r3
 800ff94:	4313      	orrs	r3, r2
 800ff96:	9304      	str	r3, [sp, #16]
 800ff98:	46a2      	mov	sl, r4
 800ff9a:	e7d2      	b.n	800ff42 <_vfiprintf_r+0xc6>
 800ff9c:	9b03      	ldr	r3, [sp, #12]
 800ff9e:	1d19      	adds	r1, r3, #4
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	9103      	str	r1, [sp, #12]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	bfbb      	ittet	lt
 800ffa8:	425b      	neglt	r3, r3
 800ffaa:	f042 0202 	orrlt.w	r2, r2, #2
 800ffae:	9307      	strge	r3, [sp, #28]
 800ffb0:	9307      	strlt	r3, [sp, #28]
 800ffb2:	bfb8      	it	lt
 800ffb4:	9204      	strlt	r2, [sp, #16]
 800ffb6:	7823      	ldrb	r3, [r4, #0]
 800ffb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ffba:	d10a      	bne.n	800ffd2 <_vfiprintf_r+0x156>
 800ffbc:	7863      	ldrb	r3, [r4, #1]
 800ffbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffc0:	d132      	bne.n	8010028 <_vfiprintf_r+0x1ac>
 800ffc2:	9b03      	ldr	r3, [sp, #12]
 800ffc4:	1d1a      	adds	r2, r3, #4
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	9203      	str	r2, [sp, #12]
 800ffca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ffce:	3402      	adds	r4, #2
 800ffd0:	9305      	str	r3, [sp, #20]
 800ffd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80100a8 <_vfiprintf_r+0x22c>
 800ffd6:	7821      	ldrb	r1, [r4, #0]
 800ffd8:	2203      	movs	r2, #3
 800ffda:	4650      	mov	r0, sl
 800ffdc:	f7f0 f930 	bl	8000240 <memchr>
 800ffe0:	b138      	cbz	r0, 800fff2 <_vfiprintf_r+0x176>
 800ffe2:	9b04      	ldr	r3, [sp, #16]
 800ffe4:	eba0 000a 	sub.w	r0, r0, sl
 800ffe8:	2240      	movs	r2, #64	@ 0x40
 800ffea:	4082      	lsls	r2, r0
 800ffec:	4313      	orrs	r3, r2
 800ffee:	3401      	adds	r4, #1
 800fff0:	9304      	str	r3, [sp, #16]
 800fff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fff6:	4829      	ldr	r0, [pc, #164]	@ (801009c <_vfiprintf_r+0x220>)
 800fff8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fffc:	2206      	movs	r2, #6
 800fffe:	f7f0 f91f 	bl	8000240 <memchr>
 8010002:	2800      	cmp	r0, #0
 8010004:	d03f      	beq.n	8010086 <_vfiprintf_r+0x20a>
 8010006:	4b26      	ldr	r3, [pc, #152]	@ (80100a0 <_vfiprintf_r+0x224>)
 8010008:	bb1b      	cbnz	r3, 8010052 <_vfiprintf_r+0x1d6>
 801000a:	9b03      	ldr	r3, [sp, #12]
 801000c:	3307      	adds	r3, #7
 801000e:	f023 0307 	bic.w	r3, r3, #7
 8010012:	3308      	adds	r3, #8
 8010014:	9303      	str	r3, [sp, #12]
 8010016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010018:	443b      	add	r3, r7
 801001a:	9309      	str	r3, [sp, #36]	@ 0x24
 801001c:	e76a      	b.n	800fef4 <_vfiprintf_r+0x78>
 801001e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010022:	460c      	mov	r4, r1
 8010024:	2001      	movs	r0, #1
 8010026:	e7a8      	b.n	800ff7a <_vfiprintf_r+0xfe>
 8010028:	2300      	movs	r3, #0
 801002a:	3401      	adds	r4, #1
 801002c:	9305      	str	r3, [sp, #20]
 801002e:	4619      	mov	r1, r3
 8010030:	f04f 0c0a 	mov.w	ip, #10
 8010034:	4620      	mov	r0, r4
 8010036:	f810 2b01 	ldrb.w	r2, [r0], #1
 801003a:	3a30      	subs	r2, #48	@ 0x30
 801003c:	2a09      	cmp	r2, #9
 801003e:	d903      	bls.n	8010048 <_vfiprintf_r+0x1cc>
 8010040:	2b00      	cmp	r3, #0
 8010042:	d0c6      	beq.n	800ffd2 <_vfiprintf_r+0x156>
 8010044:	9105      	str	r1, [sp, #20]
 8010046:	e7c4      	b.n	800ffd2 <_vfiprintf_r+0x156>
 8010048:	fb0c 2101 	mla	r1, ip, r1, r2
 801004c:	4604      	mov	r4, r0
 801004e:	2301      	movs	r3, #1
 8010050:	e7f0      	b.n	8010034 <_vfiprintf_r+0x1b8>
 8010052:	ab03      	add	r3, sp, #12
 8010054:	9300      	str	r3, [sp, #0]
 8010056:	462a      	mov	r2, r5
 8010058:	4b12      	ldr	r3, [pc, #72]	@ (80100a4 <_vfiprintf_r+0x228>)
 801005a:	a904      	add	r1, sp, #16
 801005c:	4630      	mov	r0, r6
 801005e:	f7fd fb59 	bl	800d714 <_printf_float>
 8010062:	4607      	mov	r7, r0
 8010064:	1c78      	adds	r0, r7, #1
 8010066:	d1d6      	bne.n	8010016 <_vfiprintf_r+0x19a>
 8010068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801006a:	07d9      	lsls	r1, r3, #31
 801006c:	d405      	bmi.n	801007a <_vfiprintf_r+0x1fe>
 801006e:	89ab      	ldrh	r3, [r5, #12]
 8010070:	059a      	lsls	r2, r3, #22
 8010072:	d402      	bmi.n	801007a <_vfiprintf_r+0x1fe>
 8010074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010076:	f7fe f923 	bl	800e2c0 <__retarget_lock_release_recursive>
 801007a:	89ab      	ldrh	r3, [r5, #12]
 801007c:	065b      	lsls	r3, r3, #25
 801007e:	f53f af1f 	bmi.w	800fec0 <_vfiprintf_r+0x44>
 8010082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010084:	e71e      	b.n	800fec4 <_vfiprintf_r+0x48>
 8010086:	ab03      	add	r3, sp, #12
 8010088:	9300      	str	r3, [sp, #0]
 801008a:	462a      	mov	r2, r5
 801008c:	4b05      	ldr	r3, [pc, #20]	@ (80100a4 <_vfiprintf_r+0x228>)
 801008e:	a904      	add	r1, sp, #16
 8010090:	4630      	mov	r0, r6
 8010092:	f7fd fdd7 	bl	800dc44 <_printf_i>
 8010096:	e7e4      	b.n	8010062 <_vfiprintf_r+0x1e6>
 8010098:	08011870 	.word	0x08011870
 801009c:	0801187a 	.word	0x0801187a
 80100a0:	0800d715 	.word	0x0800d715
 80100a4:	0800fe59 	.word	0x0800fe59
 80100a8:	08011876 	.word	0x08011876

080100ac <__swbuf_r>:
 80100ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ae:	460e      	mov	r6, r1
 80100b0:	4614      	mov	r4, r2
 80100b2:	4605      	mov	r5, r0
 80100b4:	b118      	cbz	r0, 80100be <__swbuf_r+0x12>
 80100b6:	6a03      	ldr	r3, [r0, #32]
 80100b8:	b90b      	cbnz	r3, 80100be <__swbuf_r+0x12>
 80100ba:	f7fd ff6f 	bl	800df9c <__sinit>
 80100be:	69a3      	ldr	r3, [r4, #24]
 80100c0:	60a3      	str	r3, [r4, #8]
 80100c2:	89a3      	ldrh	r3, [r4, #12]
 80100c4:	071a      	lsls	r2, r3, #28
 80100c6:	d501      	bpl.n	80100cc <__swbuf_r+0x20>
 80100c8:	6923      	ldr	r3, [r4, #16]
 80100ca:	b943      	cbnz	r3, 80100de <__swbuf_r+0x32>
 80100cc:	4621      	mov	r1, r4
 80100ce:	4628      	mov	r0, r5
 80100d0:	f000 f82a 	bl	8010128 <__swsetup_r>
 80100d4:	b118      	cbz	r0, 80100de <__swbuf_r+0x32>
 80100d6:	f04f 37ff 	mov.w	r7, #4294967295
 80100da:	4638      	mov	r0, r7
 80100dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100de:	6823      	ldr	r3, [r4, #0]
 80100e0:	6922      	ldr	r2, [r4, #16]
 80100e2:	1a98      	subs	r0, r3, r2
 80100e4:	6963      	ldr	r3, [r4, #20]
 80100e6:	b2f6      	uxtb	r6, r6
 80100e8:	4283      	cmp	r3, r0
 80100ea:	4637      	mov	r7, r6
 80100ec:	dc05      	bgt.n	80100fa <__swbuf_r+0x4e>
 80100ee:	4621      	mov	r1, r4
 80100f0:	4628      	mov	r0, r5
 80100f2:	f7ff fda7 	bl	800fc44 <_fflush_r>
 80100f6:	2800      	cmp	r0, #0
 80100f8:	d1ed      	bne.n	80100d6 <__swbuf_r+0x2a>
 80100fa:	68a3      	ldr	r3, [r4, #8]
 80100fc:	3b01      	subs	r3, #1
 80100fe:	60a3      	str	r3, [r4, #8]
 8010100:	6823      	ldr	r3, [r4, #0]
 8010102:	1c5a      	adds	r2, r3, #1
 8010104:	6022      	str	r2, [r4, #0]
 8010106:	701e      	strb	r6, [r3, #0]
 8010108:	6962      	ldr	r2, [r4, #20]
 801010a:	1c43      	adds	r3, r0, #1
 801010c:	429a      	cmp	r2, r3
 801010e:	d004      	beq.n	801011a <__swbuf_r+0x6e>
 8010110:	89a3      	ldrh	r3, [r4, #12]
 8010112:	07db      	lsls	r3, r3, #31
 8010114:	d5e1      	bpl.n	80100da <__swbuf_r+0x2e>
 8010116:	2e0a      	cmp	r6, #10
 8010118:	d1df      	bne.n	80100da <__swbuf_r+0x2e>
 801011a:	4621      	mov	r1, r4
 801011c:	4628      	mov	r0, r5
 801011e:	f7ff fd91 	bl	800fc44 <_fflush_r>
 8010122:	2800      	cmp	r0, #0
 8010124:	d0d9      	beq.n	80100da <__swbuf_r+0x2e>
 8010126:	e7d6      	b.n	80100d6 <__swbuf_r+0x2a>

08010128 <__swsetup_r>:
 8010128:	b538      	push	{r3, r4, r5, lr}
 801012a:	4b29      	ldr	r3, [pc, #164]	@ (80101d0 <__swsetup_r+0xa8>)
 801012c:	4605      	mov	r5, r0
 801012e:	6818      	ldr	r0, [r3, #0]
 8010130:	460c      	mov	r4, r1
 8010132:	b118      	cbz	r0, 801013c <__swsetup_r+0x14>
 8010134:	6a03      	ldr	r3, [r0, #32]
 8010136:	b90b      	cbnz	r3, 801013c <__swsetup_r+0x14>
 8010138:	f7fd ff30 	bl	800df9c <__sinit>
 801013c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010140:	0719      	lsls	r1, r3, #28
 8010142:	d422      	bmi.n	801018a <__swsetup_r+0x62>
 8010144:	06da      	lsls	r2, r3, #27
 8010146:	d407      	bmi.n	8010158 <__swsetup_r+0x30>
 8010148:	2209      	movs	r2, #9
 801014a:	602a      	str	r2, [r5, #0]
 801014c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010150:	81a3      	strh	r3, [r4, #12]
 8010152:	f04f 30ff 	mov.w	r0, #4294967295
 8010156:	e033      	b.n	80101c0 <__swsetup_r+0x98>
 8010158:	0758      	lsls	r0, r3, #29
 801015a:	d512      	bpl.n	8010182 <__swsetup_r+0x5a>
 801015c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801015e:	b141      	cbz	r1, 8010172 <__swsetup_r+0x4a>
 8010160:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010164:	4299      	cmp	r1, r3
 8010166:	d002      	beq.n	801016e <__swsetup_r+0x46>
 8010168:	4628      	mov	r0, r5
 801016a:	f7fe ff0d 	bl	800ef88 <_free_r>
 801016e:	2300      	movs	r3, #0
 8010170:	6363      	str	r3, [r4, #52]	@ 0x34
 8010172:	89a3      	ldrh	r3, [r4, #12]
 8010174:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010178:	81a3      	strh	r3, [r4, #12]
 801017a:	2300      	movs	r3, #0
 801017c:	6063      	str	r3, [r4, #4]
 801017e:	6923      	ldr	r3, [r4, #16]
 8010180:	6023      	str	r3, [r4, #0]
 8010182:	89a3      	ldrh	r3, [r4, #12]
 8010184:	f043 0308 	orr.w	r3, r3, #8
 8010188:	81a3      	strh	r3, [r4, #12]
 801018a:	6923      	ldr	r3, [r4, #16]
 801018c:	b94b      	cbnz	r3, 80101a2 <__swsetup_r+0x7a>
 801018e:	89a3      	ldrh	r3, [r4, #12]
 8010190:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010198:	d003      	beq.n	80101a2 <__swsetup_r+0x7a>
 801019a:	4621      	mov	r1, r4
 801019c:	4628      	mov	r0, r5
 801019e:	f000 f883 	bl	80102a8 <__smakebuf_r>
 80101a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101a6:	f013 0201 	ands.w	r2, r3, #1
 80101aa:	d00a      	beq.n	80101c2 <__swsetup_r+0x9a>
 80101ac:	2200      	movs	r2, #0
 80101ae:	60a2      	str	r2, [r4, #8]
 80101b0:	6962      	ldr	r2, [r4, #20]
 80101b2:	4252      	negs	r2, r2
 80101b4:	61a2      	str	r2, [r4, #24]
 80101b6:	6922      	ldr	r2, [r4, #16]
 80101b8:	b942      	cbnz	r2, 80101cc <__swsetup_r+0xa4>
 80101ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80101be:	d1c5      	bne.n	801014c <__swsetup_r+0x24>
 80101c0:	bd38      	pop	{r3, r4, r5, pc}
 80101c2:	0799      	lsls	r1, r3, #30
 80101c4:	bf58      	it	pl
 80101c6:	6962      	ldrpl	r2, [r4, #20]
 80101c8:	60a2      	str	r2, [r4, #8]
 80101ca:	e7f4      	b.n	80101b6 <__swsetup_r+0x8e>
 80101cc:	2000      	movs	r0, #0
 80101ce:	e7f7      	b.n	80101c0 <__swsetup_r+0x98>
 80101d0:	20000430 	.word	0x20000430

080101d4 <_raise_r>:
 80101d4:	291f      	cmp	r1, #31
 80101d6:	b538      	push	{r3, r4, r5, lr}
 80101d8:	4605      	mov	r5, r0
 80101da:	460c      	mov	r4, r1
 80101dc:	d904      	bls.n	80101e8 <_raise_r+0x14>
 80101de:	2316      	movs	r3, #22
 80101e0:	6003      	str	r3, [r0, #0]
 80101e2:	f04f 30ff 	mov.w	r0, #4294967295
 80101e6:	bd38      	pop	{r3, r4, r5, pc}
 80101e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80101ea:	b112      	cbz	r2, 80101f2 <_raise_r+0x1e>
 80101ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101f0:	b94b      	cbnz	r3, 8010206 <_raise_r+0x32>
 80101f2:	4628      	mov	r0, r5
 80101f4:	f000 f830 	bl	8010258 <_getpid_r>
 80101f8:	4622      	mov	r2, r4
 80101fa:	4601      	mov	r1, r0
 80101fc:	4628      	mov	r0, r5
 80101fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010202:	f000 b817 	b.w	8010234 <_kill_r>
 8010206:	2b01      	cmp	r3, #1
 8010208:	d00a      	beq.n	8010220 <_raise_r+0x4c>
 801020a:	1c59      	adds	r1, r3, #1
 801020c:	d103      	bne.n	8010216 <_raise_r+0x42>
 801020e:	2316      	movs	r3, #22
 8010210:	6003      	str	r3, [r0, #0]
 8010212:	2001      	movs	r0, #1
 8010214:	e7e7      	b.n	80101e6 <_raise_r+0x12>
 8010216:	2100      	movs	r1, #0
 8010218:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801021c:	4620      	mov	r0, r4
 801021e:	4798      	blx	r3
 8010220:	2000      	movs	r0, #0
 8010222:	e7e0      	b.n	80101e6 <_raise_r+0x12>

08010224 <raise>:
 8010224:	4b02      	ldr	r3, [pc, #8]	@ (8010230 <raise+0xc>)
 8010226:	4601      	mov	r1, r0
 8010228:	6818      	ldr	r0, [r3, #0]
 801022a:	f7ff bfd3 	b.w	80101d4 <_raise_r>
 801022e:	bf00      	nop
 8010230:	20000430 	.word	0x20000430

08010234 <_kill_r>:
 8010234:	b538      	push	{r3, r4, r5, lr}
 8010236:	4d07      	ldr	r5, [pc, #28]	@ (8010254 <_kill_r+0x20>)
 8010238:	2300      	movs	r3, #0
 801023a:	4604      	mov	r4, r0
 801023c:	4608      	mov	r0, r1
 801023e:	4611      	mov	r1, r2
 8010240:	602b      	str	r3, [r5, #0]
 8010242:	f7f2 fa4f 	bl	80026e4 <_kill>
 8010246:	1c43      	adds	r3, r0, #1
 8010248:	d102      	bne.n	8010250 <_kill_r+0x1c>
 801024a:	682b      	ldr	r3, [r5, #0]
 801024c:	b103      	cbz	r3, 8010250 <_kill_r+0x1c>
 801024e:	6023      	str	r3, [r4, #0]
 8010250:	bd38      	pop	{r3, r4, r5, pc}
 8010252:	bf00      	nop
 8010254:	200079a0 	.word	0x200079a0

08010258 <_getpid_r>:
 8010258:	f7f2 ba3c 	b.w	80026d4 <_getpid>

0801025c <__swhatbuf_r>:
 801025c:	b570      	push	{r4, r5, r6, lr}
 801025e:	460c      	mov	r4, r1
 8010260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010264:	2900      	cmp	r1, #0
 8010266:	b096      	sub	sp, #88	@ 0x58
 8010268:	4615      	mov	r5, r2
 801026a:	461e      	mov	r6, r3
 801026c:	da0d      	bge.n	801028a <__swhatbuf_r+0x2e>
 801026e:	89a3      	ldrh	r3, [r4, #12]
 8010270:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010274:	f04f 0100 	mov.w	r1, #0
 8010278:	bf14      	ite	ne
 801027a:	2340      	movne	r3, #64	@ 0x40
 801027c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010280:	2000      	movs	r0, #0
 8010282:	6031      	str	r1, [r6, #0]
 8010284:	602b      	str	r3, [r5, #0]
 8010286:	b016      	add	sp, #88	@ 0x58
 8010288:	bd70      	pop	{r4, r5, r6, pc}
 801028a:	466a      	mov	r2, sp
 801028c:	f000 f848 	bl	8010320 <_fstat_r>
 8010290:	2800      	cmp	r0, #0
 8010292:	dbec      	blt.n	801026e <__swhatbuf_r+0x12>
 8010294:	9901      	ldr	r1, [sp, #4]
 8010296:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801029a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801029e:	4259      	negs	r1, r3
 80102a0:	4159      	adcs	r1, r3
 80102a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80102a6:	e7eb      	b.n	8010280 <__swhatbuf_r+0x24>

080102a8 <__smakebuf_r>:
 80102a8:	898b      	ldrh	r3, [r1, #12]
 80102aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80102ac:	079d      	lsls	r5, r3, #30
 80102ae:	4606      	mov	r6, r0
 80102b0:	460c      	mov	r4, r1
 80102b2:	d507      	bpl.n	80102c4 <__smakebuf_r+0x1c>
 80102b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80102b8:	6023      	str	r3, [r4, #0]
 80102ba:	6123      	str	r3, [r4, #16]
 80102bc:	2301      	movs	r3, #1
 80102be:	6163      	str	r3, [r4, #20]
 80102c0:	b003      	add	sp, #12
 80102c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102c4:	ab01      	add	r3, sp, #4
 80102c6:	466a      	mov	r2, sp
 80102c8:	f7ff ffc8 	bl	801025c <__swhatbuf_r>
 80102cc:	9f00      	ldr	r7, [sp, #0]
 80102ce:	4605      	mov	r5, r0
 80102d0:	4639      	mov	r1, r7
 80102d2:	4630      	mov	r0, r6
 80102d4:	f7fe fecc 	bl	800f070 <_malloc_r>
 80102d8:	b948      	cbnz	r0, 80102ee <__smakebuf_r+0x46>
 80102da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102de:	059a      	lsls	r2, r3, #22
 80102e0:	d4ee      	bmi.n	80102c0 <__smakebuf_r+0x18>
 80102e2:	f023 0303 	bic.w	r3, r3, #3
 80102e6:	f043 0302 	orr.w	r3, r3, #2
 80102ea:	81a3      	strh	r3, [r4, #12]
 80102ec:	e7e2      	b.n	80102b4 <__smakebuf_r+0xc>
 80102ee:	89a3      	ldrh	r3, [r4, #12]
 80102f0:	6020      	str	r0, [r4, #0]
 80102f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102f6:	81a3      	strh	r3, [r4, #12]
 80102f8:	9b01      	ldr	r3, [sp, #4]
 80102fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80102fe:	b15b      	cbz	r3, 8010318 <__smakebuf_r+0x70>
 8010300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010304:	4630      	mov	r0, r6
 8010306:	f000 f81d 	bl	8010344 <_isatty_r>
 801030a:	b128      	cbz	r0, 8010318 <__smakebuf_r+0x70>
 801030c:	89a3      	ldrh	r3, [r4, #12]
 801030e:	f023 0303 	bic.w	r3, r3, #3
 8010312:	f043 0301 	orr.w	r3, r3, #1
 8010316:	81a3      	strh	r3, [r4, #12]
 8010318:	89a3      	ldrh	r3, [r4, #12]
 801031a:	431d      	orrs	r5, r3
 801031c:	81a5      	strh	r5, [r4, #12]
 801031e:	e7cf      	b.n	80102c0 <__smakebuf_r+0x18>

08010320 <_fstat_r>:
 8010320:	b538      	push	{r3, r4, r5, lr}
 8010322:	4d07      	ldr	r5, [pc, #28]	@ (8010340 <_fstat_r+0x20>)
 8010324:	2300      	movs	r3, #0
 8010326:	4604      	mov	r4, r0
 8010328:	4608      	mov	r0, r1
 801032a:	4611      	mov	r1, r2
 801032c:	602b      	str	r3, [r5, #0]
 801032e:	f7f2 fa39 	bl	80027a4 <_fstat>
 8010332:	1c43      	adds	r3, r0, #1
 8010334:	d102      	bne.n	801033c <_fstat_r+0x1c>
 8010336:	682b      	ldr	r3, [r5, #0]
 8010338:	b103      	cbz	r3, 801033c <_fstat_r+0x1c>
 801033a:	6023      	str	r3, [r4, #0]
 801033c:	bd38      	pop	{r3, r4, r5, pc}
 801033e:	bf00      	nop
 8010340:	200079a0 	.word	0x200079a0

08010344 <_isatty_r>:
 8010344:	b538      	push	{r3, r4, r5, lr}
 8010346:	4d06      	ldr	r5, [pc, #24]	@ (8010360 <_isatty_r+0x1c>)
 8010348:	2300      	movs	r3, #0
 801034a:	4604      	mov	r4, r0
 801034c:	4608      	mov	r0, r1
 801034e:	602b      	str	r3, [r5, #0]
 8010350:	f7f2 fa38 	bl	80027c4 <_isatty>
 8010354:	1c43      	adds	r3, r0, #1
 8010356:	d102      	bne.n	801035e <_isatty_r+0x1a>
 8010358:	682b      	ldr	r3, [r5, #0]
 801035a:	b103      	cbz	r3, 801035e <_isatty_r+0x1a>
 801035c:	6023      	str	r3, [r4, #0]
 801035e:	bd38      	pop	{r3, r4, r5, pc}
 8010360:	200079a0 	.word	0x200079a0

08010364 <atan2f>:
 8010364:	f000 b822 	b.w	80103ac <__ieee754_atan2f>

08010368 <sqrtf>:
 8010368:	b508      	push	{r3, lr}
 801036a:	ed2d 8b02 	vpush	{d8}
 801036e:	eeb0 8a40 	vmov.f32	s16, s0
 8010372:	f000 f817 	bl	80103a4 <__ieee754_sqrtf>
 8010376:	eeb4 8a48 	vcmp.f32	s16, s16
 801037a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801037e:	d60c      	bvs.n	801039a <sqrtf+0x32>
 8010380:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80103a0 <sqrtf+0x38>
 8010384:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801038c:	d505      	bpl.n	801039a <sqrtf+0x32>
 801038e:	f7fd ff6b 	bl	800e268 <__errno>
 8010392:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010396:	2321      	movs	r3, #33	@ 0x21
 8010398:	6003      	str	r3, [r0, #0]
 801039a:	ecbd 8b02 	vpop	{d8}
 801039e:	bd08      	pop	{r3, pc}
 80103a0:	00000000 	.word	0x00000000

080103a4 <__ieee754_sqrtf>:
 80103a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80103a8:	4770      	bx	lr
	...

080103ac <__ieee754_atan2f>:
 80103ac:	ee10 2a90 	vmov	r2, s1
 80103b0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80103b4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80103b8:	b510      	push	{r4, lr}
 80103ba:	eef0 7a40 	vmov.f32	s15, s0
 80103be:	d806      	bhi.n	80103ce <__ieee754_atan2f+0x22>
 80103c0:	ee10 0a10 	vmov	r0, s0
 80103c4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80103c8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80103cc:	d904      	bls.n	80103d8 <__ieee754_atan2f+0x2c>
 80103ce:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80103d2:	eeb0 0a67 	vmov.f32	s0, s15
 80103d6:	bd10      	pop	{r4, pc}
 80103d8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80103dc:	d103      	bne.n	80103e6 <__ieee754_atan2f+0x3a>
 80103de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103e2:	f000 b883 	b.w	80104ec <atanf>
 80103e6:	1794      	asrs	r4, r2, #30
 80103e8:	f004 0402 	and.w	r4, r4, #2
 80103ec:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80103f0:	b943      	cbnz	r3, 8010404 <__ieee754_atan2f+0x58>
 80103f2:	2c02      	cmp	r4, #2
 80103f4:	d05e      	beq.n	80104b4 <__ieee754_atan2f+0x108>
 80103f6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80104c8 <__ieee754_atan2f+0x11c>
 80103fa:	2c03      	cmp	r4, #3
 80103fc:	bf08      	it	eq
 80103fe:	eef0 7a47 	vmoveq.f32	s15, s14
 8010402:	e7e6      	b.n	80103d2 <__ieee754_atan2f+0x26>
 8010404:	b941      	cbnz	r1, 8010418 <__ieee754_atan2f+0x6c>
 8010406:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80104cc <__ieee754_atan2f+0x120>
 801040a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80104d0 <__ieee754_atan2f+0x124>
 801040e:	2800      	cmp	r0, #0
 8010410:	bfb8      	it	lt
 8010412:	eef0 7a47 	vmovlt.f32	s15, s14
 8010416:	e7dc      	b.n	80103d2 <__ieee754_atan2f+0x26>
 8010418:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801041c:	d110      	bne.n	8010440 <__ieee754_atan2f+0x94>
 801041e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010422:	f104 34ff 	add.w	r4, r4, #4294967295
 8010426:	d107      	bne.n	8010438 <__ieee754_atan2f+0x8c>
 8010428:	2c02      	cmp	r4, #2
 801042a:	d846      	bhi.n	80104ba <__ieee754_atan2f+0x10e>
 801042c:	4b29      	ldr	r3, [pc, #164]	@ (80104d4 <__ieee754_atan2f+0x128>)
 801042e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010432:	edd3 7a00 	vldr	s15, [r3]
 8010436:	e7cc      	b.n	80103d2 <__ieee754_atan2f+0x26>
 8010438:	2c02      	cmp	r4, #2
 801043a:	d841      	bhi.n	80104c0 <__ieee754_atan2f+0x114>
 801043c:	4b26      	ldr	r3, [pc, #152]	@ (80104d8 <__ieee754_atan2f+0x12c>)
 801043e:	e7f6      	b.n	801042e <__ieee754_atan2f+0x82>
 8010440:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010444:	d0df      	beq.n	8010406 <__ieee754_atan2f+0x5a>
 8010446:	1a5b      	subs	r3, r3, r1
 8010448:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801044c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010450:	da1a      	bge.n	8010488 <__ieee754_atan2f+0xdc>
 8010452:	2a00      	cmp	r2, #0
 8010454:	da01      	bge.n	801045a <__ieee754_atan2f+0xae>
 8010456:	313c      	adds	r1, #60	@ 0x3c
 8010458:	db19      	blt.n	801048e <__ieee754_atan2f+0xe2>
 801045a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801045e:	f000 f919 	bl	8010694 <fabsf>
 8010462:	f000 f843 	bl	80104ec <atanf>
 8010466:	eef0 7a40 	vmov.f32	s15, s0
 801046a:	2c01      	cmp	r4, #1
 801046c:	d012      	beq.n	8010494 <__ieee754_atan2f+0xe8>
 801046e:	2c02      	cmp	r4, #2
 8010470:	d017      	beq.n	80104a2 <__ieee754_atan2f+0xf6>
 8010472:	2c00      	cmp	r4, #0
 8010474:	d0ad      	beq.n	80103d2 <__ieee754_atan2f+0x26>
 8010476:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80104dc <__ieee754_atan2f+0x130>
 801047a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801047e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80104e0 <__ieee754_atan2f+0x134>
 8010482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010486:	e7a4      	b.n	80103d2 <__ieee754_atan2f+0x26>
 8010488:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80104cc <__ieee754_atan2f+0x120>
 801048c:	e7ed      	b.n	801046a <__ieee754_atan2f+0xbe>
 801048e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80104e4 <__ieee754_atan2f+0x138>
 8010492:	e7ea      	b.n	801046a <__ieee754_atan2f+0xbe>
 8010494:	ee17 3a90 	vmov	r3, s15
 8010498:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801049c:	ee07 3a90 	vmov	s15, r3
 80104a0:	e797      	b.n	80103d2 <__ieee754_atan2f+0x26>
 80104a2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80104dc <__ieee754_atan2f+0x130>
 80104a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80104aa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80104e0 <__ieee754_atan2f+0x134>
 80104ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104b2:	e78e      	b.n	80103d2 <__ieee754_atan2f+0x26>
 80104b4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80104e0 <__ieee754_atan2f+0x134>
 80104b8:	e78b      	b.n	80103d2 <__ieee754_atan2f+0x26>
 80104ba:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80104e8 <__ieee754_atan2f+0x13c>
 80104be:	e788      	b.n	80103d2 <__ieee754_atan2f+0x26>
 80104c0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80104e4 <__ieee754_atan2f+0x138>
 80104c4:	e785      	b.n	80103d2 <__ieee754_atan2f+0x26>
 80104c6:	bf00      	nop
 80104c8:	c0490fdb 	.word	0xc0490fdb
 80104cc:	3fc90fdb 	.word	0x3fc90fdb
 80104d0:	bfc90fdb 	.word	0xbfc90fdb
 80104d4:	080119d4 	.word	0x080119d4
 80104d8:	080119c8 	.word	0x080119c8
 80104dc:	33bbbd2e 	.word	0x33bbbd2e
 80104e0:	40490fdb 	.word	0x40490fdb
 80104e4:	00000000 	.word	0x00000000
 80104e8:	3f490fdb 	.word	0x3f490fdb

080104ec <atanf>:
 80104ec:	b538      	push	{r3, r4, r5, lr}
 80104ee:	ee10 5a10 	vmov	r5, s0
 80104f2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80104f6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80104fa:	eef0 7a40 	vmov.f32	s15, s0
 80104fe:	d310      	bcc.n	8010522 <atanf+0x36>
 8010500:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8010504:	d904      	bls.n	8010510 <atanf+0x24>
 8010506:	ee70 7a00 	vadd.f32	s15, s0, s0
 801050a:	eeb0 0a67 	vmov.f32	s0, s15
 801050e:	bd38      	pop	{r3, r4, r5, pc}
 8010510:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8010648 <atanf+0x15c>
 8010514:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801064c <atanf+0x160>
 8010518:	2d00      	cmp	r5, #0
 801051a:	bfc8      	it	gt
 801051c:	eef0 7a47 	vmovgt.f32	s15, s14
 8010520:	e7f3      	b.n	801050a <atanf+0x1e>
 8010522:	4b4b      	ldr	r3, [pc, #300]	@ (8010650 <atanf+0x164>)
 8010524:	429c      	cmp	r4, r3
 8010526:	d810      	bhi.n	801054a <atanf+0x5e>
 8010528:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801052c:	d20a      	bcs.n	8010544 <atanf+0x58>
 801052e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010654 <atanf+0x168>
 8010532:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801053a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801053e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010542:	dce2      	bgt.n	801050a <atanf+0x1e>
 8010544:	f04f 33ff 	mov.w	r3, #4294967295
 8010548:	e013      	b.n	8010572 <atanf+0x86>
 801054a:	f000 f8a3 	bl	8010694 <fabsf>
 801054e:	4b42      	ldr	r3, [pc, #264]	@ (8010658 <atanf+0x16c>)
 8010550:	429c      	cmp	r4, r3
 8010552:	d84f      	bhi.n	80105f4 <atanf+0x108>
 8010554:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8010558:	429c      	cmp	r4, r3
 801055a:	d841      	bhi.n	80105e0 <atanf+0xf4>
 801055c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010560:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010564:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010568:	2300      	movs	r3, #0
 801056a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801056e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010572:	1c5a      	adds	r2, r3, #1
 8010574:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010578:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801065c <atanf+0x170>
 801057c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8010660 <atanf+0x174>
 8010580:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8010664 <atanf+0x178>
 8010584:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010588:	eee6 5a87 	vfma.f32	s11, s13, s14
 801058c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8010668 <atanf+0x17c>
 8010590:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010594:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801066c <atanf+0x180>
 8010598:	eee7 5a26 	vfma.f32	s11, s14, s13
 801059c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010670 <atanf+0x184>
 80105a0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80105a4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010674 <atanf+0x188>
 80105a8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80105ac:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8010678 <atanf+0x18c>
 80105b0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80105b4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801067c <atanf+0x190>
 80105b8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80105bc:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8010680 <atanf+0x194>
 80105c0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80105c4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8010684 <atanf+0x198>
 80105c8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80105cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80105d0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80105d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80105d8:	d121      	bne.n	801061e <atanf+0x132>
 80105da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80105de:	e794      	b.n	801050a <atanf+0x1e>
 80105e0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80105e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80105e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80105ec:	2301      	movs	r3, #1
 80105ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80105f2:	e7be      	b.n	8010572 <atanf+0x86>
 80105f4:	4b24      	ldr	r3, [pc, #144]	@ (8010688 <atanf+0x19c>)
 80105f6:	429c      	cmp	r4, r3
 80105f8:	d80b      	bhi.n	8010612 <atanf+0x126>
 80105fa:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80105fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010602:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010606:	2302      	movs	r3, #2
 8010608:	ee70 6a67 	vsub.f32	s13, s0, s15
 801060c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010610:	e7af      	b.n	8010572 <atanf+0x86>
 8010612:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010616:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801061a:	2303      	movs	r3, #3
 801061c:	e7a9      	b.n	8010572 <atanf+0x86>
 801061e:	4a1b      	ldr	r2, [pc, #108]	@ (801068c <atanf+0x1a0>)
 8010620:	491b      	ldr	r1, [pc, #108]	@ (8010690 <atanf+0x1a4>)
 8010622:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010626:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801062a:	edd3 6a00 	vldr	s13, [r3]
 801062e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010632:	2d00      	cmp	r5, #0
 8010634:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010638:	edd2 7a00 	vldr	s15, [r2]
 801063c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010640:	bfb8      	it	lt
 8010642:	eef1 7a67 	vneglt.f32	s15, s15
 8010646:	e760      	b.n	801050a <atanf+0x1e>
 8010648:	bfc90fdb 	.word	0xbfc90fdb
 801064c:	3fc90fdb 	.word	0x3fc90fdb
 8010650:	3edfffff 	.word	0x3edfffff
 8010654:	7149f2ca 	.word	0x7149f2ca
 8010658:	3f97ffff 	.word	0x3f97ffff
 801065c:	3c8569d7 	.word	0x3c8569d7
 8010660:	3d4bda59 	.word	0x3d4bda59
 8010664:	bd6ef16b 	.word	0xbd6ef16b
 8010668:	3d886b35 	.word	0x3d886b35
 801066c:	3dba2e6e 	.word	0x3dba2e6e
 8010670:	3e124925 	.word	0x3e124925
 8010674:	3eaaaaab 	.word	0x3eaaaaab
 8010678:	bd15a221 	.word	0xbd15a221
 801067c:	bd9d8795 	.word	0xbd9d8795
 8010680:	bde38e38 	.word	0xbde38e38
 8010684:	be4ccccd 	.word	0xbe4ccccd
 8010688:	401bffff 	.word	0x401bffff
 801068c:	080119f0 	.word	0x080119f0
 8010690:	080119e0 	.word	0x080119e0

08010694 <fabsf>:
 8010694:	ee10 3a10 	vmov	r3, s0
 8010698:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801069c:	ee00 3a10 	vmov	s0, r3
 80106a0:	4770      	bx	lr
	...

080106a4 <_init>:
 80106a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106a6:	bf00      	nop
 80106a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106aa:	bc08      	pop	{r3}
 80106ac:	469e      	mov	lr, r3
 80106ae:	4770      	bx	lr

080106b0 <_fini>:
 80106b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106b2:	bf00      	nop
 80106b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106b6:	bc08      	pop	{r3}
 80106b8:	469e      	mov	lr, r3
 80106ba:	4770      	bx	lr
